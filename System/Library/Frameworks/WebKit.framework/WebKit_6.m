char *IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = (uint64_t *)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v5);
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7 || !*(_DWORD *)(v7 + 4))
    v6 = (uint64_t *)a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v6);
  v8 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 34);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(_BYTE *)(a2 + 35);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v11;
  return result;
}

_UNKNOWN **WebCore::CaptureDevice::label(WebCore::CaptureDevice *this)
{
  {
    WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
  }
  if (*((unsigned __int8 *)this + 8) - 1 > 1 || !*((_QWORD *)this + 2) || WTF::StringImpl::find() == -1)
    return (_UNKNOWN **)((char *)this + 16);
  else
    return &WebCore::CaptureDevice::label(void)const::airPods;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CaptureDevice,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int8 *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  _BOOL4 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  WTF::StringImpl *v81;
  char v82;
  WTF::StringImpl *v83;
  char v84;
  WTF::StringImpl *v85;
  char v86;

  IPC::Decoder::decode<WTF::String>(a1, &v85);
  v4 = IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v83);
  IPC::Decoder::decode<WTF::String>(a1, &v81);
  v5 = (unsigned __int8 *)a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if ((unint64_t)v5 <= v7)
    goto LABEL_63;
  v8 = (unsigned __int8 *)v6 + v7;
  v9 = v8 + 1;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v8 = v5;
    v29 = 0;
    goto LABEL_64;
  }
  LODWORD(v8) = *v8;
  if (v8 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (!v32 || (v71 = (int)v8, !v5))
    {
      v11 = 0;
      v13 = 0;
      v6 = 0;
      v10 = 1;
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32, v6);
    v11 = 0;
    v6 = (WTF::StringImpl *)*a1;
    v5 = (unsigned __int8 *)a1[1];
    v10 = 1;
    v9 = (unsigned __int8 *)a1[2];
    LODWORD(v8) = v71;
LABEL_5:
    if (!(_DWORD)v8)
      v11 = 0;
    if ((unint64_t)v5 <= v9 - (unsigned __int8 *)v6)
    {
      v70 = v11;
      v80 = v10;
      v13 = 0;
      v41 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v41 && v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v6 = (WTF::StringImpl *)*a1;
        v13 = a1[1];
      }
      else
      {
        v6 = 0;
      }
      v11 = v70;
      v10 = v80;
      goto LABEL_68;
    }
    v12 = v9 + 1;
    a1[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      v13 = (uint64_t)v5;
LABEL_68:
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        v65 = v11;
        v75 = v10;
        if (v13)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v33 + 16))(v33, v6, v13);
          LODWORD(v13) = 0;
          v6 = (WTF::StringImpl *)*a1;
          v5 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
        v11 = v65;
        v10 = v75;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        LODWORD(v13) = 0;
      }
      goto LABEL_70;
    }
    LODWORD(v13) = *v9;
    if (v13 < 2)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_11;
    }
LABEL_70:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (!v34)
    {
      v15 = 0;
      v17 = 0;
      v6 = 0;
      v14 = 1;
      goto LABEL_72;
    }
    v55 = v13;
    v62 = v11;
    v72 = v10;
    if (!v5)
    {
      v15 = 0;
      v17 = 0;
      v6 = 0;
      v14 = 1;
LABEL_72:
      *a1 = 0;
      a1[1] = 0;
      v35 = a1[3];
      if (v35)
      {
        v51 = v15;
        v58 = v14;
        v66 = v11;
        v76 = v10;
        if (v17)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v35 + 16))(v35, v6, v17);
          LODWORD(v17) = 0;
          v6 = (WTF::StringImpl *)*a1;
          v5 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
        v11 = v66;
        v10 = v76;
        v15 = v51;
        v14 = v58;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        LODWORD(v17) = 0;
      }
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v34 + 16))(v34, v6);
    v15 = 0;
    v6 = (WTF::StringImpl *)*a1;
    v5 = (unsigned __int8 *)a1[1];
    v14 = 1;
    v12 = (unsigned __int8 *)a1[2];
    v11 = v62;
    v10 = v72;
    LODWORD(v13) = v55;
LABEL_11:
    if (!(_DWORD)v13)
      v15 = 0;
    if ((unint64_t)v5 <= v12 - (unsigned __int8 *)v6)
    {
      v54 = v15;
      v61 = v14;
      v69 = v11;
      v79 = v10;
      v17 = 0;
      v40 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v40 && v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        v6 = (WTF::StringImpl *)*a1;
        v17 = a1[1];
      }
      else
      {
        v6 = 0;
      }
      v11 = v69;
      v10 = v79;
      v15 = v54;
      v14 = v61;
      goto LABEL_72;
    }
    v16 = v12 + 1;
    a1[2] = (uint64_t)(v12 + 1);
    if (!v6)
    {
      v17 = (uint64_t)v5;
      goto LABEL_72;
    }
    LODWORD(v17) = *v12;
    if (v17 < 2)
    {
      v18 = 0;
      v19 = 1;
      goto LABEL_17;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (!v36)
    {
      v19 = 0;
      v37 = 0;
      v6 = 0;
      v18 = 1;
      goto LABEL_76;
    }
    v45 = v17;
    v49 = v15;
    v56 = v14;
    v63 = v11;
    v73 = v10;
    if (!v5)
    {
      v19 = 0;
      v37 = 0;
      v6 = 0;
      v18 = 1;
      goto LABEL_76;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v36 + 16))(v36, v6);
    v19 = 0;
    v6 = (WTF::StringImpl *)*a1;
    v5 = (unsigned __int8 *)a1[1];
    v18 = 1;
    v16 = (unsigned __int8 *)a1[2];
    v11 = v63;
    v10 = v73;
    v15 = v49;
    v14 = v56;
    LODWORD(v17) = v45;
LABEL_17:
    if (!(_DWORD)v17)
      v19 = 0;
    if ((unint64_t)v5 <= v16 - (unsigned __int8 *)v6)
      break;
    a1[2] = (uint64_t)(v16 + 1);
    if (!v6)
    {
      v37 = (uint64_t)v5;
      goto LABEL_76;
    }
    v20 = *v16;
    if (v20 > 1)
      goto LABEL_78;
    v21 = 0;
    v22 = v20 != 0;
LABEL_23:
    if (v86 && v4 > 0xFFu && v84 && v82 && !v10 && !v14 && !v18 && !v21)
    {
      v23 = v85;
      if (v85)
        *(_DWORD *)v85 += 2;
      v24 = v83;
      if (v83)
        *(_DWORD *)v83 += 2;
      result = v81;
      if (v81)
        *(_DWORD *)v81 += 2;
      if (v15)
        v26 = 256;
      else
        v26 = 0;
      if (v19)
        v27 = 0x10000;
      else
        v27 = 0;
      if (v22)
        v28 = 0x1000000;
      else
        v28 = 0;
      *(_QWORD *)a2 = v23;
      *(_BYTE *)(a2 + 8) = v4;
      *(_QWORD *)(a2 + 16) = v24;
      *(_QWORD *)(a2 + 24) = result;
      *(_DWORD *)(a2 + 32) = v26 | v28 | v11 | v27;
      *(_BYTE *)(a2 + 40) = 1;
      goto LABEL_47;
    }
    __break(1u);
LABEL_63:
    v8 = 0;
    v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v29 = *a1;
        v8 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v8 = 0;
        v29 = 0;
      }
    }
LABEL_64:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v31 + 16))(v31, v29, v8);
        LODWORD(v8) = 0;
        v6 = (WTF::StringImpl *)*a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      LODWORD(v8) = 0;
    }
  }
  v44 = v18;
  v48 = v19;
  v53 = v15;
  v60 = v14;
  v68 = v11;
  v78 = v10;
  v37 = 0;
  v39 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v39 && v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    v6 = (WTF::StringImpl *)*a1;
    v37 = a1[1];
  }
  else
  {
    v6 = 0;
  }
  v11 = v68;
  v10 = v78;
  v15 = v53;
  v14 = v60;
  v18 = v44;
  v19 = v48;
LABEL_76:
  *a1 = 0;
  a1[1] = 0;
  v38 = a1[3];
  if (v38)
  {
    v43 = v18;
    v47 = v19;
    v52 = v15;
    v59 = v14;
    v67 = v11;
    v77 = v10;
    if (v37)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v38 + 16))(v38, v6, v37);
      v6 = (WTF::StringImpl *)*a1;
      v5 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v11 = v67;
    v10 = v77;
    v15 = v52;
    v14 = v59;
    v18 = v43;
    v19 = v47;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_78:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v5)
    {
      v42 = v18;
      v46 = v19;
      v50 = v15;
      v57 = v14;
      v64 = v11;
      v74 = v10;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v6);
      v11 = v64;
      v10 = v74;
      v15 = v50;
      v14 = v57;
      v18 = v42;
      v19 = v46;
      if (*a1)
      {
        v22 = 0;
        v21 = 1;
        goto LABEL_23;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v82)
    goto LABEL_51;
  result = v81;
LABEL_47:
  v81 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_51:
  if (v84)
  {
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v86)
  {
    result = v85;
    v85 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E71374(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (*(_BYTE *)(v16 - 40))
  {
    v18 = *(WTF::StringImpl **)(v16 - 48);
    *(_QWORD *)(v16 - 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 6u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t IPC::ArgumentCoder<WebCore::CaptureDeviceWithCapabilities,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  __int128 v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13[2];
  int v14;
  _BYTE v15[192];
  __int128 v16[12];
  char v17;
  WTF::StringImpl *v18;
  char v19;
  __int128 v20;
  int v21;
  char v22;

  IPC::Decoder::decode<WebCore::CaptureDevice>(a1, (uint64_t)&v18);
  IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((unint64_t *)a1, v16);
  if (!*a1)
    goto LABEL_20;
  if (!v22 || (v11 = v18, v12 = v19, v5 = v20, v18 = 0, v20 = 0uLL, *(_OWORD *)v13 = v5, v14 = v21, !v17))
  {
    __break(1u);
LABEL_20:
    *a2 = 0;
    a2[232] = 0;
    goto LABEL_16;
  }
  WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities((uint64_t)v15, v16);
  std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDeviceWithCapabilities>((uint64_t)a2, (uint64_t *)&v11);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v15, v6);
  v7 = v13[1];
  v13[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_16:
  if (v17)
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v16, v4);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v4);
}

void sub_196E715F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  WebCore::RealtimeMediaSourceCapabilities *v62;
  uint64_t v63;
  WTF::StringImpl *v65;

  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities(v62, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v65);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v65);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v65);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a62)
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&a38, v65);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100](v63 - 80, v65);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CaptureDevice>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CaptureDevice,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E716F0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::decode(a1, a2);
  if (!a2[192])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E71758(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::RealtimeMediaSourceCapabilities *v2;

  if (*((_BYTE *)v2 + 192))
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities(v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = *((_QWORD *)a2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = *((_QWORD *)a2 + 5);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 12));
  v12 = *((_QWORD *)a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
  v13 = *((_QWORD *)a2 + 9);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
  v14 = a2[20];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v15 = a2[21];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  v16 = a2[22];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v16;
  v17 = a2[23];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v17;
  LOBYTE(v17) = *((_BYTE *)a2 + 96);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 13);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 14);
  v18 = *((_QWORD *)a2 + 15);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
  v19 = *((_QWORD *)a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v19;
  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 34));
  v20 = *((_QWORD *)a2 + 19);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v20;
  v21 = *((_QWORD *)a2 + 20);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v21;
  LOBYTE(v17) = *((_BYTE *)a2 + 168);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  LOBYTE(v17) = *((_BYTE *)a2 + 169);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  LOBYTE(v17) = *((_BYTE *)a2 + 170);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  return IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(a1, (char *)a2 + 171);
}

WTF *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  unint64_t *v3;
  unint64_t v5;
  char v6;
  int v7;
  unint64_t v8;
  char v9;
  char v10;
  WTF *v11;
  char v12;
  WTF *v13;
  unsigned __int16 v14;
  void *v15;
  int v16;
  _BYTE *v17;
  int v18;
  int v19;
  _BYTE *v20;
  unsigned __int16 v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  WTF *result;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  char v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  char v42;
  char v43;
  WTF *v44;
  WTF *v45;
  size_t v46;
  void *v47;
  void *v48;
  WTF *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  WTF *v72;
  int v73;
  char v74;
  char v75;
  __int128 v76;
  unsigned int i;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  WTF *v81;
  int v82;
  int v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  WTF *v88;
  WTF *v89;
  __int128 v90;
  void *v91;
  int v92;
  unsigned int v93;
  __int128 v94;
  char v95;
  char v96;
  char v97;
  _BYTE v98[19];
  _BYTE v99[19];
  char v100;
  __int128 v101;
  char v102;
  void *__src;
  unsigned int v104;
  char v105;
  __int128 v106;
  char v107;
  WTF *v108;
  char v109;
  WTF *v110;
  char v111;
  __int128 v112;
  char v113;
  __int128 v114;
  char v115;
  __int128 v116;
  char v117;

  v3 = a1;
  v5 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(a1);
  LOBYTE(v7) = v6;
  v8 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
  v10 = v9;
  IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v116, v3);
  IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v114, v3);
  v11 = (WTF *)IPC::Decoder::decode<unsigned long long>(v3);
  if (!v12)
    goto LABEL_21;
  v13 = v11;
  v78 = 0uLL;
  if ((unint64_t)v11 >= 0x100000)
  {
    while (1)
    {
      v21 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>((uint64_t *)v3);
      LOWORD(v112) = v21;
      if (v21 < 0x100u)
        break;
      v19 = HIDWORD(v78);
      if (HIDWORD(v78) == DWORD2(v78))
      {
        v20 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v78, (WTF *)(HIDWORD(v78) + 1), (unint64_t)&v112);
        v19 = HIDWORD(v78);
        *(_BYTE *)(v78 + HIDWORD(v78)) = *v20;
      }
      else
      {
        *(_BYTE *)(v78 + HIDWORD(v78)) = v21;
      }
      HIDWORD(v78) = v19 + 1;
      v13 = (WTF *)((char *)v13 - 1);
      if (!v13)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v78, (void *)(v19 + 1));
        v72 = (WTF *)v78;
        v18 = DWORD2(v78);
        v2 = HIDWORD(v78);
        goto LABEL_11;
      }
    }
LABEL_19:
    v22 = (WTF *)v78;
    if ((_QWORD)v78)
    {
      *(_QWORD *)&v78 = 0;
      DWORD2(v78) = 0;
      WTF::fastFree(v22, v15);
    }
LABEL_21:
    v23 = (void *)*v3;
    v24 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    result = (WTF *)v3[3];
    if (result)
      goto LABEL_87;
    goto LABEL_22;
  }
  if (v11)
  {
    DWORD2(v78) = (_DWORD)v11;
    *(_QWORD *)&v78 = WTF::fastMalloc(v11);
    do
    {
      v14 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>((uint64_t *)v3);
      LOWORD(v112) = v14;
      if (v14 < 0x100u)
        goto LABEL_19;
      v16 = HIDWORD(v78);
      if (HIDWORD(v78) == DWORD2(v78))
      {
        v17 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v78, (WTF *)(HIDWORD(v78) + 1), (unint64_t)&v112);
        v16 = HIDWORD(v78);
        *(_BYTE *)(v78 + HIDWORD(v78)) = *v17;
      }
      else
      {
        *(_BYTE *)(v78 + HIDWORD(v78)) = v14;
      }
      v2 = v16 + 1;
      HIDWORD(v78) = v16 + 1;
      v13 = (WTF *)((char *)v13 - 1);
    }
    while (v13);
    v72 = (WTF *)v78;
    v18 = DWORD2(v78);
LABEL_11:
    v65 = v18;
  }
  else
  {
    v2 = 0;
    v65 = 0;
    v72 = 0;
  }
  for (i = 0; ; i = 1)
  {
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v112, v3);
    v70 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
    v75 = v26;
    v68 = v8;
    v69 = v5;
    v67 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
    v74 = v27;
    LOWORD(v78) = 0;
    IPC::Decoder::operator>><BOOL>(v3, &v78);
    v73 = BYTE1(v78);
    if (BYTE1(v78))
    {
      v66 = v78;
    }
    else
    {
      v51 = *v3;
      v52 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v53 = v3[3];
      if (v53 && v52)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
      v66 = 0;
    }
    IPC::Decoder::decode<WTF::String>((uint64_t *)v3, &v110);
    IPC::Decoder::decode<WTF::String>((uint64_t *)v3, &v108);
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v106, v3);
    IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&__src, (uint64_t *)v3);
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v101, v3);
    v28 = v3[1];
    v29 = *v3;
    v30 = v3[2] - *v3;
    v71 = a2;
    if (v28 <= v30)
    {
      v54 = 0;
      v55 = 0;
      *v3 = 0;
      v3[1] = 0;
      v56 = v3[3];
      if (v56)
      {
        if (v28)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v56 + 16))(v56);
          v55 = *v3;
          v54 = v3[1];
        }
        else
        {
          v54 = 0;
          v55 = 0;
        }
      }
      goto LABEL_92;
    }
    v31 = (unsigned __int8 *)(v29 + v30);
    v3[2] = (unint64_t)(v31 + 1);
    if (!v29)
    {
      v54 = v28;
      v55 = 0;
LABEL_92:
      *v3 = 0;
      v3[1] = 0;
      v57 = v3[3];
      if (v57 && v54)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
        v32 = 0;
        v29 = *v3;
        v28 = v3[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v32 = 0;
      }
      goto LABEL_94;
    }
    v32 = *v31;
    if (v32 < 2)
    {
      v33 = v7;
      v8 = 0;
      v34 = 1;
      goto LABEL_29;
    }
LABEL_94:
    *v3 = 0;
    v3[1] = 0;
    v58 = v3[3];
    if (v58)
    {
      v33 = v7;
      if (v28)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v29);
    }
    else
    {
      v33 = v7;
    }
    v34 = 0;
    v8 = 1;
LABEL_29:
    if (v32)
      a2 = (_BYTE *)v34;
    else
      a2 = 0;
    LOWORD(v78) = 0;
    IPC::Decoder::operator>><unsigned char>(v3, &v78);
    v35 = v78;
    if (BYTE1(v78))
      v36 = v78 > 2u;
    else
      v36 = 1;
    v7 = v36;
    v37 = v3[1];
    if (v7 == 1)
    {
      v59 = *v3;
      *v3 = 0;
      v3[1] = 0;
      v60 = v3[3];
      if (!v60 || !v37)
      {
        v35 = 0;
        v37 = 0;
        v38 = *v3;
LABEL_99:
        *v3 = 0;
        v3[1] = 0;
        v61 = v3[3];
        if (v61)
        {
          if (v37)
          {
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v61 + 16))(v61, v38);
            v62 = *v3;
            v37 = v3[1];
          }
          else
          {
            v62 = 0;
          }
        }
        else
        {
          v62 = 0;
          v37 = 0;
        }
        goto LABEL_101;
      }
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v60 + 16))(v60, v59);
      v35 = 0;
      v37 = v3[1];
    }
    v38 = *v3;
    v39 = v3[2] - *v3;
    if (v37 <= v39)
      goto LABEL_99;
    v40 = (unsigned __int8 *)(v38 + v39);
    v3[2] = (unint64_t)(v40 + 1);
    if (v38)
    {
      v41 = *v40;
      if (v41 < 2)
      {
        v5 = 0;
        v42 = 1;
        goto LABEL_43;
      }
      goto LABEL_104;
    }
    v62 = 0;
LABEL_101:
    *v3 = 0;
    v3[1] = 0;
    v63 = v3[3];
    if (!v63)
    {
      v37 = 0;
LABEL_103:
      v38 = 0;
      v41 = 0;
      goto LABEL_104;
    }
    if (!v37)
      goto LABEL_103;
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v63 + 16))(v63, v62);
    v41 = 0;
    v38 = *v3;
    v37 = v3[1];
LABEL_104:
    *v3 = 0;
    v3[1] = 0;
    v64 = v3[3];
    if (v64 && v37)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v64 + 16))(v64, v38);
    v42 = 0;
    v5 = 1;
LABEL_43:
    v43 = v41 ? v42 : 0;
    result = (WTF *)IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(v99, (uint64_t *)v3);
    if (!*v3)
      break;
    v3 = (unint64_t *)i;
    if (v33
      && v10
      && v117
      && v115
      && !i
      && v113
      && v75
      && v74
      && v73
      && v111
      && v109
      && v107
      && v105
      && v102
      && !(_DWORD)v8
      && !v7
      && !(_DWORD)v5
      && v100)
    {
      v76 = v101;
      *(_QWORD *)&v78 = v69;
      *((_QWORD *)&v78 + 1) = v68;
      v79 = v116;
      v80 = v114;
      v81 = v72;
      v82 = v65;
      v83 = v2;
      v84 = v112;
      v85 = v70;
      v86 = v67;
      v87 = v66;
      v44 = v110;
      v110 = 0;
      v45 = v108;
      v108 = 0;
      v88 = v44;
      v89 = v45;
      v90 = v106;
      v46 = v104;
      v91 = 0;
      v92 = 0;
      v93 = v104;
      if (v104)
      {
        v47 = (void *)WTF::fastMalloc((WTF *)v104);
        v92 = v46;
        v91 = v47;
        memcpy(v47, __src, v46);
      }
      v94 = v76;
      v95 = (char)a2;
      v96 = v35;
      v97 = v43;
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *(_DWORD *)&v98[15] = *(_DWORD *)&v99[15];
      *(_BYTE *)(WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities((uint64_t)v71, &v78) + 192) = 1;
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v78, v48);
      v49 = 0;
      goto LABEL_68;
    }
    __break(1u);
LABEL_87:
    if (v24)
      (*(void (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v23);
LABEL_22:
    v72 = 0;
  }
  v49 = v72;
  *v71 = 0;
  v71[192] = 0;
  LOBYTE(v3) = i;
  if (!v105)
    goto LABEL_70;
LABEL_68:
  result = (WTF *)__src;
  if (__src)
  {
    __src = 0;
    result = (WTF *)WTF::fastFree(result, v23);
  }
LABEL_70:
  if (v109)
  {
    result = v108;
    v108 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v111)
  {
    result = v110;
    v110 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v49)
    v50 = (char)v3;
  else
    v50 = 1;
  if ((v50 & 1) == 0)
    return (WTF *)WTF::fastFree(v49, v23);
  return result;
}

void sub_196E720F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,WTF::StringImpl *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF *a53,uint64_t a54,char a55)
{
  uint64_t v55;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  if (a55 && a53)
    WTF::fastFree(a53, a2);
  if (*(_BYTE *)(v55 - 216))
  {
    v57 = *(WTF::StringImpl **)(v55 - 224);
    *(_QWORD *)(v55 - 224) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (*(_BYTE *)(v55 - 200))
  {
    v58 = *(WTF::StringImpl **)(v55 - 208);
    *(_QWORD *)(v55 - 208) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (!a16)
    a22 = 1;
  if ((a22 & 1) == 0)
    WTF::fastFree(a16, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::LongCapabilityRange>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  unint64_t result;

  v2 = IPC::Decoder::decode<unsigned int>(a1);
  v3 = IPC::Decoder::decode<unsigned int>(a1);
  if (!*a1)
    goto LABEL_15;
  if (BYTE4(v2) && BYTE4(v3))
  {
    v5 = (int)v2 < (int)v3;
    if ((_DWORD)v2 == (_DWORD)v3)
      goto LABEL_13;
LABEL_10:
    if (v5)
      goto LABEL_11;
LABEL_15:
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v3 = a1[3];
    if (!v3)
      return 0;
LABEL_19:
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return 0;
  }
  if (BYTE4(v2))
    v5 = 0;
  else
    v5 = BYTE4(v3) != 0;
  if ((BYTE4(v2) == 0) == (BYTE4(v3) != 0))
    goto LABEL_10;
LABEL_11:
  if (!BYTE4(v2) || !BYTE4(v3))
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if ((int)v2 <= (int)v3)
    return v2 | ((unint64_t)v3 << 32);
  result = 48;
  __break(0xC471u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DoubleCapabilityRange>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double *v6;
  int v7;
  double v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  double *v13;
  double v14;
  int v15;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v10 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      v38 = a2;
      v34 = result;
      if (v2)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v3);
        a2 = v38;
        v20 = *v38;
        v10 = v38[1];
        result = v34;
      }
      else
      {
        v10 = 0;
        v20 = 0;
      }
    }
    goto LABEL_40;
  }
  v6 = (double *)(v3 + v4);
  a2[2] = (unint64_t)(v6 + 1);
  if (!v3)
  {
    v10 = v2;
    v20 = 0;
LABEL_40:
    *a2 = 0;
    a2[1] = 0;
    v8 = 0.0;
    v3 = a2[3];
    if (v3)
    {
      v37 = a2;
      v33 = result;
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t, double))(*(_QWORD *)v3 + 16))(v3, v20, v10, 0.0);
        v9 = 0;
        a2 = v37;
        v10 = *v37;
        v2 = v37[1];
        v7 = 1;
        v3 = *v37;
        result = v33;
        v8 = 0.0;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v9 = 0;
        v7 = 1;
      }
    }
    else
    {
      v10 = 0;
      v2 = 0;
      v9 = 0;
      v7 = 1;
    }
    goto LABEL_8;
  }
  v7 = 0;
  v8 = *v6;
  v9 = 1;
  v10 = v3;
LABEL_8:
  v11 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v11 || v2 - v11 <= 7)
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      v29 = v7;
      v31 = v9;
      v27 = v8;
      v39 = a2;
      v35 = result;
      if (v2)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v3);
        a2 = v39;
        v23 = *v39;
        v22 = v39[1];
        result = v35;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      v8 = v27;
      v7 = v29;
      v9 = v31;
    }
    goto LABEL_43;
  }
  v13 = (double *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  a2[2] = (unint64_t)(v13 + 1);
  if (!v3)
  {
    v22 = v2;
    v23 = 0;
LABEL_43:
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (!v25)
      goto LABEL_31;
    v28 = v7;
    v30 = v9;
    v26 = v8;
    v36 = a2;
    v32 = result;
    if (!v22)
    {
      v10 = 0;
      goto LABEL_46;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
    v10 = *v36;
    if (!*v36)
    {
LABEL_46:
      result = v32;
      a2 = v36;
      goto LABEL_31;
    }
    v18 = 0;
    v14 = 0.0;
    v17 = 1;
    result = v32;
    a2 = v36;
    v8 = v26;
    v7 = v28;
    v9 = v30;
    goto LABEL_29;
  }
  v14 = *v13;
  if ((v9 & 1) != 0)
  {
    if (v8 == v14)
      v15 = 0;
    else
      v15 = -127;
    if (v8 > v14)
      v15 = 1;
    if (v8 < v14)
      v15 = -1;
    if (v15 == -127 || (char)v15 >= 1)
      goto LABEL_31;
    goto LABEL_36;
  }
  v17 = 0;
  v18 = 1;
LABEL_29:
  if ((v18 & (v9 ^ 1) & 1) != 0 || v9 == v18)
  {
    if (v7 || v17)
    {
      __break(1u);
      goto LABEL_48;
    }
LABEL_36:
    if (v8 <= v14)
    {
      *(double *)result = v8;
      *(double *)(result + 8) = v14;
      *(_BYTE *)(result + 16) = 1;
      return result;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x196E72528);
  }
LABEL_31:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v19)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v10);
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  void *v5;
  WTF *v6;
  unsigned __int16 v7;
  int v8;
  _BYTE *v9;
  int v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF *result;
  BOOL v16;
  int v17;
  int v18;
  _BYTE *v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  WTF *v23;
  uint64_t v24;

  v4 = (WTF *)IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_12:
    v13 = *a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v16 = v14 == 0;
    else
      v16 = 1;
    if (!v16)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    return result;
  }
  v6 = v4;
  v23 = 0;
  v24 = 0;
  if ((unint64_t)v4 >= 0x100000)
  {
    while (1)
    {
      v20 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a2);
      v22 = v20;
      if (v20 < 0x100u)
        goto LABEL_25;
      v18 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        v19 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        v18 = HIDWORD(v24);
        *((_BYTE *)v23 + HIDWORD(v24)) = *v19;
      }
      else
      {
        *((_BYTE *)v23 + HIDWORD(v24)) = v20;
      }
      HIDWORD(v24) = v18 + 1;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, (void *)(v18 + 1));
        v17 = 0;
        *(_QWORD *)a1 = v23;
        v21 = v24;
        v23 = 0;
        v24 = 0;
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_19;
      }
    }
  }
  if (v4)
  {
    LODWORD(v24) = (_DWORD)v4;
    v23 = (WTF *)WTF::fastMalloc(v4);
    while (1)
    {
      v7 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a2);
      v22 = v7;
      if (v7 < 0x100u)
        break;
      v8 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        v9 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        v8 = HIDWORD(v24);
        *((_BYTE *)v23 + HIDWORD(v24)) = *v9;
      }
      else
      {
        *((_BYTE *)v23 + HIDWORD(v24)) = v7;
      }
      v10 = v8 + 1;
      HIDWORD(v24) = v10;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        v11 = v23;
        v12 = v24;
        goto LABEL_18;
      }
    }
LABEL_25:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v17 = 1;
    goto LABEL_26;
  }
  v10 = 0;
  v12 = 0;
  v11 = 0;
LABEL_18:
  v17 = 0;
  v23 = 0;
  *(_QWORD *)a1 = v11;
  HIDWORD(v24) = 0;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v10;
LABEL_19:
  *(_BYTE *)(a1 + 16) = 1;
LABEL_26:
  result = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v17)
    goto LABEL_12;
  return result;
}

void sub_196E72838(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 4);
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 6);
}

_QWORD *IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(_QWORD *a1, _BYTE *a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 4);
  return IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 6);
}

unint64_t IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::decode(uint64_t *a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoColorPrimaries>>(a1);
  v3 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoTransferCharacteristics>>(a1);
  v4 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoMatrixCoefficients>>(a1);
  v5 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (*a1)
  {
    if ((v2 & 0xFF0000) != 0 && (v3 & 0xFF0000) != 0 && (v4 & 0xFF0000) != 0 && (v5 & 0xFF0000) != 0)
      return ((unint64_t)(unsigned __int16)v4 << 32) | (v5 << 48) | (v3 << 16) | (unint64_t)(unsigned __int16)v2;
    __break(1u);
  }
  return 0;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoColorPrimaries>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoTransferCharacteristics>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoTransferCharacteristics>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoMatrixCoefficients>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoMatrixCoefficients>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::PlatformAudioTrackConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PlatformVideoTrackConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(a1, (char *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::RTCDataChannelIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = *a1;
  if (!*a1)
    goto LABEL_7;
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

void IPC::ArgumentCoder<WebCore::ContentRuleListResults::Result,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = a2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = a2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = a2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 8));
}

uint64_t IPC::ArgumentCoder<WebCore::ContentRuleListResults,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unsigned __int8 *v5;
  _BYTE *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  void *v63;
  void *v64;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  WTF::StringImpl *v94;
  unint64_t v95;
  char v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  WTF::StringImpl *v103;
  uint64_t v104;

  v5 = (unsigned __int8 *)a1[1];
  v6 = (_BYTE *)*a1;
  v7 = a1[2] - *a1;
  if ((unint64_t)v5 <= v7)
  {
    v37 = 0;
    v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        v38 = (_BYTE *)*a1;
        v37 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
    }
    goto LABEL_46;
  }
  v8 = &v6[v7];
  v9 = (uint64_t)&v6[v7 + 1];
  a1[2] = v9;
  if (!v6)
  {
    v37 = v5;
    v38 = 0;
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, _BYTE *, unsigned __int8 *))(*(_QWORD *)v40 + 16))(v40, v38, v37);
      v10 = 0;
      v6 = (_BYTE *)*a1;
      v5 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v10 = 0;
    }
    goto LABEL_48;
  }
  v10 = *v8;
  if (v10 < 2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_5;
  }
LABEL_48:
  *a1 = 0;
  a1[1] = 0;
  v41 = a1[3];
  if (!v41 || !v5)
  {
    v13 = 0;
    v42 = 0;
    v6 = 0;
    v11 = 1;
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v41 + 16))(v41, v6);
  v12 = 0;
  v6 = (_BYTE *)*a1;
  v5 = (unsigned __int8 *)a1[1];
  v11 = 1;
  v9 = a1[2];
LABEL_5:
  if (v10)
    v13 = (WTF::StringImpl *)v12;
  else
    v13 = 0;
  v14 = v9 - (_QWORD)v6;
  if ((unint64_t)v5 <= v14)
  {
    v69 = v11;
    v42 = 0;
    v70 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v5 && v70)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
      v6 = (_BYTE *)*a1;
      v42 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v6 = 0;
    }
    v11 = v69;
    goto LABEL_50;
  }
  v15 = &v6[v14];
  v16 = (uint64_t)&v6[v14 + 1];
  a1[2] = v16;
  if (!v6)
  {
    v42 = v5;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      v2 = v11;
      if (v42)
      {
        (*(void (**)(uint64_t, _BYTE *, unsigned __int8 *))(*(_QWORD *)v43 + 16))(v43, v6, v42);
        v17 = 0;
        v6 = (_BYTE *)*a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v17 = 0;
      }
      v11 = v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v17 = 0;
    }
    goto LABEL_52;
  }
  v17 = *v15;
  if (v17 < 2)
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
LABEL_52:
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (!v44)
  {
    LODWORD(v20) = 0;
    v22 = 0;
    v6 = 0;
    v18 = 1;
    goto LABEL_54;
  }
  v2 = v11;
  if (!v5)
  {
    LODWORD(v20) = 0;
    v22 = 0;
    v6 = 0;
    v18 = 1;
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      v85 = (int)v20;
      v2 = v18;
      v68 = v11;
      if (v22)
      {
        (*(void (**)(uint64_t, _BYTE *, unsigned __int8 *))(*(_QWORD *)v45 + 16))(v45, v6, v22);
        LODWORD(v22) = 0;
        v6 = (_BYTE *)*a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
      v11 = v68;
      v18 = v2;
      LODWORD(v20) = v85;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      LODWORD(v22) = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v44 + 16))(v44, v6);
  v19 = 0;
  v6 = (_BYTE *)*a1;
  v5 = (unsigned __int8 *)a1[1];
  v18 = 1;
  v16 = a1[2];
  v11 = v2;
LABEL_12:
  if (v17)
    LODWORD(v20) = v19;
  else
    LODWORD(v20) = 0;
  v21 = v16 - (_QWORD)v6;
  if ((unint64_t)v5 <= v21)
  {
    v86 = (int)v20;
    v2 = v18;
    v71 = v11;
    v22 = 0;
    v72 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v5 && v72)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
      v6 = (_BYTE *)*a1;
      v22 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v6 = 0;
    }
    v11 = v71;
    v18 = v2;
    LODWORD(v20) = v86;
    goto LABEL_54;
  }
  v22 = &v6[v21];
  v23 = v22 + 1;
  a1[2] = (uint64_t)(v22 + 1);
  if (!v6)
  {
    v22 = v5;
    goto LABEL_54;
  }
  LODWORD(v22) = *v22;
  if (v22 < 2)
  {
    v24 = 0;
    v25 = 1;
    goto LABEL_19;
  }
LABEL_56:
  *a1 = 0;
  a1[1] = 0;
  v46 = a1[3];
  if (!v46)
  {
    v25 = 0;
    v47 = 0;
    v6 = 0;
    v24 = 1;
    goto LABEL_58;
  }
  v80 = v18;
  v84 = (int)v20;
  v67 = v11;
  if (!v5)
  {
    v25 = 0;
    v47 = 0;
    v6 = 0;
    v24 = 1;
    LODWORD(v20) = v84;
LABEL_58:
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
    {
      v76 = v25;
      v79 = v24;
      v83 = (int)v20;
      v2 = v18;
      v66 = v11;
      if (v47)
      {
        (*(void (**)(uint64_t, _BYTE *, unsigned __int8 *))(*(_QWORD *)v48 + 16))(v48, v6, v47);
        v6 = (_BYTE *)*a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
      v11 = v66;
      v18 = v2;
      v24 = v79;
      LODWORD(v20) = v83;
      v25 = v76;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    goto LABEL_60;
  }
  v2 = (int)v22;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 16))(v46, v6);
  v25 = 0;
  v6 = (_BYTE *)*a1;
  v5 = (unsigned __int8 *)a1[1];
  v24 = 1;
  v23 = (unsigned __int8 *)a1[2];
  v11 = v67;
  v18 = v80;
  LODWORD(v20) = v84;
  LODWORD(v22) = v2;
LABEL_19:
  if (!(_DWORD)v22)
    v25 = 0;
  if ((unint64_t)v5 <= v23 - v6)
  {
    v77 = v25;
    v81 = v24;
    v87 = (int)v20;
    v2 = v18;
    v73 = v11;
    v47 = 0;
    v74 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v5 && v74)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      v6 = (_BYTE *)*a1;
      v47 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v6 = 0;
    }
    v11 = v73;
    v18 = v2;
    v24 = v81;
    LODWORD(v20) = v87;
    v25 = v77;
    goto LABEL_58;
  }
  a1[2] = (uint64_t)(v23 + 1);
  if (!v6)
  {
    v47 = v5;
    goto LABEL_58;
  }
  v26 = *v23;
  if (v26 <= 1)
  {
    v27 = v26 != 0;
    if ((v11 & 1) != 0)
      goto LABEL_127;
    v28 = 0;
    goto LABEL_26;
  }
LABEL_60:
  *a1 = 0;
  a1[1] = 0;
  v49 = a1[3];
  if (!v49)
  {
    v5 = 0;
LABEL_62:
    LOBYTE(v97) = 0;
    v102 = 0;
    *a1 = 0;
    a1[1] = 0;
    if (v49 && v5)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, 0);
    goto LABEL_30;
  }
  v75 = v25;
  v78 = v24;
  v82 = v11;
  if (!v5)
    goto LABEL_62;
  v2 = v18;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v49 + 16))(v49, v6);
  v6 = (_BYTE *)*a1;
  if (!*a1)
  {
    v5 = (unsigned __int8 *)a1[1];
    v49 = a1[3];
    goto LABEL_62;
  }
  v25 = v75;
  v24 = v78;
  v27 = v82;
  if (v82)
    goto LABEL_127;
  v18 = v2;
  v28 = 1;
LABEL_26:
  LOBYTE(v88) = (_BYTE)v13;
  if (v18)
    goto LABEL_127;
  BYTE1(v88) = (_BYTE)v20;
  if (v24)
    goto LABEL_127;
  BYTE2(v88) = v25;
  if (v28)
    goto LABEL_127;
  BYTE3(v88) = v27;
  v13 = (WTF::StringImpl *)&v89;
  v97 = v88;
  v89 = 0;
  v98 = 0;
  v90 = 0;
  v99 = 0;
  v91 = 0;
  v100 = 0;
  v92 = 0;
  v101 = 0;
  v102 = 1;
  WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v6);
  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v29);
LABEL_30:
  v30 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v6)
  {
    LOBYTE(v94) = 0;
    v96 = 0;
    goto LABEL_80;
  }
  v13 = (WTF::StringImpl *)v30;
  v103 = 0;
  v104 = 0;
  if (v30 >= 0x8000)
  {
    v20 = &v89;
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((uint64_t)&v88, a1);
      if (!(_BYTE)v92)
        break;
      if (HIDWORD(v104) == (_DWORD)v104)
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((unsigned int *)&v103, (unint64_t)&v88);
      }
      else
      {
        v50 = (char *)v103 + 32 * HIDWORD(v104);
        v51 = v88;
        v88 = 0;
        *(_QWORD *)v50 = v51;
        LODWORD(v51) = v89;
        v50[12] = BYTE4(v89);
        *((_DWORD *)v50 + 2) = v51;
        *((_QWORD *)v50 + 2) = 0;
        *((_QWORD *)v50 + 3) = 0;
        v52 = v90;
        v90 = 0;
        *((_QWORD *)v50 + 2) = v52;
        LODWORD(v52) = v91;
        LODWORD(v91) = 0;
        *((_DWORD *)v50 + 6) = v52;
        LODWORD(v52) = HIDWORD(v91);
        HIDWORD(v91) = 0;
        *((_DWORD *)v50 + 7) = v52;
        ++HIDWORD(v104);
      }
      std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v32);
      v13 = (WTF::StringImpl *)((char *)v13 - 1);
      if (!v13)
      {
        v53 = HIDWORD(v104);
        v13 = v103;
        if (v104 > HIDWORD(v104))
        {
          v27 = (uint64_t)v103;
          if (HIDWORD(v104))
          {
            if (HIDWORD(v104) >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x196E7359CLL);
            }
            v54 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v104)));
            LODWORD(v104) = v53;
            v103 = (WTF::StringImpl *)v54;
            v27 = (uint64_t)v13;
            if ((WTF::StringImpl *)v54 != v13)
            {
              WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(v13, (WTF::StringImpl *)((char *)v13 + 32 * v53), v54);
              v27 = (uint64_t)v103;
            }
          }
          if (v13)
            goto LABEL_128;
          v13 = (WTF::StringImpl *)v27;
        }
        goto LABEL_78;
      }
    }
LABEL_79:
    LOBYTE(v94) = 0;
    v96 = 0;
    std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v32);
    WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v55);
LABEL_80:
    v6 = (_BYTE *)*a1;
    v56 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v57 = a1[3];
    if (v57 && v56)
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v57 + 16))(v57, v6);
    if (*a1)
    {
      v27 = 1;
      goto LABEL_83;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v97, v6);
  }
  if (v30)
  {
    v31 = WTF::fastMalloc((WTF *)(32 * v30));
    LODWORD(v104) = (_DWORD)v13;
    v103 = (WTF::StringImpl *)v31;
    v20 = &v89;
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((uint64_t)&v88, a1);
      if (!(_BYTE)v92)
        goto LABEL_79;
      if (HIDWORD(v104) == (_DWORD)v104)
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((unsigned int *)&v103, (unint64_t)&v88);
      }
      else
      {
        v33 = (char *)v103 + 32 * HIDWORD(v104);
        v34 = v88;
        v88 = 0;
        *(_QWORD *)v33 = v34;
        LODWORD(v34) = v89;
        v33[12] = BYTE4(v89);
        *((_DWORD *)v33 + 2) = v34;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        v35 = v90;
        v90 = 0;
        *((_QWORD *)v33 + 2) = v35;
        LODWORD(v35) = v91;
        LODWORD(v91) = 0;
        *((_DWORD *)v33 + 6) = v35;
        LODWORD(v35) = HIDWORD(v91);
        HIDWORD(v91) = 0;
        *((_DWORD *)v33 + 7) = v35;
        ++HIDWORD(v104);
      }
      std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v32);
      v13 = (WTF::StringImpl *)((char *)v13 - 1);
      if (!v13)
      {
        v36 = v103;
        LODWORD(v20) = v104;
        v2 = HIDWORD(v104);
        goto LABEL_42;
      }
    }
  }
  v2 = 0;
  LODWORD(v20) = 0;
  v36 = 0;
LABEL_42:
  v103 = 0;
  v94 = v36;
  while (1)
  {
    v104 = 0;
    v95 = __PAIR64__(v2, v20);
    v96 = 1;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v6);
    v27 = 0;
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_86;
    }
LABEL_83:
    if (v102)
    {
      LODWORD(v88) = v97;
      v58 = v98;
      v98 = 0;
      v59 = v99;
      v99 = 0;
      v60 = v100;
      v100 = 0;
      v61 = v101;
      v101 = 0;
      if (!(_DWORD)v27)
        break;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    if ((WTF::StringImpl *)v27 == v13)
    {
      v103 = 0;
      LODWORD(v104) = 0;
    }
    WTF::fastFree(v13, v6);
    v13 = v103;
LABEL_78:
    v103 = 0;
    v94 = v13;
    LODWORD(v20) = v104;
    v2 = HIDWORD(v104);
  }
  v62 = v94;
  v94 = 0;
  v95 = 0;
  *(_DWORD *)a2 = v97;
  v89 = 0;
  *(_QWORD *)(a2 + 8) = v58;
  v90 = 0;
  *(_QWORD *)(a2 + 16) = v59;
  v91 = 0;
  *(_QWORD *)(a2 + 24) = v60;
  v92 = 0;
  *(_QWORD *)(a2 + 32) = v61;
  v93[0] = 0;
  *(_QWORD *)(a2 + 40) = v62;
  v93[1] = 0;
  *(_DWORD *)(a2 + 48) = (_DWORD)v20;
  *(_DWORD *)(a2 + 52) = v2;
  *(_BYTE *)(a2 + 56) = 1;
  WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v93, v6);
  WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v63);
  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v64);
LABEL_86:
  WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v6);
  return std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v97, v6);
}

void sub_196E735B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::ReportBody,void>::encode(IPC::Encoder *a1, WebCore::TestReportBody *a2)
{
  char v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(_QWORD *)a2 + 24))(a2) == 2)
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 0;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 5);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 6);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 7);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 8);
    v4 = *((_BYTE *)a2 + 72);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
    v5 = *((_WORD *)a2 + 37);
    *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v5;
    v6 = *((_QWORD *)a2 + 10);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
    v7 = *((_QWORD *)a2 + 11);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
    return;
  }
  if (!(*(unsigned int (**)(WebCore::TestReportBody *))(*(_QWORD *)a2 + 24))(a2))
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 1;
    v10 = *((_BYTE *)a2 + 12);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 2);
    v11 = (uint64_t *)((char *)a2 + 56);
LABEL_7:
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v11);
    return;
  }
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(_QWORD *)a2 + 24))(a2) == 1)
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 2;
    v8 = *((_BYTE *)a2 + 12);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 2);
    v9 = *((_BYTE *)a2 + 56);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
    return;
  }
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(_QWORD *)a2 + 24))(a2) == 4)
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 3;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 2);
    v12 = *((_QWORD *)a2 + 3);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 5);
    v13 = *((_QWORD *)a2 + 6);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v13);
    v13 = *((_QWORD *)a2 + 7);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v13);
    return;
  }
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(_QWORD *)a2 + 24))(a2) == 6)
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 4;
    v11 = (uint64_t *)WebCore::TestReportBody::message(a2);
    goto LABEL_7;
  }
}

void IPC::ArgumentCoder<WebCore::LinkIcon,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 56));
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
}

void IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 48));
}

uint64_t IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  IPC::Decoder::decode<std::optional<double>>(a1, &v15);
  IPC::Decoder::decode<std::optional<WTF::WallTime>>(a1, &v12);
  IPC::Decoder::decode<std::optional<WTF::WallTime>>(a1, &v9);
  result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!*a1)
    goto LABEL_9;
  if (!v17
    || (*(_QWORD *)&v6 = v15, BYTE8(v6) = v16, !v14)
    || (*(_QWORD *)&v7 = v12, BYTE8(v7) = v13, !v11)
    || (*(_QWORD *)&v8 = v9, BYTE8(v8) = v10, !v5))
  {
    __break(1u);
LABEL_9:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return result;
  }
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 52) = BYTE4(result);
  *(_BYTE *)(a2 + 56) = 1;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::span<unsigned short const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::VectorArgumentCoder<false,CGSize,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v2 + 16);
  v4 = *(_DWORD *)(v2 + 32);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(v2 + 36);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v2 + 16);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v2 + 32);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 48));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(v2 + 56));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(v2 + 72));
  v4 = *(_BYTE *)(v2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(v2 + 89);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v2 + 96);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v6;
  void *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  char v16;
  char v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  int v21;
  char v22;
  char v23;
  WTF::StringImpl *result;
  void *v25;
  char v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD v61[2];
  WTF::StringImpl *v62;
  _BYTE v63[32];
  __int16 v64;
  _QWORD v65[2];
  char v66;
  WTF::StringImpl *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v75);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v72);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v69);
  IPC::Decoder::decode<WTF::String>(a1, &v67);
  IPC::Decoder::decode<std::optional<double>>(a1, &v58);
  IPC::Decoder::decode<std::optional<double>>(a1, &v78);
  v8 = *a1;
  if (!*a1)
    goto LABEL_56;
  if (!(_BYTE)v59 || !v80)
    goto LABEL_55;
  v3 = *(_QWORD *)((char *)&v58 + 1);
  v9 = v58;
  *(_QWORD *)((char *)&v82 + 7) = v78;
  HIBYTE(v82) = v79;
  v81 = v82;
  v10 = (char *)v8;
  while (1)
  {
    v11 = a1[1];
    if (v11 <= a1[2] - (uint64_t)v10)
    {
      v48 = 0;
      v49 = 0;
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (v50)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
          v49 = *a1;
          v48 = a1[1];
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
      }
      goto LABEL_59;
    }
    v12 = (unsigned __int8 *)a1[2];
    v13 = v12 + 1;
    a1[2] = (uint64_t)(v12 + 1);
    if (!v10)
    {
      v48 = v11;
      v49 = 0;
LABEL_59:
      *a1 = 0;
      a1[1] = 0;
      v51 = a1[3];
      if (v51 && v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
        v14 = 0;
        v10 = (char *)*a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v10 = 0;
        v14 = 0;
      }
      goto LABEL_61;
    }
    v14 = *v12;
    if (v14 < 2)
    {
      v15 = 0;
      v16 = 1;
      goto LABEL_9;
    }
LABEL_61:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (!v52 || !v11)
    {
      v17 = 0;
      v53 = 0;
      v10 = 0;
      v15 = 1;
LABEL_63:
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54 && v53)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v54 + 16))(v54, v10, v53);
        v20 = 0;
        v10 = (char *)*a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v10 = 0;
        v20 = 0;
      }
      goto LABEL_65;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v52 + 16))(v52, v10);
    v16 = 0;
    v10 = (char *)*a1;
    v11 = a1[1];
    v15 = 1;
    v13 = (unsigned __int8 *)a1[2];
LABEL_9:
    if (v14)
      v17 = v16;
    else
      v17 = 0;
    v18 = v13 - (unsigned __int8 *)v10;
    if (v11 <= v18)
    {
      v53 = 0;
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v57 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        v10 = (char *)*a1;
        v53 = a1[1];
      }
      else
      {
        v10 = 0;
      }
      goto LABEL_63;
    }
    v19 = &v10[v18];
    a1[2] = (uint64_t)(v19 + 1);
    if (!v10)
    {
      v53 = v11;
      goto LABEL_63;
    }
    v20 = *v19;
    if (v20 < 2)
    {
      v21 = 0;
      v22 = 1;
      goto LABEL_16;
    }
LABEL_65:
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (v55 && v11)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v55 + 16))(v55, v10);
    v22 = 0;
    v21 = 1;
LABEL_16:
    if (v20)
      v23 = v22;
    else
      v23 = 0;
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v78);
    LOWORD(v58) = 0;
    result = (WTF::StringImpl *)IPC::Decoder::operator>><unsigned char>(a1, &v58);
    v26 = v58;
    if (BYTE1(v58))
      v27 = v58 > 2u;
    else
      v27 = 1;
    v28 = v27;
    if (v28 == 1)
    {
      v25 = (void *)*a1;
      v56 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = (WTF::StringImpl *)a1[3];
      if (result && v56)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v25);
      v26 = 0;
    }
    if (!*a1)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 120) = 0;
      goto LABEL_41;
    }
    if (v77)
    {
      v29 = v75;
      *(_QWORD *)&v58 = v75;
      v30 = v76;
      v31 = HIDWORD(v76);
      v75 = 0;
      v76 = 0;
      *((_QWORD *)&v58 + 1) = __PAIR64__(v31, v30);
      if (v74)
      {
        v32 = v72;
        v59 = v72;
        v33 = v73;
        v34 = HIDWORD(v73);
        v72 = 0;
        v73 = 0;
        v60 = __PAIR64__(v34, v33);
        if (v71)
        {
          v61[1] = 0;
          v35 = v69;
          v36 = v70;
          v69 = 0;
          v70 = 0;
          if (v68)
          {
            v37 = v67;
            v67 = 0;
            if (v8)
            {
              v63[0] = v9;
              *(_QWORD *)&v63[1] = v3;
              *(_OWORD *)&v63[9] = v81;
              if (!v15)
              {
                LOBYTE(v64) = v17;
                if (!v21)
                {
                  HIBYTE(v64) = v23;
                  if (v80)
                  {
                    v38 = v78;
                    v39 = v79;
                    v78 = 0;
                    v79 = 0;
                    if (!v28)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_55:
    __break(1u);
LABEL_56:
    v46 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v46)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 16))(v47, 0);
      v9 = 0;
      v10 = (char *)*a1;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
  }
  v66 = v26;
  *(_QWORD *)&v58 = 0;
  *(_QWORD *)a3 = v29;
  *((_QWORD *)&v58 + 1) = 0;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a3 + 12) = v31;
  v59 = 0;
  *(_QWORD *)(a3 + 16) = v32;
  v60 = 0;
  *(_DWORD *)(a3 + 24) = v33;
  *(_DWORD *)(a3 + 28) = v34;
  *(_QWORD *)(a3 + 32) = v35;
  *(_QWORD *)(a3 + 40) = v36;
  v61[0] = 0;
  v62 = 0;
  *(_QWORD *)(a3 + 48) = v37;
  v40 = *(_OWORD *)v63;
  v41 = *(_OWORD *)&v63[16];
  *(_WORD *)(a3 + 88) = v64;
  *(_OWORD *)(a3 + 72) = v41;
  *(_OWORD *)(a3 + 56) = v40;
  v65[0] = 0;
  *(_QWORD *)(a3 + 96) = v38;
  v65[1] = 0;
  *(_QWORD *)(a3 + 104) = v39;
  *(_BYTE *)(a3 + 112) = v26;
  *(_BYTE *)(a3 + 120) = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v63);
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v42);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v44);
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v45);
LABEL_41:
  if (v80)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v25);
  if (v68)
  {
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v71)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v25);
  if (v74)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v25);
  if (v77)
    return (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v25);
  return result;
}

void sub_196E740F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a32)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, a2);
  if (a38)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a34, a2);
  if (a44)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a40, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  char v16;
  char v17;
  WTF::StringImpl *result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  unsigned __int8 v36;
  WTF::StringImpl *v37;
  unsigned __int8 v38;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v22 = v4;
      v23 = 0;
      goto LABEL_37;
    }
    v9 = 0;
    v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v5, v4);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25 && v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    v10 = 0;
    v9 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::String>(a1, &v37);
    IPC::Decoder::decode<WTF::String>(a1, &v35);
    v11 = (unsigned __int8 *)a1[1];
    v12 = *a1;
    v13 = a1[2] - *a1;
    if ((unint64_t)v11 <= v13)
    {
      v14 = 0;
      v26 = 0;
      *a1 = 0;
      a1[1] = 0;
      v27 = a1[3];
      if (v27)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
          v26 = *a1;
          v14 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v14 = 0;
          v26 = 0;
        }
      }
      goto LABEL_40;
    }
    v14 = (unsigned __int8 *)(v12 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v12)
    {
      v14 = v11;
      v26 = 0;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        if (v14)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v28 + 16))(v28, v26, v14);
          LODWORD(v14) = 0;
          v12 = *a1;
          v11 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v14) = 0;
      }
      goto LABEL_42;
    }
    LODWORD(v14) = *v14;
    if (v14 < 2)
    {
      v15 = 0;
      v16 = 1;
      goto LABEL_12;
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      v30 = (int)v14;
      if (v11)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v12);
      v16 = 0;
      v15 = 1;
      LODWORD(v14) = v30;
    }
    else
    {
      v16 = 0;
      v15 = 1;
    }
LABEL_12:
    v17 = (_DWORD)v14 ? v16 : 0;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v32, a1);
    v5 = *a1;
    if (!*a1)
      break;
    if (!v9)
    {
      v5 = v38;
      if (v38)
      {
        v5 = (uint64_t)v37;
        v37 = 0;
        v4 = v36;
        if (v36)
        {
          v4 = (unint64_t)v35;
          v35 = 0;
          if (!v15)
          {
            if (v34)
            {
              v20 = v32;
              v32 = 0;
              *(_QWORD *)a2 = v10;
              *(_QWORD *)(a2 + 8) = v5;
              *(_QWORD *)(a2 + 16) = v4;
              *(_BYTE *)(a2 + 24) = v17;
              v31[0] = 0;
              *(_QWORD *)(a2 + 32) = v20;
              v31[1] = 0;
              v21 = v33;
              v33 = 0;
              *(_QWORD *)(a2 + 40) = v21;
              *(_BYTE *)(a2 + 48) = 1;
              WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v19);
              result = 0;
              goto LABEL_22;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
LABEL_22:
  if (v34)
    result = (WTF::StringImpl *)WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v19);
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v38)
  {
    result = v37;
    v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7456C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  uint64_t v20;
  WTF::StringImpl *v22;

  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (*(_BYTE *)(v20 - 56))
  {
    v22 = *(WTF::StringImpl **)(v20 - 64);
    *(_QWORD *)(v20 - 64) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, a2);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E74630(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WorkerOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  v5 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (*a1)
  {
    if (v4 > 0xFFu && v5 > 0xFFu && v10)
    {
      v8 = v9;
      *(_WORD *)a2 = v4 | (unsigned __int16)(v5 << 8);
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  __int16 v4;

  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 80);
  v4 = *(_WORD *)(a2 + 128);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 136));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  char v10;
  _BYTE v11[16];
  WTF::StringImpl *v12;
  char v13;
  char v14;
  _BYTE v15[16];
  WTF::StringImpl *v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  WTF::StringImpl *v22;
  _OWORD v23[2];
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v11);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(a1, (uint64_t)v23);
  v4 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (!*a1)
    goto LABEL_24;
  if (!v14
    || (result = (WTF::StringImpl *)std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)v15, (uint64_t)v11), !v25)|| (v18 = v23[0], v19 = v23[1], LOBYTE(v20) = v24, (v4 & 0xFF0000) == 0)|| (v21 = v4, !v10))
  {
    __break(1u);
LABEL_24:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 144) = 0;
    goto LABEL_11;
  }
  v7 = v9;
  v9 = 0;
  v22 = v7;
  result = (WTF::StringImpl *)std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v15);
  v8 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = v20;
  *(_WORD *)(a2 + 128) = v21;
  *(_QWORD *)(a2 + 136) = v22;
  *(_BYTE *)(a2 + 144) = 1;
  v22 = 0;
  if (v17)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_11:
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v14)
  {
    if (v13)
    {
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E74924(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41)
{
  if (a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, a2);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a32 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if ((_BYTE)a21 && a19 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E74A54(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 72))
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<__SecTrust *,void>::encode((uint64_t)a1);
  IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(a1, (uint64_t)(a2 + 7));
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)(a2 + 10));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 13);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, (WebCore::ResourceError *)(a2 + 14));
}

void IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  __int128 v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  const void *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char v31;
  __int16 v32;
  __int128 v33;
  _QWORD v34[7];
  uint64_t v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  __int16 v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  const void *v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  unsigned int *v65;
  char v66;

  IPC::Decoder::decode<WebCore::ScriptBuffer>(a1, &v65);
  IPC::Decoder::decode<WTF::URL>(a1, &v61);
  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&v59);
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v54, a1);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v51, a1);
  IPC::Decoder::decode<WTF::String>(a1, &v49);
  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v40);
  if (!*a1)
    goto LABEL_30;
  if (!v66)
    goto LABEL_29;
  v5 = v65;
  v65 = 0;
  v24 = v5;
  if (!v64)
    goto LABEL_29;
  v6 = (uint64_t)v61;
  v61 = 0;
  v25 = v6;
  v26 = v62;
  v27 = v63;
  LODWORD(v62) = v62 & 0xFFFFFFFE;
  if (!v60)
    goto LABEL_29;
  v7 = v59;
  v59 = 0;
  *(_QWORD *)&v28 = v7;
  if (!v58)
    goto LABEL_29;
  *((_QWORD *)&v28 + 1) = v54;
  v8 = v55;
  v54 = 0;
  v55 = 0;
  v29 = v8;
  v30 = v56;
  v31 = v57;
  if (!v53 || (v32 = v51, v9 = v52, v52 = 0uLL, v33 = v9, !v50) || (v10 = v49, v49 = 0, v34[0] = v10, !v48))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 192) = 0;
    goto LABEL_10;
  }
  v11 = v40;
  v40 = 0uLL;
  *(_OWORD *)&v34[1] = v11;
  *(_OWORD *)&v34[3] = v41;
  *(_OWORD *)&v34[5] = v42;
  LODWORD(v41) = v41 & 0xFFFFFFFE;
  v35 = v43;
  v36 = v44;
  v37 = v45;
  v12 = v46;
  v43 = 0;
  v46 = 0;
  v38 = v12;
  v39 = v47;
  v24 = 0;
  *(_QWORD *)a2 = v5;
  WTF::URL::URL(a2 + 8, &v25);
  v13 = v28;
  v28 = 0u;
  *(_OWORD *)(a2 + 48) = v13;
  *(_QWORD *)&v13 = v29;
  v29 = 0;
  *(_QWORD *)(a2 + 64) = v13;
  *(_DWORD *)(a2 + 72) = v30;
  *(_BYTE *)(a2 + 76) = v31;
  *(_WORD *)(a2 + 80) = v32;
  v14 = v33;
  v33 = 0u;
  *(_OWORD *)(a2 + 88) = v14;
  v15 = *(_OWORD *)v34;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(a2 + 104) = v15;
  WTF::URL::URL(a2 + 120, &v34[2]);
  v16 = v38;
  *(_QWORD *)(a2 + 160) = v35;
  *(_DWORD *)(a2 + 168) = v36;
  *(_WORD *)(a2 + 172) = v37;
  v35 = 0;
  v38 = 0;
  *(_QWORD *)(a2 + 176) = v16;
  *(_BYTE *)(a2 + 184) = v39;
  *(_BYTE *)(a2 + 192) = 1;
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v24, v17);
LABEL_10:
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v4);
  if (v50)
  {
    v19 = v49;
    v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v18);
  if (v58)
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v20);
  if (v60)
  {
    v21 = v59;
    v59 = 0;
    if (v21)
      CFRelease(v21);
  }
  if (v64)
  {
    v22 = v61;
    v61 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v66)
  {
    v23 = v65;
    v65 = 0;
    if (v23)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v20);
  }
}

void sub_196E74E4C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const void *v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  void *v49;
  const void *v50;
  WTF::StringImpl *v51;
  unsigned int *v52;

  v38 = *(WTF::StringImpl **)(v33 + 112);
  *(_QWORD *)(v33 + 112) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, a2);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = *(WTF::StringImpl **)(v33 + 104);
  *(_QWORD *)(v33 + 104) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, a2);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = *(WTF::StringImpl **)(v33 + 96);
  *(_QWORD *)(v33 + 96) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = *(WTF::StringImpl **)(v33 + 88);
  *(_QWORD *)(v33 + 88) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35, a2);
  v43 = *(const void **)(v33 + 48);
  *(_QWORD *)(v33 + 48) = 0;
  if (v43)
    CFRelease(v43);
  v44 = *v34;
  *v34 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *(unsigned int **)v33;
  *(_QWORD *)v33 = 0;
  if (v45)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v45, v42);
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&a9, v42);
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33, v46);
  if (*(_BYTE *)(v36 - 200))
  {
    v48 = *(WTF::StringImpl **)(v36 - 208);
    *(_QWORD *)(v36 - 208) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v36 - 192, v47);
  if (*(_BYTE *)(v36 - 136))
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36 - 160, v49);
  if (*(_BYTE *)(v36 - 120))
  {
    v50 = *(const void **)(v36 - 128);
    *(_QWORD *)(v36 - 128) = 0;
    if (v50)
      CFRelease(v50);
  }
  if (*(_BYTE *)(v36 - 72))
  {
    v51 = *(WTF::StringImpl **)(v36 - 112);
    *(_QWORD *)(v36 - 112) = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v49);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  if (*(_BYTE *)(v36 - 56))
  {
    v52 = *(unsigned int **)(v36 - 64);
    *(_QWORD *)(v36 - 64) = 0;
    if (v52)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v52, v49);
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::ScriptBuffer>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E75074(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int *v4;

  if (*(_BYTE *)(v2 + 8))
  {
    v4 = *(unsigned int **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 104));
}

uint64_t IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __n128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  _BYTE v19[24];
  int v20;
  _BYTE v21[24];
  int v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  WTF::StringImpl *v26;
  _BYTE v27[32];
  _BYTE v28[40];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v27);
  IPC::Decoder::decode<WTF::URL>(a1, &v14);
  IPC::Decoder::decode<WTF::String>(a1, &v12);
  if (!*a1)
    goto LABEL_25;
  if (!v28[32])
    goto LABEL_24;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v19, (uint64_t)v27);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v21, (uint64_t)v28);
  if (!v17 || (v5 = v14, v14 = 0, v23 = v5, v24 = v15, v25 = v16, LODWORD(v15) = v15 & 0xFFFFFFFE, !v13))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
    goto LABEL_13;
  }
  v6 = v12;
  v12 = 0;
  v26 = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)v19);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 32, (uint64_t)v21);
  v7.n128_f64[0] = WTF::URL::URL(a2 + 64, (uint64_t *)&v23);
  v8 = v23;
  *(_QWORD *)(a2 + 104) = v26;
  *(_BYTE *)(a2 + 112) = 1;
  v26 = 0;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v22 != -1)
    ((void (*)(char *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v22])(&v18, v21, v7);
  v22 = -1;
  if (v20 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v20])(&v18, v19);
LABEL_13:
  if (v13)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  if (v17)
  {
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27);
}

void sub_196E752E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;

  v40 = v36;
  v46 = v40;
  v42 = *(unsigned int *)(v40 + 56);
  if ((_DWORD)v42 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v42])(&a22, v38);
  v43 = *(unsigned int *)(v46 + 24);
  *(_DWORD *)(v46 + 56) = -1;
  if ((_DWORD)v43 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v43])(&a22, v46);
  *(_DWORD *)(v46 + 24) = -1;
  v44 = a36;
  a36 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = a31;
  a31 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, a2);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (a30 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a30])(&a22, v37);
  a30 = -1;
  if (a26 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a26])(&a22, &a23);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100](v39 - 112);
  _Unwind_Resume(a1);
}

void sub_196E754A4()
{
  JUMPOUT(0x196E7549CLL);
}

char *IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationOptions,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 9);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  __n128 v6;
  WTF::StringImpl *v7[5];
  char v8;
  char v9;
  _BYTE v10[24];
  int v11;
  WTF::StringImpl *v12;
  _BYTE v13[24];
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v13);
  result = IPC::Decoder::decode<WTF::URL>(a1, v7);
  if (!*a1)
    goto LABEL_20;
  if (!v15 || !v8)
  {
    __break(1u);
LABEL_20:
    *a2 = 0;
    a2[72] = 0;
    goto LABEL_10;
  }
  MEMORY[0x19AEB35DC](v10, v13, v7);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v10);
  v6.n128_f64[0] = WTF::URL::URL((uint64_t)(a2 + 32), (uint64_t *)&v12);
  a2[72] = 1;
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if (v11 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v9, v10, v6);
LABEL_10:
  if (v8)
  {
    result = v7[0];
    v7[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v15)
  {
    if (v14 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(v10, v13);
  }
  return result;
}

void sub_196E756C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,WTF::StringImpl *a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;

  v26 = v24;
  v28 = v26;
  v29 = *(unsigned int *)(v26 + 24);
  if ((_DWORD)v29 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v29])(&a19, v28);
  *(_DWORD *)(v28 + 24) = -1;
  v30 = a24;
  a24 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (a23 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a23])(&a19, &a20);
  if (a14 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (*(_BYTE *)(v25 - 32))
  {
    v31 = *(unsigned int *)(v25 - 40);
    if ((_DWORD)v31 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v31])(&a20, v25 - 64);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(a1, a2);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 80));
  LOBYTE(v4) = *(_BYTE *)(a2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 136);
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 208);
  return IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 280);
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE v24[16];
  WTF::StringImpl *v25;
  char v26;
  char v27;
  _BYTE v28[16];
  WTF::StringImpl *v29;
  char v30;
  char v31;
  _BYTE v32[16];
  WTF::StringImpl *v33;
  char v34;
  char v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  _BYTE v41[24];
  int v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  char v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  char v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  char v60;
  _BYTE v61[32];
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v61);
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::URL>(a1, &v36);
  v7 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v8 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v10 = v9;
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v32);
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v28);
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v24);
  if (!*a1)
    goto LABEL_60;
  if (!v65)
    goto LABEL_59;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v41, (uint64_t)v61);
  v12 = v62;
  v62 = 0;
  v43 = v12;
  v44 = v63;
  v45 = v64;
  LODWORD(v63) = v63 & 0xFFFFFFFE;
  if (!v6)
    goto LABEL_59;
  v46 = v4;
  if (!v39)
    goto LABEL_59;
  v13 = v36;
  v36 = 0;
  v47 = v13;
  v48 = v37;
  v49 = v38;
  LODWORD(v37) = v37 & 0xFFFFFFFE;
  if (v7 <= 0xFFu
    || (v50 = v7, !v10)
    || (v51 = v8, !v35)
    || (std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v52, (uint64_t)v32), !v31)|| (std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v55, (uint64_t)v28), !v27))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    *a2 = 0;
    a2[352] = 0;
    goto LABEL_35;
  }
  std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v58, (uint64_t)v24);
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)a2, (uint64_t)v41);
  a2[352] = 1;
  if (v60)
  {
    v14 = v59;
    v59 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  if (v57)
  {
    v15 = v56;
    v56 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (v54)
  {
    v16 = v53;
    v53 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v17 = v47;
  v47 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v43;
  v43 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v11);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v42 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v42])(&v40, v41);
LABEL_35:
  if (v27)
  {
    if (v26)
    {
      v19 = v25;
      v25 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v11);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (v31)
  {
    if (v30)
    {
      v20 = v29;
      v29 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v11);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v35)
  {
    if (v34)
    {
      v21 = v33;
      v33 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v11);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  if (v39)
  {
    v22 = v36;
    v36 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v11);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v11);
}

void sub_196E75C04(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,char a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,int a40,char a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,int a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,WTF::StringImpl *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,WTF::StringImpl *a63)
{
  WTF::StringImpl *a71;
  char a72;
  uint64_t v72;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;

  if (LOBYTE(STACK[0x280]))
  {
    v74 = (WTF::StringImpl *)STACK[0x250];
    STACK[0x250] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, a2);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (LOBYTE(STACK[0x238]))
  {
    v75 = (WTF::StringImpl *)STACK[0x208];
    STACK[0x208] = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, a2);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (a72)
  {
    v76 = a71;
    a71 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, a2);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  v77 = a63;
  a63 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, a2);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = a57;
  a57 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, a2);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (a56 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a56])(&a52, &a53);
  if (a19 && a17 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a30 && a28 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a41 && a39 && a33)
  {
    if (*(_DWORD *)a33 == 2)
      WTF::StringImpl::destroy(a33, a2);
    else
      *(_DWORD *)a33 -= 2;
  }
  if (a47 && a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100](v72 - 152, a2);
  _Unwind_Resume(a1);
}

void sub_196E75E1C()
{
  JUMPOUT(0x196E75E14);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::decode(a1, a2);
  if (!a2[72])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E75E78(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 6);
}

unsigned int *IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  WTF::StringImpl *v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  unsigned int *v19;
  char v20;

  IPC::Decoder::decode<WebCore::ScriptBuffer>(a1, &v19);
  IPC::Decoder::decode<WTF::URL>(a1, &v15);
  result = (unsigned int *)IPC::Decoder::decode<WTF::String>(a1, &v13);
  if (!*a1)
    goto LABEL_25;
  if (!v20)
    goto LABEL_24;
  v6 = v19;
  v19 = 0;
  if (!v18 || (v7 = v15, v15 = 0, v9 = v7, v10 = v16, v11 = v17, LODWORD(v16) = v16 & 0xFFFFFFFE, !v14))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_10;
  }
  v12 = v13;
  v13 = 0;
  *(_QWORD *)a2 = v6;
  WTF::URL::URL(a2 + 8, (uint64_t *)&v9);
  v8 = v9;
  *(_QWORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 56) = 1;
  v12 = 0;
  v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = 0;
LABEL_10:
  if (v14)
  {
    result = (unsigned int *)v13;
    v13 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *result -= 2;
    }
  }
  if (v18)
  {
    result = (unsigned int *)v15;
    v15 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *result -= 2;
    }
  }
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_196E76048(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  unsigned int **v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int *v28;
  unsigned int *v29;

  v26 = v24;
  v28 = *v26;
  *v26 = 0;
  if (v28)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, a2);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a24 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (*(_BYTE *)(v25 - 24))
  {
    v29 = *(unsigned int **)(v25 - 32);
    *(_QWORD *)(v25 - 32) = 0;
    if (v29)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(IPC::Encoder *a1, WebCore::ScriptBuffer *this)
{
  uint64_t v3;
  _BYTE v4[24];
  unsigned int v5;
  char v6;

  WebCore::ScriptBuffer::ipcData(this);
  v3 = v5;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(a1, (unint64_t)v4, v3);
  if (v5 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
     + v5))((int)&v6, (WTF::MachSendRight *)v4);
}

void sub_196E761C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  uint64_t v13;

  if (a13 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
     + a13))(v13 - 33, (WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[24];
  unsigned int v5;
  char v6;
  char v7;

  IPC::Decoder::decode<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(a1, (uint64_t)v4);
  if (*a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WebCore::ScriptBuffer::fromIPCData();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6)
  {
    if (v5 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
       + v5))((int)&v7, (WTF::MachSendRight *)v4);
  }
}

void sub_196E76280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
       + a12))(v14 - 17, (WTF::MachSendRight *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E76314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 32))
  {
    v15 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v15 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
       + v15))((int)&a13, (WTF::MachSendRight *)v13);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(a1, a2 + 24);
  v4 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)(a2 + 384));
  IPC::ArgumentCoder<__SecTrust *,void>::encode((uint64_t)a1);
  IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(a1, a2 + 400);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 424);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 448));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 456));
  LOBYTE(v4) = *(_BYTE *)(a2 + 496);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 497);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 498));
  IPC::ArgumentCoder<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, a2 + 504);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 528);
  LOBYTE(v4) = *(_BYTE *)(a2 + 576);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 584));
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t Table;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl **v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  WTF::StringImpl **v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unsigned int *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  const WTF::StringImpl *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  char v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int *v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned int *v72;
  WTF::StringImpl *v73;
  WTF **v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int *v80;
  WTF::StringImpl *v81;
  int v82;
  unsigned int *v83;
  CFTypeRef v84;
  uint64_t v85;
  __int128 v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  unint64_t v95;
  __int128 v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  char v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  void *v103;
  CFTypeRef v104;
  unsigned int *v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  unint64_t v126;
  unsigned int v127;
  unsigned __int16 v128;
  char v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  WTF::StringImpl *v139;
  __int128 v140;
  __int128 v141;
  char v142;
  WTF::StringImpl *v143;
  char v144;
  __int16 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  CFTypeRef cf;
  char v154;
  unsigned int *v155;
  char v156;
  __int128 v157;
  char v158;
  char v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  char v162;
  char v163;
  __int128 v164;
  uint64_t v165;
  _BYTE v166[16];
  unsigned int *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  unint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  __int16 v176;
  __int128 v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  char v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  char v190;
  WTF::StringImpl *v191;
  _BYTE v192[360];
  _OWORD v193[2];
  char v194;
  char v195;
  char v196;
  uint64_t v197;

  v4 = a1;
  v197 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>(a1, (uint64_t)&v157);
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(v4, v192);
  v126 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4);
  v129 = v6;
  IPC::Decoder::decode<WebCore::ScriptBuffer>(v4, &v155);
  IPC::Decoder::decode<WebCore::CertificateInfo>(v4, (uint64_t)&cf);
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v148, v4);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v145, v4);
  IPC::Decoder::decode<WTF::String>(v4, &v143);
  IPC::Decoder::decode<WTF::URL>(v4, &v139);
  v128 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v4);
  v7 = v4[1];
  v8 = *v4;
  v9 = v4[2] - *v4;
  v122 = a2;
  v132 = v4;
  if (v7 <= v9)
  {
    v107 = 0;
    v108 = 0;
    *v4 = 0;
    v4[1] = 0;
    v109 = v4[3];
    if (v109)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
        v108 = *v4;
        v107 = v4[1];
      }
      else
      {
        v107 = 0;
        v108 = 0;
      }
    }
    goto LABEL_193;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  v4[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v107 = v7;
    v108 = 0;
LABEL_193:
    *v4 = 0;
    v4[1] = 0;
    v110 = v4[3];
    if (v110)
    {
      if (v107)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v108, v107);
        v11 = 0;
        v8 = *v4;
        v7 = v4[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v11 = 0;
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v11 = 0;
    }
    goto LABEL_195;
  }
  v11 = *v10;
  if (v11 < 2)
  {
    v125 = 0;
    v12 = 1;
    goto LABEL_5;
  }
LABEL_195:
  *v4 = 0;
  v4[1] = 0;
  v111 = v4[3];
  if (!v111)
  {
    v8 = 0;
    v7 = 0;
    v124 = 0;
    v125 = 1;
    goto LABEL_197;
  }
  if (!v7)
  {
    v8 = 0;
    v124 = 0;
    v125 = 1;
LABEL_197:
    *v4 = 0;
    v4[1] = 0;
    v112 = v4[3];
    if (v112)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v8);
        v113 = *v4;
        v7 = v4[1];
      }
      else
      {
        v113 = 0;
      }
    }
    else
    {
      v113 = 0;
      v7 = 0;
    }
    goto LABEL_199;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v8);
  v12 = 0;
  v8 = *v4;
  v7 = v4[1];
  v125 = 1;
LABEL_5:
  if (!(_DWORD)v11)
    v12 = 0;
  v124 = v12;
  if (v7 <= v4[2] - v8)
    goto LABEL_197;
  v13 = (unsigned __int8 *)v4[2];
  v4[2] = (uint64_t)(v13 + 1);
  if (!v8)
  {
    v113 = 0;
LABEL_199:
    *v4 = 0;
    v4[1] = 0;
    v114 = v4[3];
    if (v114)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v113);
        v8 = *v4;
        v7 = v4[1];
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
LABEL_201:
    *v4 = 0;
    v4[1] = 0;
    v115 = v4[3];
    if (v115)
    {
      if (!v7)
      {
        v16 = 0;
        v123 = 0;
        goto LABEL_16;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 16))(v115, v8);
    }
    v16 = 0;
    v123 = 0;
    goto LABEL_16;
  }
  v14 = *v13;
  if (v14 >= 2)
    goto LABEL_201;
  if (v14)
  {
    v15 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v4);
    v16 = (v15 > 0xFFu) << 16;
    if ((v15 & 0xFF00) != 0)
      v17 = v15;
    else
      v17 = 0;
    LODWORD(v123) = 256;
    HIDWORD(v123) = v17;
  }
  else
  {
    v123 = 0;
    v16 = 0x10000;
  }
LABEL_16:
  v18 = v4[1];
  v127 = v16;
  if (HIWORD(v16))
  {
    v19 = v4[1];
  }
  else
  {
    v19 = 0;
    v116 = *v4;
    *v4 = 0;
    v4[1] = 0;
    v117 = v4[3];
    if (v117)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v116, v18);
        v19 = v4[1];
      }
      else
      {
        v19 = 0;
      }
    }
  }
  v20 = *v4;
  v21 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
  if (v19 < v21 || v19 - v21 <= 3)
  {
    v118 = 0;
    v119 = 0;
    *v4 = 0;
    v4[1] = 0;
    v120 = v4[3];
    if (v120)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
        v119 = *v4;
        v118 = v4[1];
      }
      else
      {
        v118 = 0;
        v119 = 0;
      }
    }
    goto LABEL_207;
  }
  v22 = (int *)(v20 + v21);
  v4[2] = (uint64_t)(v22 + 1);
  if (!v20)
  {
    v118 = v19;
    v119 = 0;
LABEL_207:
    Table = 0;
    *v4 = 0;
    v4[1] = 0;
    v121 = v4[3];
    if (v121)
    {
      if (v118)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v119, v118);
      Table = 0;
    }
    goto LABEL_141;
  }
  v131 = *v22;
  if (*v22)
  {
    v11 = 0;
    v138 = 0;
    v2 = 0;
    v3 = 0;
    Table = 0;
    v134 = 0;
    while (1)
    {
      IPC::Decoder::decode<WTF::URL>(v4, &v160);
      if (!v163)
      {
        v130 &= 0xFFFFFFFFFFFFFF00;
LABEL_138:
        if (Table)
          WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)Table, (WTF::StringImpl *)v3);
        Table = v130;
LABEL_141:
        v25 = (WTF::StringImpl *)*v4;
        v26 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        v24 = v4[3];
        if (v24)
          goto LABEL_190;
        goto LABEL_142;
      }
      v24 = (uint64_t)IPC::Decoder::decode<WebCore::ServiceWorkerImportedScript>(v4, (uint64_t)v193);
      if (!v196)
        goto LABEL_102;
      if (!v163)
        goto LABEL_189;
      if (v160 == (WTF::StringImpl *)-1
        || (v24 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(&v160),
            (v24 & 1) != 0))
      {
LABEL_102:
        v60 = 0;
        v130 &= 0xFFFFFFFFFFFFFF00;
        goto LABEL_86;
      }
      if (!v163 || !v196)
        goto LABEL_189;
      v133 = v2;
      if (10 * (unint64_t)v2 >= 9 * (unint64_t)v3
        || (_BYTE)v11 && 2 * v2 >= v3)
      {
        v136 = Table;
        v27 = 2 * v3;
        if ((_DWORD)v3)
          v28 = v27;
        else
          v28 = 8;
        Table = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(v28);
        v30 = (~(Table << 32) + Table) ^ ((unint64_t)(~(Table << 32) + Table) >> 22);
        v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
        v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
        v138 = (v32 >> 31) ^ v32;
        if ((_DWORD)v3)
        {
          v33 = 0;
          v3 = v3;
          v34 = v27 - 1;
          v11 = v136;
          v135 = v3;
          do
          {
            v35 = (WTF::StringImpl **)(v11 + 96 * v33);
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v35) & 1) == 0)
            {
              v36 = *((_DWORD *)*v35 + 4);
              if (v36 >= 0x100)
                v37 = v36 >> 8;
              else
                v37 = WTF::StringImpl::hashSlowCase(*v35);
              v38 = (v37 ^ v138) & v34;
              v39 = (WTF::StringImpl **)(Table + 96 * v38);
              if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v39) & 1) == 0)
              {
                v40 = 0;
                do
                {
                  v41 = *((_DWORD *)*v39 + 4);
                  if (v41 >= 0x100)
                    v42 = v41 >> 8;
                  else
                    v42 = WTF::StringImpl::hashSlowCase(*v39);
                  v43 = (v38 + v28 - ((v42 ^ v138) & v34)) & v34;
                  if (v40 > v43)
                  {
                    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v35, v39);
                    v40 = v43;
                  }
                  v38 = (v38 + 1) & v34;
                  v39 = (WTF::StringImpl **)(Table + 96 * v38);
                  ++v40;
                }
                while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v39));
              }
              WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v39, v35);
              v3 = v135;
              v11 = v136;
            }
            v44 = v11 + 96 * v33;
            v45 = *(WTF::StringImpl **)(v44 + 88);
            *(_QWORD *)(v44 + 88) = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v29);
              else
                *(_DWORD *)v45 -= 2;
            }
            v46 = v11 + 96 * v33;
            v47 = *(WTF::StringImpl **)(v46 + 48);
            *(_QWORD *)(v46 + 48) = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v29);
              else
                *(_DWORD *)v47 -= 2;
            }
            v48 = *(unsigned int **)(v44 + 40);
            *(_QWORD *)(v44 + 40) = 0;
            if (v48)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v48, v29);
            v49 = *v35;
            *v35 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v29);
              else
                *(_DWORD *)v49 -= 2;
            }
            ++v33;
          }
          while (v33 != v3);
        }
        else
        {
          v11 = v136;
          if (!v136)
          {
            v3 = 8;
            goto LABEL_69;
          }
        }
        WTF::fastFree((WTF *)v11, v29);
        v11 = 0;
        v3 = v28;
      }
LABEL_69:
      v137 = Table;
      v50 = *((_DWORD *)v160 + 4);
      if (v50 >= 0x100)
        v51 = v50 >> 8;
      else
        v51 = WTF::StringImpl::hashSlowCase(v160);
      v52 = v3 - 1;
      v53 = (v51 ^ v138) & (v3 - 1);
      v54 = (WTF::StringImpl **)(v137 + 96 * v53);
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v54) & 1) != 0)
      {
LABEL_84:
        WTF::URL::operator=((uint64_t)v54, (WTF::StringImpl *)&v160);
        WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::assignToEmpty<WebCore::ServiceWorkerImportedScript,WebCore::ServiceWorkerImportedScript>(v137 + 96 * v53 + 40, (uint64_t *)v193);
      }
      else
      {
        v56 = 0;
        while (1)
        {
          v57 = *((_DWORD *)*v54 + 4);
          v58 = v57 >= 0x100 ? v57 >> 8 : WTF::StringImpl::hashSlowCase(*v54);
          v59 = (v53 + v3 - ((v58 ^ v138) & v52)) & v52;
          if (v56 > v59)
            break;
          if (v58 == v51 && (WTF::equal(*v54, v160, v55) & 1) != 0)
          {
            v4 = v132;
            Table = v137;
            v2 = v133;
            goto LABEL_102;
          }
          v53 = ((_DWORD)v53 + 1) & v52;
          v54 = (WTF::StringImpl **)(v137 + 96 * v53);
          ++v56;
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v54) & 1) != 0)
          {
            if (v56 > 0x7F)
              v11 = 1;
            else
              v11 = v11;
            goto LABEL_84;
          }
        }
        if (v56 > 0x7F)
          v11 = 1;
        else
          v11 = v11;
        WTF::URL::URL((uint64_t)&v164, (uint64_t *)v54);
        v63 = v137 + 96 * v53;
        v65 = *(unsigned int **)(v63 + 40);
        v64 = (_QWORD *)(v63 + 40);
        *v64 = 0;
        v167 = v65;
        v66 = (WTF::StringImpl **)(v64 + 1);
        WTF::URL::URL((uint64_t)&v168, v64 + 1);
        v68 = v137 + 96 * v53;
        v69 = *(WTF::StringImpl **)(v68 + 88);
        *(_QWORD *)(v68 + 88) = 0;
        v169 = v69;
        v70 = *(WTF::StringImpl **)(v68 + 88);
        *(_QWORD *)(v68 + 88) = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v67);
          else
            *(_DWORD *)v70 -= 2;
        }
        v71 = *v66;
        *v66 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v67);
          else
            *(_DWORD *)v71 -= 2;
        }
        v72 = (unsigned int *)*v64;
        *v64 = 0;
        if (v72)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v72, v67);
        v73 = *v54;
        *v54 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v67);
          else
            *(_DWORD *)v73 -= 2;
        }
        WTF::URL::URL((WTF::URL *)v54);
        WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::emptyValue((uint64_t)v64);
        WTF::URL::operator=((uint64_t)v54, (WTF::StringImpl *)&v160);
        WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::assignToEmpty<WebCore::ServiceWorkerImportedScript,WebCore::ServiceWorkerImportedScript>((uint64_t)v64, (uint64_t *)v193);
        while (1)
        {
          LODWORD(v53) = (v53 + 1) & v52;
          v74 = (WTF **)(v137 + 96 * v53);
          if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v74))
            break;
          v75 = *((_DWORD *)*v74 + 4);
          if (v75 >= 0x100)
            v76 = v75 >> 8;
          else
            v76 = WTF::StringImpl::hashSlowCase(*v74);
          ++v59;
          v77 = (v53 + v3 - ((v76 ^ v138) & v52)) & v52;
          if (v59 > v77)
          {
            std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)&v164, v74);
            v59 = v77;
          }
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v74, &v164);
        v78 = v169;
        v169 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v25);
          else
            *(_DWORD *)v78 -= 2;
        }
        v79 = v168;
        v168 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v25);
          else
            *(_DWORD *)v79 -= 2;
        }
        v80 = v167;
        v167 = 0;
        if (v80)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v80, v25);
        v81 = (WTF::StringImpl *)v164;
        *(_QWORD *)&v164 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v25);
          else
            *(_DWORD *)v81 -= 2;
        }
      }
      v2 = v133 + 1;
      v60 = 1;
      v4 = v132;
      Table = v137;
LABEL_86:
      std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v193, v25);
      if (!v163)
        goto LABEL_90;
      v62 = v160;
      v160 = 0;
      if (!v62)
        goto LABEL_90;
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
LABEL_90:
        if ((v60 & 1) == 0)
          goto LABEL_138;
        goto LABEL_91;
      }
      WTF::StringImpl::destroy(v62, v61);
      if ((v60 & 1) == 0)
        goto LABEL_138;
LABEL_91:
      if (++v134 == v131)
      {
        v82 = 0;
        goto LABEL_143;
      }
    }
  }
  v82 = 0;
  Table = 0;
  v3 = 0;
  v2 = 0;
  v138 = 0;
  v11 = 0;
LABEL_143:
  while (1)
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v4, (uint64_t)v193);
    v24 = (uint64_t)IPC::Decoder::decode<WebCore::NavigationPreloadState>(v4, (uint64_t)&v160);
    if (!*v4)
      break;
    if (v159)
    {
      v164 = v157;
      LOBYTE(v165) = v158;
      if (v192[352])
      {
        v4 = (uint64_t *)v11;
        v11 = (uint64_t)v166;
        v24 = WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v166, (uint64_t)v192);
        if (v129)
        {
          v170 = v126;
          if (v156)
          {
            v83 = v155;
            v155 = 0;
            *(_QWORD *)&v171 = v83;
            if (v154)
            {
              v84 = cf;
              cf = 0;
              *((_QWORD *)&v171 + 1) = v84;
              if (v152)
              {
                v172 = v148;
                v85 = v149;
                v148 = 0;
                v149 = 0;
                v173 = v85;
                v174 = v150;
                v175 = v151;
                if (v147)
                {
                  v176 = v145;
                  v86 = v146;
                  v146 = 0uLL;
                  v177 = v86;
                  if (v144)
                  {
                    v87 = v143;
                    v143 = 0;
                    v178 = v87;
                    if (v142)
                    {
                      v88 = v139;
                      v139 = 0;
                      v179 = v88;
                      v180 = v140;
                      v181 = v141;
                      LODWORD(v140) = v140 & 0xFFFFFFFE;
                      if (v128 > 0xFFu)
                      {
                        LOBYTE(v182) = v128;
                        if (!v125)
                        {
                          BYTE1(v182) = v124;
                          if ((HIDWORD(v123) | v127 | v123) >> 16)
                          {
                            HIWORD(v182) = WORD2(v123) | v127 | v123;
                            if (!v82)
                            {
                              v183 = Table;
                              v184 = __PAIR64__(v2, v3);
                              v185 = v138;
                              v186 = (char)v4;
                              if (v195)
                              {
                                v187 = v193[0];
                                v188 = v193[1];
                                LOBYTE(v189) = v194;
                                if (v162)
                                {
                                  v190 = (char)v160;
                                  v89 = v161;
                                  v161 = 0;
                                  v191 = v89;
                                  *(_OWORD *)v122 = v164;
                                  *(_QWORD *)(v122 + 16) = v165;
                                  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v122 + 24, (uint64_t)v166);
                                  v90 = v172;
                                  *(_QWORD *)(v122 + 376) = v170;
                                  v91 = v171;
                                  v171 = 0u;
                                  *(_OWORD *)(v122 + 384) = v91;
                                  v172 = 0;
                                  *(_QWORD *)(v122 + 400) = v90;
                                  *(_QWORD *)&v91 = v173;
                                  v173 = 0;
                                  *(_QWORD *)(v122 + 408) = v91;
                                  *(_DWORD *)(v122 + 416) = v174;
                                  *(_BYTE *)(v122 + 420) = v175;
                                  *(_WORD *)(v122 + 424) = v176;
                                  v92 = v177;
                                  v177 = 0u;
                                  *(_OWORD *)(v122 + 432) = v92;
                                  v93 = v178;
                                  v178 = 0;
                                  *(_QWORD *)(v122 + 448) = v93;
                                  WTF::URL::URL(v122 + 456, (uint64_t *)&v179);
                                  *(_DWORD *)(v122 + 496) = v182;
                                  v94 = v183;
                                  v183 = 0;
                                  *(_QWORD *)(v122 + 504) = v94;
                                  v95 = v184;
                                  v184 = 0;
                                  *(_QWORD *)(v122 + 512) = v95;
                                  LODWORD(v94) = v185;
                                  v185 = 0;
                                  *(_DWORD *)(v122 + 520) = v94;
                                  LOBYTE(v94) = v186;
                                  v186 = 0;
                                  *(_BYTE *)(v122 + 524) = v94;
                                  v96 = v188;
                                  *(_OWORD *)(v122 + 528) = v187;
                                  *(_OWORD *)(v122 + 544) = v96;
                                  *(_OWORD *)(v122 + 560) = v189;
                                  *(_BYTE *)(v122 + 576) = v190;
                                  v97 = v191;
                                  v191 = 0;
                                  *(_QWORD *)(v122 + 584) = v97;
                                  *(_BYTE *)(v122 + 592) = 1;
                                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)&v164, v98);
                                  v3 = 0;
                                  Table = 0;
                                  goto LABEL_160;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_189:
    __break(1u);
LABEL_190:
    if (v26)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24, v25);
LABEL_142:
    v82 = 1;
  }
  *(_BYTE *)v122 = 0;
  *(_BYTE *)(v122 + 592) = 0;
LABEL_160:
  if (v162)
  {
    v99 = v161;
    v161 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v25);
      else
        *(_DWORD *)v99 -= 2;
    }
  }
  if (Table)
    v100 = v82;
  else
    v100 = 1;
  if ((v100 & 1) == 0)
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)Table, (WTF::StringImpl *)v3);
  if (v142)
  {
    v101 = v139;
    v139 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2)
        WTF::StringImpl::destroy(v101, v25);
      else
        *(_DWORD *)v101 -= 2;
    }
  }
  if (v144)
  {
    v102 = v143;
    v143 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v25);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v145, v25);
  if (v152)
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v148, v103);
  if (v154)
  {
    v104 = cf;
    cf = 0;
    if (v104)
      CFRelease(v104);
  }
  if (v156)
  {
    v105 = v155;
    v155 = 0;
    if (v105)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v105, v103);
  }
  return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v192, (WTF::StringImpl *)v103);
}

void sub_196E77340(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,WTF::StringImpl *a30,char a31,int a32,__int16 a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,CFTypeRef cf,char a42,uint64_t a43,char a44)
{
  void *v45;
  CFTypeRef v46;
  unsigned int *v47;

  if (a29 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33, a2);
  if (a40)
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a37, v45);
  if (a42)
  {
    v46 = cf;
    cf = 0;
    if (v46)
      CFRelease(v46);
  }
  if (a44)
  {
    v47 = (unsigned int *)a43;
    a43 = 0;
    if (v47)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v45);
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x3C8], (WTF::StringImpl *)v45);
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::decode(a1, a2);
  if (!a2[352])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E777E8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NavigationPreloadState>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NavigationPreloadState,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<JSC::ArrayBuffer,void>::encode(uint64_t a1, JSC::ArrayBuffer *this)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;

  v3 = JSC::ArrayBuffer::span(this);
  v5 = v4;
  if (v4)
  {
    if ((unint64_t)v4 >> 32)
    {
      __break(0xC471u);
      return;
    }
    v6 = v3;
    v7 = WTF::fastMalloc(v4);
    v8 = (void *)v7;
    v9 = 0;
    do
    {
      *((_BYTE *)v9 + v7) = *((_BYTE *)v9 + v6);
      v9 = (WTF *)((char *)v9 + 1);
    }
    while (v5 != v9);
  }
  else
  {
    v8 = 0;
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v8, v5);
  if (v8)
    WTF::fastFree((WTF *)v8, v10);
}

void sub_196E778F0(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 5);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 13);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 9);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 11);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  _BYTE v17[24];
  _BYTE v18[24];

  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v18);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v17);
  IPC::Decoder::decode<WTF::AtomString>(a1, &v15);
  IPC::Decoder::decode<WTF::String>(a1, &v13);
  IPC::Decoder::decode<WTF::String>(a1, &v11);
  IPC::Decoder::decode<WTF::String>(a1, &v9);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
  if (!*a1)
    goto LABEL_37;
  if (!v18[16] || !v17[16] || !v16 || !v14 || !v12 || !v10 || !v8)
  {
    __break(1u);
LABEL_37:
    *a2 = 0;
    a2[112] = 0;
    goto LABEL_10;
  }
  WebCore::ISOWebVTTCue::ISOWebVTTCue();
  WebCore::ISOWebVTTCue::ISOWebVTTCue();
  a2[112] = 1;
  result = (WTF::StringImpl *)MEMORY[0x19AEAD570](&v6);
LABEL_10:
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v16)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
}

char *IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  _BYTE *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char *result;

  v2 = (_BYTE *)a2;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  v4 = v2[16];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[17];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[18];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[19];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[20];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = v2[21];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = v2[22];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = v2[23];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = v2[24];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = v2[25];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  LOBYTE(v2) = v2[26];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 8));
  v5 = v2[24];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = v2[25];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t v4;
  char v5;

  v4 = (uint64_t)(a2 + 136);
  v5 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration> const&>(a1, (uint64_t)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration> const&>(a1, (uint64_t)(a2 + 96));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  char v12;
  char v13;
  unsigned __int8 *v14;
  unsigned int v15;
  __int16 v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  char v48;
  BOOL v49;
  int v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  char v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  char v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  char v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  char v75;
  char v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  char v82;
  char v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  char v89;
  char v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  char v96;
  char v97;
  unint64_t v98;
  char *v99;
  unsigned int v100;
  BOOL v101;
  int v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  char v109;
  BOOL v110;
  unint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  char v116;
  char v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  int v121;
  BOOL v122;
  int v123;
  unint64_t v124;
  unsigned __int8 *v125;
  unsigned int v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  int v130;
  int v131;
  __int128 v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int64_t v174;
  uint64_t v175;
  int64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  char v251;
  char v252;
  char v253;
  char v254;
  char v255;
  char v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  char v287;
  char v288;
  char v289;
  char v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  char v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  char v314;
  char v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  char v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  char v371;
  char v372;
  char v373;
  char v374;
  char v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  char v412;
  char v413;
  char v414;
  char v415;
  char v416;
  char v417;
  char v418;
  char v419;
  char v420;
  char v421;
  char v422;
  char v423;
  char v424;
  char v425;
  char v426;
  char v427;
  char v428;
  char v429;
  char v430;
  char v431;
  char v432;
  char v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  char v440;
  char v441;
  char v442;
  char v443;
  char v444;
  char v445;
  char v446;
  char v447;
  WTF::StringImpl *v448;
  _BYTE v449[40];
  char v450;
  WTF::StringImpl *v451;
  uint64_t v452;
  _QWORD v453[2];
  char v454;
  char v455;
  uint64_t v456;
  uint64_t v457;
  __int16 v458;
  unsigned __int8 v459;
  WTF::StringImpl *v460;
  uint64_t v461;
  char v462;
  WTF::StringImpl *v463;
  uint64_t v464;
  _BYTE v465[11];
  unsigned __int8 v466;
  char v467;
  WTF::StringImpl *v468;
  uint64_t v469;
  _QWORD v470[2];
  unsigned __int8 v471;
  char v472;
  __int16 v473;
  __int128 v474;
  __int128 v475;
  unsigned __int8 v476;
  char v477;
  WTF::StringImpl *v478;
  uint64_t v479;
  uint64_t v480;
  __int16 v481;
  WTF::StringImpl *v482;
  uint64_t v483;
  char v484;
  _QWORD v485[3];

  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v150 = 0;
    v151 = 0;
    *a1 = 0;
    a1[1] = 0;
    v152 = a1[3];
    if (v152)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 16))(v152);
        v151 = *a1;
        v150 = a1[1];
      }
      else
      {
        v150 = 0;
        v151 = 0;
      }
    }
    goto LABEL_233;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v150 = v6;
    v151 = 0;
LABEL_233:
    *a1 = 0;
    a1[1] = 0;
    v153 = a1[3];
    if (v153 && v150)
    {
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v151, v150);
      v10 = 0;
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v10 = 0;
    }
    goto LABEL_235;
  }
  v10 = *v9;
  if (v10 < 2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_5;
  }
LABEL_235:
  *a1 = 0;
  a1[1] = 0;
  v154 = a1[3];
  if (!v154 || !v6)
  {
    v7 = 0;
    v13 = 0;
    v6 = 0;
    v11 = 1;
LABEL_237:
    *a1 = 0;
    a1[1] = 0;
    v155 = a1[3];
    if (v155)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v155 + 16))(v155, v7);
        v156 = *a1;
        v6 = a1[1];
      }
      else
      {
        v156 = 0;
      }
    }
    else
    {
      v156 = 0;
      v6 = 0;
    }
    goto LABEL_239;
  }
  (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v154 + 16))(v154, v7);
  v12 = 0;
  v7 = *a1;
  v6 = a1[1];
  v11 = 1;
LABEL_5:
  if (v10)
    v13 = v12;
  else
    v13 = 0;
  if (v6 <= a1[2] - v7)
    goto LABEL_237;
  v14 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v14 + 1);
  if (!v7)
  {
    v156 = 0;
LABEL_239:
    *a1 = 0;
    a1[1] = 0;
    v157 = a1[3];
    if (v157)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v157 + 16))(v157, v156);
        v7 = *a1;
        v6 = a1[1];
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    goto LABEL_241;
  }
  v15 = *v14;
  if (v15 >= 2)
  {
LABEL_241:
    *a1 = 0;
    a1[1] = 0;
    v158 = a1[3];
    if (v158 && v6)
      (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v158 + 16))(v158, v7);
    LOBYTE(v473) = 0;
    v477 = 0;
    goto LABEL_57;
  }
  if (!v15)
  {
    LOBYTE(v448) = 0;
    v449[32] = 0;
    LOBYTE(v473) = 0;
    v476 = 0;
LABEL_55:
    v477 = 1;
    result = std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v448, (WTF::StringImpl *)v7);
    goto LABEL_58;
  }
  LOWORD(v468) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v468);
  v16 = v468;
  if (BYTE1(v468))
    v17 = v468 > 3u;
  else
    v17 = 1;
  v2 = v17;
  v18 = a1[1];
  if ((_DWORD)v2 == 1)
  {
    v174 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v175 = a1[3];
    if (!v175)
    {
      v18 = 0;
      goto LABEL_261;
    }
    if (!v18)
      goto LABEL_261;
    (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v175 + 16))(v175, v174);
    v18 = a1[1];
  }
  v19 = *a1;
  v20 = a1[2] - *a1;
  if (v18 <= v20)
  {
    v227 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (!v227)
    {
      v176 = 0;
      v18 = 0;
      goto LABEL_262;
    }
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v227 + 16))(v227);
      v176 = *a1;
      v18 = a1[1];
      goto LABEL_262;
    }
LABEL_261:
    v176 = 0;
    goto LABEL_262;
  }
  v21 = (unsigned __int8 *)(v19 + v20);
  a1[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    v176 = 0;
LABEL_262:
    *a1 = 0;
    a1[1] = 0;
    v177 = a1[3];
    if (v177)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v177 + 16))(v177, v176);
        v22 = 0;
        v19 = *a1;
        v18 = a1[1];
        goto LABEL_265;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    v22 = 0;
    goto LABEL_265;
  }
  v22 = *v21;
  if (v22 < 2)
  {
    v23 = 0;
    v24 = 1;
    goto LABEL_23;
  }
LABEL_265:
  *a1 = 0;
  a1[1] = 0;
  v178 = a1[3];
  if (v178 && v18)
    (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v178 + 16))(v178, v19);
  v24 = 0;
  v23 = 1;
LABEL_23:
  if (v22)
    v25 = v24;
  else
    v25 = 0;
  IPC::Decoder::decode<WTF::String>(a1, &v468);
  IPC::Decoder::decode<WTF::String>(a1, &v463);
  IPC::Decoder::decode<WTF::String>(a1, &v478);
  result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v482);
  v28 = *a1;
  if (!*a1)
  {
    LOBYTE(v448) = 0;
    v449[32] = 0;
    if ((_BYTE)v483)
    {
      v179 = v482;
      v482 = 0;
      if (v179)
      {
        if (*(_DWORD *)v179 != 2)
        {
          v33 = 0;
          *(_DWORD *)v179 -= 2;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v7);
      }
    }
    v33 = 0;
    goto LABEL_37;
  }
  if ((_DWORD)v2 || v23)
    goto LABEL_452;
  v29 = v25 ? 256 : 0;
  if (!(_BYTE)v469)
    goto LABEL_452;
  v30 = v468;
  v468 = 0;
  if (!(_BYTE)v464)
    goto LABEL_452;
  v31 = v463;
  v463 = 0;
  if (!(_BYTE)v479)
    goto LABEL_452;
  v32 = v478;
  v478 = 0;
  if (!(_BYTE)v483)
    goto LABEL_452;
  LOWORD(v448) = v29 | v16;
  *(_QWORD *)v449 = v30;
  *(_QWORD *)&v449[8] = v31;
  *(_QWORD *)&v449[16] = v32;
  *(_QWORD *)&v449[24] = v482;
  v33 = 1;
  v449[32] = 1;
LABEL_37:
  if ((_BYTE)v479)
  {
    v34 = v478;
    v478 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if ((_BYTE)v464)
  {
    v35 = v463;
    v463 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if ((_BYTE)v469)
  {
    v36 = v468;
    v468 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v7);
        if (v28)
          goto LABEL_53;
LABEL_227:
        v7 = *a1;
        v148 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v149 = a1[3];
        if (v149 && v148)
        {
          (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v149 + 16))(v149, v7);
          v33 = v449[32];
        }
        goto LABEL_53;
      }
      *(_DWORD *)v36 -= 2;
    }
  }
  if (!v28)
    goto LABEL_227;
LABEL_53:
  if (v33)
  {
    v473 = (__int16)v448;
    v474 = *(_OWORD *)v449;
    v37 = *(_OWORD *)&v449[16];
    memset(v449, 0, 32);
    v475 = v37;
    v476 = 1;
    goto LABEL_55;
  }
  LOBYTE(v473) = 0;
  v477 = 0;
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v448, (WTF::StringImpl *)v7);
LABEL_57:
  v38 = *a1;
  v39 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v39)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v38);
LABEL_58:
  v40 = a1[1];
  v41 = (char *)*a1;
  v42 = a1[2] - *a1;
  if (v40 <= v42)
  {
    v159 = 0;
    v160 = 0;
    *a1 = 0;
    a1[1] = 0;
    v161 = a1[3];
    if (v161)
    {
      if (v40)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v161 + 16))(v161);
        v160 = *a1;
        v159 = a1[1];
      }
      else
      {
        v159 = 0;
        v160 = 0;
      }
    }
    goto LABEL_244;
  }
  v43 = &v41[v42];
  a1[2] = (uint64_t)(v43 + 1);
  if (!v41)
  {
    v159 = v40;
    v160 = 0;
LABEL_244:
    v40 = 0;
    v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    v162 = a1[3];
    if (v162)
    {
      if (v159)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v160, v159);
        v41 = (char *)*a1;
        v40 = a1[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
    goto LABEL_245;
  }
  v44 = *v43;
  if (v44 < 2)
  {
    if (!v44)
    {
      LOBYTE(v468) = 0;
      v471 = 0;
      v472 = 1;
      goto LABEL_141;
    }
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v41, (uint64_t)&v478);
    LOWORD(v463) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v463);
    v45 = BYTE1(v463);
    if (BYTE1(v463))
    {
      v2 = v463;
    }
    else
    {
      v180 = *a1;
      v181 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v182 = a1[3];
      if (v182 && v181)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 16))(v182, v180);
      v2 = 0;
    }
    LOWORD(v463) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v463);
    v46 = BYTE1(v463);
    if (BYTE1(v463))
    {
      v47 = (char)v463;
    }
    else
    {
      v183 = *a1;
      v184 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v185 = a1[3];
      if (v185 && v184)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v183);
      v47 = 0;
    }
    LOWORD(v463) = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v463);
    v48 = (char)v463;
    if (BYTE1(v463))
      v49 = v463 > 6u;
    else
      v49 = 1;
    v50 = v49;
    v27 = a1[1];
    if (v50 == 1)
    {
      v186 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v187 = a1[3];
      if (!v187)
      {
        v48 = 0;
        v27 = 0;
        v188 = 0;
        goto LABEL_277;
      }
      v228 = v50;
      if (!v27)
      {
        v48 = 0;
        v188 = 0;
        goto LABEL_277;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, v186);
      v48 = 0;
      v27 = a1[1];
      v50 = v228;
    }
    v51 = (char *)*a1;
    v52 = a1[2] - *a1;
    if (v27 <= v52)
    {
      v440 = v48;
      v229 = v50;
      v188 = 0;
      v230 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v27 && v230)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v230 + 16))(v230);
        v188 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
      }
      v50 = v229;
      v48 = v440;
    }
    else
    {
      v53 = &v51[v52];
      v54 = (uint64_t)&v51[v52 + 1];
      a1[2] = v54;
      if (v51)
      {
        v55 = *v53;
        if (v55 < 2)
        {
          v56 = 0;
          v57 = 1;
          goto LABEL_77;
        }
LABEL_279:
        *a1 = 0;
        a1[1] = 0;
        v190 = a1[3];
        if (!v190)
        {
          v57 = 0;
          v191 = 0;
          v51 = 0;
          v56 = 1;
          goto LABEL_281;
        }
        v424 = v48;
        v329 = v50;
        if (!v27)
        {
          v57 = 0;
          v191 = 0;
          v51 = 0;
          v56 = 1;
          goto LABEL_281;
        }
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v190 + 16))(v190, v51);
        v57 = 0;
        v51 = (char *)*a1;
        v27 = a1[1];
        v56 = 1;
        v54 = a1[2];
        v50 = v329;
        v48 = v424;
LABEL_77:
        if (!v55)
          v57 = 0;
        v58 = v54 - (_QWORD)v51;
        if (v27 <= v58)
        {
          v402 = v56;
          v423 = v57;
          v447 = v48;
          v242 = v50;
          v191 = 0;
          v243 = a1[3];
          *a1 = 0;
          a1[1] = 0;
          if (v27 && v243)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v243 + 16))(v243);
            v51 = (char *)*a1;
            v191 = a1[1];
          }
          else
          {
            v51 = 0;
          }
          v50 = v242;
          v57 = v423;
          v48 = v447;
          v56 = v402;
        }
        else
        {
          v59 = &v51[v58];
          v60 = (uint64_t)&v51[v58 + 1];
          a1[2] = v60;
          if (v51)
          {
            v61 = *v59;
            if (v61 < 2)
            {
              v62 = 0;
              v63 = 1;
              goto LABEL_83;
            }
LABEL_283:
            *a1 = 0;
            a1[1] = 0;
            v193 = a1[3];
            if (!v193)
            {
              v63 = 0;
              v194 = 0;
              v51 = 0;
              v62 = 1;
              goto LABEL_285;
            }
            v382 = v56;
            v403 = v57;
            v425 = v48;
            v330 = v50;
            if (!v27)
            {
              v63 = 0;
              v194 = 0;
              v51 = 0;
              v62 = 1;
              goto LABEL_285;
            }
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v193 + 16))(v193, v51);
            v63 = 0;
            v51 = (char *)*a1;
            v27 = a1[1];
            v62 = 1;
            v60 = a1[2];
            v50 = v330;
            v57 = v403;
            v48 = v425;
            v56 = v382;
LABEL_83:
            if (!v61)
              v63 = 0;
            v64 = v60 - (_QWORD)v51;
            if (v27 <= v64)
            {
              v363 = v62;
              v381 = v63;
              v401 = v56;
              v422 = v57;
              v446 = v48;
              v240 = v50;
              v194 = 0;
              v241 = a1[3];
              *a1 = 0;
              a1[1] = 0;
              if (v27 && v241)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v241 + 16))(v241);
                v51 = (char *)*a1;
                v194 = a1[1];
              }
              else
              {
                v51 = 0;
              }
              v50 = v240;
              v57 = v422;
              v48 = v446;
              v63 = v381;
              v56 = v401;
              v62 = v363;
            }
            else
            {
              v65 = &v51[v64];
              v66 = (uint64_t)&v51[v64 + 1];
              a1[2] = v66;
              if (v51)
              {
                v67 = *v65;
                if (v67 < 2)
                {
                  v68 = 0;
                  v69 = 1;
                  goto LABEL_89;
                }
LABEL_287:
                *a1 = 0;
                a1[1] = 0;
                v196 = a1[3];
                if (!v196)
                {
                  v69 = 0;
                  v197 = 0;
                  v51 = 0;
                  v68 = 1;
                  goto LABEL_289;
                }
                v346 = v62;
                v364 = v63;
                v383 = v56;
                v404 = v57;
                v426 = v48;
                v331 = v50;
                if (!v27)
                {
                  v69 = 0;
                  v197 = 0;
                  v51 = 0;
                  v68 = 1;
                  goto LABEL_289;
                }
                (*(void (**)(uint64_t, char *))(*(_QWORD *)v196 + 16))(v196, v51);
                v69 = 0;
                v51 = (char *)*a1;
                v27 = a1[1];
                v68 = 1;
                v66 = a1[2];
                v50 = v331;
                v62 = v346;
                v57 = v404;
                v48 = v426;
                v63 = v364;
                v56 = v383;
LABEL_89:
                if (!v67)
                  v69 = 0;
                v70 = v66 - (_QWORD)v51;
                if (v27 <= v70)
                {
                  v313 = v68;
                  v328 = v69;
                  v362 = v62;
                  v380 = v63;
                  v400 = v56;
                  v421 = v57;
                  v445 = v48;
                  v238 = v50;
                  v197 = 0;
                  v239 = a1[3];
                  *a1 = 0;
                  a1[1] = 0;
                  if (v27 && v239)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 16))(v239);
                    v51 = (char *)*a1;
                    v197 = a1[1];
                  }
                  else
                  {
                    v51 = 0;
                  }
                  v50 = v238;
                  v57 = v421;
                  v48 = v445;
                  v63 = v380;
                  v56 = v400;
                  v62 = v362;
                  v68 = v313;
                  v69 = v328;
                }
                else
                {
                  v71 = &v51[v70];
                  v72 = (uint64_t)&v51[v70 + 1];
                  a1[2] = v72;
                  if (v51)
                  {
                    v73 = *v71;
                    if (v73 < 2)
                    {
                      v74 = 0;
                      v75 = 1;
                      goto LABEL_95;
                    }
LABEL_291:
                    *a1 = 0;
                    a1[1] = 0;
                    v199 = a1[3];
                    if (!v199)
                    {
                      v76 = 0;
                      v200 = 0;
                      v51 = 0;
                      v74 = 1;
                      goto LABEL_293;
                    }
                    v299 = v68;
                    v314 = v69;
                    v347 = v62;
                    v365 = v63;
                    v384 = v56;
                    v405 = v57;
                    v427 = v48;
                    v332 = v50;
                    if (!v27)
                    {
                      v76 = 0;
                      v200 = 0;
                      v51 = 0;
                      v74 = 1;
                      goto LABEL_293;
                    }
                    (*(void (**)(uint64_t, char *))(*(_QWORD *)v199 + 16))(v199, v51);
                    v75 = 0;
                    v51 = (char *)*a1;
                    v27 = a1[1];
                    v74 = 1;
                    v72 = a1[2];
                    v50 = v332;
                    v62 = v347;
                    v57 = v405;
                    v48 = v427;
                    v63 = v365;
                    v56 = v384;
                    v68 = v299;
                    v69 = v314;
LABEL_95:
                    if (v73)
                      v76 = v75;
                    else
                      v76 = 0;
                    v77 = v72 - (_QWORD)v51;
                    if (v27 <= v77)
                    {
                      v286 = v74;
                      v298 = v76;
                      v312 = v68;
                      v327 = v69;
                      v361 = v62;
                      v379 = v63;
                      v399 = v56;
                      v420 = v57;
                      v444 = v48;
                      v236 = v50;
                      v200 = 0;
                      v237 = a1[3];
                      *a1 = 0;
                      a1[1] = 0;
                      if (v27 && v237)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v237 + 16))(v237);
                        v51 = (char *)*a1;
                        v200 = a1[1];
                      }
                      else
                      {
                        v51 = 0;
                      }
                      v50 = v236;
                      v57 = v420;
                      v48 = v444;
                      v63 = v379;
                      v56 = v399;
                      v62 = v361;
                      v68 = v312;
                      v69 = v327;
                      v74 = v286;
                      v76 = v298;
                    }
                    else
                    {
                      v78 = &v51[v77];
                      v79 = (uint64_t)&v51[v77 + 1];
                      a1[2] = v79;
                      if (v51)
                      {
                        v80 = *v78;
                        if (v80 < 2)
                        {
                          v81 = 0;
                          v82 = 1;
                          goto LABEL_102;
                        }
LABEL_295:
                        *a1 = 0;
                        a1[1] = 0;
                        v202 = a1[3];
                        if (!v202)
                        {
                          v83 = 0;
                          v203 = 0;
                          v51 = 0;
                          v81 = 1;
                          goto LABEL_297;
                        }
                        v275 = v74;
                        v287 = v76;
                        v300 = v68;
                        v315 = v69;
                        v348 = v62;
                        v366 = v63;
                        v385 = v56;
                        v406 = v57;
                        v429 = v48;
                        v334 = v50;
                        if (!v27)
                        {
                          v83 = 0;
                          v203 = 0;
                          v51 = 0;
                          v81 = 1;
                          goto LABEL_297;
                        }
                        (*(void (**)(uint64_t, char *))(*(_QWORD *)v202 + 16))(v202, v51);
                        v82 = 0;
                        v51 = (char *)*a1;
                        v27 = a1[1];
                        v81 = 1;
                        v79 = a1[2];
                        v50 = v334;
                        v62 = v348;
                        v57 = v406;
                        v48 = v429;
                        v63 = v366;
                        v56 = v385;
                        v68 = v300;
                        v69 = v315;
                        v74 = v275;
                        v76 = v287;
LABEL_102:
                        if (v80)
                          v83 = v82;
                        else
                          v83 = 0;
                        v84 = v79 - (_QWORD)v51;
                        if (v27 <= v84)
                        {
                          v265 = v81;
                          v274 = v83;
                          v285 = v74;
                          v297 = v76;
                          v311 = v68;
                          v326 = v69;
                          v360 = v62;
                          v378 = v63;
                          v398 = v56;
                          v419 = v57;
                          v443 = v48;
                          v234 = v50;
                          v203 = 0;
                          v235 = a1[3];
                          *a1 = 0;
                          a1[1] = 0;
                          if (v27 && v235)
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v235 + 16))(v235);
                            v51 = (char *)*a1;
                            v203 = a1[1];
                          }
                          else
                          {
                            v51 = 0;
                          }
                          v50 = v234;
                          v57 = v419;
                          v48 = v443;
                          v63 = v378;
                          v56 = v398;
                          v62 = v360;
                          v68 = v311;
                          v69 = v326;
                          v74 = v285;
                          v76 = v297;
                          v81 = v265;
                          v83 = v274;
                        }
                        else
                        {
                          v85 = &v51[v84];
                          v86 = (uint64_t)&v51[v84 + 1];
                          a1[2] = v86;
                          if (v51)
                          {
                            v87 = *v85;
                            if (v87 < 2)
                            {
                              v88 = 0;
                              v89 = 1;
                              goto LABEL_109;
                            }
LABEL_299:
                            *a1 = 0;
                            a1[1] = 0;
                            v205 = a1[3];
                            if (!v205)
                            {
                              v90 = 0;
                              v206 = 0;
                              v51 = 0;
                              v88 = 1;
                              goto LABEL_301;
                            }
                            v257 = v81;
                            v266 = v83;
                            v276 = v74;
                            v288 = v76;
                            v301 = v68;
                            v316 = v69;
                            v349 = v62;
                            v367 = v63;
                            v387 = v56;
                            v408 = v57;
                            v431 = v48;
                            v336 = v50;
                            if (!v27)
                            {
                              v90 = 0;
                              v206 = 0;
                              v51 = 0;
                              v88 = 1;
                              goto LABEL_301;
                            }
                            (*(void (**)(uint64_t, char *))(*(_QWORD *)v205 + 16))(v205, v51);
                            v89 = 0;
                            v51 = (char *)*a1;
                            v27 = a1[1];
                            v88 = 1;
                            v86 = a1[2];
                            v50 = v336;
                            v62 = v349;
                            v57 = v408;
                            v48 = v431;
                            v63 = v367;
                            v56 = v387;
                            v68 = v301;
                            v69 = v316;
                            v74 = v276;
                            v76 = v288;
                            v81 = v257;
                            v83 = v266;
LABEL_109:
                            if (v87)
                              v90 = v89;
                            else
                              v90 = 0;
                            v91 = v86 - (_QWORD)v51;
                            if (v27 <= v91)
                            {
                              v250 = v88;
                              v256 = v90;
                              v264 = v81;
                              v273 = v83;
                              v284 = v74;
                              v296 = v76;
                              v310 = v68;
                              v325 = v69;
                              v359 = v62;
                              v377 = v63;
                              v397 = v56;
                              v418 = v57;
                              v442 = v48;
                              v232 = v50;
                              v206 = 0;
                              v233 = a1[3];
                              *a1 = 0;
                              a1[1] = 0;
                              if (v27 && v233)
                              {
                                (*(void (**)(uint64_t))(*(_QWORD *)v233 + 16))(v233);
                                v51 = (char *)*a1;
                                v206 = a1[1];
                              }
                              else
                              {
                                v51 = 0;
                              }
                              v50 = v232;
                              v57 = v418;
                              v48 = v442;
                              v63 = v377;
                              v56 = v397;
                              v62 = v359;
                              v68 = v310;
                              v69 = v325;
                              v74 = v284;
                              v76 = v296;
                              v81 = v264;
                              v83 = v273;
                              v88 = v250;
                              v90 = v256;
                            }
                            else
                            {
                              v92 = &v51[v91];
                              v93 = (uint64_t)&v51[v91 + 1];
                              a1[2] = v93;
                              if (v51)
                              {
                                v94 = *v92;
                                if (v94 < 2)
                                {
                                  v95 = 0;
                                  v96 = 1;
                                  goto LABEL_116;
                                }
LABEL_303:
                                *a1 = 0;
                                a1[1] = 0;
                                v208 = a1[3];
                                if (!v208)
                                {
                                  v97 = 0;
                                  v209 = 0;
                                  v51 = 0;
                                  v95 = 1;
                                  goto LABEL_305;
                                }
                                v245 = v88;
                                v251 = v90;
                                v258 = v81;
                                v267 = v83;
                                v277 = v74;
                                v289 = v76;
                                v302 = v68;
                                v317 = v69;
                                v351 = v62;
                                v369 = v63;
                                v389 = v56;
                                v410 = v57;
                                v433 = v48;
                                v338 = v50;
                                if (!v27)
                                {
                                  v97 = 0;
                                  v209 = 0;
                                  v51 = 0;
                                  v95 = 1;
                                  goto LABEL_305;
                                }
                                (*(void (**)(uint64_t, char *))(*(_QWORD *)v208 + 16))(v208, v51);
                                v96 = 0;
                                v51 = (char *)*a1;
                                v27 = a1[1];
                                v95 = 1;
                                v93 = a1[2];
                                v50 = v338;
                                v62 = v351;
                                v57 = v410;
                                v48 = v433;
                                v63 = v369;
                                v56 = v389;
                                v68 = v302;
                                v69 = v317;
                                v74 = v277;
                                v76 = v289;
                                v81 = v258;
                                v83 = v267;
                                v88 = v245;
                                v90 = v251;
LABEL_116:
                                if (v94)
                                  v97 = v96;
                                else
                                  v97 = 0;
                                v98 = v93 - (_QWORD)v51;
                                if (v27 <= v98)
                                {
                                  v249 = v88;
                                  v255 = v90;
                                  v263 = v81;
                                  v272 = v83;
                                  v283 = v74;
                                  v295 = v76;
                                  v309 = v68;
                                  v324 = v69;
                                  v345 = v50;
                                  v358 = v62;
                                  v376 = v63;
                                  v396 = v56;
                                  v417 = v57;
                                  v441 = v48;
                                  v209 = 0;
                                  v231 = a1[3];
                                  *a1 = 0;
                                  a1[1] = 0;
                                  if (v27 && v231)
                                  {
                                    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 16))(v231);
                                    v51 = (char *)*a1;
                                    v209 = a1[1];
                                  }
                                  else
                                  {
                                    v51 = 0;
                                  }
                                  v50 = v345;
                                  v62 = v358;
                                  v57 = v417;
                                  v48 = v441;
                                  v63 = v376;
                                  v56 = v396;
                                  v68 = v309;
                                  v69 = v324;
                                  v74 = v283;
                                  v76 = v295;
                                  v81 = v263;
                                  v83 = v272;
                                  v88 = v249;
                                  v90 = v255;
                                }
                                else
                                {
                                  v99 = &v51[v98];
                                  a1[2] = (uint64_t)(v99 + 1);
                                  if (v51)
                                  {
                                    v100 = *v99;
                                    if (v100 <= 1)
                                    {
                                      result = 0;
                                      v101 = v100 != 0;
                                      goto LABEL_123;
                                    }
LABEL_307:
                                    *a1 = 0;
                                    a1[1] = 0;
                                    v211 = a1[3];
                                    if (!v211)
                                      goto LABEL_308;
                                    if (!v27)
                                      goto LABEL_308;
                                    v246 = v88;
                                    v252 = v90;
                                    v259 = v81;
                                    v268 = v83;
                                    v278 = v74;
                                    v290 = v76;
                                    v304 = v68;
                                    v319 = v69;
                                    v340 = v50;
                                    v353 = v62;
                                    v371 = v63;
                                    v391 = v56;
                                    v412 = v57;
                                    v435 = v48;
                                    (*(void (**)(uint64_t, char *))(*(_QWORD *)v211 + 16))(v211, v51);
                                    v50 = v340;
                                    v62 = v353;
                                    v57 = v412;
                                    v48 = v435;
                                    v63 = v371;
                                    v56 = v391;
                                    v68 = v304;
                                    v69 = v319;
                                    v74 = v278;
                                    v76 = v290;
                                    v81 = v259;
                                    v83 = v268;
                                    v88 = v246;
                                    v90 = v252;
                                    if (!*a1)
                                    {
LABEL_308:
                                      LOBYTE(v448) = 0;
                                      v449[24] = 0;
                                      v102 = 1;
                                      goto LABEL_136;
                                    }
                                    v101 = 0;
                                    result = 1;
LABEL_123:
                                    v7 = v480;
                                    if (!(_BYTE)v480)
                                      goto LABEL_452;
                                    v7 = (int64_t)v478;
                                    v3 = v479;
                                    v478 = 0;
                                    v479 = 0;
                                    if (!v45)
                                      goto LABEL_452;
                                    v465[0] = v2;
                                    if (!v46)
                                      goto LABEL_452;
                                    v465[1] = v47;
                                    if (v50)
                                      goto LABEL_452;
                                    v465[2] = v48;
                                    if (v56)
                                      goto LABEL_452;
                                    v465[3] = v57;
                                    if (v62)
                                      goto LABEL_452;
                                    v465[4] = v63;
                                    if (v68)
                                      goto LABEL_452;
                                    v465[5] = v69;
                                    if (v74)
                                      goto LABEL_452;
                                    v465[6] = v76;
                                    if (v81)
                                      goto LABEL_452;
                                    v465[7] = v83;
                                    if (v88)
                                      goto LABEL_452;
                                    v465[8] = v90;
                                    if (v95)
                                      goto LABEL_452;
                                    v465[9] = v97;
                                    if ((_DWORD)result)
                                      goto LABEL_452;
                                    v465[10] = v101;
                                    v463 = 0;
                                    v464 = 0;
                                    v448 = (WTF::StringImpl *)v7;
                                    *(_QWORD *)&v449[8] = *(_QWORD *)v465;
                                    *(_DWORD *)&v449[15] = *(_DWORD *)&v465[7];
                                    v449[24] = 1;
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v463, (void *)v7);
                                    v102 = 0;
LABEL_136:
                                    if ((_BYTE)v480)
                                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v478, v51);
                                    if (!v102)
                                    {
                                      v103 = v448;
                                      v448 = 0;
                                      *(_QWORD *)v449 = 0;
                                      v468 = v103;
                                      v469 = v3;
                                      v470[0] = *(_QWORD *)&v449[8];
                                      *(_DWORD *)((char *)v470 + 7) = *(_DWORD *)&v449[15];
                                      v471 = 1;
                                      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v448, v51);
                                      v472 = 1;
                                      goto LABEL_141;
                                    }
                                    v41 = (char *)*a1;
                                    v224 = a1[1];
                                    *a1 = 0;
                                    a1[1] = 0;
                                    v163 = a1[3];
                                    if (!v163 || !v224)
                                      goto LABEL_329;
                                    goto LABEL_247;
                                  }
                                  v209 = v27;
                                }
LABEL_305:
                                *a1 = 0;
                                a1[1] = 0;
                                v210 = a1[3];
                                if (v210)
                                {
                                  v248 = v88;
                                  v254 = v90;
                                  v262 = v81;
                                  v271 = v83;
                                  v282 = v74;
                                  v294 = v76;
                                  v308 = v68;
                                  v323 = v69;
                                  v344 = v50;
                                  v357 = v62;
                                  v375 = v63;
                                  v395 = v56;
                                  v416 = v57;
                                  v439 = v48;
                                  if (v209)
                                  {
                                    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v210 + 16))(v210, v51, v209);
                                    v51 = (char *)*a1;
                                    v27 = a1[1];
                                  }
                                  else
                                  {
                                    v27 = 0;
                                    v51 = 0;
                                  }
                                  v50 = v344;
                                  v62 = v357;
                                  v57 = v416;
                                  v48 = v439;
                                  v63 = v375;
                                  v56 = v395;
                                  v68 = v308;
                                  v69 = v323;
                                  v74 = v282;
                                  v76 = v294;
                                  v81 = v262;
                                  v83 = v271;
                                  v88 = v248;
                                  v90 = v254;
                                }
                                else
                                {
                                  v27 = 0;
                                  v51 = 0;
                                }
                                goto LABEL_307;
                              }
                              v206 = v27;
                            }
LABEL_301:
                            *a1 = 0;
                            a1[1] = 0;
                            v207 = a1[3];
                            if (v207)
                            {
                              v247 = v88;
                              v253 = v90;
                              v261 = v81;
                              v270 = v83;
                              v281 = v74;
                              v293 = v76;
                              v307 = v68;
                              v322 = v69;
                              v356 = v62;
                              v374 = v63;
                              v394 = v56;
                              v415 = v57;
                              v438 = v48;
                              v343 = v50;
                              if (v206)
                              {
                                (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v207 + 16))(v207, v51, v206);
                                v94 = 0;
                                v51 = (char *)*a1;
                                v27 = a1[1];
                              }
                              else
                              {
                                v27 = 0;
                                v51 = 0;
                                v94 = 0;
                              }
                              v50 = v343;
                              v62 = v356;
                              v57 = v415;
                              v48 = v438;
                              v63 = v374;
                              v56 = v394;
                              v68 = v307;
                              v69 = v322;
                              v74 = v281;
                              v76 = v293;
                              v81 = v261;
                              v83 = v270;
                              v88 = v247;
                              v90 = v253;
                            }
                            else
                            {
                              v27 = 0;
                              v51 = 0;
                              v94 = 0;
                            }
                            goto LABEL_303;
                          }
                          v203 = v27;
                        }
LABEL_297:
                        *a1 = 0;
                        a1[1] = 0;
                        v204 = a1[3];
                        if (v204)
                        {
                          v260 = v81;
                          v269 = v83;
                          v280 = v74;
                          v292 = v76;
                          v306 = v68;
                          v321 = v69;
                          v355 = v62;
                          v373 = v63;
                          v393 = v56;
                          v414 = v57;
                          v437 = v48;
                          v342 = v50;
                          if (v203)
                          {
                            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v204 + 16))(v204, v51, v203);
                            v87 = 0;
                            v51 = (char *)*a1;
                            v27 = a1[1];
                          }
                          else
                          {
                            v27 = 0;
                            v51 = 0;
                            v87 = 0;
                          }
                          v50 = v342;
                          v62 = v355;
                          v57 = v414;
                          v48 = v437;
                          v63 = v373;
                          v56 = v393;
                          v68 = v306;
                          v69 = v321;
                          v74 = v280;
                          v76 = v292;
                          v81 = v260;
                          v83 = v269;
                        }
                        else
                        {
                          v27 = 0;
                          v51 = 0;
                          v87 = 0;
                        }
                        goto LABEL_299;
                      }
                      v200 = v27;
                    }
LABEL_293:
                    *a1 = 0;
                    a1[1] = 0;
                    v201 = a1[3];
                    if (v201)
                    {
                      v279 = v74;
                      v291 = v76;
                      v305 = v68;
                      v320 = v69;
                      v354 = v62;
                      v372 = v63;
                      v392 = v56;
                      v413 = v57;
                      v436 = v48;
                      v341 = v50;
                      if (v200)
                      {
                        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v201 + 16))(v201, v51, v200);
                        v80 = 0;
                        v51 = (char *)*a1;
                        v27 = a1[1];
                      }
                      else
                      {
                        v27 = 0;
                        v51 = 0;
                        v80 = 0;
                      }
                      v50 = v341;
                      v62 = v354;
                      v57 = v413;
                      v48 = v436;
                      v63 = v372;
                      v56 = v392;
                      v68 = v305;
                      v69 = v320;
                      v74 = v279;
                      v76 = v291;
                    }
                    else
                    {
                      v27 = 0;
                      v51 = 0;
                      v80 = 0;
                    }
                    goto LABEL_295;
                  }
                  v197 = v27;
                }
LABEL_289:
                *a1 = 0;
                a1[1] = 0;
                v198 = a1[3];
                if (v198)
                {
                  v303 = v68;
                  v318 = v69;
                  v352 = v62;
                  v370 = v63;
                  v390 = v56;
                  v411 = v57;
                  v434 = v48;
                  v339 = v50;
                  if (v197)
                  {
                    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v198 + 16))(v198, v51, v197);
                    v73 = 0;
                    v51 = (char *)*a1;
                    v27 = a1[1];
                  }
                  else
                  {
                    v27 = 0;
                    v51 = 0;
                    v73 = 0;
                  }
                  v50 = v339;
                  v62 = v352;
                  v57 = v411;
                  v48 = v434;
                  v63 = v370;
                  v56 = v390;
                  v68 = v303;
                  v69 = v318;
                }
                else
                {
                  v27 = 0;
                  v51 = 0;
                  v73 = 0;
                }
                goto LABEL_291;
              }
              v194 = v27;
            }
LABEL_285:
            *a1 = 0;
            a1[1] = 0;
            v195 = a1[3];
            if (v195)
            {
              v350 = v62;
              v368 = v63;
              v388 = v56;
              v409 = v57;
              v432 = v48;
              v337 = v50;
              if (v194)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v195 + 16))(v195, v51, v194);
                v67 = 0;
                v51 = (char *)*a1;
                v27 = a1[1];
              }
              else
              {
                v27 = 0;
                v51 = 0;
                v67 = 0;
              }
              v50 = v337;
              v62 = v350;
              v57 = v409;
              v48 = v432;
              v63 = v368;
              v56 = v388;
            }
            else
            {
              v27 = 0;
              v51 = 0;
              v67 = 0;
            }
            goto LABEL_287;
          }
          v191 = v27;
        }
LABEL_281:
        *a1 = 0;
        a1[1] = 0;
        v192 = a1[3];
        if (v192)
        {
          v386 = v56;
          v407 = v57;
          v430 = v48;
          v335 = v50;
          if (v191)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v192 + 16))(v192, v51, v191);
            v61 = 0;
            v51 = (char *)*a1;
            v27 = a1[1];
          }
          else
          {
            v27 = 0;
            v51 = 0;
            v61 = 0;
          }
          v50 = v335;
          v57 = v407;
          v48 = v430;
          v56 = v386;
        }
        else
        {
          v27 = 0;
          v51 = 0;
          v61 = 0;
        }
        goto LABEL_283;
      }
      v188 = 0;
    }
LABEL_277:
    *a1 = 0;
    a1[1] = 0;
    v189 = a1[3];
    if (v189)
    {
      v428 = v48;
      v333 = v50;
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, v188);
        v55 = 0;
        v51 = (char *)*a1;
        v27 = a1[1];
      }
      else
      {
        v51 = 0;
        v55 = 0;
      }
      v50 = v333;
      v48 = v428;
    }
    else
    {
      v27 = 0;
      v51 = 0;
      v55 = 0;
    }
    goto LABEL_279;
  }
LABEL_245:
  *a1 = 0;
  a1[1] = 0;
  v163 = a1[3];
  if (v163 && v40)
LABEL_247:
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v163 + 16))(v163, v41);
LABEL_329:
  LOBYTE(v468) = 0;
  v472 = 0;
  v225 = *a1;
  v226 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v226)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v225);
LABEL_141:
  v104 = a1[1];
  v105 = *a1;
  v106 = a1[2] - *a1;
  if (v104 <= v106)
  {
    v164 = 0;
    v165 = 0;
    *a1 = 0;
    a1[1] = 0;
    v166 = a1[3];
    if (v166)
    {
      if (v104)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 16))(v166);
        v165 = *a1;
        v164 = a1[1];
      }
      else
      {
        v164 = 0;
        v165 = 0;
      }
    }
    goto LABEL_249;
  }
  v107 = (unsigned __int8 *)(v105 + v106);
  a1[2] = (uint64_t)(v107 + 1);
  if (!v105)
  {
    v164 = v104;
    v165 = 0;
LABEL_249:
    v104 = 0;
    v105 = 0;
    *a1 = 0;
    a1[1] = 0;
    v167 = a1[3];
    if (v167)
    {
      if (v164)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, v165, v164);
        v105 = *a1;
        v104 = a1[1];
      }
      else
      {
        v104 = 0;
        v105 = 0;
      }
    }
LABEL_250:
    *a1 = 0;
    a1[1] = 0;
    v168 = a1[3];
    if (!v168 || !v104)
      goto LABEL_325;
    goto LABEL_252;
  }
  v108 = *v107;
  if (v108 >= 2)
    goto LABEL_250;
  if (!v108)
  {
    LOBYTE(v463) = 0;
    v466 = 0;
    v467 = 1;
    goto LABEL_172;
  }
  LOWORD(v478) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v478);
  v109 = (char)v478;
  if (BYTE1(v478))
    v110 = v478 > 4u;
  else
    v110 = 1;
  v2 = v110;
  if ((_DWORD)v2 == 1)
  {
    v7 = *a1;
    v27 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_453;
    goto LABEL_310;
  }
  while (1)
  {
    result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (void *)v7, (uint64_t)&v482);
    v27 = a1[1];
    v7 = *a1;
    v111 = a1[2] - *a1;
    if (v27 <= v111)
    {
      v212 = 0;
      v213 = 0;
      *a1 = 0;
      a1[1] = 0;
      v214 = a1[3];
      if (v214)
      {
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v214 + 16))(v214);
          v213 = *a1;
          v212 = a1[1];
        }
        else
        {
          v212 = 0;
          v213 = 0;
        }
      }
      goto LABEL_312;
    }
    v112 = (unsigned __int8 *)(v7 + v111);
    v113 = v7 + v111 + 1;
    a1[2] = v113;
    if (!v7)
    {
      v212 = v27;
      v213 = 0;
LABEL_312:
      *a1 = 0;
      a1[1] = 0;
      v215 = a1[3];
      if (v215 && v212)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v215 + 16))(v215, v213, v212);
        v114 = 0;
        v7 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v7 = 0;
        v114 = 0;
      }
      goto LABEL_314;
    }
    v114 = *v112;
    if (v114 < 2)
    {
      v115 = 0;
      v116 = 1;
      goto LABEL_156;
    }
LABEL_314:
    *a1 = 0;
    a1[1] = 0;
    v216 = a1[3];
    if (!v216 || !v27)
    {
      v117 = 0;
      v217 = 0;
      v7 = 0;
      v115 = 1;
LABEL_316:
      *a1 = 0;
      a1[1] = 0;
      v218 = a1[3];
      if (v218 && v217)
      {
        (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v7, v217);
        v7 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v7 = 0;
      }
      goto LABEL_318;
    }
    result = (*(uint64_t (**)(uint64_t, int64_t))(*(_QWORD *)v216 + 16))(v216, v7);
    v116 = 0;
    v7 = *a1;
    v27 = a1[1];
    v115 = 1;
    v113 = a1[2];
LABEL_156:
    if (v114)
      v117 = v116;
    else
      v117 = 0;
    v118 = v113 - v7;
    if (v27 <= v118)
    {
      v217 = 0;
      v244 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v27 && v244)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v244 + 16))(v244);
        v7 = *a1;
        v217 = a1[1];
      }
      else
      {
        v7 = 0;
      }
      goto LABEL_316;
    }
    v119 = (unsigned __int8 *)(v7 + v118);
    a1[2] = (uint64_t)(v119 + 1);
    if (!v7)
    {
      v217 = v27;
      goto LABEL_316;
    }
    v120 = *v119;
    if (v120 <= 1)
    {
      v121 = 0;
      v122 = v120 != 0;
      if ((_DWORD)v2)
        goto LABEL_452;
      goto LABEL_163;
    }
LABEL_318:
    *a1 = 0;
    a1[1] = 0;
    v219 = a1[3];
    if (!v219
      || !v27
      || (result = (*(uint64_t (**)(uint64_t, int64_t))(*(_QWORD *)v219 + 16))(v219, v7), !*a1))
    {
      v109 = 0;
      LOBYTE(v448) = 0;
      v449[24] = 0;
      v123 = 1;
      goto LABEL_167;
    }
    v122 = 0;
    v121 = 1;
    if ((_DWORD)v2)
      goto LABEL_452;
LABEL_163:
    LOBYTE(v478) = v109;
    if (!v484)
      goto LABEL_452;
    v2 = (uint64_t)v482;
    v3 = v483;
    v482 = 0;
    v483 = 0;
    if (v115)
      goto LABEL_452;
    LOBYTE(v481) = v117;
    if (v121)
      goto LABEL_452;
    HIBYTE(v481) = v122;
    LOBYTE(v448) = v109;
    v479 = 0;
    v480 = 0;
    LOWORD(v115) = v481;
    *(_WORD *)&v449[16] = v481;
    v449[24] = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v479, (void *)v7);
    v123 = 0;
LABEL_167:
    if (v484)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v482, (void *)v7);
    if (v123)
    {
      v105 = *a1;
      v221 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v168 = a1[3];
      if (v168 && v221)
LABEL_252:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, v105);
LABEL_325:
      LOBYTE(v463) = 0;
      v467 = 0;
      v222 = *a1;
      v223 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result && v223)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v222);
    }
    else
    {
      *(_OWORD *)v449 = 0uLL;
      v464 = v2;
      *(_QWORD *)v465 = v3;
      *(_WORD *)&v465[8] = v115;
      v2 = 1;
      v466 = 1;
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v449, (void *)v7);
      LOBYTE(v463) = v109;
      v467 = 1;
    }
LABEL_172:
    v27 = a1[1];
    v7 = *a1;
    v124 = a1[2] - *a1;
    if (v27 <= v124)
    {
      v169 = 0;
      v170 = 0;
      *a1 = 0;
      a1[1] = 0;
      v171 = a1[3];
      if (v171)
      {
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v171 + 16))(v171);
          v170 = *a1;
          v169 = a1[1];
        }
        else
        {
          v169 = 0;
          v170 = 0;
        }
      }
LABEL_254:
      v27 = 0;
      v7 = 0;
      *a1 = 0;
      a1[1] = 0;
      v172 = a1[3];
      if (v172)
      {
        if (v169)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v172 + 16))(v172, v170, v169);
          v7 = *a1;
          v27 = a1[1];
        }
        else
        {
          v27 = 0;
          v7 = 0;
        }
      }
LABEL_255:
      *a1 = 0;
      a1[1] = 0;
      v173 = a1[3];
      if (!v173 || !v27)
        goto LABEL_322;
LABEL_257:
      (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v173 + 16))(v173, v7);
      goto LABEL_322;
    }
    v125 = (unsigned __int8 *)(v7 + v124);
    a1[2] = (uint64_t)(v125 + 1);
    if (!v7)
    {
      v169 = v27;
      v170 = 0;
      goto LABEL_254;
    }
    v126 = *v125;
    if (v126 >= 2)
      goto LABEL_255;
    if (!v126)
    {
      v130 = 0;
      LOBYTE(v478) = 0;
      LOBYTE(v480) = 0;
      LOBYTE(v481) = 1;
      goto LABEL_184;
    }
    result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (void *)v7, (uint64_t)&v448);
    v127 = *a1;
    if (*a1)
    {
      if (!v449[8])
        goto LABEL_452;
      v128 = v448;
      v448 = 0;
      v3 = *(_QWORD *)v449;
      *(_QWORD *)v449 = 0;
      v485[0] = 0;
      v482 = v128;
      v485[1] = 0;
      v484 = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v485, (void *)v7);
    }
    else
    {
      LOBYTE(v482) = 0;
      v484 = 0;
    }
    if (v449[8])
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v448, (void *)v7);
    if (v127)
    {
      v129 = v482;
      v482 = 0;
      v483 = 0;
      v478 = v129;
      v479 = v3;
      v2 = 1;
      LOBYTE(v480) = 1;
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v482, (void *)v7);
      v130 = 0;
      LOBYTE(v481) = 1;
      goto LABEL_184;
    }
    v7 = *a1;
    v220 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v173 = a1[3];
    if (v173 && v220)
      goto LABEL_257;
LABEL_322:
    LOBYTE(v478) = 0;
    LOBYTE(v481) = 0;
    v7 = *a1;
    v27 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v27)
      result = (*(uint64_t (**)(uint64_t, int64_t))(*(_QWORD *)result + 16))(result, v7);
    v130 = 1;
LABEL_184:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 160) = 0;
      v140 = v480;
      goto LABEL_212;
    }
    if (v11)
      goto LABEL_452;
    LOBYTE(v448) = v13;
    if (!v477)
      goto LABEL_452;
    v449[0] = 0;
    v450 = 0;
    v131 = v476;
    if (v476)
    {
      *(_WORD *)v449 = v473;
      v132 = v474;
      v474 = 0u;
      v133 = v475;
      v475 = 0u;
      *(_OWORD *)&v449[8] = v132;
      *(_OWORD *)&v449[24] = v133;
      v450 = 1;
    }
    if (!v472)
      goto LABEL_452;
    LOBYTE(v451) = 0;
    v454 = 0;
    v134 = v471;
    if (v471)
    {
      v451 = v468;
      v135 = v469;
      v468 = 0;
      v469 = 0;
      v452 = v135;
      v453[0] = v470[0];
      *(_DWORD *)((char *)v453 + 7) = *(_DWORD *)((char *)v470 + 7);
      v454 = 1;
    }
    if (!v467)
      goto LABEL_452;
    v455 = 0;
    v459 = 0;
    v136 = v466;
    if (!v466)
      break;
    v137 = (char)v463;
    v455 = (char)v463;
    v456 = v464;
    v138 = *(_QWORD *)v465;
    v464 = 0;
    *(_QWORD *)v465 = 0;
    v457 = v138;
    v458 = *(_WORD *)&v465[8];
    v139 = 1;
    v459 = 1;
    if (!v130)
      goto LABEL_197;
LABEL_452:
    __break(1u);
LABEL_453:
    if (v27)
      (*(void (**)(uint64_t, int64_t))(*(_QWORD *)result + 16))(result, v7);
LABEL_310:
    v109 = 0;
  }
  v137 = 0;
  v139 = 0;
  if (v130)
    goto LABEL_452;
LABEL_197:
  LOBYTE(v460) = 0;
  v462 = 0;
  v140 = v480;
  if ((_BYTE)v480)
  {
    v460 = v478;
    v141 = v479;
    v478 = 0;
    v479 = 0;
    v461 = v141;
    v462 = 1;
  }
  *(_BYTE *)a2 = v13;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v131)
  {
    *(_WORD *)(a2 + 8) = *(_WORD *)v449;
    v142 = *(_OWORD *)&v449[8];
    v143 = *(_OWORD *)&v449[24];
    memset(&v449[8], 0, 32);
    *(_OWORD *)(a2 + 16) = v142;
    *(_OWORD *)(a2 + 32) = v143;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (v134)
  {
    *(_QWORD *)(a2 + 56) = v451;
    v144 = v452;
    v451 = 0;
    v452 = 0;
    *(_QWORD *)(a2 + 64) = v144;
    *(_QWORD *)(a2 + 72) = v453[0];
    *(_DWORD *)(a2 + 79) = *(_DWORD *)((char *)v453 + 7);
    *(_BYTE *)(a2 + 88) = 1;
  }
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (v136)
  {
    *(_BYTE *)(a2 + 96) = v137;
    *(_QWORD *)(a2 + 104) = v456;
    v145 = v457;
    v456 = 0;
    v457 = 0;
    *(_QWORD *)(a2 + 112) = v145;
    *(_WORD *)(a2 + 120) = v458;
    *(_BYTE *)(a2 + 128) = 1;
  }
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  if (v140)
  {
    *(_QWORD *)(a2 + 136) = v460;
    v146 = v461;
    v460 = 0;
    v461 = 0;
    *(_QWORD *)(a2 + 144) = v146;
    *(_BYTE *)(a2 + 152) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v460, (void *)v7);
    v139 = v459;
  }
  *(_BYTE *)(a2 + 160) = 1;
  if (v139)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v456, (void *)v7);
  if (v454)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v451, (void *)v7);
  result = std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v449, (WTF::StringImpl *)v7);
LABEL_212:
  if (v140)
    v147 = v130;
  else
    v147 = 1;
  if ((v147 & 1) == 0)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v478, (void *)v7);
  if (v467 && v466)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v464, (void *)v7);
  if (v472 && v471)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v468, (void *)v7);
  if (v477)
    return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v473, (WTF::StringImpl *)v7);
  return result;
}

void sub_196E79CE8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF::StringImpl *a38,char a39,uint64_t a40,uint64_t a41,char a42,int a43,__int16 a44,char a45,char a46,WTF::StringImpl *a47,char a48,uint64_t a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MockCameraProperties,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v2 + 2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 4));
  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 5));
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::MockDisplayProperties,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 8));
  v5 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v2) = *((_DWORD *)v2 + 5);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  v4 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&>(a1, (int *)(a2 + 24), v5);
}

void IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF **v2;
  _BOOL4 v3;
  WTF::StringImpl *v4;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  WTF::StringImpl *v18;
  __int128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl **v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unsigned int v30;
  WTF *v31;
  char *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  WTF *v69;
  WTF *v70;
  unsigned int v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  char v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unsigned __int8 v103;
  WTF::StringImpl *v104;
  unsigned __int8 v105;
  WTF::StringImpl *v106;
  WTF *v107;
  uint64_t v108;
  __int128 v109;
  WTF *v110;
  uint64_t v111;
  __int16 v112;
  WTF *v113;
  uint64_t v114;
  unsigned __int8 v115;
  char v116[8];
  unsigned __int8 v117;
  WTF *v118;
  uint64_t v119;
  unsigned __int8 v120;
  WTF::StringImpl *v121[2];
  uint64_t v122;
  _QWORD v123[4];
  __int16 v124;
  char v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned __int8 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v104);
  v7 = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v102);
  v8 = a1[1];
  v9 = (WTF::StringImpl *)*a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    v43 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v12 = *a1;
        v43 = a1[1];
      }
      else
      {
        v43 = 0;
        v12 = 0;
      }
    }
    goto LABEL_85;
  }
  v11 = (unsigned __int8 *)v9 + v10;
  v12 = (uint64_t)(v11 + 1);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v43 = v8;
    v12 = 0;
LABEL_85:
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v12, v43);
        v9 = (WTF::StringImpl *)*a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_86;
  }
  v13 = *v11;
  if (v13 < 4)
  {
    v14 = v13 | 0x100;
    goto LABEL_5;
  }
LABEL_86:
  *a1 = 0;
  a1[1] = 0;
  v46 = a1[3];
  if (!v46 || !v8)
  {
    v9 = 0;
    v14 = 0;
    v8 = 0;
LABEL_88:
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v47 + 16))(v47, v9);
        v48 = *a1;
        v8 = a1[1];
      }
      else
      {
        v48 = 0;
      }
    }
    else
    {
      v48 = 0;
      v8 = 0;
    }
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v8)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v48);
    goto LABEL_8;
  }
  v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46, v9);
  v14 = 0;
  v9 = (WTF::StringImpl *)*a1;
  v8 = a1[1];
LABEL_5:
  if (v8 <= a1[2] - (uint64_t)v9)
    goto LABEL_88;
  v12 = a1[2];
  v15 = v12 + 1;
  a1[2] = v12 + 1;
  if (!v9)
  {
    v48 = 0;
    goto LABEL_90;
  }
  v12 = *(unsigned __int8 *)v12;
  if (v12 >= 4)
  {
LABEL_8:
    LOBYTE(v127) = 0;
    v131 = 0;
    goto LABEL_19;
  }
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 1)
    {
      IPC::Decoder::decode<WTF::String>(a1, v121);
      v7 = IPC::Decoder::decode<unsigned int>(a1);
      v12 = *a1;
      v16 = LOBYTE(v121[1]);
      if (*a1)
      {
        if (!LOBYTE(v121[1]))
          goto LABEL_190;
        v16 = (uint64_t)v121[0];
        v121[0] = 0;
        if ((v7 & 0xFF00000000) == 0)
          goto LABEL_190;
        v127 = v16;
        v17 = 1;
        v128 = v7;
        v130 = 1;
      }
      else
      {
        if (LOBYTE(v121[1]))
        {
          v54 = v121[0];
          v121[0] = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v9);
            else
              *(_DWORD *)v54 -= 2;
          }
        }
        v9 = (WTF::StringImpl *)*a1;
        v100 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v7 = a1[3];
        if (v7 && v100)
          v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v7 + 16))(v7, v9);
        v17 = 0;
        LOBYTE(v127) = 0;
      }
      goto LABEL_18;
    }
    if ((_DWORD)v12 != 2)
    {
      LOWORD(v2) = IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>(a1);
      IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v118);
      if (!(_BYTE)v119)
      {
        v59 = *a1;
        v60 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v61 = a1[3];
        if (v61)
        {
          if (v60)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59);
        }
      }
      v7 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1);
      if (*a1)
      {
        v16 = (unsigned __int16)v2;
        if ((unsigned __int16)v2 <= 0xFFu)
          goto LABEL_190;
        LOBYTE(v106) = (_BYTE)v2;
        v16 = v119;
        if (!(_BYTE)v119)
          goto LABEL_190;
        v39 = v7;
        v40 = (char)v38;
        v2 = &v107;
        v7 = WebCore::Color::Color();
        if (!v40)
          goto LABEL_190;
        v108 = v39;
        LOBYTE(v121[0]) = (_BYTE)v106;
        WebCore::Color::Color();
        v122 = v108;
        LOBYTE(v123[0]) = 1;
        if (((unint64_t)v107 & 0x8000000000000) != 0)
        {
          v51 = (unsigned int *)((unint64_t)v107 & 0xFFFFFFFFFFFFLL);
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v51);
            WTF::fastFree((WTF *)v51, v38);
          }
        }
      }
      else
      {
        LOBYTE(v121[0]) = 0;
        LOBYTE(v123[0]) = 0;
      }
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v38);
      if (LOBYTE(v123[0])
        || (v41 = (void *)*a1, v62 = a1[1], *a1 = 0, a1[1] = 0, (v63 = a1[3]) != 0)
        && v62
        && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v63 + 16))(v63, v41), LOBYTE(v123[0])))
      {
        LOBYTE(v127) = v121[0];
        WebCore::Color::Color();
        v129 = v122;
        v130 = 3;
        v42 = 1;
      }
      else
      {
        v42 = 0;
        LOBYTE(v127) = 0;
      }
      v131 = v42;
      v7 = std::__optional_destruct_base<WebCore::MockDisplayProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v121, v41);
      goto LABEL_19;
    }
    v24 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v9;
    v3 = v8 < v24 || v8 - v24 < 8;
    if (v3)
    {
      v4 = 0;
      *a1 = 0;
      a1[1] = 0;
      v55 = a1[3];
      if (v55)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
        v4 = 0;
        v56 = *a1;
        v57 = a1[1];
        v58 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (v58)
        {
          if (v57)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
            v4 = 0;
          }
        }
      }
    }
    else
    {
      v26 = (WTF::StringImpl **)((char *)v9 + v24);
      v4 = *v26;
      a1[2] = (uint64_t)(v26 + 1);
    }
    LOWORD(v2) = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
    v27 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v28)
    {
      v29 = v27;
      v113 = 0;
      v114 = 0;
      if (v27 >= 0x5555)
      {
        do
        {
          IPC::Decoder::decode<WebCore::VideoPresetData>((uint64_t)&v106, (unint64_t *)a1);
          if (!(_BYTE)v111)
            goto LABEL_135;
          if (HIDWORD(v114) == (_DWORD)v114)
          {
            WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::VideoPresetData>((unsigned int *)&v113, (unint64_t)&v106);
          }
          else
          {
            v64 = (char *)v113 + 48 * HIDWORD(v114);
            v65 = v106;
            *((_QWORD *)v64 + 1) = 0;
            *((_QWORD *)v64 + 2) = 0;
            *(_QWORD *)v64 = v65;
            v66 = v107;
            v107 = 0;
            *((_QWORD *)v64 + 1) = v66;
            *((_DWORD *)v64 + 4) = v108;
            LODWORD(v66) = HIDWORD(v108);
            HIDWORD(v108) = 0;
            *((_DWORD *)v64 + 5) = (_DWORD)v66;
            LOBYTE(v66) = (_BYTE)v110;
            *(_OWORD *)(v64 + 24) = v109;
            v64[40] = (char)v66;
            ++HIDWORD(v114);
          }
          if ((_BYTE)v111)
          {
            v67 = v107;
            if (v107)
            {
              v107 = 0;
              LODWORD(v108) = 0;
              WTF::fastFree(v67, v28);
            }
          }
          --v29;
        }
        while (v29);
        v68 = HIDWORD(v114);
        v69 = v113;
        if (v114 > HIDWORD(v114))
        {
          v70 = v113;
          if (HIDWORD(v114))
          {
            if (HIDWORD(v114) >= 0x5555556)
            {
              __break(0xC471u);
              return;
            }
            v71 = 48 * HIDWORD(v114);
            v72 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v114)));
            LODWORD(v114) = v71 / 0x30;
            v113 = v72;
            v70 = v69;
            if (v72 != v69)
            {
              WTF::VectorMover<false,WebCore::VideoPresetData>::move(v69, (WTF *)((char *)v69 + 48 * v68), (uint64_t)v72);
              v70 = v113;
            }
          }
          if (v69)
          {
            if (v70 == v69)
            {
              v113 = 0;
              LODWORD(v114) = 0;
            }
            WTF::fastFree(v69, v28);
            v69 = v113;
          }
          else
          {
            v69 = v70;
          }
        }
        v118 = v69;
        v101 = v114;
        v113 = 0;
        v114 = 0;
        v119 = v101;
      }
      else
      {
        if (v27)
        {
          v30 = 48 * v27;
          v31 = (WTF *)WTF::fastMalloc((WTF *)(48 * v27));
          LODWORD(v114) = v30 / 0x30;
          v113 = v31;
          while (1)
          {
            IPC::Decoder::decode<WebCore::VideoPresetData>((uint64_t)&v106, (unint64_t *)a1);
            if (!(_BYTE)v111)
              break;
            if (HIDWORD(v114) == (_DWORD)v114)
            {
              WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::VideoPresetData>((unsigned int *)&v113, (unint64_t)&v106);
            }
            else
            {
              v32 = (char *)v113 + 48 * HIDWORD(v114);
              v33 = v106;
              *((_QWORD *)v32 + 1) = 0;
              *((_QWORD *)v32 + 2) = 0;
              *(_QWORD *)v32 = v33;
              v34 = v107;
              v107 = 0;
              *((_QWORD *)v32 + 1) = v34;
              *((_DWORD *)v32 + 4) = v108;
              LODWORD(v34) = HIDWORD(v108);
              HIDWORD(v108) = 0;
              *((_DWORD *)v32 + 5) = (_DWORD)v34;
              LOBYTE(v34) = (_BYTE)v110;
              *(_OWORD *)(v32 + 24) = v109;
              v32[40] = (char)v34;
              ++HIDWORD(v114);
            }
            if ((_BYTE)v111)
            {
              v35 = v107;
              if (v107)
              {
                v107 = 0;
                LODWORD(v108) = 0;
                WTF::fastFree(v35, v28);
              }
            }
            if (!--v29)
            {
              v36 = v113;
              v37 = v114;
              goto LABEL_82;
            }
          }
LABEL_135:
          LOBYTE(v118) = 0;
          v120 = 0;
          WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v28);
          goto LABEL_136;
        }
        v36 = 0;
        v37 = 0;
LABEL_82:
        v113 = 0;
        v114 = 0;
        v118 = v36;
        v119 = v37;
      }
      v120 = 1;
      WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v28);
      goto LABEL_137;
    }
    LOBYTE(v118) = 0;
    v120 = 0;
LABEL_136:
    v73 = *a1;
    v74 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v75 = a1[3];
    if (v75 && v74)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73);
LABEL_137:
    IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v116);
    if (!v117)
    {
      v93 = *a1;
      v94 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v94)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v93);
      }
    }
    v7 = (uint64_t)IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v113, a1);
    v76 = a1[1];
    v77 = (char *)*a1;
    v78 = a1[2] - *a1;
    if (v76 <= v78)
    {
      v16 = 0;
      v12 = 0;
      *a1 = 0;
      a1[1] = 0;
      v96 = a1[3];
      if (v96)
      {
        if (v76)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
          v12 = *a1;
          v16 = a1[1];
        }
        else
        {
          v16 = 0;
          v12 = 0;
        }
      }
    }
    else
    {
      v79 = &v77[v78];
      v12 = (uint64_t)(v79 + 1);
      a1[2] = (uint64_t)(v79 + 1);
      if (v77)
      {
        v16 = *v79;
        if (v16 > 1)
          goto LABEL_168;
        v80 = 0;
        v81 = (_DWORD)v16 != 0;
        if (!v3)
          goto LABEL_142;
        while (1)
        {
          do
          {
LABEL_190:
            __break(1u);
LABEL_191:
            if (v16)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v12, v16);
              v77 = (char *)*a1;
              v76 = a1[1];
            }
            else
            {
              v76 = 0;
              v77 = 0;
            }
LABEL_168:
            *a1 = 0;
            a1[1] = 0;
            v97 = a1[3];
            if (!v97
              || !v76
              || (v7 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v97 + 16))(v97, v77), (v16 = *a1) == 0))
            {
              LOBYTE(v121[0]) = 0;
              v125 = 0;
              goto LABEL_149;
            }
            v81 = 0;
            v80 = 1;
          }
          while (v3);
LABEL_142:
          v106 = v4;
          v16 = (unsigned __int16)v2;
          if ((unsigned __int16)v2 > 0xFFu)
          {
            LOBYTE(v107) = (_BYTE)v2;
            v16 = v120;
            if (v120)
            {
              v108 = (uint64_t)v118;
              v82 = v119;
              v118 = 0;
              v119 = 0;
              *(_QWORD *)&v109 = v82;
              v16 = v117;
              if (v117)
              {
                v2 = (WTF **)&v108;
                v7 = WebCore::Color::Color();
                v16 = v115;
                if (v115)
                {
                  v16 = (uint64_t)v113;
                  v110 = v113;
                  v83 = v114;
                  v113 = 0;
                  v114 = 0;
                  v111 = v83;
                  if (!v80)
                    break;
                }
              }
            }
          }
        }
        v112 = v81;
        v121[0] = v106;
        LOBYTE(v121[1]) = (_BYTE)v107;
        v122 = v108;
        v84 = v109;
        v108 = 0;
        *(_QWORD *)&v109 = 0;
        v123[0] = v84;
        WebCore::Color::Color();
        v123[2] = v110;
        v86 = v111;
        v110 = 0;
        v111 = 0;
        v123[3] = v86;
        v124 = v112;
        v125 = 1;
        if ((*((_QWORD *)&v109 + 1) & 0x8000000000000) != 0)
        {
          v90 = (unsigned int *)(*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFLL);
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            atomic_store(1u, v90);
            WTF::fastFree((WTF *)v90, v85);
          }
        }
        WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v85);
LABEL_149:
        if (v115 && v113)
          WTF::fastFree(v113, v77);
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v77);
        if (v120)
          WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v87);
        if (v125
          || (v88 = (void *)*a1, v98 = a1[1], *a1 = 0, a1[1] = 0, (v99 = a1[3]) != 0)
          && v98
          && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v99 + 16))(v99, v88), v125))
        {
          std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>((uint64_t)&v127, (uint64_t *)v121);
          v130 = 2;
          v89 = 1;
        }
        else
        {
          v89 = 0;
          LOBYTE(v127) = 0;
        }
        v131 = v89;
        v7 = std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v121, v88);
        goto LABEL_19;
      }
      v16 = v76;
      v12 = 0;
    }
    v76 = 0;
    v77 = 0;
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      goto LABEL_191;
    goto LABEL_168;
  }
  v7 = IPC::Decoder::decode<unsigned int>(a1);
  v16 = *a1;
  if (!*a1)
  {
    v50 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v50)
      v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    goto LABEL_8;
  }
  if ((v7 & 0xFF00000000) == 0)
    goto LABEL_190;
  LODWORD(v127) = v7;
  v130 = 0;
  v17 = 1;
LABEL_18:
  v131 = v17;
LABEL_19:
  if (!v131)
  {
    v9 = (WTF::StringImpl *)*a1;
    v49 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      if (v49)
        v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v7 + 16))(v7, v9);
    }
  }
  if (*a1)
  {
    v16 = v105;
    if (!v105)
      goto LABEL_190;
    v18 = v104;
    v104 = 0;
    v121[0] = v18;
    v16 = v103;
    if (!v103)
      goto LABEL_190;
    v16 = (uint64_t)v102;
    v102 = 0;
    v121[1] = (WTF::StringImpl *)v16;
    if (v14 <= 0xFF)
      goto LABEL_190;
    LOBYTE(v122) = v14;
    v16 = v131;
    if (!v131)
      goto LABEL_190;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v123, (uint64_t)&v127);
    v19 = *(_OWORD *)v121;
    v121[0] = 0;
    v121[1] = 0;
    *(_OWORD *)a2 = v19;
    *(_BYTE *)(a2 + 16) = v122;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 24, (uint64_t)v123);
    *(_BYTE *)(a2 + 96) = 1;
    if (v126 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34ADF40[v126])(&v106, v123);
    v126 = -1;
    v20 = v121[1];
    v121[1] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v121[0];
    v121[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v9);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
  }
  if (v131 && v130 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34ADF40[v130])(v121, &v127);
  if (v103)
  {
    v22 = v102;
    v102 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v9);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v105)
  {
    v23 = v104;
    v104 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v9);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
}

void sub_196E7AC54(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,uint64_t a23,WTF *a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  WTF::StringImpl *v47;

  std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a35, a2);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v47);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v47);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::AcceleratedEffectProperty>>(uint64_t *a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  __int16 v10;

  v2 = IPC::Decoder::decode<unsigned short>(a1);
  v3 = (v2 & 0xE001) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v10 = v2;
      v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3)
    return 0;
  else
    return (unsigned __int16)v2 | 0x10000u;
}

char *IPC::ArgumentCoder<WebCore::AcceleratedEffect,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  __int16 v23;
  char v24;
  char v25;
  __int16 v26;
  uint64_t v27;
  _BYTE v29[24];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
    ++v4[2];
  *(_QWORD *)v29 = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v29[8] = *(_OWORD *)(a2 + 32);
  v30 = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v31 = *(_OWORD *)(a2 + 64);
  v32 = v6;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (_QWORD **)v29);
  v7 = v29[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v29[9];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_QWORD *)&v29[16];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = v30;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = *((_QWORD *)&v30 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  v12 = v31;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
  v13 = *((_QWORD *)&v31 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
  v14 = v32;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  v15 = *((_QWORD *)&v32 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v15;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v16 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v16;
  v17 = *(_DWORD *)(a2 + 108);
  if (v17)
  {
    v18 = 280 * v17;
    v19 = *(_QWORD *)(a2 + 96) + 264;
    do
    {
      v20 = *(_QWORD *)(v19 - 256);
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v20;
      IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(a1, (int *)(v19 - 248));
      IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (_QWORD **)v19);
      v21 = *(unsigned __int16 *)(v19 + 8);
      v22 = IPC::Encoder::grow(a1, 1uLL, 1);
      if (v21 > 0xFF)
      {
        *v22 = 1;
        *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
      }
      else
      {
        *v22 = 0;
      }
      v23 = *(_WORD *)(v19 + 10);
      *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v23;
      v19 += 280;
      v18 -= 280;
    }
    while (v18);
  }
  v24 = *(_BYTE *)(a2 + 112);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
  v25 = *(_BYTE *)(a2 + 113);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v25;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (_QWORD **)(a2 + 120));
  v26 = *(_WORD *)(a2 + 128);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v26;
  LOBYTE(v26) = *(_BYTE *)(a2 + 132);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v26;
  v27 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v27;
  *(_OWORD *)v29 = *(_OWORD *)(a2 + 144);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)v29);
  *(_OWORD *)v29 = *(_OWORD *)(a2 + 160);
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)v29);
}

void sub_196E7B318(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::CredentialBase::NonPlatformData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::Credential,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  _BYTE v7[24];
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(a1, (uint64_t)v7);
  if (*a1)
  {
    if (!v9)
      __break(1u);
    WebCore::Credential::fromIPCData();
    *(_OWORD *)a2 = v4;
    *(_BYTE *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  if (v9)
  {
    if (v8 != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v8])(&v4, v7);
  }
}

void sub_196E7B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a16])(&a9, &a13);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E7B504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 32))
  {
    v15 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebCore::ShapeDetection::BarcodeDetectorOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  void *v5;
  WTF *v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v8)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v7;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (v8)
    {
      result = v6;
      if (v6)
      {
        v6 = 0;
        LODWORD(v7) = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E7B61C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v4 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl *result;
  void *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25[2];
  char v26;
  WTF::StringImpl *v27;
  char v28;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_20;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v20 = *a1;
      v21 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v22 = a1[3];
      if (v22)
      {
        if (v21)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_19;
      v11 = v4 & 0xFFFFFFFFFFFFFF00;
      v6 = v4;
    }
    else
    {
      v6 = 0;
      v11 = 0;
      v23 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (v24)
      {
        if (v23)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
        v6 = 0;
        v11 = 0;
      }
    }
    IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v27);
    v4 = IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>((uint64_t *)a1);
    result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v25, a1);
    if (!*a1)
      break;
    if (v10)
    {
      if (v28)
      {
        v14 = v27;
        v27 = 0;
        if ((unsigned __int16)v4 > 0xFFu)
        {
          if (v26)
          {
            v15 = v25[0];
            *(_QWORD *)a2 = v11 | v6;
            *(_QWORD *)(a2 + 8) = v7;
            *(_QWORD *)(a2 + 16) = v14;
            *(_BYTE *)(a2 + 24) = v4;
            *(_QWORD *)(a2 + 32) = v15;
            *(WTF **)(a2 + 40) = v25[1];
            *(_BYTE *)(a2 + 48) = 1;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_19:
    __break(1u);
LABEL_20:
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
      v19 = v17 == 0;
    else
      v19 = 1;
    if (!v19)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v26)
  {
    result = v25[0];
    if (v25[0])
      result = (WTF::StringImpl *)WTF::fastFree(v25[0], v13);
  }
LABEL_13:
  if (v28)
  {
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7B868(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 0xDu;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  WTF *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  WTF *result;
  BOOL v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int v31;
  WTF *v32;
  uint64_t v33;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_12:
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v15 = v13 == 0;
    else
      v15 = 1;
    if (!v15)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v12);
    return result;
  }
  v6 = v4;
  v32 = 0;
  v33 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      result = (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (!(_BYTE)v5)
        break;
      v30 = (unint64_t)result;
      v31 = (int)v5;
      if (HIDWORD(v33) == (_DWORD)v33)
      {
        result = (WTF *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
        *((_QWORD *)v32 + HIDWORD(v33)) = *(_QWORD *)result;
      }
      else
      {
        *((_QWORD *)v32 + HIDWORD(v33)) = result;
      }
      v17 = ++HIDWORD(v33);
      if (!--v6)
      {
        v18 = v32;
        if (v33 <= v17)
          goto LABEL_47;
        v19 = v32;
        if (!(_DWORD)v17)
          goto LABEL_36;
        if (!(v17 >> 29))
        {
          v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v17));
          LODWORD(v33) = v17;
          v32 = v20;
          v19 = v18;
          if (v20 != v18)
          {
            v21 = v18;
            v22 = 8 * v17;
            do
            {
              v23 = *(_QWORD *)v21;
              v21 = (WTF *)((char *)v21 + 8);
              *(_QWORD *)v20 = v23;
              v20 = (WTF *)((char *)v20 + 8);
              v22 -= 8;
            }
            while (v22);
            v19 = v32;
          }
LABEL_36:
          if (v18)
          {
            if (v19 == v18)
            {
              v32 = 0;
              LODWORD(v33) = 0;
            }
            WTF::fastFree(v18, v5);
            v18 = v32;
          }
          else
          {
            v18 = v19;
          }
LABEL_47:
          v16 = 0;
          *(_QWORD *)a1 = v18;
          v27 = v33;
          v32 = 0;
          v33 = 0;
          *(_QWORD *)(a1 + 8) = v27;
          goto LABEL_19;
        }
        __break(0xC471u);
        return result;
      }
    }
    v5 = (void *)*a2;
    v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
      v29 = v28 == 0;
    else
      v29 = 1;
    if (v29)
      goto LABEL_45;
LABEL_44:
    (*(void (**)(unint64_t, void *))(*(_QWORD *)v25 + 16))(v25, v5);
LABEL_45:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v16 = 1;
    goto LABEL_20;
  }
  if (v4)
  {
    LODWORD(v33) = v4;
    v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (!(_BYTE)v5)
        break;
      v30 = v7;
      v31 = (int)v5;
      if (HIDWORD(v33) == (_DWORD)v33)
      {
        v8 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
        *((_QWORD *)v32 + HIDWORD(v33)) = *v8;
      }
      else
      {
        *((_QWORD *)v32 + HIDWORD(v33)) = v7;
      }
      v9 = ++HIDWORD(v33);
      if (!--v6)
      {
        v10 = v32;
        v11 = v33;
        goto LABEL_18;
      }
    }
    v5 = (void *)*a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
      v26 = v24 == 0;
    else
      v26 = 1;
    if (v26)
      goto LABEL_45;
    goto LABEL_44;
  }
  v9 = 0;
  v11 = 0;
  v10 = 0;
LABEL_18:
  v16 = 0;
  v32 = 0;
  *(_QWORD *)a1 = v10;
  HIDWORD(v33) = 0;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v9;
LABEL_19:
  *(_BYTE *)(a1 + 16) = 1;
LABEL_20:
  result = v32;
  if (v32)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v16)
    goto LABEL_12;
  return result;
}

void sub_196E7BBE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedFace,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17 && v16 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = result;
  v10 = v8;
  if (!(_BYTE)v8)
  {
    v8 = (void *)*a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v19)
      {
        result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v8);
        v10 = 0;
      }
    }
  }
  if (!*a1)
  {
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21 && v20)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, 0);
    result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF *)&v25, a1);
    if (!*a1)
    {
LABEL_26:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 40) = 0;
      v11 = v27;
      if (!v28)
        return result;
      goto LABEL_12;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!v6 || !v10)
    goto LABEL_25;
  result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF *)&v25, a1);
  if (!*a1)
    goto LABEL_26;
  *(_QWORD *)&v22 = v4;
  *((_QWORD *)&v22 + 1) = v9;
  if (!v28)
    goto LABEL_25;
  v11 = v27;
  if (v27)
  {
    v12 = v25;
    v25 = 0;
    v13 = 1;
    v24 = 1;
    *(_OWORD *)a2 = v22;
    v23[0] = 0;
    *(_QWORD *)(a2 + 16) = v12;
    v23[1] = 0;
    v14 = v26;
    v26 = 0;
    *(_QWORD *)(a2 + 24) = v14;
    result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v8);
  }
  else
  {
    v13 = 0;
    *(_OWORD *)a2 = v22;
    *(_BYTE *)(a2 + 16) = 0;
  }
  *(_BYTE *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = 1;
LABEL_12:
  if (v11)
    return WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v8);
  return result;
}

WTF *IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WTF *result, unint64_t *a2)
{
  WTF *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  WTF *v34;
  int v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_23;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v6;
    v20 = 0;
LABEL_23:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (!v22)
      goto LABEL_45;
    if (!v19)
    {
      v6 = 0;
      v5 = 0;
LABEL_45:
      *a2 = 0;
      a2[1] = 0;
      v28 = a2[3];
      if (v28 && v6)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v5);
      *(_BYTE *)v3 = 0;
      *((_BYTE *)v3 + 24) = 0;
      v29 = *a2;
      v30 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = (WTF *)a2[3];
      if (result && v30)
        return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v29);
      return result;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
LABEL_44:
    v5 = *a2;
    v6 = a2[1];
    goto LABEL_45;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_45;
  if (!v9)
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
    *((_BYTE *)result + 24) = 1;
    return result;
  }
  v10 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v11)
    goto LABEL_44;
  v12 = v10;
  v39 = 0;
  v40 = 0;
  if (v10 >= 0xAAAA)
  {
    do
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::ShapeDetection::Landmark>((uint64_t)&v34, a2);
      if (!v38)
        goto LABEL_43;
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        result = (WTF *)WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::Landmark>((unsigned int *)&v39, (unint64_t)&v34);
      }
      else
      {
        v23 = v39 + 24 * HIDWORD(v40);
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        v24 = v34;
        v34 = 0;
        *(_QWORD *)v23 = v24;
        *(_DWORD *)(v23 + 8) = v35;
        LODWORD(v24) = v36;
        v36 = 0;
        *(_DWORD *)(v23 + 12) = (_DWORD)v24;
        *(_BYTE *)(v23 + 16) = v37;
        ++HIDWORD(v40);
      }
      if (v38)
      {
        result = v34;
        if (v34)
        {
          v34 = 0;
          v35 = 0;
          result = (WTF *)WTF::fastFree(result, v11);
        }
      }
      --v12;
    }
    while (v12);
    v25 = HIDWORD(v40);
    v16 = (WTF *)v39;
    if (v40 > HIDWORD(v40))
    {
      v26 = (WTF *)v39;
      if (HIDWORD(v40))
      {
        if (HIDWORD(v40) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v27 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v40)));
        LODWORD(v40) = 24 * v25 / 0x18;
        v39 = v27;
        v26 = v16;
        if ((WTF *)v27 != v16)
        {
          WTF::VectorMover<false,WebCore::ShapeDetection::Landmark>::move(v16, (WTF *)((char *)v16 + 24 * v25), v27);
          v26 = (WTF *)v39;
        }
      }
      if (v16)
      {
        if (v26 == v16)
        {
          v39 = 0;
          LODWORD(v40) = 0;
        }
        WTF::fastFree(v16, v11);
LABEL_17:
        v16 = (WTF *)v39;
      }
      else
      {
        v16 = v26;
      }
    }
    v17 = v40;
    goto LABEL_21;
  }
  if (v10)
  {
    LODWORD(v40) = 24 * (int)v10 / 0x18u;
    v39 = WTF::fastMalloc((WTF *)(24 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::Landmark>((uint64_t)&v34, a2);
      if (!v38)
        break;
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::Landmark>((unsigned int *)&v39, (unint64_t)&v34);
      }
      else
      {
        v13 = v39 + 24 * HIDWORD(v40);
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v14 = v34;
        v34 = 0;
        *(_QWORD *)v13 = v14;
        *(_DWORD *)(v13 + 8) = v35;
        LODWORD(v14) = v36;
        v36 = 0;
        *(_DWORD *)(v13 + 12) = (_DWORD)v14;
        *(_BYTE *)(v13 + 16) = v37;
        ++HIDWORD(v40);
      }
      if (v38)
      {
        v15 = v34;
        if (v34)
        {
          v34 = 0;
          v35 = 0;
          WTF::fastFree(v15, v11);
        }
      }
      if (!--v12)
        goto LABEL_17;
    }
LABEL_43:
    WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v11);
    goto LABEL_44;
  }
  v16 = 0;
  v17 = 0;
LABEL_21:
  v31 = v17;
  v39 = 0;
  v40 = 0;
  v33 = 1;
  WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v11);
  v32[0] = 0;
  v32[1] = 0;
  *(_QWORD *)v3 = v16;
  *((_QWORD *)v3 + 1) = v31;
  *((_BYTE *)v3 + 16) = 1;
  result = (WTF *)WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v18);
  *((_BYTE *)v3 + 24) = 1;
  return result;
}

void sub_196E7C19C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a18)
  {
    if (a15)
      WTF::fastFree(a15, a2);
  }
  WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 - 48, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  return IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *result;
  void *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24[2];
  char v25;
  WTF::StringImpl *v26;
  char v27;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_19;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v19 = *a1;
      v20 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v21 = a1[3];
      if (v21)
      {
        if (v20)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
          v9 = 0;
        }
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_18;
      v6 = v4 & 0xFFFFFFFFFFFFFF00;
      v4 = v4;
    }
    else
    {
      v4 = 0;
      v6 = 0;
      v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23)
      {
        if (v22)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
        v4 = 0;
        v6 = 0;
      }
    }
    IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v26);
    result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v24, a1);
    if (!*a1)
      break;
    if (v10)
    {
      if (v27)
      {
        v13 = v26;
        v26 = 0;
        if (v25)
        {
          v14 = v24[0];
          *(_QWORD *)a2 = v6 | v4;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v13;
          *(_QWORD *)(a2 + 24) = v14;
          *(WTF **)(a2 + 32) = v24[1];
          *(_BYTE *)(a2 + 40) = 1;
          goto LABEL_12;
        }
      }
    }
LABEL_18:
    __break(1u);
LABEL_19:
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v25)
  {
    result = v24[0];
    if (v24[0])
      result = (WTF::StringImpl *)WTF::fastFree(v24[0], v12);
  }
LABEL_12:
  if (v27)
  {
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7C3C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::encode(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  result = IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 2);
    a1[2] = v5 + 1;
  }
  return result;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(_QWORD *result, _WORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 2;
    v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_WORD *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::decode(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v2 = IPC::Decoder::decode<unsigned short>(a1);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v9 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v16 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v8 = (unsigned __int8 *)*a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
      v2 = v16;
    }
LABEL_8:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v3 = a1[3];
    if (v3)
      goto LABEL_15;
    goto LABEL_9;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v7 + 1;
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v9 = v4;
    v8 = 0;
    goto LABEL_8;
  }
  v9 = *v7;
  if (v9 >= 2)
    goto LABEL_9;
  if ((v2 & 0xFF0000) != 0)
  {
    v10 = (unsigned __int16)v2 | (((_DWORD)v9 != 0) << 16);
    v11 = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_15:
      v15 = v2;
      if (v9)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8, v9);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
      v2 = v15;
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        break;
      v14 = v2;
      if (!v4)
      {
        v11 = 0;
        break;
      }
      v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v5);
      v11 = *a1;
      if (!*a1)
        break;
      v9 = v14;
    }
    v10 = 0;
  }
  return v10 | (unint64_t)(v11 << 32);
}

char *IPC::ArgumentCoder<WebCore::TextExtraction::Editable,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  v4 = *((_BYTE *)v2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 17);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::TextExtraction::TextItemData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<std::optional<WebCore::TextExtraction::Editable>,void>::encode<IPC::Encoder,std::optional<WebCore::TextExtraction::Editable> const&>(a1, a2 + 48);
}

char *IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>(a1, (int *)a2, v4);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 88));
  return IPC::VectorArgumentCoder<false,WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 104));
}

uint64_t IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  int v6;
  unint64_t v7;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned int v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int v80;
  __int16 v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  int v98;
  int v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  __int128 v102;
  unsigned __int8 v103;
  unint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t result;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  unsigned int v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  unint64_t v176;
  _OWORD v177[2];
  uint64_t v178;
  WTF::StringImpl *v179;
  __int128 v180;
  __int16 v181;
  char v182;
  int v183;
  char v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  unint64_t v191;
  __int16 v192;
  char v193;
  unsigned __int128 v194;
  __int16 v195;
  char v196;
  char v197;
  WTF::StringImpl *v198;
  char v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  char v202;
  WTF::StringImpl *v203;
  char v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  _BYTE v208[24];
  __int16 v209;
  unsigned __int8 v210;
  int v211;
  __int128 v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  char v215;
  _QWORD v216[5];

  v216[2] = *MEMORY[0x1E0C80C00];
  v10 = a1[1];
  v11 = *a1;
  v12 = a1[2] - *a1;
  if (v10 <= v12)
  {
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v11, v10);
        v34 = a1[1];
      }
      else
      {
        v34 = 0;
      }
    }
    goto LABEL_52;
  }
  v13 = (_BYTE *)(v11 + v12);
  a1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v34 = v10;
LABEL_52:
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (!v36 || !v34)
      goto LABEL_4;
    v37 = *(void (**)(void))(*(_QWORD *)v36 + 16);
    goto LABEL_55;
  }
  v14 = *v13;
  if (v14 <= 3)
  {
    if (!*v13)
    {
      LOWORD(v205) = 0;
      IPC::Decoder::operator>><unsigned char>(a1, &v205);
      if (!BYTE1(v205) || v205 >= 9u)
      {
        v38 = *a1;
        v39 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v40 = a1[3];
        if (v40 && v39)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
        goto LABEL_4;
      }
      LOBYTE(v177[0]) = v205;
      v183 = 0;
LABEL_32:
      v184 = 1;
      goto LABEL_154;
    }
    if (v14 == 1)
    {
      v18 = IPC::Decoder::decode<unsigned long long>(a1);
      if ((_BYTE)v19)
      {
        v20 = v18;
        v185 = 0;
        v186 = 0;
        if (v18 >= 0x4924)
        {
          while (1)
          {
            IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>((uint64_t)&v205, a1);
            if (!v208[16])
              break;
            v4 = HIDWORD(v186);
            if (HIDWORD(v186) == (_DWORD)v186)
            {
              WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::URL,WebCore::CharacterRange>>((unsigned int *)&v185, (unint64_t)&v205);
            }
            else
            {
              v5 = v185;
              WTF::URL::URL((uint64_t)v185 + 56 * HIDWORD(v186), (uint64_t *)&v205);
              *(_OWORD *)((char *)v5 + 56 * v4 + 40) = *(_OWORD *)v208;
              ++HIDWORD(v186);
            }
            if (v208[16])
            {
              v41 = (WTF::StringImpl *)v205;
              *(_QWORD *)&v205 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v19);
                else
                  *(_DWORD *)v41 -= 2;
              }
            }
            if (!--v20)
            {
              v42 = HIDWORD(v186);
              v43 = v185;
              if (v186 > HIDWORD(v186))
              {
                v44 = v185;
                if (HIDWORD(v186))
                {
                  if (HIDWORD(v186) >= 0x4924925)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196E7D9A0);
                  }
                  v45 = 56 * HIDWORD(v186);
                  v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * HIDWORD(v186)));
                  LODWORD(v186) = v45 / 0x38;
                  v185 = v46;
                  v44 = v43;
                  if (v46 != v43)
                  {
                    WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v43, (WTF::StringImpl *)((char *)v43 + 56 * v42), (uint64_t)v46);
                    v44 = v185;
                  }
                }
                if (v43)
                {
                  if (v44 == v43)
                  {
                    v185 = 0;
                    LODWORD(v186) = 0;
                  }
                  WTF::fastFree(v43, v19);
                  v43 = v185;
                }
                else
                {
                  v43 = v44;
                }
              }
              v200 = v43;
              v173 = v186;
              v185 = 0;
              v186 = 0;
              v201 = v173;
              goto LABEL_44;
            }
          }
        }
        else
        {
          if (!v18)
          {
            v23 = 0;
            v24 = 0;
LABEL_43:
            v185 = 0;
            v186 = 0;
            v200 = v23;
            v201 = v24;
LABEL_44:
            v202 = 1;
            WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v19);
LABEL_80:
            v50 = a1[1];
            v51 = *a1;
            v52 = a1[2] - *a1;
            if (v50 <= v52)
            {
              v56 = 0;
              v57 = 0;
              *a1 = 0;
              a1[1] = 0;
              v58 = a1[3];
              if (v58)
              {
                if (v50)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
                  v57 = *a1;
                  v56 = a1[1];
                }
                else
                {
                  v56 = 0;
                  v57 = 0;
                }
              }
            }
            else
            {
              v53 = (unsigned __int8 *)(v51 + v52);
              a1[2] = (uint64_t)(v53 + 1);
              if (v51)
              {
                v54 = *v53;
                if (v54 < 2)
                {
                  if (!v54)
                  {
                    v55 = (WTF::StringImpl *)&v205;
                    v3 = 0;
                    v175 = 0;
                    v2 = 0;
                    goto LABEL_94;
                  }
                  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v205);
                  if ((_BYTE)v206)
                  {
                    v3 = 0;
                    v2 = v205;
                    v216[0] = *(_QWORD *)((char *)&v205 + 1);
                    v55 = (WTF::StringImpl *)&v205;
                    *(_QWORD *)((char *)v216 + 7) = *((_QWORD *)&v205 + 1);
                    v175 = 1;
                    goto LABEL_94;
                  }
LABEL_92:
                  v61 = *a1;
                  v62 = a1[1];
                  *a1 = 0;
                  a1[1] = 0;
                  v63 = a1[3];
                  if (v63 && v62)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v61);
                  v55 = (WTF::StringImpl *)&v205;
                  v2 = 0;
                  v3 = 1;
LABEL_94:
                  IPC::Decoder::decode<WTF::String>(a1, &v198);
                  v64 = a1[1];
                  v65 = (WTF::StringImpl *)*a1;
                  v66 = a1[2] - *a1;
                  if (v64 <= v66)
                  {
                    v149 = 0;
                    v150 = 0;
                    *a1 = 0;
                    a1[1] = 0;
                    v151 = a1[3];
                    if (v151)
                    {
                      if (v64)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 16))(v151);
                        v150 = *a1;
                        v149 = a1[1];
                      }
                      else
                      {
                        v149 = 0;
                        v150 = 0;
                      }
                    }
                  }
                  else
                  {
                    v67 = (unsigned __int8 *)v65 + v66;
                    a1[2] = (uint64_t)(v67 + 1);
                    if (v65)
                    {
                      v68 = *v67;
                      if (v68 < 2)
                      {
                        if (!v68)
                        {
                          v85 = a2;
                          LOBYTE(v205) = 0;
                          BYTE8(v206) = 0;
                          LOBYTE(v194) = 0;
                          v196 = 0;
                          LOBYTE(v4) = 1;
                          v197 = 1;
                          std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v65);
                          v87 = 0;
                          goto LABEL_126;
                        }
                        IPC::Decoder::decode<WTF::String>(a1, &v185);
                        IPC::Decoder::decode<WTF::String>(a1, &v203);
                        v69 = a1[1];
                        v70 = (WTF::StringImpl *)*a1;
                        v71 = a1[2] - *a1;
                        if (v69 <= v71)
                        {
                          v156 = 0;
                          v157 = 0;
                          *a1 = 0;
                          a1[1] = 0;
                          v158 = a1[3];
                          if (v158)
                          {
                            if (v69)
                            {
                              (*(void (**)(uint64_t))(*(_QWORD *)v158 + 16))(v158);
                              v157 = *a1;
                              v156 = a1[1];
                            }
                            else
                            {
                              v156 = 0;
                              v157 = 0;
                            }
                          }
                        }
                        else
                        {
                          v72 = (unsigned __int8 *)v70 + v71;
                          v73 = (uint64_t)v70 + v71 + 1;
                          a1[2] = v73;
                          if (v70)
                          {
                            v74 = *v72;
                            if (v74 < 2)
                            {
                              v75 = 0;
                              v76 = 1;
                              goto LABEL_102;
                            }
LABEL_234:
                            *a1 = 0;
                            a1[1] = 0;
                            v160 = a1[3];
                            if (!v160 || !v69)
                            {
                              v6 = 0;
                              v161 = 0;
                              v70 = 0;
                              v75 = 1;
                              goto LABEL_236;
                            }
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v160 + 16))(v160, v70);
                            v76 = 0;
                            v70 = (WTF::StringImpl *)*a1;
                            v69 = a1[1];
                            v75 = 1;
                            v73 = a1[2];
LABEL_102:
                            if (v74)
                              v6 = v76;
                            else
                              v6 = 0;
                            v77 = v73 - (_QWORD)v70;
                            if (v69 <= v77)
                            {
                              v161 = 0;
                              v174 = a1[3];
                              *a1 = 0;
                              a1[1] = 0;
                              if (v69 && v174)
                              {
                                (*(void (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
                                v70 = (WTF::StringImpl *)*a1;
                                v161 = a1[1];
                              }
                              else
                              {
                                v70 = 0;
                              }
                            }
                            else
                            {
                              v78 = (unsigned __int8 *)v70 + v77;
                              a1[2] = (uint64_t)(v78 + 1);
                              if (v70)
                              {
                                v79 = *v78;
                                if (v79 <= 1)
                                {
                                  v80 = 0;
                                  v81 = (v79 != 0) << 8;
                                  goto LABEL_109;
                                }
LABEL_238:
                                *a1 = 0;
                                a1[1] = 0;
                                v163 = a1[3];
                                if (v163)
                                {
                                  if (v69)
                                  {
                                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v163 + 16))(v163, v70);
                                    if (*a1)
                                    {
                                      v81 = 0;
                                      v80 = 1;
LABEL_109:
                                      if (!(_BYTE)v186)
                                        goto LABEL_191;
                                      v82 = v185;
                                      v185 = 0;
                                      if (!v204)
                                        goto LABEL_191;
                                      v83 = v203;
                                      v203 = 0;
                                      if (v75 || v80)
                                        goto LABEL_191;
                                      LODWORD(v5) = 0;
                                      *(_QWORD *)&v205 = v82;
                                      *((_QWORD *)&v205 + 1) = v83;
                                      LOWORD(v206) = v81 | v6;
                                      v4 = 1;
                                      BYTE8(v206) = 1;
                                      goto LABEL_114;
                                    }
                                  }
                                }
                                LOBYTE(v205) = 0;
                                BYTE8(v206) = 0;
                                if (v204)
                                {
                                  v164 = v203;
                                  v203 = 0;
                                  if (v164)
                                  {
                                    if (*(_DWORD *)v164 != 2)
                                    {
                                      v4 = 0;
                                      *(_DWORD *)v164 -= 2;
LABEL_258:
                                      LODWORD(v5) = 1;
LABEL_114:
                                      if ((_BYTE)v186)
                                      {
                                        v84 = v185;
                                        v185 = 0;
                                        if (v84)
                                        {
                                          if (*(_DWORD *)v84 == 2)
                                            WTF::StringImpl::destroy(v84, v70);
                                          else
                                            *(_DWORD *)v84 -= 2;
                                        }
                                      }
                                      if ((_DWORD)v5)
                                      {
                                        v70 = (WTF::StringImpl *)*a1;
                                        v165 = a1[1];
                                        *a1 = 0;
                                        a1[1] = 0;
                                        v166 = a1[3];
                                        if (v166)
                                        {
                                          if (v165)
                                          {
                                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v166 + 16))(v166, v70);
                                            v4 = BYTE8(v206);
                                          }
                                        }
                                      }
                                      if (v4)
                                      {
                                        v85 = a2;
                                        v7 = *((_QWORD *)&v205 + 1);
                                        v88 = v205;
                                        v205 = 0uLL;
                                        v194 = __PAIR128__(v7, v88);
                                        a2 = (unsigned __int16)v206;
                                        v195 = v206;
                                        v196 = 1;
                                        v197 = 1;
                                        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v70);
                                        v87 = 0;
                                        LOBYTE(v4) = 0;
                                        goto LABEL_126;
                                      }
                                      LOBYTE(v194) = 0;
                                      v197 = 0;
                                      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v70);
LABEL_124:
                                      v86 = (WTF::StringImpl *)*a1;
                                      v89 = a1[1];
                                      *a1 = 0;
                                      a1[1] = 0;
                                      v90 = a1[3];
                                      if (v90 && v89)
                                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v90 + 16))(v90, v86);
                                      v85 = a2;
                                      v87 = 1;
LABEL_126:
                                      if (*a1)
                                      {
                                        if (!v202)
                                          goto LABEL_191;
                                        v91 = v200;
                                        LODWORD(v5) = v201;
                                        v6 = HIDWORD(v201);
                                        v200 = 0;
                                        v201 = 0;
                                        if ((_DWORD)v3)
                                          goto LABEL_191;
                                        LOBYTE(v187) = v2;
                                        *(_QWORD *)((char *)&v187 + 1) = v216[0];
                                        *((_QWORD *)&v187 + 1) = *(_QWORD *)((char *)v216 + 7);
                                        LOBYTE(v188) = v175;
                                        if (!v199)
                                          goto LABEL_191;
                                        v55 = v198;
                                        v198 = 0;
                                        if (v87)
                                          goto LABEL_191;
                                        LOBYTE(v190) = 0;
                                        v193 = 0;
                                        if ((v4 & 1) == 0)
                                        {
                                          v92 = v194;
                                          v194 = 0uLL;
                                          v190 = v92;
                                          v191 = v7;
                                          v192 = a2;
                                          v193 = 1;
                                        }
                                        v93 = 0;
                                        *(_QWORD *)&v205 = v91;
                                        v185 = 0;
                                        v186 = 0;
                                        *((_QWORD *)&v205 + 1) = __PAIR64__(v6, v5);
                                        v206 = v187;
                                        v189 = 0;
                                        v207 = v188;
                                        *(_QWORD *)v208 = v55;
                                        v208[8] = 0;
                                        v210 = 0;
                                        if ((v4 & 1) == 0)
                                        {
                                          v94 = v190;
                                          v190 = 0;
                                          v191 = 0;
                                          *(_QWORD *)&v208[8] = v94;
                                          *(_QWORD *)&v208[16] = v7;
                                          v209 = a2;
                                          v93 = 1;
                                          v210 = 1;
                                        }
                                        LOBYTE(v211) = 1;
                                        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v190, v86);
                                        v96 = v189;
                                        v189 = 0;
                                        a2 = v85;
                                        if (v96)
                                        {
                                          if (*(_DWORD *)v96 == 2)
                                            WTF::StringImpl::destroy(v96, v95);
                                          else
                                            *(_DWORD *)v96 -= 2;
                                        }
                                        WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v95);
                                        v97 = 1;
                                      }
                                      else
                                      {
                                        v93 = 0;
                                        v97 = 0;
                                        v98 = 0;
                                        v99 = 0;
                                        LOBYTE(v205) = 0;
                                        LOBYTE(v211) = 0;
                                        a2 = v85;
                                        if ((v87 & 1) != 0)
                                          goto LABEL_141;
                                      }
                                      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v194, v86);
                                      v98 = v93;
                                      v99 = v97;
LABEL_141:
                                      if (v199)
                                      {
                                        v100 = v198;
                                        v198 = 0;
                                        if (v100)
                                        {
                                          if (*(_DWORD *)v100 == 2)
                                            WTF::StringImpl::destroy(v100, v86);
                                          else
                                            *(_DWORD *)v100 -= 2;
                                        }
                                      }
                                      if (v202)
                                        WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v200, v86);
                                      if (!v99)
                                      {
                                        v86 = (WTF::StringImpl *)*a1;
                                        v154 = a1[1];
                                        *a1 = 0;
                                        a1[1] = 0;
                                        v155 = a1[3];
                                        if (!v155
                                          || !v154
                                          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v155 + 16))(v155, v86), !(_BYTE)v211))
                                        {
                                          v33 = 0;
                                          LOBYTE(v177[0]) = 0;
LABEL_152:
                                          v184 = v33;
                                          std::__optional_destruct_base<WebCore::TextExtraction::TextItemData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v86);
                                          goto LABEL_153;
                                        }
                                        LODWORD(v5) = DWORD2(v205);
                                        v6 = HIDWORD(v205);
                                        v55 = *(WTF::StringImpl **)v208;
                                        v98 = v210;
                                      }
                                      v101 = v205;
                                      v205 = 0uLL;
                                      *(_QWORD *)&v177[0] = v101;
                                      *((_QWORD *)&v177[0] + 1) = __PAIR64__(v6, v5);
                                      v177[1] = v206;
                                      *(_QWORD *)v208 = 0;
                                      v178 = v207;
                                      v179 = v55;
                                      LOBYTE(v180) = 0;
                                      v182 = 0;
                                      if (v98)
                                      {
                                        v102 = *(_OWORD *)&v208[8];
                                        *(_OWORD *)&v208[8] = 0uLL;
                                        v180 = v102;
                                        v181 = v209;
                                        v182 = 1;
                                      }
                                      v33 = 1;
                                      v183 = 1;
                                      goto LABEL_152;
                                    }
                                    WTF::StringImpl::destroy(v164, v70);
                                  }
                                }
                                v4 = 0;
                                goto LABEL_258;
                              }
                              v161 = v69;
                            }
LABEL_236:
                            *a1 = 0;
                            a1[1] = 0;
                            v162 = a1[3];
                            if (v162 && v161)
                            {
                              (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v162 + 16))(v162, v70, v161);
                              v70 = (WTF::StringImpl *)*a1;
                              v69 = a1[1];
                            }
                            else
                            {
                              v69 = 0;
                              v70 = 0;
                            }
                            goto LABEL_238;
                          }
                          v156 = v69;
                          v157 = 0;
                        }
                        *a1 = 0;
                        a1[1] = 0;
                        v159 = a1[3];
                        if (v159 && v156)
                        {
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v157, v156);
                          v74 = 0;
                          v70 = (WTF::StringImpl *)*a1;
                          v69 = a1[1];
                        }
                        else
                        {
                          v69 = 0;
                          v70 = 0;
                          v74 = 0;
                        }
                        goto LABEL_234;
                      }
LABEL_225:
                      *a1 = 0;
                      a1[1] = 0;
                      v153 = a1[3];
                      if (v153 && v64)
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v153 + 16))(v153, v65);
                      LOBYTE(v194) = 0;
                      v197 = 0;
                      goto LABEL_124;
                    }
                    v149 = v64;
                    v150 = 0;
                  }
                  v64 = 0;
                  v65 = 0;
                  *a1 = 0;
                  a1[1] = 0;
                  v152 = a1[3];
                  if (v152)
                  {
                    if (v149)
                    {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v150, v149);
                      v65 = (WTF::StringImpl *)*a1;
                      v64 = a1[1];
                    }
                    else
                    {
                      v64 = 0;
                      v65 = 0;
                    }
                  }
                  goto LABEL_225;
                }
LABEL_91:
                *a1 = 0;
                a1[1] = 0;
                v60 = a1[3];
                if (v60 && v50)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v51);
                goto LABEL_92;
              }
              v56 = v50;
              v57 = 0;
            }
            v50 = 0;
            v51 = 0;
            *a1 = 0;
            a1[1] = 0;
            v59 = a1[3];
            if (v59)
            {
              if (v56)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57, v56);
                v51 = *a1;
                v50 = a1[1];
              }
              else
              {
                v50 = 0;
                v51 = 0;
              }
            }
            goto LABEL_91;
          }
          LODWORD(v186) = 56 * (int)v18 / 0x38u;
          v185 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v18));
          while (1)
          {
            IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>((uint64_t)&v205, a1);
            if (!v208[16])
              break;
            v4 = HIDWORD(v186);
            if (HIDWORD(v186) == (_DWORD)v186)
            {
              WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::URL,WebCore::CharacterRange>>((unsigned int *)&v185, (unint64_t)&v205);
            }
            else
            {
              v5 = v185;
              WTF::URL::URL((uint64_t)v185 + 56 * HIDWORD(v186), (uint64_t *)&v205);
              *(_OWORD *)((char *)v5 + 56 * v4 + 40) = *(_OWORD *)v208;
              ++HIDWORD(v186);
            }
            if (v208[16])
            {
              v22 = (WTF::StringImpl *)v205;
              *(_QWORD *)&v205 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v19);
                else
                  *(_DWORD *)v22 -= 2;
              }
            }
            if (!--v20)
            {
              v23 = v185;
              v24 = v186;
              goto LABEL_43;
            }
          }
        }
        LOBYTE(v200) = 0;
        v202 = 0;
        WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v21);
      }
      else
      {
        LOBYTE(v200) = 0;
        v202 = 0;
      }
      v47 = *a1;
      v48 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49 && v48)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
      goto LABEL_80;
    }
    if (v14 == 2)
    {
      v25 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
      if (*a1)
      {
        if (!v26)
          goto LABEL_191;
        *(_QWORD *)&v177[0] = v25;
        v183 = 2;
        goto LABEL_32;
      }
      v167 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v168 = a1[3];
      if (!v168 || !v167)
        goto LABEL_4;
      v37 = *(void (**)(void))(*(_QWORD *)v168 + 16);
LABEL_55:
      v37();
      goto LABEL_4;
    }
    IPC::Decoder::decode<WTF::String>(a1, &v185);
    IPC::Decoder::decode<WTF::String>(a1, &v194);
    v28 = *a1;
    if (*a1)
    {
      if (!(_BYTE)v186)
        goto LABEL_191;
      v29 = v185;
      v185 = 0;
      if (!BYTE8(v194))
        goto LABEL_191;
      *(_QWORD *)&v205 = v29;
      *((_QWORD *)&v205 + 1) = v194;
      v30 = 1;
      LOBYTE(v206) = 1;
      goto LABEL_37;
    }
    LOBYTE(v205) = 0;
    LOBYTE(v206) = 0;
    if (BYTE8(v194))
    {
      v169 = (WTF::StringImpl *)v194;
      *(_QWORD *)&v194 = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 != 2)
        {
          v30 = 0;
          *(_DWORD *)v169 -= 2;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v169, v27);
      }
    }
    v30 = 0;
LABEL_37:
    if ((_BYTE)v186)
    {
      v31 = v185;
      v185 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v27);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    if (!v28)
    {
      v27 = (WTF::StringImpl *)*a1;
      v170 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v171 = a1[3];
      if (v171)
      {
        if (v170)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v171 + 16))(v171, v27);
          v30 = v206;
        }
      }
    }
    if (v30)
    {
      v32 = v205;
      v205 = 0uLL;
      v177[0] = v32;
      v183 = 3;
      v33 = 1;
    }
    else
    {
      v33 = 0;
      LOBYTE(v177[0]) = 0;
    }
    v184 = v33;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v27);
LABEL_153:
    if (v33)
      goto LABEL_154;
    goto LABEL_5;
  }
LABEL_4:
  LOBYTE(v177[0]) = 0;
  v184 = 0;
LABEL_5:
  v15 = *a1;
  v16 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
LABEL_154:
  v2 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v3 = v103;
  if (!v103)
    goto LABEL_192;
  while (1)
  {
    v104 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
    v106 = v105;
    if (!v105)
    {
      v134 = *a1;
      v135 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v136 = a1[3];
      if (v136)
      {
        if (v135)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v134);
      }
    }
    v107 = *a1;
    if (*a1)
    {
      if (!v3 || !v106)
        goto LABEL_191;
      v108 = v2 & 0xFFFFFFFFFFFFFF00;
      v109 = v2;
    }
    else
    {
      v109 = 0;
      v108 = 0;
      v137 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v138 = a1[3];
      if (v138)
      {
        if (v137)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v138 + 16))(v138, 0);
        v109 = 0;
        v108 = 0;
      }
    }
    v110 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v111)
    {
      v2 = v110;
      v194 = 0uLL;
      if (v110 >= 0x2222)
      {
        v139 = a2;
        v3 = (uint64_t)&v212;
        do
        {
          IPC::Decoder::decode<WebCore::TextExtraction::Item>(&v205, a1);
          if (!v215)
          {
            LOBYTE(v185) = 0;
            LOBYTE(v187) = 0;
            std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v140);
            a2 = v139;
            goto LABEL_178;
          }
          v141 = HIDWORD(v194);
          if (HIDWORD(v194) == DWORD2(v194))
          {
            WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextExtraction::Item>((uint64_t)&v194, (unint64_t)&v205);
          }
          else
          {
            v143 = v194;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(v194 + 120 * HIDWORD(v194), (uint64_t)&v205);
            v144 = v143 + 120 * v141;
            *(_OWORD *)(v144 + 88) = v212;
            *(_QWORD *)(v144 + 104) = 0;
            *(_QWORD *)(v144 + 112) = 0;
            v145 = v213;
            v213 = 0;
            *(_QWORD *)(v144 + 104) = v145;
            LODWORD(v145) = v214;
            LODWORD(v214) = 0;
            *(_DWORD *)(v144 + 112) = (_DWORD)v145;
            LODWORD(v145) = HIDWORD(v214);
            HIDWORD(v214) = 0;
            *(_DWORD *)(v144 + 116) = (_DWORD)v145;
            ++HIDWORD(v194);
          }
          std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v142);
          --v2;
        }
        while (v2);
        v146 = HIDWORD(v194);
        v2 = v194;
        if (DWORD2(v194) > HIDWORD(v194))
        {
          v147 = v194;
          if (HIDWORD(v194))
          {
            if (HIDWORD(v194) >= 0x2222223)
            {
              __break(0xC471u);
              JUMPOUT(0x196E7D998);
            }
            v3 = 120 * HIDWORD(v194);
            v148 = WTF::fastMalloc((WTF *)v3);
            DWORD2(v194) = v3 / 0x78;
            *(_QWORD *)&v194 = v148;
            v147 = v2;
            if (v148 != v2)
            {
              WTF::VectorMover<false,WebCore::TextExtraction::Item>::move(v2, v2 + 120 * v146, v148);
              v147 = v194;
            }
          }
          if (v2)
          {
            if (v147 == v2)
            {
              *(_QWORD *)&v194 = 0;
              DWORD2(v194) = 0;
            }
            WTF::fastFree((WTF *)v2, v111);
            v2 = v194;
          }
          else
          {
            v2 = v147;
          }
        }
        a2 = v139;
        v185 = (WTF::StringImpl *)v2;
        v172 = *((_QWORD *)&v194 + 1);
        v194 = 0uLL;
        v186 = v172;
      }
      else
      {
        if (v110)
        {
          v176 = v108;
          v112 = v109;
          v113 = v104;
          v114 = a2;
          v115 = 120 * v110;
          v116 = WTF::fastMalloc((WTF *)(120 * v110));
          DWORD2(v194) = v115 / 0x78;
          *(_QWORD *)&v194 = v116;
          v3 = (uint64_t)&v212;
          while (1)
          {
            IPC::Decoder::decode<WebCore::TextExtraction::Item>(&v205, a1);
            if (!v215)
              break;
            v118 = HIDWORD(v194);
            if (HIDWORD(v194) == DWORD2(v194))
            {
              WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextExtraction::Item>((uint64_t)&v194, (unint64_t)&v205);
            }
            else
            {
              v120 = v194;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(v194 + 120 * HIDWORD(v194), (uint64_t)&v205);
              v121 = v120 + 120 * v118;
              *(_OWORD *)(v121 + 88) = v212;
              *(_QWORD *)(v121 + 104) = 0;
              *(_QWORD *)(v121 + 112) = 0;
              v122 = v213;
              v213 = 0;
              *(_QWORD *)(v121 + 104) = v122;
              LODWORD(v122) = v214;
              LODWORD(v214) = 0;
              *(_DWORD *)(v121 + 112) = (_DWORD)v122;
              LODWORD(v122) = HIDWORD(v214);
              HIDWORD(v214) = 0;
              *(_DWORD *)(v121 + 116) = (_DWORD)v122;
              ++HIDWORD(v194);
            }
            std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v119);
            if (!--v2)
            {
              v124 = *((_QWORD *)&v194 + 1);
              v123 = (WTF::StringImpl *)v194;
              a2 = v114;
              v104 = v113;
              v109 = v112;
              v108 = v176;
              goto LABEL_175;
            }
          }
          LOBYTE(v185) = 0;
          LOBYTE(v187) = 0;
          std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v205, v117);
          a2 = v114;
          v104 = v113;
          v109 = v112;
          v108 = v176;
LABEL_178:
          result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v194, v111);
          if ((_BYTE)v187)
            goto LABEL_179;
          goto LABEL_171;
        }
        v123 = 0;
        v124 = 0;
LABEL_175:
        v194 = 0uLL;
        v185 = v123;
        v186 = v124;
      }
      LOBYTE(v187) = 1;
      goto LABEL_178;
    }
    LOBYTE(v185) = 0;
    LOBYTE(v187) = 0;
LABEL_171:
    v125 = (void *)*a1;
    v126 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v126)
      result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v125);
LABEL_179:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_185;
    }
    if (v184)
    {
      v2 = (unint64_t)&v205;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v205, (uint64_t)v177);
      if (v107)
      {
        *(_QWORD *)&v212 = v108 | v109;
        *((_QWORD *)&v212 + 1) = v104;
        if ((_BYTE)v187)
          break;
      }
    }
LABEL_191:
    __break(1u);
LABEL_192:
    v131 = *a1;
    v132 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v133 = a1[3];
    if (v133 && v132)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v131);
  }
  v213 = v185;
  v128 = v186;
  v185 = 0;
  v186 = 0;
  v214 = v128;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v205);
  *(_OWORD *)(a2 + 88) = v212;
  *(_QWORD *)(a2 + 104) = v213;
  v129 = v214;
  v213 = 0;
  v214 = 0;
  *(_QWORD *)(a2 + 112) = v129;
  *(_BYTE *)(a2 + 120) = 1;
  result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v213, v130);
  if (v211 != -1)
    result = ((uint64_t (*)(unsigned __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v211])(&v194, &v205);
LABEL_185:
  if ((_BYTE)v187)
    result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v125);
  if (v184)
  {
    if (v183 != -1)
      return ((uint64_t (*)(__int128 *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v183])(&v205, v177);
  }
  return result;
}

void sub_196E7D9AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,WTF::StringImpl *a50,char a51)
{
  uint64_t v51;

  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v51 - 256, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  v4 = *((_BYTE *)v2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 17);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v7);
  v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v6 = *a1;
  if (!*a1)
    goto LABEL_8;
  LOBYTE(v6) = v8;
  if (!v8 || (LOBYTE(v6) = v4, v4 <= 0xFFu) || (LOBYTE(v6) = result, (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
LABEL_8:
    *(_BYTE *)a2 = 0;
    goto LABEL_6;
  }
  v6 = v7[1];
  *(_QWORD *)a2 = v7[0];
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = result;
  LOBYTE(v6) = 1;
LABEL_6:
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

char *IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 2);
  v4 = a2[7];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[8];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  char v6;
  _BYTE v7[40];
  char v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::AttributedString>(a1, v7);
  result = (uint64_t)IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v5);
  if (*a1)
  {
    if (v13)
    {
      v9 = v12;
      if (v8)
      {
        result = WebCore::AttributedString::AttributedString();
        if (v6)
        {
          v11 = v5;
          *(_OWORD *)a2 = v9;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(a2 + 56) = v11;
          *(_BYTE *)(a2 + 80) = 1;
          result = MEMORY[0x19AEAEECC](&v10);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
LABEL_6:
  if (v8)
    return MEMORY[0x19AEAEECC](v7);
  return result;
}

char *IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  v4 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 4);
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  char v9;
  __int128 v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v10);
  IPC::Decoder::decode<WTF::String>(a1, &v8);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
  if (*a1)
  {
    if (v13)
    {
      if (v11)
      {
        v7 = v10;
        if (v9)
        {
          v6 = v8;
          v8 = 0;
          if ((unsigned __int16)result > 0xFFu)
          {
            *(_OWORD *)a2 = v12;
            *(_OWORD *)(a2 + 16) = v7;
            *(_QWORD *)(a2 + 32) = v6;
            *(_BYTE *)(a2 + 40) = (_BYTE)result;
            *(_BYTE *)(a2 + 48) = 1;
            return result;
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7E03C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15)
{
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;

  IPC::Decoder::decode<WTF::String>(a1, &v7);
  v4 = IPC::Decoder::decode<WebCore::MediaAccessDenialReason>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::MediaConstraintType>(a1);
  if (*a1)
  {
    if (v8 && v4 > 0xFFu && (unsigned __int16)result > 0xFFu)
    {
      *(_QWORD *)a2 = v7;
      *(_WORD *)(a2 + 8) = v4 | (unsigned __int16)((_WORD)result << 8);
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7E144(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::MediaAccessDenialReason>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 8u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t IPC::Decoder::decode<WebCore::MediaConstraintType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::MediaConstraintType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::MediaSettingsRange,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 2);
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 4);
}

char *IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::MediaSettingsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::MediaSettingsRange> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::MediaSettingsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::MediaSettingsRange> const&>(a1, (uint64_t)(a2 + 64));
  return IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 120));
}

WTF *IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  WTF *result;
  int v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  unsigned int v43;
  __int128 v44;
  WTF *v45;
  _OWORD v46[3];
  char v47;
  char v48;
  _OWORD v49[3];
  char v50;
  char v51;
  _BYTE v52[56];
  _BYTE v53[55];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a1;
        v26 = a1[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_37;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v26 = v5;
    v27 = 0;
LABEL_37:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_38;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      LOWORD(v49[0]) = 0;
      IPC::Decoder::operator>><unsigned char>(a1, v49);
      v10 = LOBYTE(v49[0]);
      if (BYTE1(v49[0]))
        v11 = LOBYTE(v49[0]) > 2u;
      else
        v11 = 1;
      v12 = v11;
      if (v12 == 1)
      {
        v38 = *a1;
        v39 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v40 = a1[3];
        if (v40 && v39)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
        v13 = 0;
      }
      else
      {
        v13 = 0x10000;
      }
      if (v12)
        v14 = 0;
      else
        v14 = v10;
      v15 = 256;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = 0x10000;
    }
    goto LABEL_18;
  }
LABEL_38:
  *a1 = 0;
  a1[1] = 0;
  v30 = a1[3];
  if (v30 && v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v6);
  v13 = 0;
  v14 = 0;
  v15 = 0;
LABEL_18:
  if (!HIWORD(v13))
  {
    v31 = *a1;
    v32 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
    }
  }
  IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(v49, a1);
  result = (WTF *)IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(v46, a1);
  v18 = a1[1];
  v19 = (char *)*a1;
  v20 = a1[2] - *a1;
  if (v18 <= v20)
  {
    v34 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v22 = *a1;
        v34 = a1[1];
      }
      else
      {
        v34 = 0;
        v22 = 0;
      }
    }
    goto LABEL_44;
  }
  v21 = &v19[v20];
  LODWORD(v22) = (_DWORD)v21 + 1;
  a1[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    v34 = v18;
    v22 = 0;
LABEL_44:
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v22, v34);
        v19 = (char *)*a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37 && v18)
      goto LABEL_47;
    goto LABEL_62;
  }
  v23 = *v21;
  if (v23 >= 2)
    goto LABEL_45;
  if (!v23)
  {
    v25 = 0;
    LODWORD(v22) = 1;
    goto LABEL_64;
  }
  result = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v19)
    goto LABEL_61;
  v24 = result;
  *(_QWORD *)v52 = 0;
  *(_QWORD *)&v52[8] = 0;
  if ((unint64_t)result >= 0x100000)
  {
    v41 = 0;
    LODWORD(v2) = 0;
    while (1)
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
      *(_WORD *)v53 = (_WORD)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if ((_DWORD)v2 == *(_DWORD *)&v52[8])
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, (WTF *)(v2 + 1), (unint64_t)v53);
        LODWORD(v2) = *(_DWORD *)&v52[12];
        v41 = *(WTF **)v52;
        *(_BYTE *)(*(_QWORD *)v52 + *(unsigned int *)&v52[12]) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v41 + v2) = (_BYTE)result;
      }
      v2 = (v2 + 1);
      *(_DWORD *)&v52[12] = v2;
      v24 = (WTF *)((char *)v24 - 1);
      if (!v24)
      {
        if (*(_DWORD *)&v52[8] > v2)
        {
          if ((_DWORD)v2)
          {
            *(_DWORD *)&v52[8] = v2;
            result = (WTF *)WTF::fastRealloc(v41, (void *)v2);
            *(_QWORD *)v52 = result;
          }
          else
          {
            *(_QWORD *)v52 = 0;
            *(_DWORD *)&v52[8] = 0;
            result = (WTF *)WTF::fastFree(v41, v19);
          }
        }
        v25 = *(WTF **)v52;
        v17 = *(_DWORD *)&v52[8];
        LODWORD(v2) = *(_DWORD *)&v52[12];
        goto LABEL_35;
      }
    }
    v25 = *(WTF **)v52;
    if (*(_QWORD *)v52)
    {
LABEL_60:
      *(_QWORD *)v52 = 0;
      *(_DWORD *)&v52[8] = 0;
      WTF::fastFree(v25, v19);
    }
LABEL_61:
    v19 = (char *)*a1;
    v42 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37 && v42)
LABEL_47:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v37 + 16))(v37, v19);
LABEL_62:
    v19 = (char *)*a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      goto LABEL_80;
    goto LABEL_63;
  }
  if (result)
  {
    v25 = (WTF *)WTF::fastMalloc(result);
    LODWORD(v2) = 0;
    *(_DWORD *)&v52[8] = (_DWORD)v24;
    *(_QWORD *)v52 = v25;
    do
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
      *(_WORD *)v53 = (_WORD)result;
      if ((unsigned __int16)result < 0x100u)
        goto LABEL_60;
      if ((_DWORD)v2 == *(_DWORD *)&v52[8])
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, (WTF *)(v2 + 1), (unint64_t)v53);
        LODWORD(v2) = *(_DWORD *)&v52[12];
        v25 = *(WTF **)v52;
        *(_BYTE *)(*(_QWORD *)v52 + *(unsigned int *)&v52[12]) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v25 + v2) = (_BYTE)result;
      }
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)&v52[12] = v2;
      v24 = (WTF *)((char *)v24 - 1);
    }
    while (v24);
    v17 = *(_DWORD *)&v52[8];
  }
  else
  {
    v17 = 0;
    v25 = 0;
    LODWORD(v2) = 0;
  }
LABEL_35:
  v23 = 0;
  LODWORD(v22) = 0;
  while (1)
  {
LABEL_64:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 144) = 0;
      goto LABEL_75;
    }
    v43 = v14 | v13 | v15;
    if (HIWORD(v43))
    {
      if (v51)
      {
        *(_OWORD *)&v53[6] = v49[0];
        *(_OWORD *)&v53[22] = v49[1];
        *(_OWORD *)&v53[38] = v49[2];
        v53[54] = v50;
        if (v48)
        {
          *(_OWORD *)&v52[7] = v46[0];
          *(_OWORD *)&v52[23] = v46[1];
          *(_OWORD *)&v52[39] = v46[2];
          v52[55] = v47;
          if (!v23)
            break;
        }
      }
    }
    __break(1u);
LABEL_80:
    if (v18)
      result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v19);
LABEL_63:
    v25 = 0;
    v23 = 1;
  }
  *(_OWORD *)(a2 + 2) = *(_OWORD *)v53;
  *(_OWORD *)(a2 + 18) = *(_OWORD *)&v53[16];
  *(_OWORD *)(a2 + 34) = *(_OWORD *)&v53[32];
  v44 = *(_OWORD *)&v52[16];
  *(_OWORD *)(a2 + 57) = *(_OWORD *)v52;
  if ((v22 & 1) != 0)
    v45 = v25;
  else
    v45 = 0;
  *(_WORD *)a2 = v43;
  *(_QWORD *)(a2 + 49) = *(_QWORD *)&v53[47];
  *(_OWORD *)(a2 + 73) = v44;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)&v52[32];
  *(_QWORD *)(a2 + 105) = *(_QWORD *)&v52[48];
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if ((v22 & 1) == 0)
  {
    *(_QWORD *)(a2 + 120) = v25;
    *(_DWORD *)(a2 + 128) = v17;
    *(_DWORD *)(a2 + 132) = v2;
    *(_BYTE *)(a2 + 136) = 1;
  }
  *(_BYTE *)(a2 + 144) = 1;
  v25 = v45;
LABEL_75:
  if (((v22 | v23) & 1) == 0)
  {
    if (v25)
      return (WTF *)WTF::fastFree(v25, v19);
  }
  return result;
}

void sub_196E7E8C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26)
{
  if (a26)
    WTF::fastFree(a26, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = result;
  v36 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_14:
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a2;
        v13 = a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v13 = v6;
    v14 = 0;
LABEL_15:
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
      }
    }
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v6)
    {
      v18 = *(void (**)(void))(*(_QWORD *)v17 + 16);
LABEL_29:
      v18();
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_16;
  if (!v9)
  {
    *result = 0;
    result[48] = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<std::optional<double>>(a2, &v29);
  IPC::Decoder::decode<std::optional<double>>(a2, &v26);
  result = IPC::Decoder::decode<std::optional<double>>(a2, &v23);
  if (*a2)
  {
    if (v31)
    {
      if (v28)
      {
        v10 = v30;
        *(_QWORD *)((char *)&v35 + 7) = v26;
        HIBYTE(v35) = v27;
        if (v25)
        {
          *(_QWORD *)((char *)&v34 + 7) = v23;
          HIBYTE(v34) = v24;
          v11 = v35;
          v33 = v35;
          v32 = v34;
          v12 = v34;
          *v3 = v29;
          *(_QWORD *)(v3 + 1) = v10;
          *(_OWORD *)(v3 + 9) = v11;
          *(_OWORD *)(v3 + 25) = v12;
          v3[48] = 1;
LABEL_11:
          v3[56] = 1;
          return result;
        }
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20 && v19)
  {
    v18 = *(void (**)(void))(*(_QWORD *)v20 + 16);
    goto LABEL_29;
  }
LABEL_20:
  *v3 = 0;
  v3[56] = 0;
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v22)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 24));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
}

uint64_t IPC::ArgumentCoder<WebCore::PhotoSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  _BYTE v13[15];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<std::optional<WebCore::FillLightMode>>(a1);
  IPC::Decoder::decode<std::optional<double>>(a1, &v9);
  IPC::Decoder::decode<std::optional<double>>(a1, &v6);
  result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*a1)
    goto LABEL_9;
  if ((v4 & 0xFF0000) == 0
    || !v11
    || (*(_QWORD *)&v13[6] = v9, v13[14] = v10, !v8)
    || (*(_QWORD *)((char *)&v12 + 7) = v6, HIBYTE(v12) = v7, (result & 0xFF0000) == 0))
  {
    __break(1u);
LABEL_9:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return result;
  }
  *(_WORD *)a2 = v4;
  *(_QWORD *)(a2 + 2) = *(_QWORD *)v13;
  *(_QWORD *)(a2 + 9) = *(_QWORD *)&v13[7];
  *(_OWORD *)(a2 + 17) = v12;
  *(_WORD *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::FillLightMode>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::FillLightMode>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CookieStoreGetOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;

  IPC::Decoder::decode<WTF::String>(a1, &v10);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (*a1)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v9)
      {
        v7 = v8;
        *(_QWORD *)a2 = v6;
        *(_QWORD *)(a2 + 8) = v7;
        *(_BYTE *)(a2 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_5:
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E7EDB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::InspectorOverlayLabel,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  int v5;
  char v6;
  char *result;

  v2 = a2;
  IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  v4 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *((_DWORD *)v2 + 5);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 3));
  v6 = *((_BYTE *)v2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = *((_BYTE *)v2 + 33);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, a2 + 2);
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 10));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 14));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 18));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 22));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 26));
  return IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 30));
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E7EF54(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  WTF *v34;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  v6 = v4;
  v33 = 0;
  v34 = 0;
  if (v4 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayLabel>((uint64_t)&v27, a2);
      if (!v32)
        goto LABEL_21;
      v17 = HIDWORD(v34);
      if (HIDWORD(v34) == (_DWORD)v34)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel>((uint64_t)&v33, (unint64_t)&v27);
      }
      else
      {
        v19 = v33;
        v20 = v33 + 40 * HIDWORD(v34);
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        v21 = v27;
        v27 = 0;
        *(_QWORD *)v20 = v21;
        LODWORD(v21) = v28;
        v28 = 0;
        *(_DWORD *)(v20 + 8) = v21;
        LODWORD(v21) = v29;
        v29 = 0;
        *(_DWORD *)(v20 + 12) = v21;
        *(_QWORD *)(v20 + 16) = v30;
        WebCore::Color::Color();
        *(_WORD *)(v19 + 40 * v17 + 32) = v31;
        ++HIDWORD(v34);
      }
      std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v18);
      if (!--v6)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v33, HIDWORD(v34));
        v22 = v33;
        v33 = 0;
        *(_QWORD *)a1 = v22;
        v15 = (int)v34;
        v14 = HIDWORD(v34);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v34) = 40 * (int)v4 / 0x28u;
    v33 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayLabel>((uint64_t)&v27, a2);
      if (!v32)
        break;
      v8 = HIDWORD(v34);
      if (HIDWORD(v34) == (_DWORD)v34)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel>((uint64_t)&v33, (unint64_t)&v27);
      }
      else
      {
        v10 = v33;
        v11 = v33 + 40 * HIDWORD(v34);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v12 = v27;
        v27 = 0;
        *(_QWORD *)v11 = v12;
        LODWORD(v12) = v28;
        v28 = 0;
        *(_DWORD *)(v11 + 8) = v12;
        LODWORD(v12) = v29;
        v29 = 0;
        *(_DWORD *)(v11 + 12) = v12;
        *(_QWORD *)(v11 + 16) = v30;
        WebCore::Color::Color();
        *(_WORD *)(v10 + 40 * v8 + 32) = v31;
        ++HIDWORD(v34);
      }
      std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v9);
      if (!--v6)
      {
        v13 = v33;
        v15 = (int)v34;
        v14 = HIDWORD(v34);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v23);
LABEL_22:
    v24 = *a2;
    v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v26 = v25 == 0;
    else
      v26 = 1;
    if (!v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
    return result;
  }
  v14 = 0;
  v15 = 0;
  v13 = 0;
LABEL_13:
  v33 = 0;
  *(_QWORD *)a1 = v13;
LABEL_14:
  v34 = 0;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_196E7F208(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;
  void *v18;

  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v17);
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v18);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::VectorArgumentCoder<false,WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 5);
  return IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 7));
}

char *IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::encode(IPC::Encoder *a1, WebCore::Color *a2)
{
  WebCore::Color *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)v2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)v2 + 16));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)v2 + 24));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)v2 + 32));
  v4 = *((_BYTE *)v2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v2 + 48);
  IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v2 + 64);
  IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v2 + 80);
  LOBYTE(v2) = *((_BYTE *)v2 + 96);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  char v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  unsigned int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  unsigned int v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  WTF *v100;
  void *v101;
  WTF *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  WTF *v119;
  uint64_t v120;
  char v121;
  char v122[8];
  char v123;
  char v124[8];
  char v125;
  char v126[8];
  char v127;
  char v128[8];
  char v129;
  char v130[8];
  char v131;
  __int16 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  WTF *v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  char v150;
  uint64_t v151;
  WTF *v152;

  v2 = a1;
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v130);
  if (!v131)
  {
    v22 = *v2;
    v23 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v24 = v2[3];
    if (v24 && v23 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v128);
  if (!v129)
  {
    v26 = *v2;
    v27 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v28 = v2[3];
    if (v28)
    {
      if (v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v126);
  if (!v127)
  {
    v29 = *v2;
    v30 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v31 = v2[3];
    if (v31)
    {
      if (v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v124);
  if (!v125)
  {
    v32 = *v2;
    v33 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v34 = v2[3];
    if (v34)
    {
      if (v33)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v122);
  if (!v123)
  {
    v35 = *v2;
    v36 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v37 = v2[3];
    if (v37)
    {
      if (v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
    }
  }
  v132 = 0;
  IPC::Decoder::operator>><unsigned char>(v2, &v132);
  v4 = v132;
  if (HIBYTE(v132))
    v5 = v132 > 3u;
  else
    v5 = 1;
  v6 = v5;
  if (v6 == 1)
  {
    v38 = *v2;
    v39 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (v40 && v39)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
    v4 = 0;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v119);
  v7 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v8)
  {
    v9 = v7;
    v113 = 0;
    v114 = 0;
    if (v7 >= 0x38E3)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v132, v2);
        if (!(_BYTE)v139)
          break;
        v41 = HIDWORD(v114);
        if (HIDWORD(v114) == (_DWORD)v114)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v113, (unint64_t)&v132);
        }
        else
        {
          v43 = v113;
          WebCore::Color::Color();
          v44 = v43 + 72 * v41;
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v44 + 16) = 0;
          v45 = v133;
          *(_QWORD *)&v133 = 0;
          *(_QWORD *)(v44 + 8) = v45;
          LODWORD(v45) = DWORD2(v133);
          DWORD2(v133) = 0;
          *(_DWORD *)(v44 + 16) = v45;
          LODWORD(v45) = HIDWORD(v133);
          HIDWORD(v133) = 0;
          *(_DWORD *)(v44 + 20) = v45;
          *(_QWORD *)(v44 + 24) = 0;
          *(_QWORD *)(v44 + 32) = 0;
          v46 = v134;
          *(_QWORD *)&v134 = 0;
          *(_QWORD *)(v44 + 24) = v46;
          LODWORD(v46) = DWORD2(v134);
          DWORD2(v134) = 0;
          *(_DWORD *)(v44 + 32) = v46;
          LODWORD(v46) = HIDWORD(v134);
          HIDWORD(v134) = 0;
          *(_DWORD *)(v44 + 36) = v46;
          *(_QWORD *)(v44 + 40) = 0;
          *(_QWORD *)(v44 + 48) = 0;
          v47 = v135;
          v135 = 0;
          *(_QWORD *)(v44 + 40) = v47;
          LODWORD(v47) = (_DWORD)v136;
          LODWORD(v136) = 0;
          *(_DWORD *)(v44 + 48) = v47;
          LODWORD(v47) = HIDWORD(v136);
          HIDWORD(v136) = 0;
          *(_DWORD *)(v44 + 52) = v47;
          *(_QWORD *)(v44 + 56) = 0;
          *(_QWORD *)(v44 + 64) = 0;
          v48 = v137;
          v137 = 0;
          *(_QWORD *)(v44 + 56) = v48;
          LODWORD(v48) = v138;
          LODWORD(v138) = 0;
          *(_DWORD *)(v44 + 64) = v48;
          LODWORD(v48) = HIDWORD(v138);
          HIDWORD(v138) = 0;
          *(_DWORD *)(v44 + 68) = v48;
          ++HIDWORD(v114);
        }
        std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v132, v42);
        if (!--v9)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v113, HIDWORD(v114));
          v49 = v113;
          v113 = 0;
          v116 = v49;
          v21 = v114;
          v20 = HIDWORD(v114);
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v7)
      {
        v20 = 0;
        v21 = 0;
        v19 = 0;
LABEL_25:
        v113 = 0;
        v116 = v19;
LABEL_26:
        v114 = 0;
        v117 = __PAIR64__(v20, v21);
        v118 = 1;
        WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
        goto LABEL_54;
      }
      LODWORD(v114) = 72 * (int)v7 / 0x48u;
      v113 = WTF::fastMalloc((WTF *)(72 * v7));
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v132, v2);
        if (!(_BYTE)v139)
          break;
        v11 = HIDWORD(v114);
        if (HIDWORD(v114) == (_DWORD)v114)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v113, (unint64_t)&v132);
        }
        else
        {
          v13 = v113;
          WebCore::Color::Color();
          v14 = v13 + 72 * v11;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          v15 = v133;
          *(_QWORD *)&v133 = 0;
          *(_QWORD *)(v14 + 8) = v15;
          LODWORD(v15) = DWORD2(v133);
          DWORD2(v133) = 0;
          *(_DWORD *)(v14 + 16) = v15;
          LODWORD(v15) = HIDWORD(v133);
          HIDWORD(v133) = 0;
          *(_DWORD *)(v14 + 20) = v15;
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          v16 = v134;
          *(_QWORD *)&v134 = 0;
          *(_QWORD *)(v14 + 24) = v16;
          LODWORD(v16) = DWORD2(v134);
          DWORD2(v134) = 0;
          *(_DWORD *)(v14 + 32) = v16;
          LODWORD(v16) = HIDWORD(v134);
          HIDWORD(v134) = 0;
          *(_DWORD *)(v14 + 36) = v16;
          *(_QWORD *)(v14 + 40) = 0;
          *(_QWORD *)(v14 + 48) = 0;
          v17 = v135;
          v135 = 0;
          *(_QWORD *)(v14 + 40) = v17;
          LODWORD(v17) = (_DWORD)v136;
          LODWORD(v136) = 0;
          *(_DWORD *)(v14 + 48) = v17;
          LODWORD(v17) = HIDWORD(v136);
          HIDWORD(v136) = 0;
          *(_DWORD *)(v14 + 52) = v17;
          *(_QWORD *)(v14 + 56) = 0;
          *(_QWORD *)(v14 + 64) = 0;
          v18 = v137;
          v137 = 0;
          *(_QWORD *)(v14 + 56) = v18;
          LODWORD(v18) = v138;
          LODWORD(v138) = 0;
          *(_DWORD *)(v14 + 64) = v18;
          LODWORD(v18) = HIDWORD(v138);
          HIDWORD(v138) = 0;
          *(_DWORD *)(v14 + 68) = v18;
          ++HIDWORD(v114);
        }
        std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v132, v12);
        if (!--v9)
        {
          v19 = v113;
          v21 = v114;
          v20 = HIDWORD(v114);
          goto LABEL_25;
        }
      }
    }
    LOBYTE(v116) = 0;
    v118 = 0;
    std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v132, v10);
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v50);
  }
  else
  {
    LOBYTE(v116) = 0;
    v118 = 0;
  }
  v51 = *v2;
  v52 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v53 = v2[3];
  if (v53 && v52)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
LABEL_54:
  v54 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v55)
  {
    v56 = v54;
    v151 = 0;
    v152 = 0;
    if (v54 >> 1 < 0xF0F)
    {
      if (v54)
      {
        v57 = 136 * v54;
        v58 = WTF::fastMalloc((WTF *)(136 * v54));
        LODWORD(v152) = v57 / 0x88;
        v151 = v58;
        do
        {
          IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v132, v2);
          if (!v150)
            goto LABEL_80;
          v60 = HIDWORD(v152);
          if (HIDWORD(v152) == (_DWORD)v152)
          {
            WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v151, (unint64_t)&v132);
          }
          else
          {
            v61 = v151;
            WebCore::Color::Color();
            v62 = v61 + 136 * v60;
            v63 = v133;
            *(_OWORD *)(v62 + 24) = v134;
            *(_OWORD *)(v62 + 8) = v63;
            *(_QWORD *)(v62 + 40) = 0;
            *(_QWORD *)(v62 + 48) = 0;
            v64 = v135;
            v135 = 0;
            *(_QWORD *)(v62 + 40) = v64;
            LODWORD(v64) = (_DWORD)v136;
            LODWORD(v136) = 0;
            *(_DWORD *)(v62 + 48) = v64;
            LODWORD(v64) = HIDWORD(v136);
            HIDWORD(v136) = 0;
            *(_DWORD *)(v62 + 52) = v64;
            *(_QWORD *)(v62 + 56) = 0;
            *(_QWORD *)(v62 + 64) = 0;
            v65 = v137;
            v137 = 0;
            *(_QWORD *)(v62 + 56) = v65;
            LODWORD(v65) = v138;
            LODWORD(v138) = 0;
            *(_DWORD *)(v62 + 64) = v65;
            LODWORD(v65) = HIDWORD(v138);
            HIDWORD(v138) = 0;
            *(_DWORD *)(v62 + 68) = v65;
            *(_QWORD *)(v62 + 72) = 0;
            *(_QWORD *)(v62 + 80) = 0;
            v66 = v139;
            v139 = 0;
            *(_QWORD *)(v62 + 72) = v66;
            LODWORD(v66) = v140;
            LODWORD(v140) = 0;
            *(_DWORD *)(v62 + 80) = v66;
            LODWORD(v66) = HIDWORD(v140);
            HIDWORD(v140) = 0;
            *(_DWORD *)(v62 + 84) = v66;
            *(_QWORD *)(v62 + 88) = 0;
            *(_QWORD *)(v62 + 96) = 0;
            v67 = v141;
            v141 = 0;
            *(_QWORD *)(v62 + 88) = v67;
            LODWORD(v67) = v142;
            v142 = 0;
            *(_DWORD *)(v62 + 96) = (_DWORD)v67;
            LODWORD(v67) = v143;
            v143 = 0;
            *(_DWORD *)(v62 + 100) = (_DWORD)v67;
            *(_QWORD *)(v62 + 104) = 0;
            *(_QWORD *)(v62 + 112) = 0;
            v68 = v144;
            v144 = 0;
            *(_QWORD *)(v62 + 104) = v68;
            LODWORD(v68) = v145;
            v145 = 0;
            *(_DWORD *)(v62 + 112) = v68;
            LODWORD(v68) = v146;
            v146 = 0;
            *(_DWORD *)(v62 + 116) = v68;
            *(_QWORD *)(v62 + 120) = 0;
            *(_QWORD *)(v62 + 128) = 0;
            v69 = v147;
            v147 = 0;
            *(_QWORD *)(v62 + 120) = v69;
            LODWORD(v69) = v148;
            v148 = 0;
            *(_DWORD *)(v62 + 128) = v69;
            LODWORD(v69) = v149;
            v149 = 0;
            *(_DWORD *)(v62 + 132) = v69;
            ++HIDWORD(v152);
          }
          if (v150)
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)&v132, v55);
          --v56;
        }
        while (v56);
        v70 = v151;
        v71 = v152;
      }
      else
      {
        v70 = 0;
        v71 = 0;
      }
      v151 = 0;
      v152 = 0;
      v113 = v70;
      v114 = v71;
LABEL_69:
      v115 = 1;
      v72 = WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v55);
      goto LABEL_82;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v132, v2);
      if (!v150)
        break;
      v73 = HIDWORD(v152);
      if (HIDWORD(v152) == (_DWORD)v152)
      {
        WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v151, (unint64_t)&v132);
      }
      else
      {
        v75 = v151;
        WebCore::Color::Color();
        v76 = v75 + 136 * v73;
        v77 = v133;
        *(_OWORD *)(v76 + 24) = v134;
        *(_OWORD *)(v76 + 8) = v77;
        *(_QWORD *)(v76 + 40) = 0;
        *(_QWORD *)(v76 + 48) = 0;
        v78 = v135;
        v135 = 0;
        *(_QWORD *)(v76 + 40) = v78;
        LODWORD(v78) = (_DWORD)v136;
        LODWORD(v136) = 0;
        *(_DWORD *)(v76 + 48) = v78;
        LODWORD(v78) = HIDWORD(v136);
        HIDWORD(v136) = 0;
        *(_DWORD *)(v76 + 52) = v78;
        *(_QWORD *)(v76 + 56) = 0;
        *(_QWORD *)(v76 + 64) = 0;
        v79 = v137;
        v137 = 0;
        *(_QWORD *)(v76 + 56) = v79;
        LODWORD(v79) = v138;
        LODWORD(v138) = 0;
        *(_DWORD *)(v76 + 64) = v79;
        LODWORD(v79) = HIDWORD(v138);
        HIDWORD(v138) = 0;
        *(_DWORD *)(v76 + 68) = v79;
        *(_QWORD *)(v76 + 72) = 0;
        *(_QWORD *)(v76 + 80) = 0;
        v80 = v139;
        v139 = 0;
        *(_QWORD *)(v76 + 72) = v80;
        LODWORD(v80) = v140;
        LODWORD(v140) = 0;
        *(_DWORD *)(v76 + 80) = v80;
        LODWORD(v80) = HIDWORD(v140);
        HIDWORD(v140) = 0;
        *(_DWORD *)(v76 + 84) = v80;
        *(_QWORD *)(v76 + 88) = 0;
        *(_QWORD *)(v76 + 96) = 0;
        v81 = v141;
        v141 = 0;
        *(_QWORD *)(v76 + 88) = v81;
        LODWORD(v81) = v142;
        v142 = 0;
        *(_DWORD *)(v76 + 96) = (_DWORD)v81;
        LODWORD(v81) = v143;
        v143 = 0;
        *(_DWORD *)(v76 + 100) = (_DWORD)v81;
        *(_QWORD *)(v76 + 104) = 0;
        *(_QWORD *)(v76 + 112) = 0;
        v82 = v144;
        v144 = 0;
        *(_QWORD *)(v76 + 104) = v82;
        LODWORD(v82) = v145;
        v145 = 0;
        *(_DWORD *)(v76 + 112) = v82;
        LODWORD(v82) = v146;
        v146 = 0;
        *(_DWORD *)(v76 + 116) = v82;
        *(_QWORD *)(v76 + 120) = 0;
        *(_QWORD *)(v76 + 128) = 0;
        v83 = v147;
        v147 = 0;
        *(_QWORD *)(v76 + 120) = v83;
        LODWORD(v83) = v148;
        v148 = 0;
        *(_DWORD *)(v76 + 128) = v83;
        LODWORD(v83) = v149;
        v149 = 0;
        *(_DWORD *)(v76 + 132) = v83;
        ++HIDWORD(v152);
      }
      if (v150)
        WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)&v132, v74);
      if (!--v56)
      {
        WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v151, HIDWORD(v152));
        v113 = v151;
        v84 = v152;
        v151 = 0;
        v152 = 0;
        v114 = v84;
        goto LABEL_69;
      }
    }
LABEL_80:
    LOBYTE(v113) = 0;
    v115 = 0;
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v59);
  }
  else
  {
    LOBYTE(v113) = 0;
    v115 = 0;
  }
  v85 = (char *)*v2;
  v86 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v72 = v2[3];
  if (v72)
    goto LABEL_106;
LABEL_82:
  while (1)
  {
    v86 = v2[1];
    v85 = (char *)*v2;
    v87 = v2[2] - *v2;
    if (v86 <= v87)
      break;
    v88 = &v85[v87];
    v2[2] = (uint64_t)(v88 + 1);
    if (!v85)
    {
      v108 = v86;
      v109 = 0;
      goto LABEL_109;
    }
    v89 = *v88;
    if (v89 > 1)
      goto LABEL_110;
    v90 = 0;
    v91 = v89 != 0;
LABEL_86:
    if (v131)
    {
      v2 = (uint64_t *)&v132;
      v72 = WebCore::Color::Color();
      if (v129)
      {
        v2 = (uint64_t *)&v133;
        v72 = WebCore::Color::Color();
        if (v127)
        {
          v72 = WebCore::Color::Color();
          if (v125)
          {
            v72 = WebCore::Color::Color();
            if (v123)
            {
              v72 = WebCore::Color::Color();
              if (!v6)
              {
                LOBYTE(v135) = v4;
                if (v121)
                {
                  v136 = v119;
                  v92 = v120;
                  v119 = 0;
                  v120 = 0;
                  v137 = v92;
                  if (v118)
                  {
                    v138 = v116;
                    v93 = v117;
                    v116 = 0;
                    v117 = 0;
                    v139 = v93;
                    if (v115)
                    {
                      v140 = v113;
                      v94 = v114;
                      v113 = 0;
                      v114 = 0;
                      v141 = v94;
                      if (!v90)
                      {
                        LOBYTE(v142) = v91;
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        *(_BYTE *)(a2 + 40) = v135;
                        v95 = v136;
                        v136 = 0;
                        *(_QWORD *)(a2 + 48) = v95;
                        v96 = v137;
                        v137 = 0;
                        *(_QWORD *)(a2 + 56) = v96;
                        v97 = v138;
                        v138 = 0;
                        *(_QWORD *)(a2 + 64) = v97;
                        v98 = v139;
                        v139 = 0;
                        *(_QWORD *)(a2 + 72) = v98;
                        v99 = v140;
                        v140 = 0;
                        *(_QWORD *)(a2 + 80) = v99;
                        v100 = v141;
                        v141 = 0;
                        *(_QWORD *)(a2 + 88) = v100;
                        *(_BYTE *)(a2 + 96) = v142;
                        *(_BYTE *)(a2 + 104) = 1;
                        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)&v132, v101);
                        goto LABEL_97;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_106:
    if (v86)
      v72 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v72 + 16))(v72, v85);
  }
  v108 = 0;
  v109 = 0;
  *v2 = 0;
  v2[1] = 0;
  v110 = v2[3];
  if (v110)
  {
    if (v86)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
      v109 = *v2;
      v108 = v2[1];
    }
    else
    {
      v108 = 0;
      v109 = 0;
    }
  }
LABEL_109:
  v86 = 0;
  v85 = 0;
  *v2 = 0;
  v2[1] = 0;
  v111 = v2[3];
  if (v111)
  {
    if (v108)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v109, v108);
      v85 = (char *)*v2;
      v86 = v2[1];
    }
    else
    {
      v86 = 0;
      v85 = 0;
    }
  }
LABEL_110:
  *v2 = 0;
  v2[1] = 0;
  v112 = v2[3];
  if (v112)
  {
    if (v86)
    {
      v72 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v112 + 16))(v112, v85);
      if (*v2)
      {
        v91 = 0;
        v90 = 1;
        goto LABEL_86;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 104) = 0;
LABEL_97:
  if (v115)
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v85);
  if (v118)
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v85);
  if (v121)
  {
    v102 = v119;
    if (v119)
    {
      v119 = 0;
      LODWORD(v120) = 0;
      WTF::fastFree(v102, v85);
    }
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v122, v85);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v124, v103);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v126, v104);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v128, v105);
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v130, v106);
}

void sub_196E7FEDC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, WTF *a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a24, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, v54);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a30, v55);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32, v56);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a34, v57);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::DiagnosticLoggingDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;

  result = IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>>(a1, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (v7)
    {
      result = v6;
      if (v6)
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E80270(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(_QWORD *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::FontCachePrewarmInformation,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v18);
  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v15);
  if (*a1)
  {
    if (v20)
    {
      v8 = v18;
      v9 = v19;
      v18 = 0;
      v19 = 0;
      if (v17)
      {
        v10 = v15;
        v15 = 0;
        v13[0] = 0;
        *(_QWORD *)a3 = v8;
        v13[1] = 0;
        *(_QWORD *)(a3 + 8) = v9;
        v14[0] = 0;
        *(_QWORD *)(a3 + 16) = v10;
        v14[1] = 0;
        v11 = v16;
        v16 = 0;
        *(_QWORD *)(a3 + 24) = v11;
        *(_BYTE *)(a3 + 32) = 1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v7);
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v12);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
LABEL_5:
  if (v17)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
  if (v20)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
  return result;
}

void sub_196E80378(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 24))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
}

uint64_t IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  result = IPC::Decoder::decode<WebCore::FontCachePrewarmInformation>(a1, a2, (uint64_t)&v14);
  if (!*a1)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v6);
  }
  if (v18)
  {
    v7 = v14;
    v14 = 0;
    v8 = v16;
    v16 = 0;
    v12[0] = 0;
    *(_QWORD *)a3 = v7;
    v12[1] = 0;
    v9 = v15;
    v15 = 0;
    *(_QWORD *)(a3 + 8) = v9;
    v13[0] = 0;
    *(_QWORD *)(a3 + 16) = v8;
    v13[1] = 0;
    v10 = v17;
    v17 = 0;
    *(_QWORD *)(a3 + 24) = v10;
    *(_BYTE *)(a3 + 32) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v6);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v11);
    return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v6);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FontCachePrewarmInformation>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebCore::FontCachePrewarmInformation,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 32))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196E804CC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LODWORD(v5) = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v2) = *((_DWORD *)v2 + 5);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  char v15;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v14);
  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  v6 = v5;
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v7 = *a1;
    if (!*a1)
      break;
    if (v15 && v6)
    {
      *(_OWORD *)a2 = v14;
      *(_QWORD *)(a2 + 16) = result;
      LOBYTE(v7) = 1;
      goto LABEL_6;
    }
    __break(1u);
LABEL_8:
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = v6;
      v13 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      v6 = v12;
      result = v13;
    }
  }
  *(_BYTE *)a2 = 0;
LABEL_6:
  *(_BYTE *)(a2 + 24) = v7;
  return result;
}

char *IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  BOOL i;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;

  IPC::Decoder::decode<WTF::String>(a1, &v23);
  IPC::Decoder::decode<WTF::String>(a1, &v21);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v19);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_22;
  v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v15 = v5;
    v16 = 0;
    goto LABEL_23;
  }
  v9 = *v8;
  if (v9 > 1)
    goto LABEL_24;
  v10 = 0;
  for (i = v9 != 0; ; i = 0)
  {
    if (v24)
    {
      v12 = v23;
      v23 = 0;
      if (v22)
      {
        v13 = v21;
        v21 = 0;
        if (v20)
        {
          v14 = v19;
          v19 = 0;
          if (!v10)
          {
            *(_QWORD *)a2 = v12;
            *(_QWORD *)(a2 + 8) = v13;
            *(_QWORD *)(a2 + 16) = v14;
            *(_BYTE *)(a2 + 24) = i;
            *(_BYTE *)(a2 + 32) = 1;
            goto LABEL_10;
          }
        }
      }
    }
    __break(1u);
LABEL_22:
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
LABEL_23:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v6 = (WTF::StringImpl *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v5)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v6);
    if (!*a1)
      break;
    v10 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_10:
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v24)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E80874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::PlatformTextTrackData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  int v7;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  v4 = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 26);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_DWORD *)v2 + 7);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v2 = a2;
  v4 = *(_BYTE *)(a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 32));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, v2 + 40);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, v2 + 56);
  v5 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::decode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  __int16 i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  _BYTE v58[40];
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  char v66;
  __int16 v67;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_54;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v25 = v6;
    v26 = 0;
    goto LABEL_55;
  }
  v9 = *v8;
  if (v9 >= 4)
    goto LABEL_56;
  for (i = v9 | 0x100; ; i = 0)
  {
    v67 = i;
    IPC::Decoder::decode<WTF::String>(a2, &v65);
    IPC::Decoder::decode<WTF::String>(a2, &v63);
    IPC::Decoder::decode<WTF::String>(a2, &v61);
    IPC::Decoder::decode<WTF::String>(a2, &v59);
    IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v58, a2);
    v6 = a2[1];
    v11 = *a2;
    v12 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v6 < v12 || v6 - v12 <= 7)
    {
      v14 = 0;
      v30 = 0;
      *a2 = 0;
      a2[1] = 0;
      v31 = a2[3];
      if (v31)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          v30 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v30 = 0;
        }
      }
    }
    else
    {
      a2[2] = v11 + v12 + 8;
      if (v11)
      {
        v13 = 0;
        v14 = v11;
        goto LABEL_9;
      }
      v14 = v6;
      v30 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v14);
        v14 = *a2;
        v6 = a2[1];
        v13 = 1;
        v11 = *a2;
        goto LABEL_9;
      }
    }
    else
    {
      v14 = 0;
    }
    v6 = 0;
    v11 = 0;
    v13 = 1;
LABEL_9:
    v15 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
    if (v6 < v15 || v6 - v15 <= 7)
    {
      v14 = 0;
      v33 = 0;
      *a2 = 0;
      a2[1] = 0;
      v34 = a2[3];
      if (v34)
      {
        v54 = v13;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
          v33 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v33 = 0;
        }
        v13 = v54;
      }
    }
    else
    {
      a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v11)
      {
        v16 = 0;
        goto LABEL_13;
      }
      v14 = v6;
      v33 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      v51 = v13;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33, v14);
        v14 = *a2;
        v6 = a2[1];
        v16 = 1;
        v11 = *a2;
      }
      else
      {
        v6 = 0;
        v11 = 0;
        v16 = 1;
      }
      v13 = v51;
    }
    else
    {
      v14 = 0;
      v6 = 0;
      v11 = 0;
      v16 = 1;
    }
LABEL_13:
    v17 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
    if (v6 < v17 || v6 - v17 <= 7)
    {
      v14 = 0;
      v36 = 0;
      *a2 = 0;
      a2[1] = 0;
      v37 = a2[3];
      if (v37)
      {
        v48 = v16;
        v55 = v13;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          v36 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v36 = 0;
        }
        v13 = v55;
        v16 = v48;
      }
    }
    else
    {
      v18 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      a2[2] = v18;
      if (v11)
      {
        v19 = 0;
        goto LABEL_17;
      }
      v14 = v6;
      v36 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (!v38)
    {
      v14 = 0;
      v11 = 0;
      v19 = 1;
      goto LABEL_68;
    }
    v46 = v16;
    v52 = v13;
    if (!v14)
    {
      v11 = 0;
      v19 = 1;
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v14);
    v11 = *a2;
    v6 = a2[1];
    v18 = a2[2];
    v19 = 1;
    v14 = *a2;
    v13 = v52;
    v16 = v46;
LABEL_17:
    v20 = v18 - v11;
    if (v6 <= v20)
      break;
    v21 = (unsigned __int8 *)(v11 + v20);
    a2[2] = (uint64_t)(v21 + 1);
    if (!v11)
    {
      v14 = v6;
      goto LABEL_68;
    }
    if (*v21 > 1u)
      goto LABEL_70;
    v22 = 0;
LABEL_21:
    if (HIBYTE(v67) && v66 && v64 && v62 && v60 && v58[32] && !v13 && !v16 && !v19 && !v22)
    {
      WebCore::AdditionalNetworkLoadMetricsForWebInspector::create();
      *(_QWORD *)a1 = v57;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_32;
    }
    __break(1u);
LABEL_54:
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
LABEL_55:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_56:
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v5);
  }
  v44 = v19;
  v49 = v16;
  v56 = v13;
  v14 = 0;
  v41 = a2[3];
  *a2 = 0;
  a2[1] = 0;
  if (v41 && v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
    v11 = *a2;
    v14 = a2[1];
  }
  else
  {
    v11 = 0;
  }
  v13 = v56;
  v16 = v49;
  v19 = v44;
LABEL_68:
  *a2 = 0;
  a2[1] = 0;
  v39 = a2[3];
  if (v39)
  {
    v43 = v19;
    v47 = v16;
    v53 = v13;
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v11, v14);
      v14 = *a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
    }
    v13 = v53;
    v16 = v47;
    v19 = v43;
  }
  else
  {
    v6 = 0;
    v14 = 0;
  }
LABEL_70:
  *a2 = 0;
  a2[1] = 0;
  v40 = a2[3];
  if (v40)
  {
    if (v6)
    {
      v42 = v19;
      v45 = v16;
      v50 = v13;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v14);
      v13 = v50;
      v16 = v45;
      v19 = v42;
      if (*a2)
      {
        v22 = 1;
        goto LABEL_21;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
LABEL_32:
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v58);
  if (v60)
  {
    result = v59;
    v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v62)
  {
    result = v61;
    v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v64)
  {
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v66)
  {
    result = v65;
    v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E811A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](va);
  if (*(_BYTE *)(v11 - 80))
  {
    v14 = *(WTF::StringImpl **)(v11 - 88);
    *(_QWORD *)(v11 - 88) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  if (*(_BYTE *)(v11 - 64))
  {
    v15 = *(WTF::StringImpl **)(v11 - 72);
    *(_QWORD *)(v11 - 72) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (*(_BYTE *)(v11 - 48))
  {
    v16 = *(WTF::StringImpl **)(v11 - 56);
    *(_QWORD *)(v11 - 56) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_BYTE *)(v11 - 32))
  {
    v17 = *(WTF::StringImpl **)(v11 - 40);
    *(_QWORD *)(v11 - 40) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::NowPlayingInfoArtwork,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)(a2 + 16));
}

char *IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 3);
  return IPC::ArgumentCoder<std::optional<WebCore::NowPlayingInfoArtwork>,void>::encode<IPC::Encoder,std::optional<WebCore::NowPlayingInfoArtwork> const&>(a1, (uint64_t)(a2 + 4));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[2];
  WTF::StringImpl *v41[2];
  __int128 v42;
  uint64_t v43;
  char v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  char v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;
  WTF::StringImpl *v52;
  char v53;
  WTF::StringImpl *v54;
  char v55;
  WTF::StringImpl *v56;
  char v57;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  char v61;
  WTF::StringImpl *v62;
  char v63;

  IPC::Decoder::decode<WTF::String>(a1, &v56);
  IPC::Decoder::decode<WTF::String>(a1, &v54);
  IPC::Decoder::decode<WTF::String>(a1, &v52);
  IPC::Decoder::decode<WTF::String>(a1, &v50);
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v34 = 0;
    v35 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v35 = *a1;
        v34 = a1[1];
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
    goto LABEL_82;
  }
  v10 = (unsigned __int8 *)v8 + v9;
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v34 = v7;
    v35 = 0;
LABEL_82:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_83;
  }
  v11 = *v10;
  if (v11 >= 2)
  {
LABEL_83:
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38 && v7)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v38 + 16))(v38, v8);
    LOBYTE(v45) = 0;
    v49 = 0;
LABEL_24:
    v13 = (WTF::StringImpl *)*a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_79;
    goto LABEL_25;
  }
  if (!v11)
  {
    LOBYTE(v40[0]) = 0;
    LOBYTE(v41[1]) = 0;
    LOBYTE(v45) = 0;
    v48 = 0;
    LOBYTE(v2) = 1;
    v49 = 1;
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v8);
    v18 = 0;
    goto LABEL_26;
  }
  IPC::Decoder::decode<WTF::String>(a1, &v62);
  IPC::Decoder::decode<WTF::String>(a1, &v60);
  result = IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((IPC::Decoder *)a1, &v58);
  v2 = *a1;
  if (!*a1)
  {
    LOBYTE(v40[0]) = 0;
    LOBYTE(v41[1]) = 0;
    if (v59)
    {
      v39 = v58;
      v58 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) != 1)
        {
          v3 = 0;
          --*((_DWORD *)v39 + 2);
          goto LABEL_10;
        }
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 8))(v39);
      }
    }
    v3 = 0;
    goto LABEL_10;
  }
  if (!v63)
    goto LABEL_78;
  v15 = v62;
  v62 = 0;
  if (!v61)
    goto LABEL_78;
  v16 = v60;
  v60 = 0;
  if (!v59)
    goto LABEL_78;
  v40[0] = v15;
  v40[1] = v16;
  v41[0] = v58;
  v3 = 1;
  LOBYTE(v41[1]) = 1;
LABEL_10:
  if (v61)
  {
    v17 = v60;
    v60 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  if (v63)
  {
    v19 = v62;
    v62 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v13);
        if (v2)
          goto LABEL_21;
        goto LABEL_75;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v2)
    goto LABEL_21;
LABEL_75:
  v13 = (WTF::StringImpl *)*a1;
  v32 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33 && v32)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v33 + 16))(v33, v13);
    v3 = LOBYTE(v41[1]);
  }
LABEL_21:
  if (!(_DWORD)v3)
  {
    LOBYTE(v45) = 0;
    v49 = 0;
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v13);
    goto LABEL_24;
  }
  v20 = v40[0];
  v4 = v40[1];
  v40[0] = 0;
  v40[1] = 0;
  v45 = v20;
  v46 = v4;
  v3 = (uint64_t)v41[0];
  v41[0] = 0;
  v47 = v3;
  v48 = 1;
  v49 = 1;
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v13);
  v18 = 0;
  LOBYTE(v2) = 0;
LABEL_26:
  while (*a1)
  {
    if (v57)
    {
      v21 = v56;
      v56 = 0;
      v40[0] = v21;
      if (v55)
      {
        v22 = v54;
        v54 = 0;
        v40[1] = v22;
        if (v53)
        {
          v23 = v52;
          v52 = 0;
          v41[0] = v23;
          if (v51)
          {
            v24 = v50;
            v50 = 0;
            v41[1] = v24;
            if (!v18)
            {
              LOBYTE(v42) = 0;
              v44 = 0;
              if ((v2 & 1) == 0)
              {
                v25 = v45;
                v45 = 0;
                v46 = 0;
                *(_QWORD *)&v42 = v25;
                *((_QWORD *)&v42 + 1) = v4;
                v47 = 0;
                v43 = v3;
                v44 = 1;
              }
              *(_QWORD *)a2 = v21;
              *(_QWORD *)(a2 + 8) = v22;
              *(_OWORD *)v40 = 0u;
              *(_OWORD *)v41 = 0u;
              *(_QWORD *)(a2 + 16) = v23;
              *(_QWORD *)(a2 + 24) = v24;
              *(_BYTE *)(a2 + 32) = 0;
              *(_BYTE *)(a2 + 56) = 0;
              if ((v2 & 1) == 0)
              {
                v26 = v42;
                v42 = 0uLL;
                *(_OWORD *)(a2 + 32) = v26;
                v27 = v43;
                v43 = 0;
                *(_QWORD *)(a2 + 48) = v27;
                *(_BYTE *)(a2 + 56) = 1;
              }
              *(_BYTE *)(a2 + 64) = 1;
              std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v13);
              v28 = v41[1];
              v41[1] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v13);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = v41[0];
              v41[0] = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v13);
                else
                  *(_DWORD *)v29 -= 2;
              }
              v30 = v40[1];
              v40[1] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v13);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = v40[0];
              v40[0] = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v13);
                else
                  *(_DWORD *)v31 -= 2;
              }
              goto LABEL_52;
            }
          }
        }
      }
    }
LABEL_78:
    __break(1u);
LABEL_79:
    if (v14)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v13);
LABEL_25:
    v18 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  if ((v18 & 1) == 0)
LABEL_52:
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v13);
  if (v51)
  {
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v53)
  {
    result = v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v55)
  {
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v57)
  {
    result = v56;
    v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E81868(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  if (a24)
  {
    v29 = a23;
    a23 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (a26)
  {
    v30 = a25;
    a25 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 120))
  {
    v31 = *(WTF::StringImpl **)(v26 - 128);
    *(_QWORD *)(v26 - 128) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v28);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 104))
  {
    v32 = *(WTF::StringImpl **)(v26 - 112);
    *(_QWORD *)(v26 - 112) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v28);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode(a1, a2);
  v4 = v2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[10];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_BYTE *)v2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[12];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = *((_BYTE *)v2 + 105);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  char v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  _BYTE v85[26];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;

  IPC::Decoder::decode<WebCore::NowPlayingMetadata>(a1, (uint64_t)&v86);
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v79 = 0;
      v78 = *v8;
      v9 = v5;
      goto LABEL_8;
    }
    v9 = v4;
    v50 = 0;
    goto LABEL_54;
  }
  while (1)
  {
    v9 = 0;
    v50 = 0;
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v50 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v50 = 0;
      }
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (!v52)
    {
      v9 = 0;
LABEL_56:
      v4 = 0;
      v5 = 0;
      v78 = 0;
      v79 = 1;
      goto LABEL_8;
    }
    if (!v9)
      goto LABEL_56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v9);
    v78 = 0;
    v9 = *a1;
    v4 = a1[1];
    v79 = 1;
    v5 = *a1;
LABEL_8:
    v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 >= v10 && v4 - v10 > 7)
    {
      v12 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v12 + 1);
      if (v5)
      {
        v13 = 0;
        v77 = *v12;
        goto LABEL_15;
      }
      v9 = v4;
      v53 = 0;
    }
    else
    {
      v9 = 0;
      v53 = 0;
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
          v53 = *a1;
          v9 = a1[1];
        }
        else
        {
          v9 = 0;
          v53 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (v55)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53, v9);
        v77 = 0;
        v9 = *a1;
        v4 = a1[1];
        v13 = 1;
        v5 = *a1;
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    v4 = 0;
    v5 = 0;
    v77 = 0;
    v13 = 1;
LABEL_15:
    v14 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 < v14 || v4 - v14 <= 7)
    {
      v9 = 0;
      v64 = 0;
      *a1 = 0;
      a1[1] = 0;
      v65 = a1[3];
      if (v65)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
          v64 = *a1;
          v9 = a1[1];
        }
        else
        {
          v9 = 0;
          v64 = 0;
        }
      }
    }
    else
    {
      v15 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = v15 + 1;
      a1[2] = (uint64_t)(v15 + 1);
      if (v5)
      {
        v17 = 0;
        v18 = *v15;
        goto LABEL_19;
      }
      v9 = v4;
      v64 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v66 = a1[3];
    if (!v66)
    {
      v18 = 0;
      v9 = 0;
LABEL_76:
      v5 = 0;
      v17 = 1;
      goto LABEL_77;
    }
    if (!v9)
    {
      v18 = 0;
      goto LABEL_76;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v9);
    v18 = 0;
    v5 = *a1;
    v4 = a1[1];
    v16 = (_QWORD *)a1[2];
    v17 = 1;
    v9 = *a1;
LABEL_19:
    v19 = (char *)v16 - v5;
    if (v4 <= (unint64_t)v19)
    {
      v9 = 0;
      v72 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v72 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
        v5 = *a1;
        v9 = a1[1];
      }
      else
      {
        v5 = 0;
      }
LABEL_77:
      *a1 = 0;
      a1[1] = 0;
      v67 = a1[3];
      if (v67)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v5, v9);
          v21 = 0;
          v9 = *a1;
          v4 = a1[1];
          goto LABEL_80;
        }
        v4 = 0;
      }
      else
      {
        v4 = 0;
        v9 = 0;
      }
      v21 = 0;
      goto LABEL_80;
    }
    v20 = &v19[v5];
    a1[2] = (uint64_t)(v20 + 1);
    if (!v5)
    {
      v9 = v4;
      goto LABEL_77;
    }
    v21 = *v20;
    if (v21 < 2)
    {
      v22 = 0;
      v23 = 1;
      goto LABEL_23;
    }
LABEL_80:
    *a1 = 0;
    a1[1] = 0;
    v68 = a1[3];
    if (v68 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v9);
    v23 = 0;
    v22 = 1;
LABEL_23:
    if (v21)
      v24 = v23;
    else
      v24 = 0;
    v25 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
    v4 = a1[1];
    v28 = v27;
    if (!v27)
    {
      v56 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (!v57 || !v4)
      {
        v4 = 0;
        v29 = (WTF::StringImpl *)*a1;
LABEL_63:
        *a1 = 0;
        a1[1] = 0;
        v58 = a1[3];
        if (v58)
        {
          v71 = v25;
          if (v4)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v58 + 16))(a1[3], v29);
            v59 = *a1;
            v4 = a1[1];
          }
          else
          {
            v59 = 0;
          }
          v25 = v71;
        }
        else
        {
          v59 = 0;
          v4 = 0;
        }
LABEL_65:
        *a1 = 0;
        a1[1] = 0;
        v60 = a1[3];
        if (v60)
        {
          v70 = v25;
          if (v4)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(a1[3], v59);
            v33 = 0;
            v29 = (WTF::StringImpl *)*a1;
            v4 = a1[1];
          }
          else
          {
            v29 = 0;
            v33 = 0;
          }
          v25 = v70;
        }
        else
        {
          v4 = 0;
          v29 = 0;
          v33 = 0;
        }
        goto LABEL_67;
      }
      v69 = v25;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(a1[3], v56);
      v25 = v69;
      v4 = a1[1];
    }
    v29 = (WTF::StringImpl *)*a1;
    v30 = a1[2] - *a1;
    if (v4 <= v30)
      goto LABEL_63;
    v31 = (unsigned __int8 *)v29 + v30;
    v32 = (uint64_t)v29 + v30 + 1;
    a1[2] = v32;
    if (!v29)
    {
      v59 = 0;
      goto LABEL_65;
    }
    v33 = *v31;
    if (v33 < 2)
    {
      v34 = 0;
      v35 = 1;
      goto LABEL_31;
    }
LABEL_67:
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (!v61)
    {
      v36 = 0;
      v29 = 0;
      v34 = 1;
      goto LABEL_69;
    }
    v74 = v25;
    if (!v4)
    {
      v36 = 0;
      v61 = 0;
      v29 = 0;
      v34 = 1;
      goto LABEL_120;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v61 + 16))(v61, v29);
    v35 = 0;
    v29 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v34 = 1;
    v32 = a1[2];
    v25 = v74;
LABEL_31:
    if (v33)
      v36 = v35;
    else
      v36 = 0;
    v37 = v32 - (_QWORD)v29;
    if (v4 <= v37)
    {
      v74 = v25;
      v61 = 0;
      v73 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v73 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
        v29 = (WTF::StringImpl *)*a1;
        v61 = a1[1];
      }
      else
      {
        v29 = 0;
      }
LABEL_120:
      v25 = v74;
LABEL_69:
      *a1 = 0;
      a1[1] = 0;
      v62 = a1[3];
      if (v62)
      {
        v76 = v25;
        if (v61)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v62 + 16))(v62, v29, v61);
          v29 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v29 = 0;
        }
        v25 = v76;
      }
      else
      {
        v4 = 0;
        v29 = 0;
      }
      goto LABEL_71;
    }
    v38 = (unsigned __int8 *)v29 + v37;
    a1[2] = (uint64_t)(v38 + 1);
    if (!v29)
    {
      v61 = v4;
      goto LABEL_69;
    }
    v39 = *v38;
    if (v39 <= 1)
    {
      v40 = 0;
      v41 = v39 != 0;
      goto LABEL_38;
    }
LABEL_71:
    *a1 = 0;
    a1[1] = 0;
    v63 = a1[3];
    if (!v63
      || !v4
      || (v75 = v25,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v63 + 16))(v63, v29),
          v25 = v75,
          !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 112) = 0;
      return std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v29);
    }
    v41 = 0;
    v40 = 1;
LABEL_38:
    v42 = v92;
    if (v92)
    {
      v43 = v86;
      v44 = v87;
      v86 = 0u;
      v87 = 0u;
      LOBYTE(v80) = 0;
      v83 = 0;
      v45 = v91;
      if (v91)
      {
        v46 = v88;
        v42 = v89;
        v88 = 0;
        v89 = 0;
        v80 = v46;
        v81 = v42;
        v26 = v90;
        v90 = 0;
        v82 = v26;
        v83 = 1;
      }
      if (!v79)
      {
        *(_QWORD *)&v84 = v78;
        if (!v13)
        {
          *((_QWORD *)&v84 + 1) = v77;
          if (!v17)
          {
            *(_QWORD *)v85 = v18;
            if (!v22)
            {
              v85[8] = v24;
              if (v28)
              {
                *(_QWORD *)&v85[16] = v25;
                if (!v34)
                {
                  v85[24] = v36;
                  if (!v40)
                    break;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  v85[25] = v41;
  *(_OWORD *)a2 = v43;
  *(_OWORD *)(a2 + 16) = v44;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (v45)
  {
    v47 = v80;
    v80 = 0;
    v81 = 0;
    *(_QWORD *)(a2 + 32) = v47;
    *(_QWORD *)(a2 + 40) = v42;
    v82 = 0;
    *(_QWORD *)(a2 + 48) = v26;
    *(_BYTE *)(a2 + 56) = 1;
  }
  v48 = *(_OWORD *)v85;
  *(_OWORD *)(a2 + 64) = v84;
  *(_OWORD *)(a2 + 80) = v48;
  *(_OWORD *)(a2 + 90) = *(_OWORD *)&v85[10];
  *(_BYTE *)(a2 + 112) = 1;
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, v29);
  return std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v29);
}

void sub_196E82240(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NowPlayingMetadata>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 64))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E822C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::VideoConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 34));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 36));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 38));
}

char *IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char *result;
  id v25;

  IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(a1, a2 + 88);
  v4 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 180);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_BYTE *)(a2 + 184);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 185);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 186);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 187);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(unsigned __int8 *)(a2 + 224);
  v11 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10)
  {
    *v11 = 1;
    if (!*(_BYTE *)(a2 + 224))
      goto LABEL_10;
    IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(a1, (int *)(a2 + 192));
  }
  else
  {
    *v11 = 0;
  }
  v12 = *(unsigned __int8 *)(a2 + 320);
  v13 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    *v13 = 0;
LABEL_5:
    v14 = *(_DWORD *)(a2 + 328);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
    v15 = *(_BYTE *)(a2 + 332);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
    v16 = *(_BYTE *)(a2 + 333);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
    v17 = *(_BYTE *)(a2 + 334);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
    v18 = *(_BYTE *)(a2 + 335);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
    v19 = *(_BYTE *)(a2 + 336);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
    v20 = *(_BYTE *)(a2 + 337);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
    v21 = *(_BYTE *)(a2 + 338);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
    v22 = *(_BYTE *)(a2 + 339);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
    v23 = *(_BYTE *)(a2 + 340);
    result = IPC::Encoder::grow(a1, 1uLL, 1);
    *result = v23;
    return result;
  }
  *v13 = 1;
  if (*(_BYTE *)(a2 + 320))
  {
    IPC::Encoder::operator<<<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(a1, a2 + 232);
    goto LABEL_5;
  }
LABEL_10:
  v25 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)std::optional<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>::~optional((uint64_t)v25);
}

uint64_t std::optional<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>::~optional(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a1 + 88))
  {
    v2 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v2])(&v4, a1);
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t *IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *result;
  uint64_t v15;
  int v16;
  char v17;
  char *v18;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  v18 = &v17;
  ((void (*)(uint64_t *__return_ptr, char **))off_1E34AE098[v2])(&v15, &v18);
  v5 = v16;
  v6 = a1[2];
  if (v6 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v6++) = v16;
    a1[2] = v6;
  }
  if (v5 == 1)
  {
    if (v16 == 1)
    {
      v7 = *a1 + v6;
      v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      v9 = v8 >= v7;
      v10 = v8 - v7;
      if (v9)
      {
        v11 = v10 + v6;
        v12 = v11 + 8;
        if (v11 > 0xFFFFFFFFFFFFFFF7 || v12 > a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_QWORD *)(*a1 + v11) = v15;
          a1[2] = v12;
        }
      }
      goto LABEL_13;
    }
LABEL_22:
    result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  if (!v5)
  {
    if (v16)
      goto LABEL_22;
    IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, v15);
  }
LABEL_13:
  if (v16 != -1)
    ((void (*)(char **, uint64_t *))off_1E34AE060[v16])(&v18, &v15);
  return IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (_QWORD *)(a2 + 16));
}

void sub_196E82764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char a12)
{
  if (a10 != -1)
    ((void (*)(char *, uint64_t *))off_1E34AE060[a10])(&a12, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E827E8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 120))
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::DragItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::Path>,void>::encode<IPC::Encoder,std::optional<WebCore::Path> const&>(a1, (unsigned __int8 *)(a2 + 128));
  v4 = *(_DWORD *)(a2 + 208);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 212);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 216));
  v6 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 224);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 228);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *(_DWORD *)(a2 + 232);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = *(_DWORD *)(a2 + 236);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = *(_DWORD *)(a2 + 240);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 248));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 256));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 296));
  LOBYTE(v11) = *(_BYTE *)(a2 + 312);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 320));
  return IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 328));
}

void IPC::ArgumentCoder<WebCore::DragItem,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int i;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  char v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  __int128 v42;
  _DWORD *v43;
  _DWORD *v44;
  __int128 v45;
  _DWORD *v46;
  _DWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  _DWORD *v56;
  _DWORD *v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  char v101;
  WTF::StringImpl *v102;
  char v103;
  WTF::StringImpl *v104;
  __int128 v105;
  __int128 v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110[120];
  char v111[80];
  _BYTE v112[36];
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  char v121[8];
  _DWORD *v122;
  char v123;
  _DWORD *v124;
  __int128 v125;
  __int128 v126;
  _DWORD *v127;
  char v128;
  _DWORD *v129;
  char v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  _DWORD *v135;
  _DWORD *v136;
  _BYTE v137[24];
  _BYTE v138[208];
  char v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  int v143;
  char v144;
  char v145;
  uint64_t v146;

  v2 = a1;
  v146 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a1, &v104);
  v4 = IPC::Decoder::decode<std::optional<WebCore::Path>>(&v140, v2);
  if (*v2)
  {
    if (!v108 || !v145)
      goto LABEL_100;
    v109 = 0;
    std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v110, (uint64_t)&v104);
    std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100](v111, (uint64_t)&v140);
    MEMORY[0x19AEB56B8](v138, &v109);
    v139 = 1;
    WebCore::DragImage::~DragImage((WebCore::DragImage *)&v109);
  }
  else
  {
    v138[0] = 0;
    v139 = 0;
  }
  if (v145 && v144 && v143 != -1)
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v143])(&v109, (char *)&v140 + 8);
  if (v108)
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104, v5);
  if (!v139)
  {
    v66 = *v2;
    v67 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v68 = v2[3];
    if (v68)
    {
      if (v67)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v68 + 16))(v68, v66);
    }
  }
  v98 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(v2);
  v99 = v7;
  if (!v7)
  {
    v69 = *v2;
    v70 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v71 = v2[3];
    if (v71)
    {
      if (v70)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v71 + 16))(v71, v69);
    }
  }
  v8 = v2[1];
  v9 = *v2;
  v10 = v2[2] - *v2;
  if (v8 <= v10)
  {
    v72 = 0;
    v73 = 0;
    *v2 = 0;
    v2[1] = 0;
    v74 = v2[3];
    if (v74)
    {
      if (v8)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v74 + 16))(v74);
        v73 = *v2;
        v72 = v2[1];
      }
      else
      {
        v72 = 0;
        v73 = 0;
      }
    }
    goto LABEL_111;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  v2[2] = (unint64_t)(v11 + 1);
  if (!v9)
  {
    v72 = v8;
    v73 = 0;
LABEL_111:
    v8 = 0;
    v9 = 0;
    *v2 = 0;
    v2[1] = 0;
    v75 = v2[3];
    if (v75)
    {
      if (v72)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v75 + 16))(v75, v73, v72);
        v9 = *v2;
        v8 = v2[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_112;
  }
  v12 = *v11;
  if (v12 >= 2)
  {
LABEL_112:
    *v2 = 0;
    v2[1] = 0;
    v76 = v2[3];
    if (v76 && v8)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v76 + 16))(v76, v9);
    i = 0;
    v13 = 0;
    v15 = 0;
    goto LABEL_25;
  }
  if (v12)
  {
    LOWORD(v109) = 0;
    IPC::Decoder::operator>><unsigned char>(v2, &v109);
    if (!BYTE1(v109)
      || (v13 = v109, v14 = v109 - 1, v14 > 0x3F)
      || ((1 << v14) & 0x800000008000808BLL) == 0)
    {
      v5 = (void *)*v2;
      v6 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v4 = v2[3];
      if (v4)
        goto LABEL_101;
      goto LABEL_24;
    }
    v15 = 256;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  for (i = 0x10000; ; i = 0)
  {
LABEL_25:
    if (!HIWORD(i))
    {
      v77 = *v2;
      v78 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v79 = v2[3];
      if (v79)
      {
        if (v78)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v79 + 16))(v79, v77);
      }
    }
    v17 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    v19 = v18;
    if (!v18)
    {
      v80 = *v2;
      v81 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v82 = v2[3];
      if (v82)
      {
        if (v81)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v82 + 16))(v82, v80);
      }
    }
    v20 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    v22 = v21;
    if (!v21)
    {
      v83 = *v2;
      v84 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v85 = v2[3];
      if (v85)
      {
        if (v84)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v85 + 16))(v85, v83);
      }
    }
    v94 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    v96 = v23;
    if (!v23)
    {
      v86 = *v2;
      v87 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v88 = v2[3];
      if (v88)
      {
        if (v87)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v88 + 16))(v88, v86);
      }
    }
    IPC::Decoder::decode<WTF::String>((uint64_t *)v2, &v102);
    IPC::Decoder::decode<WTF::URL>((uint64_t *)v2, &v104);
    v95 = v20;
    v97 = v19;
    IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v100);
    v24 = v17;
    v25 = v2[1];
    v26 = *v2;
    v27 = v2[2] - *v2;
    v28 = v22;
    if (v25 <= v27)
    {
      v30 = v15;
      v89 = 0;
      v90 = 0;
      *v2 = 0;
      v2[1] = 0;
      v91 = v2[3];
      if (v91)
      {
        if (v25)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v91 + 16))(v91);
          v90 = *v2;
          v89 = v2[1];
        }
        else
        {
          v89 = 0;
          v90 = 0;
        }
      }
      goto LABEL_127;
    }
    v29 = i;
    v30 = v15;
    v31 = v13;
    v32 = (unsigned __int8 *)(v26 + v27);
    v2[2] = (unint64_t)(v32 + 1);
    if (!v26)
    {
      v89 = v25;
      v90 = 0;
LABEL_127:
      v29 = i;
      v31 = v13;
      *v2 = 0;
      v2[1] = 0;
      v92 = v2[3];
      if (v92 && v89)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v92 + 16))(v92, v90, v89);
        v33 = 0;
        v26 = *v2;
        v25 = v2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v33 = 0;
      }
      goto LABEL_129;
    }
    v33 = *v32;
    if (v33 < 2)
    {
      v34 = 0;
      v35 = 1;
      goto LABEL_33;
    }
LABEL_129:
    *v2 = 0;
    v2[1] = 0;
    v93 = v2[3];
    if (v93 && v25)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v26);
    v35 = 0;
    v34 = 1;
LABEL_33:
    if (v33)
      v36 = v35;
    else
      v36 = 0;
    v4 = (uint64_t)IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>((uint64_t *)v2, (uint64_t)&v140);
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 512) = 0;
      goto LABEL_87;
    }
    if (v139)
    {
      v4 = MEMORY[0x19AEB56B8](&v109, v138);
      if (v99)
      {
        *(_QWORD *)v112 = v98;
        if ((v31 | v29 | v30) >> 16)
        {
          *(_WORD *)&v112[8] = v31 | v29 | v30;
          if (v97)
          {
            *(_QWORD *)&v112[12] = v24;
            if (v28)
            {
              *(_QWORD *)&v112[20] = v95;
              if (v96)
              {
                *(_QWORD *)&v112[28] = v94;
                if (v103)
                {
                  v37 = v102;
                  v102 = 0;
                  v113 = v37;
                  if (v107)
                  {
                    v38 = v104;
                    v104 = 0;
                    v114 = v38;
                    v115 = v105;
                    v116 = v106;
                    LODWORD(v105) = v105 & 0xFFFFFFFE;
                    if (v101)
                    {
                      v2 = (unint64_t *)&v117;
                      v117 = v100;
                      if (!v34)
                      {
                        v118 = v36;
                        if (v142)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_100:
    __break(1u);
LABEL_101:
    if (v6)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 16))(v4, v5);
LABEL_24:
    v13 = 0;
    v15 = 256;
  }
  v39 = v140;
  v140 = 0uLL;
  v119 = v39;
  *(_QWORD *)&v39 = v141;
  v141 = 0;
  v120 = v39;
  WebCore::PasteboardWriterData::PasteboardWriterData((WebCore::PasteboardWriterData *)v121);
  MEMORY[0x19AEB56B8](a2, &v109);
  v40 = *(_OWORD *)&v112[16];
  *(_OWORD *)(a2 + 208) = *(_OWORD *)v112;
  *(_OWORD *)(a2 + 224) = v40;
  *(_DWORD *)(a2 + 240) = *(_DWORD *)&v112[32];
  v41 = v113;
  v113 = 0;
  *(_QWORD *)(a2 + 248) = v41;
  WTF::URL::URL(a2 + 256, (uint64_t *)&v114);
  *(_OWORD *)(a2 + 296) = v117;
  *(_BYTE *)(a2 + 312) = v118;
  v42 = v119;
  v119 = 0uLL;
  *(_OWORD *)(a2 + 320) = v42;
  *(_QWORD *)&v42 = v120;
  v120 = 0;
  *(_QWORD *)(a2 + 336) = v42;
  *(_BYTE *)(a2 + 344) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  if (v123)
  {
    *(_BYTE *)(a2 + 344) = v121[0];
    v43 = v122;
    if (v122)
      *v122 += 2;
    *(_QWORD *)(a2 + 352) = v43;
    *(_BYTE *)(a2 + 360) = 1;
  }
  *(_BYTE *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 416) = 0;
  if (v128)
  {
    v44 = v124;
    if (v124)
      *v124 += 2;
    *(_QWORD *)(a2 + 368) = v44;
    v45 = v126;
    *(_OWORD *)(a2 + 376) = v125;
    *(_OWORD *)(a2 + 392) = v45;
    v46 = v127;
    if (v127)
      *v127 += 2;
    *(_QWORD *)(a2 + 408) = v46;
    *(_BYTE *)(a2 + 416) = 1;
  }
  *(_BYTE *)(a2 + 424) = 0;
  *(_BYTE *)(a2 + 504) = 0;
  if (v137[16])
  {
    v47 = v129;
    if (v129)
      *v129 += 2;
    *(_QWORD *)(a2 + 424) = v47;
    *(_BYTE *)(a2 + 432) = v130;
    v48 = v131;
    if (v131)
    {
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
    }
    *(_QWORD *)(a2 + 440) = v48;
    v50 = v132;
    if (v132)
    {
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
    }
    *(_QWORD *)(a2 + 448) = v50;
    v52 = v133;
    if (v133)
    {
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
    }
    *(_QWORD *)(a2 + 456) = v52;
    v54 = v134;
    if (v134)
    {
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
    }
    *(_QWORD *)(a2 + 464) = v54;
    v56 = v135;
    if (v135)
      *v135 += 2;
    *(_QWORD *)(a2 + 472) = v56;
    v57 = v136;
    if (v136)
      *v136 += 2;
    *(_QWORD *)(a2 + 480) = v57;
    WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 488, (uint64_t)v137);
    *(_BYTE *)(a2 + 504) = 1;
  }
  *(_BYTE *)(a2 + 512) = 1;
  MEMORY[0x19AEB0A98](v121);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119 + 8, v58);
  v60 = (WTF::StringImpl *)v119;
  *(_QWORD *)&v119 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v59);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = v114;
  v114 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v59);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = v113;
  v113 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v59);
    else
      *(_DWORD *)v62 -= 2;
  }
  WebCore::DragImage::~DragImage((WebCore::DragImage *)&v109);
LABEL_87:
  std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v140, v5);
  if (v107)
  {
    v64 = v104;
    v104 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v63);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  if (v103)
  {
    v65 = v102;
    v102 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v63);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  if (v139)
    WebCore::DragImage::~DragImage((WebCore::DragImage *)v138);
}

void sub_196E83294(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x3A8]))
    WebCore::DragImage::~DragImage((WebCore::DragImage *)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PromisedAttachmentInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E83688(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::Filter,void>::encode(char *this, uint64_t a2)
{
  IPC::Encoder *v3;

  v3 = (IPC::Encoder *)this;
  if (*(_BYTE *)(a2 + 48) == 1)
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 1;
    return IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(v3, a2);
  }
  else if (!*(_BYTE *)(a2 + 48))
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 0;
    return IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(v3, a2);
  }
  return this;
}

uint64_t *IPC::ArgumentCoder<WebCore::Filter,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(a2 + 48) == 1)
  {
    v2 = a1[2];
    if (v2 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v2) = 1;
      a1[2] = v2 + 1;
    }
    return IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(a1, a2);
  }
  else if (!*(_BYTE *)(a2 + 48))
  {
    v3 = a1[2];
    if (v3 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v3) = 0;
      a1[2] = v3 + 1;
    }
    return IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(a1, a2);
  }
  return a1;
}

uint64_t *IPC::ArgumentCoder<WebCore::Filter,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = (uint64_t *)IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>(a1);
  if (!*a1)
    goto LABEL_10;
  if ((unsigned __int16)result >= 0x100u && !(_BYTE)result)
  {
    result = (uint64_t *)IPC::Decoder::decode<WTF::Ref<WebCore::CSSFilter,WTF::RawPtrTraits<WebCore::CSSFilter>,WTF::DefaultRefDerefTraits<WebCore::CSSFilter>>>((unint64_t *)a1, v5, (uint64_t)&v9);
    if (*a1)
    {
      if (!v10)
        goto LABEL_15;
      v8 = v9;
      v9 = 0;
      *(_QWORD *)a2 = v8;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      if (!v10)
        return result;
    }
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v9, v6);
  }
  if ((unsigned __int16)result < 0x100u || result != 1)
  {
LABEL_10:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    return result;
  }
  result = (uint64_t *)IPC::Decoder::decode<WTF::Ref<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>>((unint64_t *)a1, (uint64_t)&v9);
  if (!*a1)
    goto LABEL_16;
  if (v10)
  {
    v7 = v9;
    v9 = 0;
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 1;
    return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v9, v6);
  }
LABEL_15:
  __break(1u);
LABEL_16:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v10)
    return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v9, v6);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::CSSFilter,WTF::RawPtrTraits<WebCore::CSSFilter>,WTF::DefaultRefDerefTraits<WebCore::CSSFilter>>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t result;
  unsigned __int16 v30;
  unint64_t v31;
  int v32;
  char v33;
  WTF *v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  char v59;
  WTF *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  int v64;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v42 = 0;
    v43 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v6, v5);
        v43 = *a1;
        v42 = a1[1];
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
    goto LABEL_49;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v42 = v5;
    v43 = 0;
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45 && v42)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
    LOBYTE(v60) = 0;
    v62 = 0;
    goto LABEL_29;
  }
  v10 = *v9;
  v57 = 0;
  v58 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      v18 = 0;
      v19 = 0;
LABEL_19:
      v57 = 0;
      v58 = 0;
      v60 = v18;
      v61 = v19;
LABEL_20:
      v62 = 1;
      WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, a2);
      goto LABEL_30;
    }
    LODWORD(v58) = v10;
    v57 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>>(&v63, a1);
      if (!(_BYTE)v64)
        goto LABEL_28;
      v11 = HIDWORD(v58);
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        v12 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, HIDWORD(v58) + 1, (unint64_t)&v63);
        v13 = HIDWORD(v58);
        v14 = HIDWORD(v58) + 1;
        v15 = v57;
        v16 = *v12;
        *v12 = 0;
        *((_QWORD *)v15 + v13) = v16;
        HIDWORD(v58) = v14;
        if (!(_BYTE)v64)
          goto LABEL_16;
      }
      else
      {
        v17 = v63;
        v63 = 0;
        *((_QWORD *)v57 + HIDWORD(v58)) = v17;
        HIDWORD(v58) = v11 + 1;
      }
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v63, a2);
LABEL_16:
      if (!--v10)
      {
        v18 = v57;
        v19 = v58;
        goto LABEL_19;
      }
    }
  }
  while (1)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>>(&v63, a1);
    if (!(_BYTE)v64)
      break;
    v20 = HIDWORD(v58);
    if (HIDWORD(v58) == (_DWORD)v58)
    {
      v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, HIDWORD(v58) + 1, (unint64_t)&v63);
      v22 = HIDWORD(v58);
      v23 = HIDWORD(v58) + 1;
      v24 = v57;
      v25 = *v21;
      *v21 = 0;
      *((_QWORD *)v24 + v22) = v25;
      HIDWORD(v58) = v23;
      if (!(_BYTE)v64)
        goto LABEL_26;
    }
    else
    {
      v26 = v63;
      v63 = 0;
      *((_QWORD *)v57 + HIDWORD(v58)) = v26;
      HIDWORD(v58) = v20 + 1;
    }
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v63, a2);
LABEL_26:
    if (!--v10)
    {
      v53 = v57;
      if (v58 > HIDWORD(v58))
      {
        if (HIDWORD(v58))
        {
          LODWORD(v58) = HIDWORD(v58);
          v53 = (WTF *)WTF::fastRealloc(v57, (void *)(8 * HIDWORD(v58)));
        }
        else if (v57)
        {
          v57 = 0;
          LODWORD(v58) = 0;
          WTF::fastFree(v53, a2);
          v53 = v57;
        }
      }
      v60 = v53;
      v54 = v58;
      v57 = 0;
      v58 = 0;
      v61 = v54;
      goto LABEL_20;
    }
  }
LABEL_28:
  LOBYTE(v60) = 0;
  v62 = 0;
  WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, a2);
LABEL_29:
  v27 = (void *)*a1;
  v28 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    goto LABEL_46;
LABEL_30:
  while (2)
  {
    v30 = IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterRenderingMode>>(a1);
    v31 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v33 = v32;
    v63 = v31;
    v64 = v32;
    v34 = (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v36 = v35;
    if (!v35)
    {
      v46 = *a1;
      v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v48 = a1[3];
      if (v48)
      {
        if (v47)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v37 = v27;
    if (!(_BYTE)v27)
    {
      v27 = (void *)*a1;
      v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49)
      {
        if (v28)
        {
          v55 = result;
          (*(void (**)(unint64_t, void *))(*(_QWORD *)v49 + 16))(v49, v27);
          v37 = 0;
          result = v55;
        }
      }
    }
    v38 = *a1;
    if (*a1)
    {
      if (v36 && v37)
      {
        v57 = v34;
        v58 = result;
        v59 = 1;
LABEL_36:
        if (v62 && v30 > 0xFFu && v33 && v38)
        {
          WebCore::CSSFilter::create();
          v39 = v56;
          v56 = 0;
          *(_QWORD *)a3 = v39;
          *(_BYTE *)(a3 + 8) = 1;
          result = (uint64_t)WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v56, v40);
          v41 = 0;
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_46:
      if (v28)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v27);
      continue;
    }
    break;
  }
  LOBYTE(v57) = 0;
  v59 = 0;
  v50 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v50)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      v38 = 0;
      if (*a1)
        goto LABEL_36;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v41 = 1;
LABEL_41:
  if (v62)
    result = WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v27);
  if (v41)
  {
    v51 = *a1;
    v52 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v52)
        return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v51);
    }
  }
  return result;
}

void sub_196E83CEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(_BYTE *)(v6 - 56))
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)(v6 - 64), a2);
  WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Ref<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SVGFilter,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef **v7;
  CFTypeRef *v8;
  char v9;
  CFTypeRef *v10;
  int v11;
  IPC::Encoder *v12;
  CFTypeRef *v13;
  char v14;
  int v15;
  int v16;
  __int128 v18;

  v4 = *(unsigned int *)(a2 + 92);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(CFTypeRef ***)(a2 + 80);
    do
    {
      v8 = *v7;
      switch(*((_BYTE *)*v7 + 48))
      {
        case 1:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 0;
          IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(a1, (uint64_t)v8);
          break;
        case 2:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 1;
          v9 = *((_BYTE *)v8 + 64);
          *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
          goto LABEL_24;
        case 3:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 2;
          IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(a1, (uint64_t)v8);
          break;
        case 4:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 3;
          IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(a1, (uint64_t)v8);
          break;
        case 5:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 4;
          IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(a1, (uint64_t)v8);
          break;
        case 6:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 5;
          IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(a1, (uint64_t)v8);
          break;
        case 7:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 6;
          IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(a1, (uint64_t)v8);
          break;
        case 8:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 7;
          IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(a1, (uint64_t)v8);
          break;
        case 9:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 8;
          IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(a1, (uint64_t)v8);
          break;
        case 0xA:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 9;
          IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(a1, (uint64_t)v8);
          break;
        case 0xB:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 10;
          IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(a1, (uint64_t)v8);
          break;
        case 0xC:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 11;
          IPC::ArgumentCoder<WebCore::FEImage,void>::encode(a1, (uint64_t)v8);
          break;
        case 0xD:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 12;
          v10 = v8 + 7;
          v11 = (*((uint64_t (**)(CFTypeRef *))*v8 + 12))(v8);
          *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
          v12 = a1;
          v13 = v10;
          goto LABEL_25;
        case 0xE:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 13;
          IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(a1, (uint64_t)v8);
          break;
        case 0xF:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 14;
          IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(a1, (uint64_t)v8);
          break;
        case 0x10:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 15;
          IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(a1, (uint64_t)v8);
          break;
        case 0x11:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 16;
          goto LABEL_24;
        case 0x12:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 17;
          IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(a1, (uint64_t)v8);
          break;
        case 0x13:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 18;
          goto LABEL_24;
        case 0x14:
          *IPC::Encoder::grow(a1, 1uLL, 1) = 19;
LABEL_24:
          v13 = v8 + 7;
          v12 = a1;
LABEL_25:
          IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v12, v13);
          break;
        default:
          break;
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  v14 = *(_BYTE *)(a2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *(_DWORD *)(a2 + 52);
  v16 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v16;
  v18 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v18);
}

uint64_t *IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  CFTypeRef **v14;
  CFTypeRef *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  __int128 v39;

  v4 = *(unsigned int *)(a2 + 92);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
      if (!(_DWORD)v4)
        goto LABEL_90;
      goto LABEL_9;
    }
    *(_QWORD *)(*a1 + v10) = v4;
    a1[2] = v11;
    v4 = *(unsigned int *)(a2 + 92);
    v5 = v11;
  }
  if (!(_DWORD)v4)
    goto LABEL_90;
LABEL_9:
  v13 = 8 * v4;
  v14 = *(CFTypeRef ***)(a2 + 80);
  while (2)
  {
    v15 = *v14;
    switch(*((_BYTE *)*v14 + 48))
    {
      case 1:
        v16 = a1[2];
        if (v16 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v16) = 0;
          a1[2] = v16 + 1;
        }
        IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 2:
        v17 = a1[2];
        if (v17 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v17) = 1;
          a1[2] = v17 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEBlend,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 3:
        v18 = a1[2];
        if (v18 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v18) = 2;
          a1[2] = v18 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 4:
        v19 = a1[2];
        if (v19 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v19) = 3;
          a1[2] = v19 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 5:
        v20 = a1[2];
        if (v20 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v20) = 4;
          a1[2] = v20 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEComposite,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 6:
        v21 = a1[2];
        if (v21 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v21) = 5;
          a1[2] = v21 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 7:
        v22 = a1[2];
        if (v22 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v22) = 6;
          a1[2] = v22 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 8:
        v23 = a1[2];
        if (v23 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v23) = 7;
          a1[2] = v23 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 9:
        v24 = a1[2];
        if (v24 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v24) = 8;
          a1[2] = v24 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xA:
        v25 = a1[2];
        if (v25 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v25) = 9;
          a1[2] = v25 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xB:
        v26 = a1[2];
        if (v26 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v26) = 10;
          a1[2] = v26 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xC:
        v27 = a1[2];
        if (v27 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v27) = 11;
          a1[2] = v27 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEImage,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xD:
        v28 = a1[2];
        if (v28 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v28) = 12;
          a1[2] = v28 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEMerge,void>::encode((WTF::StringImpl *)a1, v15);
        goto LABEL_70;
      case 0xE:
        v29 = a1[2];
        if (v29 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v29) = 13;
          a1[2] = v29 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xF:
        v30 = a1[2];
        if (v30 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v30) = 14;
          a1[2] = v30 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEOffset,void>::encode((WTF::StringImpl *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x10:
        v31 = a1[2];
        if (v31 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v31) = 15;
          a1[2] = v31 + 1;
        }
        IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x11:
        v32 = a1[2];
        if (v32 >= a1[1])
          goto LABEL_72;
        v33 = v32 + 1;
        *(_BYTE *)(*a1 + v32) = 16;
        goto LABEL_68;
      case 0x12:
        v34 = a1[2];
        if (v34 >= a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v34) = 17;
          a1[2] = v34 + 1;
        }
        IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x13:
        v35 = a1[2];
        if (v35 >= a1[1])
          goto LABEL_72;
        v33 = v35 + 1;
        *(_BYTE *)(*a1 + v35) = 18;
        goto LABEL_68;
      case 0x14:
        v36 = a1[2];
        if (v36 >= a1[1])
        {
LABEL_72:
          a1[1] = 0;
        }
        else
        {
          v33 = v36 + 1;
          *(_BYTE *)(*a1 + v36) = 19;
LABEL_68:
          a1[2] = v33;
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, v15 + 7);
LABEL_70:
        ++v14;
        v13 -= 8;
        if (v13)
          continue;
        v5 = a1[2];
        break;
      default:
        goto LABEL_70;
    }
    break;
  }
LABEL_90:
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 49);
    a1[2] = v5 + 1;
  }
  *(_QWORD *)&v39 = *(_QWORD *)(a2 + 52);
  v37 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v39);
  v39 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(v37, &v39);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterRenderingMode>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 8)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  IPC::Encoder *v6;
  __int128 v8;

  v8 = *(_OWORD *)(a2 + 76);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v8);
  v4 = *(_BYTE *)(a2 + 92);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  v8 = *(_OWORD *)(a2 + 32);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t *)&v8);
  v5 = *(_BYTE *)(a2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  *(_QWORD *)&v8 = *(_QWORD *)(a2 + 52);
  v6 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)&v8);
  v8 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, (int *)&v8);
}

uint64_t *IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  CFTypeRef **v36;
  uint64_t v37;
  CFTypeRef *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  __int128 v64;

  v64 = *(_OWORD *)(a2 + 76);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v64);
  v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4++) = *(_BYTE *)(a2 + 92);
    a1[2] = v4;
  }
  v5 = *(unsigned int *)(a2 + 108);
  v6 = *a1 + v4;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v4;
    v11 = v9 + v4 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v10) = v5;
      a1[2] = v11;
      v5 = *(unsigned int *)(a2 + 108);
      v4 = v11;
    }
  }
  if ((_DWORD)v5)
  {
    v13 = 32 * v5;
    v14 = (_BYTE *)(*(_QWORD *)(a2 + 96) + 28);
    while (1)
    {
      v16 = a1[1];
      v15 = a1[2];
      v17 = *a1;
      v18 = *a1 + v15;
      v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v19 >= v18;
      v20 = v19 - v18;
      if (v8)
      {
        v21 = v20 + v15;
        v22 = v20 + v15 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v16)
        {
          v16 = 0;
          a1[1] = 0;
        }
        else
        {
          *(_DWORD *)(v17 + v21) = *((_DWORD *)v14 - 7);
          a1[2] = v22;
          v17 = *a1;
          v16 = a1[1];
          v15 = v22;
        }
      }
      v24 = (v17 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 - (v17 + v15);
      if (v24 >= v17 + v15)
      {
        v26 = v24 - v17;
        v27 = v25 + v15 + 4;
        if (v26 > 0xFFFFFFFFFFFFFFFBLL || v27 > v16)
        {
          v16 = 0;
          a1[1] = 0;
        }
        else
        {
          *(_DWORD *)(v17 + v26) = *((_DWORD *)v14 - 6);
          a1[2] = v27;
          v16 = a1[1];
          v15 = v27;
        }
      }
      if (*v14)
      {
        if (v15 >= v16)
        {
          a1[1] = 0;
        }
        else
        {
          *(_BYTE *)(*a1 + v15) = 1;
          a1[2] = v15 + 1;
          if (!*v14)
          {
            v62 = (unint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
            return (uint64_t *)IPC::ArgumentCoder<WebCore::SVGFilter,void>::decode(v62, v63);
          }
        }
        IPC::ArgumentCoder<WebCore::DisplayList::FillRect,void>::encode(a1, (uint64_t)(v14 - 20));
      }
      else if (v15 >= v16)
      {
        a1[1] = 0;
      }
      else
      {
        *(_BYTE *)(*a1 + v15) = 0;
        a1[2] = v15 + 1;
      }
      v14 += 32;
      v13 -= 32;
      if (!v13)
      {
        v4 = a1[2];
        break;
      }
    }
  }
  v29 = *(unsigned int *)(a2 + 124);
  v30 = *a1 + v4;
  v31 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v31 >= v30;
  v32 = v31 - v30;
  if (v8)
  {
    v33 = v32 + v4;
    v34 = v33 + 8;
    if (v33 > 0xFFFFFFFFFFFFFFF7 || v34 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v33) = v29;
      a1[2] = v34;
      v29 = *(unsigned int *)(a2 + 124);
    }
  }
  if ((_DWORD)v29)
  {
    v36 = *(CFTypeRef ***)(a2 + 112);
    v37 = 8 * v29;
    while (2)
    {
      v38 = *v36;
      switch(*((_BYTE *)*v36 + 48))
      {
        case 2:
          v48 = a1[2];
          if (v48 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v48) = 0;
            a1[2] = v48 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEBlend,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 3:
          v39 = a1[2];
          if (v39 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v39) = 1;
            a1[2] = v39 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 4:
          v49 = a1[2];
          if (v49 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v49) = 2;
            a1[2] = v49 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 5:
          v50 = a1[2];
          if (v50 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v50) = 3;
            a1[2] = v50 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEComposite,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 6:
          v51 = a1[2];
          if (v51 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v51) = 4;
            a1[2] = v51 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 7:
          v52 = a1[2];
          if (v52 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v52) = 5;
            a1[2] = v52 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 8:
          v53 = a1[2];
          if (v53 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v53) = 6;
            a1[2] = v53 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 9:
          v54 = a1[2];
          if (v54 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v54) = 7;
            a1[2] = v54 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 0xA:
          v55 = a1[2];
          if (v55 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v55) = 8;
            a1[2] = v55 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 0xB:
          v40 = a1[2];
          if (v40 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v40) = 9;
            a1[2] = v40 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 0xC:
          v56 = a1[2];
          if (v56 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v56) = 10;
            a1[2] = v56 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEImage,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 0xD:
          v57 = a1[2];
          if (v57 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v57) = 11;
            a1[2] = v57 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEMerge,void>::encode((WTF::StringImpl *)a1, v38);
          goto LABEL_55;
        case 0xE:
          v58 = a1[2];
          if (v58 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v58) = 12;
            a1[2] = v58 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 0xF:
          v41 = a1[2];
          if (v41 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v41) = 13;
            a1[2] = v41 + 1;
          }
          IPC::ArgumentCoder<WebCore::FEOffset,void>::encode((WTF::StringImpl *)a1, (uint64_t)v38);
          goto LABEL_55;
        case 0x10:
          v60 = a1[2];
          if (v60 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v60) = 15;
            a1[2] = v60 + 1;
          }
          IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 0x11:
          v59 = a1[2];
          if (v59 >= a1[1])
            goto LABEL_106;
          v43 = v59 + 1;
          *(_BYTE *)(*a1 + v59) = 14;
          goto LABEL_53;
        case 0x12:
          v61 = a1[2];
          if (v61 >= a1[1])
          {
            a1[1] = 0;
          }
          else
          {
            *(_BYTE *)(*a1 + v61) = 16;
            a1[2] = v61 + 1;
          }
          IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(a1, (uint64_t)v38);
          goto LABEL_55;
        case 0x13:
          v42 = a1[2];
          if (v42 >= a1[1])
            goto LABEL_106;
          v43 = v42 + 1;
          *(_BYTE *)(*a1 + v42) = 17;
          goto LABEL_53;
        case 0x14:
          v44 = a1[2];
          if (v44 >= a1[1])
          {
LABEL_106:
            a1[1] = 0;
          }
          else
          {
            v43 = v44 + 1;
            *(_BYTE *)(*a1 + v44) = 18;
LABEL_53:
            a1[2] = v43;
          }
          IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, v38 + 7);
LABEL_55:
          ++v36;
          v37 -= 8;
          if (!v37)
            break;
          continue;
        default:
          goto LABEL_55;
      }
      break;
    }
  }
  v64 = *(_OWORD *)(a2 + 32);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v64);
  v45 = a1[2];
  if (v45 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v45) = *(_BYTE *)(a2 + 49);
    a1[2] = v45 + 1;
  }
  *(_QWORD *)&v64 = *(_QWORD *)(a2 + 52);
  v46 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v64);
  v64 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(v46, &v64);
}

WTF *IPC::ArgumentCoder<WebCore::SVGFilter,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unsigned __int8 *v14;
  char *v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  _OWORD *v19;
  __int128 v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v29;
  unint64_t v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  unsigned __int8 v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  WTF *result;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  _OWORD *v80;
  __int128 v81;
  WTF *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  int v96;
  WTF *v97;
  uint64_t v98;
  char v99;
  WTF *v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  _QWORD *v104;
  char v105;
  __int128 v106;
  __int128 v107;
  char v108;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v50 = *a1;
    v51 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52 && v51 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v52 + 16))(v52, v50);
  }
  v7 = (_QWORD *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v8;
  if (!v8)
  {
    v54 = *a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56)
    {
      if (v55)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
    }
  }
  v10 = *a1;
  v90 = a2;
  if (*a1)
  {
    if (!v6 || !v9)
      goto LABEL_69;
    v103 = v4;
    v104 = v7;
    v105 = 1;
    v11 = v10;
  }
  else
  {
    LOBYTE(v103) = 0;
    v105 = 0;
    v57 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (!v58)
    {
      v11 = 0;
      v12 = 0;
      v7 = a1 + 2;
      v13 = a1 + 1;
LABEL_85:
      *a1 = 0;
      a1[1] = 0;
      v59 = a1[3];
      if (v59)
      {
        if (v12)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v59 + 16))(v59, v11);
          v60 = *a1;
          v12 = a1[1];
        }
        else
        {
          v60 = 0;
        }
      }
      else
      {
        v60 = 0;
        v12 = 0;
      }
LABEL_87:
      *a1 = 0;
      a1[1] = 0;
      v61 = a1[3];
      if (v61 && v12)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v61 + 16))(v61, v60);
        v47 = *v13;
      }
      else
      {
        v47 = 0;
      }
      goto LABEL_66;
    }
    if (!v57)
    {
      v13 = a1 + 1;
      v12 = a1[1];
      v7 = a1 + 2;
      v78 = a1[2];
      if (v12 > v78)
      {
        v60 = 0;
        *v7 = v78 + 1;
        goto LABEL_87;
      }
      v11 = 0;
      goto LABEL_85;
    }
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 0);
    v11 = *a1;
  }
  v13 = a1 + 1;
  v12 = a1[1];
  v7 = a1 + 2;
  if (v12 <= a1[2] - v11)
    goto LABEL_85;
  v14 = (unsigned __int8 *)a1[2];
  *v7 = v14 + 1;
  if (!v11)
  {
    v60 = 0;
    goto LABEL_87;
  }
  if (*v14 < 3u)
  {
    LODWORD(a2) = 0;
    goto LABEL_11;
  }
  v47 = v12;
LABEL_66:
  v48 = *a1;
  *a1 = 0;
  a1[1] = 0;
  v49 = a1[3];
  if (v49 && v47)
  {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v48, v47);
    v12 = *v13;
  }
  else
  {
    v12 = 0;
  }
  LODWORD(a2) = 1;
LABEL_11:
  v15 = (char *)*a1;
  v16 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v12 < v16 || v12 - v16 <= 7)
  {
    v62 = 0;
    v63 = 0;
    *a1 = 0;
    a1[1] = 0;
    v64 = a1[3];
    if (v64)
    {
      if (v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v64 + 16))(v64);
        v63 = *a1;
        v62 = a1[1];
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
    }
    goto LABEL_90;
  }
  v17 = (unint64_t *)&v15[v16];
  *v7 = v17 + 1;
  if (!v15)
  {
    v62 = v12;
    v63 = 0;
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65 && v62)
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v62);
    v24 = 0;
    LOBYTE(v100) = 0;
    v102 = 0;
    goto LABEL_92;
  }
  v6 = (unint64_t)&v106;
  v9 = *v17;
  v97 = 0;
  v98 = 0;
  if (v9 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::SVGFilterExpressionTerm>((uint64_t)&v106, a1);
      if (!v108)
        goto LABEL_139;
      if (HIDWORD(v98) == (_DWORD)v98)
      {
        WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGFilterExpressionTerm>((uint64_t)&v97, (unint64_t)&v106);
      }
      else
      {
        v79 = HIDWORD(v98) + 1;
        v80 = (_OWORD *)((char *)v97 + 32 * HIDWORD(v98));
        v81 = v107;
        *v80 = v106;
        v80[1] = v81;
        HIDWORD(v98) = v79;
      }
      --v9;
    }
    while (v9);
    WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v97, HIDWORD(v98));
    v23 = 0;
    v82 = v97;
    v97 = 0;
    v100 = v82;
    v101 = v98;
    goto LABEL_23;
  }
  if (!v9)
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_22;
  }
  LODWORD(v98) = v9;
  v97 = (WTF *)WTF::fastMalloc((WTF *)(32 * v9));
LABEL_17:
  IPC::Decoder::decode<WebCore::SVGFilterExpressionTerm>((uint64_t)&v106, a1);
  if (v108)
  {
    if (HIDWORD(v98) != (_DWORD)v98)
    {
      v18 = HIDWORD(v98) + 1;
      v19 = (_OWORD *)((char *)v97 + 32 * HIDWORD(v98));
      v20 = *(_OWORD *)(v6 + 16);
      *v19 = v106;
      v19[1] = v20;
      HIDWORD(v98) = v18;
      goto LABEL_20;
    }
    goto LABEL_70;
  }
LABEL_139:
  v24 = 0;
  LOBYTE(v100) = 0;
  v102 = 0;
  v23 = 1;
  while (1)
  {
    if (v97)
      WTF::fastFree(v97, v15);
    if (v23)
    {
LABEL_92:
      v15 = (char *)*a1;
      v66 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v67 = a1[3];
      if (v67 && v66)
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v67 + 16))(v67, v15);
    }
    v25 = a1[1];
    v26 = *a1;
    v27 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v25 >= v27 && v25 - v27 > 7)
    {
      v29 = (unint64_t *)(v26 + v27);
      *v7 = v29 + 1;
      if (!v26)
      {
        v68 = v25;
        v69 = 0;
        goto LABEL_96;
      }
      v30 = *v29;
      v97 = 0;
      v98 = 0;
      if (v30 < 0x20000)
      {
        if (!v30)
        {
          v34 = 0;
          v35 = 0;
LABEL_42:
          v97 = 0;
          v98 = 0;
          *(_QWORD *)&v106 = v34;
          *((_QWORD *)&v106 + 1) = v35;
LABEL_43:
          LOBYTE(v107) = 1;
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v15);
          goto LABEL_44;
        }
        v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * v30));
        LODWORD(v98) = v30;
        v97 = v31;
        while (1)
        {
          IPC::Decoder::decode<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>(&v92, (uint64_t *)a1);
          if (!(_BYTE)v93)
            goto LABEL_147;
          v32 = HIDWORD(v98);
          if (HIDWORD(v98) == (_DWORD)v98)
          {
            WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v97, (unint64_t)&v92);
            if (!(_BYTE)v93)
              goto LABEL_40;
          }
          else
          {
            v33 = v92;
            v92 = 0;
            *((_QWORD *)v97 + HIDWORD(v98)) = v33;
            HIDWORD(v98) = v32 + 1;
          }
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref((uint64_t *)&v92, v15);
LABEL_40:
          if (!--v30)
          {
            v34 = v97;
            v35 = v98;
            goto LABEL_42;
          }
        }
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>(&v92, (uint64_t *)a1);
        if (!(_BYTE)v93)
        {
LABEL_147:
          LOBYTE(v106) = 0;
          LOBYTE(v107) = 0;
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v15);
          goto LABEL_148;
        }
        v83 = HIDWORD(v98);
        if (HIDWORD(v98) == (_DWORD)v98)
        {
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v97, (unint64_t)&v92);
          if (!(_BYTE)v93)
            goto LABEL_145;
        }
        else
        {
          v84 = v92;
          v92 = 0;
          *((_QWORD *)v97 + HIDWORD(v98)) = v84;
          HIDWORD(v98) = v83 + 1;
        }
        WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref((uint64_t *)&v92, v15);
LABEL_145:
        if (!--v30)
        {
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t *)&v97, HIDWORD(v98));
          *(_QWORD *)&v106 = v97;
          v85 = v98;
          v97 = 0;
          v98 = 0;
          *((_QWORD *)&v106 + 1) = v85;
          goto LABEL_43;
        }
      }
    }
    v68 = 0;
    v69 = 0;
    *a1 = 0;
    a1[1] = 0;
    v70 = a1[3];
    if (v70)
    {
      if (v25)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v70 + 16))(v70, v26, v25);
        v69 = *a1;
        v68 = a1[1];
      }
      else
      {
        v68 = 0;
        v69 = 0;
      }
    }
LABEL_96:
    *a1 = 0;
    a1[1] = 0;
    v71 = a1[3];
    if (v71 && v68)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v71 + 16))(v71, v69);
    LOBYTE(v106) = 0;
    LOBYTE(v107) = 0;
LABEL_148:
    v86 = *a1;
    v87 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v88 = a1[3];
    if (v88 && v87)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v88 + 16))(v88, v86);
LABEL_44:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a1, &v97);
    v7 = (_QWORD *)IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterRenderingMode>>(a1);
    v36 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v6 = (unint64_t)v37;
    v95 = v36;
    v96 = (int)v37;
    v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v39 = v38;
    if (!v38)
    {
      v72 = *a1;
      v73 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v74 = a1[3];
      if (v74)
      {
        if (v73)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v74 + 16))(v74, v72);
      }
    }
    v40 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v42 = v41;
    if (!(_BYTE)v41)
    {
      v41 = (void *)*a1;
      v75 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v76 = a1[3];
      if (v76)
      {
        if (v75)
        {
          v89 = v40;
          (*(void (**)(unint64_t, void *))(*(_QWORD *)v76 + 16))(v76, v41);
          v40 = v89;
        }
      }
    }
    v43 = *a1;
    if (!*a1)
      break;
    if (!v39 || !v42)
      goto LABEL_69;
    v92 = v9;
    v93 = v40;
    v94 = 1;
LABEL_50:
    if (v10 && !(_DWORD)a2 && v24 && (_BYTE)v107 && v99 && (unsigned __int16)v7 > 0xFFu && (_BYTE)v6 && v43)
    {
      WebCore::SVGFilter::create();
      v44 = v91;
      v91 = 0;
      *(_QWORD *)v90 = v44;
      *(_BYTE *)(v90 + 8) = 1;
      result = (WTF *)WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v91, v45);
      goto LABEL_59;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGFilterExpressionTerm>((uint64_t)&v97, (unint64_t)&v106);
LABEL_20:
    if (--v9)
      goto LABEL_17;
    v21 = v97;
    v22 = v98;
LABEL_22:
    v23 = 0;
    v97 = 0;
    v100 = v21;
    v101 = v22;
LABEL_23:
    v24 = 1;
    v102 = 1;
  }
  LOBYTE(v92) = 0;
  v94 = 0;
  v77 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
  {
    if (v77)
    {
      v9 = 0;
      result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      v43 = 0;
      if (*a1)
        goto LABEL_50;
    }
  }
  *(_BYTE *)v90 = 0;
  *(_BYTE *)(v90 + 8) = 0;
LABEL_59:
  if ((_BYTE)v107)
    result = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v41);
  if (v102)
  {
    result = v100;
    if (v100)
    {
      v100 = 0;
      LODWORD(v101) = 0;
      return (WTF *)WTF::fastFree(result, v41);
    }
  }
  return result;
}

void sub_196E85800()
{
  JUMPOUT(0x196E85674);
}

void IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(IPC::Encoder *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  int v4;
  int v5;
  const void *v6;
  size_t v7;

  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, (uint64_t)a2 + 16);
  v4 = *((_DWORD *)a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *((_DWORD *)a2 + 9);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = (const void *)WebCore::ByteArrayPixelBuffer::span(a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v6, v7);
}

_QWORD *IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(WTF::StringImpl *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  unint64_t v14;
  const void *v16;
  size_t v17;

  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, (uint64_t)a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *(_QWORD *)a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *((_DWORD *)a2 + 8);
      *((_QWORD *)a1 + 2) = v11;
      v4 = *(_QWORD *)a1;
      v5 = v11;
    }
  }
  v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *v13 = *((_DWORD *)a2 + 9);
      *((_QWORD *)a1 + 2) = v14;
    }
  }
  v16 = (const void *)WebCore::ByteArrayPixelBuffer::span(a2);
  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v16, v17);
}

void IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  _BYTE v17[8];
  CFTypeRef cf;
  char v19;

  IPC::Decoder::decode<WebCore::PixelBufferFormat>(a1, (uint64_t)v17);
  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  v6 = v5;
  if (!(_BYTE)v5)
    goto LABEL_12;
  while (1)
  {
    v15 = v4;
    v16 = v5;
    v4 = (unint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v13);
    if (!*a1)
      break;
    if (v19 && v6 && v14)
    {
      WebCore::ByteArrayPixelBuffer::create();
      goto LABEL_7;
    }
    __break(1u);
LABEL_12:
    v9 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v8)
    {
      v11 = v5;
      v12 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
      v5 = v11;
      v4 = v12;
    }
  }
  *a2 = 0;
  a2[8] = 0;
LABEL_7:
  if (v19)
  {
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
  }
}

void sub_196E85A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a18)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::PixelBufferFormat>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MarkupExclusionRule,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  unsigned int v14;
  WTF::StringImpl *result;
  void *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF *v26;
  unint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;

  IPC::Decoder::decode<WTF::AtomString>(a1, &v29);
  v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
LABEL_20:
    v16 = (void *)*a1;
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v20)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v16);
    if (!*a1)
      goto LABEL_41;
    if (v30)
    {
      v29 = 0;
      __break(1u);
      goto LABEL_24;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    goto LABEL_26;
  }
  v6 = v4;
  v34 = 0;
  v35 = 0;
  if (v4 >= 0x10000)
  {
    do
    {
      IPC::Decoder::decode<std::pair<WTF::AtomString,WTF::AtomString>>((uint64_t)&v31, a1);
      if (!(_BYTE)v33)
      {
        LOBYTE(v26) = 0;
        v28 = 0;
        goto LABEL_19;
      }
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v34, (unint64_t)&v31);
      }
      else
      {
        v21 = HIDWORD(v35) + 1;
        v22 = (WTF::StringImpl **)((char *)v34 + 16 * HIDWORD(v35));
        v23 = v31;
        v31 = 0;
        *v22 = v23;
        v24 = v32;
        v32 = 0;
        v22[1] = v24;
        HIDWORD(v35) = v21;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
      --v6;
    }
    while (v6);
    v25 = v34;
    if (v35 > HIDWORD(v35))
    {
      if (HIDWORD(v35))
      {
        LODWORD(v35) = HIDWORD(v35);
        v25 = (WTF *)WTF::fastRealloc(v34, (void *)(16 * HIDWORD(v35)));
      }
      else if (v34)
      {
        v34 = 0;
        LODWORD(v35) = 0;
        WTF::fastFree(v25, v5);
        v25 = v34;
      }
    }
    v34 = 0;
    v26 = v25;
    LODWORD(v6) = v35;
    v14 = HIDWORD(v35);
  }
  else
  {
    if (v4)
    {
      v7 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
      LODWORD(v35) = v6;
      v34 = v7;
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::AtomString,WTF::AtomString>>((uint64_t)&v31, a1);
        if (!(_BYTE)v33)
          break;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v34, (unint64_t)&v31);
        }
        else
        {
          v9 = HIDWORD(v35) + 1;
          v10 = (WTF::StringImpl **)((char *)v34 + 16 * HIDWORD(v35));
          v11 = v31;
          v31 = 0;
          *v10 = v11;
          v12 = v32;
          v32 = 0;
          v10[1] = v12;
          HIDWORD(v35) = v9;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
        if (!--v6)
        {
          v13 = v34;
          LODWORD(v6) = v35;
          v14 = HIDWORD(v35);
          goto LABEL_12;
        }
      }
      LOBYTE(v26) = 0;
LABEL_19:
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v19);
      goto LABEL_20;
    }
    v14 = 0;
    v13 = 0;
LABEL_12:
    v34 = 0;
    v26 = v13;
  }
  v35 = 0;
  v27 = __PAIR64__(v14, v6);
  v28 = 1;
  result = (WTF::StringImpl *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v5);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    goto LABEL_25;
  }
  if (!v30)
    goto LABEL_40;
  v17 = v29;
  v29 = 0;
  v18 = v26;
  v26 = 0;
  v27 = 0;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v18;
  v33 = 0;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v14;
  *(_BYTE *)(a2 + 24) = 1;
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v16);
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
LABEL_24:
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      goto LABEL_25;
    }
    *(_DWORD *)result -= 2;
  }
LABEL_25:
  result = (WTF::StringImpl *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v16);
LABEL_26:
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E85D94(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void *v20;
  WTF::StringImpl *v21;

  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 - 48, v20);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v21);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(char *this, WebCore::ARKitBadgeSystemImage *a2)
{
  IPC::Encoder *v3;
  char v4;

  v3 = (IPC::Encoder *)this;
  if (*((_BYTE *)a2 + 12) == 1)
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 1;
    return IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(v3, a2);
  }
  else if (!*((_BYTE *)a2 + 12))
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 0;
    v4 = *((_BYTE *)a2 + 13);
    this = IPC::Encoder::grow(v3, 1uLL, 1);
    *this = v4;
  }
  return this;
}

uint64_t *IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(uint64_t *a1, WebCore::ARKitBadgeSystemImage *this)
{
  unint64_t v2;
  unint64_t v3;

  if (*((_BYTE *)this + 12) == 1)
  {
    v3 = a1[2];
    if (v3 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v3) = 1;
      a1[2] = v3 + 1;
    }
    return IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(a1, this);
  }
  else if (!*((_BYTE *)this + 12))
  {
    v2 = a1[2];
    if (v2 >= a1[1] || (*(_BYTE *)(*a1 + v2) = 0, a1[2] = v2 + 1, v2 + 1 >= a1[1]))
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v2 + 1) = *((_BYTE *)this + 13);
      a1[2] = v2 + 2;
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<WebCore::SystemImage,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v38;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_22;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v22 = v4;
    v23 = 0;
LABEL_22:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_23;
  }
  v9 = *v7;
  if (v9 >= 2)
  {
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v4)
      result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_31;
  }
  if (v9 == 1)
  {
    v13 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    v14 = a1[1];
    if (v14 < v13 || v14 - v13 <= 7)
    {
      v32 = 0;
      v33 = 0;
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (!result)
        goto LABEL_33;
      goto LABEL_49;
    }
    v16 = (uint64_t *)(v5 + v13);
    v17 = *v16;
    a1[2] = (unint64_t)(v16 + 1);
    if ((unint64_t)(v17 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v32 = v14;
      v33 = v5;
      goto LABEL_33;
    }
    v18 = 0;
    goto LABEL_16;
  }
  v38 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v38);
  if (!HIBYTE(v38))
  {
    v27 = *a1;
    v26 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v26)
      {
        result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v27);
        if (*a1)
          goto LABEL_48;
      }
    }
    goto LABEL_27;
  }
  if (!*a1)
  {
LABEL_27:
    v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result || !v29)
      goto LABEL_31;
    v30 = *(uint64_t (**)(void))(*(_QWORD *)result + 16);
LABEL_47:
    result = v30();
    v14 = *a1;
    if (!*a1)
    {
LABEL_31:
      *a2 = 0;
      a2[8] = 0;
      return result;
    }
    while (1)
    {
LABEL_48:
      while (1)
      {
        __break(1u);
LABEL_49:
        if (v14)
          break;
        v32 = 0;
        v33 = 0;
LABEL_33:
        *a1 = 0;
        a1[1] = 0;
        v34 = a1[3];
        if (v34 && v32)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
        v17 = 0;
        v18 = 1;
LABEL_16:
        result = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
        v14 = *a1;
        if (!*a1)
        {
          v31 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          result = a1[3];
          if (result && v31)
          {
            v30 = *(uint64_t (**)(void))(*(_QWORD *)result + 16);
            goto LABEL_47;
          }
          goto LABEL_31;
        }
        if (!v18 && v19)
        {
          v20 = result;
          v21 = HIDWORD(result);
          result = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(result + 8) = 1;
          *(_BYTE *)(result + 12) = 1;
          v12 = MEMORY[0x1E0DD8FB0];
          *(_QWORD *)result = MEMORY[0x1E0DD8FB0] + 16;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v17;
          *(_DWORD *)(result + 32) = v20;
          *(_DWORD *)(result + 36) = v21;
          if (!*a1)
            goto LABEL_8;
          goto LABEL_20;
        }
      }
      (*(void (**)(unint64_t))(*(_QWORD *)result + 16))(result);
      v32 = 0;
      v35 = *a1;
      v36 = a1[1];
      v37 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v33 = 0;
      if (!v37 || !v36)
        goto LABEL_33;
      result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, v35, v36, 0);
      v14 = *a1;
      if (!*a1)
      {
        v33 = 0;
        v32 = a1[1];
        goto LABEL_33;
      }
    }
  }
  v10 = v38;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  v12 = MEMORY[0x1E0DD8FD0];
  *(_QWORD *)result = MEMORY[0x1E0DD8FD0] + 16;
  *(_BYTE *)(result + 13) = v10;
  if (*a1)
  {
LABEL_20:
    *(_QWORD *)a2 = result;
    a2[8] = 1;
  }
  else
  {
LABEL_8:
    *a2 = 0;
    a2[8] = 0;
    return (*(uint64_t (**)(void))(v12 + 24))();
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::SerializedScriptValue::Internals,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t **)(a2 + 16));
  IPC::VectorArgumentCoder<false,std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::VectorArgumentCoder<false,WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  IPC::VectorArgumentCoder<false,WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 56);
}

unsigned int *IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer *this)
{
  unsigned int v3;
  void *v4;

  do
    v3 = __ldaxr((unsigned int *)this);
  while (__stlxr(v3 + 1, (unsigned int *)this));
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(a1, this);
  return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)this, v4);
}

void sub_196E86328(_Unwind_Exception *a1, void *a2)
{
  unsigned int *v2;

  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::SharedBuffer,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  char v8;

  IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a1, &v7);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebCore::SharedBuffer::create();
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
  }
}

void sub_196E863C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, char a12)
{
  if (a12)
  {
    if (a11)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::FilterOperation,void>::encode(IPC::Encoder *this, _BYTE *a2)
{
  IPC::Encoder *v3;
  uint64_t v4;
  char v5;

  v3 = this;
  if (a2[12] - 1 <= 3)
  {
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
    return IPC::Encoder::operator<<<WebCore::BasicColorMatrixFilterOperation const&>(v3, (uint64_t)a2);
  }
  else
  {
    switch(a2[12])
    {
      case 5:
      case 7:
      case 8:
      case 9:
        *IPC::Encoder::grow(this, 1uLL, 1) = 1;
        v4 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v4;
        v5 = a2[12];
        this = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
        *(_BYTE *)this = v5;
        break;
      case 0xA:
        *IPC::Encoder::grow(this, 1uLL, 1) = 2;
        this = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(a2 + 16));
        break;
      case 0xB:
        *IPC::Encoder::grow(this, 1uLL, 1) = 3;
        this = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::DropShadowFilterOperation,void>::encode(v3, (uint64_t)a2);
        break;
      case 0xC:
        this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
        *(_BYTE *)this = 5;
        break;
      case 0xD:
        *IPC::Encoder::grow(this, 1uLL, 1) = 4;
        this = IPC::Encoder::operator<<<WebCore::DefaultFilterOperation const&>(v3, (WebCore::DefaultFilterOperation *)a2);
        break;
      default:
        return this;
    }
  }
  return this;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::BasicColorMatrixFilterOperation const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v2;
  return a1;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::DefaultFilterOperation const&>(IPC::Encoder *a1, WebCore::DefaultFilterOperation *this)
{
  char v3;

  v3 = WebCore::DefaultFilterOperation::representedType(this);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::FilterOperation::Type>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 0xEu;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

char *IPC::ArgumentCoder<WebCore::DropShadowFilterOperation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 16);
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, &v6);
  v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 32));
}

uint64_t WebCore::DropShadowFilterOperation::create@<X0>(WebCore::DropShadowFilterOperation *this@<X0>, const WebCore::IntPoint *a2@<X1>, const Color *a3@<X2>, uint64_t *a4@<X8>)
{
  int v6;
  uint64_t v9;
  uint64_t result;

  v6 = (int)a2;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 12) = 11;
  *(_QWORD *)v9 = MEMORY[0x1E0DD8FE0] + 16;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)this;
  *(_DWORD *)(v9 + 24) = v6;
  result = WebCore::Color::Color((WebCore::Color *)(v9 + 32), a3);
  *a4 = v9;
  return result;
}

void sub_196E86784(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::FilterEffect,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  char *v4;
  char v5;

  switch(*(_BYTE *)(a2 + 48))
  {
    case 2:
      *IPC::Encoder::grow(this, 1uLL, 1) = 0;
      IPC::Encoder::operator<<<WebCore::FEBlend const&>(this, a2);
      return;
    case 3:
      *IPC::Encoder::grow(this, 1uLL, 1) = 1;
      IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(this, a2);
      return;
    case 4:
      *IPC::Encoder::grow(this, 1uLL, 1) = 2;
      IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(this, a2);
      return;
    case 5:
      *IPC::Encoder::grow(this, 1uLL, 1) = 3;
      IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(this, a2);
      return;
    case 6:
      *IPC::Encoder::grow(this, 1uLL, 1) = 4;
      IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(this, a2);
      return;
    case 7:
      *IPC::Encoder::grow(this, 1uLL, 1) = 5;
      IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(this, a2);
      return;
    case 8:
      *IPC::Encoder::grow(this, 1uLL, 1) = 6;
      IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(this, a2);
      return;
    case 9:
      *IPC::Encoder::grow(this, 1uLL, 1) = 7;
      IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(this, a2);
      return;
    case 0xA:
      *IPC::Encoder::grow(this, 1uLL, 1) = 8;
      IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(this, a2);
      return;
    case 0xB:
      *IPC::Encoder::grow(this, 1uLL, 1) = 9;
      IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(this, a2);
      return;
    case 0xC:
      *IPC::Encoder::grow(this, 1uLL, 1) = 10;
      IPC::ArgumentCoder<WebCore::FEImage,void>::encode(this, a2);
      return;
    case 0xD:
      *IPC::Encoder::grow(this, 1uLL, 1) = 11;
      IPC::Encoder::operator<<<WebCore::FEMerge const&>(this, (CFTypeRef *)a2);
      return;
    case 0xE:
      *IPC::Encoder::grow(this, 1uLL, 1) = 12;
      IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(this, a2);
      return;
    case 0xF:
      *IPC::Encoder::grow(this, 1uLL, 1) = 13;
      IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(this, a2);
      return;
    case 0x10:
      *IPC::Encoder::grow(this, 1uLL, 1) = 15;
      IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(this, a2);
      return;
    case 0x11:
      v4 = IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 14;
      goto LABEL_6;
    case 0x12:
      *IPC::Encoder::grow(this, 1uLL, 1) = 16;
      IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(this, a2);
      return;
    case 0x13:
      v4 = IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 17;
      goto LABEL_6;
    case 0x14:
      v4 = IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 18;
LABEL_6:
      *v4 = v5;
      IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(this, (CFTypeRef *)(a2 + 56));
      break;
    default:
      return;
  }
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FEBlend const&>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
  return a1;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FEMerge const&>(IPC::Encoder *a1, CFTypeRef *a2)
{
  CFTypeRef *v3;
  int v4;

  v3 = a2 + 7;
  v4 = (*((uint64_t (**)(CFTypeRef *))*a2 + 12))(a2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, v3);
  return a1;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEBlend,WTF::RawPtrTraits<WebCore::FEBlend>,WTF::DefaultRefDerefTraits<WebCore::FEBlend>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  CFTypeRef v9;
  uint64_t v10;
  void *v11;
  int v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef cf;
  uint64_t v23;
  CFTypeRef v24;
  char v25;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v6;
    v15 = 0;
LABEL_15:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v5);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v24);
    if (!*a2)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*v8 - 1 >= 0x12)
    goto LABEL_16;
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v24);
  if (!*a2)
  {
LABEL_19:
    *a1 = 0;
    a1[8] = 0;
    v12 = 1;
    goto LABEL_9;
  }
  if (!v25)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = v24;
  v24 = 0;
  cf = v9;
  WebCore::FEBlend::create();
  v10 = v23;
  v23 = 0;
  *(_QWORD *)a1 = v10;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v23, v11);
  if (cf)
    CFRelease(cf);
  v12 = 0;
LABEL_9:
  if (v25)
  {
    v13 = v24;
    v24 = 0;
    if (v13)
      CFRelease(v13);
  }
  if (v12)
  {
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v20)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
    }
  }
}

void sub_196E86DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int i;
  void *v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  void *v14;
  CFTypeRef v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef cf;
  uint64_t v26;
  CFTypeRef v27;
  char v28;
  WTF *v29;
  int v30;
  char v31;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_20;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v17 = v6;
    v18 = 0;
    goto LABEL_21;
  }
  if (*v8 >= 5u)
    goto LABEL_22;
  for (i = 0; ; i = 1)
  {
    IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v29, a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v27);
    v11 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_11;
    }
    if (!i && v31 && v28)
      break;
    __break(1u);
LABEL_20:
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_21:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v5);
  }
  v12 = v27;
  v27 = 0;
  cf = v12;
  WebCore::FEColorMatrix::create();
  v13 = v26;
  v26 = 0;
  *(_QWORD *)a1 = v13;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v26, v14);
  if (cf)
    CFRelease(cf);
LABEL_11:
  if (v28)
  {
    v15 = v27;
    v27 = 0;
    if (v15)
      CFRelease(v15);
  }
  if (v31)
  {
    v16 = v29;
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree(v16, v10);
    }
  }
  if (!v11)
  {
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
    }
  }
}

void sub_196E87010(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13, WTF *a14, int a15, int a16, char a17)
{
  if (cf)
    CFRelease(cf);
  if (a13 && a12)
    CFRelease(a12);
  if (a17)
  {
    if (a14)
      WTF::fastFree(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEComponentTransfer,WTF::RawPtrTraits<WebCore::FEComponentTransfer>,WTF::DefaultRefDerefTraits<WebCore::FEComponentTransfer>>>(_BYTE *a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  void *v8;
  CFTypeRef v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  uint64_t v18;
  CFTypeRef v19;
  char v20;
  _BYTE v21[24];
  WTF *v22;
  int v23;
  char v24;
  _BYTE v25[24];
  WTF *v26;
  int v27;
  char v28;
  _BYTE v29[24];
  WTF *v30;
  int v31;
  char v32;
  _BYTE v33[24];
  WTF *v34;
  int v35;
  char v36;

  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v33, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v29, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v25, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v21, a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v19);
  v5 = *a2;
  if (!*a2)
    goto LABEL_30;
  if (!v36 || !v32 || !v28 || !v24 || !v20)
  {
    __break(1u);
LABEL_30:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_9;
  }
  v6 = v19;
  v19 = 0;
  cf = v6;
  WebCore::FEComponentTransfer::create();
  v7 = v18;
  v18 = 0;
  *(_QWORD *)a1 = v7;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v18, v8);
  if (cf)
    CFRelease(cf);
LABEL_9:
  if (v20)
  {
    v9 = v19;
    v19 = 0;
    if (v9)
      CFRelease(v9);
  }
  if (v24)
  {
    v10 = v22;
    if (v22)
    {
      v22 = 0;
      v23 = 0;
      WTF::fastFree(v10, v4);
    }
  }
  if (v28)
  {
    v11 = v26;
    if (v26)
    {
      v26 = 0;
      v27 = 0;
      WTF::fastFree(v11, v4);
    }
  }
  if (v32)
  {
    v12 = v30;
    if (v30)
    {
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v12, v4);
    }
  }
  if (v36 && (v13 = v34) != 0)
  {
    v34 = 0;
    v35 = 0;
    WTF::fastFree(v13, v4);
    if (v5)
      return;
  }
  else if (v5)
  {
    return;
  }
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
  {
    if (v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
  }
}

void sub_196E87228(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,int a32,char a33)
{
  uint64_t v33;
  WTF *v35;

  if (cf)
    CFRelease(cf);
  if (a12 && a11)
    CFRelease(a11);
  if (a19 && a16)
    WTF::fastFree(a16, a2);
  if (a26 && a23)
    WTF::fastFree(a23, a2);
  if (a33 && a30)
    WTF::fastFree(a30, a2);
  if (*(_BYTE *)(v33 - 40))
  {
    v35 = *(WTF **)(v33 - 56);
    if (v35)
    {
      *(_QWORD *)(v33 - 56) = 0;
      *(_DWORD *)(v33 - 48) = 0;
      WTF::fastFree(v35, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEComposite,WTF::RawPtrTraits<WebCore::FEComposite>,WTF::DefaultRefDerefTraits<WebCore::FEComposite>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t v17;
  void *v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  uint64_t v29;
  CFTypeRef v30;
  char v31;
  __int16 v32;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_20;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v20 = v6;
    v21 = 0;
    goto LABEL_21;
  }
  v9 = *v8;
  if (v9 >= 8)
    goto LABEL_22;
  for (i = v9 | 0x100; ; i = 0)
  {
    v32 = i;
    v11 = IPC::Decoder::decode<float>(a2);
    v12 = IPC::Decoder::decode<float>(a2);
    v13 = IPC::Decoder::decode<float>(a2);
    v14 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v30);
    v15 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_14;
    }
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && v31)
    {
      break;
    }
    __break(1u);
LABEL_20:
    v20 = 0;
    v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a2;
        v20 = a2[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_21:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v5);
  }
  v16 = v30;
  v30 = 0;
  cf = v16;
  WebCore::FEComposite::create();
  v17 = v29;
  v29 = 0;
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v29, v18);
  if (cf)
    CFRelease(cf);
LABEL_14:
  if (v31)
  {
    v19 = v30;
    v30 = 0;
    if (v19)
      CFRelease(v19);
  }
  if (!v15)
  {
    v25 = *a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
    }
  }
}

void sub_196E87534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13)
{
  if (cf)
    CFRelease(cf);
  if (a13)
  {
    if (a12)
      CFRelease(a12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEConvolveMatrix,WTF::RawPtrTraits<WebCore::FEConvolveMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEConvolveMatrix>>>(_BYTE *a1, unint64_t *a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  void *v21;
  unint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  void *v25;
  CFTypeRef v26;
  WTF *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  CFTypeRef cf;
  uint64_t v49;
  CFTypeRef v50;
  char v51;
  WTF *v52;
  int v53;
  char v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;

  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  LODWORD(v6) = v5;
  v47 = v5;
  if (!(_BYTE)v5)
    goto LABEL_32;
  while (1)
  {
    v59 = v4;
    v60 = v6;
    v4 = IPC::Decoder::decode<float>(a2);
    v6 = IPC::Decoder::decode<float>(a2);
    v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
    v9 = v8;
    v10 = v8;
    if (!(_BYTE)v8)
    {
      v35 = *a2;
      v36 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v37 = a2[3];
      if (v37)
      {
        if (v36)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      }
    }
    v57 = v7;
    v58 = v9;
    v11 = IPC::Decoder::decode<WebCore::EdgeModeType>(a2);
    v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
    v14 = v13;
    v15 = v13;
    if (!(_BYTE)v13)
    {
      v38 = *a2;
      v39 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v40 = a2[3];
      if (v40)
      {
        if (v39)
        {
          v41 = v12;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v40 + 16))(a2[3], v38);
          v12 = v41;
        }
      }
    }
    v55 = v12;
    v56 = v14;
    v16 = a2[1];
    v17 = *a2;
    v18 = a2[2] - *a2;
    if (v16 <= v18)
    {
      v42 = 0;
      v43 = 0;
      *a2 = 0;
      a2[1] = 0;
      v44 = a2[3];
      if (v44)
      {
        if (v16)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
          v43 = *a2;
          v42 = a2[1];
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
      }
      goto LABEL_44;
    }
    v19 = (unsigned __int8 *)(v17 + v18);
    a2[2] = (unint64_t)(v19 + 1);
    if (!v17)
    {
      v42 = v16;
      v43 = 0;
LABEL_44:
      *a2 = 0;
      a2[1] = 0;
      v45 = a2[3];
      if (v45 && v42)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      goto LABEL_46;
    }
    if (*v19 < 2u)
    {
      v20 = 0;
      goto LABEL_8;
    }
LABEL_46:
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46 && v16)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v17);
    v20 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v52, (uint64_t *)a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a2, (uint64_t)&v50);
    v22 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_20;
    }
    if (v47
      && (v4 & 0xFF00000000) != 0
      && (v6 & 0xFF00000000) != 0
      && v10
      && v11 > 0xFFu
      && v15
      && !v20
      && v54
      && v51)
    {
      break;
    }
    __break(1u);
LABEL_32:
    v31 = *a2;
    v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33)
      v34 = v32 == 0;
    else
      v34 = 1;
    if (!v34)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
  }
  v23 = v50;
  v50 = 0;
  cf = v23;
  WebCore::FEConvolveMatrix::create();
  v24 = v49;
  v49 = 0;
  *(_QWORD *)a1 = v24;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v49, v25);
  if (cf)
    CFRelease(cf);
LABEL_20:
  if (v51)
  {
    v26 = v50;
    v50 = 0;
    if (v26)
      CFRelease(v26);
  }
  if (v54 && (v27 = v52) != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree(v27, v21);
    if (!v22)
      goto LABEL_28;
  }
  else
  {
    if (v22)
      return;
LABEL_28:
    v28 = *a2;
    v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v29)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
    }
  }
}

void sub_196E878D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13, WTF *a14, int a15, int a16, char a17)
{
  if (cf)
    CFRelease(cf);
  if (a13 && a12)
    CFRelease(a12);
  if (a17)
  {
    if (a14)
      WTF::fastFree(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FEDiffuseLighting,WTF::RawPtrTraits<WebCore::FEDiffuseLighting>,WTF::DefaultRefDerefTraits<WebCore::FEDiffuseLighting>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  void *v12;
  CFTypeRef v13;
  _DWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef cf;
  uint64_t v23;
  CFTypeRef v24;
  char v25;
  _DWORD *v26;
  char v27;
  _BYTE v28[8];
  char v29;

  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v28);
  if (!v29)
    goto LABEL_23;
  while (1)
  {
    v4 = IPC::Decoder::decode<float>(a2);
    v5 = IPC::Decoder::decode<float>(a2);
    v6 = IPC::Decoder::decode<float>(a2);
    v7 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(&v26, a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v24);
    v9 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_12;
    }
    if (v29
      && (v4 & 0xFF00000000) != 0
      && (v5 & 0xFF00000000) != 0
      && (v6 & 0xFF00000000) != 0
      && (v7 & 0xFF00000000) != 0
      && v27
      && v25)
    {
      break;
    }
    __break(1u);
LABEL_23:
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
      v19 = v17 == 0;
    else
      v19 = 1;
    if (!v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
  v10 = v24;
  v24 = 0;
  cf = v10;
  WebCore::FEDiffuseLighting::create();
  v11 = v23;
  v23 = 0;
  *(_QWORD *)a1 = v11;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v23, v12);
  if (cf)
    CFRelease(cf);
LABEL_12:
  if (v25)
  {
    v13 = v24;
    v24 = 0;
    if (v13)
      CFRelease(v13);
  }
  if (v27)
  {
    v14 = v26;
    v26 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
  }
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v8);
  if (!v9)
  {
    v20 = *a2;
    v21 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v21)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
    }
  }
  return result;
}

void sub_196E87B18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEDisplacementMap,WTF::RawPtrTraits<WebCore::FEDisplacementMap>,WTF::DefaultRefDerefTraits<WebCore::FEDisplacementMap>>>(_BYTE *a1, uint64_t *a2)
{
  unsigned __int16 Headers;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  uint64_t v16;
  CFTypeRef v17;
  char v18;

  Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
  v5 = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
  v6 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v17);
  v7 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (Headers <= 0xFFu || v5 <= 0xFFu || (v6 & 0xFF00000000) == 0 || !v18)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_8;
  }
  v8 = v17;
  v17 = 0;
  cf = v8;
  WebCore::FEDisplacementMap::create();
  v9 = v16;
  v16 = 0;
  *(_QWORD *)a1 = v9;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v16, v10);
  if (cf)
    CFRelease(cf);
LABEL_8:
  if (v18)
  {
    v11 = v17;
    v17 = 0;
    if (v11)
      CFRelease(v11);
  }
  if (!v7)
  {
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    }
  }
}

void sub_196E87CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FEDropShadow,WTF::RawPtrTraits<WebCore::FEDropShadow>,WTF::DefaultRefDerefTraits<WebCore::FEDropShadow>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  void *v13;
  CFTypeRef v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef cf;
  uint64_t v22;
  CFTypeRef v23;
  char v24;
  char v25[8];
  char v26;

  v4 = IPC::Decoder::decode<float>(a2);
  v5 = IPC::Decoder::decode<float>(a2);
  v6 = IPC::Decoder::decode<float>(a2);
  v7 = IPC::Decoder::decode<float>(a2);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v25);
  if (!v26)
    goto LABEL_18;
  while (1)
  {
    v8 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v23);
    v10 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_12;
    }
    if ((v4 & 0xFF00000000) != 0
      && (v5 & 0xFF00000000) != 0
      && (v6 & 0xFF00000000) != 0
      && (v7 & 0xFF00000000) != 0
      && v26
      && (v8 & 0xFF00000000) != 0
      && v24)
    {
      break;
    }
    __break(1u);
LABEL_18:
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
  v11 = v23;
  v23 = 0;
  cf = v11;
  WebCore::FEDropShadow::create();
  v12 = v22;
  v22 = 0;
  *(_QWORD *)a1 = v12;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v22, v13);
  if (cf)
    CFRelease(cf);
LABEL_12:
  if (v24)
  {
    v14 = v23;
    v23 = 0;
    if (v14)
      CFRelease(v14);
  }
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v9);
  if (!v10)
  {
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v20)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
    }
  }
  return result;
}

void sub_196E87ECC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FEFlood,WTF::RawPtrTraits<WebCore::FEFlood>,WTF::DefaultRefDerefTraits<WebCore::FEFlood>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  void *v9;
  CFTypeRef v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef cf;
  uint64_t v19;
  CFTypeRef v20;
  char v21;
  _BYTE v22[8];
  char v23;

  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v22);
  if (!v23)
    goto LABEL_14;
  while (1)
  {
    v4 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v20);
    v6 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_8;
    }
    if (v23 && (v4 & 0xFF00000000) != 0 && v21)
      break;
    __break(1u);
LABEL_14:
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
      v15 = v13 == 0;
    else
      v15 = 1;
    if (!v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  v7 = v20;
  v20 = 0;
  cf = v7;
  WebCore::FEFlood::create();
  v8 = v19;
  v19 = 0;
  *(_QWORD *)a1 = v8;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v19, v9);
  if (cf)
    CFRelease(cf);
LABEL_8:
  if (v21)
  {
    v10 = v20;
    v20 = 0;
    if (v10)
      CFRelease(v10);
  }
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v5);
  if (!v6)
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v17)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
    }
  }
  return result;
}

void sub_196E88060(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEGaussianBlur,WTF::RawPtrTraits<WebCore::FEGaussianBlur>,WTF::DefaultRefDerefTraits<WebCore::FEGaussianBlur>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  uint64_t v16;
  CFTypeRef v17;
  char v18;

  v4 = IPC::Decoder::decode<float>(a2);
  v5 = IPC::Decoder::decode<float>(a2);
  v6 = IPC::Decoder::decode<WebCore::EdgeModeType>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v17);
  v7 = *a2;
  if (!*a2)
    goto LABEL_14;
  if ((v4 & 0xFF00000000) == 0 || (v5 & 0xFF00000000) == 0 || v6 <= 0xFFu || !v18)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_8;
  }
  v8 = v17;
  v17 = 0;
  cf = v8;
  WebCore::FEGaussianBlur::create();
  v9 = v16;
  v16 = 0;
  *(_QWORD *)a1 = v9;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v16, v10);
  if (cf)
    CFRelease(cf);
LABEL_8:
  if (v18)
  {
    v11 = v17;
    v17 = 0;
    if (v11)
      CFRelease(v11);
  }
  if (!v7)
  {
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    }
  }
}

void sub_196E881E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FEImage,WTF::RawPtrTraits<WebCore::FEImage>,WTF::DefaultRefDerefTraits<WebCore::FEImage>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  _BYTE v51[48];

  IPC::Decoder::decode<WebCore::SourceImage>(v51, a2);
  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  v6 = v5;
  if (!v5)
  {
    v25 = *a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
    }
  }
  v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  v10 = v8;
  if (!(_BYTE)v8)
  {
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v9)
      {
        v43 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v8);
        v10 = 0;
        v7 = v43;
      }
    }
  }
  v11 = *a2;
  if (!*a2)
  {
    LOBYTE(v48) = 0;
    v50 = 0;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, 0);
        v8 = *a2;
        goto LABEL_7;
      }
    }
    else
    {
      v9 = 0;
    }
    v30 = 0;
    v4 = (unint64_t)(a2 + 2);
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_32;
  }
  if (v6 && v10)
  {
    v48 = v4;
    v49 = v7;
    v50 = 1;
    v8 = v11;
LABEL_7:
    v9 = a2[1];
    v4 = (unint64_t)(a2 + 2);
    if (v9 <= a2[2] - v8)
    {
      v30 = 0;
      v42 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v42 && v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v30 = *a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
      }
      goto LABEL_32;
    }
    v12 = (unsigned __int8 *)a2[2];
    v13 = v12 + 1;
    *(_QWORD *)v4 = v12 + 1;
    if (!v8)
      goto LABEL_66;
    v14 = *v12;
    if (v14 >= 0xB)
      goto LABEL_34;
    v15 = v14 | 0x100;
    goto LABEL_11;
  }
  while (1)
  {
    do
    {
      while (1)
      {
        __break(1u);
LABEL_66:
        v30 = v8;
LABEL_32:
        *a2 = 0;
        a2[1] = 0;
        v31 = a2[3];
        if (v31)
        {
          if (v9)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v30);
            v8 = *a2;
            v9 = a2[1];
          }
          else
          {
            v8 = 0;
          }
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
LABEL_34:
        *a2 = 0;
        a2[1] = 0;
        v32 = a2[3];
        if (!v32 || !v9)
        {
          v15 = 0;
          v33 = 0;
          v8 = 0;
          goto LABEL_36;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v8);
        v15 = 0;
        v8 = *a2;
        v9 = a2[1];
        v13 = (unsigned __int8 *)a2[2];
LABEL_11:
        v16 = &v13[-v8];
        if (v9 <= (unint64_t)v16)
        {
          v40 = v15;
          v33 = 0;
          v41 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v9 && v41)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v8 = *a2;
            v33 = a2[1];
          }
          else
          {
            v8 = 0;
          }
          v15 = v40;
          goto LABEL_36;
        }
        v17 = &v16[v8];
        *(_QWORD *)v4 = v17 + 1;
        if (v8)
          break;
        v33 = v9;
LABEL_36:
        *a2 = 0;
        a2[1] = 0;
        v34 = a2[3];
        if (v34)
        {
          v39 = v15;
          if (v33)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v8, v33);
            v8 = *a2;
            v9 = a2[1];
          }
          else
          {
            v9 = 0;
            v8 = 0;
          }
          v15 = v39;
        }
        else
        {
          v9 = 0;
          v8 = 0;
        }
LABEL_38:
        *a2 = 0;
        a2[1] = 0;
        v35 = a2[3];
        if (!v35 || !v9)
        {
          v4 = 0;
          v18 = 0;
          LODWORD(v19) = 0;
          goto LABEL_16;
        }
        v4 = v15;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v8);
        v19 = *a2;
        if (!*a2)
        {
          v4 = 0;
          v18 = 0;
          goto LABEL_16;
        }
      }
      if (*v17 >= 3u)
        goto LABEL_38;
    }
    while (v15 < 0x100);
    WebCore::SVGPreserveAspectRatioValue::SVGPreserveAspectRatioValue();
    v18 = v45;
    LODWORD(v19) = BYTE1(v45);
    v4 = 1;
LABEL_16:
    if (!(_WORD)v4)
    {
      v8 = *a2;
      v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v36 = a2[3];
      if (v36)
      {
        if (v9)
        {
          v44 = v19;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v8);
          LODWORD(v19) = v44;
        }
      }
    }
    v20 = (v18 | ((_DWORD)v19 << 8)) & 0xFFFEFFFF | ((v4 & 1) << 16);
    v46 = v20;
    v21 = HIWORD(v20);
    v47 = v21;
    if (!*a2)
      break;
    if (v51[40] && v11 && v21)
    {
      WebCore::FEImage::create();
      v22 = v45;
      v45 = 0;
      *(_QWORD *)a1 = v22;
      *(_BYTE *)(a1 + 8) = 1;
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v45, v23);
      return std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
  v37 = *a2;
  v38 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v38)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v37);
  return result;
}

void sub_196E88604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEMerge,WTF::RawPtrTraits<WebCore::FEMerge>,WTF::DefaultRefDerefTraits<WebCore::FEMerge>>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  void *v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef cf;
  uint64_t v22;
  CFTypeRef v23;
  char v24;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    a2[2] = v5 + v6 + 4;
    if (v5)
    {
      v8 = 0;
      goto LABEL_8;
    }
    v14 = v4;
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (v17 && v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  v8 = 1;
LABEL_8:
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v23);
  v9 = *a2;
  if (!*a2)
  {
LABEL_19:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_13;
  }
  if (v8 || !v24)
  {
    __break(1u);
    goto LABEL_19;
  }
  v10 = v23;
  v23 = 0;
  cf = v10;
  WebCore::FEMerge::create();
  v11 = v22;
  v22 = 0;
  *(_QWORD *)a1 = v11;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v22, v12);
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v24)
  {
    v13 = v23;
    v23 = 0;
    if (v13)
      CFRelease(v13);
  }
  if (!v9)
  {
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v19)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    }
  }
}

void sub_196E887CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEMorphology,WTF::RawPtrTraits<WebCore::FEMorphology>,WTF::DefaultRefDerefTraits<WebCore::FEMorphology>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  void *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef cf;
  uint64_t v27;
  CFTypeRef v28;
  char v29;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_18;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v18 = v6;
    v19 = 0;
    goto LABEL_19;
  }
  v9 = *v8;
  if (v9 >= 3)
    goto LABEL_20;
  for (i = v9 | 0x100; ; i = 0)
  {
    v11 = IPC::Decoder::decode<float>(a2);
    v12 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v28);
    v13 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_12;
    }
    if (i > 0xFF && (v11 & 0xFF00000000) != 0 && (v12 & 0xFF00000000) != 0 && v29)
      break;
    __break(1u);
LABEL_18:
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v5);
  }
  v14 = v28;
  v28 = 0;
  cf = v14;
  WebCore::FEMorphology::create();
  v15 = v27;
  v27 = 0;
  *(_QWORD *)a1 = v15;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v27, v16);
  if (cf)
    CFRelease(cf);
LABEL_12:
  if (v29)
  {
    v17 = v28;
    v28 = 0;
    if (v17)
      CFRelease(v17);
  }
  if (!v13)
  {
    v23 = *a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    }
  }
}

void sub_196E88A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEOffset,WTF::RawPtrTraits<WebCore::FEOffset>,WTF::DefaultRefDerefTraits<WebCore::FEOffset>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  void *v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  uint64_t v15;
  CFTypeRef v16;
  char v17;

  v4 = IPC::Decoder::decode<float>(a2);
  v5 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v16);
  v6 = *a2;
  if (!*a2)
    goto LABEL_13;
  if ((v4 & 0xFF00000000) == 0 || (v5 & 0xFF00000000) == 0 || !v17)
  {
    __break(1u);
LABEL_13:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_7;
  }
  v7 = v16;
  v16 = 0;
  cf = v7;
  WebCore::FEOffset::create();
  v8 = v15;
  v15 = 0;
  *(_QWORD *)a1 = v8;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v15, v9);
  if (cf)
    CFRelease(cf);
LABEL_7:
  if (v17)
  {
    v10 = v16;
    v16 = 0;
    if (v10)
      CFRelease(v10);
  }
  if (!v6)
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v12)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    }
  }
}

void sub_196E88B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FETile,WTF::RawPtrTraits<WebCore::FETile>,WTF::DefaultRefDerefTraits<WebCore::FETile>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  void *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  uint64_t v13;
  CFTypeRef v14;
  char v15;

  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v14);
  v4 = *a2;
  if (*a2)
  {
    if (!v15)
    {
      __break(1u);
LABEL_12:
      v9 = *a2;
      v10 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v11 = a2[3];
      if (v11)
      {
        if (v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      }
      return;
    }
    v5 = v14;
    v14 = 0;
    cf = v5;
    WebCore::FETile::create();
    v6 = v13;
    v13 = 0;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v13, v7);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  if (v15)
  {
    v8 = v14;
    v14 = 0;
    if (v8)
      CFRelease(v8);
  }
  if (!v4)
    goto LABEL_12;
}

void sub_196E88C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FESpecularLighting,WTF::RawPtrTraits<WebCore::FESpecularLighting>,WTF::DefaultRefDerefTraits<WebCore::FESpecularLighting>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  void *v13;
  CFTypeRef v14;
  _DWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef cf;
  uint64_t v24;
  CFTypeRef v25;
  char v26;
  _DWORD *v27;
  char v28;
  _BYTE v29[8];
  char v30;

  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v29);
  if (!v30)
    goto LABEL_24;
  while (1)
  {
    v4 = IPC::Decoder::decode<float>(a2);
    v5 = IPC::Decoder::decode<float>(a2);
    v6 = IPC::Decoder::decode<float>(a2);
    v7 = IPC::Decoder::decode<float>(a2);
    v8 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(&v27, a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v25);
    v10 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_13;
    }
    if (v30
      && (v4 & 0xFF00000000) != 0
      && (v5 & 0xFF00000000) != 0
      && (v6 & 0xFF00000000) != 0
      && (v7 & 0xFF00000000) != 0
      && (v8 & 0xFF00000000) != 0
      && v28
      && v26)
    {
      break;
    }
    __break(1u);
LABEL_24:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (!v20)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  }
  v11 = v25;
  v25 = 0;
  cf = v11;
  WebCore::FESpecularLighting::create();
  v12 = v24;
  v24 = 0;
  *(_QWORD *)a1 = v12;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v24, v13);
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v26)
  {
    v14 = v25;
    v25 = 0;
    if (v14)
      CFRelease(v14);
  }
  if (v28)
  {
    v15 = v27;
    v27 = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
  }
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v9);
  if (!v10)
  {
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v22)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    }
  }
  return result;
}

void sub_196E88EA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FETurbulence,WTF::RawPtrTraits<WebCore::FETurbulence>,WTF::DefaultRefDerefTraits<WebCore::FETurbulence>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  void *v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef cf;
  uint64_t v39;
  CFTypeRef v40;
  char v41;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_25;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v25 = v6;
    v26 = 0;
    goto LABEL_26;
  }
  v9 = *v8;
  if (v9 >= 3)
    goto LABEL_27;
  for (i = v9 | 0x100; ; i = 0)
  {
    v11 = IPC::Decoder::decode<float>(a2);
    v12 = IPC::Decoder::decode<float>(a2);
    v13 = IPC::Decoder::decode<unsigned int>(a2);
    v14 = IPC::Decoder::decode<float>(a2);
    v15 = a2[1];
    v16 = *a2;
    v17 = a2[2] - *a2;
    if (v15 <= v17)
    {
      v30 = 0;
      v31 = 0;
      *a2 = 0;
      a2[1] = 0;
      v32 = a2[3];
      if (v32)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          v31 = *a2;
          v30 = a2[1];
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
      }
      goto LABEL_30;
    }
    v18 = (unsigned __int8 *)(v16 + v17);
    a2[2] = (uint64_t)(v18 + 1);
    if (!v16)
    {
      v30 = v15;
      v31 = 0;
LABEL_30:
      *a2 = 0;
      a2[1] = 0;
      v33 = a2[3];
      if (v33 && v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      goto LABEL_32;
    }
    if (*v18 < 2u)
    {
      v19 = 0;
      goto LABEL_9;
    }
LABEL_32:
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v16);
    v19 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v40);
    v20 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_19;
    }
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && !v19
      && v41)
    {
      break;
    }
    __break(1u);
LABEL_25:
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
LABEL_26:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_27:
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v5);
  }
  v21 = v40;
  v40 = 0;
  cf = v21;
  WebCore::FETurbulence::create();
  v22 = v39;
  v39 = 0;
  *(_QWORD *)a1 = v22;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v39, v23);
  if (cf)
    CFRelease(cf);
LABEL_19:
  if (v41)
  {
    v24 = v40;
    v40 = 0;
    if (v24)
      CFRelease(v24);
  }
  if (!v20)
  {
    v35 = *a2;
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
    }
  }
}

void sub_196E89274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SourceAlpha,WTF::RawPtrTraits<WebCore::SourceAlpha>,WTF::DefaultRefDerefTraits<WebCore::SourceAlpha>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  char v13;

  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&cf);
  v4 = *a2;
  if (*a2)
  {
    if (!v13)
    {
      __break(1u);
LABEL_11:
      v8 = *a2;
      v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v10 = a2[3];
      if (v10)
      {
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      }
      return;
    }
    WebCore::SourceAlpha::create();
    v5 = v11;
    v11 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v11, v6);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  if (v13)
  {
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
  }
  if (!v4)
    goto LABEL_11;
}

void sub_196E8936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SourceGraphic,WTF::RawPtrTraits<WebCore::SourceGraphic>,WTF::DefaultRefDerefTraits<WebCore::SourceGraphic>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  void *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  uint64_t v13;
  CFTypeRef v14;
  char v15;

  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, (uint64_t)&v14);
  v4 = *a2;
  if (*a2)
  {
    if (!v15)
    {
      __break(1u);
LABEL_12:
      v9 = *a2;
      v10 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v11 = a2[3];
      if (v11)
      {
        if (v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      }
      return;
    }
    v5 = v14;
    v14 = 0;
    cf = v5;
    WebCore::SourceGraphic::create();
    v6 = v13;
    v13 = 0;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 1;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v13, v7);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  if (v15)
  {
    v8 = v14;
    v14 = 0;
    if (v8)
      CFRelease(v8);
  }
  if (!v4)
    goto LABEL_12;
}

void sub_196E89470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v24 = v4;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v5, v4);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v27 = a1[3];
  if (v27 && v24)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
  v10 = 0;
  v9 = 1;
LABEL_8:
  v11 = IPC::Decoder::decode<long long>(a1);
  v13 = v12;
  v14 = a1[1];
  v15 = *a1;
  v16 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v14 >= v16 && v14 - v16 > 7)
  {
    v18 = (uint64_t *)(v15 + v16);
    a1[2] = (uint64_t)(v18 + 1);
    if (v15)
    {
      v19 = 0;
      v20 = *v18;
      goto LABEL_15;
    }
    v28 = v14;
    v29 = 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v15, v14);
        v29 = *a1;
        v28 = a1[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v31 = a1[3];
  if (v31 && v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
  v20 = 0;
  v19 = 1;
LABEL_15:
  result = IPC::Decoder::decode<unsigned long long>(a1);
  v23 = *a1;
  if (!*a1)
  {
LABEL_23:
    *(_BYTE *)a2 = 0;
    goto LABEL_21;
  }
  if (v9 || !v13 || v19 || !v22)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  LOBYTE(v23) = 1;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = result;
LABEL_21:
  *(_BYTE *)(a2 + 32) = v23;
  return result;
}

char *IPC::ArgumentCoder<WebCore::Cursor::CustomCursorIPCData,void>::encode(IPC::Encoder *a1, WebCore::Image **a2)
{
  WebCore::Image **v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::Image,void>::encode(a1, *a2);
  v4 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::Cursor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *result;
  char v9;
  _BYTE v10[8];
  _QWORD v11[2];
  char v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2 == 44)
  {
    if ((*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 168))(*(_QWORD *)(a2 + 8), 0) <= 0.0
      || v4 <= 0.0)
    {
      LOBYTE(v11[0]) = 0;
      v12 = 0;
      v7 = 1;
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      v11[0] = v5;
      v11[1] = v6;
      v7 = 1;
      v12 = 1;
    }
  }
  else
  {
    v7 = 0;
    LOBYTE(v11[0]) = *(_BYTE *)a2;
  }
  v13 = v7;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  result = IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>((char *)a1, (uint64_t)v10, v7);
  if (v13 != -1)
    return (char *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v13])(&v9, v11);
  return result;
}

void sub_196E89884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a18 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a18])(&a13, &a15);
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::ArgumentCoder<WebCore::Cursor,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t *result;
  char v5;
  char *v6;
  _BYTE v7[8];
  _BYTE v8[24];
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>(a1, (uint64_t)v7);
  if (*a1)
  {
    if (v10)
    {
      if (v9 != -1)
      {
        v6 = &v5;
        result = (unint64_t *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6Cursor11fromIPCDataEONS_7variantIJNS8_18PlatformCursorTypeENS_8optionalINS9_19CustomCursorIPCDataEEEEEEEUlOSB_E_JZNS9_11fromIPCDataESG_EUlOSE_E_EEEEEJNS0_6__implIJSB_SE_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v6, v8);
        goto LABEL_5;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    __break(1u);
  }
  *a2 = 0;
  a2[32] = 0;
LABEL_5:
  if (v10)
  {
    if (v9 != -1)
      return (unint64_t *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v9])(&v6, v8);
  }
  return result;
}

void sub_196E8999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::Decoder::decode<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E89A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 40))
  {
    v15 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::LightSource,void>::encode(char *this, uint64_t a2)
{
  IPC::Encoder *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = (IPC::Encoder *)this;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 2)
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 2;
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (int *)(a2 + 16));
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (int *)(a2 + 28));
    v7 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)IPC::Encoder::grow(v3, 4uLL, 4) = v7;
    v6 = *(_DWORD *)(a2 + 56);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 1;
    return IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (int *)(a2 + 16));
  }
  if (!*(_BYTE *)(a2 + 12))
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 0;
    v5 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)IPC::Encoder::grow(v3, 4uLL, 4) = v5;
    v6 = *(_DWORD *)(a2 + 20);
LABEL_6:
    this = IPC::Encoder::grow(v3, 4uLL, 4);
    *(_DWORD *)this = v6;
  }
  return this;
}

uint64_t *IPC::ArgumentCoder<WebCore::LightSource,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v28;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 2)
  {
    v17 = result[2];
    if (v17 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v17) = 2;
      result[2] = v17 + 1;
    }
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(result, (_DWORD *)(a2 + 16));
    result = IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (_DWORD *)(a2 + 28));
    v18 = *v3;
    v19 = v3[2];
    v20 = *v3 + v19;
    v21 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v9 = v21 >= v20;
    v22 = v21 - v20;
    if (v9)
    {
      v23 = v22 + v19;
      v24 = v22 + v19 + 4;
      if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > v3[1])
      {
        v3[1] = 0;
      }
      else
      {
        *(_DWORD *)(v18 + v23) = *(_DWORD *)(a2 + 52);
        v3[2] = v24;
        v18 = *v3;
        v19 = v24;
      }
    }
    v26 = (_DWORD *)((v18 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v18 + v19)
    {
      v15 = (unint64_t)v26 - v18 + 4;
      if ((unint64_t)v26 - v18 <= 0xFFFFFFFFFFFFFFFBLL && v15 <= v3[1])
      {
        *v26 = *(_DWORD *)(a2 + 56);
        goto LABEL_34;
      }
LABEL_39:
      v3[1] = 0;
    }
  }
  else if (v4 == 1)
  {
    v28 = result[2];
    if (v28 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v28) = 1;
      result[2] = v28 + 1;
    }
    return IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(result, (_DWORD *)(a2 + 16));
  }
  else if (!*(_BYTE *)(a2 + 12))
  {
    v5 = result[2];
    if (v5 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v5++) = 0;
      result[2] = v5;
    }
    v6 = *result;
    v7 = *result + v5;
    v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v9 = v8 >= v7;
    v10 = v8 - v7;
    if (v9)
    {
      v11 = v10 + v5;
      v12 = v10 + v5 + 4;
      if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
      {
        result[1] = 0;
      }
      else
      {
        *(_DWORD *)(v6 + v11) = *(_DWORD *)(a2 + 16);
        result[2] = v12;
        v6 = *result;
        v5 = v12;
      }
    }
    v14 = (_DWORD *)((v6 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v14 >= v6 + v5)
    {
      v15 = (unint64_t)v14 - v6 + 4;
      if ((unint64_t)v14 - v6 <= 0xFFFFFFFFFFFFFFFBLL && v15 <= result[1])
      {
        *v14 = *(_DWORD *)(a2 + 20);
LABEL_34:
        v3[2] = v15;
        return result;
      }
      goto LABEL_39;
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::Image,void>::encode(IPC::Encoder *a1, WebCore::Image *this)
{
  void *v3;
  WTF *result;
  WTF *v5;

  WebCore::Image::toShareableBitmap(this);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v3);
  return result;
}

void sub_196E89DC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::Image,void>::decode(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  char v7;

  result = (uint64_t)IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v6, a2);
  if (*(_QWORD *)a2)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    result = WebCore::Image::create();
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
  if (v7)
  {
    result = (uint64_t)v6;
    v6 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_196E89E54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, char a10)
{
  if (a10)
  {
    if (a9)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a9, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::Length::RelativeData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char *result;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(a1, (int *)v2, v4);
  LOBYTE(v2) = *(_BYTE *)(v2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<std::variant<float,int> const&>(IPC::Encoder *a1, int *a2)
{
  int v4;

  v4 = a2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(a1, a2, v4);
  return a1;
}

uint64_t IPC::Decoder::decode<std::variant<float,int>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v3, v2);
        v14 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_19;
  }
  v5 = (_BYTE *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_19:
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (!v16)
      goto LABEL_5;
    if (v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
LABEL_4:
    v6 = 0;
LABEL_5:
    v8 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    return v6;
  }
  if (*v5 > 1u)
    goto LABEL_4;
  if (!*v5)
  {
    v11 = IPC::Decoder::decode<float>(a1);
    if ((v11 & 0xFF00000000) != 0)
      return v11;
    goto LABEL_4;
  }
  v10 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v10 & 0xFF00000000) != 0)
    v6 = v10 | 0x100000000;
  else
    v6 = 0;
  if ((v10 & 0xFF00000000) == 0)
    goto LABEL_5;
  return v6;
}

void IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, a2 + 1);
  IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  IPC::Decoder::decode<WTF::String>(a1, &v16);
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v14);
  IPC::Decoder::decode<WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v11, a1);
  if (!*a1)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (!v17 || !v15 || !v13)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = v16;
  v16 = 0;
  v6 = v14;
  v14 = 0;
  v7 = v11;
  v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v10[2] = 0;
  *(_QWORD *)(a2 + 16) = v7;
  v10[3] = 0;
  v8 = v12;
  v12 = 0;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = 1;
  WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk((WebCore::OrganizationStorageAccessPromptQuirk *)v10, v4);
LABEL_6:
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
LABEL_7:
  if (v15 && v14)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v14, v4);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, (WTF::StringImpl *)v4);
}

void sub_196E8A18C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(v2 - 40))
  {
    v4 = *(_QWORD *)(v2 - 48);
    if (v4)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 - 32, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E8A210(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(_QWORD *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(WebCore::OrganizationStorageAccessPromptQuirk *this, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

char *IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *(_DWORD *)(v2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *(_DWORD *)(v2 + 20);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[8];
  __int128 v23;
  char v24[8];
  unint64_t v25;
  char v26;

  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v24);
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(_QWORD *)a1;
  v7 = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (int *)(v6 + v7);
    *((_QWORD *)a1 + 2) = v9 + 1;
    if (v6)
    {
      v10 = 0;
      v11 = *v9;
      v12 = v11 & 0xFFFFFF00;
      v13 = v11;
      v14 = v6;
      goto LABEL_8;
    }
    v14 = v5;
    v19 = 0;
  }
  else
  {
    v14 = 0;
    v19 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v4 = *((_QWORD *)a1 + 3);
    if (v4)
      goto LABEL_34;
  }
  while (1)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v4 = *((_QWORD *)a1 + 3);
    if (!v4)
    {
      v14 = 0;
LABEL_25:
      v5 = 0;
      v6 = 0;
      v12 = 0;
      v13 = 0;
      v10 = 1;
      goto LABEL_8;
    }
    if (!v14)
      goto LABEL_25;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v4 + 16))(v4, v19, v14);
    v12 = 0;
    v13 = 0;
    v14 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    v10 = 1;
    v6 = *(_QWORD *)a1;
LABEL_8:
    v15 = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
    if (v5 >= v15 && v5 - v15 > 3)
      break;
    v18 = 0;
    v14 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v20 = *((_QWORD *)a1 + 3);
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v14 = *(_QWORD *)a1;
        v18 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v18 = 0;
        v14 = 0;
      }
    }
LABEL_27:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v21 = *((_QWORD *)a1 + 3);
    if (!v21)
      goto LABEL_28;
    if (!v18)
      goto LABEL_28;
    v4 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v14, v18);
    if (!*(_QWORD *)a1)
      goto LABEL_28;
LABEL_33:
    __break(1u);
LABEL_34:
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v19 = *(_QWORD *)a1;
      v14 = *((_QWORD *)a1 + 1);
    }
    else
    {
      v14 = 0;
      v19 = 0;
    }
  }
  v17 = (_DWORD *)((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *((_QWORD *)a1 + 2) = v17 + 1;
  v18 = v5;
  if (!v6)
    goto LABEL_27;
  if (v10)
    goto LABEL_33;
  v5 = v13 | v12;
  if (__CFADD__((_DWORD)v5, *v17))
  {
    __break(0xC471u);
    JUMPOUT(0x196E8A578);
  }
  if (!v26)
    goto LABEL_33;
  if (v25 >= (*v17 + v5))
  {
    WebCore::ShareableResourceHandle::ShareableResourceHandle();
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = v23;
    *(_BYTE *)(a2 + 24) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v22);
    goto LABEL_19;
  }
LABEL_28:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_19:
  if (v26)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
}

void sub_196E8A594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  if (a16)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a14);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<DDScannerResult>,void>::decode<DDScannerResult,DDScannerResult*>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E8A61C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ShareableBitmapConfiguration,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((unsigned __int8 *)a2 + 16);
  v7 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*((_BYTE *)a2 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_9;
    }
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)a2 + 1);
  }
  else
  {
    *v7 = 0;
  }
  v8 = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  if (*((_BYTE *)a2 + 28) || (v9 = a2[8], *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9, *((_BYTE *)a2 + 36)))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x196E8A748);
  }
  v10 = a2[10];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = a2[11];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v11;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  uint64_t v4;

  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return IPC::ArgumentCoder<WebCore::ShareableBitmapConfiguration,void>::encode(a1, (int *)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::decode(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v7;
  int v8;
  unint64_t v9;
  const void *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  const void *v30;
  CFTypeRef v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  CFTypeRef cf;
  char v71;
  CFTypeRef v72;
  int v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  CFTypeRef v77;
  unsigned __int8 v78;
  char v79;
  BOOL v80;
  int v81;
  char v82;
  uint64_t v83;
  unsigned __int8 v84;
  char v85[8];
  unint64_t v86;
  char v87;
  const void *v88;
  char v89;
  const void *v90;
  char v91;
  char v92;
  unint64_t v93;
  int v94;

  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v85);
  v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  if (!(_BYTE)v8)
  {
    v9 = 0;
    v40 = *(_QWORD *)a1;
    v39 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v41 = *((_QWORD *)a1 + 3);
    if (v41)
    {
      if (v39)
      {
        v10 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v40);
        v9 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          goto LABEL_89;
      }
      else
      {
        v9 = 0;
      }
    }
LABEL_66:
    v32 = 0;
    v2 = 0;
    v35 = 0;
    LOBYTE(v76) = 0;
    v84 = 0;
    goto LABEL_67;
  }
  v93 = v7;
  v94 = v8;
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || (v7 & 0x8000000080000000) != 0)
    goto LABEL_66;
  IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>((uint64_t *)a1, (uint64_t)&v90);
  v11 = *((_QWORD *)a1 + 1);
  v9 = *(_QWORD *)a1;
  v12 = *((_QWORD *)a1 + 2) - *(_QWORD *)a1;
  if (v11 <= v12)
  {
    v42 = 0;
    v43 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v44 = *((_QWORD *)a1 + 3);
    if (v44)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v43 = *(_QWORD *)a1;
        v42 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
    goto LABEL_72;
  }
  v13 = (unsigned __int8 *)(v9 + v12);
  *((_QWORD *)a1 + 2) = v13 + 1;
  if (!v9)
  {
    v42 = v11;
    v43 = 0;
LABEL_72:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v45 = *((_QWORD *)a1 + 3);
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
      v2 = 0;
      v9 = *(_QWORD *)a1;
      v11 = *((_QWORD *)a1 + 1);
    }
    else
    {
      v11 = 0;
      v9 = 0;
      v2 = 0;
    }
    goto LABEL_74;
  }
  v2 = *v13;
  if (v2 >= 2)
  {
LABEL_74:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = (const void *)*((_QWORD *)a1 + 3);
    if (v10)
      goto LABEL_90;
    v9 = 0;
    v11 = 0;
    goto LABEL_76;
  }
  v14 = 0;
  v15 = 1;
  while (1)
  {
    v16 = v2 ? v15 : 0;
    v17 = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v9;
    if (v11 < v17 || v11 - v17 <= 3)
    {
      v46 = 0;
      v47 = 0;
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v48 = *((_QWORD *)a1 + 3);
      if (v48)
      {
        v57 = v14;
        v58 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
          v47 = *(_QWORD *)a1;
          v46 = *((_QWORD *)a1 + 1);
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
        v16 = v58;
        v14 = v57;
      }
    }
    else
    {
      v18 = (int *)((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a1 + 2) = v18 + 1;
      if (v9)
      {
        v19 = 0;
        v20 = *v18;
        v21 = v20 & 0xFFFFFF00;
        v22 = v20;
        goto LABEL_15;
      }
      v46 = v11;
      v47 = 0;
    }
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = (const void *)*((_QWORD *)a1 + 3);
    if (v10)
    {
      v52 = v14;
      v53 = v16;
      if (v46)
      {
        v10 = (const void *)(*(uint64_t (**)(const void *, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v47, v46);
        v21 = 0;
        v22 = 0;
        v9 = *(_QWORD *)a1;
        v11 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v9 = 0;
        v11 = 0;
        v21 = 0;
        v22 = 0;
      }
      v19 = 1;
      v16 = v53;
      v14 = v52;
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v21 = 0;
      v22 = 0;
      v19 = 1;
    }
LABEL_15:
    v23 = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v9;
    if (v11 < v23 || v11 - v23 <= 3)
    {
      v26 = 0;
      v49 = 0;
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v50 = *((_QWORD *)a1 + 3);
      if (v50)
      {
        v59 = v19;
        v60 = v22;
        v61 = v21;
        LODWORD(v3) = v14;
        v4 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
          v49 = *(_QWORD *)a1;
          v26 = *((_QWORD *)a1 + 1);
        }
        else
        {
          v26 = 0;
          v49 = 0;
        }
        v16 = v4;
        v14 = v3;
        v21 = v61;
        v22 = v60;
        v19 = v59;
      }
    }
    else
    {
      v24 = (_DWORD *)((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a1 + 2) = v24 + 1;
      if (v9)
      {
        v25 = 0;
        v2 = *v24 & 0xFFFFFF00;
        v26 = v9;
        goto LABEL_19;
      }
      v26 = v11;
      v49 = 0;
    }
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = (const void *)*((_QWORD *)a1 + 3);
    if (v10)
    {
      LODWORD(v3) = v19;
      v66 = v22;
      v4 = v21;
      v54 = v14;
      v55 = v16;
      if (v26)
      {
        v10 = (const void *)(*(uint64_t (**)(const void *, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v49, v26);
        v2 = 0;
        v9 = *(_QWORD *)a1;
        v11 = *((_QWORD *)a1 + 1);
        v25 = 1;
        v26 = *(_QWORD *)a1;
      }
      else
      {
        v9 = 0;
        v11 = 0;
        v2 = 0;
        v25 = 1;
      }
      v16 = v55;
      v14 = v54;
      v22 = v66;
      v19 = v3;
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v26 = 0;
      v2 = 0;
      v25 = 1;
    }
LABEL_19:
    v27 = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v26;
    if (v11 < v27 || v11 - v27 <= 3)
    {
      v28 = 0;
      v9 = 0;
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v51 = *((_QWORD *)a1 + 3);
      if (v51)
      {
        v64 = v25;
        v68 = v22;
        v4 = v19;
        v62 = v14;
        LODWORD(v3) = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v26);
          v9 = *(_QWORD *)a1;
          v28 = *((_QWORD *)a1 + 1);
        }
        else
        {
          v28 = 0;
          v9 = 0;
        }
        v16 = v3;
        v14 = v62;
        v25 = v64;
        v22 = v68;
        v19 = v4;
      }
    }
    else
    {
      *((_QWORD *)a1 + 2) = ((*((_QWORD *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v28 = v11;
      if (v26)
      {
        v29 = 0;
        goto LABEL_23;
      }
    }
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = (const void *)*((_QWORD *)a1 + 3);
    if (!v10)
      goto LABEL_86;
    if (!v28)
      goto LABEL_86;
    v63 = v25;
    v67 = v19;
    v4 = v22;
    v56 = v14;
    LODWORD(v3) = v16;
    v10 = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)v10 + 16))(v10);
    v25 = v63;
    v19 = v67;
    if (!*(_QWORD *)a1)
    {
LABEL_86:
      v32 = 0;
      v2 = 0;
      v35 = 0;
      LOBYTE(v76) = 0;
      v84 = 0;
      v34 = 1;
      goto LABEL_41;
    }
    v14 = v56;
    v29 = 1;
LABEL_23:
    if (!v92)
      goto LABEL_89;
    LOBYTE(v88) = 0;
    v89 = 0;
    if (v91)
    {
      v30 = v90;
      v90 = 0;
      v88 = v30;
      v89 = 1;
    }
    if (v14 || v19 || v25 || v29)
      goto LABEL_89;
    v10 = (const void *)WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration();
    v76 = v69;
    LOBYTE(v77) = 0;
    v78 = 0;
    if (v71)
    {
      v31 = cf;
      cf = 0;
      v77 = v31;
      v2 = 1;
      v78 = 1;
    }
    else
    {
      v2 = 0;
    }
    v79 = (char)v72;
    v80 = BYTE4(v72) != 0;
    v32 = 0;
    v81 = v73;
    v82 = 0;
    if (v74)
    {
      v32 = 1;
      v82 = 1;
    }
    v33 = v75;
    v83 = v75;
    v84 = 1;
    if (v71)
    {
      v10 = cf;
      cf = 0;
      if (v10)
      {
        CFRelease(v10);
        v33 = v75;
      }
    }
    v3 = HIDWORD(v69);
    if (v89)
    {
      v10 = v88;
      v88 = 0;
      if (v10)
      {
        v65 = v33;
        CFRelease(v10);
        v33 = v65;
      }
    }
    v34 = 0;
    v4 = v33;
    v35 = 1;
LABEL_41:
    if (v92)
    {
      if (v91)
      {
        v10 = v90;
        v90 = 0;
        if (v10)
          CFRelease(v10);
      }
    }
    if (v34)
    {
      v9 = *(_QWORD *)a1;
LABEL_67:
      v11 = *((_QWORD *)a1 + 1);
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v10 = (const void *)*((_QWORD *)a1 + 3);
      if (v10 && v11)
        v10 = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)v10 + 16))(v10);
    }
    if (!*(_QWORD *)a1)
    {
      *a2 = 0;
      a2[64] = 0;
      goto LABEL_56;
    }
    if (v35)
    {
      if (v32)
        goto LABEL_64;
      v36 = (int)v3 * (unint64_t)v4;
      if (HIDWORD(v36))
        goto LABEL_64;
      if (v87)
        break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    if (v11)
    {
      v10 = (const void *)(*(uint64_t (**)(const void *, unint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
      v15 = 0;
      v9 = *(_QWORD *)a1;
      v11 = *((_QWORD *)a1 + 1);
    }
    else
    {
      v9 = 0;
LABEL_76:
      v15 = 0;
    }
    v14 = 1;
  }
  if (v86 < v36)
  {
LABEL_64:
    *a2 = 0;
    a2[64] = 0;
    v35 = 1;
    goto LABEL_56;
  }
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a2, (uint64_t)&v69);
  a2[64] = 1;
  if ((_BYTE)v73)
  {
    v37 = v72;
    v72 = 0;
    if (v37)
      CFRelease(v37);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v69);
  v35 = v84;
  v2 = v78;
LABEL_56:
  if (v35)
  {
    if (v2)
    {
      v38 = v77;
      v77 = 0;
      if (v38)
        CFRelease(v38);
    }
  }
  if (v87)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v85);
}

void sub_196E8AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;
  const void *v36;

  if (*(_BYTE *)(v34 - 104))
  {
    if (*(_BYTE *)(v34 - 112))
    {
      v36 = *(const void **)(v34 - 120);
      *(_QWORD *)(v34 - 120) = 0;
      if (v36)
        CFRelease(v36);
    }
  }
  if (a34)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a30);
  _Unwind_Resume(exception_object);
}

void WebCore::ShareableBitmapHandle::~ShareableBitmapHandle(WebCore::ShareableBitmapHandle *this)
{
  const void *v2;

  if (*((_BYTE *)this + 32))
  {
    v2 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v2)
      CFRelease(v2);
  }
  WTF::MachSendRight::~MachSendRight(this);
}

WTF::MachSendRight *IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::encode(IPC::Encoder *a1, WebCore::ShareableBitmap *this)
{
  _BYTE v4[72];

  WebCore::ShareableBitmap::createReadOnlyHandle(this);
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(a1, (unint64_t)v4);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v4);
}

void sub_196E8B058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

WTF::MachSendRight *IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode@<X0>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::MachSendRight *result;
  _BYTE v5[72];
  char v6;

  result = IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a1, v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return result;
    }
    result = (WTF::MachSendRight *)WebCore::ShareableBitmap::createReadOnly();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6)
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  return result;
}

void sub_196E8B0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&a9);
  _Unwind_Resume(exception_object);
}

WTF::MachSendRight *IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>@<X0>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::MachSendRight *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    v5 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    result = (WTF::MachSendRight *)*((_QWORD *)a1 + 3);
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::MachSendRight *)(*(uint64_t (**)(WTF::MachSendRight *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E8B148(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 72))
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::DataDetectorElementInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4;
  CFTypeRef v5;
  __int128 v6;
  char v7;
  CFTypeRef cf;
  char v9;

  IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(a1, (uint64_t)&cf);
  IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v9)
    {
      v4 = cf;
      cf = 0;
      if (v7)
      {
        *(_OWORD *)(a2 + 8) = v6;
        *(_QWORD *)a2 = v4;
        *(_BYTE *)(a2 + 24) = 1;
        return;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v9)
  {
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_196E8B1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, char a14)
{
  if (a14)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::SerializedPlatformDataCueValue,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BYTE v7[56];
  _BYTE v8[56];
  char v9;

  result = IPC::Decoder::decode<std::optional<WebCore::SerializedPlatformDataCueValue::Data>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v9)
    {
      __break(1u);
      return result;
    }
    std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100]((uint64_t)v7, (uint64_t)v8);
    std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)v7);
    a2[56] = 1;
    result = std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
  if (v9)
    return std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v5);
  return result;
}

void sub_196E8B2A8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  WTF::StringImpl *v25;

  std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  if (a24)
    std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, v25);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::SerializedPlatformDataCueValue::Data>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E8B328(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 56))
    std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::SerializedPlatformDataCueValue::Data,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>(a1, (_QWORD **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::encodeObjectDirectly<NSLocale>(a1, *(void **)(a2 + 24));
  v4 = *(_DWORD *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>> const&>(a1, a2 + 32, v4);
}

void IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v3;
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WebCore::FragmentedSharedBuffer::toIPCData(this);
  v3 = v7;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)v5, v3);
  if (v7 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
     + v7))((int)&v4, (WTF::MachSendRight *)&v6);
}

void sub_196E8B478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18)
{
  if (a18 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
     + a18))((int)&a13, (WTF::MachSendRight *)&a15);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)v5);
  if (*a1)
  {
    if (!v8)
      __break(1u);
    WebCore::FragmentedSharedBuffer::fromIPCData();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v8)
  {
    if (v7 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
       + v7))((int)&v4, (WTF::MachSendRight *)&v6);
  }
}

void sub_196E8B56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18, char a19)
{
  if (a19)
  {
    if (a17 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
       + a17))((int)&a12, (WTF::MachSendRight *)&a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E8B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 40))
  {
    v15 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v15 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
       + v15))((int)&a13, (WTF::MachSendRight *)(v13 + 8));
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::PublicSuffix,void>::decode(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WTF::String>(a2, &v7);
  v6 = *a2;
  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_4;
  }
  if (v8)
  {
    v6 = v7;
    v7 = 0;
    *(_QWORD *)a1 = v6;
    LOBYTE(v6) = 1;
LABEL_4:
    a1[8] = v6;
    return (_QWORD *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v5);
  }
  __break(1u);
  return result;
}

char *IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *result;

  for (i = 0; i != 24; ++i)
  {
    v5 = *(_BYTE *)(a2 + i);
    *IPC::Encoder::grow(this, 1uLL, 1) = v5;
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)this, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36));
  v6 = 0;
  v7 = a2 + 40;
  do
  {
    v8 = *(_BYTE *)(v7 + v6);
    result = IPC::Encoder::grow(this, 1uLL, 1);
    *result = v8;
    ++v6;
  }
  while (v6 != 16);
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::array<unsigned char,24ul>>(a1, &v13);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v8);
  result = (WTF *)IPC::Decoder::decode<std::array<unsigned char,16ul>>(a1, &v11);
  if (*a1)
  {
    if (v15)
    {
      if (v10)
      {
        v6 = v8;
        v7 = v9;
        v8 = 0;
        v9 = 0;
        if (v12)
        {
          *(_OWORD *)(a2 + 40) = v11;
          *(_OWORD *)a2 = v13;
          *(_QWORD *)(a2 + 16) = v14;
          *(_QWORD *)(a2 + 24) = v6;
          *(_QWORD *)(a2 + 32) = v7;
          *(_BYTE *)(a2 + 56) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (v10)
  {
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_196E8B834(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a9)
      WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::array<unsigned char,24ul>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::array<unsigned char,24ul>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::array<unsigned char,16ul>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::array<unsigned char,16ul>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  char v23;
  int v24;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  WebCore::SecurityOriginData *v29;
  WebCore::SecurityOriginData *v30;
  WebCore::SecurityOriginData *v31;
  WebCore::SecurityOriginData *v32;
  int v33;
  uint64_t v34;
  WebCore::SecurityOriginData *v35[2];

  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2, v4);
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)v35, (unsigned __int8 **)(a2 + 32));
  if (v35[0])
    v5 = *((_DWORD *)v35[0] - 3);
  else
    v5 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v7 = v35[0];
  if (v35[0])
  {
    v8 = *((unsigned int *)v35[0] - 1);
    v9 = (char *)v35[0] + v8;
    if (*((_DWORD *)v35[0] - 3))
    {
      v10 = (char *)v35[0];
      if ((_DWORD)v8)
      {
        v10 = (char *)v35[0];
        while (*v10 >= 0xFEu)
        {
          ++v10;
          if (!--v8)
          {
            v10 = v9;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v10 = (char *)v35[0] + v8;
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (char *)v35[0] + v8;
  if (v35[0])
  {
LABEL_11:
    v11 = (char *)v35[0] + *((unsigned int *)v35[0] - 1);
    goto LABEL_16;
  }
  v11 = 0;
LABEL_16:
  if (v11 != v10)
  {
    do
    {
      v12 = v10 + 1;
      v13 = *v10;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
      v10 = v9;
      if (v12 != v9)
      {
        v10 = v12;
        while (*v10 >= 0xFEu)
        {
          if (++v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v11);
    v7 = v35[0];
  }
  if (v7)
    WTF::fastFree((WebCore::SecurityOriginData *)((char *)v7 - 16), v6);
  v16 = *(_QWORD *)(a2 + 40);
  v15 = (unsigned __int8 **)(a2 + 40);
  v14 = v16;
  if (v16)
    v17 = *(_DWORD *)(v14 - 12);
  else
    v17 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v17;
  v18 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(v15);
  v19 = v18;
  v21 = v20;
  if (*v15)
    v22 = (uint64_t)&(*v15)[24 * *((unsigned int *)*v15 - 1)];
  else
    v22 = 0;
  if ((unsigned __int8 *)v22 != v18)
  {
    while (1)
    {
      v23 = *v19;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
      v24 = *((_DWORD *)v19 + 4);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
      if ((_BYTE)v24)
        break;
      if (*((_DWORD *)v19 + 4))
        goto LABEL_55;
      v26 = v19 + 8;
      v27 = *((_QWORD *)v19 + 1);
      if (v27)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v28;
      v29 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)v19 + 1);
      v30 = v29;
      v35[0] = v29;
      v35[1] = v31;
      if (*v26)
        v32 = (WebCore::SecurityOriginData *)(*v26 + 32 * *(unsigned int *)(*v26 - 4));
      else
        v32 = 0;
      if (v32 != v29)
      {
        do
        {
          v33 = *((_DWORD *)v30 + 6);
          *IPC::Encoder::grow(a1, 1uLL, 1) = v33;
          IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t)v30, v33);
          v35[0] = (WebCore::SecurityOriginData *)((char *)v35[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v35);
          v30 = v35[0];
        }
        while (v35[0] != v32);
      }
LABEL_47:
      while (1)
      {
        v19 += 24;
        if (v19 == v21)
          break;
        if (*v19 < 0xFEu)
          goto LABEL_51;
      }
      v19 = v21;
LABEL_51:
      if (v19 == (unsigned __int8 *)v22)
        return;
    }
    if (v24 != 1 || *((_DWORD *)v19 + 4) == 1)
      goto LABEL_47;
LABEL_55:
    v34 = std::__throw_bad_variant_access[abi:sn180100]();
    IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::encode(v34);
  }
}

char *IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = a2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = a2[7];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v11;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = IPC::Decoder::decode<unsigned long long>(a1);
  v5 = v4;
  v26 = IPC::Decoder::decode<unsigned long long>(a1);
  v7 = v6;
  v25 = IPC::Decoder::decode<unsigned long long>(a1);
  v9 = v8;
  v24 = IPC::Decoder::decode<unsigned long long>(a1);
  v11 = v10;
  v23 = IPC::Decoder::decode<unsigned long long>(a1);
  v13 = v12;
  v22 = IPC::Decoder::decode<unsigned long long>(a1);
  v15 = v14;
  v16 = IPC::Decoder::decode<unsigned long long>(a1);
  v18 = v17;
  result = IPC::Decoder::decode<unsigned long long>(a1);
  v21 = *a1;
  if (!*a1)
    goto LABEL_13;
  if (!v5 || !v7 || !v9 || !v11 || !v13 || !v15 || !v18 || !v20)
  {
    __break(1u);
LABEL_13:
    *(_BYTE *)a2 = 0;
    goto LABEL_11;
  }
  *(_QWORD *)a2 = v27;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v22;
  LOBYTE(v21) = 1;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = result;
LABEL_11:
  *(_BYTE *)(a2 + 64) = v21;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)a2 + 5);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)a2 + 6);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *((_BYTE *)a2 + 7);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *((const __CFDictionary **)a2 + 2));
  v10 = a2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  IPC::ArgumentCoder<__CFString const*,void>::encode((uint64_t)a1);
  return IPC::ArgumentCoder<__CFString const*,void>::encode((uint64_t)a1);
}

void IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;
  int v26;
  CFTypeRef v27;
  BOOL v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  CFTypeRef v49;
  char v50;
  CFTypeRef v51;
  char v52;
  CFTypeRef cf;
  char v54;

  v2 = a1;
  v48 = IPC::Decoder::decode<float>(a1);
  v4 = IPC::Decoder::decode<WebCore::LockHistory>(v2);
  v5 = IPC::Decoder::decode<WebCore::EdgeModeType>(v2);
  v6 = IPC::Decoder::decode<WebCore::EdgeModeType>(v2);
  v7 = v2[1];
  v8 = *v2;
  v9 = v2[2] - *v2;
  if (v7 <= v9)
    goto LABEL_52;
  v10 = (unsigned __int8 *)(v8 + v9);
  v11 = v8 + v9 + 1;
  v2[2] = v11;
  if (!v8)
  {
    v33 = v7;
    v34 = 0;
    goto LABEL_53;
  }
  v12 = *v10;
  if (v12 < 2)
  {
    v47 = 0;
    v13 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v37 = v2[3];
    if (!v37 || !v7)
    {
      v38 = 0;
      v8 = 0;
      v46 = 0;
      v47 = 1;
LABEL_57:
      *v2 = 0;
      v2[1] = 0;
      v39 = v2[3];
      if (v39 && v38)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v8, v38);
        v16 = 0;
        v8 = *v2;
        v7 = v2[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v16 = 0;
      }
      goto LABEL_59;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v8);
    v13 = 0;
    v8 = *v2;
    v7 = v2[1];
    v47 = 1;
    v11 = v2[2];
LABEL_5:
    if (!v12)
      v13 = 0;
    v46 = v13;
    v14 = v11 - v8;
    if (v7 <= v14)
    {
      v38 = 0;
      v45 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v45 && v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
        v8 = *v2;
        v38 = v2[1];
      }
      else
      {
        v8 = 0;
      }
      goto LABEL_57;
    }
    v15 = (unsigned __int8 *)(v8 + v14);
    v2[2] = (uint64_t)(v15 + 1);
    if (!v8)
    {
      v38 = v7;
      goto LABEL_57;
    }
    v16 = *v15;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_11;
    }
LABEL_59:
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (v40 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v8);
    v18 = 0;
    v17 = 1;
LABEL_11:
    v19 = v16 ? v18 : 0;
    IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(v2, (uint64_t)&cf);
    v20 = *v2;
    v21 = v2[1];
    v22 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
    if (v21 < v22 || v21 - v22 <= 3)
    {
      v41 = 0;
      v42 = 0;
      *v2 = 0;
      v2[1] = 0;
      v43 = v2[3];
      if (v43)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          v42 = *v2;
          v41 = v2[1];
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
      }
    }
    else
    {
      v23 = (_DWORD *)(v20 + v22);
      v2[2] = (uint64_t)(v23 + 1);
      if (v20)
      {
        v24 = 0;
        v25 = *v23 & 0xFFFFFF00;
        v26 = *v23;
        goto LABEL_18;
      }
      v41 = v21;
      v42 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v44 = v2[3];
    if (v44 && v41)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
    v25 = 0;
    v26 = 0;
    v24 = 1;
LABEL_18:
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(v2, (uint64_t)&v51);
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(v2, (uint64_t)&v49);
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      goto LABEL_41;
    }
    if ((v48 & 0xFF00000000) != 0 && v4 > 0xFFu && v5 > 0xFFu && v6 > 0xFFu && !v47 && !v17)
    {
      if (v54)
      {
        v2 = (uint64_t *)cf;
        cf = 0;
        if (!v24)
        {
          if (v52)
          {
            v27 = v51;
            v51 = 0;
            if (v50)
              break;
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    v33 = 0;
    v34 = 0;
    *v2 = 0;
    v2[1] = 0;
    v35 = v2[3];
    if (v35)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v34 = *v2;
        v33 = v2[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
LABEL_53:
    *v2 = 0;
    v2[1] = 0;
    v36 = v2[3];
    if (v36 && v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
      v12 = 0;
      v8 = *v2;
      v7 = v2[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v12 = 0;
    }
  }
  v28 = v4 != 0;
  v29 = v49;
  v49 = 0;
  if (v2)
    CFRetain(v2);
  if (v27)
    CFRetain(v27);
  if (v29)
    CFRetain(v29);
  *(_DWORD *)a2 = v48;
  *(_BYTE *)(a2 + 4) = v28;
  *(_BYTE *)(a2 + 5) = v5;
  *(_BYTE *)(a2 + 6) = v6;
  *(_BYTE *)(a2 + 7) = v46;
  *(_BYTE *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 24) = v26 | v25;
  *(_QWORD *)(a2 + 32) = v27;
  *(_QWORD *)(a2 + 40) = v29;
  *(_BYTE *)(a2 + 48) = 1;
  if (v29)
    CFRelease(v29);
  if (v27)
    CFRelease(v27);
  if (v2)
    CFRelease(v2);
LABEL_41:
  if (v50)
  {
    v30 = v49;
    v49 = 0;
    if (v30)
      CFRelease(v30);
  }
  if (v52)
  {
    v31 = v51;
    v51 = 0;
    if (v31)
      CFRelease(v31);
  }
  if (v54)
  {
    v32 = cf;
    cf = 0;
    if (v32)
      CFRelease(v32);
  }
}

void sub_196E8C3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, char a12, CFTypeRef a13, char a14, CFTypeRef cf, char a16)
{
  if (a16)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_QWORD *)v2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_QWORD *)v2 + 2);
  v8 = *((_QWORD *)v2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 8);
  LODWORD(v7) = *((_DWORD *)v2 + 18);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 19);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 20);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LOBYTE(v7) = v2[84];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = v2[85];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = v2[86];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v2) = v2[87];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  char v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  char v105;
  WTF::StringImpl *v106;
  char v107;
  WTF::StringImpl *v108;
  char v109;
  WTF::StringImpl *v110;
  char v111;
  WTF::StringImpl *v112;
  char v113;
  _BYTE v114[96];
  _QWORD v115[2];
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  v5 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(a1);
  v6 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v8 = v7;
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v115);
  IPC::Decoder::decode<WTF::String>(a1, &v112);
  IPC::Decoder::decode<WTF::String>(a1, &v110);
  IPC::Decoder::decode<WTF::String>(a1, &v108);
  IPC::Decoder::decode<WTF::String>(a1, &v106);
  IPC::Decoder::decode<WTF::String>(a1, &v104);
  v9 = IPC::Decoder::decode<unsigned int>(a1);
  v10 = IPC::Decoder::decode<unsigned int>(a1);
  v11 = IPC::Decoder::decode<unsigned int>(a1);
  v12 = (unsigned __int8 *)a1[1];
  v13 = (WTF::StringImpl *)*a1;
  v14 = a1[2] - *a1;
  if ((unint64_t)v12 <= v14)
    goto LABEL_67;
  v15 = (unsigned __int8 *)v13 + v14;
  v16 = v15 + 1;
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    v15 = v12;
    v36 = 0;
    goto LABEL_68;
  }
  LODWORD(v15) = *v15;
  if (v15 < 2)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (!v39)
    {
      v18 = 0;
      v20 = 0;
      v13 = 0;
      v17 = 1;
      goto LABEL_72;
    }
    v79 = (int)v15;
    v89 = v11;
    if (!v12)
    {
      v18 = 0;
      v20 = 0;
      v13 = 0;
      v17 = 1;
LABEL_72:
      *a1 = 0;
      a1[1] = 0;
      v40 = a1[3];
      if (v40)
      {
        v73 = v18;
        v83 = v17;
        v94 = v11;
        if (v20)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v40 + 16))(v40, v13, v20);
          LODWORD(v20) = 0;
          v13 = (WTF::StringImpl *)*a1;
          v12 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
        v11 = v94;
        v18 = v73;
        v17 = v83;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        LODWORD(v20) = 0;
      }
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v13);
    v18 = 0;
    v13 = (WTF::StringImpl *)*a1;
    v12 = (unsigned __int8 *)a1[1];
    v17 = 1;
    v16 = (unsigned __int8 *)a1[2];
    v11 = v89;
    LODWORD(v15) = v79;
LABEL_5:
    if (!(_DWORD)v15)
      v18 = 0;
    if ((unint64_t)v12 <= v16 - (unsigned __int8 *)v13)
    {
      v78 = v18;
      v88 = v17;
      v100 = v11;
      v20 = 0;
      v49 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v49 && v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        v13 = (WTF::StringImpl *)*a1;
        v20 = a1[1];
      }
      else
      {
        v13 = 0;
      }
      v11 = v100;
      v18 = v78;
      v17 = v88;
      goto LABEL_72;
    }
    v19 = v16 + 1;
    a1[2] = (uint64_t)(v16 + 1);
    if (!v13)
    {
      v20 = (uint64_t)v12;
      goto LABEL_72;
    }
    LODWORD(v20) = *v16;
    if (v20 < 2)
    {
      v21 = 0;
      v22 = 1;
      goto LABEL_11;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (!v41)
    {
      v22 = 0;
      v24 = 0;
      v13 = 0;
      v21 = 1;
      goto LABEL_76;
    }
    v63 = v20;
    v70 = v18;
    v80 = v17;
    v90 = v11;
    if (!v12)
    {
      v22 = 0;
      v24 = 0;
      v13 = 0;
      v21 = 1;
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (v42)
      {
        v59 = v22;
        v66 = v21;
        v74 = v18;
        v84 = v17;
        v95 = v11;
        if (v24)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v42 + 16))(v42, v13, v24);
          LODWORD(v24) = 0;
          v13 = (WTF::StringImpl *)*a1;
          v12 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
        v11 = v95;
        v18 = v74;
        v17 = v84;
        v22 = v59;
        v21 = v66;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        LODWORD(v24) = 0;
      }
      goto LABEL_78;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v41 + 16))(v41, v13);
    v22 = 0;
    v13 = (WTF::StringImpl *)*a1;
    v12 = (unsigned __int8 *)a1[1];
    v21 = 1;
    v19 = (unsigned __int8 *)a1[2];
    v11 = v90;
    v18 = v70;
    v17 = v80;
    LODWORD(v20) = v63;
LABEL_11:
    if (!(_DWORD)v20)
      v22 = 0;
    if ((unint64_t)v12 <= v19 - (unsigned __int8 *)v13)
    {
      v62 = v22;
      v69 = v21;
      v77 = v18;
      v87 = v17;
      v99 = v11;
      v24 = 0;
      v48 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v48 && v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        v13 = (WTF::StringImpl *)*a1;
        v24 = a1[1];
      }
      else
      {
        v13 = 0;
      }
      v11 = v99;
      v18 = v77;
      v17 = v87;
      v22 = v62;
      v21 = v69;
      goto LABEL_76;
    }
    v23 = v19 + 1;
    a1[2] = (uint64_t)(v19 + 1);
    if (!v13)
    {
      v24 = (uint64_t)v12;
      goto LABEL_76;
    }
    LODWORD(v24) = *v19;
    if (v24 < 2)
    {
      v25 = 0;
      v26 = 1;
      goto LABEL_17;
    }
LABEL_78:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (!v43)
    {
      v26 = 0;
      v44 = 0;
      v13 = 0;
      v25 = 1;
      goto LABEL_80;
    }
    v53 = v24;
    v57 = v22;
    v64 = v21;
    v71 = v18;
    v81 = v17;
    v91 = v11;
    if (!v12)
    {
      v26 = 0;
      v44 = 0;
      v13 = 0;
      v25 = 1;
      goto LABEL_80;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43, v13);
    v26 = 0;
    v13 = (WTF::StringImpl *)*a1;
    v12 = (unsigned __int8 *)a1[1];
    v25 = 1;
    v23 = (unsigned __int8 *)a1[2];
    v11 = v91;
    v18 = v71;
    v17 = v81;
    v22 = v57;
    v21 = v64;
    LODWORD(v24) = v53;
LABEL_17:
    if (!(_DWORD)v24)
      v26 = 0;
    if ((unint64_t)v12 <= v23 - (unsigned __int8 *)v13)
      break;
    a1[2] = (uint64_t)(v23 + 1);
    if (!v13)
    {
      v44 = (uint64_t)v12;
      goto LABEL_80;
    }
    v27 = *v23;
    if (v27 > 1)
      goto LABEL_82;
    v28 = 0;
    v29 = v27 != 0;
LABEL_23:
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v8)
      {
        if (v116)
        {
          LOBYTE(v101) = v4;
          BYTE1(v101) = v5;
          v102 = v115[0];
          v103 = v115[1];
          *((_QWORD *)&v101 + 1) = v6;
          if (v113)
          {
            if (v111
              && v109
              && v107
              && v105
              && (v9 & 0xFF00000000) != 0
              && (v10 & 0xFF00000000) != 0
              && (v11 & 0xFF00000000) != 0
              && !v17
              && !v21
              && !v25
              && !v28)
            {
              WebKit::WebKeyboardEvent::WebKeyboardEvent((uint64_t)v114, &v101, (_DWORD **)&v112, (_DWORD **)&v110, (_DWORD **)&v108, (_DWORD **)&v106, (_DWORD **)&v104, v9, v10, v11, v18, v22, v26, v29);
              std::__optional_destruct_base<WebKit::WebKeyboardEvent,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebKeyboardEvent>((uint64_t)a2, (uint64_t)v114);
              WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v114, v30);
              goto LABEL_40;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_67:
    v15 = 0;
    v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      v97 = v11;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *a1;
        v15 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v15 = 0;
        v36 = 0;
      }
      v11 = v97;
    }
LABEL_68:
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      v93 = v11;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v38 + 16))(v38, v36, v15);
        LODWORD(v15) = 0;
        v13 = (WTF::StringImpl *)*a1;
        v12 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v11 = v93;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      LODWORD(v15) = 0;
    }
  }
  v52 = v25;
  v56 = v26;
  v61 = v22;
  v68 = v21;
  v76 = v18;
  v86 = v17;
  v98 = v11;
  v44 = 0;
  v47 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v47 && v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
    v13 = (WTF::StringImpl *)*a1;
    v44 = a1[1];
  }
  else
  {
    v13 = 0;
  }
  v11 = v98;
  v18 = v76;
  v17 = v86;
  v22 = v61;
  v21 = v68;
  v25 = v52;
  v26 = v56;
LABEL_80:
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (v45)
  {
    v51 = v25;
    v55 = v26;
    v60 = v22;
    v67 = v21;
    v75 = v18;
    v85 = v17;
    v96 = v11;
    if (v44)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v45 + 16))(v45, v13, v44);
      v13 = (WTF::StringImpl *)*a1;
      v12 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v11 = v96;
    v18 = v75;
    v17 = v85;
    v22 = v60;
    v21 = v67;
    v25 = v51;
    v26 = v55;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
LABEL_82:
  *a1 = 0;
  a1[1] = 0;
  v46 = a1[3];
  if (v46)
  {
    if (v12)
    {
      v50 = v25;
      v54 = v26;
      v58 = v22;
      v65 = v21;
      v72 = v18;
      v82 = v17;
      v92 = v11;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46, v13);
      v11 = v92;
      v18 = v72;
      v17 = v82;
      v22 = v58;
      v21 = v65;
      v25 = v50;
      v26 = v54;
      if (*a1)
      {
        v29 = 0;
        v28 = 1;
        goto LABEL_23;
      }
    }
  }
  *a2 = 0;
  a2[96] = 0;
LABEL_40:
  if (v105)
  {
    v31 = v104;
    v104 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v13);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (v107)
  {
    v32 = v106;
    v106 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v13);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  if (v109)
  {
    v33 = v108;
    v108 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v13);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (v111)
  {
    v34 = v110;
    v110 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v13);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (v113)
  {
    v35 = v112;
    v112 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v13);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
}

void sub_196E8CDD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  uint64_t v10;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_QWORD *)v2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_QWORD *)v2 + 2);
  v8 = *((_QWORD *)v2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::VectorArgumentCoder<false,WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 32));
  v10 = *((_QWORD *)v2 + 6);
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, &v10);
  LOBYTE(v7) = v2[57];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = v2[58];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LODWORD(v6) = *((_DWORD *)v2 + 15);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LODWORD(v6) = *((_DWORD *)v2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LOBYTE(v2) = v2[56];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  char v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  WTF *v22;
  char *v23;
  unint64_t v24;
  WTF *result;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  char v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  unint64_t v46;
  char *v47;
  unsigned int v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  WTF *v88;
  unsigned int v89;
  int v90;
  char v91;
  WTF *v92;
  uint64_t v93;
  __int128 v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  uint64_t v102;

  v2 = a1;
  v102 = *MEMORY[0x1E0C80C00];
  v87 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  v86 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(v2);
  v84 = IPC::Decoder::decode<WTF::MonotonicTime>(v2);
  v85 = v4;
  IPC::Decoder::decode<WTF::UUID>(v2, (uint64_t)&v94);
  v5 = IPC::Decoder::decode<unsigned long long>(v2);
  if (v6)
  {
    v7 = v5;
    v92 = 0;
    v93 = 0;
    if (v5 >= 0x38E3)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPlatformTouchPoint>((uint64_t)&v96, (unint64_t *)v2);
        if (!v101)
          break;
        if ((_DWORD)v10 == (_DWORD)v93)
        {
          v69 = WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v92, v10 + 1, (unint64_t)&v96);
          LODWORD(v10) = HIDWORD(v93);
          v9 = v92;
          v70 = (char *)v92 + 72 * HIDWORD(v93);
          *(_OWORD *)v70 = *(_OWORD *)v69;
          v72 = *(_OWORD *)(v69 + 32);
          v71 = *(_OWORD *)(v69 + 48);
          v73 = *(_OWORD *)(v69 + 16);
          *((_QWORD *)v70 + 8) = *(_QWORD *)(v69 + 64);
          *((_OWORD *)v70 + 2) = v72;
          *((_OWORD *)v70 + 3) = v71;
          *((_OWORD *)v70 + 1) = v73;
        }
        else
        {
          v74 = (char *)v9 + 72 * v10;
          *(_OWORD *)v74 = v96;
          v75 = v97;
          v76 = v98;
          v77 = v99;
          *((_QWORD *)v74 + 8) = v100;
          *((_OWORD *)v74 + 2) = v76;
          *((_OWORD *)v74 + 3) = v77;
          *((_OWORD *)v74 + 1) = v75;
        }
        v10 = (v10 + 1);
        HIDWORD(v93) = v10;
        if (!--v7)
        {
          v21 = v93;
          if (v93 <= v10)
          {
            v22 = v9;
          }
          else
          {
            if (!(_DWORD)v10)
              goto LABEL_88;
            if (v10 >= 0x38E38E4)
            {
              __break(0xC471u);
              JUMPOUT(0x196E8D7CCLL);
            }
            v22 = (WTF *)WTF::fastMalloc((WTF *)(72 * v10));
            v21 = 72 * (int)v10 / 0x48u;
            LODWORD(v93) = v21;
            v92 = v22;
            if (v22 == v9)
            {
LABEL_88:
              v92 = 0;
              LODWORD(v93) = 0;
            }
            else
            {
              v78 = 0;
              do
              {
                v79 = (char *)v22 + v78;
                *(_OWORD *)v79 = *(_OWORD *)((char *)v9 + v78);
                v80 = *(_OWORD *)((char *)v9 + v78 + 16);
                v81 = *(_OWORD *)((char *)v9 + v78 + 32);
                v82 = *(_OWORD *)((char *)v9 + v78 + 48);
                *((_QWORD *)v79 + 8) = *(_QWORD *)((char *)v9 + v78 + 64);
                *((_OWORD *)v79 + 2) = v81;
                *((_OWORD *)v79 + 3) = v82;
                *((_OWORD *)v79 + 1) = v80;
                v78 += 72;
              }
              while (72 * v10 != v78);
              if (!v9)
                goto LABEL_13;
            }
            WTF::fastFree(v9, v11);
            v22 = v92;
            v21 = v93;
            LODWORD(v10) = HIDWORD(v93);
          }
LABEL_13:
          v88 = v22;
          v89 = v21;
          v90 = v10;
          v91 = 1;
          goto LABEL_17;
        }
      }
      LOBYTE(v88) = 0;
      v91 = 0;
      if (!v9)
        goto LABEL_16;
    }
    else
    {
      if (!v5)
      {
        v22 = 0;
        v21 = 0;
        LODWORD(v10) = 0;
        goto LABEL_13;
      }
      v8 = 72 * v5;
      v9 = (WTF *)WTF::fastMalloc((WTF *)(72 * v5));
      LODWORD(v10) = 0;
      LODWORD(v93) = v8 / 0x48;
      v92 = v9;
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPlatformTouchPoint>((uint64_t)&v96, (unint64_t *)v2);
        if (!v101)
          break;
        if ((_DWORD)v10 == (_DWORD)v93)
        {
          v12 = WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v92, v10 + 1, (unint64_t)&v96);
          LODWORD(v10) = HIDWORD(v93);
          v9 = v92;
          v13 = (char *)v92 + 72 * HIDWORD(v93);
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v15 = *(_OWORD *)(v12 + 32);
          v14 = *(_OWORD *)(v12 + 48);
          v16 = *(_OWORD *)(v12 + 16);
          *((_QWORD *)v13 + 8) = *(_QWORD *)(v12 + 64);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = v14;
          *((_OWORD *)v13 + 1) = v16;
        }
        else
        {
          v17 = (char *)v9 + 72 * v10;
          *(_OWORD *)v17 = v96;
          v18 = v97;
          v19 = v98;
          v20 = v99;
          *((_QWORD *)v17 + 8) = v100;
          *((_OWORD *)v17 + 2) = v19;
          *((_OWORD *)v17 + 3) = v20;
          *((_OWORD *)v17 + 1) = v18;
        }
        LODWORD(v10) = v10 + 1;
        HIDWORD(v93) = v10;
        if (!--v7)
        {
          v21 = v93;
          v22 = v9;
          goto LABEL_13;
        }
      }
      LOBYTE(v88) = 0;
      v91 = 0;
    }
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree(v9, v11);
  }
  else
  {
    LOBYTE(v88) = 0;
    v91 = 0;
  }
LABEL_16:
  v23 = (char *)*v2;
  v24 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  result = (WTF *)v2[3];
  if (result)
    goto LABEL_53;
  while (1)
  {
LABEL_17:
    v26 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    v28 = v27;
    if (!v27)
    {
      v54 = *v2;
      v55 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v56 = v2[3];
      if (v56)
      {
        if (v55)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
      }
    }
    v29 = v2[1];
    v30 = *v2;
    v31 = v2[2] - *v2;
    if (v29 <= v31)
    {
      v57 = 0;
      v58 = 0;
      *v2 = 0;
      v2[1] = 0;
      v59 = v2[3];
      if (v59)
      {
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
          v58 = *v2;
          v57 = v2[1];
        }
        else
        {
          v57 = 0;
          v58 = 0;
        }
      }
      goto LABEL_59;
    }
    v32 = (unsigned __int8 *)(v30 + v31);
    v33 = v30 + v31 + 1;
    v2[2] = v33;
    if (!v30)
    {
      v57 = v29;
      v58 = 0;
LABEL_59:
      *v2 = 0;
      v2[1] = 0;
      v60 = v2[3];
      if (v60 && v57)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v58, v57);
        v34 = 0;
        v30 = *v2;
        v29 = v2[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v34 = 0;
      }
      goto LABEL_61;
    }
    v34 = *v32;
    if (v34 < 2)
    {
      v35 = 0;
      v36 = 1;
      goto LABEL_22;
    }
LABEL_61:
    *v2 = 0;
    v2[1] = 0;
    v61 = v2[3];
    if (!v61 || !v29)
    {
      v37 = 0;
      v62 = 0;
      v30 = 0;
      v35 = 1;
LABEL_63:
      *v2 = 0;
      v2[1] = 0;
      v63 = v2[3];
      if (v63 && v62)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v30, v62);
        v40 = 0;
        v30 = *v2;
        v29 = v2[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v40 = 0;
      }
      goto LABEL_65;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v30);
    v36 = 0;
    v30 = *v2;
    v29 = v2[1];
    v35 = 1;
    v33 = v2[2];
LABEL_22:
    if (v34)
      v37 = v36;
    else
      v37 = 0;
    v38 = v33 - v30;
    if (v29 <= v38)
    {
      v62 = 0;
      v83 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v83 && v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
        v30 = *v2;
        v62 = v2[1];
      }
      else
      {
        v30 = 0;
      }
      goto LABEL_63;
    }
    v39 = (unsigned __int8 *)(v30 + v38);
    v2[2] = (uint64_t)(v39 + 1);
    if (!v30)
    {
      v62 = v29;
      goto LABEL_63;
    }
    v40 = *v39;
    if (v40 < 2)
    {
      v41 = 0;
      v42 = 1;
      goto LABEL_29;
    }
LABEL_65:
    *v2 = 0;
    v2[1] = 0;
    v64 = v2[3];
    if (v64 && v29)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v30);
    v42 = 0;
    v41 = 1;
LABEL_29:
    v43 = v40 ? v42 : 0;
    v44 = IPC::Decoder::decode<float>(v2);
    result = (WTF *)IPC::Decoder::decode<float>(v2);
    v45 = result;
    v24 = v2[1];
    v23 = (char *)*v2;
    v46 = v2[2] - *v2;
    if (v24 <= v46)
      break;
    v47 = &v23[v46];
    v2[2] = (uint64_t)(v47 + 1);
    if (!v23)
    {
      v65 = v24;
      v66 = 0;
      goto LABEL_68;
    }
    v48 = *v47;
    if (v48 > 1)
      goto LABEL_69;
    v49 = 0;
    v2 = (uint64_t *)(v48 != 0);
LABEL_36:
    if (v87 > 0xFFu
      && v86 > 0xFFu
      && v85
      && v95
      && v91
      && v28
      && !v35
      && !v41
      && (v44 & 0xFF00000000) != 0
      && ((unint64_t)v45 & 0xFF00000000) != 0
      && !v49)
    {
      LOBYTE(v96) = v87;
      BYTE1(v96) = v86;
      *((_QWORD *)&v96 + 1) = v84;
      v97 = v94;
      result = (WTF *)WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v98, (uint64_t *)&v88);
      BYTE8(v99) = (_BYTE)v2;
      BYTE9(v99) = v37;
      BYTE10(v99) = v43;
      HIDWORD(v99) = v44;
      LODWORD(v100) = (_DWORD)v45;
      v50 = v97;
      *(_OWORD *)a2 = v96;
      *(_OWORD *)(a2 + 16) = v50;
      v51 = v98;
      *(_QWORD *)&v98 = 0;
      *(_QWORD *)(a2 + 32) = v51;
      v52 = *((_QWORD *)&v98 + 1);
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = v26;
      *(_QWORD *)(a2 + 40) = v52;
      v53 = v99;
      *(_DWORD *)(a2 + 64) = (_DWORD)v45;
      *(_OWORD *)(a2 + 48) = v53;
      *(_BYTE *)(a2 + 80) = 1;
      goto LABEL_48;
    }
    __break(1u);
LABEL_53:
    if (v24)
      (*(void (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v23);
  }
  v65 = 0;
  v66 = 0;
  *v2 = 0;
  v2[1] = 0;
  v67 = v2[3];
  if (v67)
  {
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
      v66 = *v2;
      v65 = v2[1];
    }
    else
    {
      v65 = 0;
      v66 = 0;
    }
  }
LABEL_68:
  v24 = 0;
  v23 = 0;
  *v2 = 0;
  v2[1] = 0;
  v68 = v2[3];
  if (v68)
  {
    if (v65)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
      v23 = (char *)*v2;
      v24 = v2[1];
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
  }
LABEL_69:
  *v2 = 0;
  v2[1] = 0;
  result = (WTF *)v2[3];
  if (result)
  {
    if (v24)
    {
      result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v23);
      if (*v2)
      {
        v2 = 0;
        v49 = 1;
        goto LABEL_36;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
LABEL_48:
  if (v91)
  {
    result = v88;
    if (v88)
    {
      v88 = 0;
      v89 = 0;
      return (WTF *)WTF::fastFree(result, v23);
    }
  }
  return result;
}

void sub_196E8D7D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, char a15, WTF *a16)
{
  if (a15)
  {
    if (a12)
      WTF::fastFree(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebPlatformTouchPoint,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v12;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v12 = *(_QWORD *)(v2 + 1);
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, &v12);
  LOBYTE(v4) = *((_BYTE *)v2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_QWORD *)v2 + 2);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *((_QWORD *)v2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_QWORD *)v2 + 4);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((_QWORD *)v2 + 5);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = *((_QWORD *)v2 + 6);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *((_QWORD *)v2 + 7);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  LOBYTE(v2) = *((_BYTE *)v2 + 64);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_QWORD *)v2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_QWORD *)v2 + 2);
  v8 = *((_QWORD *)v2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LOBYTE(v7) = v2[32];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOWORD(v7) = *((_WORD *)v2 + 17);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 9);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 11);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v6) = *((_DWORD *)v2 + 13);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LODWORD(v6) = *((_DWORD *)v2 + 14);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LODWORD(v6) = *((_DWORD *)v2 + 15);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LODWORD(v7) = *((_DWORD *)v2 + 18);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v9 = *((_QWORD *)v2 + 10);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  LOBYTE(v7) = v2[88];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 23);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 12);
  LOBYTE(v7) = v2[104];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v2) = *((_DWORD *)v2 + 17);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int16 ShouldOpenExternalURLs;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int16 v58;
  char v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  WTF::StringImpl *v62;
  char v63;
  __int16 v64;
  _QWORD v65[2];
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v61 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  v60 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(a1);
  v49 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v59 = v4;
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v65);
  v58 = IPC::Decoder::decode<WebKit::WebMouseEventButton>(a1);
  v57 = IPC::Decoder::decode<unsigned short>(a1);
  v48 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  v56 = v5;
  if (!v5)
    goto LABEL_42;
  while (1)
  {
    v47 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    v55 = v6;
    if (!v6)
    {
      v32 = *a1;
      v33 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34)
      {
        if (v33)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      }
    }
    v54 = IPC::Decoder::decode<float>(a1);
    v53 = IPC::Decoder::decode<float>(a1);
    v52 = IPC::Decoder::decode<float>(a1);
    v51 = IPC::Decoder::decode<unsigned int>(a1);
    v7 = a1[1];
    v8 = *a1;
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v7 < v9 || v7 - v9 <= 7)
    {
      v35 = 0;
      v36 = 0;
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          v36 = *a1;
          v35 = a1[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)(v8 + v9);
      a1[2] = (uint64_t)(v10 + 1);
      if (v8)
      {
        v50 = 0;
        v11 = *v10;
        goto LABEL_7;
      }
      v35 = v7;
      v36 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v11 = 0;
    v38 = a1[3];
    if (v38 && v35)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
    v50 = 1;
LABEL_7:
    ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a1);
    v13 = *a1;
    v14 = a1[1];
    v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v14 < v15 || v14 - v15 <= 3)
    {
      v39 = 0;
      v40 = 0;
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
          v40 = *a1;
          v39 = a1[1];
        }
        else
        {
          v39 = 0;
          v40 = 0;
        }
      }
    }
    else
    {
      v16 = (_DWORD *)(v13 + v15);
      a1[2] = (uint64_t)(v16 + 1);
      if (v13)
      {
        v17 = 0;
        v18 = *v16 & 0xFFFFFF00;
        v19 = *v16;
        goto LABEL_11;
      }
      v39 = v14;
      v40 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v39)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
    v18 = 0;
    v19 = 0;
    v17 = 1;
LABEL_11:
    IPC::Decoder::decode<WTF::String>(a1, &v62);
    v64 = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v64);
    v20 = HIBYTE(v64);
    if (HIBYTE(v64))
    {
      v21 = v64;
    }
    else
    {
      v43 = *a1;
      v44 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45 && v44)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
      v21 = 0;
    }
    result = (WTF::StringImpl *)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    v24 = result;
    v25 = v23;
    if (!(_BYTE)v23)
    {
      v23 = (WTF::StringImpl *)*a1;
      v46 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = (WTF::StringImpl *)a1[3];
      if (result)
      {
        if (v46)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v23);
      }
    }
    if (!*a1)
      break;
    if (v61 > 0xFFu && v60 > 0xFFu)
    {
      if (v59)
      {
        if (v66)
        {
          if (v58 > 0xFFu && (v57 & 0xFF0000) != 0)
          {
            if (v56)
            {
              if (v55)
              {
                if ((v54 & 0xFF00000000) != 0 && (v53 & 0xFF00000000) != 0)
                {
                  v23 = (WTF::StringImpl *)v52;
                  if ((v52 & 0xFF00000000) != 0
                    && (v51 & 0xFF00000000) != 0
                    && !v50
                    && ShouldOpenExternalURLs > 0xFFu
                    && !v17
                    && v63
                    && v20
                    && v25)
                  {
                    v27 = v65[0];
                    v26 = v65[1];
                    v28 = v62;
                    if (v62)
                      *(_DWORD *)v62 += 2;
                    *(_BYTE *)a2 = v61;
                    *(_BYTE *)(a2 + 1) = v60;
                    *(_QWORD *)(a2 + 8) = v49;
                    *(_QWORD *)(a2 + 16) = v27;
                    *(_QWORD *)(a2 + 24) = v26;
                    *(_BYTE *)(a2 + 32) = v58;
                    *(_WORD *)(a2 + 34) = v57;
                    *(_QWORD *)(a2 + 36) = v48;
                    *(_QWORD *)(a2 + 44) = v47;
                    *(_DWORD *)(a2 + 52) = v54;
                    *(_DWORD *)(a2 + 56) = v53;
                    *(_DWORD *)(a2 + 60) = v52;
                    *(_QWORD *)(a2 + 64) = v24;
                    *(_DWORD *)(a2 + 72) = v51;
                    *(_QWORD *)(a2 + 80) = v11;
                    *(_BYTE *)(a2 + 88) = ShouldOpenExternalURLs;
                    *(_DWORD *)(a2 + 92) = v19 | v18;
                    *(_QWORD *)(a2 + 96) = v28;
                    *(_BYTE *)(a2 + 104) = v21;
                    *(_BYTE *)(a2 + 112) = 1;
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_42:
    v29 = *a1;
    v30 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31 && v30)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v63)
    return result;
LABEL_36:
  result = v62;
  v62 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196E8E070(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,char a23)
{
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  IPC::Encoder *v10;
  uint64_t v11;
  int v12;
  char *result;
  uint64_t v14;
  int v15;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_QWORD *)v2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *((_QWORD *)v2 + 2);
  v8 = *((_QWORD *)v2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v14 = *((_QWORD *)v2 + 4);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, &v14);
  v14 = *((_QWORD *)v2 + 5);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, &v14);
  v14 = *((_QWORD *)v2 + 6);
  v9 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)&v14);
  v14 = *((_QWORD *)v2 + 7);
  v10 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v9, (int *)&v14);
  LODWORD(v7) = *((_DWORD *)v2 + 16);
  *IPC::Encoder::grow(v10, 1uLL, 1) = v7;
  LOBYTE(v7) = v2[77];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 17);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 18);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LOBYTE(v7) = v2[78];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LODWORD(v7) = *((_DWORD *)v2 + 25);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)v2 + 26);
  v11 = *((_QWORD *)v2 + 10);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  v12 = *((_DWORD *)v2 + 24);
  v14 = *((_QWORD *)v2 + 11);
  v15 = v12;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, (uint64_t)&v14);
  LOBYTE(v2) = v2[76];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  char v7;
  char v8;
  int v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *result;
  char v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  char v70;
  char v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  __int16 v90;
  _QWORD v91[2];
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v89 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  v88 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(a1);
  v77 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v87 = v4;
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v91);
  v76 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  v86 = v5;
  if (!v5)
    goto LABEL_56;
  while (1)
  {
    v75 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    v85 = v6;
    if (!v6)
    {
      v48 = *a1;
      v49 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (v50)
      {
        if (v49)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
      }
    }
    v74 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    v84 = v7;
    v73 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    v83 = v8;
    v90 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v90);
    v9 = v90;
    if (HIBYTE(v90))
      v10 = v90 > 1u;
    else
      v10 = 1;
    v11 = v10;
    v82 = v11;
    if (v11 == 1)
    {
      v51 = *a1;
      v52 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53 && v52)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
      v9 = 0;
    }
    v12 = a1[1];
    v13 = *a1;
    v14 = a1[2] - *a1;
    v72 = v9;
    if (v12 <= v14)
    {
      v54 = 0;
      v55 = 0;
      *a1 = 0;
      a1[1] = 0;
      v56 = a1[3];
      if (v56)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
          v55 = *a1;
          v54 = a1[1];
        }
        else
        {
          v54 = 0;
          v55 = 0;
        }
      }
      goto LABEL_65;
    }
    v15 = (unsigned __int8 *)(v13 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v13)
    {
      v54 = v12;
      v55 = 0;
LABEL_65:
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (v57 && v54)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
        v16 = 0;
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v16 = 0;
      }
      goto LABEL_67;
    }
    v16 = *v15;
    if (v16 < 2)
    {
      v81 = 0;
      v17 = 1;
      goto LABEL_14;
    }
LABEL_67:
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v13);
    v17 = 0;
    v81 = 1;
LABEL_14:
    if (!v16)
      v17 = 0;
    v71 = v17;
    v80 = IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(a1);
    v79 = IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(a1);
    v18 = a1[1];
    v19 = *a1;
    v20 = a1[2] - *a1;
    if (v18 <= v20)
    {
      v59 = 0;
      v60 = 0;
      *a1 = 0;
      a1[1] = 0;
      v61 = a1[3];
      if (v61)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
          v60 = *a1;
          v59 = a1[1];
        }
        else
        {
          v59 = 0;
          v60 = 0;
        }
      }
      goto LABEL_70;
    }
    v21 = (unsigned __int8 *)(v19 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v19)
    {
      v59 = v18;
      v60 = 0;
LABEL_70:
      *a1 = 0;
      a1[1] = 0;
      v62 = a1[3];
      if (v62 && v59)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60, v59);
        v22 = 0;
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v22 = 0;
      }
      goto LABEL_72;
    }
    v22 = *v21;
    if (v22 < 2)
    {
      v78 = 0;
      v23 = 1;
LABEL_20:
      v24 = v19;
      goto LABEL_21;
    }
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    v63 = a1[3];
    if (v63)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v19);
        v23 = 0;
        v19 = *a1;
        v18 = a1[1];
        v78 = 1;
        goto LABEL_20;
      }
    }
    else
    {
      v18 = 0;
    }
    v24 = 0;
    v23 = 0;
    v78 = 1;
LABEL_21:
    if (!v22)
      v23 = 0;
    v70 = v23;
    v25 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v24;
    if (v18 < v25 || v18 - v25 <= 3)
    {
      v27 = 0;
      *a1 = 0;
      a1[1] = 0;
      v66 = a1[3];
      if (v66)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v24);
          v27 = a1[1];
        }
        else
        {
          v27 = 0;
        }
      }
    }
    else
    {
      v26 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v26 + 1);
      v27 = v18;
      if (v24)
      {
        v28 = 0;
        v68 = *v26;
        v69 = *v26 & 0xFFFFFF00;
        goto LABEL_27;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67 && v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
    v68 = 0;
    v69 = 0;
    v28 = 1;
LABEL_27:
    v29 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    v31 = v30;
    v32 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
    v34 = v33;
    v35 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>((unint64_t *)a1);
    v37 = v36;
    v90 = 0;
    result = IPC::Decoder::operator>><unsigned char>(a1, &v90);
    v39 = v90;
    if (HIBYTE(v90))
      v40 = v90 > 2u;
    else
      v40 = 1;
    v41 = v40;
    if (v41 == 1)
    {
      v64 = *a1;
      v65 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = (_QWORD *)a1[3];
      if (result && v65)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v64);
      v39 = 0;
    }
    if (!*a1)
      break;
    if (v89 > 0xFFu
      && v88 > 0xFFu
      && v87
      && v92
      && v86
      && v85
      && v84
      && v83
      && !v82
      && !v81
      && HIDWORD(v80)
      && HIDWORD(v79)
      && !v78
      && !v28
      && v31
      && v34
      && (v37 & 0xFF00000000) != 0
      && !v41)
    {
      v43 = v91[0];
      v42 = v91[1];
      *(_BYTE *)a2 = v89;
      *(_BYTE *)(a2 + 1) = v88;
      *(_QWORD *)(a2 + 8) = v77;
      *(_QWORD *)(a2 + 16) = v43;
      *(_QWORD *)(a2 + 24) = v42;
      *(_QWORD *)(a2 + 32) = v76;
      *(_QWORD *)(a2 + 40) = v75;
      *(_QWORD *)(a2 + 48) = v74;
      *(_QWORD *)(a2 + 56) = v73;
      *(_DWORD *)(a2 + 64) = v72;
      *(_DWORD *)(a2 + 68) = v80;
      *(_DWORD *)(a2 + 72) = v79;
      *(_BYTE *)(a2 + 76) = v39;
      *(_BYTE *)(a2 + 77) = v71;
      *(_BYTE *)(a2 + 78) = v70;
      *(_QWORD *)(a2 + 80) = v32;
      *(_QWORD *)(a2 + 88) = v35;
      *(_DWORD *)(a2 + 96) = v37;
      *(_DWORD *)(a2 + 100) = v68 | v69;
      v44 = 1;
      *(_QWORD *)(a2 + 104) = v29;
      goto LABEL_54;
    }
    __break(1u);
LABEL_56:
    v45 = *a1;
    v46 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
  }
  v44 = 0;
  *(_BYTE *)a2 = 0;
LABEL_54:
  *(_BYTE *)(a2 + 112) = v44;
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5;
      if (v6 > 0x20 || ((1 << v6) & 0x100010117) == 0)
      {
        v6 = 0;
        v8 = 0;
      }
      else
      {
        v8 = 0x100000000;
      }
      goto LABEL_12;
    }
    v14 = v1;
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v2, v1);
        a1 = v20;
        v15 = *v20;
        v14 = v20[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
  }
  v6 = 0;
  v8 = 0;
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17)
  {
    v19 = a1;
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    v6 = 0;
    v8 = 0;
    a1 = v19;
  }
LABEL_12:
  v9 = v8 | v6;
  if (!HIDWORD(v8))
  {
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v12)
      {
        v18 = v8 | v6;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
        return v18;
      }
    }
  }
  return v9;
}

char *IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  v6 = a2[3];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v24 = v4;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_46;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v25, v24);
      v10 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v10 = 0;
    }
    v9 = 1;
LABEL_8:
    v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 >= v11 && v4 - v11 > 7)
    {
      v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v13 + 1);
      if (v5)
      {
        v14 = 0;
        v15 = *v13;
        goto LABEL_15;
      }
      v27 = v4;
      v28 = 0;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
          v28 = *a1;
          v27 = a1[1];
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30 && v27)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
    v15 = 0;
    v14 = 1;
LABEL_15:
    result = IPC::Decoder::decode<WTF::AtomString>(a1, &v34);
    v17 = a1[1];
    v18 = *a1;
    v19 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      v31 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v18, v17);
          v32 = (WTF::StringImpl *)*a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
      }
    }
    else
    {
      v20 = (uint64_t *)(v18 + v19);
      a1[2] = (uint64_t)(v20 + 1);
      if (v18)
      {
        v21 = 0;
        v22 = *v20;
        if (v9)
          goto LABEL_45;
        goto LABEL_19;
      }
      v31 = v17;
      v32 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v31)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v32);
    if (!*a1)
      break;
    v22 = 0;
    v21 = 1;
    if (v9)
      goto LABEL_45;
LABEL_19:
    if (!v14)
    {
      if (v35)
      {
        v23 = v34;
        v34 = 0;
        if (!v21)
        {
          *(_QWORD *)a2 = v10;
          *(_QWORD *)(a2 + 8) = v15;
          *(_QWORD *)(a2 + 16) = v23;
          *(_QWORD *)(a2 + 24) = v22;
          *(_BYTE *)(a2 + 32) = 1;
          return result;
        }
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    if (v4)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
      v25 = *a1;
      v24 = a1[1];
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E8ED60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  WTF *result;
  void *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  _Unwind_Exception *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35[4];
  char v36;
  WTF *v37;
  int v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 68));
  v5 = *(_BYTE *)(a2 + 84);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 85);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 86);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 87);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 89);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(_BYTE *)(a2 + 90);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = *(_BYTE *)(a2 + 91);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *(unsigned __int8 *)(a2 + 392);
  v14 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v13)
  {
    *v14 = 1;
    if (!*(_BYTE *)(a2 + 392))
    {
      v27 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if ((v42 & 0x8000000000000) != 0)
      {
        v32 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v26);
        }
      }
      v28 = v41;
      v41 = 0;
      if (v28)
      {
        if (v28[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        else
          --v28[2];
      }
      v29 = v40;
      v40 = 0;
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
        else
          --v29[2];
      }
      v30 = v39;
      v39 = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
      v31 = v37;
      if (v37)
      {
        v37 = 0;
        v38 = 0;
        WTF::fastFree(v31, v26);
      }
      _Unwind_Resume(v27);
    }
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 96));
  }
  else
  {
    *v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData> const&>(a1, a2 + 400);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 432));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 440));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 448));
  WebKit::WebHitTestResultData::getImageSharedMemoryHandle((WebKit::WebHitTestResultData *)a2, v35);
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, (unint64_t)v35);
  if (v36)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v35);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, (WebCore::ShareableBitmap **)(a2 + 464));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 472));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 480));
  v15 = *(_BYTE *)(a2 + 488);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = *(_BYTE *)(a2 + 489);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(a1, (int *)(a2 + 496));
  v17 = *(_QWORD *)(a2 + 656);
  result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v17)
  {
    *(_BYTE *)result = 1;
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v35, (const TextIndicatorData *)(*(_QWORD *)(a2 + 656) + 8));
    IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, v35);
    if ((v42 & 0x8000000000000) != 0)
    {
      v23 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v19);
      }
    }
    v20 = v41;
    v41 = 0;
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      else
        --v20[2];
    }
    v21 = v40;
    v40 = 0;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    result = v37;
    if (v37)
    {
      v37 = 0;
      v38 = 0;
      return (WTF *)WTF::fastFree(result, v19);
    }
  }
  else
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char i;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  char v44;
  char v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char v56;
  char v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  char v62;
  char v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  TextIndicatorData *v68;
  _DWORD *v69;
  void *v70;
  int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  _OWORD v151[2];
  _DWORD *v152;
  char v153;
  _BYTE v154[41];
  char v155;
  WTF::StringImpl *v156;
  char v157;
  WTF::StringImpl *v158;
  char v159;
  WTF *v160;
  char v161;
  _BYTE v162[24];
  char v163;
  WTF::StringImpl *v164;
  char v165;
  WTF::StringImpl *v166;
  char v167;
  WTF::StringImpl *v168;
  char v169;
  _OWORD v170[2];
  char v171;
  __int16 v172;
  __int16 v173;
  __int128 v174;
  char v175;
  WTF::StringImpl *v176;
  char v177;
  WTF::StringImpl *v178;
  char v179;
  WTF::StringImpl *v180;
  char v181;
  WTF::StringImpl *v182;
  char v183;
  WTF::StringImpl *v184;
  char v185;
  WTF::StringImpl *v186;
  char v187;
  WTF::StringImpl *v188;
  char v189;
  WTF::StringImpl *v190;
  char v191;
  _DWORD *v192;
  uint64_t v193[14];
  char v194;
  _BYTE v195[304];
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v190);
  IPC::Decoder::decode<WTF::String>(a1, &v188);
  IPC::Decoder::decode<WTF::String>(a1, &v186);
  IPC::Decoder::decode<WTF::String>(a1, &v184);
  IPC::Decoder::decode<WTF::String>(a1, &v182);
  IPC::Decoder::decode<WTF::String>(a1, &v180);
  IPC::Decoder::decode<WTF::String>(a1, &v178);
  IPC::Decoder::decode<WTF::String>(a1, &v176);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_187;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v85 = v4;
    v86 = 0;
    goto LABEL_188;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_190;
  v150 = 0;
  for (i = 1; ; i = 0)
  {
    if (!v8)
      i = 0;
    v143 = i;
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v174);
    v10 = a1[1];
    v11 = *a1;
    v12 = a1[2] - *a1;
    if (v10 <= v12)
    {
      v90 = 0;
      v91 = 0;
      *a1 = 0;
      a1[1] = 0;
      v92 = a1[3];
      if (v92)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
          v91 = *a1;
          v90 = a1[1];
        }
        else
        {
          v90 = 0;
          v91 = 0;
        }
      }
      goto LABEL_193;
    }
    v13 = (unsigned __int8 *)(v11 + v12);
    a1[2] = (uint64_t)(v13 + 1);
    if (!v11)
    {
      v90 = v10;
      v91 = 0;
LABEL_193:
      v10 = 0;
      v11 = 0;
      *a1 = 0;
      a1[1] = 0;
      v93 = a1[3];
      if (v93)
      {
        if (v90)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v91, v90);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
      }
      goto LABEL_194;
    }
    v14 = *v13;
    if (v14 < 3)
    {
      v15 = v14 | 0x100;
      goto LABEL_11;
    }
LABEL_194:
    *a1 = 0;
    a1[1] = 0;
    v94 = a1[3];
    if (!v94 || !v10)
    {
      v11 = 0;
      v149 = 0;
      v10 = 0;
      v173 = 0;
LABEL_196:
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v11);
          v96 = *a1;
          v10 = a1[1];
        }
        else
        {
          v96 = 0;
        }
      }
      else
      {
        v96 = 0;
        v10 = 0;
      }
      goto LABEL_198;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v11);
    v15 = 0;
    v11 = *a1;
    v10 = a1[1];
LABEL_11:
    v149 = v15;
    v173 = v15;
    if (v10 <= a1[2] - v11)
      goto LABEL_196;
    v16 = (unsigned __int8 *)a1[2];
    v17 = v16 + 1;
    a1[2] = (uint64_t)(v16 + 1);
    if (v11)
    {
      v18 = *v16;
      if (v18 < 2)
      {
        v148 = 0;
        v19 = 1;
        goto LABEL_15;
      }
      goto LABEL_201;
    }
    v96 = 0;
LABEL_198:
    *a1 = 0;
    a1[1] = 0;
    v97 = a1[3];
    if (!v97)
    {
      v10 = 0;
LABEL_200:
      v11 = 0;
      v18 = 0;
      goto LABEL_201;
    }
    if (!v10)
      goto LABEL_200;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v96);
    v18 = 0;
    v11 = *a1;
    v10 = a1[1];
LABEL_201:
    *a1 = 0;
    a1[1] = 0;
    v98 = a1[3];
    if (!v98 || !v10)
    {
      v142 = 0;
      v99 = 0;
      v11 = 0;
      v148 = 1;
LABEL_203:
      *a1 = 0;
      a1[1] = 0;
      v100 = a1[3];
      if (v100 && v99)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v11, v99);
        v23 = 0;
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v23 = 0;
      }
      goto LABEL_205;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v11);
    v19 = 0;
    v11 = *a1;
    v10 = a1[1];
    v148 = 1;
    v17 = (unsigned __int8 *)a1[2];
LABEL_15:
    if (!v18)
      v19 = 0;
    v142 = v19;
    v20 = &v17[-v11];
    if (v10 <= (unint64_t)v20)
    {
      v99 = 0;
      v136 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v136 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
        v11 = *a1;
        v99 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_203;
    }
    v21 = &v20[v11];
    v22 = (uint64_t)&v20[v11 + 1];
    a1[2] = v22;
    if (!v11)
    {
      v99 = v10;
      goto LABEL_203;
    }
    v23 = *v21;
    if (v23 < 2)
    {
      v147 = 0;
      v24 = 1;
      goto LABEL_21;
    }
LABEL_205:
    *a1 = 0;
    a1[1] = 0;
    v101 = a1[3];
    if (!v101 || !v10)
    {
      v141 = 0;
      v102 = 0;
      v11 = 0;
      v147 = 1;
LABEL_207:
      *a1 = 0;
      a1[1] = 0;
      v103 = a1[3];
      if (v103 && v102)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v11, v102);
        v28 = 0;
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v28 = 0;
      }
      goto LABEL_209;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v11);
    v24 = 0;
    v11 = *a1;
    v10 = a1[1];
    v147 = 1;
    v22 = a1[2];
LABEL_21:
    if (!v23)
      v24 = 0;
    v141 = v24;
    v25 = v22 - v11;
    if (v10 <= v25)
    {
      v102 = 0;
      v135 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v135 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
        v11 = *a1;
        v102 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_207;
    }
    v26 = (unsigned __int8 *)(v11 + v25);
    v27 = v11 + v25 + 1;
    a1[2] = v27;
    if (!v11)
    {
      v102 = v10;
      goto LABEL_207;
    }
    v28 = *v26;
    if (v28 < 2)
    {
      v146 = 0;
      v29 = 1;
      goto LABEL_27;
    }
LABEL_209:
    *a1 = 0;
    a1[1] = 0;
    v104 = a1[3];
    if (!v104 || !v10)
    {
      v140 = 0;
      v105 = 0;
      v11 = 0;
      v146 = 1;
LABEL_211:
      *a1 = 0;
      a1[1] = 0;
      v106 = a1[3];
      if (v106 && v105)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v11, v105);
        v33 = 0;
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v33 = 0;
      }
      goto LABEL_213;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v11);
    v29 = 0;
    v11 = *a1;
    v10 = a1[1];
    v146 = 1;
    v27 = a1[2];
LABEL_27:
    if (!v28)
      v29 = 0;
    v140 = v29;
    v30 = v27 - v11;
    if (v10 <= v30)
    {
      v105 = 0;
      v134 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v134 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v134 + 16))(v134);
        v11 = *a1;
        v105 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_211;
    }
    v31 = (unsigned __int8 *)(v11 + v30);
    v32 = v11 + v30 + 1;
    a1[2] = v32;
    if (!v11)
    {
      v105 = v10;
      goto LABEL_211;
    }
    v33 = *v31;
    if (v33 < 2)
    {
      v145 = 0;
      v34 = 1;
      goto LABEL_33;
    }
LABEL_213:
    *a1 = 0;
    a1[1] = 0;
    v107 = a1[3];
    if (!v107 || !v10)
    {
      v139 = 0;
      v108 = 0;
      v11 = 0;
      v145 = 1;
LABEL_215:
      *a1 = 0;
      a1[1] = 0;
      v109 = a1[3];
      if (v109 && v108)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v11, v108);
        v38 = 0;
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v38 = 0;
      }
      goto LABEL_217;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v11);
    v34 = 0;
    v11 = *a1;
    v10 = a1[1];
    v145 = 1;
    v32 = a1[2];
LABEL_33:
    if (!v33)
      v34 = 0;
    v139 = v34;
    v35 = v32 - v11;
    if (v10 <= v35)
    {
      v108 = 0;
      v133 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v133 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 16))(v133);
        v11 = *a1;
        v108 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_215;
    }
    v36 = (unsigned __int8 *)(v11 + v35);
    v37 = v11 + v35 + 1;
    a1[2] = v37;
    if (!v11)
    {
      v108 = v10;
      goto LABEL_215;
    }
    v38 = *v36;
    if (v38 < 2)
    {
      v144 = 0;
      v39 = 1;
      goto LABEL_39;
    }
LABEL_217:
    *a1 = 0;
    a1[1] = 0;
    v110 = a1[3];
    if (!v110 || !v10)
    {
      v138 = 0;
      v111 = 0;
      v11 = 0;
      v144 = 1;
LABEL_219:
      *a1 = 0;
      a1[1] = 0;
      v112 = a1[3];
      if (v112 && v111)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v11, v111);
        v42 = 0;
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v42 = 0;
      }
      goto LABEL_221;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v11);
    v39 = 0;
    v11 = *a1;
    v10 = a1[1];
    v144 = 1;
    v37 = a1[2];
LABEL_39:
    if (!v38)
      v39 = 0;
    v138 = v39;
    v40 = v37 - v11;
    if (v10 <= v40)
    {
      v111 = 0;
      v132 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v132 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
        v11 = *a1;
        v111 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_219;
    }
    v41 = (unsigned __int8 *)(v11 + v40);
    a1[2] = (uint64_t)(v41 + 1);
    if (!v11)
    {
      v111 = v10;
      goto LABEL_219;
    }
    v42 = *v41;
    if (v42 < 2)
    {
      v43 = 0;
      v44 = 1;
      goto LABEL_45;
    }
LABEL_221:
    *a1 = 0;
    a1[1] = 0;
    v113 = a1[3];
    if (!v113 || !v10)
    {
      v11 = 0;
      v45 = 0;
      v10 = 0;
      v43 = 1;
LABEL_223:
      *a1 = 0;
      a1[1] = 0;
      v114 = a1[3];
      if (v114)
      {
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v11);
          v115 = *a1;
          v10 = a1[1];
        }
        else
        {
          v115 = 0;
        }
      }
      else
      {
        v115 = 0;
        v10 = 0;
      }
LABEL_225:
      *a1 = 0;
      a1[1] = 0;
      v116 = a1[3];
      if (v116)
      {
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v115);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v11 = 0;
        }
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      goto LABEL_227;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v11);
    v44 = 0;
    v11 = *a1;
    v10 = a1[1];
    v43 = 1;
LABEL_45:
    if (v42)
      v45 = v44;
    else
      v45 = 0;
    if (v10 <= a1[2] - v11)
      goto LABEL_223;
    v46 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v46 + 1);
    if (!v11)
    {
      v115 = 0;
      goto LABEL_225;
    }
    v47 = *v46;
    if (v47 < 3)
    {
      v48 = v47 | 0x100;
      goto LABEL_52;
    }
LABEL_227:
    *a1 = 0;
    a1[1] = 0;
    v117 = a1[3];
    if (v117 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v11);
    v48 = 0;
LABEL_52:
    v172 = v48;
    IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>(a1, v195);
    IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a1, (uint64_t)v170);
    IPC::Decoder::decode<WTF::String>(a1, &v168);
    IPC::Decoder::decode<WTF::String>(a1, &v166);
    IPC::Decoder::decode<WTF::String>(a1, &v164);
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v162);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v160, (IPC::Decoder *)a1);
    IPC::Decoder::decode<WTF::String>(a1, &v158);
    IPC::Decoder::decode<WTF::String>(a1, &v156);
    v49 = a1[1];
    v50 = *a1;
    v51 = a1[2] - *a1;
    if (v49 <= v51)
    {
      v118 = 0;
      v119 = 0;
      *a1 = 0;
      a1[1] = 0;
      v120 = a1[3];
      if (v120)
      {
        if (v49)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
          v119 = *a1;
          v118 = a1[1];
        }
        else
        {
          v118 = 0;
          v119 = 0;
        }
      }
      goto LABEL_230;
    }
    v52 = (unsigned __int8 *)(v50 + v51);
    v53 = v50 + v51 + 1;
    a1[2] = v53;
    if (!v50)
    {
      v118 = v49;
      v119 = 0;
LABEL_230:
      *a1 = 0;
      a1[1] = 0;
      v121 = a1[3];
      if (v121 && v118)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v119, v118);
        v54 = 0;
        v50 = *a1;
        v49 = a1[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
        v54 = 0;
      }
      goto LABEL_232;
    }
    v54 = *v52;
    if (v54 < 2)
    {
      v55 = 0;
      v56 = 1;
      goto LABEL_56;
    }
LABEL_232:
    *a1 = 0;
    a1[1] = 0;
    v122 = a1[3];
    if (!v122 || !v49)
    {
      v57 = 0;
      v123 = 0;
      v50 = 0;
      v55 = 1;
LABEL_234:
      *a1 = 0;
      a1[1] = 0;
      v124 = a1[3];
      if (v124 && v123)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v124 + 16))(v124, v50, v123);
        v60 = 0;
        v50 = *a1;
        v49 = a1[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
        v60 = 0;
      }
      goto LABEL_236;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 16))(v122, v50);
    v56 = 0;
    v50 = *a1;
    v49 = a1[1];
    v55 = 1;
    v53 = a1[2];
LABEL_56:
    if (v54)
      v57 = v56;
    else
      v57 = 0;
    v58 = v53 - v50;
    if (v49 <= v58)
    {
      v123 = 0;
      v137 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v137 && v49)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v137 + 16))(v137);
        v50 = *a1;
        v123 = a1[1];
      }
      else
      {
        v50 = 0;
      }
      goto LABEL_234;
    }
    v59 = (unsigned __int8 *)(v50 + v58);
    a1[2] = (uint64_t)(v59 + 1);
    if (!v50)
    {
      v123 = v49;
      goto LABEL_234;
    }
    v60 = *v59;
    if (v60 < 2)
    {
      v61 = 0;
      v62 = 1;
      goto LABEL_63;
    }
LABEL_236:
    *a1 = 0;
    a1[1] = 0;
    v125 = a1[3];
    if (v125 && v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v50);
    v62 = 0;
    v61 = 1;
LABEL_63:
    if (v60)
      v63 = v62;
    else
      v63 = 0;
    IPC::Decoder::decode<WebCore::DictionaryPopupInfo>((unint64_t *)a1, (uint64_t)v154);
    v4 = a1[1];
    v64 = (WTF::StringImpl *)*a1;
    v65 = a1[2] - *a1;
    if (v4 <= v65)
    {
      v126 = 0;
      v127 = 0;
      *a1 = 0;
      a1[1] = 0;
      v128 = a1[3];
      if (v128)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128);
          v127 = *a1;
          v126 = a1[1];
        }
        else
        {
          v126 = 0;
          v127 = 0;
        }
      }
      goto LABEL_239;
    }
    v66 = (unsigned __int8 *)v64 + v65;
    a1[2] = (uint64_t)(v66 + 1);
    if (!v64)
    {
      v126 = v4;
      v127 = 0;
LABEL_239:
      v4 = 0;
      v64 = 0;
      *a1 = 0;
      a1[1] = 0;
      v129 = a1[3];
      if (v129)
      {
        if (v126)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v127, v126);
          v64 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v64 = 0;
        }
      }
LABEL_240:
      *a1 = 0;
      a1[1] = 0;
      v130 = a1[3];
      if (v130 && v4)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v130 + 16))(v130, v64);
      goto LABEL_246;
    }
    v67 = *v66;
    if (v67 >= 2)
      goto LABEL_240;
    if (!v67)
    {
      v152 = 0;
LABEL_74:
      v71 = 0;
      v153 = 1;
      goto LABEL_75;
    }
    IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)a1, v193);
    if (*a1)
    {
      if (!v194)
        goto LABEL_186;
      WebCore::TextIndicator::create((WebCore::TextIndicator *)v193, v68);
      v69 = v192;
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v193, v70);
      v152 = v69;
      goto LABEL_74;
    }
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v193, v68);
LABEL_246:
    LOBYTE(v152) = 0;
    v153 = 0;
    v64 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v131 = a1[3];
    if (v131 && v4)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v131 + 16))(v131, v64);
    v71 = 1;
LABEL_75:
    if (!*a1)
      break;
    if (v191)
    {
      if (v189)
      {
        if (v187)
        {
          if (v185)
          {
            if (v183)
            {
              if (v181)
              {
                if (v179)
                {
                  if (v177)
                  {
                    if (!v150)
                    {
                      if (v175)
                      {
                        if (v149 > 0xFF && !v148 && !v147 && !v146 && !v145 && !v144 && !v43 && v48 > 0xFF)
                        {
                          if (v196)
                          {
                            if (v171)
                            {
                              v151[0] = v170[0];
                              v151[1] = v170[1];
                              if (v169)
                              {
                                if (v167 && v165 && v163 && v161 && v159 && v157 && !v55 && !v61 && v155 && !v71)
                                {
                                  WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v193, (_DWORD **)&v190, (_DWORD **)&v188, (_DWORD **)&v186, (_DWORD **)&v184, (_DWORD **)&v182, (_DWORD **)&v180, (_DWORD **)&v178, (_DWORD **)&v176, v143, &v174, (char *)&v173, v142, v141, v140, v139, v138, v45, (char *)&v172,
                                    (uint64_t)v195,
                                    v151,
                                    (_DWORD **)&v168,
                                    (_DWORD **)&v166,
                                    (_DWORD **)&v164,
                                    (uint64_t)v162,
                                    (unsigned int **)&v160,
                                    (_DWORD **)&v158,
                                    (_DWORD **)&v156,
                                    v57,
                                    v63,
                                    (uint64_t)v154,
                                    &v152);
                                  WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)a2, v193);
                                  a2[664] = 1;
                                  WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v193);
                                  goto LABEL_108;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_186:
    __break(1u);
LABEL_187:
    v85 = 0;
    v86 = 0;
    *a1 = 0;
    a1[1] = 0;
    v87 = a1[3];
    if (v87)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
        v86 = *a1;
        v85 = a1[1];
      }
      else
      {
        v85 = 0;
        v86 = 0;
      }
    }
LABEL_188:
    *a1 = 0;
    a1[1] = 0;
    v88 = a1[3];
    if (v88 && v85)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v86, v85);
      v8 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
LABEL_190:
    *a1 = 0;
    a1[1] = 0;
    v89 = a1[3];
    if (v89 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v5);
    v150 = 1;
  }
  *a2 = 0;
  a2[664] = 0;
  if ((v71 & 1) != 0)
    goto LABEL_110;
LABEL_108:
  if (v152)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v152);
LABEL_110:
  if (v155)
    WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)v154);
  if (v157)
  {
    v72 = v156;
    v156 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v64);
      else
        *(_DWORD *)v72 -= 2;
    }
  }
  if (v159)
  {
    v73 = v158;
    v158 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v64);
      else
        *(_DWORD *)v73 -= 2;
    }
  }
  if (v161 && v160)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v160, v64);
  if (v163 && v162[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v162);
  if (v165)
  {
    v74 = v164;
    v164 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v64);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (v167)
  {
    v75 = v166;
    v166 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v64);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (v169)
  {
    v76 = v168;
    v168 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v64);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (v196)
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v195, v64);
  if (v177)
  {
    v77 = v176;
    v176 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v64);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (v179)
  {
    v78 = v178;
    v178 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v64);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v181)
  {
    v79 = v180;
    v180 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v64);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (v183)
  {
    v80 = v182;
    v182 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v64);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (v185)
  {
    v81 = v184;
    v184 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v64);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  if (v187)
  {
    v82 = v186;
    v186 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v64);
      else
        *(_DWORD *)v82 -= 2;
    }
  }
  if (v189)
  {
    v83 = v188;
    v188 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v64);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  if (v191)
  {
    v84 = v190;
    v190 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, v64);
      else
        *(_DWORD *)v84 -= 2;
    }
  }
}

void sub_196E9036C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,WTF::StringImpl *a62,char a63)
{
  WTF::StringImpl *a64;
  char a65;
  WTF *a66;
  char a67;
  __int16 a69;
  char a71;
  __int16 a72;
  WTF::StringImpl *a73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;

  if (a63 && a62)
  {
    if (*(_DWORD *)a62 == 2)
      WTF::StringImpl::destroy(a62, a2);
    else
      *(_DWORD *)a62 -= 2;
  }
  if (a65 && a64)
  {
    if (*(_DWORD *)a64 == 2)
      WTF::StringImpl::destroy(a64, a2);
    else
      *(_DWORD *)a64 -= 2;
  }
  if (a67 && a66)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a66, a2);
  if ((_BYTE)a72 && a71)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a69);
  if (LOBYTE(STACK[0x200]))
  {
    v74 = a73;
    a73 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, a2);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (LOBYTE(STACK[0x210]))
  {
    v75 = (WTF::StringImpl *)STACK[0x208];
    STACK[0x208] = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, a2);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (LOBYTE(STACK[0x220]))
  {
    v76 = (WTF::StringImpl *)STACK[0x218];
    STACK[0x218] = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, a2);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (LOBYTE(STACK[0x6B8]))
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x588], a2);
  if (LOBYTE(STACK[0x270]))
  {
    v77 = (WTF::StringImpl *)STACK[0x268];
    STACK[0x268] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, a2);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (LOBYTE(STACK[0x280]))
  {
    v78 = (WTF::StringImpl *)STACK[0x278];
    STACK[0x278] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, a2);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (LOBYTE(STACK[0x290]))
  {
    v79 = (WTF::StringImpl *)STACK[0x288];
    STACK[0x288] = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, a2);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (LOBYTE(STACK[0x2A0]))
  {
    v80 = (WTF::StringImpl *)STACK[0x298];
    STACK[0x298] = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, a2);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (LOBYTE(STACK[0x2B0]))
  {
    v81 = (WTF::StringImpl *)STACK[0x2A8];
    STACK[0x2A8] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, a2);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  if (LOBYTE(STACK[0x2C0]))
  {
    v82 = (WTF::StringImpl *)STACK[0x2B8];
    STACK[0x2B8] = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, a2);
      else
        *(_DWORD *)v82 -= 2;
    }
  }
  if (LOBYTE(STACK[0x2D0]))
  {
    v83 = (WTF::StringImpl *)STACK[0x2C8];
    STACK[0x2C8] = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, a2);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  if (LOBYTE(STACK[0x2E0]))
  {
    v84 = (WTF::StringImpl *)STACK[0x2D8];
    STACK[0x2D8] = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, a2);
      else
        *(_DWORD *)v84 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::FrameInfoData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[304])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E9073C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 304))
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DictionaryPopupInfo>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E90804(_Unwind_Exception *exception_object)
{
  WebCore::DictionaryPopupInfo *v1;

  if (*((_BYTE *)v1 + 160))
    WebCore::DictionaryPopupInfo::~DictionaryPopupInfo(v1);
  _Unwind_Resume(exception_object);
}

id IPC::ArgumentCoder<WebKit::WebImage,void>::encode(IPC::Encoder *a1, WebKit::WebImage *this)
{
  int v3;
  char *v4;
  id result;
  _DWORD v6[8];
  uint64_t v7;
  unsigned __int8 v8;

  WebKit::WebImage::parametersAndHandle(this, (uint64_t)v6);
  v3 = v8;
  v4 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v3)
  {
    *v4 = 0;
    return (id)std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  }
  *v4 = 1;
  if (v8)
  {
    IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode(a1, v6);
    IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(a1, (unint64_t)&v7);
    return (id)std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  }
  result = std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_196E908B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::HardwareKeyboardState>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::decode(a1);
  if (!BYTE3(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<std::pair<unsigned short,unsigned short>>>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  result = IPC::ArgumentCoder<std::optional<std::pair<unsigned short,unsigned short>>,void>::decode<IPC::Decoder>(a1);
  if (!HIWORD(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::RemotePageParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::RemotePageParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[208])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E90A2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 208))
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  int v3;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  void *v16;
  int v17;
  int v18;
  char *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  __int128 v37;
  char v38;
  __int128 v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v37);
  IPC::Decoder::decode<WTF::String>(a2, &v35);
  v6 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v7)
  {
    LOBYTE(v32) = 0;
    v34 = 0;
LABEL_32:
    v16 = (void *)*a2;
    v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result && v25)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v16);
    if (!*a2)
      goto LABEL_57;
    v17 = 1;
LABEL_35:
    if (v38)
    {
      v39 = v37;
      if (v36)
      {
        v26 = v35;
        v35 = 0;
        if (!v17)
        {
          v27 = v32;
          v32 = 0;
          v33 = 0;
          *(_OWORD *)a1 = v37;
          v40 = 0;
          v41 = 0;
          *(_QWORD *)(a1 + 16) = v26;
          *(_QWORD *)(a1 + 24) = v27;
          v42 = 0;
          *(_DWORD *)(a1 + 32) = (_DWORD)v2;
          *(_DWORD *)(a1 + 36) = v3;
          *(_BYTE *)(a1 + 40) = 1;
          WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v16);
          v28 = v40;
          v40 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v28 -= 2;
          }
          v18 = 0;
          goto LABEL_43;
        }
      }
    }
    __break(1u);
LABEL_57:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    v18 = 1;
    goto LABEL_44;
  }
  v2 = (WTF::StringImpl *)v6;
  v44 = 0;
  v45 = 0;
  if (v6 >= 0x6666)
  {
    v3 = 40;
    do
    {
      IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(&v39, a2);
      if (!v43)
        goto LABEL_31;
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeCreationParameters>((unsigned int *)&v44, (unint64_t)&v39);
      }
      else
      {
        v19 = (char *)v44 + 40 * HIDWORD(v45);
        *(_OWORD *)v19 = v39;
        v20 = v40;
        v40 = 0;
        *((_QWORD *)v19 + 3) = 0;
        *((_QWORD *)v19 + 4) = 0;
        *((_QWORD *)v19 + 2) = v20;
        v21 = v41;
        v41 = 0;
        *((_QWORD *)v19 + 3) = v21;
        LODWORD(v21) = v42;
        LODWORD(v42) = 0;
        *((_DWORD *)v19 + 8) = v21;
        LODWORD(v21) = HIDWORD(v42);
        HIDWORD(v42) = 0;
        *((_DWORD *)v19 + 9) = v21;
        ++HIDWORD(v45);
      }
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
      v2 = (WTF::StringImpl *)((char *)v2 - 1);
    }
    while (v2);
    v2 = v44;
    if (v45 > HIDWORD(v45))
    {
      v22 = v44;
      if (HIDWORD(v45))
      {
        v31 = HIDWORD(v45);
        if (HIDWORD(v45) >= 0x6666667)
        {
          __break(0xC471u);
          return result;
        }
        v23 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v45)));
        LODWORD(v45) = 40 * v31 / 0x28;
        v44 = (WTF::StringImpl *)v23;
        v22 = v2;
        if ((WTF::StringImpl *)v23 != v2)
        {
          WTF::VectorMover<false,WebKit::FrameTreeCreationParameters>::move(v2, (WTF::StringImpl *)((char *)v2 + 40 * v31), v23);
          v22 = v44;
        }
      }
      if (v2)
      {
        if (v22 == v2)
        {
          v44 = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree(v2, v7);
        v2 = v44;
      }
      else
      {
        v2 = v22;
      }
    }
    v44 = 0;
    v32 = v2;
    LODWORD(v2) = v45;
    v3 = HIDWORD(v45);
    goto LABEL_14;
  }
  if (v6)
  {
    v8 = 40 * v6;
    v9 = WTF::fastMalloc((WTF *)(40 * v6));
    LODWORD(v45) = v8 / 0x28;
    v44 = (WTF::StringImpl *)v9;
    v3 = 40;
    while (1)
    {
      IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(&v39, a2);
      if (!v43)
        break;
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeCreationParameters>((unsigned int *)&v44, (unint64_t)&v39);
      }
      else
      {
        v11 = (char *)v44 + 40 * HIDWORD(v45);
        *(_OWORD *)v11 = v39;
        v12 = v40;
        v40 = 0;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 2) = v12;
        v13 = v41;
        v41 = 0;
        *((_QWORD *)v11 + 3) = v13;
        LODWORD(v13) = v42;
        LODWORD(v42) = 0;
        *((_DWORD *)v11 + 8) = v13;
        LODWORD(v13) = HIDWORD(v42);
        HIDWORD(v42) = 0;
        *((_DWORD *)v11 + 9) = v13;
        ++HIDWORD(v45);
      }
      std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
      v2 = (WTF::StringImpl *)((char *)v2 - 1);
      if (!v2)
      {
        v14 = v44;
        LODWORD(v2) = v45;
        v3 = HIDWORD(v45);
        goto LABEL_13;
      }
    }
LABEL_31:
    LOBYTE(v32) = 0;
    v34 = 0;
    std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v24);
    goto LABEL_32;
  }
  v3 = 0;
  v14 = 0;
LABEL_13:
  v44 = 0;
  v32 = v14;
LABEL_14:
  v45 = 0;
  v33 = __PAIR64__(v3, v2);
  v34 = 1;
  result = (WTF::StringImpl *)WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v7);
  v17 = 0;
  if (*a2)
    goto LABEL_35;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v18 = 1;
LABEL_43:
  result = (WTF::StringImpl *)WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v16);
LABEL_44:
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
        if (!v18)
          return result;
        goto LABEL_51;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v18)
    return result;
LABEL_51:
  v29 = *a2;
  v30 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v30)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v29);
  }
  return result;
}

void sub_196E90E64(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v19, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPageNetworkParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (*a1)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    result = v6;
    if (v6)
      *(_DWORD *)v6 += 2;
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (!v7)
      return result;
    result = v6;
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebPopupItem,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  v5 = v2[16];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[17];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 4);
  v7 = v2[40];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[41];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = v2[42];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPopupItem,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char v5;
  unsigned __int16 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  WTF::StringImpl *result;
  unsigned __int8 *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  __int16 v30;
  WTF::StringImpl *v31;
  __int16 v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  WTF::StringImpl *v70;
  char v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;

  LOWORD(v74) = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v74);
  v4 = BYTE1(v74);
  if (BYTE1(v74))
  {
    v5 = (char)v74;
  }
  else
  {
    v34 = *a1;
    v35 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v35)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
    v5 = 0;
  }
  IPC::Decoder::decode<WTF::String>(a1, &v74);
  v6 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  v7 = a1[1];
  v8 = *a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v37 = 0;
    v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        v38 = *a1;
        v37 = a1[1];
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
    }
    goto LABEL_63;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v37 = v7;
    v38 = 0;
LABEL_63:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38, v37);
      v11 = 0;
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v11 = 0;
    }
    goto LABEL_65;
  }
  v11 = *v10;
  if (v11 >= 2)
  {
LABEL_65:
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v8);
    v13 = 0;
    v12 = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v13 = 1;
LABEL_7:
  if (v11)
    v14 = v13;
  else
    v14 = 0;
  IPC::Decoder::decode<WTF::String>(a1, &v72);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v70);
  v16 = (unsigned __int8 *)a1[1];
  v17 = (WTF::StringImpl *)*a1;
  v18 = a1[2] - *a1;
  if ((unint64_t)v16 <= v18)
  {
    v19 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v22 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v22 = 0;
      }
    }
  }
  else
  {
    v19 = (unint64_t)v17 + v18;
    v20 = (unsigned __int8 *)(v19 + 1);
    a1[2] = v19 + 1;
    if (v17)
    {
      LODWORD(v19) = *(unsigned __int8 *)v19;
      if (v19 < 2)
      {
        v21 = 0;
        LODWORD(v22) = 1;
        goto LABEL_14;
      }
      goto LABEL_70;
    }
    v19 = (unint64_t)v16;
    v22 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
    goto LABEL_97;
  v16 = 0;
  v17 = 0;
  LODWORD(v19) = 0;
  while (1)
  {
LABEL_70:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (!v43 || (v63 = v19, !v16))
    {
      LODWORD(v22) = 0;
      v24 = 0;
      v17 = 0;
      v21 = 1;
      goto LABEL_72;
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43, v17);
    LODWORD(v22) = 0;
    v17 = (WTF::StringImpl *)*a1;
    v16 = (unsigned __int8 *)a1[1];
    v21 = 1;
    v20 = (unsigned __int8 *)a1[2];
    LODWORD(v19) = v63;
LABEL_14:
    if ((_DWORD)v19)
      v22 = v22;
    else
      v22 = 0;
    if ((unint64_t)v16 <= v20 - (unsigned __int8 *)v17)
    {
      v62 = v22;
      v69 = v21;
      v24 = 0;
      v49 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v49 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        v17 = (WTF::StringImpl *)*a1;
        v24 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v17 = 0;
      }
      LODWORD(v22) = v62;
      v21 = v69;
      goto LABEL_72;
    }
    v23 = v20 + 1;
    a1[2] = (uint64_t)(v20 + 1);
    if (!v17)
    {
      v24 = v16;
LABEL_72:
      *a1 = 0;
      a1[1] = 0;
      v44 = a1[3];
      if (v44)
      {
        v59 = v22;
        v66 = v21;
        if (v24)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(_QWORD *)v44 + 16))(v44, v17, v24);
          LODWORD(v24) = 0;
          v17 = (WTF::StringImpl *)*a1;
          v16 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        LODWORD(v22) = v59;
        v21 = v66;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        LODWORD(v24) = 0;
      }
      goto LABEL_74;
    }
    LODWORD(v24) = *v20;
    if (v24 < 2)
    {
      v25 = 0;
      v26 = 1;
      goto LABEL_21;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (!v45)
    {
      v26 = 0;
      v46 = 0;
      v17 = 0;
      v25 = 1;
      goto LABEL_76;
    }
    v53 = (int)v24;
    v57 = v22;
    v64 = v21;
    if (!v16)
    {
      v26 = 0;
      v46 = 0;
      v17 = 0;
      v25 = 1;
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      v47 = a1[3];
      if (v47)
      {
        v51 = v26;
        v55 = v25;
        v60 = v22;
        v67 = v21;
        if (v46)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(_QWORD *)v47 + 16))(v47, v17, v46);
          v17 = (WTF::StringImpl *)*a1;
          v16 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        LODWORD(v22) = v60;
        v21 = v67;
        v26 = v51;
        v25 = v55;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      goto LABEL_78;
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v45 + 16))(v45, v17);
    v26 = 0;
    v17 = (WTF::StringImpl *)*a1;
    v16 = (unsigned __int8 *)a1[1];
    v25 = 1;
    v23 = (unsigned __int8 *)a1[2];
    v22 = v57;
    v21 = v64;
    LODWORD(v24) = v53;
LABEL_21:
    if (!(_DWORD)v24)
      v26 = 0;
    if ((unint64_t)v16 <= v23 - (unsigned __int8 *)v17)
    {
      v52 = v26;
      v56 = v25;
      v61 = v22;
      v68 = v21;
      v46 = 0;
      v48 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v48 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        v17 = (WTF::StringImpl *)*a1;
        v46 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v17 = 0;
      }
      LODWORD(v22) = v61;
      v21 = v68;
      v26 = v52;
      v25 = v56;
      goto LABEL_76;
    }
    a1[2] = (uint64_t)(v23 + 1);
    if (!v17)
    {
      v46 = v16;
      goto LABEL_76;
    }
    v27 = *v23;
    if (v27 <= 1)
    {
      v28 = 0;
      v19 = v27 != 0;
      if (!v4)
        goto LABEL_96;
      goto LABEL_27;
    }
LABEL_78:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v16)
      break;
    v50 = v26;
    v54 = v25;
    v58 = v22;
    v65 = v21;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v17);
    v22 = v58;
    v21 = v65;
    v26 = v50;
    v25 = v54;
    if (!*a1)
      break;
    v19 = 0;
    v28 = 1;
    if (!v4)
      goto LABEL_96;
LABEL_27:
    if (v75 && v6 > 0xFFu && !v12 && v73 && v71 && !v21 && !v25 && !v28)
    {
      v29 = v74;
      if (v74)
        *(_DWORD *)v74 += 2;
      if (v14)
        v30 = 256;
      else
        v30 = 0;
      v31 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      v32 = v30 | (v6 != 0);
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *(_BYTE *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v29;
      *(_WORD *)(a2 + 16) = v32;
      *(_QWORD *)(a2 + 24) = v31;
      *(_QWORD *)(a2 + 32) = v33;
      *(_BYTE *)(a2 + 40) = v22;
      *(_BYTE *)(a2 + 41) = v26;
      *(_BYTE *)(a2 + 42) = v19;
      *(_BYTE *)(a2 + 48) = 1;
      goto LABEL_45;
    }
LABEL_96:
    __break(1u);
LABEL_97:
    if (v19)
    {
      (*(void (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v22, v19);
      LODWORD(v19) = 0;
      v17 = (WTF::StringImpl *)*a1;
      v16 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (!v71)
    goto LABEL_49;
LABEL_45:
  result = v70;
  v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_49:
  if (v73)
  {
    result = v72;
    v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v75)
  {
    result = v74;
    v74 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9167C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::PaymentSetupFeatures,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = objc_opt_class();
  v9[1] = ((uint64_t (*)(void))*MEMORY[0x1E0DCE0D8])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v6, v9, 2);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v6);
  IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, a1);
  v5 = (unint64_t)v6;
  if (v6)
    goto LABEL_10;
  while (*a1)
  {
    v5 = v8;
    if (v8)
    {
      *(_QWORD *)a2 = cf;
      *(_BYTE *)(a2 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_10:
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v8)
  {
    if (cf)
      CFRelease(cf);
  }
}

void sub_196E91824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::PaymentSetupConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v29[2];
  WTF::StringImpl *v30[2];
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  char v38;
  _QWORD v39[5];
  char v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;

  IPC::Decoder::decode<WTF::String>(a1, &v45);
  IPC::Decoder::decode<WTF::String>(a1, &v43);
  IPC::Decoder::decode<WTF::String>(a1, &v41);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v35);
  v6 = *a1;
  if (!*a1)
    goto LABEL_56;
  if (!v46)
    goto LABEL_55;
  v7 = v45;
  v45 = 0;
  if (!v44)
    goto LABEL_55;
  v8 = v43;
  v43 = 0;
  if (!v42)
    goto LABEL_55;
  v9 = v41;
  v41 = 0;
  if (!BYTE8(v36))
    goto LABEL_55;
  v10 = v35;
  v35 = 0;
  v39[0] = v7;
  v39[1] = v8;
  *(_OWORD *)v30 = 0u;
  v39[2] = v9;
  v39[3] = v10;
  v31 = 0;
  v11 = v36;
  *(_QWORD *)&v36 = 0;
  v39[4] = v11;
  v40 = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30[1], v5);
  v30[0] = 0;
  v29[1] = 0;
  v29[0] = 0;
  while (1)
  {
    if (BYTE8(v36))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
    if (v42)
    {
      v12 = v41;
      v41 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    if (v44)
    {
      v13 = v43;
      v43 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    if (v46)
    {
      v14 = v45;
      v45 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
          if (v6)
            goto LABEL_24;
          goto LABEL_50;
        }
        *(_DWORD *)v14 -= 2;
      }
    }
    if (v6)
      goto LABEL_24;
LABEL_50:
    v25 = *a1;
    v26 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v26)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
LABEL_24:
    IPC::Decoder::decode<WTF::URL>(a1, &v35);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      goto LABEL_45;
    }
    if (v40 && v38)
      break;
LABEL_55:
    __break(1u);
LABEL_56:
    LOBYTE(v39[0]) = 0;
    v40 = 0;
  }
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(v29, (uint64_t)v39);
  v15 = v35;
  if (v35)
    *(_DWORD *)v35 += 2;
  v33 = v36;
  v34 = v37;
  v16 = *(_OWORD *)v29;
  v17 = *(_OWORD *)v30;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)a2 = v16;
  *(_OWORD *)(a2 + 16) = v17;
  v18 = v31;
  v31 = 0;
  v32 = v15;
  *(_QWORD *)(a2 + 32) = v18;
  WTF::URL::URL(a2 + 40, (uint64_t *)&v32);
  *(_BYTE *)(a2 + 80) = 1;
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30[1], v19);
  v21 = v30[0];
  v30[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v29[1];
  v29[1] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v29[0];
  v29[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v23 -= 2;
  }
LABEL_45:
  if (v38)
  {
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ApplePaySetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v5);
}

void sub_196E91BBC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  std::__optional_destruct_base<WebCore::ApplePaySetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a26, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::WebIDBResult,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[104];
  char v27;

  IPC::Decoder::decode<WebCore::IDBResultData>(a1, (uint64_t)v26);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v23);
  if (*a1)
  {
    if (v27 && v25)
    {
      MEMORY[0x19AEADBC4](&v13, v26);
      v6 = v23;
      v23 = 0;
      *(_OWORD *)a2 = v13;
      *(_QWORD *)(a2 + 16) = v14;
      *(_WORD *)(a2 + 24) = v15;
      v7 = v16;
      v16 = 0;
      *(_QWORD *)(a2 + 32) = v7;
      *(_OWORD *)(a2 + 40) = v17;
      v8 = v18;
      v18 = 0u;
      *(_OWORD *)(a2 + 56) = v8;
      v9 = v19;
      v19 = 0u;
      *(_OWORD *)(a2 + 72) = v9;
      v10 = v21;
      *(_QWORD *)(a2 + 88) = v20;
      *(_QWORD *)(a2 + 96) = v10;
      v20 = 0;
      v22[0] = 0;
      *(_QWORD *)(a2 + 104) = v6;
      v22[1] = 0;
      v11 = v24;
      v24 = 0;
      *(_QWORD *)(a2 + 112) = v11;
      *(_BYTE *)(a2 + 120) = 1;
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v12);
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13);
      goto LABEL_5;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 120) = 0;
LABEL_5:
  if (v25)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v5);
  if (v27)
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v26);
}

void sub_196E91EE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a26)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a24, a2);
  if (a43)
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&a28);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::IDBResultData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::IDBResultData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 104))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E91FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 80) && *(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v2]((int)&v4, (WTF::MachSendRight *)a1);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  BOOL v12;
  int v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  char v23;
  WTF *v24;
  uint64_t v25;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v5)
  {
    v6 = v4;
    v24 = 0;
    v25 = 0;
    if (v4 >= 0x10000)
    {
      do
      {
        result = (WTF *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v22);
        if (!v23)
          goto LABEL_25;
        if (HIDWORD(v25) == (_DWORD)v25)
        {
          result = (WTF *)WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v24, (unint64_t)&v22);
        }
        else
        {
          *((_OWORD *)v24 + HIDWORD(v25)) = v22;
          ++HIDWORD(v25);
        }
        --v6;
      }
      while (v6);
      v14 = v24;
      if (v25 > HIDWORD(v25))
      {
        v15 = v24;
        if (HIDWORD(v25))
        {
          v21 = HIDWORD(v25);
          if (HIDWORD(v25) >> 28)
          {
            __break(0xC471u);
            return result;
          }
          v16 = (WTF *)(16 * HIDWORD(v25));
          v17 = (WTF *)WTF::fastMalloc(v16);
          LODWORD(v25) = v21;
          v24 = v17;
          v15 = v14;
          if (v17 != v14)
          {
            v18 = v14;
            do
            {
              v19 = *(_OWORD *)v18;
              v18 = (WTF *)((char *)v18 + 16);
              *(_OWORD *)v17 = v19;
              v17 = (WTF *)((char *)v17 + 16);
              v16 = (WTF *)((char *)v16 - 16);
            }
            while (v16);
            v15 = v24;
          }
        }
        if (v14)
        {
          if (v15 == v14)
          {
            v24 = 0;
            LODWORD(v25) = 0;
          }
          WTF::fastFree(v14, v5);
          v14 = v24;
        }
        else
        {
          v14 = v15;
        }
      }
      v13 = 0;
      *(_QWORD *)a1 = v14;
      v20 = v25;
      v24 = 0;
      v25 = 0;
      *(_QWORD *)(a1 + 8) = v20;
      goto LABEL_19;
    }
    if (v4)
    {
      LODWORD(v25) = v4;
      v24 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v22);
        if (!v23)
          break;
        if (HIDWORD(v25) == (_DWORD)v25)
        {
          WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v24, (unint64_t)&v22);
        }
        else
        {
          *((_OWORD *)v24 + HIDWORD(v25)) = v22;
          ++HIDWORD(v25);
        }
        if (!--v6)
        {
          v7 = v24;
          v8 = v25;
          goto LABEL_18;
        }
      }
LABEL_25:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      v13 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
LABEL_18:
      v13 = 0;
      v24 = 0;
      *(_QWORD *)a1 = v7;
      HIDWORD(v25) = 0;
      *(_QWORD *)(a1 + 8) = v8;
LABEL_19:
      *(_BYTE *)(a1 + 16) = 1;
    }
    result = v24;
    if (v24)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      result = (WTF *)WTF::fastFree(result, v5);
      if (!v13)
        return result;
    }
    else if (!v13)
    {
      return result;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (result)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (!v12)
    return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

void sub_196E9227C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v4;
  uint64_t v5;

  v4 = a2 + 4;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, a2 + 2);
  return IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, v4);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  WTF *v33;
  uint64_t v34;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_27:
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v28 = v27 == 0;
    else
      v28 = 1;
    if (!v28)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    return result;
  }
  v6 = v4;
  v33 = 0;
  v34 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(&v31, a2);
      if (!v32)
      {
LABEL_26:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
        goto LABEL_27;
      }
      v18 = HIDWORD(v34);
      if (HIDWORD(v34) != (_DWORD)v34)
        break;
      v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v31);
      v20 = HIDWORD(v34);
      v21 = HIDWORD(v34) + 1;
      v22 = v33;
      v23 = *v19;
      *v19 = 0;
      *((_QWORD *)v22 + v20) = v23;
      HIDWORD(v34) = v21;
      if (v32)
        goto LABEL_22;
LABEL_24:
      if (!--v6)
      {
        v29 = v33;
        if (v34 > HIDWORD(v34))
        {
          if (HIDWORD(v34))
          {
            LODWORD(v34) = HIDWORD(v34);
            v29 = (WTF *)WTF::fastRealloc(v33, (void *)(8 * HIDWORD(v34)));
          }
          else if (v33)
          {
            v33 = 0;
            LODWORD(v34) = 0;
            WTF::fastFree(v29, v5);
            v29 = v33;
          }
        }
        *(_QWORD *)a1 = v29;
        v30 = v34;
        v33 = 0;
        v34 = 0;
        *(_QWORD *)(a1 + 8) = v30;
        goto LABEL_17;
      }
    }
    v24 = v31;
    v31 = 0;
    *((_QWORD *)v33 + HIDWORD(v34)) = v24;
    HIDWORD(v34) = v18 + 1;
LABEL_22:
    v25 = v31;
    v31 = 0;
    if (v25)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v25 + 8), v5);
    goto LABEL_24;
  }
  if (v4)
  {
    LODWORD(v34) = v4;
    v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(&v31, a2);
      if (!v32)
        goto LABEL_26;
      v7 = HIDWORD(v34);
      if (HIDWORD(v34) != (_DWORD)v34)
        break;
      v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v31);
      v9 = HIDWORD(v34);
      v10 = HIDWORD(v34) + 1;
      v11 = v33;
      v12 = *v8;
      *v8 = 0;
      *((_QWORD *)v11 + v9) = v12;
      HIDWORD(v34) = v10;
      if (v32)
        goto LABEL_10;
LABEL_12:
      if (!--v6)
      {
        v15 = v33;
        v16 = v34;
        goto LABEL_16;
      }
    }
    v13 = v31;
    v31 = 0;
    *((_QWORD *)v33 + HIDWORD(v34)) = v13;
    HIDWORD(v34) = v7 + 1;
LABEL_10:
    v14 = v31;
    v31 = 0;
    if (v14)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v5);
    goto LABEL_12;
  }
  v15 = 0;
  v16 = 0;
LABEL_16:
  v33 = 0;
  v34 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v16;
LABEL_17:
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_196E9253C(_Unwind_Exception *a1, void *a2, uint64_t a3, char a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a3)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a3 + 8), a2);
  }
  WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_BYTE *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    *result = 0;
    result[16] = 0;
    goto LABEL_8;
  }
  result = (_BYTE *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_OWORD *)v3 = v17;
    v3[16] = 1;
LABEL_8:
    v3[24] = 1;
    return result;
  }
LABEL_12:
  *v3 = 0;
  v3[24] = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v16)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::RequestedScrollData>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  int v3;
  char v4;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t result;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned __int16 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  __int16 v38;

  v37 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
  v35 = IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>((unint64_t *)a2);
  v36 = v7;
  v8 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2);
  v9 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2);
  v38 = 0;
  result = (uint64_t)IPC::Decoder::operator>><BOOL>(a2, &v38);
  v11 = HIBYTE(v38);
  if (HIBYTE(v38))
  {
    v12 = v38;
  }
  else
  {
    v28 = *a2;
    v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v29)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
    v12 = 0;
  }
  v13 = (unsigned __int8 *)a2[1];
  v14 = *a2;
  v15 = a2[2] - *a2;
  if ((unint64_t)v13 <= v15)
  {
    v16 = 0;
    v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      v2 = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v30 = *a2;
        v16 = (unsigned __int8 *)a2[1];
      }
      else
      {
        v16 = 0;
        v30 = 0;
      }
      v12 = v2;
    }
    goto LABEL_35;
  }
  v16 = (unsigned __int8 *)(v14 + v15);
  a2[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    v16 = v13;
    v30 = 0;
LABEL_35:
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      v2 = v12;
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v32 + 16))(v32, v30, v16);
        v14 = *a2;
        v13 = (unsigned __int8 *)a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      v12 = v2;
    }
    goto LABEL_36;
  }
  LODWORD(v16) = *v16;
  if (v16 < 2)
  {
    if (!(_DWORD)v16)
    {
      v27 = 0;
      v19 = 0;
      goto LABEL_15;
    }
    v17 = v12;
    v18 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
    LOBYTE(v16) = v18;
    if (v18 >= 0x100u)
    {
      v19 = v18;
      v20 = IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>((unint64_t *)a2);
      if ((v21 & 0xFF00000000) != 0)
      {
        v2 = v20;
        v3 = v21;
        v22 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2);
        LOBYTE(v16) = v22;
        if (v22 >= 0x100u)
        {
          v4 = v22;
          result = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2);
          LOBYTE(v16) = result;
          if ((unsigned __int16)result > 0xFFu)
          {
            v27 = 0;
            LOBYTE(v16) = 1;
            goto LABEL_25;
          }
        }
      }
    }
    v23 = *a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    v12 = v17;
    if (v25 && v24)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
      v12 = v17;
    }
    goto LABEL_12;
  }
LABEL_36:
  *a2 = 0;
  a2[1] = 0;
  v33 = a2[3];
  if (v33 && v13)
  {
    v2 = v12;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v14);
    v12 = v2;
  }
LABEL_12:
  v26 = *a2;
  v13 = (unsigned __int8 *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    goto LABEL_27;
  v19 = 0;
  v27 = 1;
LABEL_15:
  while (1)
  {
    v26 = *a2;
    if (!*a2)
      break;
    if (v37 > 0xFFu && (v36 & 0xFF00000000) != 0 && v8 > 0xFFu && v9 > 0xFFu && v11 && !v27)
    {
      *(_BYTE *)a1 = v37;
      *(_QWORD *)(a1 + 4) = v35;
      *(_DWORD *)(a1 + 12) = v36;
      *(_BYTE *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 17) = v9;
      *(_BYTE *)(a1 + 18) = v12;
      *(_BYTE *)(a1 + 20) = v19;
      *(_QWORD *)(a1 + 24) = v2;
      *(_DWORD *)(a1 + 32) = v3;
      *(_BYTE *)(a1 + 36) = v4;
      *(_BYTE *)(a1 + 37) = result;
      *(_BYTE *)(a1 + 40) = (_BYTE)v16;
      *(_BYTE *)(a1 + 44) = 1;
      return result;
    }
    __break(1u);
LABEL_27:
    v17 = v12;
    if (v13)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    v19 = 0;
    v27 = 1;
LABEL_25:
    v12 = v17;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 44) = 0;
  v34 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v34)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::MouseLocationState>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  v6 = v5;
  if (!v5)
    goto LABEL_9;
  while (1)
  {
    result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
    v9 = v8;
    if (!v8)
    {
      v14 = *a2;
      v15 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v15)
        {
          v18 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
          v9 = 0;
          result = v18;
        }
      }
    }
    if (!*a2)
      break;
    if (v6 && v9)
    {
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = result;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_9:
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
      v13 = v11 == 0;
    else
      v13 = 1;
    if (!v13)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v17)
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v6 = result;
  v7 = a2[2];
  v8 = *a2;
  v9 = a2[1];
  v10 = v7 - v8;
  if (v9 <= v10)
  {
    v27 = 0;
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a2;
        v27 = a2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_21;
  }
  v11 = (unsigned __int8 *)(v8 + v10);
  v12 = v8 + v10 + 1;
  a2[2] = v12;
  if (!v8)
  {
    v27 = v9;
    v28 = 0;
LABEL_21:
    v9 = 0;
    v8 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v8 = *a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
    }
    goto LABEL_22;
  }
  v13 = *v11;
  if (v13 < 3)
  {
    v14 = v13 | 0x100;
    goto LABEL_5;
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  v31 = a2[3];
  if (!v31 || !v9)
  {
    v32 = 0;
    v8 = 0;
    goto LABEL_24;
  }
  result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v8);
  v14 = 0;
  v8 = *a2;
  v9 = a2[1];
  v12 = a2[2];
LABEL_5:
  v15 = v12 - v8;
  if (v9 <= v15)
    goto LABEL_37;
  v16 = (unsigned __int8 *)(v8 + v15);
  a2[2] = (unint64_t)(v16 + 1);
  if (!v8)
  {
    v32 = v9;
    goto LABEL_24;
  }
  v17 = *v16;
  if (v17 >= 2)
    goto LABEL_26;
  if (!v17)
  {
    v26 = 0;
    v25 = 0;
    goto LABEL_17;
  }
  v18 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v20 = v19;
  v2 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v22 = v21;
  v3 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v24 = v23;
  v4 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a2);
  result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a2);
  if (!*a2)
  {
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37 && v36)
    {
      v35 = *(void (**)(void))(*(_QWORD *)v37 + 16);
      goto LABEL_50;
    }
    goto LABEL_30;
  }
  if (v20 && v22 && v24 && v4 > 0xFFu && (unsigned __int16)result > 0xFFu)
  {
    v25 = v18 & 0xFFFFFFFFFFFFFF00;
    v26 = v18;
    LOBYTE(v17) = 1;
LABEL_17:
    if (v14 <= 0xFF)
      goto LABEL_36;
    *(_BYTE *)v6 = v14;
    *(_QWORD *)(v6 + 4) = v25 | v26;
    *(_QWORD *)(v6 + 12) = v2;
    *(_QWORD *)(v6 + 20) = v3;
    *(_BYTE *)(v6 + 28) = v4;
    *(_BYTE *)(v6 + 29) = result;
    *(_BYTE *)(v6 + 32) = v17;
    *(_BYTE *)(v6 + 36) = 1;
    return result;
  }
  do
  {
LABEL_36:
    __break(1u);
LABEL_37:
    v32 = 0;
    v43 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v43 && v9)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v43 + 16))(v43);
      v8 = *a2;
      v32 = a2[1];
    }
    else
    {
      v8 = 0;
    }
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33 && v32)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v8, v32);
      v9 = a2[1];
    }
    else
    {
      v9 = 0;
    }
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34 && v9)
    {
      v35 = *(void (**)(void))(*(_QWORD *)v34 + 16);
LABEL_50:
      v35();
    }
LABEL_30:
    v38 = 0;
    v40 = *a2;
    v39 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v41 = a2[3];
    if (!v41)
      break;
    if (!v39)
    {
      v38 = 0;
      break;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v40);
    v38 = *a2;
  }
  while (*a2);
  *(_BYTE *)v6 = 0;
  *(_BYTE *)(v6 + 36) = 0;
  v42 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v42)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v38);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ScrollingStatePluginHostingNode,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  v4 = a2[3];
  v5 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  v6 = a2[5];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  if ((a2[5] & 1) != 0)
  {
    v10 = a2[13];
    v9 = (__int128 *)(a2 + 13);
    v8 = v10;
    if (v10)
    {
      v11 = *v9;
      v8 = 1;
    }
    else
    {
      LOBYTE(v11) = 0;
    }
    v12 = v8;
    return IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v11);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ScrollingStatePluginScrollingNode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  __int16 v21;
  char v22;
  __int128 v23;
  char v24;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 104))
    {
      v23 = *(_OWORD *)(a2 + 104);
      v9 = 1;
    }
    else
    {
      v9 = 0;
      LOBYTE(v23) = 0;
    }
    v24 = v9;
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v23);
    v7 = *(_QWORD *)(a2 + 40);
    if ((v7 & 2) == 0)
    {
LABEL_3:
      if ((v7 & 4) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_3;
  }
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 128));
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 4) == 0)
  {
LABEL_4:
    if ((v7 & 8) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 136));
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 8) == 0)
  {
LABEL_5:
    if ((v7 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 144));
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x10) == 0)
  {
LABEL_6:
    if ((v7 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = *(_DWORD *)(a2 + 156);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x20) == 0)
  {
LABEL_7:
    if ((v7 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  v12 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x40) == 0)
  {
LABEL_8:
    if ((v7 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(a1, (char *)(a2 + 438));
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x80) == 0)
  {
LABEL_9:
    if ((v7 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(a1, a2 + 452);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x100) == 0)
  {
LABEL_10:
    if ((v7 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(a1, a2 + 168);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x200) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  *(_QWORD *)&v23 = *(_QWORD *)(a2 + 240);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  *(_QWORD *)&v23 = *(_QWORD *)(a2 + 248);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x800) == 0)
  {
LABEL_13:
    if ((v7 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v14 = *(_BYTE *)(a2 + 533);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x1000) == 0)
  {
LABEL_14:
    if ((v7 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_39:
  v15 = *(_QWORD *)(a2 + 272);
  if (v15)
  {
    v23 = *(_OWORD *)(a2 + 272);
    LOBYTE(v15) = 1;
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  v24 = v15;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x2000) == 0)
  {
LABEL_15:
    if ((v7 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_42:
  v16 = *(_QWORD *)(a2 + 312);
  if (v16)
  {
    v23 = *(_OWORD *)(a2 + 312);
    LOBYTE(v16) = 1;
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  v24 = v16;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x4000) == 0)
  {
LABEL_16:
    if ((v7 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_45:
  v17 = *(_QWORD *)(a2 + 352);
  if (v17)
  {
    v23 = *(_OWORD *)(a2 + 352);
    LOBYTE(v17) = 1;
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  v24 = v17;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x8000) == 0)
  {
LABEL_17:
    if ((v7 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_48:
  v18 = *(_QWORD *)(a2 + 392);
  if (v18)
  {
    v23 = *(_OWORD *)(a2 + 392);
    LOBYTE(v18) = 1;
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  v24 = v18;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v23);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x10000) == 0)
  {
LABEL_18:
    if ((v7 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v19 = *(_BYTE *)(a2 + 534);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x20000) == 0)
  {
LABEL_19:
    if ((v7 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(a1, (_DWORD *)(a2 + 420));
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x40000) == 0)
  {
LABEL_20:
    if ((v7 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *(_WORD *)(a2 + 416);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  *IPC::Encoder::grow(a1, 1uLL, 1) = HIBYTE(v20);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x80000) == 0)
  {
LABEL_21:
    if ((v7 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *(_WORD *)(a2 + 436);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  *IPC::Encoder::grow(a1, 1uLL, 1) = HIBYTE(v21);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 0x100000) == 0)
  {
LABEL_22:
    if ((v7 & 0x200000) == 0)
      return;
    goto LABEL_23;
  }
LABEL_55:
  v22 = *(_BYTE *)(a2 + 532);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  if ((*(_QWORD *)(a2 + 40) & 0x200000) != 0)
  {
LABEL_23:
    v8 = *(_BYTE *)(a2 + 496);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
    IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(a1, a2 + 500);
  }
}

_QWORD *IPC::ArgumentCoder<WebCore::ScrollingStatePositionedNode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  char v19;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  v6 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *result = v6;
  v8 = *(_QWORD *)(a2 + 40);
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 104))
    {
      v18 = *(_OWORD *)(a2 + 104);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      LOBYTE(v18) = 0;
    }
    v19 = v13;
    result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v18);
    v8 = *(_QWORD *)(a2 + 40);
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0)
        return result;
      goto LABEL_4;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = *(unsigned int *)(a2 + 140);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *result = v14;
  v15 = *(unsigned int *)(a2 + 140);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)(a2 + 128);
    v17 = 16 * v15;
    do
    {
      result = IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, v16);
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  if ((*(_QWORD *)(a2 + 40) & 4) != 0)
  {
LABEL_4:
    v9 = *(_DWORD *)(a2 + 144);
    v10 = *(_DWORD *)(a2 + 148);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
    v11 = *(_DWORD *)(a2 + 152);
    v12 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
    result = IPC::Encoder::grow(a1, 4uLL, 4);
    *(_DWORD *)result = v12;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  char v6;

  v4 = *(_BYTE *)a2;
  result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  *(_BYTE *)result = v4;
  v6 = *(_BYTE *)a2;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    result = IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 1);
    v6 = *(_BYTE *)a2;
    if ((*(_BYTE *)a2 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 3);
    }
  }
  else if ((*(_BYTE *)a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 2);
  if ((*(_BYTE *)a2 & 4) != 0)
    return IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 3);
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::decode@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v2 = result;
  v4 = result[1];
  v5 = (char *)*result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v12 = 0;
    v13 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *v2;
        v12 = v2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_23;
  }
  v7 = &v5[v6];
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
LABEL_23:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v15 = v2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = (char *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_24;
  }
  v8 = *v7;
  if (v8 >= 8)
  {
LABEL_24:
    *v2 = 0;
    v2[1] = 0;
    result = (uint64_t *)v2[3];
    if (result && v4)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*result + 16))(result, v5);
    goto LABEL_25;
  }
  if ((v8 & 1) == 0)
  {
    v9 = 0;
    if ((v8 & 2) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  result = (uint64_t *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>((uint64_t)&v16, result);
  if (!v17)
  {
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v9 = v16;
  if ((v8 & 2) == 0)
  {
LABEL_6:
    v10 = 0;
    if ((v8 & 4) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_11:
  result = (uint64_t *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>((uint64_t)&v16, v2);
  if (v17)
  {
    v10 = v16;
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if (*v2)
      {
        v11 = 0;
LABEL_15:
        *(_BYTE *)a2 = v8;
        *(_QWORD *)(a2 + 8) = v9;
        *(_QWORD *)(a2 + 16) = v10;
        *(_QWORD *)(a2 + 24) = v11;
        *(_BYTE *)(a2 + 32) = 1;
        return result;
      }
      goto LABEL_17;
    }
LABEL_13:
    result = (uint64_t *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>((uint64_t)&v16, v2);
    if (v17)
    {
      v11 = v16;
      if (*v2)
        goto LABEL_15;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v11)
        result = (uint64_t *)WTF::fastFree((WTF *)(v11 - 16), v5);
      goto LABEL_18;
    }
LABEL_17:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
LABEL_18:
    if (v10)
      result = (uint64_t *)WTF::fastFree((WTF *)(v10 - 16), v5);
    goto LABEL_20;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_20:
  if (v9)
    return (uint64_t *)WTF::fastFree((WTF *)(v9 - 16), v5);
  return result;
}

void sub_196E93778(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>(uint64_t result, uint64_t *a2)
{
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  int v10;
  unint64_t *v11;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  __int16 v36;
  char v37;

  v3 = (_BYTE *)result;
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v28 = 0;
    v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v5, v4);
        v29 = *a2;
        v28 = a2[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    goto LABEL_48;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v28 = v4;
    v29 = 0;
LABEL_48:
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v28)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
    *v3 = 0;
    v3[8] = 0;
    goto LABEL_41;
  }
  v9 = *v8;
  v34 = 0;
  if (!v9)
  {
    v27 = 0;
LABEL_45:
    *(_QWORD *)v3 = v27;
    v3[8] = 1;
    return result;
  }
  v10 = 0;
  while (1)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v32);
    if (!v33)
      break;
    if (*((_QWORD *)&v32 + 1) == -1 || v32 == 0)
      break;
    v13 = v34;
    if (v34
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&v34, 0), (v13 = v34) != 0))
    {
      v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      v14 = 0;
    }
    v35 = -1640531527;
    v36 = 0;
    v37 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v35, &v32);
    result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
    v15 = result & v14;
    v11 = (unint64_t *)(v13 + 16 * (result & v14));
    v17 = *v11;
    v16 = v11[1];
    if (*(_OWORD *)v11 != 0)
    {
      v18 = 0;
      v19 = 1;
      while (__PAIR128__(v16, v17) != v32)
      {
        if (v16 == -1)
          v18 = v11;
        v15 = (v15 + v19) & v14;
        v11 = (unint64_t *)(v13 + 16 * v15);
        v17 = *v11;
        v16 = v11[1];
        ++v19;
        if (*(_OWORD *)v11 == 0)
        {
          if (v18)
          {
            *v18 = 0;
            v18[1] = 0;
            --*(_DWORD *)(v34 - 16);
            v11 = v18;
          }
          goto LABEL_25;
        }
      }
      break;
    }
LABEL_25:
    *(_OWORD *)v11 = v32;
    if (v34)
      v20 = *(_DWORD *)(v34 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v34 - 12) = v20;
    if (v34)
      v21 = *(_DWORD *)(v34 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v34 - 16) + v21);
    v23 = *(unsigned int *)(v34 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_34;
LABEL_33:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&v34, v11);
      goto LABEL_34;
    }
    if (3 * v23 <= 4 * v22)
      goto LABEL_33;
LABEL_34:
    if (++v10 == v9)
    {
      v27 = v34;
      goto LABEL_45;
    }
  }
  v24 = v34;
  *v3 = 0;
  v3[8] = 0;
  if (v24)
    WTF::fastFree((WTF *)(v24 - 16), v11);
LABEL_41:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

void sub_196E93A54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 8));
  return IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 16));
}

void IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;
  char v10;
  CFTypeRef v11;
  char v12;

  v4 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&v11);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&cf);
  if (!*a1)
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v10)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v4 <= 0xFFu || !v12 || !v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = v11;
  v11 = 0;
  v6 = cf;
  cf = 0;
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = 1;
LABEL_6:
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
LABEL_8:
  if (v12)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
      CFRelease(v8);
  }
}

void sub_196E93B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[6];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)(a2 + 2), v5);
}

uint64_t IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;
  _BYTE v9[16];
  int v10;
  char v11;
  char v12;

  v4 = IPC::Decoder::decode<unsigned int>(a1);
  result = (uint64_t)IPC::Decoder::decode<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>(a1, (uint64_t)v9);
  if (!*a1)
    goto LABEL_11;
  if ((v4 & 0xFF00000000) == 0 || !v11)
  {
    __break(1u);
LABEL_11:
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_6;
  }
  v6 = v4;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v9);
  *(_DWORD *)a2 = v4;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v7);
  a2[32] = 1;
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v8])(&v12, v7);
LABEL_6:
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v10])(&v6, v9);
  }
  return result;
}

void sub_196E93D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a13 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a13])(v20 - 33, v19);
  if (a19)
  {
    if (a17 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a17])(&a10, &a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E93DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebsiteData::Entry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char *result;

  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2, v4);
  v5 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataType>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 16));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 24));
  return IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl **IPC::ArgumentCoder<WebKit::WebsiteData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl **result;
  WTF *v14;
  unsigned int v15;
  WTF *v16;
  WTF *v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  char v32;
  WTF::StringImpl **v33;
  char v34;
  WTF *v35;
  uint64_t v36;
  char v37;
  WTF *v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    LOBYTE(v35) = 0;
    v37 = 0;
LABEL_36:
    v20 = *a1;
    v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
      v23 = v21 == 0;
    else
      v23 = 1;
    if (!v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    goto LABEL_41;
  }
  v6 = v4;
  v38 = 0;
  v39 = 0;
  if (v4 >= 0x5555)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebsiteData::Entry>((uint64_t)v40, a1);
      if (!v43)
        goto LABEL_35;
      v12 = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        result = (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v38, (unint64_t)v40);
      }
      else
      {
        v14 = v38;
        result = (WTF::StringImpl **)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v38 + 48 * HIDWORD(v39), (uint64_t)v40);
        *((_OWORD *)v14 + 3 * v12 + 2) = v42;
        ++HIDWORD(v39);
      }
      if (v43 && (_DWORD)v41 != -1)
        result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v41])(&v33, v40);
      --v6;
    }
    while (v6);
    v15 = HIDWORD(v39);
    v16 = v38;
    if (v39 > HIDWORD(v39))
    {
      v17 = v38;
      if (HIDWORD(v39))
      {
        if (HIDWORD(v39) >= 0x5555556)
        {
          __break(0xC471u);
          goto LABEL_63;
        }
        v18 = 48 * HIDWORD(v39);
        v19 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v39)));
        LODWORD(v39) = v18 / 0x30;
        v38 = v19;
        v17 = v16;
        if (v19 != v16)
        {
          WTF::VectorMover<false,WebKit::WebsiteData::Entry>::move((uint64_t)v16, (uint64_t)v16 + 48 * v15, (uint64_t)v19);
          v17 = v38;
        }
      }
      if (v16)
      {
        if (v17 == v16)
        {
          v38 = 0;
          LODWORD(v39) = 0;
        }
        WTF::fastFree(v16, v5);
        v16 = v38;
      }
      else
      {
        v16 = v17;
      }
    }
    v35 = v16;
    v30 = v39;
    v38 = 0;
    v39 = 0;
    v36 = v30;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v39) = 48 * (int)v4 / 0x30u;
    v38 = (WTF *)WTF::fastMalloc((WTF *)(48 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteData::Entry>((uint64_t)v40, a1);
      if (!v43)
        break;
      v8 = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v38, (unint64_t)v40);
      }
      else
      {
        v9 = v38;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v38 + 48 * HIDWORD(v39), (uint64_t)v40);
        *((_OWORD *)v9 + 3 * v8 + 2) = v42;
        ++HIDWORD(v39);
      }
      if (v43 && (_DWORD)v41 != -1)
        ((void (*)(WTF::StringImpl ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v41])(&v33, v40);
      if (!--v6)
      {
        v10 = v38;
        v11 = v39;
        goto LABEL_16;
      }
    }
LABEL_35:
    LOBYTE(v35) = 0;
    v37 = 0;
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v7);
    goto LABEL_36;
  }
  v10 = 0;
  v11 = 0;
LABEL_16:
  v38 = 0;
  v39 = 0;
  v35 = v10;
  v36 = v11;
LABEL_17:
  v37 = 1;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v5);
LABEL_41:
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v38);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v33);
  result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v31);
  if (*a1)
  {
    if (v37)
    {
      v25 = v35;
      v26 = v36;
      v35 = 0;
      v36 = 0;
      if ((_BYTE)v39)
      {
        v27 = v38;
        v38 = 0;
        if (v34)
        {
          v28 = v33;
          v33 = 0;
          if (v32)
          {
            v29 = v31;
            v31 = 0;
            v40[0] = 0;
            v40[1] = 0;
            *(_QWORD *)a2 = v25;
            *(_QWORD *)(a2 + 8) = v26;
            v40[2] = 0;
            v41 = 0;
            *(_QWORD *)(a2 + 16) = v27;
            *(_QWORD *)(a2 + 24) = v28;
            *(_QWORD *)&v42 = 0;
            *(_QWORD *)(a2 + 32) = v29;
            *(_BYTE *)(a2 + 40) = 1;
            result = (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v24);
            goto LABEL_47;
          }
        }
      }
    }
LABEL_63:
    __break(1u);
    return result;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_47:
  if (v32)
  {
    result = v31;
    if (v31)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)v24);
  }
  if (v34)
  {
    result = v33;
    if (v33)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v24);
  }
  if ((_BYTE)v39)
  {
    result = (WTF::StringImpl **)v38;
    if (v38)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v38, (WTF::StringImpl *)v24);
  }
  if (v37)
    return (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v24);
  return result;
}

void sub_196E94354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(_QWORD *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2 + 1);
  return IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  WTF *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  WTF *v50;
  uint64_t v51;

  IPC::Decoder::decode<WTF::String>(a1, &v43);
  v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7 = v6;
  v8 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v9)
  {
    v2 = v8;
    v50 = 0;
    v51 = 0;
    if (v8 >= 0x4924)
      goto LABEL_19;
    if (!v8)
    {
      LODWORD(v24) = 0;
      v25 = 0;
      result = 0;
LABEL_12:
      if (!*a1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (result)
          result = WTF::fastFree((WTF *)result, v9);
        goto LABEL_36;
      }
      v26 = 0;
      goto LABEL_14;
    }
    v10 = 56 * v8;
    v11 = WTF::fastMalloc((WTF *)(56 * v8));
    LODWORD(v51) = v10 / 0x38;
    v50 = (WTF *)v11;
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebGPU::BindGroupEntry>((uint64_t)&v45, a1);
      if (!v49)
        break;
      v12 = HIDWORD(v51);
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        v13 = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v45);
        v14 = HIDWORD(v51);
        result = (uint64_t)v50;
        v16 = (char *)v50 + 56 * HIDWORD(v51);
        v17 = *(_OWORD *)v13;
        v18 = *(_OWORD *)(v13 + 16);
        v19 = *(_OWORD *)(v13 + 32);
        *((_QWORD *)v16 + 6) = *(_QWORD *)(v13 + 48);
        *((_OWORD *)v16 + 1) = v18;
        *((_OWORD *)v16 + 2) = v19;
        *(_OWORD *)v16 = v17;
        v12 = v14;
      }
      else
      {
        result = (uint64_t)v50;
        v20 = (char *)v50 + 56 * HIDWORD(v51);
        v21 = v45;
        v22 = v46;
        v23 = v47;
        *((_QWORD *)v20 + 6) = v48;
        *((_OWORD *)v20 + 1) = v22;
        *((_OWORD *)v20 + 2) = v23;
        *(_OWORD *)v20 = v21;
      }
      LODWORD(v24) = v12 + 1;
      HIDWORD(v51) = v24;
      if (!--v2)
      {
        v25 = v51;
        goto LABEL_12;
      }
    }
LABEL_32:
    v41 = v50;
    if (v50)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      WTF::fastFree(v41, v9);
    }
  }
  v9 = (void *)*a1;
  v42 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (!result
    || !v42
    || (result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v9), (v24 = *a1) == 0))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_36;
  }
  result = 0;
  v26 = 1;
LABEL_14:
  if (!v44 || (v27 = v43, v43 = 0, !v7) || v26)
  {
    __break(1u);
    do
    {
LABEL_19:
      result = (uint64_t)IPC::Decoder::decode<WebKit::WebGPU::BindGroupEntry>((uint64_t)&v45, a1);
      if (!v49)
        goto LABEL_32;
      v28 = HIDWORD(v51);
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        result = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v45);
        v28 = HIDWORD(v51);
        v29 = v50;
        v30 = (char *)v50 + 56 * HIDWORD(v51);
        v31 = *(_OWORD *)result;
        v32 = *(_OWORD *)(result + 16);
        v33 = *(_OWORD *)(result + 32);
        *((_QWORD *)v30 + 6) = *(_QWORD *)(result + 48);
      }
      else
      {
        v29 = v50;
        v30 = (char *)v50 + 56 * HIDWORD(v51);
        v31 = v45;
        v32 = v46;
        v33 = v47;
        *((_QWORD *)v30 + 6) = v48;
      }
      *((_OWORD *)v30 + 1) = v32;
      *((_OWORD *)v30 + 2) = v33;
      *(_OWORD *)v30 = v31;
      v34 = (v28 + 1);
      HIDWORD(v51) = v28 + 1;
      --v2;
    }
    while (v2);
    v25 = v51;
    if (v51 <= v34)
    {
      result = (uint64_t)v29;
    }
    else
    {
      if (!(_DWORD)v34)
        goto LABEL_48;
      v35 = v29;
      if (v34 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      v2 = 56 * v34;
      result = WTF::fastMalloc((WTF *)(56 * v34));
      v25 = v2 / 0x38;
      LODWORD(v51) = v2 / 0x38;
      v50 = (WTF *)result;
      v29 = v35;
      if ((WTF *)result == v35)
      {
LABEL_48:
        v50 = 0;
        LODWORD(v51) = 0;
      }
      else
      {
        v36 = 0;
        do
        {
          v37 = result + v36;
          v38 = *(_OWORD *)((char *)v35 + v36);
          v39 = *(_OWORD *)((char *)v35 + v36 + 16);
          v40 = *(_OWORD *)((char *)v35 + v36 + 32);
          *(_QWORD *)(v37 + 48) = *(_QWORD *)((char *)v35 + v36 + 48);
          *(_OWORD *)(v37 + 16) = v39;
          *(_OWORD *)(v37 + 32) = v40;
          *(_OWORD *)v37 = v38;
          v36 += 56;
        }
        while (v2 != v36);
        if (!v35)
          goto LABEL_50;
      }
      WTF::fastFree(v29, v9);
      result = (uint64_t)v50;
      v25 = v51;
    }
LABEL_50:
    LODWORD(v24) = HIDWORD(v51);
    goto LABEL_12;
  }
  *(_QWORD *)a2 = v27;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = v25;
  *(_DWORD *)(a2 + 28) = v24;
  *(_BYTE *)(a2 + 32) = 1;
LABEL_36:
  if (v44)
  {
    result = (uint64_t)v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E947E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  WTF *v12;

  v12 = *(WTF **)(v10 - 64);
  if (v12)
  {
    *(_QWORD *)(v10 - 64) = 0;
    *(_DWORD *)(v10 - 56) = 0;
    WTF::fastFree(v12, a2);
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  void *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;

  IPC::Decoder::decode<WTF::String>(a1, &v11);
  result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v8);
  if (*a1)
  {
    if (v12)
    {
      v6 = v11;
      v11 = 0;
      if (v10)
      {
        v7 = v8;
        *(_QWORD *)a2 = v6;
        *(_QWORD *)(a2 + 8) = v7;
        *(_QWORD *)(a2 + 16) = v9;
        *(_BYTE *)(a2 + 24) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v10)
  {
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      result = (WTF *)WTF::fastFree(result, v5);
    }
  }
LABEL_5:
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E94914(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E949A0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_BYTE *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BufferBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BufferBindingLayout> const&>(a1, (uint64_t)(a2 + 2));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)a2 + 32);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(a1, (uint64_t)a2 + 34);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(a1, (uint64_t)a2 + 38);
  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(a1, (uint64_t)a2 + 42);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;

  v3 = result;
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v6 >= v5;
  v7 = v6 - v5;
  if (v20)
  {
    v8 = v7 + v4;
    v9 = v7 + v4 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v4 = v9;
    }
  }
  if (v4 >= result[1])
  {
    v11 = 0;
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4++) = *(_BYTE *)(a2 + 4);
    result[2] = v4;
    v11 = result[1];
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (v4 >= v11)
      goto LABEL_57;
    v12 = v4 + 1;
    *(_BYTE *)(*result + v4) = 1;
    result[2] = v4 + 1;
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_50;
    if (v12 >= result[1] || (*(_BYTE *)(*result + v12) = *(_BYTE *)(a2 + 8), result[2] = v4 + 2, v4 + 2 >= result[1]))
    {
LABEL_57:
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v4 + 2) = *(_BYTE *)(a2 + 9);
      result[2] = v4 + 3;
    }
    result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(result, (_QWORD *)(a2 + 16));
    v4 = v3[2];
  }
  else if (v4 >= v11)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4++) = 0;
    result[2] = v4;
  }
  v13 = v3[1];
  if (*(_BYTE *)(a2 + 33))
  {
    if (v4 < v13)
    {
      v14 = v4 + 1;
      *(_BYTE *)(*v3 + v4) = 1;
      v3[2] = v4 + 1;
      if (!*(_BYTE *)(a2 + 33))
        goto LABEL_50;
      if (v14 < v3[1])
      {
        v4 += 2;
        *(_BYTE *)(*v3 + v14) = *(_BYTE *)(a2 + 32);
LABEL_26:
        v3[2] = v4;
        goto LABEL_27;
      }
      ++v4;
    }
  }
  else if (v4 < v13)
  {
    *(_BYTE *)(*v3 + v4++) = 0;
    goto LABEL_26;
  }
  v3[1] = 0;
LABEL_27:
  v15 = v3[1];
  if (*(_BYTE *)(a2 + 37))
  {
    if (v4 < v15)
    {
      v16 = v4 + 1;
      *(_BYTE *)(*v3 + v4) = 1;
      v3[2] = v4 + 1;
      if (!*(_BYTE *)(a2 + 37))
        goto LABEL_50;
      if (v16 < v3[1])
      {
        *(_BYTE *)(*v3 + v16) = *(_BYTE *)(a2 + 34);
        v3[2] = v4 + 2;
        if (v4 + 2 >= v3[1])
        {
          v4 += 2;
          goto LABEL_64;
        }
        v16 = v4 + 3;
        *(_BYTE *)(*v3 + v4 + 2) = *(_BYTE *)(a2 + 35);
        v3[2] = v4 + 3;
        if (v4 + 3 < v3[1])
        {
          v4 += 4;
          *(_BYTE *)(*v3 + v16) = *(_BYTE *)(a2 + 36);
LABEL_36:
          v3[2] = v4;
          goto LABEL_37;
        }
      }
      v4 = v16;
    }
  }
  else if (v4 < v15)
  {
    *(_BYTE *)(*v3 + v4++) = 0;
    goto LABEL_36;
  }
LABEL_64:
  v3[1] = 0;
LABEL_37:
  v17 = v3[1];
  if (!*(_BYTE *)(a2 + 41))
  {
    if (v4 < v17)
    {
      *(_BYTE *)(*v3 + v4++) = 0;
      goto LABEL_46;
    }
LABEL_66:
    v3[1] = 0;
    goto LABEL_47;
  }
  if (v4 >= v17)
    goto LABEL_66;
  v18 = v4 + 1;
  *(_BYTE *)(*v3 + v4) = 1;
  v3[2] = v4 + 1;
  if (!*(_BYTE *)(a2 + 41))
    goto LABEL_50;
  if (v18 >= v3[1])
    goto LABEL_60;
  *(_BYTE *)(*v3 + v18) = *(_BYTE *)(a2 + 38);
  v3[2] = v4 + 2;
  if (v4 + 2 >= v3[1])
  {
    v4 += 2;
    goto LABEL_66;
  }
  v18 = v4 + 3;
  *(_BYTE *)(*v3 + v4 + 2) = *(_BYTE *)(a2 + 39);
  v3[2] = v4 + 3;
  if (v4 + 3 >= v3[1])
  {
LABEL_60:
    v4 = v18;
    goto LABEL_66;
  }
  v4 += 4;
  *(_BYTE *)(*v3 + v18) = *(_BYTE *)(a2 + 40);
LABEL_46:
  v3[2] = v4;
LABEL_47:
  v19 = v3[1];
  v20 = v4 >= v19;
  if (!*(_BYTE *)(a2 + 43))
    goto LABEL_51;
  if (v4 >= v19)
  {
LABEL_56:
    v3[1] = 0;
    return result;
  }
  *(_BYTE *)(*v3 + v4) = 1;
  v3[2] = v4 + 1;
  if (*(_BYTE *)(a2 + 43))
    return result;
LABEL_50:
  result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_51:
  if (v20)
    goto LABEL_56;
  *(_BYTE *)(*v3 + v4) = 0;
  v3[2] = v4 + 1;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOWORD(v4) = *((_WORD *)v2 + 8);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 18);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 8));
  result = IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)(a2 + 16));
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 18);
    a1[2] = v5 + 1;
  }
  return result;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 8;
    v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFF7)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  char v31;

  IPC::Decoder::decode<WTF::String>(a1, &v30);
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v18 = v4;
      v19 = 0;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5, v4);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
    v10 = 0;
    v9 = 1;
LABEL_8:
    result = IPC::Decoder::decode<unsigned short>(a1);
    v12 = a1[1];
    v13 = (WTF::StringImpl *)*a1;
    v14 = a1[2] - *a1;
    if (v12 <= v14)
      break;
    v15 = (unsigned __int8 *)v13 + v14;
    a1[2] = (uint64_t)(v15 + 1);
    if (!v13)
    {
      v22 = v12;
      v23 = 0;
      goto LABEL_23;
    }
    v16 = *v15;
    if (v16 > 1)
      goto LABEL_24;
    v4 = 0;
    v5 = v16 != 0;
LABEL_12:
    if (v31)
    {
      v17 = v30;
      v30 = 0;
      if (!v9 && (result & 0xFF0000) != 0 && !(_DWORD)v4)
      {
        *(_QWORD *)a2 = v17;
        *(_QWORD *)(a2 + 8) = v10;
        *(_WORD *)(a2 + 16) = result;
        *(_BYTE *)(a2 + 18) = v5;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
    }
    __break(1u);
  }
  v22 = 0;
  v23 = 0;
  *a1 = 0;
  a1[1] = 0;
  v24 = a1[3];
  if (v24)
  {
    v29 = result;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      v23 = *a1;
      v22 = a1[1];
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    result = v29;
  }
LABEL_23:
  v12 = 0;
  v13 = 0;
  *a1 = 0;
  a1[1] = 0;
  v25 = a1[3];
  if (v25)
  {
    v28 = result;
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
      v13 = (WTF::StringImpl *)*a1;
      v12 = a1[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    result = v28;
  }
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  v26 = a1[3];
  if (v26)
  {
    if (v12)
    {
      v27 = result;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v26 + 16))(v26, v13);
      result = v27;
      if (*a1)
      {
        v5 = 0;
        v4 = 1;
        goto LABEL_12;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v31)
  {
    result = (uint64_t)v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E95160(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v8;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  WTF::StringImpl *v87;
  char v88;
  __int16 v89;

  IPC::Decoder::decode<WTF::String>(a1, &v87);
  v89 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v89);
  v4 = v89;
  if (HIBYTE(v89))
    v5 = v89 > 2u;
  else
    v5 = 1;
  v6 = v5;
  if (v6 == 1)
    goto LABEL_39;
  while (1)
  {
    v7 = a1[1];
    v8 = (WTF::StringImpl *)*a1;
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v7 >= v9 && v7 - v9 > 7)
    {
      v11 = (uint64_t *)((char *)v8 + v9);
      a1[2] = (uint64_t)(v11 + 1);
      if (v8)
      {
        v12 = 0;
        v13 = *v11;
        goto LABEL_15;
      }
      v31 = v7;
      v32 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        v74 = v4;
        v83 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
          v32 = *a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        v6 = v83;
        v4 = v74;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      v70 = v4;
      v79 = v6;
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
        v13 = 0;
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v13 = 0;
      }
      v12 = 1;
      v6 = v79;
      v4 = v70;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v13 = 0;
      v12 = 1;
    }
LABEL_15:
    v14 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v8;
    if (v7 >= v14 && v7 - v14 > 7)
    {
      v16 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v16 + 1);
      if (v8)
      {
        v17 = 0;
        v18 = *v16;
        goto LABEL_22;
      }
      v35 = v7;
      v36 = 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        v67 = v12;
        v75 = v4;
        v61 = v13;
        v84 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          v36 = *a1;
          v35 = a1[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v6 = v84;
        v12 = v67;
        v4 = v75;
        v13 = v61;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      v64 = v12;
      v71 = v4;
      v58 = v13;
      v80 = v6;
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
        v18 = 0;
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v18 = 0;
      }
      v17 = 1;
      v6 = v80;
      v12 = v64;
      v4 = v71;
      v13 = v58;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v17 = 1;
    }
LABEL_22:
    v19 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v8;
    if (v7 < v19 || v7 - v19 <= 7)
    {
      v39 = 0;
      v40 = 0;
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41)
      {
        v56 = v17;
        v52 = v18;
        v68 = v12;
        v76 = v4;
        v62 = v13;
        v85 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
          v40 = *a1;
          v39 = a1[1];
        }
        else
        {
          v39 = 0;
          v40 = 0;
        }
        v6 = v85;
        v12 = v68;
        v4 = v76;
        v13 = v62;
        v18 = v52;
        v17 = v56;
      }
    }
    else
    {
      v20 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v20 + 1);
      if (v8)
      {
        v21 = 0;
        v22 = *v20;
        goto LABEL_26;
      }
      v39 = v7;
      v40 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      v54 = v17;
      v50 = v18;
      v65 = v12;
      v72 = v4;
      v59 = v13;
      v81 = v6;
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
        v22 = 0;
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v22 = 0;
      }
      v21 = 1;
      v6 = v81;
      v12 = v65;
      v4 = v72;
      v13 = v59;
      v18 = v50;
      v17 = v54;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v22 = 0;
      v21 = 1;
    }
LABEL_26:
    v23 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v8;
    if (v7 < v23 || v7 - v23 <= 7)
      break;
    v24 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v24 + 1);
    if (!v8)
    {
      v43 = v7;
      v44 = 0;
      goto LABEL_51;
    }
    v25 = 0;
    v26 = *v24;
LABEL_30:
    if (v88)
    {
      result = v87;
      v87 = 0;
      if (!v6 && !v12 && !v17 && !v21 && !v25)
      {
        *(_QWORD *)a2 = result;
        *(_BYTE *)(a2 + 8) = v4;
        *(_QWORD *)(a2 + 16) = v13;
        *(_QWORD *)(a2 + 24) = v18;
        *(_QWORD *)(a2 + 32) = v22;
        *(_QWORD *)(a2 + 40) = v26;
        *(_BYTE *)(a2 + 48) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_39:
    v28 = *a1;
    v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      v78 = v6;
      if (v29)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      v4 = 0;
      v6 = v78;
    }
    else
    {
      v4 = 0;
    }
  }
  v43 = 0;
  v44 = 0;
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (v45)
  {
    v49 = v21;
    v47 = v22;
    v57 = v17;
    v53 = v18;
    v69 = v12;
    v77 = v4;
    v63 = v13;
    v86 = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v44 = *a1;
      v43 = a1[1];
    }
    else
    {
      v43 = 0;
      v44 = 0;
    }
    v6 = v86;
    v12 = v69;
    v4 = v77;
    v13 = v63;
    v18 = v53;
    v17 = v57;
    v22 = v47;
    v21 = v49;
  }
LABEL_51:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v43)
    {
      v48 = v21;
      v46 = v22;
      v55 = v17;
      v51 = v18;
      v66 = v12;
      v73 = v4;
      v60 = v13;
      v82 = v6;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v44, v43);
      v6 = v82;
      v12 = v66;
      v4 = v73;
      v13 = v60;
      v18 = v51;
      v17 = v55;
      v22 = v46;
      v21 = v48;
      if (*a1)
      {
        v26 = 0;
        v25 = 1;
        goto LABEL_30;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v88)
  {
    result = v87;
    v87 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9578C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 - 32))
  {
    v4 = *(WTF::StringImpl **)(v2 - 40);
    *(_QWORD *)(v2 - 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::ComputePassDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  char v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;

  IPC::Decoder::decode<WTF::String>(a1, &v10);
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>>(a1, (uint64_t)&v7);
  if (*a1)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v9)
      {
        *(_OWORD *)(a2 + 8) = v7;
        *(_BYTE *)(a2 + 24) = v8;
        *(_QWORD *)a2 = v6;
        *(_BYTE *)(a2 + 32) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E95888(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(a1, a2 + 2);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(_QWORD *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2 + 1);
  return IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(a1, a2 + 2);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  WTF::StringImpl *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  char v48;

  IPC::Decoder::decode<WTF::String>(a1, &v41);
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v46);
  IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v43, a1);
  if (!*a1)
    goto LABEL_46;
  if (!v9 || !v48)
    goto LABEL_45;
  LOBYTE(v30) = 0;
  v31 = 0;
  if (v47)
  {
    v11 = v46;
    v46 = 0;
    v30 = v11;
    v31 = 1;
  }
  if (!v45)
    goto LABEL_45;
  v12 = v43;
  v13 = v44;
  v43 = 0;
  v44 = 0;
  v35 = v7;
  LOBYTE(v36) = 0;
  v37 = 0;
  if (v47)
  {
    v14 = v30;
    v30 = 0;
    v36 = v14;
    v37 = 1;
  }
  v32 = 0;
  v33 = 0;
  v38 = v12;
  v39 = v13;
  v40 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v10);
  if (v31 && v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v30 -= 2;
  }
  v15 = 1;
LABEL_15:
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v10);
  v16 = v15;
  while (1)
  {
    if (v48)
    {
      if (v47)
      {
        v17 = v46;
        v46 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
            if (v16)
              goto LABEL_22;
            goto LABEL_42;
          }
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    if (v16)
      goto LABEL_22;
LABEL_42:
    v10 = (void *)*a1;
    v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v28)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v29 + 16))(v29, v10);
LABEL_22:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_35;
    }
    if (v42)
    {
      v18 = v41;
      v41 = 0;
      if (v6)
      {
        if (v40)
          break;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    v15 = 0;
    v16 = 0;
    LOBYTE(v35) = 0;
    v40 = 0;
    if (v45)
      goto LABEL_15;
  }
  v19 = v35;
  LOBYTE(v32) = 0;
  LOBYTE(v33) = 0;
  v20 = v37;
  if (v37)
  {
    v21 = v36;
    v36 = 0;
    v32 = v21;
    LOBYTE(v33) = 1;
  }
  v22 = v38;
  v23 = v39;
  v38 = 0;
  v39 = 0;
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v19;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v20)
  {
    v24 = v32;
    v32 = 0;
    *(_QWORD *)(a2 + 24) = v24;
    *(_BYTE *)(a2 + 32) = 1;
  }
  v34[0] = 0;
  v34[1] = 0;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v23;
  *(_BYTE *)(a2 + 56) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v10);
  if ((_BYTE)v33)
  {
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
LABEL_35:
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v10);
  if (v42)
  {
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E95CA4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, a2);
  if (a24)
  {
    v26 = a23;
    a23 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 1));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 3));
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(a1, (char *)(a2 + 5));
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(a1, (char *)(a2 + 9));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 24));
  v5 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v7;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(char *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v4) = *(_BYTE *)a2;
    *((_QWORD *)a1 + 2) = v4 + 1;
  }
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 3));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (_BYTE *)(a2 + 5));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (_BYTE *)(a2 + 9));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 24);
  IPC::StreamConnectionEncoder::operator<<<int const&>(a1, (_DWORD *)(a2 + 32));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 36));
  return IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 40));
}

uint64_t IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 0x5Eu;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_12:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
      v8 = v7;
      v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0)
        v8 = 0;
      v10 = 256;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16 && v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
  v9 = 0;
  v8 = 0;
  v10 = 0;
LABEL_9:
  result = v8 | v9 | v10;
  if (!HIWORD(v9))
  {
    v17 = *a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v18)
      {
        v20 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        return v20;
      }
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>(uint64_t *a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  v3 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  v4 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  v5 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  if (!*a1)
    goto LABEL_10;
  if (v2 <= 0xFFu || v3 <= 0xFFu || v4 <= 0xFFu || (unsigned __int16)v5 <= 0xFFu)
  {
    __break(1u);
LABEL_10:
    v7 = 0;
    v6 = 0;
    goto LABEL_7;
  }
  v6 = (v4 << 16) | (v5 << 24) | (v3 << 8) | v2;
  v7 = 1;
LABEL_7:
  v8 = v6 | ((unint64_t)(v7 & 1) << 32);
  if (!v7)
  {
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  return v8;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(_QWORD *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  WTF *v6;
  char v7;
  WTF *v8;
  WTF::StringImpl *v9;
  unsigned __int16 v10;
  void *v11;
  _BYTE *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned __int16 v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *result;
  void *v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF *v57;
  uint64_t v58;
  _QWORD v59[2];
  WTF::StringImpl *v60;
  uint64_t v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  uint64_t v66;

  IPC::Decoder::decode<WTF::String>(a1, &v63);
  v6 = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (v7)
  {
    v8 = v6;
    v56 = 0;
    v57 = 0;
    if ((unint64_t)v6 >= 0x100000)
    {
      v14 = 0;
      LODWORD(v15) = 0;
      while (1)
      {
        v16 = IPC::Decoder::decode<WebCore::WebGPU::FeatureName>(a1);
        LOWORD(v60) = v16;
        if (v16 < 0x100u)
          break;
        if ((_DWORD)v15 == (_DWORD)v57)
        {
          v17 = (_BYTE *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, (WTF *)(v15 + 1), (unint64_t)&v60);
          LODWORD(v15) = HIDWORD(v57);
          v14 = v56;
          *((_BYTE *)v56 + HIDWORD(v57)) = *v17;
        }
        else
        {
          *((_BYTE *)v14 + v15) = v16;
        }
        v15 = (v15 + 1);
        HIDWORD(v57) = v15;
        v8 = (WTF *)((char *)v8 - 1);
        if (!v8)
        {
          if (v57 > v15)
          {
            if ((_DWORD)v15)
            {
              LODWORD(v57) = v15;
              v56 = (WTF::StringImpl *)WTF::fastRealloc(v14, (void *)v15);
            }
            else
            {
              v56 = 0;
              LODWORD(v57) = 0;
              WTF::fastFree(v14, v11);
            }
          }
          v9 = v56;
          v3 = (int)v57;
          v2 = HIDWORD(v57);
          goto LABEL_12;
        }
      }
      v9 = v56;
      if (!v56)
        goto LABEL_24;
    }
    else
    {
      if (!v6)
      {
        v3 = 0;
        v9 = 0;
        v2 = 0;
LABEL_12:
        v13 = 0;
        goto LABEL_26;
      }
      v9 = (WTF::StringImpl *)WTF::fastMalloc(v6);
      v2 = 0;
      LODWORD(v57) = (_DWORD)v8;
      v56 = v9;
      while (1)
      {
        v10 = IPC::Decoder::decode<WebCore::WebGPU::FeatureName>(a1);
        LOWORD(v60) = v10;
        if (v10 < 0x100u)
          break;
        if (v2 == (_DWORD)v57)
        {
          v12 = (_BYTE *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, (WTF *)(v2 + 1), (unint64_t)&v60);
          v2 = HIDWORD(v57);
          v9 = v56;
          *((_BYTE *)v56 + HIDWORD(v57)) = *v12;
        }
        else
        {
          *((_BYTE *)v9 + v2) = v10;
        }
        HIDWORD(v57) = ++v2;
        v8 = (WTF *)((char *)v8 - 1);
        if (!v8)
        {
          v3 = (int)v57;
          goto LABEL_12;
        }
      }
    }
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree(v9, v11);
  }
LABEL_24:
  v18 = *a1;
  v19 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (v20 && v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  v9 = 0;
  v13 = 1;
LABEL_26:
  v21 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v22)
  {
    LOBYTE(v60) = 0;
    v62 = 0;
LABEL_57:
    v36 = (void *)*a1;
    v44 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v44)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v36);
    if (*a1)
    {
      v37 = 1;
      goto LABEL_60;
    }
    goto LABEL_87;
  }
  v23 = v21;
  v65 = 0;
  v66 = 0;
  if (v21 < 0x10000)
  {
    if (!v21)
    {
      v33 = 0;
      v34 = 0;
LABEL_43:
      v65 = 0;
      v66 = 0;
      v60 = v33;
      v61 = v34;
      goto LABEL_44;
    }
    v24 = WTF::fastMalloc((WTF *)(16 * v21));
    LODWORD(v66) = v23;
    v65 = (WTF::StringImpl *)v24;
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>((uint64_t)&v56, a1);
      if (!(_BYTE)v58)
        goto LABEL_56;
      if (HIDWORD(v66) != (_DWORD)v66)
        break;
      v25 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v65, HIDWORD(v66) + 1, (unint64_t)&v56);
      v26 = HIDWORD(v66) + 1;
      v27 = (_QWORD *)((char *)v65 + 16 * HIDWORD(v66));
      v28 = *v25;
      *v25 = 0;
      *v27 = v28;
      v27[1] = v25[1];
      HIDWORD(v66) = v26;
      if ((_BYTE)v58)
        goto LABEL_35;
LABEL_39:
      if (!--v23)
      {
        v33 = v65;
        v34 = v66;
        goto LABEL_43;
      }
    }
    v29 = HIDWORD(v66) + 1;
    v30 = (WTF::StringImpl **)((char *)v65 + 16 * HIDWORD(v66));
    v31 = v56;
    v56 = 0;
    *v30 = v31;
    v30[1] = v57;
    HIDWORD(v66) = v29;
LABEL_35:
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v22);
      else
        *(_DWORD *)v32 -= 2;
    }
    goto LABEL_39;
  }
  do
  {
    IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>((uint64_t)&v56, a1);
    if (!(_BYTE)v58)
    {
LABEL_56:
      LOBYTE(v60) = 0;
      v62 = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v22);
      goto LABEL_57;
    }
    if (HIDWORD(v66) == (_DWORD)v66)
    {
      result = (WTF::StringImpl *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v65, HIDWORD(v66) + 1, (unint64_t)&v56);
      v38 = HIDWORD(v66) + 1;
      v39 = (_QWORD *)((char *)v65 + 16 * HIDWORD(v66));
      v40 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *v39 = v40;
      v39[1] = *((_QWORD *)result + 1);
      HIDWORD(v66) = v38;
      if (!(_BYTE)v58)
        goto LABEL_54;
    }
    else
    {
      v41 = HIDWORD(v66) + 1;
      v42 = (WTF::StringImpl **)((char *)v65 + 16 * HIDWORD(v66));
      v43 = v56;
      v56 = 0;
      *v42 = v43;
      v42[1] = v57;
      HIDWORD(v66) = v41;
    }
    result = v56;
    v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_54:
    --v23;
  }
  while (v23);
  v51 = v65;
  if (v66 <= HIDWORD(v66))
    goto LABEL_101;
  v52 = v65;
  if (!HIDWORD(v66))
    goto LABEL_94;
  v55 = HIDWORD(v66);
  if (HIDWORD(v66) >> 28)
  {
    __break(0xC471u);
    return result;
  }
  v53 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v66)));
  LODWORD(v66) = v55;
  v65 = (WTF::StringImpl *)v53;
  v52 = v51;
  if (v53 != (WTF::StringImpl **)v51)
  {
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v51, (WTF::StringImpl *)((char *)v51 + 16 * v55), v53);
    v52 = v65;
  }
LABEL_94:
  if (v51)
  {
    if (v52 == v51)
    {
      v65 = 0;
      LODWORD(v66) = 0;
    }
    WTF::fastFree(v51, v22);
    v51 = v65;
  }
  else
  {
    v51 = v52;
  }
LABEL_101:
  v60 = v51;
  v54 = v66;
  v65 = 0;
  v66 = 0;
  v61 = v54;
LABEL_44:
  v62 = 1;
  result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v22);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    goto LABEL_70;
  }
  v37 = 0;
LABEL_60:
  if (!v64 || (v45 = v63, v63 = 0, v13) || v37)
  {
    __break(1u);
LABEL_87:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    goto LABEL_71;
  }
  v46 = v60;
  v60 = 0;
  v56 = 0;
  v57 = 0;
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v9;
  v58 = 0;
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v2;
  v59[0] = 0;
  *(_QWORD *)(a2 + 24) = v46;
  v59[1] = 0;
  v47 = v61;
  v61 = 0;
  *(_QWORD *)(a2 + 32) = v47;
  *(_BYTE *)(a2 + 40) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v36);
  v48 = v57;
  if (v57)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    WTF::fastFree(v48, v36);
  }
  v49 = v56;
  v56 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v49 -= 2;
  }
  v9 = 0;
LABEL_70:
  result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v36);
LABEL_71:
  if (v9)
    v50 = v13;
  else
    v50 = 1;
  if ((v50 & 1) == 0)
    result = (WTF::StringImpl *)WTF::fastFree(v9, v36);
  if (v64)
  {
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v36);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E967CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  WTF *v20;
  char v21;
  uint64_t v22;
  void *v24;
  char v25;

  if (a13 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 80, a2);
  if (v20)
    v25 = v21;
  else
    v25 = 1;
  if ((v25 & 1) == 0)
    WTF::fastFree(v20, v24);
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v2) = v2[2];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  unint64_t v17;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = 0;
      v7 = *v5;
      v8 = v7 & 0xFFFFFF00;
      v9 = v7;
      v10 = v2;
      goto LABEL_8;
    }
    goto LABEL_51;
  }
  v24 = 0;
  v25 = 0;
  *a1 = 0;
  a1[1] = 0;
  v26 = a1[3];
  if (v26)
  {
    v52 = a1;
    if (v1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v2);
      a1 = v52;
      v25 = *v52;
      v24 = v52[1];
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v2 = a1[3];
    if (v2)
    {
      v49 = a1;
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v25, v24);
        v8 = 0;
        v9 = 0;
        a1 = v49;
        v10 = *v49;
        v1 = v49[1];
        v6 = 1;
        v2 = *v49;
      }
      else
      {
        v10 = 0;
        v1 = 0;
        v2 = 0;
        v8 = 0;
        v9 = 0;
        v6 = 1;
      }
    }
    else
    {
      v10 = 0;
      v1 = 0;
      v8 = 0;
      v9 = 0;
      v6 = 1;
    }
LABEL_8:
    v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v11 && v1 - v11 > 3)
    {
      v13 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = v13 + 1;
      if (v2)
      {
        v14 = 0;
        v15 = *v13;
        v16 = v15 & 0xFFFFFF00;
        v17 = v15;
        goto LABEL_15;
      }
      v27 = v1;
    }
    else
    {
      v27 = 0;
      v10 = 0;
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        v47 = v6;
        v39 = v8;
        v43 = v9;
        v53 = a1;
        if (v1)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v2);
          a1 = v53;
          v10 = *v53;
          v27 = v53[1];
        }
        else
        {
          v27 = 0;
          v10 = 0;
        }
        v8 = v39;
        v9 = v43;
        v6 = v47;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v2 = a1[3];
    if (v2)
    {
      v45 = v6;
      v37 = v8;
      v41 = v9;
      v50 = a1;
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v10, v27);
        v16 = 0;
        v17 = 0;
        a1 = v50;
        v10 = *v50;
        v1 = v50[1];
        v14 = 1;
        v2 = *v50;
      }
      else
      {
        v10 = 0;
        v1 = 0;
        v2 = 0;
        v16 = 0;
        v17 = 0;
        v14 = 1;
      }
      v8 = v37;
      v9 = v41;
      v6 = v45;
    }
    else
    {
      v10 = 0;
      v1 = 0;
      v16 = 0;
      v17 = 0;
      v14 = 1;
    }
LABEL_15:
    v18 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 < v18 || v1 - v18 <= 3)
    {
      v20 = 0;
      v10 = 0;
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        v32 = v14;
        v34 = v16;
        v36 = v17;
        v48 = v6;
        v40 = v8;
        v44 = v9;
        v54 = a1;
        if (v1)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v2);
          a1 = v54;
          v10 = *v54;
          v20 = v54[1];
        }
        else
        {
          v20 = 0;
          v10 = 0;
        }
        v8 = v40;
        v9 = v44;
        v6 = v48;
        v16 = v34;
        v17 = v36;
        v14 = v32;
      }
    }
    else
    {
      v19 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = v19 + 1;
      v20 = v1;
      if (v2)
      {
        v21 = 0;
        v2 = *v19;
        if (v6)
          goto LABEL_50;
LABEL_19:
        if (!v14 && !v21)
        {
          v22 = v9 | v8;
          return v22 | ((unint64_t)(v17 | v16) << 32);
        }
        goto LABEL_50;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (!v30)
    {
      v22 = 0;
      return v22 | ((unint64_t)(v17 | v16) << 32);
    }
    v31 = v14;
    v33 = v16;
    v35 = v17;
    v46 = v6;
    v38 = v8;
    v42 = v9;
    v51 = a1;
    if (!v20)
      break;
    a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v10, v20);
    v2 = 0;
    if (!*v51)
    {
      v22 = 0;
      goto LABEL_40;
    }
    v21 = 1;
    v8 = v38;
    v9 = v42;
    v16 = v33;
    v17 = v35;
    v14 = v31;
    if (!v46)
      goto LABEL_19;
LABEL_50:
    __break(1u);
LABEL_51:
    v24 = v1;
    v25 = v2;
  }
  v22 = 0;
LABEL_40:
  v16 = v33;
  v17 = v35;
  return v22 | ((unint64_t)(v17 | v16) << 32);
}

void IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 8));
  v4 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::SharedVideoFrame>,void>::encode<IPC::Encoder,std::optional<WebKit::SharedVideoFrame>>(a1, a2 + 32);
}

void IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20[2];
  int v21;
  _BYTE v22[8];
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  __int128 v29;
  int v30;
  _BYTE v31[16];
  int v32;
  char v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  char v40;

  IPC::Decoder::decode<WTF::String>(a1, &v38);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v35);
  v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_14;
  }
  v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v10 = v5;
    v11 = 0;
LABEL_14:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = (WTF::StringImpl *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_15;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v6);
    goto LABEL_16;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::SharedVideoFrame>(a1, (uint64_t)v20);
    if (v25)
    {
      v29 = *(_OWORD *)v20;
      v30 = v21;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v31, (uint64_t)v22);
      v33 = 1;
      v34 = 1;
      if (v25 && v24 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v24])(&v40, v22);
      goto LABEL_17;
    }
LABEL_16:
    LOBYTE(v29) = 0;
    v34 = 0;
    goto LABEL_17;
  }
  LOBYTE(v20[0]) = 0;
  v25 = 0;
  std::__optional_move_base<WebKit::SharedVideoFrame,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, (__int128 *)v20);
  v34 = 1;
  if (v25 && v24 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v24])(&v40, v22);
LABEL_17:
  if (!v34)
    goto LABEL_42;
  while (1)
  {
    if (!*a1)
    {
      *a2 = 0;
      a2[88] = 0;
      goto LABEL_31;
    }
    if (v39)
    {
      v15 = v38;
      v38 = 0;
      v20[0] = v15;
      if (v37)
      {
        v20[1] = v35;
        LOBYTE(v21) = v36;
        if (v4 > 0xFFu)
        {
          v22[0] = v4;
          if (v34)
            break;
        }
      }
    }
    __break(1u);
LABEL_42:
    v6 = (WTF::StringImpl *)*a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19, v6);
  }
  std::__optional_move_base<WebKit::SharedVideoFrame,false>::__optional_move_base[abi:sn180100]((uint64_t)&v23, &v29);
  std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ExternalTextureDescriptor>((uint64_t)a2, (uint64_t *)v20);
  if (v28)
  {
    if (v27 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v27])(&v40, &v26);
    v27 = -1;
  }
  v16 = v20[0];
  v20[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v6);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_31:
  if (v34 && v33 && v32 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v32])(v20, v31);
  if (v39)
  {
    v17 = v38;
    v38 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v6);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void sub_196E97154(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  WTF::StringImpl *v39;

  if ((_BYTE)a35 && a33 && a31 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a31])(&a10, &a29);
  if (*(_BYTE *)(v37 - 64))
  {
    v39 = *(WTF::StringImpl **)(v37 - 72);
    *(_QWORD *)(v37 - 72) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)(a2 + 5);
  v5 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v4);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(_QWORD *a1, _QWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 5));
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *result;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34;
  WTF *v35;
  uint64_t v36;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_31:
    v24 = *a2;
    v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v26 = v25 == 0;
    else
      v26 = 1;
    if (!v26)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v24);
    return result;
  }
  v6 = v4;
  v35 = 0;
  v36 = 0;
  if (v4 < 0x10000)
  {
    if (!v4)
    {
      v15 = 0;
      v16 = 0;
LABEL_18:
      v35 = 0;
      v36 = 0;
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      goto LABEL_19;
    }
    LODWORD(v36) = v4;
    v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>((uint64_t)&v32, a2);
      if (!v34)
        goto LABEL_30;
      if (HIDWORD(v36) != (_DWORD)v36)
        break;
      v7 = (uint64_t *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v35, HIDWORD(v36) + 1, (unint64_t)&v32);
      v8 = HIDWORD(v36) + 1;
      v9 = (_QWORD *)((char *)v35 + 16 * HIDWORD(v36));
      v10 = *v7;
      *v7 = 0;
      *v9 = v10;
      v9[1] = v7[1];
      HIDWORD(v36) = v8;
      if (v34)
        goto LABEL_10;
LABEL_14:
      if (!--v6)
      {
        v15 = v35;
        v16 = v36;
        goto LABEL_18;
      }
    }
    v11 = HIDWORD(v36) + 1;
    v12 = (WTF::StringImpl **)((char *)v35 + 16 * HIDWORD(v36));
    v13 = v32;
    v32 = 0;
    *v12 = v13;
    v12[1] = v33;
    HIDWORD(v36) = v11;
LABEL_10:
    v14 = v32;
    v32 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v5);
      else
        *(_DWORD *)v14 -= 2;
    }
    goto LABEL_14;
  }
  do
  {
    IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>((uint64_t)&v32, a2);
    if (!v34)
    {
LABEL_30:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
      goto LABEL_31;
    }
    if (HIDWORD(v36) == (_DWORD)v36)
    {
      result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v35, HIDWORD(v36) + 1, (unint64_t)&v32);
      v18 = HIDWORD(v36) + 1;
      v19 = (_QWORD *)((char *)v35 + 16 * HIDWORD(v36));
      v20 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *v19 = v20;
      v19[1] = *((_QWORD *)result + 1);
      HIDWORD(v36) = v18;
      if (!v34)
        goto LABEL_28;
    }
    else
    {
      v21 = HIDWORD(v36) + 1;
      v22 = (WTF::StringImpl **)((char *)v35 + 16 * HIDWORD(v36));
      v23 = v32;
      v32 = 0;
      *v22 = v23;
      v22[1] = v33;
      HIDWORD(v36) = v21;
    }
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_28:
    --v6;
  }
  while (v6);
  v27 = HIDWORD(v36);
  v28 = v35;
  if (v36 <= HIDWORD(v36))
    goto LABEL_47;
  v29 = v35;
  if (!HIDWORD(v36))
    goto LABEL_42;
  if (HIDWORD(v36) >> 28)
  {
    __break(0xC471u);
  }
  else
  {
    v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v36)));
    LODWORD(v36) = v27;
    v35 = v30;
    v29 = v28;
    if (v30 != v28)
    {
      WTF::VectorMover<false,WebCore::SpeechRecognitionAlternativeData>::move(v28, (WTF::StringImpl *)((char *)v28 + 16 * v27), (WTF::StringImpl **)v30);
      v29 = v35;
    }
LABEL_42:
    if (v28)
    {
      if (v29 == v28)
      {
        v35 = 0;
        LODWORD(v36) = 0;
      }
      WTF::fastFree(v28, v5);
      v28 = v35;
    }
    else
    {
      v28 = v29;
    }
LABEL_47:
    *(_QWORD *)a1 = v28;
    v31 = v36;
    v35 = 0;
    v36 = 0;
    *(_QWORD *)(a1 + 8) = v31;
LABEL_19:
    *(_BYTE *)(a1 + 16) = 1;
    return (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
  }
  return result;
}

void sub_196E97620(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(IPC::Encoder *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 4);
  v5 = *((_QWORD *)a2 + 3);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(char *a1, _QWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 2));
  return IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2 + 3);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v20 = v4;
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v5, v4);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v23 = a1[3];
  if (v23 && v20)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  v10 = 0;
  v9 = 1;
LABEL_8:
  v11 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v13 = v12;
  v14 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v16 = v15;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v19 = *a1;
  if (!*a1)
  {
LABEL_16:
    *(_BYTE *)a2 = 0;
    goto LABEL_14;
  }
  if (v9 || !v13 || !v16 || !v18)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 12) = BYTE4(v11);
  *(_QWORD *)(a2 + 13) = v14 << 24;
  LOBYTE(v19) = 1;
  *(_QWORD *)(a2 + 24) = result;
LABEL_14:
  *(_BYTE *)(a2 + 32) = v19;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(a1, a2);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t v5;

  result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(a1, a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 32);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::decode@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  int *v13;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  char v49;
  char v50;
  _BYTE v51[16];
  int v52;
  char v53;
  char v54;
  _QWORD v55[2];
  unsigned __int8 v56;

  v3 = result;
  v5 = result[1];
  v6 = *result;
  v7 = result[2] - *result;
  if (v5 <= v7)
  {
    v22 = 0;
    v23 = 0;
    *result = 0;
    result[1] = 0;
    v24 = result[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *v3;
        v22 = v3[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
  }
  else
  {
    v8 = (unsigned __int8 *)(v6 + v7);
    result[2] = (uint64_t)(v8 + 1);
    if (v6)
    {
      v2 = *v8;
      if (v2 >= 2)
        goto LABEL_8;
      if (!*v8)
      {
        LOBYTE(v47[0]) = 0;
        v49 = 0;
        result = (uint64_t *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](v51, (uint64_t)v47);
        goto LABEL_45;
      }
      if (v5 <= (unint64_t)&v8[-v6 + 1])
      {
        *result = 0;
        result[1] = 0;
        v26 = result[3];
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          v27 = *v3;
          v28 = v3[1];
          v29 = v3[3];
          *v3 = 0;
          v3[1] = 0;
          if (v29)
          {
            if (v28)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
          }
        }
        goto LABEL_7;
      }
      v9 = v8 + 2;
      result[2] = (uint64_t)(v8 + 2);
      v10 = v8[1];
      if (v10 > 1)
      {
LABEL_7:
        v6 = *v3;
        v5 = v3[1];
        goto LABEL_8;
      }
      if (v10)
      {
        v11 = ((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        v2 = v5 < v11 || v5 - v11 < 4;
        if ((_DWORD)v2 == 1)
        {
          *result = 0;
          result[1] = 0;
          result = (uint64_t *)result[3];
          if (result)
          {
            (*(void (**)(uint64_t *))(*result + 16))(result);
            v15 = 0;
            v6 = 0;
            v42 = *v3;
            v43 = v3[1];
            result = (uint64_t *)v3[3];
            *v3 = 0;
            v3[1] = 0;
            v5 = 0;
            v16 = 0;
            if (result)
            {
              v2 = 1;
              if (v43)
              {
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*result + 16))(result, v42, v43);
                v2 = 1;
                v15 = 0;
                v16 = 0;
                v6 = *v3;
                v5 = v3[1];
              }
            }
            else
            {
              v2 = 1;
            }
          }
          else
          {
            v6 = 0;
            v5 = 0;
            v15 = 0;
            v16 = 0;
          }
        }
        else
        {
          v13 = (int *)((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          v14 = *v13;
          result[2] = (uint64_t)(v13 + 1);
          v15 = v14 & 0xFFFFFF00;
          v16 = v14;
        }
        v17 = ((v3[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        if (v5 < v17 || v5 - v17 <= 3)
        {
          v19 = 0;
          v20 = 0;
          *v3 = 0;
          v3[1] = 0;
          result = (uint64_t *)v3[3];
          if (result)
            goto LABEL_89;
          goto LABEL_40;
        }
        v18 = (unsigned int *)((v3[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v3[2] = (uint64_t)(v18 + 1);
        v19 = v5;
        v20 = v6;
        if (!v6)
          goto LABEL_40;
        if (!(_DWORD)v2)
        {
          v47[0] = v16 | v15 | ((unint64_t)*v18 << 32);
          v21 = 1;
          v48 = 1;
LABEL_43:
          v49 = v21;
          if (!v21)
            goto LABEL_7;
          result = (uint64_t *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v51, (uint64_t)v47);
          v53 = 1;
LABEL_45:
          v54 = 1;
          if (v49 && v48 != -1)
            result = (uint64_t *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v48])(v55, v47);
          goto LABEL_48;
        }
LABEL_88:
        while (1)
        {
          __break(1u);
LABEL_89:
          v46 = v2;
          if (v5)
          {
            (*(void (**)(uint64_t *))(*result + 16))(result);
            v20 = *v3;
            v19 = v3[1];
          }
          else
          {
            v19 = 0;
            v20 = 0;
          }
          v2 = v46;
LABEL_40:
          *v3 = 0;
          v3[1] = 0;
          v30 = v3[3];
          if (!v30 || !v19)
            break;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v20, v19);
          if (!*v3)
          {
            v44 = v3[1];
            v45 = v3[3];
            *v3 = 0;
            v3[1] = 0;
            if (v45 && v44)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 16))(v45, 0);
            break;
          }
        }
        v21 = 0;
      }
      else
      {
        IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v55);
        v21 = v56;
        if (v56)
        {
          v47[0] = v55[0];
          v47[1] = v55[1];
          v48 = 0;
          v21 = 1;
          goto LABEL_43;
        }
      }
      LOBYTE(v47[0]) = 0;
      goto LABEL_43;
    }
    v22 = v5;
    v23 = 0;
  }
  v5 = 0;
  v6 = 0;
  *v3 = 0;
  v3[1] = 0;
  v25 = v3[3];
  if (v25)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
      goto LABEL_7;
    }
    v5 = 0;
    v6 = 0;
  }
LABEL_8:
  *v3 = 0;
  v3[1] = 0;
  result = (uint64_t *)v3[3];
  if (result && v5)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v6);
  v51[0] = 0;
  v54 = 0;
LABEL_48:
  v5 = v3[1];
  if (!v54)
  {
    v36 = *v3;
    *v3 = 0;
    v3[1] = 0;
    v37 = v3[3];
    if (!v37 || !v5)
    {
      v5 = 0;
      v31 = *v3;
LABEL_65:
      v38 = 0;
      v39 = 0;
      *v3 = 0;
      v3[1] = 0;
      v40 = v3[3];
      if (v40)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v31);
          v39 = *v3;
          v38 = v3[1];
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
      }
      goto LABEL_66;
    }
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v36);
    v5 = v3[1];
  }
  v31 = *v3;
  v32 = v3[2] - *v3;
  if (v5 <= v32)
    goto LABEL_65;
  v33 = (unsigned __int8 *)(v31 + v32);
  v3[2] = (uint64_t)(v33 + 1);
  if (!v31)
  {
    v38 = v5;
    v39 = 0;
LABEL_66:
    v5 = 0;
    v31 = 0;
    *v3 = 0;
    v3[1] = 0;
    v41 = v3[3];
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
        v31 = *v3;
        v5 = v3[1];
      }
      else
      {
        v5 = 0;
        v31 = 0;
      }
    }
    goto LABEL_67;
  }
  v34 = *v33;
  if (v34 <= 1)
  {
    v35 = 0;
    v3 = (uint64_t *)(v34 != 0);
    goto LABEL_53;
  }
LABEL_67:
  *v3 = 0;
  v3[1] = 0;
  result = (uint64_t *)v3[3];
  if (!result
    || !v5
    || (result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v31), !*v3))
  {
    *a2 = 0;
    a2[40] = 0;
    goto LABEL_58;
  }
  v3 = 0;
  v35 = 1;
LABEL_53:
  if (!v54)
    goto LABEL_88;
  result = (uint64_t *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](v47, (uint64_t)v51);
  if (v35)
    goto LABEL_88;
  v50 = (char)v3;
  result = (uint64_t *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v47);
  a2[32] = v50;
  a2[40] = 1;
  if (v49 && v48 != -1)
    result = (uint64_t *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v48])(v55, v47);
LABEL_58:
  if (v54 && v53 && v52 != -1)
    return (uint64_t *)((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v52])(v47, v51);
  return result;
}

void sub_196E97EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, int a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if ((_BYTE)a22 && a20 && a18 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a18])(&a10, &a16);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, (uint64_t)(v2 + 2));
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *result;
  unint64_t v13;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v13) = *(_BYTE *)(a2 + 48);
    a1[2] = v13 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t result;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  _BYTE v23[16];
  int v24;
  char v25;
  char v26;
  _BYTE v27[16];
  int v28;
  char v29;
  unsigned __int8 v30;
  char v31;

  v4 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = a1[1];
  v8 = *a1;
  v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    v11 = (_DWORD *)(v8 + v9);
    a1[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      v17 = v7;
      v18 = 0;
      goto LABEL_23;
    }
    v12 = 0;
    v13 = *v11 & 0xFFFFFF00;
    v14 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v8, v7);
        v18 = *a1;
        v17 = a1[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    v13 = 0;
    v14 = 0;
    v12 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(v27, a1);
    result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
    v8 = *a1;
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_16;
    }
    if (v6)
    {
      v21 = v4;
      if (!v12)
      {
        v22 = v14 | v13;
        v8 = v30;
        if (v30)
        {
          v16 = result;
          v4 = v23;
          std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v23, (uint64_t)v27);
          v8 = v16;
          if (v16 > 0xFFu)
            break;
        }
      }
    }
    __break(1u);
  }
  v26 = v16;
  *(_QWORD *)a2 = v21;
  *(_DWORD *)(a2 + 8) = v22;
  result = (uint64_t)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 16), (uint64_t)v23);
  *(_BYTE *)(a2 + 48) = v26;
  *(_BYTE *)(a2 + 56) = 1;
  if (v25 && v24 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v24])(&v31, v23);
LABEL_16:
  if (v30 && v29 && v28 != -1)
    return ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v28])(&v21, v27);
  return result;
}

void sub_196E98274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a16 && a14 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a14])(v27 - 65, v26);
  if ((_BYTE)a24 && a22 && a20 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a20])(&a10, &a18);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t result;
  unint64_t v12;
  _BOOL4 v14;
  int *v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  _QWORD v74[2];
  unsigned __int8 v75;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v34 = 0;
    v35 = 0;
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v35 = *a2;
        v34 = a2[1];
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
LABEL_36:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
        goto LABEL_7;
      }
      v6 = 0;
      v5 = 0;
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_59;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
LABEL_83:
    v34 = v6;
    v35 = v5;
    goto LABEL_36;
  }
  if (*v8 >= 2u)
    goto LABEL_8;
  if (!*v8)
  {
    LOBYTE(v70) = 0;
    v73 = 0;
    result = (uint64_t)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)&v70);
    goto LABEL_56;
  }
  if (v6 <= (unint64_t)&v8[-v5 + 1])
  {
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      v39 = *a2;
      v40 = a2[1];
      v41 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v41)
      {
        if (v40)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39);
      }
    }
    goto LABEL_7;
  }
  v9 = v8 + 2;
  a2[2] = (uint64_t)(v8 + 2);
  v10 = v8[1];
  if (v10 > 1)
  {
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    goto LABEL_8;
  }
  if (!v10)
  {
    IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v74);
    v33 = v75;
    if (v75)
    {
      v70 = v74[0];
      v71 = v74[1];
      v72 = 0;
      v33 = 1;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v12 = ((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  v14 = v6 < v12 || v6 - v12 < 4;
  if (v14)
  {
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      v17 = 0;
      v5 = 0;
      v50 = *a2;
      v51 = a2[1];
      v52 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v6 = 0;
      v18 = 0;
      if (v52)
      {
        v14 = 1;
        if (v51)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v51);
          v14 = 1;
          v17 = 0;
          v18 = 0;
          v5 = *a2;
          v6 = a2[1];
        }
      }
      else
      {
        v14 = 1;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v17 = 0;
      v18 = 0;
    }
  }
  else
  {
    v15 = (int *)((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = *v15;
    a2[2] = (uint64_t)(v15 + 1);
    v17 = v16 & 0xFFFFFF00;
    v18 = v16;
  }
  v19 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v6 < v19 || v6 - v19 <= 3)
  {
    v61 = v17;
    v64 = v18;
    v67 = v14;
    v25 = 0;
    v43 = 0;
    *a2 = 0;
    a2[1] = 0;
    v44 = a2[3];
    if (v44)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v43 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v43 = 0;
      }
    }
LABEL_46:
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v25);
        v23 = 0;
        v24 = 0;
        v5 = *a2;
        v6 = a2[1];
        v21 = 1;
        v25 = *a2;
        goto LABEL_49;
      }
      v5 = 0;
      v6 = 0;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v25 = 0;
    }
    v23 = 0;
    v24 = 0;
    v21 = 1;
LABEL_49:
    v18 = v64;
    v14 = v67;
    v17 = v61;
    goto LABEL_24;
  }
  v20 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a2[2] = (uint64_t)(v20 + 1);
  if (!v5)
  {
    v61 = v17;
    v64 = v18;
    v67 = v14;
    v25 = v6;
    v43 = 0;
    goto LABEL_46;
  }
  v21 = 0;
  v22 = *v20;
  v23 = v22 & 0xFFFFFF00;
  v24 = v22;
  v25 = v5;
LABEL_24:
  v26 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v25;
  if (v6 < v26 || v6 - v26 <= 3)
  {
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46)
    {
      v58 = v24;
      v60 = v21;
      v56 = v23;
      v63 = v17;
      v66 = v18;
      v69 = v14;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v25);
        v28 = a2[1];
      }
      else
      {
        v28 = 0;
      }
      v18 = v66;
      v14 = v69;
      v21 = v60;
      v17 = v63;
      v23 = v56;
      v24 = v58;
    }
    goto LABEL_51;
  }
  v27 = (_DWORD *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a2[2] = (uint64_t)(v27 + 1);
  v28 = v6;
  if (!v25)
  {
LABEL_51:
    v65 = v18;
    v68 = v14;
    v59 = v21;
    v62 = v17;
    v55 = v23;
    v57 = v24;
    *a2 = 0;
    a2[1] = 0;
    v47 = a2[3];
    if (v47 && v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      if (*a2)
      {
        v31 = 0;
        v30 = 0;
        v29 = 1;
        v18 = v65;
        v21 = v59;
        v17 = v62;
        v23 = v55;
        v24 = v57;
        if (!v68)
          goto LABEL_28;
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v53 = a2[3];
      v54 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (v53 && v54)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 16))(v53, 0);
    }
    v33 = 0;
LABEL_53:
    LOBYTE(v70) = 0;
    goto LABEL_54;
  }
  v29 = 0;
  v30 = *v27 & 0xFFFFFF00;
  v31 = *v27;
  if (v14)
    goto LABEL_82;
LABEL_28:
  if (v21 || v29)
    goto LABEL_82;
  v32 = v30 | v31;
  v70 = v18 | v17 | ((unint64_t)(v24 | v23) << 32);
  v33 = 1;
  LODWORD(v71) = v32;
  v72 = 1;
LABEL_54:
  v73 = v33;
  if (!v33)
    goto LABEL_7;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)&v70);
  a1[24] = 1;
LABEL_56:
  a1[32] = 1;
  if (v73 && v72 != -1)
    result = ((uint64_t (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v72])(v74, &v70);
LABEL_59:
  if (!a1[32])
  {
    v48 = *a2;
    v49 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v49)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v48);
    }
  }
  return result;
}

void sub_196E98830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  uint64_t v16;
  uint64_t v18;

  if (*(_BYTE *)(v16 + 32) && *(_BYTE *)(v16 + 24))
  {
    v18 = *(unsigned int *)(v16 + 16);
    if ((_DWORD)v18 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v18])(&a12, v16);
    *(_DWORD *)(v16 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, (uint64_t)(v2 + 2));
  LOBYTE(v4) = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 50);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *result;
  unint64_t v13;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  v13 = a1[2];
  if (v13 >= a1[1]
    || (*(_BYTE *)(*a1 + v13) = *(_BYTE *)(a2 + 48), a1[2] = v13 + 1, v13 + 1 >= a1[1])
    || (*(_BYTE *)(*a1 + v13 + 1) = *(_BYTE *)(a2 + 49), a1[2] = v13 + 2, v13 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v13 + 2) = *(_BYTE *)(a2 + 50);
    a1[2] = v13 + 3;
  }
  return result;
}

_BYTE *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _BYTE *v4;
  char v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  _BYTE *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE v32[16];
  int v33;
  char v34;
  char v35;
  _BYTE *v36;
  int v37;
  _BYTE v38[16];
  int v39;
  char v40;
  char v41;
  __int16 v42;
  _BYTE v43[16];
  int v44;
  char v45;
  unsigned __int8 v46;
  _BYTE v47[9];

  v2 = a1;
  v4 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  LOBYTE(v6) = v5;
  v7 = (unsigned __int8 *)v2[1];
  v8 = *v2;
  v9 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if ((unint64_t)v7 >= v9 && (unint64_t)&v7[-v9] > 3)
  {
    v11 = (_DWORD *)(v8 + v9);
    v2[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      v23 = (uint64_t)v7;
      v24 = 0;
      goto LABEL_32;
    }
    v12 = 0;
    v13 = *v11 & 0xFFFFFF00;
    v14 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    v23 = 0;
    v24 = 0;
    *v2 = 0;
    v2[1] = 0;
    v25 = v2[3];
    if (v25)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v25 + 16))(v25, v8, v7);
        v24 = *v2;
        v23 = v2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_32:
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26 && v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
    v13 = 0;
    v14 = 0;
    v12 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(v43, v2);
    v15 = IPC::Decoder::decode<WebCore::CDMRequirement>(v2);
    v16 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(v2);
    v17 = v2[1];
    v18 = *v2;
    v19 = v2[2] - *v2;
    if (v17 <= v19)
    {
      v27 = 0;
      v28 = 0;
      *v2 = 0;
      v2[1] = 0;
      v29 = v2[3];
      if (v29)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
          v28 = *v2;
          v27 = v2[1];
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
      }
      goto LABEL_35;
    }
    v20 = (unsigned __int8 *)(v18 + v19);
    v7 = v20 + 1;
    v2[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      v27 = v17;
      v28 = 0;
LABEL_35:
      v17 = 0;
      v18 = 0;
      *v2 = 0;
      v2[1] = 0;
      v30 = v2[3];
      if (v30)
      {
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
          v18 = *v2;
          v17 = v2[1];
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
      }
      goto LABEL_36;
    }
    v8 = *v20;
    if (v8 <= 1)
    {
      v21 = 0;
      v2 = (uint64_t *)((_DWORD)v8 != 0);
      goto LABEL_12;
    }
LABEL_36:
    *v2 = 0;
    v2[1] = 0;
    result = (_BYTE *)v2[3];
    if (!result
      || !v17
      || (result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v18),
          (v8 = *v2) == 0))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_25;
    }
    v2 = 0;
    v21 = 1;
LABEL_12:
    if ((_BYTE)v6)
    {
      v31 = v4;
      if (!v12)
      {
        v8 = v46;
        if (v46)
        {
          v4 = v32;
          std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v32, (uint64_t)v43);
          v8 = v15;
          if (v15 > 0xFFu)
          {
            v35 = v15;
            v36 = v31;
            v37 = v14 | v13;
            v6 = v38;
            std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v38, (uint64_t)v32);
            v41 = v35;
            v8 = v16;
            if (v16 > 0xFFu)
            {
              LOBYTE(v42) = v16;
              if (!v21)
                break;
            }
          }
        }
      }
    }
    __break(1u);
  }
  HIBYTE(v42) = (_BYTE)v2;
  *(_QWORD *)a2 = v36;
  *(_DWORD *)(a2 + 8) = v37;
  result = std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 16), (uint64_t)v38);
  *(_BYTE *)(a2 + 48) = v41;
  *(_WORD *)(a2 + 49) = v42;
  *(_BYTE *)(a2 + 56) = 1;
  if (v40)
  {
    if (v39 != -1)
      result = (_BYTE *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v39])(v47, v38);
    v39 = -1;
  }
  if (v34 && v33 != -1)
    result = (_BYTE *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v33])(v47, v32);
LABEL_25:
  if (v46 && v45 && v44 != -1)
    return (_BYTE *)((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v44])(&v36, v43);
  return result;
}

void sub_196E98DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,char a26,uint64_t a27,int a28,int a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  if ((_BYTE)a32 && a30 && a28 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a28])(&a18, &a26);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v4;
  uint64_t v5;

  v4 = a2 + 4;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v17 = v4;
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v5, v4);
        v18 = *a1;
        v17 = a1[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (v20 && v17)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  v10 = 0;
  v9 = 1;
LABEL_8:
  v11 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v13 = v12;
  result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v16 = *a1;
  if (!*a1)
  {
LABEL_15:
    *(_BYTE *)a2 = 0;
    goto LABEL_13;
  }
  if (v9 || !v13 || !v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 12) = BYTE4(v11);
  *(_QWORD *)(a2 + 13) = result << 24;
  LOBYTE(v16) = 1;
LABEL_13:
  *(_BYTE *)(a2 + 24) = v16;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      v3 = v14;
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v3) = *(_BYTE *)(a2 + 8);
    result[2] = v3 + 1;
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebGPU::PipelineLayoutDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  _QWORD v19[2];
  char v20;

  IPC::Decoder::decode<WTF::String>(a1, &v17);
  v5 = a1[1];
  v6 = (char *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v12 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v9 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v9 = 0;
      }
    }
    goto LABEL_9;
  }
  v8 = &v6[v7];
  LODWORD(v9) = (_DWORD)v8 + 1;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v12 = v5;
    v9 = 0;
LABEL_9:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v9, v12);
        v6 = (char *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_10;
  }
  v10 = *v8;
  if (v10 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15 && v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 16))(v15, v6);
    goto LABEL_11;
  }
  if (v10)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v19);
    if (v20)
    {
      v10 = 0;
      LODWORD(v9) = 0;
      result = (WTF *)v19[0];
      v4 = v19[1];
      goto LABEL_13;
    }
LABEL_11:
    v6 = (char *)*a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      goto LABEL_27;
    goto LABEL_12;
  }
  result = 0;
  LODWORD(v9) = 1;
LABEL_13:
  while (*a1)
  {
    if (v18)
    {
      v16 = v17;
      v17 = 0;
      if (!v10)
      {
        *(_QWORD *)a2 = v16;
        if ((v9 & 1) != 0)
        {
          *(_BYTE *)(a2 + 8) = 0;
          *(_BYTE *)(a2 + 24) = 0;
        }
        else
        {
          *(_QWORD *)(a2 + 8) = result;
          *(_QWORD *)(a2 + 16) = v4;
          *(_BYTE *)(a2 + 24) = 1;
        }
        *(_BYTE *)(a2 + 32) = 1;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_27:
    if (v5)
      (*(void (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v6);
    result = 0;
LABEL_12:
    v10 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (((v10 | v9) & 1) == 0 && result)
    result = (WTF *)WTF::fastFree(result, v6);
LABEL_20:
  if (v18)
  {
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E99334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5++) = *(_BYTE *)(a2 + 8);
    a1[2] = v5;
  }
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 12);
      a1[2] = v11;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v12;
  int v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;
  __int16 v29;

  IPC::Decoder::decode<WTF::String>(a1, &v27);
  v29 = 0;
  result = (WTF::StringImpl *)IPC::Decoder::operator>><unsigned char>(a1, &v29);
  v5 = v29;
  if (HIBYTE(v29))
    v6 = v29 > 1uLL;
  else
    v6 = 1;
  v7 = v6;
  if (v7 == 1)
    goto LABEL_21;
  while (1)
  {
    v8 = a1[1];
    v9 = *a1;
    v10 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v8 < v10 || v8 - v10 <= 3)
      break;
    v12 = (unsigned int *)(v9 + v10);
    a1[2] = (uint64_t)(v12 + 1);
    if (!v9)
    {
      v18 = v8;
      v19 = 0;
      goto LABEL_25;
    }
    v13 = 0;
    v14 = (unint64_t)*v12 << 32;
LABEL_15:
    if (v28)
    {
      v15 = v27;
      v27 = 0;
      if (!v7 && !v13)
      {
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v14 | v5;
        *(_BYTE *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_21:
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v17)
    {
      v21 = v5;
      v24 = v7;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
      v7 = v24;
      v5 = v21;
    }
  }
  v18 = 0;
  v19 = 0;
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (v20)
  {
    v26 = v7;
    v23 = v5;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v9, v8);
      v19 = (WTF::StringImpl *)*a1;
      v18 = a1[1];
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v5 = v23;
    v7 = v26;
  }
LABEL_25:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v18)
    {
      v25 = v7;
      v22 = v5;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v19);
      v5 = v22;
      v7 = v25;
      if (*a1)
      {
        v14 = 0;
        v13 = 1;
        goto LABEL_15;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v28)
  {
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E99624(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 1));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 24);
  v4 = *((_DWORD *)v2 + 7);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 33);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 24));
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 28);
      a1[2] = v11;
      v5 = v11;
    }
  }
  if (v5 >= a1[1] || (*(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 32), a1[2] = v5 + 1, v5 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5 + 1) = *(_BYTE *)(a2 + 33);
    a1[2] = v5 + 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  _WORD *v11;
  int v12;
  int i;
  WTF *v14;
  unsigned int v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  int v37;
  __int16 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  char v77;
  unsigned int v78;
  WTF *v79;
  WTF *v80;

  IPC::Decoder::decode<WTF::String>(a1, &v76);
  v6 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v7)
    goto LABEL_29;
  v2 = v6;
  v79 = 0;
  v80 = 0;
  if (v6 >= 0x80000)
  {
    v14 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      v15 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(a1);
      v78 = v15;
      if (v15 < 0x10000)
        break;
      if ((_DWORD)v3 == (_DWORD)v80)
      {
        v16 = (_WORD *)WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v3 + 1, (unint64_t)&v78);
        v17 = HIDWORD(v80);
        v14 = v79;
        *((_WORD *)v79 + HIDWORD(v80)) = *v16;
      }
      else
      {
        *((_WORD *)v14 + v3) = v15;
        v17 = HIDWORD(v80);
      }
      v3 = (v17 + 1);
      HIDWORD(v80) = v17 + 1;
      if (!--v2)
      {
        LODWORD(v2) = (_DWORD)v80;
        if (v80 <= v3)
          goto LABEL_81;
        if (v17 == -1)
          goto LABEL_79;
        if ((v3 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196E99DC8);
        }
        v18 = WTF::fastMalloc((WTF *)(2 * v3));
        LODWORD(v80) = v3;
        v79 = (WTF *)v18;
        if ((WTF *)v18 == v14)
        {
LABEL_79:
          v79 = 0;
          LODWORD(v80) = 0;
        }
        else
        {
          v19 = 0;
          do
          {
            *(_WORD *)(v18 + v19) = *(_WORD *)((char *)v14 + v19);
            v19 += 2;
          }
          while (2 * v3 != v19);
          LODWORD(v2) = v3;
          if (!v14)
          {
LABEL_81:
            v8 = v79;
            goto LABEL_12;
          }
        }
        WTF::fastFree(v14, v10);
        LODWORD(v2) = (_DWORD)v80;
        LODWORD(v3) = HIDWORD(v80);
        goto LABEL_81;
      }
    }
    v8 = v79;
    if (v79)
    {
LABEL_28:
      v79 = 0;
      LODWORD(v80) = 0;
      WTF::fastFree(v8, v10);
    }
LABEL_29:
    v20 = (char *)*a1;
    v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_62;
    goto LABEL_30;
  }
  if (v6)
  {
    v8 = (WTF *)WTF::fastMalloc((WTF *)(2 * v6));
    LODWORD(v3) = 0;
    LODWORD(v80) = v2;
    v79 = v8;
    do
    {
      v9 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(a1);
      v78 = v9;
      if (v9 < 0x10000)
        goto LABEL_28;
      if ((_DWORD)v3 == (_DWORD)v80)
      {
        v11 = (_WORD *)WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v3 + 1, (unint64_t)&v78);
        v12 = HIDWORD(v80);
        v8 = v79;
        *((_WORD *)v79 + HIDWORD(v80)) = *v11;
      }
      else
      {
        *((_WORD *)v8 + v3) = v9;
        v12 = HIDWORD(v80);
      }
      LODWORD(v3) = v12 + 1;
      HIDWORD(v80) = v12 + 1;
      --v2;
    }
    while (v2);
    LODWORD(v2) = (_DWORD)v80;
  }
  else
  {
    v8 = 0;
    LODWORD(v3) = 0;
  }
LABEL_12:
  for (i = 0; ; i = 1)
  {
    result = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(a1);
    v21 = a1[1];
    v20 = (char *)*a1;
    v23 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v21 >= v23 && v21 - v23 > 3)
    {
      v25 = &v20[v23];
      v26 = (uint64_t)&v20[v23 + 4];
      a1[2] = v26;
      if (v20)
      {
        v27 = 0;
        v28 = *(unsigned int *)v25;
        goto LABEL_38;
      }
      v40 = v21;
      v41 = 0;
    }
    else
    {
      v40 = 0;
      v41 = 0;
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (v42)
      {
        v73 = result;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
          v41 = *a1;
          v40 = a1[1];
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        result = v73;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (!v28)
    {
      v40 = 0;
      v20 = 0;
      v27 = 1;
      goto LABEL_67;
    }
    v70 = result;
    if (!v40)
    {
      v28 = 0;
      v20 = 0;
      v27 = 1;
      result = result;
LABEL_67:
      *a1 = 0;
      a1[1] = 0;
      v30 = (unsigned __int8 *)a1[3];
      if (v30)
      {
        v64 = v27;
        v71 = result;
        v58 = v28;
        if (v40)
        {
          (*(void (**)(unsigned __int8 *, char *, uint64_t))(*(_QWORD *)v30 + 16))(v30, v20, v40);
          LODWORD(v30) = 0;
          v20 = (char *)*a1;
          v21 = a1[1];
        }
        else
        {
          v21 = 0;
          v20 = 0;
          LODWORD(v30) = 0;
        }
        v27 = v64;
        result = v71;
        v28 = v58;
      }
      else
      {
        v21 = 0;
        v20 = 0;
      }
      goto LABEL_69;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v41, v40);
    v28 = 0;
    v20 = (char *)*a1;
    v21 = a1[1];
    v27 = 1;
    v26 = a1[2];
    result = v70;
LABEL_38:
    v29 = v26 - (_QWORD)v20;
    if (v21 <= v29)
    {
      v66 = v27;
      v74 = result;
      v60 = v28;
      v40 = 0;
      v47 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v47 && v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        v20 = (char *)*a1;
        v40 = a1[1];
      }
      else
      {
        v20 = 0;
      }
      v27 = v66;
      result = v74;
      v28 = v60;
      goto LABEL_67;
    }
    v30 = (unsigned __int8 *)&v20[v29];
    v31 = (uint64_t)&v20[v29 + 1];
    a1[2] = v31;
    if (!v20)
    {
      v40 = v21;
      goto LABEL_67;
    }
    LODWORD(v30) = *v30;
    if (v30 < 2)
    {
      v32 = 0;
      v33 = 1;
      goto LABEL_42;
    }
LABEL_69:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (!v43)
    {
      v33 = 0;
      v20 = 0;
      v32 = 1;
      goto LABEL_71;
    }
    v52 = (int)v30;
    v62 = v27;
    v68 = result;
    v56 = v28;
    if (!v21)
    {
      v33 = 0;
      v43 = 0;
      v20 = 0;
      v32 = 1;
      result = result;
      goto LABEL_71;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v43 + 16))(v43, v20);
    v33 = 0;
    v20 = (char *)*a1;
    v21 = a1[1];
    v32 = 1;
    v31 = a1[2];
    v27 = v62;
    result = v68;
    v28 = v56;
    LODWORD(v30) = v52;
LABEL_42:
    if (!(_DWORD)v30)
      v33 = 0;
    v34 = v31 - (_QWORD)v20;
    if (v21 <= v34)
      break;
    v35 = &v20[v34];
    a1[2] = (uint64_t)(v35 + 1);
    if (!v20)
    {
      v43 = v21;
      goto LABEL_71;
    }
    v36 = *v35;
    if (v36 > 1)
      goto LABEL_73;
    v37 = 0;
    v38 = (v36 != 0) << 8;
LABEL_48:
    if (v77)
    {
      v39 = v76;
      v76 = 0;
      if (!i && WORD1(result) && !v27 && !v32 && !v37)
      {
        *(_QWORD *)a2 = v39;
        *(_QWORD *)(a2 + 8) = v8;
        *(_DWORD *)(a2 + 16) = v2;
        *(_DWORD *)(a2 + 20) = v3;
        *(_QWORD *)(a2 + 24) = (unsigned __int16)result | (unint64_t)(v28 << 32);
        *(_WORD *)(a2 + 32) = v38 | v33;
        *(_BYTE *)(a2 + 40) = 1;
        goto LABEL_55;
      }
    }
    __break(1u);
LABEL_62:
    if (v21)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v20);
LABEL_30:
    v8 = 0;
  }
  v51 = v33;
  v55 = v32;
  v67 = v27;
  v75 = result;
  v61 = v28;
  v43 = 0;
  v48 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v48 && v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    v20 = (char *)*a1;
    v43 = a1[1];
  }
  else
  {
    v20 = 0;
  }
  v27 = v67;
  result = v75;
  v28 = v61;
  v33 = v51;
  v32 = v55;
LABEL_71:
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (v44)
  {
    v50 = v33;
    v54 = v32;
    v65 = v27;
    v72 = result;
    v59 = v28;
    if (v43)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v44 + 16))(v44, v20, v43);
      v20 = (char *)*a1;
      v21 = a1[1];
    }
    else
    {
      v21 = 0;
      v20 = 0;
    }
    v27 = v65;
    result = v72;
    v28 = v59;
    v33 = v50;
    v32 = v54;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
LABEL_73:
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (v45)
  {
    if (v21)
    {
      v49 = v33;
      v53 = v32;
      v63 = v27;
      v69 = result;
      v57 = v28;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v45 + 16))(v45, v20);
      v27 = v63;
      result = v69;
      v28 = v57;
      v33 = v49;
      v32 = v53;
      if (*a1)
      {
        v38 = 0;
        v37 = 1;
        goto LABEL_48;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v8)
    v46 = i;
  else
    v46 = 1;
  if ((v46 & 1) == 0)
    result = WTF::fastFree(v8, v20);
LABEL_55:
  if (v77)
  {
    result = (uint64_t)v76;
    v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E99DDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, WTF *a15)
{
  WTF *v15;
  char v16;
  char v18;

  if (v15)
    v18 = v16;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
    WTF::fastFree(v15, a2);
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_12:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a1);
      v8 = v7;
      v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0)
        v8 = 0;
      v10 = 256;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16 && v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
  v9 = 0;
  v8 = 0;
  v10 = 0;
LABEL_9:
  result = v8 | v9 | v10;
  if (!HIWORD(v9))
  {
    v17 = *a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v18)
      {
        v20 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        return v20;
      }
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(a1, (uint64_t)(a2 + 10));
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 13);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode(char *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>((uint64_t *)a1, (uint64_t)(a2 + 10));
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, (uint64_t)(a2 + 13));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *result;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  char v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  int v54;
  unsigned __int8 v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  WTF *v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  int v110;
  BOOL v111;
  char v112;
  char v113;
  unint64_t v114;
  __int16 v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  WTF::StringImpl *v120[3];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[25];
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  __int16 v132;
  char v133;
  __int16 v134;
  char v135;
  WTF *v136;
  unint64_t v137;
  char v138;
  WTF::StringImpl *v139;
  char v140;

  IPC::Decoder::decode<WTF::String>(a1, &v139);
  v7 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v8)
  {
    v9 = v7;
    v129 = 0;
    v130 = 0;
    if (v7 < 0x2AAA)
    {
      if (v7)
      {
        LODWORD(v130) = 96 * (int)v7 / 0x60u;
        v129 = WTF::fastMalloc((WTF *)(96 * v7));
        LODWORD(v2) = 96;
        do
        {
          IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)v120, a1);
          if (!v125[8])
            goto LABEL_30;
          if (HIDWORD(v130) == (_DWORD)v130)
          {
            WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)&v129, (unint64_t)v120);
          }
          else
          {
            std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](v129 + 96 * HIDWORD(v130), (__int128 *)v120);
            ++HIDWORD(v130);
          }
          std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
          --v9;
        }
        while (v9);
        v10 = v129;
        v12 = v130;
        v11 = HIDWORD(v130);
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v10 = 0;
      }
      v129 = 0;
      v136 = (WTF *)v10;
LABEL_14:
      v130 = 0;
      v137 = __PAIR64__(v11, v12);
      v138 = 1;
      WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v8);
      goto LABEL_32;
    }
    LODWORD(v2) = 96;
    while (1)
    {
      IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)v120, a1);
      if (!v125[8])
        break;
      if (HIDWORD(v130) == (_DWORD)v130)
      {
        WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)&v129, (unint64_t)v120);
      }
      else
      {
        std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](v129 + 96 * HIDWORD(v130), (__int128 *)v120);
        ++HIDWORD(v130);
      }
      result = (WTF::StringImpl *)std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
      if (!--v9)
      {
        v14 = HIDWORD(v130);
        v15 = (WTF *)v129;
        if (v130 > HIDWORD(v130))
        {
          v16 = (WTF *)v129;
          if (HIDWORD(v130))
          {
            if (HIDWORD(v130) >= 0x2AAAAAB)
            {
              __break(0xC471u);
              return result;
            }
            LODWORD(v2) = 96 * HIDWORD(v130);
            v17 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v130)));
            LODWORD(v130) = 96 * v14 / 0x60;
            v129 = v17;
            v16 = v15;
            if ((WTF *)v17 != v15)
            {
              WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move((uint64_t)v15, (uint64_t)v15 + 96 * v14, v17);
              v16 = (WTF *)v129;
            }
          }
          if (v15)
          {
            if (v16 == v15)
            {
              v129 = 0;
              LODWORD(v130) = 0;
            }
            WTF::fastFree(v15, v8);
            v15 = (WTF *)v129;
          }
          else
          {
            v15 = v16;
          }
        }
        v129 = 0;
        v136 = v15;
        v12 = v130;
        v11 = HIDWORD(v130);
        goto LABEL_14;
      }
    }
LABEL_30:
    LOBYTE(v136) = 0;
    v138 = 0;
    std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v18);
  }
  else
  {
    LOBYTE(v136) = 0;
    v138 = 0;
  }
  v19 = (char *)*a1;
  v20 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
    goto LABEL_100;
  while (1)
  {
LABEL_32:
    v21 = a1[1];
    v22 = *a1;
    v23 = a1[2] - *a1;
    if (v21 <= v23)
    {
      v75 = 0;
      v76 = 0;
      *a1 = 0;
      a1[1] = 0;
      v77 = a1[3];
      if (v77)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
          v76 = *a1;
          v75 = a1[1];
        }
        else
        {
          v75 = 0;
          v76 = 0;
        }
      }
      goto LABEL_103;
    }
    v24 = (unsigned __int8 *)(v22 + v23);
    a1[2] = (uint64_t)(v24 + 1);
    if (!v22)
    {
      v75 = v21;
      v76 = 0;
LABEL_103:
      v21 = 0;
      v22 = 0;
      *a1 = 0;
      a1[1] = 0;
      v78 = a1[3];
      if (v78)
      {
        if (v75)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76, v75);
          v22 = *a1;
          v21 = a1[1];
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
      }
LABEL_104:
      *a1 = 0;
      a1[1] = 0;
      v79 = a1[3];
      if (v79 && v21)
LABEL_159:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v22);
LABEL_125:
      v97 = *a1;
      v98 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v99 = a1[3];
      if (v99 && v98)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97);
      LOBYTE(v26) = 0;
      v48 = 0;
      v116 = 1;
      goto LABEL_63;
    }
    v25 = *v24;
    if (v25 >= 2)
      goto LABEL_104;
    if (!v25)
    {
      v116 = 0;
      v113 = 0;
      LOBYTE(v26) = 0;
      v48 = 0;
      goto LABEL_63;
    }
    v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
    v28 = v27;
    v3 = IPC::Decoder::decode<float>(a1);
    v4 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>(a1);
    v119 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>(a1);
    v29 = a1[1];
    v30 = *a1;
    v31 = a1[2] - *a1;
    if (v29 <= v31)
    {
      v85 = 0;
      v86 = 0;
      *a1 = 0;
      a1[1] = 0;
      v87 = a1[3];
      if (v87)
      {
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
          v86 = *a1;
          v85 = a1[1];
        }
        else
        {
          v85 = 0;
          v86 = 0;
        }
      }
      goto LABEL_114;
    }
    v32 = (unsigned __int8 *)(v30 + v31);
    a1[2] = (uint64_t)(v32 + 1);
    if (!v30)
    {
      v85 = v29;
      v86 = 0;
LABEL_114:
      *a1 = 0;
      a1[1] = 0;
      v88 = a1[3];
      if (v88 && v85)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v86, v85);
        v33 = 0;
        v30 = *a1;
        v29 = a1[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v33 = 0;
      }
      goto LABEL_116;
    }
    v33 = *v32;
    if (v33 < 2)
    {
      v34 = 0;
      v35 = 1;
LABEL_40:
      v36 = v30;
      goto LABEL_41;
    }
LABEL_116:
    *a1 = 0;
    a1[1] = 0;
    v89 = a1[3];
    if (v89)
    {
      if (v29)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v30);
        v35 = 0;
        v30 = *a1;
        v29 = a1[1];
        v34 = 1;
        goto LABEL_40;
      }
    }
    else
    {
      v29 = 0;
    }
    v36 = 0;
    v35 = 0;
    v34 = 1;
LABEL_41:
    v37 = v33 ? v35 : 0;
    v38 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v36;
    v112 = v37;
    if (v29 < v38 || v29 - v38 <= 3)
    {
      v40 = 0;
      *a1 = 0;
      a1[1] = 0;
      v90 = a1[3];
      if (v90)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, v36);
          v40 = a1[1];
        }
        else
        {
          v40 = 0;
        }
      }
    }
    else
    {
      v39 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v39 + 1);
      v40 = v29;
      if (v36)
      {
        LODWORD(v2) = 0;
        v41 = *v39 & 0xFFFFFF00;
        v42 = *v39;
        goto LABEL_48;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v91 = a1[3];
    if (v91 && v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
    v41 = 0;
    v42 = 0;
    LODWORD(v2) = 1;
LABEL_48:
    v118 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>(a1);
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>(a1);
    v117 = result;
    v20 = a1[1];
    v19 = (char *)*a1;
    v43 = a1[2] - *a1;
    if (v20 <= v43)
    {
      v92 = 0;
      v93 = 0;
      *a1 = 0;
      a1[1] = 0;
      v94 = a1[3];
      if (v94)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
          v93 = *a1;
          v92 = a1[1];
        }
        else
        {
          v92 = 0;
          v93 = 0;
        }
      }
      goto LABEL_123;
    }
    v44 = &v19[v43];
    a1[2] = (uint64_t)(v44 + 1);
    if (!v19)
    {
      v92 = v20;
      v93 = 0;
LABEL_123:
      v20 = 0;
      v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v92)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v93, v92);
          v19 = (char *)*a1;
          v20 = a1[1];
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
      }
      goto LABEL_124;
    }
    v45 = *v44;
    if (v45 <= 1)
    {
      v46 = 0;
      v47 = v45 != 0;
      goto LABEL_52;
    }
LABEL_124:
    *a1 = 0;
    a1[1] = 0;
    v96 = a1[3];
    if (!v96 || !v20)
      goto LABEL_125;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v96 + 16))(v96, v19);
    if (!*a1)
    {
      v107 = a1[1];
      v79 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v79 && v107)
      {
        v22 = 0;
        goto LABEL_159;
      }
      goto LABEL_125;
    }
    v47 = 0;
    v46 = 1;
LABEL_52:
    if (!v28)
      goto LABEL_99;
    if ((v3 & 0xFF00000000) == 0)
      goto LABEL_99;
    v111 = v47;
    if (!HIWORD(v4) || !HIWORD(v119) || v34 || (_DWORD)v2 || !HIWORD(v118) || !HIWORD(v117) || v46)
      goto LABEL_99;
    v116 = 0;
    v110 = v42 | v41;
    v48 = v26 & 0xFFFFFFFFFFFFFF00;
    v113 = 1;
LABEL_63:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v129, a1);
    v49 = a1[1];
    v50 = *a1;
    v51 = a1[2] - *a1;
    v115 = v4;
    v114 = v48;
    if (v49 <= v51)
    {
      v80 = 0;
      v81 = 0;
      *a1 = 0;
      a1[1] = 0;
      v82 = a1[3];
      if (v82)
      {
        if (v49)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
          v81 = *a1;
          v80 = a1[1];
        }
        else
        {
          v80 = 0;
          v81 = 0;
        }
      }
      goto LABEL_108;
    }
    v52 = (unsigned __int8 *)(v50 + v51);
    a1[2] = (uint64_t)(v52 + 1);
    if (!v50)
    {
      v80 = v49;
      v81 = 0;
LABEL_108:
      v54 = v3;
      v55 = v26;
      v49 = 0;
      v50 = 0;
      *a1 = 0;
      a1[1] = 0;
      v83 = a1[3];
      if (v83)
      {
        if (v80)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v81, v80);
          v50 = *a1;
          v49 = a1[1];
        }
        else
        {
          v49 = 0;
          v50 = 0;
        }
      }
LABEL_109:
      *a1 = 0;
      a1[1] = 0;
      v84 = a1[3];
      if (v84 && v49)
LABEL_175:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v50);
LABEL_132:
      v104 = *a1;
      v105 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v106 = a1[3];
      if (v106 && v105)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
      v69 = 0;
      LOBYTE(v56) = 0;
      v68 = 1;
      goto LABEL_80;
    }
    v53 = *v52;
    v54 = v3;
    v55 = v26;
    if (v53 >= 2)
      goto LABEL_109;
    if (!v53)
    {
      v69 = 0;
      LOBYTE(v56) = 0;
      v68 = 0;
      LOWORD(v4) = 0;
      goto LABEL_80;
    }
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
    v56 = result;
    v20 = a1[1];
    v57 = *a1;
    v58 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v20 < v58 || v20 - v58 <= 3)
    {
      v63 = 0;
      v100 = 0;
      *a1 = 0;
      a1[1] = 0;
      v101 = a1[3];
      if (v101)
      {
        v109 = v19;
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v57);
          v19 = v109;
          v100 = *a1;
          v63 = a1[1];
        }
        else
        {
          v63 = 0;
          v100 = 0;
        }
      }
    }
    else
    {
      v59 = (int *)(v57 + v58);
      a1[2] = (uint64_t)(v59 + 1);
      if (v57)
      {
        v60 = 0;
        v61 = *v59;
        v4 = v61 & 0xFFFFFF00;
        v62 = v61;
        v63 = v57;
        goto LABEL_71;
      }
      v63 = v20;
      v100 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      v2 = v19;
      if (v63)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v100, v63);
        v19 = v2;
        v4 = 0;
        v62 = 0;
        v63 = *a1;
        v20 = a1[1];
        v60 = 1;
        v57 = *a1;
      }
      else
      {
        v20 = 0;
        v57 = 0;
        v4 = 0;
        v62 = 0;
        v60 = 1;
      }
    }
    else
    {
      v63 = 0;
      v20 = 0;
      v57 = 0;
      v4 = 0;
      v62 = 0;
      v60 = 1;
    }
LABEL_71:
    v64 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v57;
    if (v20 < v64 || v20 - v64 <= 3)
    {
      v66 = 0;
      v63 = 0;
      *a1 = 0;
      a1[1] = 0;
      v102 = a1[3];
      if (v102)
      {
        v2 = v19;
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v57);
          v19 = v2;
          v63 = *a1;
          v66 = a1[1];
        }
        else
        {
          v66 = 0;
          v63 = 0;
        }
      }
    }
    else
    {
      v65 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v65 + 1);
      v66 = v20;
      if (v57)
      {
        v67 = 0;
        LODWORD(v3) = *v65;
        goto LABEL_75;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v103 = a1[3];
    if (!v103 || !v66)
      goto LABEL_132;
    v2 = v19;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v63, v66);
    if (!*a1)
    {
      v108 = a1[1];
      v84 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v84 && v108)
      {
        v50 = 0;
        goto LABEL_175;
      }
      goto LABEL_132;
    }
    LODWORD(v3) = 0;
    v67 = 1;
    v19 = v2;
LABEL_75:
    if (!(_BYTE)v19 || v60 || v67)
      goto LABEL_99;
    v68 = 0;
    LODWORD(v2) = v62 | v4;
    v69 = (unint64_t)v56 & 0xFFFFFFFFFFFFFF00;
    LOWORD(v4) = 1;
LABEL_80:
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v126);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_91;
    }
    if (v140)
    {
      v70 = v139;
      v139 = 0;
      if (v138)
      {
        v71 = v136;
        v72 = v137;
        v136 = 0;
        v137 = 0;
        if (!v116)
        {
          *(_QWORD *)&v121 = v114 | v55;
          DWORD2(v121) = v54;
          WORD6(v121) = v115;
          HIWORD(v121) = v119;
          LOBYTE(v122) = v112;
          *(_WORD *)((char *)&v122 + 1) = v134;
          BYTE3(v122) = v135;
          DWORD1(v122) = v110;
          WORD4(v122) = v118;
          WORD5(v122) = v117;
          BYTE12(v122) = v111;
          *(_WORD *)((char *)&v122 + 13) = v132;
          HIBYTE(v122) = v133;
          LOBYTE(v123) = v113;
          if (v131)
          {
            *((_QWORD *)&v123 + 1) = v129;
            LOBYTE(v124) = v130;
            if (!v68)
            {
              *((_QWORD *)&v124 + 1) = v56 | v69;
              *(_DWORD *)v125 = (_DWORD)v2;
              *(_DWORD *)&v125[4] = v3;
              v125[8] = v4;
              if (v128)
                break;
            }
          }
        }
      }
    }
LABEL_99:
    __break(1u);
LABEL_100:
    if (v20)
      (*(void (**)(WTF::StringImpl *, char *))(*(_QWORD *)result + 16))(result, v19);
  }
  *(_QWORD *)(a2 + 16) = v72;
  v73 = v124;
  *(_OWORD *)(a2 + 56) = v123;
  *(_OWORD *)(a2 + 72) = v73;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)v125;
  v74 = v122;
  *(_OWORD *)(a2 + 24) = v121;
  *(_QWORD *)&v125[16] = v126;
  v125[24] = v127;
  v120[0] = 0;
  v120[1] = 0;
  *(_QWORD *)a2 = v70;
  *(_QWORD *)(a2 + 8) = v71;
  v120[2] = 0;
  *(_OWORD *)(a2 + 40) = v74;
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v125[9];
  *(_BYTE *)(a2 + 120) = 1;
  WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v120[1], v19);
  result = v120[0];
  v120[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_91:
  if (v138)
    result = (WTF::StringImpl *)WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v19);
  if (v140)
  {
    result = v139;
    v139 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  va_list va;

  va_start(va, a7);
  std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 - 160, v9);
  if (*(_BYTE *)(v7 - 96))
  {
    v11 = *(WTF::StringImpl **)(v7 - 104);
    *(_QWORD *)(v7 - 104) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

_BYTE *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    *result = 0;
    result[8] = 0;
    goto LABEL_8;
  }
  result = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    *(_QWORD *)v3 = result;
    v3[8] = 1;
LABEL_8:
    v3[16] = 1;
    return result;
  }
LABEL_12:
  *v3 = 0;
  v3[16] = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v17)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(a1, (uint64_t)(a2 + 9));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(a1, (uint64_t)(a2 + 10));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(a1, (uint64_t)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(a1, (uint64_t)(a2 + 18));
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(WTF *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(a1, (_QWORD *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(a1, (_BYTE *)(a2 + 72));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>((char *)a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>((uint64_t *)a1, a2 + 128);
  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(a1, a2 + 144);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  char v6;
  WTF *v7;
  char v8;
  char v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  WTF *v18;
  WTF *v19;
  char *v20;
  unint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  WTF *v40;
  unsigned int v41;
  WTF *v42;
  WTF *v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unsigned int v49;
  char v50;
  BOOL v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int16 v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  unint64_t v73;
  char *v74;
  unsigned int v75;
  int v76;
  char v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unint64_t v96;
  _BOOL4 v98;
  char *v99;
  int v100;
  unsigned int v101;
  unint64_t v102;
  _DWORD *v103;
  char *v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  char *v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned __int8 v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  WTF::StringImpl *v129;
  __int128 v130;
  WTF *v131;
  unsigned int v132;
  void *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  __int128 *v146;
  WTF::StringImpl *v147;
  __int128 v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  WTF *v157;
  unint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF *v161;
  unint64_t v162;
  WTF::StringImpl *v163;
  unint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  __int128 v170;
  void *v171;
  void *v172;
  void *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *result;
  WTF::StringImpl *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  WTF *v232;
  WTF *v233;
  WTF *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unsigned __int16 v263;
  _BYTE v264[24];
  WTF::StringImpl *v265;
  uint64_t v266;
  WTF *v267;
  unint64_t v268;
  WTF::StringImpl *v269;
  unint64_t v270;
  _BYTE v271[48];
  _BYTE v272[21];
  _BYTE v273[64];
  WTF *v274;
  WTF::StringImpl *v275;
  char v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  WTF *v279;
  unint64_t v280;
  char v281;
  unsigned __int8 v282;
  __int16 v283;
  char v284;
  WTF *v285;
  WTF::StringImpl *v286;
  char v287;
  WTF *v288;
  unint64_t v289;
  WTF::StringImpl *v290;
  unint64_t v291;
  char v292;
  WTF::StringImpl *v293;
  char v294;
  unint64_t v295;
  WTF::StringImpl *v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  char v302;
  _QWORD v303[4];
  WTF::StringImpl *v304;
  uint64_t v305;
  char v306;
  WTF::StringImpl *v307;
  unint64_t v308;
  char v309;

  IPC::Decoder::decode<WTF::String>(a1, &v293);
  v255 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v256 = v6;
  v7 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v300);
  IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v295, a1);
  v10 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v11)
  {
    v12 = v10;
    v274 = 0;
    v275 = 0;
    if (v10 >= 0x6666)
    {
      v2 = 40;
      v3 = 1;
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>((WTF *)v264, (unint64_t *)a1);
        v35 = v267;
        if ((_BYTE)v267)
        {
          if (HIDWORD(v275) == (_DWORD)v275)
          {
            WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v274, (unint64_t)v264);
          }
          else
          {
            v36 = (char *)v274 + 40 * HIDWORD(v275);
            *v36 = 0;
            v36[32] = 0;
            if ((_BYTE)v266)
            {
              v37 = *(_QWORD *)v264;
              v36[8] = v264[8];
              *(_QWORD *)v36 = v37;
              *((_QWORD *)v36 + 2) = 0;
              *((_QWORD *)v36 + 3) = 0;
              v38 = *(_QWORD *)&v264[16];
              *(_QWORD *)&v264[16] = 0;
              *((_QWORD *)v36 + 2) = v38;
              *((_DWORD *)v36 + 6) = (_DWORD)v265;
              LODWORD(v38) = HIDWORD(v265);
              HIDWORD(v265) = 0;
              *((_DWORD *)v36 + 7) = v38;
              v36[32] = 1;
            }
            ++HIDWORD(v275);
          }
        }
        if ((_BYTE)v267)
          v39 = v266 == 0;
        else
          v39 = 1;
        if (!v39)
        {
          v40 = *(WTF **)&v264[16];
          if (*(_QWORD *)&v264[16])
          {
            *(_QWORD *)&v264[16] = 0;
            LODWORD(v265) = 0;
            WTF::fastFree(v40, v11);
          }
        }
        if (!v35)
          break;
        if (!--v12)
        {
          v309 = 0;
          v41 = HIDWORD(v275);
          v42 = v274;
          if (v275 > HIDWORD(v275))
          {
            v43 = v274;
            if (HIDWORD(v275))
            {
              if (HIDWORD(v275) >= 0x6666667)
              {
                __break(0xC471u);
                JUMPOUT(0x196E9C9A8);
              }
              v44 = 40 * HIDWORD(v275);
              v45 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v275)));
              LODWORD(v275) = v44 / 0x28;
              v274 = v45;
              v43 = v42;
              if (v45 != v42)
              {
                WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(v42, (WTF *)((char *)v42 + 40 * v41), (uint64_t)v45);
                v43 = v274;
              }
            }
            if (v42)
            {
              if (v43 == v42)
              {
                v274 = 0;
                LODWORD(v275) = 0;
              }
              WTF::fastFree(v42, v11);
              v42 = v274;
            }
            else
            {
              v42 = v43;
            }
          }
          v307 = v42;
          v2 = (int)v275;
          v3 = HIDWORD(v275);
          v274 = 0;
          v275 = 0;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v3 = 0;
        v2 = 0;
        v19 = 0;
LABEL_21:
        v274 = 0;
        v275 = 0;
        v307 = v19;
LABEL_22:
        v308 = __PAIR64__(v3, v2);
        v309 = 1;
        WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v274, v11);
        if (!*a1)
        {
          LOBYTE(v285) = 0;
          v292 = 0;
          v33 = 1;
LABEL_45:
          LODWORD(v34) = WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v307, v20);
          goto LABEL_74;
        }
        v22 = 0;
LABEL_24:
        if (!v9)
          goto LABEL_437;
        v274 = v7;
        if (!v302)
          goto LABEL_437;
        LOBYTE(v275) = 0;
        v276 = 0;
        if ((_BYTE)v301)
        {
          v23 = v300;
          v300 = 0;
          v275 = v23;
          v276 = 1;
        }
        if (!v297)
          goto LABEL_437;
        v24 = v295;
        v25 = v296;
        v295 = 0;
        v296 = 0;
        *(_QWORD *)v264 = v7;
        v264[8] = 0;
        v264[16] = 0;
        if ((_BYTE)v301)
        {
          v26 = v275;
          v275 = 0;
          *(_QWORD *)&v264[8] = v26;
          v264[16] = 1;
        }
        v277 = 0;
        v278 = 0;
        if (v22)
          goto LABEL_437;
        v27 = v307;
        v307 = 0;
        v308 = 0;
        v285 = v7;
        LOBYTE(v286) = 0;
        v287 = 0;
        if ((_BYTE)v301)
        {
          v28 = *(WTF::StringImpl **)&v264[8];
          *(_QWORD *)&v264[8] = 0;
          v286 = v28;
          v287 = 1;
        }
        v265 = 0;
        v288 = (WTF *)v24;
        v266 = 0;
        v289 = (unint64_t)v25;
        v267 = 0;
        v290 = v27;
        v268 = 0;
        v291 = __PAIR64__(v3, v2);
        v292 = 1;
        WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v267, v20);
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v265, v29);
        if (v264[16])
        {
          v31 = *(WTF::StringImpl **)&v264[8];
          *(_QWORD *)&v264[8] = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v277, v30);
        if (v276)
        {
          v32 = v275;
          v275 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        v33 = 0;
        goto LABEL_45;
      }
      LODWORD(v275) = 40 * (int)v10 / 0x28u;
      v274 = (WTF *)WTF::fastMalloc((WTF *)(40 * v10));
      v2 = 40;
      v3 = 1;
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>((WTF *)v264, (unint64_t *)a1);
        v13 = v267;
        if ((_BYTE)v267)
        {
          if (HIDWORD(v275) == (_DWORD)v275)
          {
            WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v274, (unint64_t)v264);
          }
          else
          {
            v14 = (char *)v274 + 40 * HIDWORD(v275);
            *v14 = 0;
            v14[32] = 0;
            if ((_BYTE)v266)
            {
              v15 = *(_QWORD *)v264;
              v14[8] = v264[8];
              *(_QWORD *)v14 = v15;
              *((_QWORD *)v14 + 2) = 0;
              *((_QWORD *)v14 + 3) = 0;
              v16 = *(_QWORD *)&v264[16];
              *(_QWORD *)&v264[16] = 0;
              *((_QWORD *)v14 + 2) = v16;
              *((_DWORD *)v14 + 6) = (_DWORD)v265;
              LODWORD(v16) = HIDWORD(v265);
              HIDWORD(v265) = 0;
              *((_DWORD *)v14 + 7) = v16;
              v14[32] = 1;
            }
            ++HIDWORD(v275);
          }
        }
        if ((_BYTE)v267)
          v17 = v266 == 0;
        else
          v17 = 1;
        if (!v17)
        {
          v18 = *(WTF **)&v264[16];
          if (*(_QWORD *)&v264[16])
          {
            *(_QWORD *)&v264[16] = 0;
            LODWORD(v265) = 0;
            WTF::fastFree(v18, v11);
          }
        }
        if (!v13)
          break;
        if (!--v12)
        {
          v309 = 0;
          v19 = v274;
          v2 = (int)v275;
          v3 = HIDWORD(v275);
          goto LABEL_21;
        }
      }
    }
    LOBYTE(v307) = 0;
    v309 = 0;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v274, v11);
  }
  else
  {
    LOBYTE(v307) = 0;
    v309 = 0;
  }
  v20 = (char *)*a1;
  v46 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34)
  {
    if (v46)
    {
      LODWORD(v34) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v34 + 16))(v34, v20);
      if (*a1)
      {
        v22 = 1;
        goto LABEL_24;
      }
    }
  }
  LOBYTE(v285) = 0;
  v292 = 0;
  v33 = 1;
LABEL_74:
  if (v297)
    LODWORD(v34) = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v295, v20);
  if (v302)
  {
    if ((_BYTE)v301)
    {
      v34 = (uint64_t)v300;
      v300 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          LODWORD(v34) = WTF::StringImpl::destroy((WTF::StringImpl *)v34, (WTF::StringImpl *)v20);
          if (!v33)
            goto LABEL_82;
          goto LABEL_200;
        }
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (!v33)
    goto LABEL_82;
LABEL_200:
  v135 = *a1;
  v136 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34 && v136)
    LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v135);
LABEL_82:
  v21 = a1[1];
  v20 = (char *)*a1;
  v47 = a1[2] - *a1;
  if (v21 <= v47)
  {
    v178 = 0;
    v179 = 0;
    *a1 = 0;
    a1[1] = 0;
    v180 = a1[3];
    if (v180)
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v180 + 16))(v180);
        v179 = *a1;
        v178 = a1[1];
      }
      else
      {
        v178 = 0;
        v179 = 0;
      }
    }
    goto LABEL_285;
  }
  v48 = &v20[v47];
  a1[2] = (uint64_t)(v48 + 1);
  if (!v20)
    goto LABEL_438;
  v49 = *v48;
  if (v49 >= 2)
    goto LABEL_286;
  if (!v49)
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0x100000000000000;
    goto LABEL_137;
  }
  *(_WORD *)v264 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v264);
  v50 = v264[0];
  if (v264[1])
    v51 = v264[0] > 4u;
  else
    v51 = 1;
  v52 = v51;
  v53 = a1[1];
  if (v52 == 1)
  {
    v200 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v201 = a1[3];
    if (v201)
    {
      if (v53)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v201 + 16))(v201, v200);
        v50 = 0;
        v53 = a1[1];
        goto LABEL_93;
      }
      v50 = 0;
    }
    else
    {
      v50 = 0;
      v53 = 0;
    }
    v202 = 0;
    goto LABEL_314;
  }
LABEL_93:
  v54 = *a1;
  v55 = a1[2] - *a1;
  if (v53 <= v55)
  {
    v202 = 0;
    v237 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v53 && v237)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 16))(v237);
      v202 = *a1;
      v53 = a1[1];
    }
    else
    {
      v53 = 0;
    }
    goto LABEL_314;
  }
  v56 = (unsigned __int8 *)(v54 + v55);
  a1[2] = (uint64_t)(v56 + 1);
  if (!v54)
  {
    v202 = 0;
LABEL_314:
    *a1 = 0;
    a1[1] = 0;
    v203 = a1[3];
    if (v203)
    {
      if (v53)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v203 + 16))(v203, v202);
        v54 = *a1;
        v53 = a1[1];
      }
      else
      {
        v54 = 0;
      }
    }
    else
    {
      v54 = 0;
      v53 = 0;
    }
    goto LABEL_316;
  }
  v57 = *v56;
  if (v57 < 2)
  {
    if (v57)
    {
      v58 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
      v59 = (v58 > 0xFFu) << 16;
      if ((v58 & 0xFF00) != 0)
        v60 = v58;
      else
        v60 = 0;
      v61 = 256;
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v59 = 0x10000;
    }
    goto LABEL_103;
  }
LABEL_316:
  *a1 = 0;
  a1[1] = 0;
  v204 = a1[3];
  if (v204 && v53)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v54);
  v59 = 0;
  v60 = 0;
  v61 = 0;
LABEL_103:
  if (!HIWORD(v59))
  {
    v205 = *a1;
    v206 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v207 = a1[3];
    if (v207)
    {
      if (v206)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, v205);
    }
  }
  *(_WORD *)v264 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v264);
  v66 = v264[0];
  if (v264[1])
    v67 = v264[0] > 1u;
  else
    v67 = 1;
  v68 = v67;
  if (v68 == 1)
  {
    v208 = *a1;
    v209 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v210 = a1[3];
    if (v210)
    {
      if (v209)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v210 + 16))(v210, v208);
    }
  }
  *(_WORD *)v264 = 0;
  LODWORD(v34) = IPC::Decoder::operator>><unsigned char>(a1, v264);
  v69 = v60 | v59 | v61;
  v70 = v264[0];
  if (v264[1])
    v71 = v264[0] > 2u;
  else
    v71 = 1;
  v72 = v71;
  v21 = a1[1];
  if (v72 == 1)
  {
    v211 = 0;
    v212 = 0;
    v213 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v214 = a1[3];
    if (!v214)
    {
LABEL_325:
      *a1 = 0;
      a1[1] = 0;
      v215 = a1[3];
      if (v215 && v211)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v215 + 16))(v215, v212, v211);
        v75 = 0;
        v20 = (char *)*a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v20 = 0;
        v75 = 0;
      }
      goto LABEL_327;
    }
    if (!v21)
    {
      v211 = 0;
      v212 = 0;
      goto LABEL_325;
    }
    LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v213);
    v21 = a1[1];
  }
  v20 = (char *)*a1;
  v73 = a1[2] - *a1;
  if (v21 <= v73)
  {
    v211 = 0;
    v238 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v212 = 0;
    if (v21 && v238)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 16))(v238);
      v212 = *a1;
      v211 = a1[1];
    }
    goto LABEL_325;
  }
  v74 = &v20[v73];
  a1[2] = (uint64_t)(v74 + 1);
  if (!v20)
  {
    v211 = v21;
    v212 = 0;
    goto LABEL_325;
  }
  v75 = *v74;
  if (v75 < 2)
  {
    v76 = 0;
    v77 = 1;
    if (v52)
      goto LABEL_437;
    goto LABEL_122;
  }
LABEL_327:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34 && v21)
  {
    LODWORD(v34) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v34 + 16))(v34, v20);
    v77 = 0;
    v20 = (char *)*a1;
    if (*a1)
    {
      v76 = 1;
      if (v52)
        goto LABEL_437;
LABEL_122:
      if (!HIWORD(v69) || v68 || v72 || v76)
        goto LABEL_437;
      v78 = 1;
      goto LABEL_127;
    }
    v50 = 0;
    v78 = 0;
  }
  else
  {
    v20 = 0;
    v77 = 0;
    v50 = 0;
    v78 = 0;
  }
LABEL_127:
  v17 = (v77 & (v75 != 0)) == 0;
  v79 = 0x10000000000;
  if (v17)
    v79 = 0;
  v80 = v70 << 32;
  if (v72)
    v80 = 0;
  v81 = v66 << 24;
  if (v68)
    v81 = 0;
  if (v78)
  {
    v82 = v79 & 0xFFFEFFFFFFFFFFFFLL | ((unint64_t)(v78 & 1) << 48) | v80 | v81 | ((unsigned __int16)v69 << 8);
    v64 = v82 & 0xFFFFFFFFFF00;
    v63 = (v82 | v50);
    v65 = 0x100000000000000;
  }
  else
  {
    v219 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v219)
      LODWORD(v34) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v34 + 16))(v34, v20);
    v65 = 0;
    v63 = 0;
    v64 = 0;
  }
  v62 = 0x1000000000000;
  while (1)
  {
LABEL_137:
    v83 = a1[1];
    if (!HIBYTE(v65))
    {
      v182 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v183 = a1[3];
      if (!v183 || !v83)
      {
        v83 = 0;
        v20 = (char *)*a1;
LABEL_292:
        v184 = 0;
        v185 = 0;
        *a1 = 0;
        a1[1] = 0;
        v186 = a1[3];
        if (v186)
        {
          if (v83)
          {
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v186 + 16))(v186, v20);
            v185 = *a1;
            v184 = a1[1];
          }
          else
          {
            v184 = 0;
            v185 = 0;
          }
        }
        goto LABEL_293;
      }
      LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 16))(v183, v182);
      v83 = a1[1];
    }
    v20 = (char *)*a1;
    v84 = a1[2] - *a1;
    if (v83 <= v84)
      goto LABEL_292;
    v85 = &v20[v84];
    a1[2] = (uint64_t)(v85 + 1);
    if (!v20)
    {
      v184 = v83;
      v185 = 0;
LABEL_293:
      v83 = 0;
      v20 = 0;
      *a1 = 0;
      a1[1] = 0;
      v187 = a1[3];
      if (v187)
      {
        if (v184)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, v185, v184);
          v20 = (char *)*a1;
          v83 = a1[1];
        }
        else
        {
          v83 = 0;
          v20 = 0;
        }
      }
LABEL_294:
      *a1 = 0;
      a1[1] = 0;
      v188 = a1[3];
      if (v188 && v83)
LABEL_409:
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v188 + 16))(v188, v20);
LABEL_330:
      v217 = *a1;
      v218 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34 && v218)
      {
        LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v217);
        LOBYTE(v263) = 0;
        v20 = (char *)*a1;
      }
      else
      {
        v20 = 0;
        LOBYTE(v263) = 0;
      }
      v251 = 1;
      LODWORD(v259) = 1;
      LODWORD(v260) = 1;
      LODWORD(v261) = 1;
      LODWORD(v262) = 1;
      goto LABEL_155;
    }
    v86 = *v85;
    if (v86 >= 2)
      goto LABEL_294;
    if (!v86)
    {
      LOBYTE(v263) = 0;
      v249 = 0;
      v251 = 0;
      LODWORD(v259) = 0;
      LODWORD(v260) = 0;
      LODWORD(v261) = 0;
      LODWORD(v262) = 0;
      goto LABEL_155;
    }
    v263 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a1);
    v258 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v257 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>(a1);
    v262 = IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>(a1);
    v261 = IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>(a1);
    v87 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    v89 = v88;
    v90 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    v92 = v91;
    v260 = IPC::Decoder::decode<unsigned int>(a1);
    v259 = IPC::Decoder::decode<float>(a1);
    v34 = IPC::Decoder::decode<float>(a1);
    v20 = (char *)*a1;
    if (!*a1)
    {
      v216 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v188 = a1[3];
      if (v188 && v216)
      {
        v20 = 0;
        goto LABEL_409;
      }
      goto LABEL_330;
    }
    if (v263 <= 0xFFu
      || (v258 & 0xFF0000) == 0
      || !HIWORD(v257)
      || !BYTE4(v262)
      || !BYTE4(v261)
      || !v89
      || !v92
      || (v260 & 0xFF00000000) == 0
      || (v259 & 0xFF00000000) == 0
      || (v34 & 0xFF00000000) == 0)
    {
      goto LABEL_437;
    }
    v251 = 0;
    v247 = v87 << 24;
    v248 = v90 << 24;
    v249 = 1;
LABEL_155:
    v250 = v34;
    v21 = a1[1];
    v253 = v64;
    v254 = v63;
    v252 = v62;
    if (v21 <= a1[2] - (uint64_t)v20)
    {
      v189 = 0;
      v190 = 0;
      *a1 = 0;
      a1[1] = 0;
      v191 = a1[3];
      if (v191)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v191 + 16))(v191);
          v190 = *a1;
          v189 = a1[1];
        }
        else
        {
          v189 = 0;
          v190 = 0;
        }
      }
      goto LABEL_298;
    }
    v93 = (unsigned __int8 *)a1[2];
    v94 = v93 + 1;
    a1[2] = (uint64_t)(v93 + 1);
    if (!v20)
    {
      v189 = v21;
      v190 = 0;
LABEL_298:
      v21 = 0;
      v20 = 0;
      *a1 = 0;
      a1[1] = 0;
      v192 = a1[3];
      if (v192)
      {
        if (v189)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v192 + 16))(v192, v190, v189);
          v20 = (char *)*a1;
          v21 = a1[1];
        }
        else
        {
          v21 = 0;
          v20 = 0;
        }
      }
LABEL_299:
      *a1 = 0;
      a1[1] = 0;
      v193 = a1[3];
      if (v193 && v21)
LABEL_417:
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v193 + 16))(v193, v20);
LABEL_344:
      v227 = *a1;
      v228 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v229 = a1[3];
      if (v229 && v228)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v229 + 16))(v229, v227);
        v117 = 0;
        v116 = 0;
        v20 = (char *)*a1;
      }
      else
      {
        v20 = 0;
        v117 = 0;
        v116 = 0;
      }
      v114 = 1;
      goto LABEL_181;
    }
    v95 = *v93;
    if (v95 >= 2)
      goto LABEL_299;
    if (!v95)
    {
      v117 = 0;
      v116 = 0;
      v114 = 0;
      LOBYTE(v64) = 0;
      goto LABEL_181;
    }
    v96 = ((unint64_t)(v94 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v20;
    v98 = v21 < v96 || v21 - v96 < 4;
    if (v98)
    {
      *a1 = 0;
      a1[1] = 0;
      v220 = a1[3];
      if (v220)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v220 + 16))(v220);
        v101 = 0;
        v20 = 0;
        v240 = *a1;
        v241 = a1[1];
        v242 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v21 = 0;
        LODWORD(v64) = 0;
        if (v242 && v241)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v242 + 16))(v242, v240, v241);
          v101 = 0;
          LODWORD(v64) = 0;
          v20 = (char *)*a1;
          v21 = a1[1];
        }
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v101 = 0;
        LODWORD(v64) = 0;
      }
    }
    else
    {
      v99 = &v20[v96];
      v100 = *(_DWORD *)v99;
      a1[2] = (uint64_t)(v99 + 4);
      v101 = v100 & 0xFFFFFF00;
      LODWORD(v64) = v100;
    }
    v102 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v20;
    if (v21 < v102 || v21 - v102 <= 3)
    {
      v221 = 0;
      v222 = 0;
      *a1 = 0;
      a1[1] = 0;
      v223 = a1[3];
      if (v223)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v223 + 16))(v223);
          v222 = *a1;
          v221 = a1[1];
        }
        else
        {
          v221 = 0;
          v222 = 0;
        }
      }
    }
    else
    {
      v103 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v104 = (char *)(v103 + 1);
      a1[2] = (uint64_t)(v103 + 1);
      if (v20)
      {
        v105 = 0;
        v106 = *v103;
        v107 = v106 & 0xFFFFFF00;
        v108 = v106;
        goto LABEL_171;
      }
      v221 = v21;
      v222 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v224 = a1[3];
    if (!v224)
    {
      v108 = 0;
      v107 = 0;
      v221 = 0;
LABEL_340:
      v20 = 0;
      v105 = 1;
LABEL_341:
      *a1 = 0;
      a1[1] = 0;
      v225 = a1[3];
      if (v225 && v221)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v225 + 16))(v225, v20, v221);
        v111 = 0;
        v20 = (char *)*a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v20 = 0;
        v111 = 0;
      }
      goto LABEL_343;
    }
    if (!v221)
    {
      v108 = 0;
      v107 = 0;
      goto LABEL_340;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v224 + 16))(v224, v222, v221);
    v107 = 0;
    v108 = 0;
    v20 = (char *)*a1;
    v21 = a1[1];
    v105 = 1;
    v104 = (char *)a1[2];
LABEL_171:
    v109 = v104 - v20;
    if (v21 <= v109)
    {
      v221 = 0;
      v243 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v21 && v243)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v243 + 16))(v243);
        v20 = (char *)*a1;
        v221 = a1[1];
      }
      else
      {
        v20 = 0;
      }
      goto LABEL_341;
    }
    v110 = &v20[v109];
    a1[2] = (uint64_t)(v110 + 1);
    if (!v20)
    {
      v221 = v21;
      goto LABEL_341;
    }
    v111 = *v110;
    if (v111 < 2)
    {
      v112 = 0;
      v113 = 1;
      if (v98)
        goto LABEL_437;
      goto LABEL_175;
    }
LABEL_343:
    *a1 = 0;
    a1[1] = 0;
    v226 = a1[3];
    if (!v226 || !v21)
      goto LABEL_344;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v226 + 16))(v226, v20);
    v20 = (char *)*a1;
    if (!*a1)
    {
      v193 = a1[3];
      v239 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      if (v193 && v239)
      {
        v20 = 0;
        goto LABEL_417;
      }
      goto LABEL_344;
    }
    v113 = 0;
    v112 = 1;
    if (v98)
      goto LABEL_437;
LABEL_175:
    if (v105 || v112)
      goto LABEL_437;
    v114 = 0;
    v115 = v64 | v101;
    if (!v111)
      v113 = 0;
    v246 = v113;
    v116 = v64 | v101;
    v117 = v115 & 0xFFFFFFFFFFFFFF00 | ((unint64_t)(v108 | v107) << 32);
    LOBYTE(v64) = 1;
LABEL_181:
    v118 = a1[1];
    if (v118 <= a1[2] - (uint64_t)v20)
    {
      v194 = 0;
      v195 = 0;
      *a1 = 0;
      a1[1] = 0;
      v196 = a1[3];
      if (v196)
      {
        if (v118)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v196 + 16))(v196);
          v195 = *a1;
          v194 = a1[1];
        }
        else
        {
          v194 = 0;
          v195 = 0;
        }
      }
      goto LABEL_303;
    }
    v119 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v119 + 1);
    if (!v20)
    {
      v194 = v118;
      v195 = 0;
LABEL_303:
      v118 = 0;
      v20 = 0;
      *a1 = 0;
      a1[1] = 0;
      v197 = a1[3];
      if (v197)
      {
        if (v194)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v197 + 16))(v197, v195, v194);
          v20 = (char *)*a1;
          v118 = a1[1];
        }
        else
        {
          v118 = 0;
          v20 = 0;
        }
      }
      goto LABEL_304;
    }
    v120 = *v119;
    if (v120 < 2)
    {
      if (!v120)
      {
        v264[0] = 0;
        LOBYTE(v269) = 0;
        std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100](&v274, (uint64_t)v264);
        v282 = 1;
        std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v264, v133);
        v134 = v282;
        goto LABEL_248;
      }
      v121 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v123 = v122;
      IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v307);
      IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v304, a1);
      v124 = IPC::Decoder::decode<unsigned long long>(a1);
      if ((_BYTE)v20)
      {
        v125 = v124;
        v300 = 0;
        v301 = 0;
        if (v124 >= 0x10000)
        {
          while (1)
          {
            IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>((uint64_t)v264, a1);
            if (!v264[16])
              break;
            v145 = HIDWORD(v301);
            if (HIDWORD(v301) == (_DWORD)v301)
            {
              v146 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v300, HIDWORD(v301) + 1, (unint64_t)v264);
              v145 = HIDWORD(v301);
              v147 = v300;
              v148 = *v146;
            }
            else
            {
              v147 = v300;
              v148 = *(_OWORD *)v264;
            }
            *((_OWORD *)v147 + v145) = v148;
            v149 = ++HIDWORD(v301);
            if (!--v125)
            {
              v131 = v300;
              if (v301 > v149)
              {
                v232 = v300;
                v245 = v149;
                if ((_DWORD)v149)
                {
                  if (v149 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196E9C9B0);
                  }
                  v244 = 16 * v149;
                  v233 = (WTF *)WTF::fastMalloc((WTF *)(16 * v149));
                  LODWORD(v301) = v245;
                  v300 = v233;
                  v232 = v131;
                  if (v233 != v131)
                  {
                    v234 = v131;
                    v235 = v244;
                    do
                    {
                      v236 = *(_OWORD *)v234;
                      v234 = (WTF *)((char *)v234 + 16);
                      *(_OWORD *)v233 = v236;
                      v233 = (WTF *)((char *)v233 + 16);
                      v235 -= 16;
                    }
                    while (v235);
                    v232 = v300;
                  }
                }
                if (v131)
                {
                  if (v232 == v131)
                  {
                    v300 = 0;
                    LODWORD(v301) = 0;
                  }
                  WTF::fastFree(v131, v20);
                  v131 = v300;
                }
                else
                {
                  v131 = v232;
                }
              }
              v132 = v301;
              LODWORD(v127) = HIDWORD(v301);
LABEL_195:
              if (!*a1)
              {
                v264[0] = 0;
                LOBYTE(v269) = 0;
                if (v131)
                  WTF::fastFree(v131, v20);
                goto LABEL_235;
              }
              goto LABEL_205;
            }
          }
        }
        else
        {
          if (!v124)
          {
            if (*a1)
            {
              v131 = 0;
              v132 = 0;
              LODWORD(v127) = 0;
LABEL_205:
              v137 = 0;
              goto LABEL_206;
            }
LABEL_234:
            v264[0] = 0;
            LOBYTE(v269) = 0;
LABEL_235:
            if (v306)
              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v304, v20);
            if (v309)
            {
              if ((_BYTE)v308)
              {
                v153 = v307;
                v307 = 0;
                if (v153)
                {
                  if (*(_DWORD *)v153 == 2)
                    WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v153 -= 2;
                }
              }
            }
            if ((_BYTE)v269
              || (v20 = (char *)*a1, v230 = a1[1], *a1 = 0, a1[1] = 0, (v231 = a1[3]) != 0)
              && v230
              && ((*(void (**)(uint64_t, char *))(*(_QWORD *)v231 + 16))(v231, v20), (_BYTE)v269))
            {
              v274 = *(WTF **)v264;
              LOBYTE(v275) = 0;
              v276 = 0;
              if (v264[16])
              {
                v154 = *(WTF::StringImpl **)&v264[8];
                *(_QWORD *)&v264[8] = 0;
                v275 = v154;
                v276 = 1;
              }
              v155 = v265;
              v265 = 0;
              v277 = v155;
              v156 = v266;
              v266 = 0;
              v278 = v156;
              v157 = v267;
              v267 = 0;
              v279 = v157;
              v158 = v268;
              v268 = 0;
              v280 = v158;
              v134 = 1;
              v281 = 1;
            }
            else
            {
              v134 = 0;
              LOBYTE(v274) = 0;
            }
            v282 = v134;
            std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v264, v20);
LABEL_248:
            if (v134)
              goto LABEL_249;
            goto LABEL_306;
          }
          v126 = WTF::fastMalloc((WTF *)(16 * v124));
          LODWORD(v301) = v125;
          v300 = (WTF::StringImpl *)v126;
          while (1)
          {
            IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>((uint64_t)v264, a1);
            if (!v264[16])
              break;
            v127 = HIDWORD(v301);
            if (HIDWORD(v301) == (_DWORD)v301)
            {
              v128 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v300, HIDWORD(v301) + 1, (unint64_t)v264);
              v127 = HIDWORD(v301);
              v129 = v300;
              v130 = *v128;
            }
            else
            {
              v129 = v300;
              v130 = *(_OWORD *)v264;
            }
            *((_OWORD *)v129 + v127) = v130;
            LODWORD(v127) = ++HIDWORD(v301);
            if (!--v125)
            {
              v131 = v300;
              v132 = v301;
              goto LABEL_195;
            }
          }
        }
        v150 = v300;
        if (v300)
        {
          v300 = 0;
          LODWORD(v301) = 0;
          WTF::fastFree(v150, v20);
        }
      }
      v20 = (char *)*a1;
      v151 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v152 = a1[3];
      if (v152)
      {
        if (v151)
        {
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v152 + 16))(v152, v20);
          v127 = *a1;
          if (*a1)
          {
            v131 = 0;
            v137 = 1;
LABEL_206:
            if (!v123)
              goto LABEL_437;
            v295 = v121;
            if (!v309)
              goto LABEL_437;
            LOBYTE(v296) = 0;
            v297 = 0;
            if ((_BYTE)v308)
            {
              v138 = v307;
              v307 = 0;
              v296 = v138;
              v297 = 1;
            }
            if (!v306)
              goto LABEL_437;
            v139 = v304;
            v140 = v305;
            v304 = 0;
            v305 = 0;
            v300 = (WTF::StringImpl *)v121;
            LOBYTE(v301) = 0;
            v302 = 0;
            if ((_BYTE)v308)
            {
              v141 = v296;
              v296 = 0;
              v302 = 1;
              v298 = 0;
              v299 = 0;
              if (v137)
                goto LABEL_437;
              v301 = 0;
              *(_QWORD *)v264 = v121;
              *(_QWORD *)&v264[8] = v141;
              v264[16] = 1;
            }
            else
            {
              v298 = 0;
              v299 = 0;
              if ((v137 & 1) != 0)
                goto LABEL_437;
              *(_QWORD *)v264 = v121;
              v264[8] = 0;
              v264[16] = 0;
            }
            memset(v303, 0, sizeof(v303));
            v265 = v139;
            v266 = v140;
            v267 = v131;
            v268 = __PAIR64__(v127, v132);
            LOBYTE(v269) = 1;
            WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v303, v20);
            if (v302)
            {
              v143 = v301;
              v301 = 0;
              if (v143)
              {
                if (*(_DWORD *)v143 == 2)
                  WTF::StringImpl::destroy(v143, v142);
                else
                  *(_DWORD *)v143 -= 2;
              }
            }
            WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v298, v142);
            if (v297)
            {
              v144 = v296;
              v296 = 0;
              if (v144)
              {
                if (*(_DWORD *)v144 == 2)
                  WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v144 -= 2;
              }
            }
            goto LABEL_235;
          }
        }
      }
      goto LABEL_234;
    }
LABEL_304:
    *a1 = 0;
    a1[1] = 0;
    v198 = a1[3];
    if (v198 && v118)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v198 + 16))(v198, v20);
    LOBYTE(v274) = 0;
    v282 = 0;
LABEL_306:
    v20 = (char *)*a1;
    v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v199 = a1[3];
    if (v199 && v21)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v199 + 16))(v199, v20);
LABEL_249:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 208) = 0;
      goto LABEL_270;
    }
    if (v294)
    {
      v159 = v293;
      v293 = 0;
      if (v256)
      {
        *(_QWORD *)v264 = v159;
        *(_QWORD *)&v264[8] = v255;
        if (v292)
        {
          *(_QWORD *)&v264[16] = v285;
          LOBYTE(v265) = 0;
          LOBYTE(v266) = 0;
          if (v287)
          {
            v160 = v286;
            v286 = 0;
            v265 = v160;
            LOBYTE(v266) = 1;
          }
          v161 = v288;
          v288 = 0;
          v267 = v161;
          v162 = v289;
          v289 = 0;
          v268 = v162;
          v163 = v290;
          v290 = 0;
          v269 = v163;
          v164 = v291;
          v291 = 0;
          v270 = v164;
          if ((v65 | v253 | v252 | v254) >> 56)
          {
            *(_DWORD *)v271 = v65 | v253 | v252 | v254;
            v271[6] = (v65 | v253 | v252 | v254) >> 48;
            *(_WORD *)&v271[4] = (v65 | v253 | v252 | v254) >> 32;
            if (!v251)
            {
              v271[8] = v263;
              *(_WORD *)&v271[9] = v258;
              *(_WORD *)&v271[11] = v257;
              *(_DWORD *)&v271[13] = v262;
              *(_DWORD *)&v271[17] = v261;
              *(_QWORD *)&v271[21] = v247;
              *(_QWORD *)&v271[29] = v248;
              *(_WORD *)&v271[37] = v283;
              v271[39] = v284;
              *(_DWORD *)&v271[40] = v260;
              *(_DWORD *)&v271[44] = v259;
              *(_DWORD *)v272 = v250;
              v272[4] = v249;
              if (!v114)
              {
                *(_QWORD *)&v272[8] = v116 | v117;
                *(_DWORD *)&v272[16] = v246;
                v272[20] = v64;
                if (v282)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_437:
    __break(1u);
LABEL_438:
    v178 = v21;
    v179 = (uint64_t)v20;
LABEL_285:
    v21 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v181 = a1[3];
    if (v181)
    {
      if (v178)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181 + 16))(v181, v179, v178);
        v20 = (char *)*a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v20 = 0;
      }
    }
LABEL_286:
    v62 = 0;
    v65 = 0;
    v63 = 0;
    v64 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v21)
        LODWORD(v34) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v34 + 16))(v34, v20);
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
    }
  }
  std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100](v273, (uint64_t)&v274);
  v165 = *(_QWORD *)v264;
  *(_QWORD *)v264 = 0;
  *(_QWORD *)a2 = v165;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&v264[8];
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if ((_BYTE)v266)
  {
    v166 = v265;
    v265 = 0;
    *(_QWORD *)(a2 + 24) = v166;
    *(_BYTE *)(a2 + 32) = 1;
  }
  *(_QWORD *)(a2 + 56) = v269;
  *(_QWORD *)(a2 + 40) = v267;
  v267 = 0;
  v167 = v268;
  v268 = 0;
  *(_QWORD *)(a2 + 48) = v167;
  v269 = 0;
  v168 = v270;
  v270 = 0;
  *(_QWORD *)(a2 + 64) = v168;
  v169 = *(_OWORD *)v272;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)&v271[32];
  *(_OWORD *)(a2 + 120) = v169;
  *(_QWORD *)(a2 + 133) = *(_QWORD *)&v272[13];
  v170 = *(_OWORD *)&v271[16];
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v271;
  *(_OWORD *)(a2 + 88) = v170;
  std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 144), (uint64_t)v273);
  *(_BYTE *)(a2 + 208) = 1;
  std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v273, v171);
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v269, v172);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v267, v173);
  if ((_BYTE)v266)
  {
    v174 = v265;
    v265 = 0;
    if (v174)
    {
      if (*(_DWORD *)v174 == 2)
        WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v174 -= 2;
    }
  }
  v175 = *(WTF::StringImpl **)v264;
  *(_QWORD *)v264 = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v175 -= 2;
  }
LABEL_270:
  if (v282)
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v274, v20);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v285, v20);
  if (v294)
  {
    result = v293;
    v293 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v177);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9C9BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF *a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  void *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, a2);
  std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a64, v66);
  if (*(_BYTE *)(v64 - 240))
  {
    v68 = *(WTF::StringImpl **)(v64 - 248);
    *(_QWORD *)(v64 - 248) = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2);
  LOBYTE(v2) = v2[2];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(_QWORD *a1, _BYTE *a2)
{
  _QWORD *result;
  unint64_t v5;

  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = a2[2];
    a1[2] = v5 + 1;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::decode(uint64_t *a1)
{
  unsigned int v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  __int16 v38;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_20;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
    goto LABEL_51;
  v7 = *v6;
  if (v7 >= 2)
    goto LABEL_21;
  if (v7)
  {
    v38 = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v38);
    if (HIBYTE(v38))
    {
      v7 = v38;
      v8 = 0x10000;
    }
    else
    {
      v32 = *a1;
      v33 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34 && v33)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      v7 = 0;
      v8 = 0;
    }
    v9 = 256;
  }
  else
  {
    v9 = 0;
    v8 = 0x10000;
  }
  while (1)
  {
    LODWORD(v10) = v7 | v8;
    v11 = v10 | v9;
    v3 = a1[1];
    if (!HIWORD(v8))
    {
      v25 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (!v26 || !v3)
      {
        v3 = 0;
        v4 = *a1;
LABEL_25:
        v27 = 0;
        v28 = 0;
        *a1 = 0;
        a1[1] = 0;
        v29 = a1[3];
        if (v29)
        {
          if (v3)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v4);
            v28 = *a1;
            v27 = a1[1];
          }
          else
          {
            v27 = 0;
            v28 = 0;
          }
        }
LABEL_26:
        *a1 = 0;
        a1[1] = 0;
        v30 = a1[3];
        if (v30)
        {
          if (v27)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
            v14 = 0;
            v4 = *a1;
            v3 = a1[1];
          }
          else
          {
            v3 = 0;
            v4 = 0;
            v14 = 0;
          }
        }
        else
        {
          v3 = 0;
          v4 = 0;
          v14 = 0;
        }
        goto LABEL_28;
      }
      v37 = v11;
      v36 = v10;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v25);
      LOBYTE(v10) = v36;
      v11 = v37;
      v3 = a1[1];
    }
    v4 = *a1;
    v12 = a1[2] - *a1;
    if (v3 <= v12)
      goto LABEL_25;
    v13 = (unsigned __int8 *)(v4 + v12);
    LOWORD(v1) = (_WORD)v13 + 1;
    a1[2] = (uint64_t)(v13 + 1);
    if (!v4)
    {
      v27 = v3;
      v28 = 0;
      goto LABEL_26;
    }
    v14 = *v13;
    if (v14 < 2)
    {
      v1 = HIWORD(v11);
      if (HIWORD(v11))
      {
        v1 = v11 >> 8;
        v15 = 1;
        goto LABEL_15;
      }
      goto LABEL_50;
    }
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31)
    {
      v15 = 0;
      LOBYTE(v10) = 0;
      goto LABEL_15;
    }
    v35 = v14;
    if (!v3)
      break;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v4);
    v10 = *a1;
    if (!*a1)
    {
      v15 = 0;
      goto LABEL_35;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    v20 = v3;
    v21 = v4;
LABEL_20:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v4 = *a1;
        v3 = a1[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24 && v3)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v4);
    v8 = 0;
    v7 = 0;
    v9 = 0;
  }
  v15 = 0;
  LOBYTE(v10) = 0;
LABEL_35:
  v14 = v35;
LABEL_15:
  v16 = v10 | (unsigned __int16)((_WORD)v1 << 8);
  v17 = (v15 & (v14 != 0)) == 0;
  v18 = 0x10000;
  if (v17)
    v18 = 0;
  return v18 & 0xFFFFFFFFFFFF0000 | (v15 << 24) | v16;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  int v11;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 10);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)v2 + 11);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *((_BYTE *)v2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *((_BYTE *)v2 + 13);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = *((_DWORD *)v2 + 5);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 24);
  LOWORD(v2) = *((_WORD *)v2 + 13);
  result = IPC::Encoder::grow(a1, 2uLL, 2);
  *(_WORD *)result = (_WORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  v4 = a1[2];
  if (v4 >= a1[1])
    goto LABEL_9;
  *(_BYTE *)(*a1 + v4) = *(_BYTE *)(a2 + 8);
  a1[2] = v4 + 1;
  if (v4 + 1 >= a1[1])
    goto LABEL_9;
  *(_BYTE *)(*a1 + v4 + 1) = *(_BYTE *)(a2 + 9);
  a1[2] = v4 + 2;
  if (v4 + 2 >= a1[1]
    || (*(_BYTE *)(*a1 + v4 + 2) = *(_BYTE *)(a2 + 10), a1[2] = v4 + 3, v4 + 3 >= a1[1])
    || (*(_BYTE *)(*a1 + v4 + 3) = *(_BYTE *)(a2 + 11), a1[2] = v4 + 4, v4 + 4 >= a1[1])
    || (*(_BYTE *)(*a1 + v4 + 4) = *(_BYTE *)(a2 + 12), a1[2] = v4 + 5, v4 + 5 >= a1[1]))
  {
LABEL_9:
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4 + 5) = *(_BYTE *)(a2 + 13);
    a1[2] = v4 + 6;
  }
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 16));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 20));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 24));
  return IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)(a2 + 26));
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  char v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  WTF::StringImpl *v21;
  char v22;
  __int16 v23;

  IPC::Decoder::decode<WTF::String>(a1, &v21);
  v20 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v19 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v4 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v5 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  v6 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  v23 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v23);
  v7 = v23;
  if (HIBYTE(v23))
    v8 = v23 > 1u;
  else
    v8 = 1;
  v9 = v8;
  if (v9 == 1)
    goto LABEL_23;
  while (1)
  {
    v10 = IPC::Decoder::decode<float>(a1);
    v11 = IPC::Decoder::decode<float>(a1);
    v12 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>(a1);
    result = IPC::Decoder::decode<unsigned short>(a1);
    if (!*a1)
      break;
    if (v22)
    {
      v15 = v21;
      v21 = 0;
      if (v20 > 0xFFu
        && v19 > 0xFFu
        && v4 > 0xFFu
        && v5 > 0xFFu
        && v6 > 0xFFu
        && !v9
        && (v10 & 0xFF00000000) != 0
        && (v11 & 0xFF00000000) != 0
        && HIWORD(v12)
        && (result & 0xFF0000) != 0)
      {
        *(_QWORD *)a2 = v15;
        *(_BYTE *)(a2 + 8) = v20;
        *(_BYTE *)(a2 + 9) = v19;
        *(_BYTE *)(a2 + 10) = v4;
        *(_BYTE *)(a2 + 11) = v5;
        *(_BYTE *)(a2 + 12) = v6;
        *(_BYTE *)(a2 + 13) = v7;
        *(_DWORD *)(a2 + 16) = v10;
        *(_DWORD *)(a2 + 20) = v11;
        *(_WORD *)(a2 + 24) = v12;
        *(_WORD *)(a2 + 26) = result;
        *(_BYTE *)(a2 + 32) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_23:
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v17)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    }
    v7 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v22)
  {
    result = (uint64_t)v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9D3DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode(_QWORD *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2 + 1);
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  void *v14;
  int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _QWORD v29[2];
  WTF::StringImpl *v30;
  unint64_t v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  uint64_t v38;

  IPC::Decoder::decode<WTF::String>(a1, &v35);
  IPC::Decoder::decode<WTF::String>(a1, &v33);
  v6 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v7)
  {
    v2 = (WTF::StringImpl *)v6;
    v37 = 0;
    v38 = 0;
    if (v6 >= 0x10000)
    {
      do
      {
        result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>>((uint64_t)&v27, a1);
        if (!LOBYTE(v29[0]))
          goto LABEL_31;
        if (HIDWORD(v38) == (_DWORD)v38)
        {
          result = (WTF::StringImpl *)WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v37, (unint64_t)&v27);
        }
        else
        {
          v16 = (WTF::StringImpl **)((char *)v37 + 16 * HIDWORD(v38));
          v17 = v27;
          v27 = 0;
          *v16 = v17;
          v16[1] = v28;
          ++HIDWORD(v38);
        }
        if (LOBYTE(v29[0]))
        {
          result = v27;
          v27 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
            else
              *(_DWORD *)result -= 2;
          }
        }
        v2 = (WTF::StringImpl *)((char *)v2 - 1);
      }
      while (v2);
      v24 = HIDWORD(v38);
      v2 = v37;
      if (v38 > HIDWORD(v38))
      {
        v25 = v37;
        if (HIDWORD(v38))
        {
          if (HIDWORD(v38) >> 28)
          {
            __break(0xC471u);
            return result;
          }
          v26 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v38)));
          LODWORD(v38) = v24;
          v37 = (WTF::StringImpl *)v26;
          v25 = v2;
          if (v26 != (WTF::StringImpl **)v2)
          {
            WTF::VectorMover<false,WebKit::OptionItem>::move(v2, (WTF::StringImpl *)((char *)v2 + 16 * v24), v26);
            v25 = v37;
          }
        }
        if (v2)
        {
          if (v25 == v2)
          {
            v37 = 0;
            LODWORD(v38) = 0;
          }
          WTF::fastFree(v2, v7);
          v2 = v37;
        }
        else
        {
          v2 = v25;
        }
      }
      v30 = v2;
      LODWORD(v2) = v38;
      v3 = HIDWORD(v38);
      v37 = 0;
      v38 = 0;
      goto LABEL_19;
    }
    if (!v6)
    {
      v3 = 0;
      v12 = 0;
LABEL_18:
      v37 = 0;
      v38 = 0;
      v30 = v12;
LABEL_19:
      v31 = __PAIR64__(v3, v2);
      v32 = 1;
      result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
      if (!*a1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
LABEL_46:
        result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v14);
        goto LABEL_47;
      }
      v15 = 0;
      goto LABEL_35;
    }
    v8 = WTF::fastMalloc((WTF *)(16 * v6));
    LODWORD(v38) = (_DWORD)v2;
    v37 = (WTF::StringImpl *)v8;
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>>((uint64_t)&v27, a1);
      if (!LOBYTE(v29[0]))
        break;
      if (HIDWORD(v38) == (_DWORD)v38)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v37, (unint64_t)&v27);
      }
      else
      {
        v9 = (WTF::StringImpl **)((char *)v37 + 16 * HIDWORD(v38));
        v10 = v27;
        v27 = 0;
        *v9 = v10;
        v9[1] = v28;
        ++HIDWORD(v38);
      }
      if (LOBYTE(v29[0]))
      {
        v11 = v27;
        v27 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      v2 = (WTF::StringImpl *)((char *)v2 - 1);
      if (!v2)
      {
        v12 = v37;
        LODWORD(v2) = v38;
        v3 = HIDWORD(v38);
        goto LABEL_18;
      }
    }
LABEL_31:
    LOBYTE(v30) = 0;
    v32 = 0;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
  }
  else
  {
    LOBYTE(v30) = 0;
    v32 = 0;
  }
  v14 = (void *)*a1;
  v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result && v18)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v14);
  if (!*a1)
    goto LABEL_61;
  v15 = 1;
LABEL_35:
  if (v36)
  {
    v19 = v35;
    v35 = 0;
    if (v34)
    {
      v20 = v33;
      v33 = 0;
      if (!v15)
      {
        v21 = v30;
        v30 = 0;
        v31 = 0;
        *(_QWORD *)a2 = v19;
        *(_QWORD *)(a2 + 8) = v20;
        v28 = 0;
        v29[0] = 0;
        v27 = 0;
        *(_QWORD *)(a2 + 16) = v21;
        v29[1] = 0;
        *(_DWORD *)(a2 + 24) = (_DWORD)v2;
        *(_DWORD *)(a2 + 28) = v3;
        *(_BYTE *)(a2 + 32) = 1;
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v14);
        v22 = v28;
        v28 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v14);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v27;
        v27 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v14);
          else
            *(_DWORD *)v23 -= 2;
        }
        goto LABEL_46;
      }
    }
  }
  __break(1u);
LABEL_61:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_47:
  if (v34)
  {
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9D870(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18)
{
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (a12 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 - 48, a2);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v20);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (*(_BYTE *)(v18 - 56))
  {
    v21 = *(WTF::StringImpl **)(v18 - 64);
    *(_QWORD *)(v18 - 64) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)a1, (const void **)(a2 + 8), v4);
  v5 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 41);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 42);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 48);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(a1, a2 + 8);
  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 32);
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    v15 = v13 - v4;
    v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 36);
      a1[2] = v16;
      v5 = v16;
    }
  }
  if (v5 >= a1[1]
    || (*(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 40), a1[2] = v5 + 1, v5 + 1 >= a1[1])
    || (*(_BYTE *)(*a1 + v5 + 1) = *(_BYTE *)(a2 + 41), a1[2] = v5 + 2, v5 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5 + 2) = *(_BYTE *)(a2 + 42);
    a1[2] = v5 + 3;
  }
  return IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 48);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  char v19;
  BOOL v20;
  int v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  WTF::StringImpl *result;
  void *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  WTF::StringImpl *v40;
  _BYTE v41[16];
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  char v47;
  WTF *v48;
  WTF *v49;
  WTF *v50[2];
  char v51;
  _BYTE v52[16];
  int v53;
  char v54;
  WTF::StringImpl *v55;
  char v56;
  _BYTE v57[9];

  v2 = a1;
  IPC::Decoder::decode<WTF::String>(a1, &v55);
  IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(v2, v52);
  v3 = v2[1];
  v4 = *v2;
  v5 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    v7 = (int *)(v4 + v5);
    v2[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      v39 = v9 & 0xFFFFFF00;
      v10 = v9;
      v11 = v4;
      goto LABEL_8;
    }
    v11 = v3;
    v30 = 0;
    goto LABEL_52;
  }
  while (1)
  {
    v11 = 0;
    v30 = 0;
    *v2 = 0;
    v2[1] = 0;
    v31 = v2[3];
    if (v31)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v30 = *v2;
        v11 = v2[1];
      }
      else
      {
        v11 = 0;
        v30 = 0;
      }
    }
LABEL_52:
    *v2 = 0;
    v2[1] = 0;
    v32 = v2[3];
    if (!v32)
    {
      v11 = 0;
LABEL_54:
      v3 = 0;
      v4 = 0;
      v39 = 0;
      v10 = 0;
      v8 = 1;
      goto LABEL_8;
    }
    if (!v11)
      goto LABEL_54;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v11);
    v39 = 0;
    v10 = 0;
    v11 = *v2;
    v3 = v2[1];
    v8 = 1;
    v4 = *v2;
LABEL_8:
    v12 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
    if (v3 >= v12 && v3 - v12 > 3)
    {
      v14 = (_DWORD *)((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v2[2] = (uint64_t)(v14 + 1);
      v15 = v3;
      if (v4)
      {
        v16 = 0;
        v17 = *v14 & 0xFFFFFF00;
        v18 = *v14;
        goto LABEL_15;
      }
    }
    else
    {
      v15 = 0;
      v11 = 0;
      *v2 = 0;
      v2[1] = 0;
      v33 = v2[3];
      if (v33)
      {
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
          v11 = *v2;
          v15 = v2[1];
        }
        else
        {
          v15 = 0;
          v11 = 0;
        }
      }
    }
    *v2 = 0;
    v2[1] = 0;
    v34 = v2[3];
    if (v34 && v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v11, v15);
    v17 = 0;
    v18 = 0;
    v16 = 1;
LABEL_15:
    LOWORD(v40) = 0;
    IPC::Decoder::operator>><unsigned char>(v2, &v40);
    v19 = (char)v40;
    if (BYTE1(v40))
      v20 = v40 > 2u;
    else
      v20 = 1;
    v21 = v20;
    if (v21 == 1)
    {
      v35 = *v2;
      v36 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v37 = v2[3];
      if (v37 && v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      v19 = 0;
    }
    v22 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(v2);
    v23 = IPC::Decoder::decode<WTF::OptionSet<WebCore::WebGPU::TextureUsage>>(v2);
    result = IPC::Decoder::decode<WTF::Vector<WebCore::WebGPU::TextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v50, v2);
    if (!*v2)
      break;
    if (v56)
    {
      v26 = v55;
      v55 = 0;
      v40 = v26;
      if (v54)
      {
        v2 = (uint64_t *)v41;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v41, (uint64_t)v52);
        if (!v8)
        {
          v43 = v10 | v39;
          if (!v16)
          {
            v44 = v18 | v17;
            if (!v21)
            {
              v45 = v19;
              if (v22 > 0xFFu)
              {
                v46 = v22;
                if (v23 > 0xFFu)
                {
                  v47 = v23;
                  if (v51)
                  {
                    v27 = v50[0];
                    v50[0] = 0;
                    v48 = v27;
                    v49 = v50[1];
                    std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::TextureDescriptor>((uint64_t)a2, (uint64_t *)&v40);
                    v28 = v48;
                    if (v48)
                    {
                      v48 = 0;
                      LODWORD(v49) = 0;
                      WTF::fastFree(v28, v25);
                    }
                    if (v42 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E34AE2C8[v42])(v57, v41);
                    v42 = -1;
                    v29 = v40;
                    v40 = 0;
                    if (v29)
                    {
                      if (*(_DWORD *)v29 == 2)
                        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
                      else
                        *(_DWORD *)v29 -= 2;
                    }
                    goto LABEL_39;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[64] = 0;
  if (!v51)
    goto LABEL_41;
LABEL_39:
  result = v50[0];
  if (v50[0])
    result = (WTF::StringImpl *)WTF::fastFree(v50[0], v25);
LABEL_41:
  if (v54 && v53 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34AE2C8[v53])(&v40, v52);
  if (v56)
  {
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9DF38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, WTF *a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,int a28,int a29,char a30)
{
  uint64_t v30;
  WTF::StringImpl *v32;

  if (a30 && a28 != -1)
    ((void (*)(WTF **, __int16 *))off_1E34AE2C8[a28])(&a20, &a24);
  if (*(_BYTE *)(v30 - 104))
  {
    v32 = *(WTF::StringImpl **)(v30 - 112);
    *(_QWORD *)(v30 - 112) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, a2);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E9E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34AE2C8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::WebGPU::TextureUsage>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 0x20)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::WebGPU::TextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  WTF *result;
  char v5;
  WTF *v6;
  WTF *v7;
  unsigned int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  uint64_t v15;
  __int16 v16;
  WTF *v17;
  uint64_t v18;

  result = (WTF *)IPC::Decoder::decode<unsigned long long>(a2);
  if (!v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_12;
  }
  v6 = result;
  v17 = 0;
  v18 = 0;
  if ((unint64_t)result >= 0x100000)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    while (1)
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a2);
      v16 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if ((_DWORD)v15 == (_DWORD)v18)
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, (WTF *)(v15 + 1), (unint64_t)&v16);
        LODWORD(v15) = HIDWORD(v18);
        v14 = v17;
        *((_BYTE *)v17 + HIDWORD(v18)) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v14 + v15) = (_BYTE)result;
      }
      v15 = (v15 + 1);
      HIDWORD(v18) = v15;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        if (v18 > v15)
        {
          if ((_DWORD)v15)
          {
            LODWORD(v18) = v15;
            result = (WTF *)WTF::fastRealloc(v14, (void *)v15);
            v17 = result;
          }
          else
          {
            v17 = 0;
            LODWORD(v18) = 0;
            result = (WTF *)WTF::fastFree(v14, v9);
          }
        }
        *(_QWORD *)a1 = v17;
        v10 = v18;
        v8 = HIDWORD(v18);
        goto LABEL_19;
      }
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = v17;
    if (v17)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (result)
  {
    v7 = (WTF *)WTF::fastMalloc(result);
    v8 = 0;
    LODWORD(v18) = (_DWORD)v6;
    v17 = v7;
    while (1)
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a2);
      v16 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if (v8 == (_DWORD)v18)
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, (WTF *)(v8 + 1), (unint64_t)&v16);
        v8 = HIDWORD(v18);
        v7 = v17;
        *((_BYTE *)v17 + HIDWORD(v18)) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v7 + v8) = (_BYTE)result;
      }
      HIDWORD(v18) = ++v8;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        v10 = v18;
        goto LABEL_18;
      }
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_21:
    v17 = 0;
    LODWORD(v18) = 0;
    result = (WTF *)WTF::fastFree(v7, v9);
    if (*(_BYTE *)(a1 + 16))
      return result;
LABEL_12:
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    return result;
  }
  v8 = 0;
  v10 = 0;
  v7 = 0;
LABEL_18:
  *(_QWORD *)a1 = v7;
LABEL_19:
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = v8;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_196E9E400(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 10));
  v4 = *(_BYTE *)(a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 20));
  v6 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 32));
}

char *IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode(char *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 10));
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v4++) = *(_BYTE *)(a2 + 12);
    *((_QWORD *)a1 + 2) = v4;
  }
  v5 = *(_QWORD *)a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v9) = *(_DWORD *)(a2 + 16);
      *((_QWORD *)a1 + 2) = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 20);
  v12 = *((_QWORD *)a1 + 2);
  v13 = *(_QWORD *)a1 + v12;
  v14 = (v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v14 >= v13;
  v15 = v14 - v13;
  if (v7)
  {
    v16 = v15 + v12;
    v17 = v16 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v16) = *(_DWORD *)(a2 + 28);
      *((_QWORD *)a1 + 2) = v17;
    }
  }
  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 32);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  char v54;

  IPC::Decoder::decode<WTF::String>(a1, &v53);
  v52 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(a1);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_31;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v33 = v4;
    v34 = 0;
    goto LABEL_32;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_33;
  if (v8)
  {
    v9 = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a1);
    v10 = (v9 > 0xFFu) << 16;
    if ((v9 & 0xFF00) != 0)
      v11 = v9;
    else
      v11 = 0;
    LODWORD(v50) = 256;
    HIDWORD(v50) = v11;
  }
  else
  {
    v50 = 0;
    v10 = 0x10000;
  }
  while (1)
  {
    v51 = v10;
    if (!HIWORD(v10))
    {
      v38 = *a1;
      v39 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v40 = a1[3];
      if (v40)
      {
        if (v39)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
      }
    }
    v12 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
    v13 = *a1;
    v14 = a1[1];
    v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v14 < v15 || v14 - v15 <= 3)
    {
      v41 = 0;
      v42 = 0;
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          v42 = *a1;
          v41 = a1[1];
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
      }
    }
    else
    {
      v16 = (_DWORD *)(v13 + v15);
      a1[2] = (uint64_t)(v16 + 1);
      if (v13)
      {
        v17 = 0;
        v49 = *v16 & 0xFFFFFF00;
        v18 = *v16;
        goto LABEL_15;
      }
      v41 = v14;
      v42 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v41)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
    v49 = 0;
    v18 = 0;
    v17 = 1;
LABEL_15:
    v19 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    v21 = v20;
    v22 = *a1;
    v23 = a1[1];
    v24 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v23 < v24 || v23 - v24 <= 3)
    {
      v45 = 0;
      v46 = 0;
      *a1 = 0;
      a1[1] = 0;
      v47 = a1[3];
      if (v47)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
          v46 = *a1;
          v45 = a1[1];
        }
        else
        {
          v45 = 0;
          v46 = 0;
        }
      }
    }
    else
    {
      v25 = (_DWORD *)(v22 + v24);
      a1[2] = (uint64_t)(v25 + 1);
      if (v22)
      {
        v26 = 0;
        v27 = *v25 & 0xFFFFFF00;
        v28 = *v25;
        goto LABEL_19;
      }
      v45 = v23;
      v46 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48 && v45)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
    v27 = 0;
    v28 = 0;
    v26 = 1;
LABEL_19:
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    if (!*a1)
      break;
    if (v54)
    {
      v31 = v53;
      v53 = 0;
      if (HIWORD(v52))
      {
        v32 = HIDWORD(v50) | v51 | v50;
        if (HIWORD(v32))
        {
          if (v12 > 0xFFu && !v17 && v21 && !v26 && (_BYTE)v30)
          {
            *(_QWORD *)a2 = v31;
            *(_WORD *)(a2 + 8) = v52;
            *(_WORD *)(a2 + 10) = v32;
            *(_BYTE *)(a2 + 12) = v12;
            *(_DWORD *)(a2 + 16) = v18 | v49;
            *(_DWORD *)(a2 + 20) = v19;
            *(_BYTE *)(a2 + 24) = BYTE4(v19);
            *(_DWORD *)(a2 + 28) = v28 | v27;
            *(_DWORD *)(a2 + 32) = (_DWORD)result;
            *(_BYTE *)(a2 + 36) = BYTE4(result);
            *(_BYTE *)(a2 + 40) = 1;
            return result;
          }
        }
      }
    }
    __break(1u);
LABEL_31:
    v33 = 0;
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v34 = *a1;
        v33 = a1[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
LABEL_32:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v33)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v5);
    }
    v10 = 0;
    v50 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v54)
  {
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E9E9F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)(a2 + 5);
  v5 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v4);
}

WTF *IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(WTF *a1, _QWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 5));
}

char *IPC::ArgumentCoder<WebKit::WebGPU::VertexBufferLayout,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::VectorArgumentCoder<false,WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 2);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = v2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = v2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = v2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = v2[7];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = v2[8];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = v2[9];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v14 = v2[10];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v15 = v2[11];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  v16 = v2[12];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v16;
  v17 = v2[13];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v17;
  v18 = *((_QWORD *)v2 + 7);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
  v19 = *((_QWORD *)v2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v19;
  LODWORD(v19) = v2[18];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v19;
  LODWORD(v19) = v2[19];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v19;
  LODWORD(v19) = v2[20];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v19;
  v20 = *((_QWORD *)v2 + 11);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v20;
  LODWORD(v20) = v2[24];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[25];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[26];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[27];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[28];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[29];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[30];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[31];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[32];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[33];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v20) = v2[34];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  LODWORD(v2) = v2[35];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  _QWORD *result;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  char *v69;
  _DWORD *v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  _DWORD *v74;
  char *v75;
  _DWORD *v76;
  char *v77;
  _DWORD *v78;
  char *v79;
  _DWORD *v80;
  char *v81;
  _DWORD *v82;
  char *v83;
  _DWORD *v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  _DWORD *v88;
  char *v89;

  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)a2;
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    v15 = v13 - v4;
    v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 4);
      a1[2] = v16;
      v4 = *a1;
      v5 = v16;
    }
  }
  v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    v20 = v18 - v4;
    v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 8);
      a1[2] = v21;
      v4 = *a1;
      v5 = v21;
    }
  }
  v23 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v4 + v5);
  if (v23 >= v4 + v5)
  {
    v25 = v23 - v4;
    v26 = v24 + v5 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v25) = *(_DWORD *)(a2 + 12);
      a1[2] = v26;
      v4 = *a1;
      v5 = v26;
    }
  }
  v28 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v4 + v5);
  if (v28 >= v4 + v5)
  {
    v30 = v28 - v4;
    v31 = v29 + v5 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v30) = *(_DWORD *)(a2 + 16);
      a1[2] = v31;
      v4 = *a1;
      v5 = v31;
    }
  }
  v33 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v4 + v5)
  {
    v34 = (char *)v33 - v4;
    if ((unint64_t)v33 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v33 = *(_DWORD *)(a2 + 20);
      a1[2] = (uint64_t)(v34 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v34 + 4);
    }
  }
  v35 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v4 + v5)
  {
    v36 = (char *)v35 - v4;
    if ((unint64_t)v35 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v35 = *(_DWORD *)(a2 + 24);
      a1[2] = (uint64_t)(v36 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v36 + 4);
    }
  }
  v37 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v37 >= v4 + v5)
  {
    v38 = (char *)v37 - v4;
    if ((unint64_t)v37 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v37 = *(_DWORD *)(a2 + 28);
      a1[2] = (uint64_t)(v38 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v38 + 4);
    }
  }
  v39 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v39 >= v4 + v5)
  {
    v40 = (char *)v39 - v4;
    if ((unint64_t)v39 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v39 = *(_DWORD *)(a2 + 32);
      a1[2] = (uint64_t)(v40 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v40 + 4);
    }
  }
  v41 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v4 + v5)
  {
    v42 = (char *)v41 - v4;
    if ((unint64_t)v41 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v41 = *(_DWORD *)(a2 + 36);
      a1[2] = (uint64_t)(v42 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v42 + 4);
    }
  }
  v43 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v43 >= v4 + v5)
  {
    v44 = (char *)v43 - v4;
    if ((unint64_t)v43 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v44 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v43 = *(_DWORD *)(a2 + 40);
      a1[2] = (uint64_t)(v44 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v44 + 4);
    }
  }
  v45 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v45 >= v4 + v5)
  {
    v46 = (char *)v45 - v4;
    if ((unint64_t)v45 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v46 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v45 = *(_DWORD *)(a2 + 44);
      a1[2] = (uint64_t)(v46 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v46 + 4);
    }
  }
  v47 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v47 >= v4 + v5)
  {
    v48 = (char *)v47 - v4;
    if ((unint64_t)v47 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v48 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v47 = *(_DWORD *)(a2 + 48);
      a1[2] = (uint64_t)(v48 + 4);
      v4 = *a1;
      v5 = (unint64_t)(v48 + 4);
    }
  }
  v49 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v49 >= v4 + v5)
  {
    v50 = (char *)v49 - v4;
    if ((unint64_t)v49 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v50 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v49 = *(_DWORD *)(a2 + 52);
      a1[2] = (uint64_t)(v50 + 4);
    }
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 56));
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 64));
  v51 = *a1;
  v52 = a1[2];
  v53 = *a1 + v52;
  v54 = (v53 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v54 >= v53;
  v55 = v54 - v53;
  if (v8)
  {
    v56 = v55 + v52;
    if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v51 + v56) = *(_DWORD *)(a2 + 72);
      a1[2] = v56 + 4;
      v51 = *a1;
      v52 = v56 + 4;
    }
  }
  v57 = (_DWORD *)((v51 + v52 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v57 >= v51 + v52)
  {
    v58 = (char *)v57 - v51;
    if ((unint64_t)v57 - v51 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v58 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v57 = *(_DWORD *)(a2 + 76);
      a1[2] = (uint64_t)(v58 + 4);
      v51 = *a1;
      v52 = (unint64_t)(v58 + 4);
    }
  }
  v59 = (_DWORD *)((v51 + v52 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v59 >= v51 + v52)
  {
    v60 = (char *)v59 - v51;
    if ((unint64_t)v59 - v51 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v60 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v59 = *(_DWORD *)(a2 + 80);
      a1[2] = (uint64_t)(v60 + 4);
    }
  }
  result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 88));
  v62 = *a1;
  v63 = a1[2];
  v64 = *a1 + v63;
  v65 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v65 >= v64;
  v66 = v65 - v64;
  if (v8)
  {
    v67 = v66 + v63;
    if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v62 + v67) = *(_DWORD *)(a2 + 96);
      a1[2] = v67 + 4;
      v62 = *a1;
      v63 = v67 + 4;
    }
  }
  v68 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v68 >= v62 + v63)
  {
    v69 = (char *)v68 - v62;
    if ((unint64_t)v68 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v69 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v68 = *(_DWORD *)(a2 + 100);
      a1[2] = (uint64_t)(v69 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v69 + 4);
    }
  }
  v70 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v70 >= v62 + v63)
  {
    v71 = (char *)v70 - v62;
    if ((unint64_t)v70 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v71 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v70 = *(_DWORD *)(a2 + 104);
      a1[2] = (uint64_t)(v71 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v71 + 4);
    }
  }
  v72 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v72 >= v62 + v63)
  {
    v73 = (char *)v72 - v62;
    if ((unint64_t)v72 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v73 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v72 = *(_DWORD *)(a2 + 108);
      a1[2] = (uint64_t)(v73 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v73 + 4);
    }
  }
  v74 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v74 >= v62 + v63)
  {
    v75 = (char *)v74 - v62;
    if ((unint64_t)v74 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v75 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v74 = *(_DWORD *)(a2 + 112);
      a1[2] = (uint64_t)(v75 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v75 + 4);
    }
  }
  v76 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v76 >= v62 + v63)
  {
    v77 = (char *)v76 - v62;
    if ((unint64_t)v76 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v77 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v76 = *(_DWORD *)(a2 + 116);
      a1[2] = (uint64_t)(v77 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v77 + 4);
    }
  }
  v78 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v78 >= v62 + v63)
  {
    v79 = (char *)v78 - v62;
    if ((unint64_t)v78 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v79 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v78 = *(_DWORD *)(a2 + 120);
      a1[2] = (uint64_t)(v79 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v79 + 4);
    }
  }
  v80 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v80 >= v62 + v63)
  {
    v81 = (char *)v80 - v62;
    if ((unint64_t)v80 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v81 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v80 = *(_DWORD *)(a2 + 124);
      a1[2] = (uint64_t)(v81 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v81 + 4);
    }
  }
  v82 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v82 >= v62 + v63)
  {
    v83 = (char *)v82 - v62;
    if ((unint64_t)v82 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v83 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v82 = *(_DWORD *)(a2 + 128);
      a1[2] = (uint64_t)(v83 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v83 + 4);
    }
  }
  v84 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v84 >= v62 + v63)
  {
    v85 = (char *)v84 - v62;
    if ((unint64_t)v84 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v85 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v84 = *(_DWORD *)(a2 + 132);
      a1[2] = (uint64_t)(v85 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v85 + 4);
    }
  }
  v86 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v86 >= v62 + v63)
  {
    v87 = (char *)v86 - v62;
    if ((unint64_t)v86 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v87 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v86 = *(_DWORD *)(a2 + 136);
      a1[2] = (uint64_t)(v87 + 4);
      v62 = *a1;
      v63 = (unint64_t)(v87 + 4);
    }
  }
  v88 = (_DWORD *)((v62 + v63 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v88 >= v62 + v63)
  {
    v89 = (char *)v88 - v62;
    if ((unint64_t)v88 - v62 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v89 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v88 = *(_DWORD *)(a2 + 140);
      a1[2] = (uint64_t)(v89 + 4);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::decode@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  int *v53;
  int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  int *v58;
  int v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  int *v63;
  int v64;
  unint64_t v65;
  int *v66;
  int v67;
  unint64_t v68;
  int *v69;
  int v70;
  unint64_t v71;
  int *v72;
  int v73;
  unint64_t v74;
  int *v75;
  int v76;
  unint64_t v77;
  int *v78;
  int v79;
  unint64_t v80;
  int *v81;
  int v82;
  unint64_t v83;
  int *v84;
  int v85;
  int v86;
  unint64_t v87;
  int *v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  int *v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unint64_t v99;
  int *v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  int v108;
  char v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  uint64_t *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  uint64_t *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  uint64_t *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  uint64_t *v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  uint64_t *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  uint64_t *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  int v287;
  int v288;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  uint64_t *v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  uint64_t *v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  int v313;
  int v314;
  int v315;
  uint64_t *v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  int v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  uint64_t *v331;
  uint64_t v332;
  int v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  int v362;
  uint64_t *v363;
  uint64_t v364;
  int v365;
  int v366;
  int v367;
  uint64_t *v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  int v372;
  int v373;
  int v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  int v381;
  int v382;
  int v383;
  uint64_t *v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  int v390;
  int v391;
  int v392;
  uint64_t *v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  int v400;
  int v401;
  uint64_t *v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  int v409;
  int v410;
  uint64_t *v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  int v417;
  int v418;
  int v419;
  uint64_t *v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  int v426;
  int v427;
  int v428;
  uint64_t *v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  int v435;
  int v436;
  int v437;
  uint64_t *v438;
  uint64_t v439;
  int v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  int v444;
  int v445;
  int v446;
  uint64_t *v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  int v453;
  int v454;
  int v455;
  uint64_t *v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  int v462;
  int v463;
  int v464;
  uint64_t *v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  uint64_t *v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  int v482;
  uint64_t *v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int v489;
  int v490;
  int v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  int v496;
  int v497;
  uint64_t *v498;
  uint64_t v499;
  int v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t *v503;
  _QWORD *v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  unsigned int v674;
  unsigned int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  int v695;
  int v696;
  int v697;
  int v698;
  int v699;
  int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  int v711;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)result;
  v4 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)result;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (_DWORD *)(v3 + v4);
    *(_QWORD *)(result + 16) = v6 + 1;
    if (v3)
    {
      v711 = 0;
      HIDWORD(v689) = *v6 & 0xFFFFFF00;
      LODWORD(v689) = *v6;
      v7 = v3;
      goto LABEL_8;
    }
    v110 = v2;
    v111 = 0;
    goto LABEL_171;
  }
  while (1)
  {
    v110 = 0;
    v111 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v112 = *(_QWORD *)(result + 24);
    if (v112)
    {
      v336 = (uint64_t *)result;
      v337 = a2;
      if (v2)
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v112 + 16))(*(_QWORD *)(result + 24), v3);
        result = (uint64_t)v336;
        v111 = *v336;
        v110 = v336[1];
        a2 = v337;
      }
      else
      {
        v110 = 0;
        v111 = 0;
      }
    }
LABEL_171:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v178 = (uint64_t *)result;
      v179 = a2;
      if (v110)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v111, v110);
        v689 = 0;
        result = (uint64_t)v178;
        v7 = *v178;
        v2 = v178[1];
        v711 = 1;
        v3 = *v178;
        a2 = v179;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v689 = 0;
        v711 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v689 = 0;
      v711 = 1;
    }
LABEL_8:
    v8 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v8 && v2 - v8 > 3)
    {
      v10 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v10 + 1;
      if (v3)
      {
        v710 = 0;
        LODWORD(v688) = *v10 & 0xFFFFFF00;
        HIDWORD(v688) = *v10;
        goto LABEL_15;
      }
      v113 = v2;
    }
    else
    {
      v113 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v114 = *(_QWORD *)(result + 24);
      if (v114)
      {
        v338 = (uint64_t *)result;
        v339 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v114 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v338;
          v7 = *v338;
          v113 = v338[1];
          a2 = v339;
        }
        else
        {
          v113 = 0;
          v7 = 0;
        }
      }
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v180 = (uint64_t *)result;
      v181 = a2;
      if (v113)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v113);
        v688 = 0;
        result = (uint64_t)v180;
        v7 = *v180;
        v2 = v180[1];
        v710 = 1;
        v3 = *v180;
        a2 = v181;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v688 = 0;
        v710 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v688 = 0;
      v710 = 1;
    }
LABEL_15:
    v11 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v11 || v2 - v11 <= 3)
    {
      v115 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v116 = *(_QWORD *)(result + 24);
      if (v116)
      {
        v340 = (uint64_t *)result;
        v341 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v116 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v340;
          v7 = *v340;
          v115 = v340[1];
          a2 = v341;
        }
        else
        {
          v115 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v12 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v12 + 1;
      if (v3)
      {
        v709 = 0;
        HIDWORD(v687) = *v12 & 0xFFFFFF00;
        LODWORD(v687) = *v12;
        goto LABEL_19;
      }
      v115 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v182 = (uint64_t *)result;
      v183 = a2;
      if (v115)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v115);
        v687 = 0;
        result = (uint64_t)v182;
        v7 = *v182;
        v2 = v182[1];
        v709 = 1;
        v3 = *v182;
        a2 = v183;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v687 = 0;
        v709 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v687 = 0;
      v709 = 1;
    }
LABEL_19:
    v13 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v13 || v2 - v13 <= 3)
    {
      v117 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v118 = *(_QWORD *)(result + 24);
      if (v118)
      {
        v342 = (uint64_t *)result;
        v343 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v118 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v342;
          v7 = *v342;
          v117 = v342[1];
          a2 = v343;
        }
        else
        {
          v117 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v14 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v14 + 1;
      if (v3)
      {
        v708 = 0;
        HIDWORD(v686) = *v14 & 0xFFFFFF00;
        LODWORD(v686) = *v14;
        goto LABEL_23;
      }
      v117 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v184 = (uint64_t *)result;
      v185 = a2;
      if (v117)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v117);
        v686 = 0;
        result = (uint64_t)v184;
        v7 = *v184;
        v2 = v184[1];
        v708 = 1;
        v3 = *v184;
        a2 = v185;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v686 = 0;
        v708 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v686 = 0;
      v708 = 1;
    }
LABEL_23:
    v15 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v15 || v2 - v15 <= 3)
    {
      v119 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v120 = *(_QWORD *)(result + 24);
      if (v120)
      {
        v344 = (uint64_t *)result;
        v345 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v120 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v344;
          v7 = *v344;
          v119 = v344[1];
          a2 = v345;
        }
        else
        {
          v119 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v16 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v16 + 1;
      if (v3)
      {
        v707 = 0;
        HIDWORD(v685) = *v16 & 0xFFFFFF00;
        LODWORD(v685) = *v16;
        goto LABEL_27;
      }
      v119 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v186 = (uint64_t *)result;
      v187 = a2;
      if (v119)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v119);
        v685 = 0;
        result = (uint64_t)v186;
        v7 = *v186;
        v2 = v186[1];
        v707 = 1;
        v3 = *v186;
        a2 = v187;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v685 = 0;
        v707 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v685 = 0;
      v707 = 1;
    }
LABEL_27:
    v17 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v17 || v2 - v17 <= 3)
    {
      v121 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v122 = *(_QWORD *)(result + 24);
      if (v122)
      {
        v346 = (uint64_t *)result;
        v347 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v122 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v346;
          v7 = *v346;
          v121 = v346[1];
          a2 = v347;
        }
        else
        {
          v121 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v18 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v18 + 1;
      if (v3)
      {
        v706 = 0;
        v684 = *v18 & 0xFFFFFF00;
        v683 = *v18;
        goto LABEL_31;
      }
      v121 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v188 = (uint64_t *)result;
      v189 = a2;
      if (v121)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v121);
        v684 = 0;
        v683 = 0;
        result = (uint64_t)v188;
        v7 = *v188;
        v2 = v188[1];
        v706 = 1;
        v3 = *v188;
        a2 = v189;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v684 = 0;
        v683 = 0;
        v706 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v684 = 0;
      v683 = 0;
      v706 = 1;
    }
LABEL_31:
    v19 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v19 || v2 - v19 <= 3)
    {
      v123 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v124 = *(_QWORD *)(result + 24);
      if (v124)
      {
        v348 = (uint64_t *)result;
        v349 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v124 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v348;
          v7 = *v348;
          v123 = v348[1];
          a2 = v349;
        }
        else
        {
          v123 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v20 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v20 + 1;
      if (v3)
      {
        v705 = 0;
        HIDWORD(v682) = *v20 & 0xFFFFFF00;
        LODWORD(v682) = *v20;
        goto LABEL_35;
      }
      v123 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v190 = (uint64_t *)result;
      v191 = a2;
      if (v123)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v123);
        v682 = 0;
        result = (uint64_t)v190;
        v7 = *v190;
        v2 = v190[1];
        v705 = 1;
        v3 = *v190;
        a2 = v191;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v682 = 0;
        v705 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v682 = 0;
      v705 = 1;
    }
LABEL_35:
    v21 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v21 || v2 - v21 <= 3)
    {
      v125 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v126 = *(_QWORD *)(result + 24);
      if (v126)
      {
        v350 = (uint64_t *)result;
        v351 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v126 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v350;
          v7 = *v350;
          v125 = v350[1];
          a2 = v351;
        }
        else
        {
          v125 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v22 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v22 + 1;
      if (v3)
      {
        v704 = 0;
        HIDWORD(v681) = *v22 & 0xFFFFFF00;
        LODWORD(v681) = *v22;
        goto LABEL_39;
      }
      v125 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v192 = (uint64_t *)result;
      v193 = a2;
      if (v125)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v125);
        v681 = 0;
        result = (uint64_t)v192;
        v7 = *v192;
        v2 = v192[1];
        v704 = 1;
        v3 = *v192;
        a2 = v193;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v681 = 0;
        v704 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v681 = 0;
      v704 = 1;
    }
LABEL_39:
    v23 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v23 || v2 - v23 <= 3)
    {
      v127 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v128 = *(_QWORD *)(result + 24);
      if (v128)
      {
        v352 = (uint64_t *)result;
        v353 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v128 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v352;
          v7 = *v352;
          v127 = v352[1];
          a2 = v353;
        }
        else
        {
          v127 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v24 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v24 + 1;
      if (v3)
      {
        v703 = 0;
        HIDWORD(v680) = *v24 & 0xFFFFFF00;
        LODWORD(v680) = *v24;
        goto LABEL_43;
      }
      v127 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v194 = (uint64_t *)result;
      v195 = a2;
      if (v127)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v127);
        v680 = 0;
        result = (uint64_t)v194;
        v7 = *v194;
        v2 = v194[1];
        v703 = 1;
        v3 = *v194;
        a2 = v195;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v680 = 0;
        v703 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v680 = 0;
      v703 = 1;
    }
LABEL_43:
    v25 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v25 || v2 - v25 <= 3)
    {
      v129 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v130 = *(_QWORD *)(result + 24);
      if (v130)
      {
        v354 = (uint64_t *)result;
        v355 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v130 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v354;
          v7 = *v354;
          v129 = v354[1];
          a2 = v355;
        }
        else
        {
          v129 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v26 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v26 + 1;
      if (v3)
      {
        v702 = 0;
        HIDWORD(v679) = *v26 & 0xFFFFFF00;
        LODWORD(v679) = *v26;
        goto LABEL_47;
      }
      v129 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v196 = (uint64_t *)result;
      v197 = a2;
      if (v129)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v129);
        v679 = 0;
        result = (uint64_t)v196;
        v7 = *v196;
        v2 = v196[1];
        v702 = 1;
        v3 = *v196;
        a2 = v197;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v679 = 0;
        v702 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v679 = 0;
      v702 = 1;
    }
LABEL_47:
    v27 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v27 || v2 - v27 <= 3)
    {
      v131 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v132 = *(_QWORD *)(result + 24);
      if (v132)
      {
        v356 = (uint64_t *)result;
        v357 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v132 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v356;
          v7 = *v356;
          v131 = v356[1];
          a2 = v357;
        }
        else
        {
          v131 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v28 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v28 + 1;
      if (v3)
      {
        v701 = 0;
        HIDWORD(v678) = *v28 & 0xFFFFFF00;
        LODWORD(v678) = *v28;
        goto LABEL_51;
      }
      v131 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v198 = (uint64_t *)result;
      v199 = a2;
      if (v131)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v131);
        v678 = 0;
        result = (uint64_t)v198;
        v7 = *v198;
        v2 = v198[1];
        v701 = 1;
        v3 = *v198;
        a2 = v199;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v678 = 0;
        v701 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v678 = 0;
      v701 = 1;
    }
LABEL_51:
    v29 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v29 || v2 - v29 <= 3)
    {
      v133 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v134 = *(_QWORD *)(result + 24);
      if (v134)
      {
        v358 = (uint64_t *)result;
        v359 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v134 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v358;
          v7 = *v358;
          v133 = v358[1];
          a2 = v359;
        }
        else
        {
          v133 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v30 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v30 + 1;
      if (v3)
      {
        v700 = 0;
        HIDWORD(v677) = *v30 & 0xFFFFFF00;
        LODWORD(v677) = *v30;
        goto LABEL_55;
      }
      v133 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v200 = (uint64_t *)result;
      v201 = a2;
      if (v133)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v133);
        v677 = 0;
        result = (uint64_t)v200;
        v7 = *v200;
        v2 = v200[1];
        v700 = 1;
        v3 = *v200;
        a2 = v201;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v677 = 0;
        v700 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v677 = 0;
      v700 = 1;
    }
LABEL_55:
    v31 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v31 || v2 - v31 <= 3)
    {
      v135 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v136 = *(_QWORD *)(result + 24);
      if (v136)
      {
        v360 = (uint64_t *)result;
        v361 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v136 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v360;
          v7 = *v360;
          v135 = v360[1];
          a2 = v361;
        }
        else
        {
          v135 = 0;
          v7 = 0;
        }
      }
    }
    else
    {
      v32 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v32 + 1;
      if (v3)
      {
        v33 = 0;
        HIDWORD(v676) = *v32 & 0xFFFFFF00;
        LODWORD(v676) = *v32;
        goto LABEL_59;
      }
      v135 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v202 = (uint64_t *)result;
      v203 = a2;
      if (v135)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v135);
        v676 = 0;
        result = (uint64_t)v202;
        v7 = *v202;
        v2 = v202[1];
        v33 = 1;
        v3 = *v202;
        a2 = v203;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v676 = 0;
        v33 = 1;
      }
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v676 = 0;
      v33 = 1;
    }
LABEL_59:
    v34 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v34 || v2 - v34 <= 3)
    {
      v137 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v138 = *(_QWORD *)(result + 24);
      if (v138)
      {
        v362 = v33;
        v363 = (uint64_t *)result;
        v364 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v138 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v363;
          v7 = *v363;
          v137 = v363[1];
          a2 = v364;
        }
        else
        {
          v137 = 0;
          v7 = 0;
        }
        v33 = v362;
      }
    }
    else
    {
      v35 = (_DWORD *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v35 + 1;
      if (v3)
      {
        v36 = 0;
        v675 = *v35 & 0xFFFFFF00;
        v37 = *v35;
        goto LABEL_63;
      }
      v137 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v204 = v33;
      v205 = (uint64_t *)result;
      v206 = a2;
      if (v137)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v137);
        v675 = 0;
        v37 = 0;
        result = (uint64_t)v205;
        v7 = *v205;
        v2 = v205[1];
        v36 = 1;
        v3 = *v205;
        a2 = v206;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v675 = 0;
        v37 = 0;
        v36 = 1;
      }
      v33 = v204;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v675 = 0;
      v37 = 0;
      v36 = 1;
    }
LABEL_63:
    v38 = ((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v38 || v2 - v38 <= 7)
    {
      v139 = 0;
      v140 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v141 = *(_QWORD *)(result + 24);
      if (v141)
      {
        v365 = v36;
        v366 = v37;
        v367 = v33;
        v368 = (uint64_t *)result;
        v369 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v141 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v368;
          v140 = *v368;
          v139 = v368[1];
          a2 = v369;
        }
        else
        {
          v139 = 0;
          v140 = 0;
        }
        v33 = v367;
        v37 = v366;
        v36 = v365;
      }
    }
    else
    {
      v39 = (uint64_t *)((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(result + 16) = v39 + 1;
      if (v3)
      {
        v40 = 0;
        v41 = *v39;
        goto LABEL_67;
      }
      v139 = v2;
      v140 = 0;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v207 = v36;
      v208 = v37;
      v209 = v33;
      v210 = (uint64_t *)result;
      v211 = a2;
      if (v139)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v140, v139);
        v41 = 0;
        result = (uint64_t)v210;
        v7 = *v210;
        v2 = v210[1];
        v40 = 1;
        v3 = *v210;
        a2 = v211;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v41 = 0;
        v40 = 1;
      }
      v33 = v209;
      v37 = v208;
      v36 = v207;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v41 = 0;
      v40 = 1;
    }
LABEL_67:
    v42 = ((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v42 || v2 - v42 <= 7)
    {
      v142 = 0;
      v143 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v144 = *(_QWORD *)(result + 24);
      if (v144)
      {
        v370 = v40;
        v371 = v41;
        v372 = v36;
        v373 = v37;
        v374 = v33;
        v375 = (uint64_t *)result;
        v376 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v144 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v375;
          v143 = *v375;
          v142 = v375[1];
          a2 = v376;
        }
        else
        {
          v142 = 0;
          v143 = 0;
        }
        v33 = v374;
        v37 = v373;
        v36 = v372;
        v41 = v371;
        v40 = v370;
      }
    }
    else
    {
      v43 = (uint64_t *)((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(result + 16) = v43 + 1;
      if (v3)
      {
        v44 = 0;
        v45 = *v43;
        goto LABEL_71;
      }
      v142 = v2;
      v143 = 0;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v212 = v40;
      v213 = v41;
      v214 = v36;
      v215 = v37;
      v216 = v33;
      v217 = (uint64_t *)result;
      v218 = a2;
      if (v142)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v143, v142);
        v45 = 0;
        result = (uint64_t)v217;
        v7 = *v217;
        v2 = v217[1];
        v44 = 1;
        v3 = *v217;
        a2 = v218;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v45 = 0;
        v44 = 1;
      }
      v33 = v216;
      v37 = v215;
      v36 = v214;
      v41 = v213;
      v40 = v212;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v45 = 0;
      v44 = 1;
    }
LABEL_71:
    v46 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v46 || v2 - v46 <= 3)
    {
      v145 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v146 = *(_QWORD *)(result + 24);
      if (v146)
      {
        v377 = v44;
        v378 = v45;
        v379 = v40;
        v380 = v41;
        v381 = v36;
        v382 = v37;
        v383 = v33;
        v384 = (uint64_t *)result;
        v385 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v146 + 16))(*(_QWORD *)(result + 24), v3);
          result = (uint64_t)v384;
          v7 = *v384;
          v145 = v384[1];
          a2 = v385;
        }
        else
        {
          v145 = 0;
          v7 = 0;
        }
        v33 = v383;
        v37 = v382;
        v36 = v381;
        v41 = v380;
        v40 = v379;
        v45 = v378;
        v44 = v377;
      }
    }
    else
    {
      v47 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v47 + 1;
      if (v3)
      {
        v48 = 0;
        v49 = *v47;
        v50 = v49 & 0xFFFFFF00;
        v51 = v49;
        goto LABEL_75;
      }
      v145 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v219 = v44;
      v220 = v45;
      v221 = v40;
      v222 = v41;
      v223 = v36;
      v224 = v37;
      v225 = v33;
      v226 = (uint64_t *)result;
      v227 = a2;
      if (v145)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), v7, v145);
        v50 = 0;
        v51 = 0;
        result = (uint64_t)v226;
        v7 = *v226;
        v2 = v226[1];
        v48 = 1;
        v3 = *v226;
        a2 = v227;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v50 = 0;
        v51 = 0;
        v48 = 1;
      }
      v33 = v225;
      v37 = v224;
      v36 = v223;
      v41 = v222;
      v40 = v221;
      v45 = v220;
      v44 = v219;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v50 = 0;
      v51 = 0;
      v48 = 1;
    }
LABEL_75:
    v52 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v52 || v2 - v52 <= 3)
    {
      v147 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v148 = *(_QWORD *)(result + 24);
      if (v148)
      {
        v619 = v51;
        v649 = v48;
        v386 = v44;
        v387 = v45;
        v388 = v40;
        v389 = v41;
        v390 = v36;
        v391 = v37;
        v392 = v33;
        v393 = (uint64_t *)result;
        v394 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v3);
          result = (uint64_t)v393;
          v7 = *v393;
          v147 = v393[1];
          a2 = v394;
        }
        else
        {
          v147 = 0;
          v7 = 0;
        }
        v33 = v392;
        v37 = v391;
        v36 = v390;
        v41 = v389;
        v40 = v388;
        v45 = v387;
        v44 = v386;
        v51 = v619;
        v48 = v649;
      }
    }
    else
    {
      v53 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v53 + 1;
      if (v3)
      {
        v699 = 0;
        v54 = *v53;
        v55 = v54 & 0xFFFFFF00;
        v56 = v54;
        goto LABEL_79;
      }
      v147 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v604 = v51;
      v634 = v48;
      v228 = v44;
      v229 = v45;
      v230 = v40;
      v231 = v41;
      v232 = v36;
      v233 = v37;
      v234 = v33;
      v235 = (uint64_t *)result;
      v236 = a2;
      if (v147)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v147);
        v55 = 0;
        v56 = 0;
        result = (uint64_t)v235;
        v7 = *v235;
        v2 = v235[1];
        v699 = 1;
        v3 = *v235;
        a2 = v236;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v55 = 0;
        v56 = 0;
        v699 = 1;
      }
      v33 = v234;
      v37 = v233;
      v36 = v232;
      v41 = v231;
      v40 = v230;
      v45 = v229;
      v44 = v228;
      v51 = v604;
      v48 = v634;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v55 = 0;
      v56 = 0;
      v699 = 1;
    }
LABEL_79:
    v57 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v57 || v2 - v57 <= 3)
    {
      v149 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v150 = *(_QWORD *)(result + 24);
      if (v150)
      {
        v562 = v55;
        v590 = v56;
        v620 = v51;
        v650 = v48;
        v395 = v44;
        v396 = v45;
        v397 = v40;
        v398 = v41;
        v399 = v36;
        v400 = v37;
        v401 = v33;
        v402 = (uint64_t *)result;
        v403 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v3);
          result = (uint64_t)v402;
          v7 = *v402;
          v149 = v402[1];
          a2 = v403;
        }
        else
        {
          v149 = 0;
          v7 = 0;
        }
        v33 = v401;
        v37 = v400;
        v36 = v399;
        v41 = v398;
        v40 = v397;
        v45 = v396;
        v44 = v395;
        v51 = v620;
        v48 = v650;
        v55 = v562;
        v56 = v590;
      }
    }
    else
    {
      v58 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v58 + 1;
      if (v3)
      {
        v698 = 0;
        v59 = *v58;
        v673 = v59;
        v674 = v59 & 0xFFFFFF00;
        goto LABEL_83;
      }
      v149 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v548 = v55;
      v576 = v56;
      v605 = v51;
      v635 = v48;
      v237 = v44;
      v238 = v45;
      v239 = v40;
      v240 = v41;
      v241 = v36;
      v242 = v37;
      v243 = v33;
      v244 = (uint64_t *)result;
      v245 = a2;
      if (v149)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v149);
        v673 = 0;
        v674 = 0;
        result = (uint64_t)v244;
        v7 = *v244;
        v2 = v244[1];
        v698 = 1;
        v3 = *v244;
        a2 = v245;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v673 = 0;
        v674 = 0;
        v698 = 1;
      }
      v33 = v243;
      v37 = v242;
      v36 = v241;
      v41 = v240;
      v40 = v239;
      v45 = v238;
      v44 = v237;
      v51 = v605;
      v48 = v635;
      v55 = v548;
      v56 = v576;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v673 = 0;
      v674 = 0;
      v698 = 1;
    }
LABEL_83:
    v60 = ((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v60 || v2 - v60 <= 7)
    {
      v151 = 0;
      v152 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v153 = *(_QWORD *)(result + 24);
      if (v153)
      {
        v563 = v55;
        v591 = v56;
        v621 = v51;
        v651 = v48;
        v404 = v44;
        v405 = v45;
        v406 = v40;
        v407 = v41;
        v408 = v36;
        v409 = v37;
        v410 = v33;
        v411 = (uint64_t *)result;
        v412 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v3);
          result = (uint64_t)v411;
          v152 = *v411;
          v151 = v411[1];
          a2 = v412;
        }
        else
        {
          v151 = 0;
          v152 = 0;
        }
        v33 = v410;
        v37 = v409;
        v36 = v408;
        v41 = v407;
        v40 = v406;
        v45 = v405;
        v44 = v404;
        v51 = v621;
        v48 = v651;
        v55 = v563;
        v56 = v591;
      }
    }
    else
    {
      v61 = (uint64_t *)((*(_QWORD *)(result + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(result + 16) = v61 + 1;
      if (v3)
      {
        v697 = 0;
        v672 = *v61;
        goto LABEL_87;
      }
      v151 = v2;
      v152 = 0;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v549 = v55;
      v577 = v56;
      v606 = v51;
      v636 = v48;
      v246 = v44;
      v247 = v45;
      v248 = v40;
      v249 = v41;
      v250 = v36;
      v251 = v37;
      v252 = v33;
      v253 = (uint64_t *)result;
      v254 = a2;
      if (v151)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v152, v151);
        v672 = 0;
        result = (uint64_t)v253;
        v7 = *v253;
        v2 = v253[1];
        v697 = 1;
        v3 = *v253;
        a2 = v254;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v672 = 0;
        v697 = 1;
      }
      v33 = v252;
      v37 = v251;
      v36 = v250;
      v41 = v249;
      v40 = v248;
      v45 = v247;
      v44 = v246;
      v51 = v606;
      v48 = v636;
      v55 = v549;
      v56 = v577;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v672 = 0;
      v697 = 1;
    }
LABEL_87:
    v62 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v62 || v2 - v62 <= 3)
    {
      v154 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v155 = *(_QWORD *)(result + 24);
      if (v155)
      {
        v564 = v55;
        v592 = v56;
        v622 = v51;
        v652 = v48;
        v413 = v44;
        v414 = v45;
        v415 = v40;
        v416 = v41;
        v417 = v36;
        v418 = v37;
        v419 = v33;
        v420 = (uint64_t *)result;
        v421 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 16))(v155, v3);
          result = (uint64_t)v420;
          v7 = *v420;
          v154 = v420[1];
          a2 = v421;
        }
        else
        {
          v154 = 0;
          v7 = 0;
        }
        v33 = v419;
        v37 = v418;
        v36 = v417;
        v41 = v416;
        v40 = v415;
        v45 = v414;
        v44 = v413;
        v51 = v622;
        v48 = v652;
        v55 = v564;
        v56 = v592;
      }
    }
    else
    {
      v63 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v63 + 1;
      if (v3)
      {
        v696 = 0;
        v64 = *v63;
        LODWORD(v671) = v64;
        HIDWORD(v671) = v64 & 0xFFFFFF00;
        goto LABEL_91;
      }
      v154 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v550 = v55;
      v578 = v56;
      v607 = v51;
      v637 = v48;
      v255 = v44;
      v256 = v45;
      v257 = v40;
      v258 = v41;
      v259 = v36;
      v260 = v37;
      v261 = v33;
      v262 = (uint64_t *)result;
      v263 = a2;
      if (v154)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v154);
        v671 = 0;
        result = (uint64_t)v262;
        v7 = *v262;
        v2 = v262[1];
        v696 = 1;
        v3 = *v262;
        a2 = v263;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v671 = 0;
        v696 = 1;
      }
      v33 = v261;
      v37 = v260;
      v36 = v259;
      v41 = v258;
      v40 = v257;
      v45 = v256;
      v44 = v255;
      v51 = v607;
      v48 = v637;
      v55 = v550;
      v56 = v578;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v671 = 0;
      v696 = 1;
    }
LABEL_91:
    v65 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v65 || v2 - v65 <= 3)
    {
      v156 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v157 = *(_QWORD *)(result + 24);
      if (v157)
      {
        v565 = v55;
        v593 = v56;
        v623 = v51;
        v653 = v48;
        v422 = v44;
        v423 = v45;
        v424 = v40;
        v425 = v41;
        v426 = v36;
        v427 = v37;
        v428 = v33;
        v429 = (uint64_t *)result;
        v430 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, v3);
          result = (uint64_t)v429;
          v7 = *v429;
          v156 = v429[1];
          a2 = v430;
        }
        else
        {
          v156 = 0;
          v7 = 0;
        }
        v33 = v428;
        v37 = v427;
        v36 = v426;
        v41 = v425;
        v40 = v424;
        v45 = v423;
        v44 = v422;
        v51 = v623;
        v48 = v653;
        v55 = v565;
        v56 = v593;
      }
    }
    else
    {
      v66 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v66 + 1;
      if (v3)
      {
        v695 = 0;
        v67 = *v66;
        LODWORD(v670) = v67;
        HIDWORD(v670) = v67 & 0xFFFFFF00;
        goto LABEL_95;
      }
      v156 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v551 = v55;
      v579 = v56;
      v608 = v51;
      v638 = v48;
      v264 = v44;
      v265 = v45;
      v266 = v40;
      v267 = v41;
      v268 = v36;
      v269 = v37;
      v270 = v33;
      v271 = (uint64_t *)result;
      v272 = a2;
      if (v156)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v156);
        v670 = 0;
        result = (uint64_t)v271;
        v7 = *v271;
        v2 = v271[1];
        v695 = 1;
        v3 = *v271;
        a2 = v272;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v670 = 0;
        v695 = 1;
      }
      v33 = v270;
      v37 = v269;
      v36 = v268;
      v41 = v267;
      v40 = v266;
      v45 = v265;
      v44 = v264;
      v51 = v608;
      v48 = v638;
      v55 = v551;
      v56 = v579;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v670 = 0;
      v695 = 1;
    }
LABEL_95:
    v68 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v68 || v2 - v68 <= 3)
    {
      v158 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v159 = *(_QWORD *)(result + 24);
      if (v159)
      {
        v566 = v55;
        v594 = v56;
        v624 = v51;
        v654 = v48;
        v431 = v44;
        v432 = v45;
        v433 = v40;
        v434 = v41;
        v435 = v36;
        v436 = v37;
        v437 = v33;
        v438 = (uint64_t *)result;
        v439 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v3);
          result = (uint64_t)v438;
          v7 = *v438;
          v158 = v438[1];
          a2 = v439;
        }
        else
        {
          v158 = 0;
          v7 = 0;
        }
        v33 = v437;
        v37 = v436;
        v36 = v435;
        v41 = v434;
        v40 = v433;
        v45 = v432;
        v44 = v431;
        v51 = v624;
        v48 = v654;
        v55 = v566;
        v56 = v594;
      }
    }
    else
    {
      v69 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v69 + 1;
      if (v3)
      {
        v694 = 0;
        v70 = *v69;
        LODWORD(v669) = v70;
        HIDWORD(v669) = v70 & 0xFFFFFF00;
        goto LABEL_99;
      }
      v158 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v552 = v55;
      v580 = v56;
      v609 = v51;
      v639 = v48;
      v273 = v44;
      v274 = v45;
      v275 = v40;
      v276 = v41;
      v277 = v36;
      v278 = v37;
      v279 = v33;
      v280 = (uint64_t *)result;
      v281 = a2;
      if (v158)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v158);
        v669 = 0;
        result = (uint64_t)v280;
        v7 = *v280;
        v2 = v280[1];
        v694 = 1;
        v3 = *v280;
        a2 = v281;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v669 = 0;
        v694 = 1;
      }
      v33 = v279;
      v37 = v278;
      v36 = v277;
      v41 = v276;
      v40 = v275;
      v45 = v274;
      v44 = v273;
      v51 = v609;
      v48 = v639;
      v55 = v552;
      v56 = v580;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v669 = 0;
      v694 = 1;
    }
LABEL_99:
    v71 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v71 || v2 - v71 <= 3)
    {
      v160 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v161 = *(_QWORD *)(result + 24);
      if (v161)
      {
        v567 = v55;
        v595 = v56;
        v625 = v51;
        v655 = v48;
        v440 = v44;
        v441 = v45;
        v442 = v40;
        v443 = v41;
        v444 = v36;
        v445 = v37;
        v446 = v33;
        v447 = (uint64_t *)result;
        v448 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 16))(v161, v3);
          result = (uint64_t)v447;
          v7 = *v447;
          v160 = v447[1];
          a2 = v448;
        }
        else
        {
          v160 = 0;
          v7 = 0;
        }
        v33 = v446;
        v37 = v445;
        v36 = v444;
        v41 = v443;
        v40 = v442;
        v45 = v441;
        v44 = v440;
        v51 = v625;
        v48 = v655;
        v55 = v567;
        v56 = v595;
      }
    }
    else
    {
      v72 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v72 + 1;
      if (v3)
      {
        v693 = 0;
        v73 = *v72;
        LODWORD(v668) = v73;
        HIDWORD(v668) = v73 & 0xFFFFFF00;
        goto LABEL_103;
      }
      v160 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v553 = v55;
      v581 = v56;
      v610 = v51;
      v640 = v48;
      v282 = v44;
      v283 = v45;
      v284 = v40;
      v285 = v41;
      v286 = v36;
      v287 = v37;
      v288 = v33;
      v289 = (uint64_t *)result;
      v290 = a2;
      if (v160)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v160);
        v668 = 0;
        result = (uint64_t)v289;
        v7 = *v289;
        v2 = v289[1];
        v693 = 1;
        v3 = *v289;
        a2 = v290;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v668 = 0;
        v693 = 1;
      }
      v33 = v288;
      v37 = v287;
      v36 = v286;
      v41 = v285;
      v40 = v284;
      v45 = v283;
      v44 = v282;
      v51 = v610;
      v48 = v640;
      v55 = v553;
      v56 = v581;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v668 = 0;
      v693 = 1;
    }
LABEL_103:
    v74 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v74 || v2 - v74 <= 3)
    {
      v162 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v163 = *(_QWORD *)(result + 24);
      if (v163)
      {
        v568 = v55;
        v596 = v56;
        v626 = v51;
        v656 = v48;
        v449 = v44;
        v450 = v45;
        v451 = v40;
        v452 = v41;
        v453 = v36;
        v454 = v37;
        v455 = v33;
        v456 = (uint64_t *)result;
        v457 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v3);
          result = (uint64_t)v456;
          v7 = *v456;
          v162 = v456[1];
          a2 = v457;
        }
        else
        {
          v162 = 0;
          v7 = 0;
        }
        v33 = v455;
        v37 = v454;
        v36 = v453;
        v41 = v452;
        v40 = v451;
        v45 = v450;
        v44 = v449;
        v51 = v626;
        v48 = v656;
        v55 = v568;
        v56 = v596;
      }
    }
    else
    {
      v75 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v75 + 1;
      if (v3)
      {
        v692 = 0;
        v76 = *v75;
        LODWORD(v667) = v76;
        HIDWORD(v667) = v76 & 0xFFFFFF00;
        goto LABEL_107;
      }
      v162 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v554 = v55;
      v582 = v56;
      v611 = v51;
      v641 = v48;
      v291 = v44;
      v292 = v45;
      v293 = v40;
      v294 = v41;
      v295 = v36;
      v296 = v37;
      v297 = v33;
      v298 = (uint64_t *)result;
      v299 = a2;
      if (v162)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v162);
        v667 = 0;
        result = (uint64_t)v298;
        v7 = *v298;
        v2 = v298[1];
        v692 = 1;
        v3 = *v298;
        a2 = v299;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v667 = 0;
        v692 = 1;
      }
      v33 = v297;
      v37 = v296;
      v36 = v295;
      v41 = v294;
      v40 = v293;
      v45 = v292;
      v44 = v291;
      v51 = v611;
      v48 = v641;
      v55 = v554;
      v56 = v582;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v667 = 0;
      v692 = 1;
    }
LABEL_107:
    v77 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v77 || v2 - v77 <= 3)
    {
      v164 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v165 = *(_QWORD *)(result + 24);
      if (v165)
      {
        v569 = v55;
        v597 = v56;
        v627 = v51;
        v657 = v48;
        v458 = v44;
        v459 = v45;
        v460 = v40;
        v461 = v41;
        v462 = v36;
        v463 = v37;
        v464 = v33;
        v465 = (uint64_t *)result;
        v466 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, v3);
          result = (uint64_t)v465;
          v7 = *v465;
          v164 = v465[1];
          a2 = v466;
        }
        else
        {
          v164 = 0;
          v7 = 0;
        }
        v33 = v464;
        v37 = v463;
        v36 = v462;
        v41 = v461;
        v40 = v460;
        v45 = v459;
        v44 = v458;
        v51 = v627;
        v48 = v657;
        v55 = v569;
        v56 = v597;
      }
    }
    else
    {
      v78 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v78 + 1;
      if (v3)
      {
        v691 = 0;
        v79 = *v78;
        LODWORD(v666) = v79;
        HIDWORD(v666) = v79 & 0xFFFFFF00;
        goto LABEL_111;
      }
      v164 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v555 = v55;
      v583 = v56;
      v612 = v51;
      v642 = v48;
      v300 = v44;
      v301 = v45;
      v302 = v40;
      v303 = v41;
      v304 = v36;
      v305 = v37;
      v306 = v33;
      v307 = (uint64_t *)result;
      v308 = a2;
      if (v164)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v164);
        v666 = 0;
        result = (uint64_t)v307;
        v7 = *v307;
        v2 = v307[1];
        v691 = 1;
        v3 = *v307;
        a2 = v308;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v666 = 0;
        v691 = 1;
      }
      v33 = v306;
      v37 = v305;
      v36 = v304;
      v41 = v303;
      v40 = v302;
      v45 = v301;
      v44 = v300;
      v51 = v612;
      v48 = v642;
      v55 = v555;
      v56 = v583;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v666 = 0;
      v691 = 1;
    }
LABEL_111:
    v80 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v80 || v2 - v80 <= 3)
    {
      v166 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v167 = *(_QWORD *)(result + 24);
      if (v167)
      {
        v570 = v55;
        v598 = v56;
        v628 = v51;
        v658 = v48;
        v467 = v44;
        v468 = v45;
        v469 = v40;
        v470 = v41;
        v471 = v36;
        v472 = v37;
        v473 = v33;
        v474 = (uint64_t *)result;
        v475 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, v3);
          result = (uint64_t)v474;
          v7 = *v474;
          v166 = v474[1];
          a2 = v475;
        }
        else
        {
          v166 = 0;
          v7 = 0;
        }
        v33 = v473;
        v37 = v472;
        v36 = v471;
        v41 = v470;
        v40 = v469;
        v45 = v468;
        v44 = v467;
        v51 = v628;
        v48 = v658;
        v55 = v570;
        v56 = v598;
      }
    }
    else
    {
      v81 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v81 + 1;
      if (v3)
      {
        v690 = 0;
        v82 = *v81;
        LODWORD(v665) = v82;
        HIDWORD(v665) = v82 & 0xFFFFFF00;
        goto LABEL_115;
      }
      v166 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v556 = v55;
      v584 = v56;
      v613 = v51;
      v643 = v48;
      v309 = v44;
      v310 = v45;
      v311 = v40;
      v312 = v41;
      v313 = v36;
      v314 = v37;
      v315 = v33;
      v316 = (uint64_t *)result;
      v317 = a2;
      if (v166)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v166);
        v665 = 0;
        result = (uint64_t)v316;
        v7 = *v316;
        v2 = v316[1];
        v690 = 1;
        v3 = *v316;
        a2 = v317;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v665 = 0;
        v690 = 1;
      }
      v33 = v315;
      v37 = v314;
      v36 = v313;
      v41 = v312;
      v40 = v311;
      v45 = v310;
      v44 = v309;
      v51 = v613;
      v48 = v643;
      v55 = v556;
      v56 = v584;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v665 = 0;
      v690 = 1;
    }
LABEL_115:
    v83 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v83 || v2 - v83 <= 3)
    {
      v168 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v169 = *(_QWORD *)(result + 24);
      if (v169)
      {
        v571 = v55;
        v599 = v56;
        v629 = v51;
        v659 = v48;
        v476 = v44;
        v477 = v45;
        v478 = v40;
        v479 = v41;
        v480 = v36;
        v481 = v37;
        v482 = v33;
        v483 = (uint64_t *)result;
        v484 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v169 + 16))(v169, v3);
          result = (uint64_t)v483;
          v7 = *v483;
          v168 = v483[1];
          a2 = v484;
        }
        else
        {
          v168 = 0;
          v7 = 0;
        }
        v33 = v482;
        v37 = v481;
        v36 = v480;
        v41 = v479;
        v40 = v478;
        v45 = v477;
        v44 = v476;
        v51 = v629;
        v48 = v659;
        v55 = v571;
        v56 = v599;
      }
    }
    else
    {
      v84 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v84 + 1;
      if (v3)
      {
        v85 = 0;
        v86 = *v84;
        LODWORD(v664) = v86;
        HIDWORD(v664) = v86 & 0xFFFFFF00;
        goto LABEL_119;
      }
      v168 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v557 = v55;
      v585 = v56;
      v614 = v51;
      v644 = v48;
      v318 = v44;
      v319 = v45;
      v320 = v40;
      v321 = v41;
      v322 = v36;
      v323 = v37;
      v324 = v33;
      v325 = (uint64_t *)result;
      v326 = a2;
      if (v168)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v168);
        v664 = 0;
        result = (uint64_t)v325;
        v7 = *v325;
        v2 = v325[1];
        v85 = 1;
        v3 = *v325;
        a2 = v326;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v664 = 0;
        v85 = 1;
      }
      v33 = v324;
      v37 = v323;
      v36 = v322;
      v41 = v321;
      v40 = v320;
      v45 = v319;
      v44 = v318;
      v55 = v557;
      v51 = v614;
      v48 = v644;
      v56 = v585;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v664 = 0;
      v85 = 1;
    }
LABEL_119:
    v87 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v87 || v2 - v87 <= 3)
    {
      v170 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v171 = *(_QWORD *)(result + 24);
      if (v171)
      {
        v572 = v55;
        v600 = v56;
        v630 = v51;
        v660 = v48;
        v485 = v44;
        v486 = v45;
        v487 = v40;
        v488 = v41;
        v489 = v36;
        v490 = v37;
        v491 = v33;
        v492 = (uint64_t *)result;
        v493 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v3);
          result = (uint64_t)v492;
          v7 = *v492;
          v170 = v492[1];
          a2 = v493;
        }
        else
        {
          v170 = 0;
          v7 = 0;
        }
        v33 = v491;
        v37 = v490;
        v36 = v489;
        v41 = v488;
        v40 = v487;
        v45 = v486;
        v44 = v485;
        v55 = v572;
        v51 = v630;
        v48 = v660;
        v56 = v600;
      }
    }
    else
    {
      v88 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v88 + 1;
      if (v3)
      {
        v89 = 0;
        v90 = *v88;
        v91 = v90 & 0xFFFFFF00;
        v92 = v90;
        goto LABEL_123;
      }
      v170 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v558 = v55;
      v586 = v56;
      v615 = v51;
      v645 = v48;
      v541 = v44;
      v534 = v45;
      v527 = v40;
      v327 = v41;
      v328 = v36;
      v329 = v37;
      v330 = v33;
      v331 = (uint64_t *)result;
      v332 = a2;
      if (v170)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v170);
        v91 = 0;
        v92 = 0;
        result = (uint64_t)v331;
        v7 = *v331;
        v2 = v331[1];
        v89 = 1;
        v3 = *v331;
        a2 = v332;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v91 = 0;
        v92 = 0;
        v89 = 1;
      }
      v33 = v330;
      v37 = v329;
      v36 = v328;
      v41 = v327;
      v40 = v527;
      v45 = v534;
      v44 = v541;
      v51 = v615;
      v48 = v645;
      v55 = v558;
      v56 = v586;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v91 = 0;
      v92 = 0;
      v89 = 1;
    }
LABEL_123:
    v93 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v93 || v2 - v93 <= 3)
    {
      v172 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v173 = *(_QWORD *)(result + 24);
      if (v173)
      {
        v573 = v55;
        v601 = v56;
        v631 = v51;
        v661 = v48;
        v545 = v44;
        v538 = v45;
        v531 = v40;
        v494 = v41;
        v495 = v36;
        v496 = v37;
        v497 = v33;
        v498 = (uint64_t *)result;
        v499 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v3);
          result = (uint64_t)v498;
          v7 = *v498;
          v172 = v498[1];
          a2 = v499;
        }
        else
        {
          v172 = 0;
          v7 = 0;
        }
        v33 = v497;
        v37 = v496;
        v36 = v495;
        v41 = v494;
        v40 = v531;
        v45 = v538;
        v44 = v545;
        v51 = v631;
        v48 = v661;
        v55 = v573;
        v56 = v601;
      }
    }
    else
    {
      v94 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v94 + 1;
      if (v3)
      {
        v95 = 0;
        v96 = *v94;
        v97 = v96 & 0xFFFFFF00;
        v98 = v96;
        goto LABEL_127;
      }
      v172 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v559 = v55;
      v587 = v56;
      v616 = v51;
      v646 = v48;
      v542 = v44;
      v535 = v45;
      v528 = v40;
      v522 = v41;
      v512 = v37;
      v517 = v36;
      v333 = v33;
      v334 = (uint64_t *)result;
      v335 = a2;
      if (v172)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v172);
        v97 = 0;
        v98 = 0;
        result = (uint64_t)v334;
        v7 = *v334;
        v2 = v334[1];
        v95 = 1;
        v3 = *v334;
        a2 = v335;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v97 = 0;
        v98 = 0;
        v95 = 1;
      }
      v33 = v333;
      v37 = v512;
      v36 = v517;
      v41 = v522;
      v40 = v528;
      v45 = v535;
      v44 = v542;
      v51 = v616;
      v48 = v646;
      v55 = v559;
      v56 = v587;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v97 = 0;
      v98 = 0;
      v95 = 1;
    }
LABEL_127:
    v99 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v99 || v2 - v99 <= 3)
    {
      v174 = 0;
      v7 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v175 = *(_QWORD *)(result + 24);
      if (v175)
      {
        v574 = v55;
        v602 = v56;
        v632 = v51;
        v662 = v48;
        v546 = v44;
        v539 = v45;
        v532 = v40;
        v525 = v41;
        v515 = v37;
        v520 = v36;
        v500 = v33;
        v501 = (uint64_t *)result;
        v502 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v3);
          result = (uint64_t)v501;
          v7 = *v501;
          v174 = v501[1];
          a2 = v502;
        }
        else
        {
          v174 = 0;
          v7 = 0;
        }
        v33 = v500;
        v37 = v515;
        v36 = v520;
        v41 = v525;
        v40 = v532;
        v45 = v539;
        v44 = v546;
        v51 = v632;
        v48 = v662;
        v55 = v574;
        v56 = v602;
      }
    }
    else
    {
      v100 = (int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(result + 16) = v100 + 1;
      if (v3)
      {
        v101 = 0;
        v102 = *v100;
        v103 = v102 & 0xFFFFFF00;
        v104 = v102;
        goto LABEL_131;
      }
      v174 = v2;
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v560 = v55;
      v588 = v56;
      v617 = v51;
      v647 = v48;
      v543 = v44;
      v536 = v45;
      v529 = v40;
      v523 = v41;
      v513 = v37;
      v518 = v36;
      v509 = v33;
      v503 = (uint64_t *)result;
      v506 = a2;
      if (v174)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v7, v174);
        v103 = 0;
        v104 = 0;
        result = (uint64_t)v503;
        a2 = v506;
        v7 = *v503;
        v2 = v503[1];
        v101 = 1;
        v3 = *v503;
      }
      else
      {
        v7 = 0;
        v2 = 0;
        v3 = 0;
        v103 = 0;
        v104 = 0;
        v101 = 1;
      }
      v33 = v509;
      v37 = v513;
      v36 = v518;
      v41 = v523;
      v40 = v529;
      v45 = v536;
      v44 = v543;
      v51 = v617;
      v48 = v647;
      v55 = v560;
      v56 = v588;
    }
    else
    {
      v7 = 0;
      v2 = 0;
      v103 = 0;
      v104 = 0;
      v101 = 1;
    }
LABEL_131:
    v105 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v105 || v2 - v105 <= 3)
      break;
    v106 = (unsigned int *)((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *(_QWORD *)(result + 16) = v106 + 1;
    v107 = v2;
    if (!v3)
      goto LABEL_264;
    v108 = 0;
    v3 = *v106;
LABEL_135:
    if (!v711
      && !v710
      && !v709
      && !v708
      && !v707
      && !v706
      && !v705
      && !v704
      && !v703
      && !v702
      && !v701
      && !v700
      && !v33
      && !v36
      && !v40
      && !v44
      && !v48
      && !v699
      && !v698
      && !v697
      && !v696
      && !v695
      && !v694
      && !v693
      && !v692
      && !v691
      && !v690
      && !v85
      && !v89
      && !v95
      && !v101
      && !v108)
    {
      *(_QWORD *)(a2 + 56) = v41;
      *(_QWORD *)(a2 + 64) = v45;
      *(_DWORD *)a2 = v689 | HIDWORD(v689);
      *(_DWORD *)(a2 + 4) = HIDWORD(v688) | v688;
      *(_DWORD *)(a2 + 8) = v687 | HIDWORD(v687);
      *(_DWORD *)(a2 + 12) = v686 | HIDWORD(v686);
      *(_DWORD *)(a2 + 16) = v685 | HIDWORD(v685);
      *(_DWORD *)(a2 + 20) = v683 | v684;
      *(_DWORD *)(a2 + 24) = v682 | HIDWORD(v682);
      *(_DWORD *)(a2 + 28) = v681 | HIDWORD(v681);
      result = v670 | HIDWORD(v670);
      *(_DWORD *)(a2 + 32) = v680 | HIDWORD(v680);
      *(_DWORD *)(a2 + 36) = v679 | HIDWORD(v679);
      *(_DWORD *)(a2 + 40) = v678 | HIDWORD(v678);
      *(_DWORD *)(a2 + 44) = v677 | HIDWORD(v677);
      *(_DWORD *)(a2 + 48) = v676 | HIDWORD(v676);
      *(_DWORD *)(a2 + 52) = v37 | v675;
      *(_DWORD *)(a2 + 72) = v51 | v50;
      *(_DWORD *)(a2 + 76) = v56 | v55;
      *(_DWORD *)(a2 + 80) = v673 | v674;
      *(_QWORD *)(a2 + 88) = v672;
      *(_DWORD *)(a2 + 96) = v671 | HIDWORD(v671);
      *(_DWORD *)(a2 + 100) = result;
      *(_DWORD *)(a2 + 104) = v669 | HIDWORD(v669);
      *(_DWORD *)(a2 + 108) = v668 | HIDWORD(v668);
      *(_DWORD *)(a2 + 112) = v667 | HIDWORD(v667);
      *(_DWORD *)(a2 + 116) = v666 | HIDWORD(v666);
      *(_DWORD *)(a2 + 120) = v665 | HIDWORD(v665);
      *(_DWORD *)(a2 + 124) = v664 | HIDWORD(v664);
      *(_DWORD *)(a2 + 128) = v92 | v91;
      *(_DWORD *)(a2 + 132) = v98 | v97;
      v109 = 1;
      *(_DWORD *)(a2 + 136) = v104 | v103;
      *(_DWORD *)(a2 + 140) = v3;
      goto LABEL_168;
    }
    __break(1u);
  }
  v107 = 0;
  v7 = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v176 = *(_QWORD *)(result + 24);
  if (v176)
  {
    v575 = v55;
    v603 = v56;
    v633 = v51;
    v663 = v48;
    v547 = v44;
    v540 = v45;
    v533 = v40;
    v526 = v41;
    v516 = v37;
    v521 = v36;
    v511 = v33;
    v505 = (uint64_t *)result;
    v508 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v176 + 16))(v176, v3);
      result = (uint64_t)v505;
      a2 = v508;
      v7 = *v505;
      v107 = v505[1];
    }
    else
    {
      v107 = 0;
      v7 = 0;
    }
    v33 = v511;
    v37 = v516;
    v36 = v521;
    v41 = v526;
    v40 = v533;
    v45 = v540;
    v44 = v547;
    v51 = v633;
    v48 = v663;
    v55 = v575;
    v56 = v603;
  }
LABEL_264:
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v177 = *(_QWORD *)(result + 24);
  if (v177)
  {
    if (v107)
    {
      v504 = (_QWORD *)result;
      v507 = a2;
      v510 = v33;
      v514 = v37;
      v519 = v36;
      v524 = v41;
      v530 = v40;
      v537 = v45;
      v544 = v44;
      v618 = v51;
      v648 = v48;
      v561 = v55;
      v589 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v177 + 16))(v177, v7, v107);
      v55 = v561;
      v56 = v589;
      v51 = v618;
      v48 = v648;
      v44 = v544;
      v45 = v537;
      v40 = v530;
      v41 = v524;
      v37 = v514;
      v36 = v519;
      v33 = v510;
      a2 = v507;
      if (*v504)
      {
        v3 = 0;
        v108 = 1;
        goto LABEL_135;
      }
    }
  }
  v109 = 0;
  *(_BYTE *)a2 = 0;
LABEL_168:
  *(_BYTE *)(a2 + 144) = v109;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::SupportedFeatures,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    v7 = v10;
    v10 = 0;
    v9[0] = 0;
    *(_QWORD *)a3 = v7;
    v9[1] = 0;
    v8 = v11;
    v11 = 0;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  if (v12)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;

  v2 = result[2];
  if (v2 >= result[1]
    || (*(_BYTE *)(*result + v2) = *a2, result[2] = v2 + 1, v2 + 1 >= result[1])
    || (*(_BYTE *)(*result + v2 + 1) = a2[1], result[2] = v2 + 2, v2 + 2 >= result[1])
    || (*(_BYTE *)(*result + v2 + 2) = a2[2], result[2] = v2 + 3, v2 + 3 >= result[1]))
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2 + 3) = a2[3];
    result[2] = v2 + 4;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  unint64_t v15;

  result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  v5 = *a1;
  v6 = a1[2];
  v7 = *a1 + v6;
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v11 = v10 + v6;
    v12 = v10 + v6 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v11) = *(_DWORD *)(a2 + 8);
      a1[2] = v12;
      v5 = *a1;
      v6 = v12;
    }
  }
  v14 = (_DWORD *)((v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v14 >= v5 + v6)
  {
    v15 = (unint64_t)v14 - v5 + 4;
    if ((unint64_t)v14 - v5 > 0xFFFFFFFFFFFFFFFBLL || v15 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v14 = *(_DWORD *)(a2 + 12);
      a1[2] = v15;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 12);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 14);
  LOBYTE(v4) = *((_BYTE *)v2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 5);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 24);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)v2 + 26);
  LOBYTE(v2) = *((_BYTE *)v2 + 28);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *result;
  unint64_t v13;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 12));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 14));
  v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4++) = *(_BYTE *)(a2 + 16);
    a1[2] = v4;
  }
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 20);
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 24));
  result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (_BYTE *)(a2 + 26));
  v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v13) = *(_BYTE *)(a2 + 28);
    a1[2] = v13 + 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_12:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
      v8 = v7;
      v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0)
        v8 = 0;
      v10 = 256;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16 && v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
  v9 = 0;
  v8 = 0;
  v10 = 0;
LABEL_9:
  result = v8 | v9 | v10;
  if (!HIWORD(v9))
  {
    v17 = *a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v18)
      {
        v20 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        return v20;
      }
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)v2 + 2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, v2 + 2);
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>> const&>(a1, (uint64_t)(v2 + 4));
  LOBYTE(v4) = *((_BYTE *)v2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 81);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(char *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  id v7;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 8);
  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, a2 + 16);
  v6 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(a2 + 72))
  {
    if (v5 >= v6)
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a1 + v5) = 1;
      *((_QWORD *)a1 + 2) = v5 + 1;
      if (!*(_BYTE *)(a2 + 72))
      {
        v7 = std::__throw_bad_optional_access[abi:sn180100]();
        return (_QWORD *)IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(v7);
      }
    }
    result = IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>((uint64_t *)a1, a2 + 32);
    v5 = *((_QWORD *)a1 + 2);
  }
  else if (v5 >= v6)
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v5++) = 0;
    *((_QWORD *)a1 + 2) = v5;
  }
  if (v5 >= *((_QWORD *)a1 + 1)
    || (*(_BYTE *)(*(_QWORD *)a1 + v5) = *(_BYTE *)(a2 + 80), *((_QWORD *)a1 + 2) = v5 + 1,
                                                              v5 + 1 >= *((_QWORD *)a1 + 1)))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v5 + 1) = *(_BYTE *)(a2 + 81);
    *((_QWORD *)a1 + 2) = v5 + 2;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)(a2 + 3);
  v5 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(a2 + 1));
  return IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v4);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(_QWORD *a1, _QWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 1));
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
}

char *IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, v2 + 1);
  v5 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = v2[5];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = result[2];
  if (v2 >= result[1])
  {
    v3 = 0;
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2++) = *a2;
    result[2] = v2;
    v3 = result[1];
  }
  if (!a2[2])
  {
    if (v2 < v3)
    {
      *(_BYTE *)(*result + v2++) = 0;
      goto LABEL_10;
    }
LABEL_20:
    result[1] = 0;
    goto LABEL_11;
  }
  if (v2 >= v3)
    goto LABEL_20;
  v4 = v2 + 1;
  *(_BYTE *)(*result + v2) = 1;
  result[2] = v2 + 1;
  if (!a2[2])
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_19;
  }
  if (v4 >= result[1])
  {
LABEL_19:
    v2 = v4;
    goto LABEL_20;
  }
  v2 += 2;
  *(_BYTE *)(*result + v4) = a2[1];
LABEL_10:
  result[2] = v2;
LABEL_11:
  if (v2 >= result[1]
    || (*(_BYTE *)(*result + v2) = a2[3], result[2] = v2 + 1, v2 + 1 >= result[1])
    || (*(_BYTE *)(*result + v2 + 1) = a2[4], result[2] = v2 + 2, v2 + 2 >= result[1]))
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2 + 2) = a2[5];
    result[2] = v2 + 3;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ColorTargetState,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BlendState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BlendState> const&>(a1, (uint64_t)(v2 + 1));
  LODWORD(v2) = *((_DWORD *)v2 + 2);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  unint64_t v22;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 8;
    if (v13 > 0xFFFFFFFFFFFFFFF7 || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 8;
    if (v18 > 0xFFFFFFFFFFFFFFF7 || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v21 >= v2 + v3)
  {
    v22 = (unint64_t)v21 - v2 + 8;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFF7 || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v21 = a2[3];
      result[2] = v22;
    }
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = result[1];
  v4 = *result;
  v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    result[2] = v7 + 1;
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    v24 = v3;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
      goto LABEL_51;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (!v2)
    {
      v3 = 0;
      v4 = 0;
      v9 = 0;
LABEL_31:
      v8 = 1;
      goto LABEL_8;
    }
    v61 = result;
    v68 = a2;
    if (v24)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v25, v24);
      v9 = 0;
      result = v61;
      a2 = v68;
      v4 = *v61;
      v3 = v61[1];
      goto LABEL_31;
    }
    v3 = 0;
    v4 = 0;
    v9 = 0;
    v8 = 1;
LABEL_8:
    v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v12 + 1;
      if (v4)
      {
        v13 = 0;
        v14 = *v12;
        goto LABEL_15;
      }
      v26 = v3;
      v27 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      *result = 0;
      result[1] = 0;
      v28 = result[3];
      if (v28)
      {
        v58 = v8;
        v52 = v9;
        v65 = result;
        v73 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          result = v65;
          a2 = v73;
          v27 = *v65;
          v26 = v65[1];
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
        v9 = v52;
        v8 = v58;
      }
    }
    *result = 0;
    result[1] = 0;
    v14 = 0;
    v2 = result[3];
    if (v2)
    {
      v55 = v8;
      v49 = v9;
      v62 = result;
      v69 = a2;
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v2 + 16))(v2, v27, v26, 0.0);
        result = v62;
        a2 = v69;
        v4 = *v62;
        v3 = v62[1];
        v13 = 1;
        v9 = v49;
        v8 = v55;
        v14 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v13 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v13 = 1;
    }
LABEL_15:
    v15 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      v29 = 0;
      v30 = 0;
      *result = 0;
      result[1] = 0;
      v31 = result[3];
      if (v31)
      {
        v47 = v13;
        v43 = v14;
        v59 = v8;
        v53 = v9;
        v66 = result;
        v74 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          result = v66;
          a2 = v74;
          v30 = *v66;
          v29 = v66[1];
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
        v9 = v53;
        v8 = v59;
        v14 = v43;
        v13 = v47;
      }
    }
    else
    {
      v16 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v16 + 1;
      if (v4)
      {
        v17 = 0;
        v18 = *v16;
        goto LABEL_19;
      }
      v29 = v3;
      v30 = 0;
    }
    *result = 0;
    result[1] = 0;
    v18 = 0;
    v2 = result[3];
    if (v2)
    {
      v45 = v13;
      v41 = v14;
      v56 = v8;
      v50 = v9;
      v63 = result;
      v70 = a2;
      if (v29)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v30, v29);
        result = v63;
        a2 = v70;
        v4 = *v63;
        v3 = v63[1];
        v17 = 1;
        v9 = v50;
        v8 = v56;
        v14 = v41;
        v13 = v45;
        v18 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v17 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v17 = 1;
    }
LABEL_19:
    v19 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v19 || v3 - v19 <= 7)
    {
      v32 = 0;
      v33 = 0;
      *result = 0;
      result[1] = 0;
      v34 = result[3];
      if (v34)
      {
        v40 = v17;
        v38 = v18;
        v48 = v13;
        v44 = v14;
        v60 = v8;
        v54 = v9;
        v67 = result;
        v75 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
          result = v67;
          a2 = v75;
          v33 = *v67;
          v32 = v67[1];
        }
        else
        {
          v32 = 0;
          v33 = 0;
        }
        v9 = v54;
        v8 = v60;
        v14 = v44;
        v13 = v48;
        v18 = v38;
        v17 = v40;
      }
    }
    else
    {
      v20 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v20 + 1;
      if (v4)
      {
        v21 = 0;
        v22 = *v20;
        if (v8)
          goto LABEL_50;
        goto LABEL_23;
      }
      v32 = v3;
      v33 = 0;
    }
    *result = 0;
    result[1] = 0;
    v35 = result[3];
    if (!v35)
      break;
    if (!v32)
      break;
    v36 = result;
    v71 = a2;
    v51 = v9;
    v57 = v8;
    v42 = v14;
    v46 = v13;
    v37 = v18;
    v39 = v17;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(result[3], v33, v32);
    v17 = v39;
    v18 = v37;
    v13 = v46;
    v14 = v42;
    v9 = v51;
    a2 = v71;
    if (!*v36)
      break;
    v21 = 1;
    v22 = 0;
    if (v57)
      goto LABEL_50;
LABEL_23:
    if (!v13 && !v17 && !v21)
    {
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = v18;
      v23 = 1;
      *(_QWORD *)(a2 + 24) = v22;
      goto LABEL_27;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    v64 = result;
    v72 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      result = v64;
      a2 = v72;
      v25 = *v64;
      v24 = v64[1];
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
  }
  v23 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 32) = v23;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _BYTE *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = v2[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = v2[9];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 16));
  LOBYTE(v4) = v2[32];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = v2[33];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[34];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *result;
  unint64_t v6;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  v4 = a1[2];
  if (v4 >= a1[1] || (*(_BYTE *)(*a1 + v4) = *(_BYTE *)(a2 + 8), a1[2] = v4 + 1, v4 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4 + 1) = *(_BYTE *)(a2 + 9);
    a1[2] = v4 + 2;
  }
  result = IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  v6 = a1[2];
  if (v6 >= a1[1]
    || (*(_BYTE *)(*a1 + v6) = *(_BYTE *)(a2 + 32), a1[2] = v6 + 1, v6 + 1 >= a1[1])
    || (*(_BYTE *)(*a1 + v6 + 1) = *(_BYTE *)(a2 + 33), a1[2] = v6 + 2, v6 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v6 + 2) = *(_BYTE *)(a2 + 34);
    a1[2] = v6 + 3;
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  WTF *result;
  char v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  WTF *v36[2];
  char v37;
  __int16 v38;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a1);
  v8 = IPC::Decoder::decode<WTF::OptionSet<WebCore::WebGPU::TextureUsage>>(a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::WebGPU::TextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v36, a1);
  v9 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  v38 = 0;
  result = (WTF *)IPC::Decoder::operator>><unsigned char>(a1, &v38);
  v11 = v38;
  if (HIBYTE(v38))
    v12 = v38 > 1u;
  else
    v12 = 1;
  v13 = v12;
  if (v13 == 1)
    goto LABEL_22;
  while (1)
  {
    v14 = a1[1];
    v15 = (char *)*a1;
    v16 = a1[2] - *a1;
    if (v14 <= v16)
      break;
    v17 = &v15[v16];
    a1[2] = (uint64_t)(v17 + 1);
    if (!v15)
    {
      v25 = v14;
      v26 = 0;
      goto LABEL_25;
    }
    v18 = *v17;
    if (v18 > 1)
      goto LABEL_26;
    v19 = 0;
    v20 = v18 != 0;
LABEL_12:
    if (v6 && v7 > 0xFFu && v8 > 0xFFu && v37 && v9 > 0xFFu && !v13 && !v19)
    {
      v21 = v36[0];
      v22 = v36[1];
      *(_QWORD *)a2 = v4;
      *(_BYTE *)(a2 + 8) = v7;
      *(_BYTE *)(a2 + 9) = v8;
      *(_QWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 24) = v22;
      *(_BYTE *)(a2 + 32) = v9;
      *(_BYTE *)(a2 + 33) = v11;
      *(_BYTE *)(a2 + 34) = v20;
      *(_BYTE *)(a2 + 40) = 1;
      return result;
    }
    __break(1u);
LABEL_22:
    v23 = *a1;
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      v34 = v13;
      if (v24)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v23);
      v11 = 0;
      v13 = v34;
    }
    else
    {
      v11 = 0;
    }
  }
  v25 = 0;
  v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  v27 = a1[3];
  if (v27)
  {
    v31 = v11;
    v35 = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      v26 = *a1;
      v25 = a1[1];
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v11 = v31;
    v13 = v35;
  }
LABEL_25:
  v14 = 0;
  v15 = 0;
  *a1 = 0;
  a1[1] = 0;
  v28 = a1[3];
  if (v28)
  {
    v30 = v11;
    v33 = v13;
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
      v15 = (char *)*a1;
      v14 = a1[1];
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v11 = v30;
    v13 = v33;
  }
LABEL_26:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
  {
    if (v14)
    {
      v29 = v11;
      v32 = v13;
      result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v15);
      v11 = v29;
      v13 = v32;
      if (*a1)
      {
        v20 = 0;
        v19 = 1;
        goto LABEL_12;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v37)
  {
    result = v36[0];
    if (v36[0])
      return (WTF *)WTF::fastFree(v36[0], v15);
  }
  return result;
}

void sub_196EA3CA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, char a13)
{
  if (a13)
  {
    if (a11)
      WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebGPU::BufferBindingLayout,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::BufferBinding,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 2);
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BufferBinding,void>::encode(_QWORD *a1, _QWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, a2 + 1);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::BlendComponent>(uint64_t *a1)
{
  unsigned __int8 v2;
  BOOL v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  v17 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v17);
  v2 = v17;
  if (HIBYTE(v17))
    v3 = v17 > 4u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
    goto LABEL_16;
  while (1)
  {
    v5 = IPC::Decoder::decode<WebCore::WebGPU::BlendFactor>(a1);
    v6 = IPC::Decoder::decode<WebCore::WebGPU::BlendFactor>(a1);
    if (!*a1)
      break;
    if (!v4 && v5 > 0xFFu && v6 > 0xFFu)
    {
      v7 = v2;
      v8 = 0x1000000;
      goto LABEL_13;
    }
    __break(1u);
LABEL_16:
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  v7 = 0;
  v8 = 0;
LABEL_13:
  v9 = v8 | (v6 << 16) | (v5 << 8) | v7;
  if (!HIBYTE(v8))
  {
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  return v9;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BlendComponent,void>::encode(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;

  v2 = result[2];
  if (v2 >= result[1]
    || (*(_BYTE *)(*result + v2) = *a2, result[2] = v2 + 1, v2 + 1 >= result[1])
    || (*(_BYTE *)(*result + v2 + 1) = a2[1], result[2] = v2 + 2, v2 + 2 >= result[1]))
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2 + 2) = a2[2];
    result[2] = v2 + 3;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::WebGPU::BlendFactor>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 0xCu;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

char *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupEntry,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WebKit::WebGPU::BufferBinding,void>::encode(a1, v2 + 1);
  v5 = v2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupEntry,void>::encode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *result;
  unint64_t v13;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)a2;
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::BufferBinding,void>::encode(a1, (_QWORD *)(a2 + 8));
  result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)(a2 + 40));
  v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v13) = *(_BYTE *)(a2 + 48);
    a1[2] = v13 + 1;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebUserStyleSheetData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return IPC::ArgumentCoder<WebCore::UserStyleSheet,void>::encode(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::ArgumentCoder<WebKit::WebUserStyleSheetData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  void *v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36[2];
  WTF::StringImpl *v37[2];
  WTF::StringImpl *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  _BYTE v58[16];
  char v59;
  _BYTE v60[16];
  char v61;
  WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  char v65;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<WTF::String>(a1, &v64);
  IPC::Decoder::decode<WTF::URL>(a1, &v62);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)v60);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v11, (uint64_t)v58);
  v12 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  v13 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v56);
  if (!*a1)
    goto LABEL_35;
  if (!v65 || !v63 || !v61 || !v59 || v12 <= 0xFFu || v13 <= 0xFFu || !v57)
    goto LABEL_34;
  WebCore::UserStyleSheet::UserStyleSheet();
  v46 = *(_OWORD *)v36;
  v47 = *(_OWORD *)v38;
  v48 = v39;
  v15 = *((_QWORD *)&v40 + 1);
  v49 = v40;
  v40 = 0uLL;
  v50 = v15;
  v16 = v41;
  v41 = 0;
  v51 = v16;
  v17 = v42;
  v42 = 0;
  v52 = v17;
  v54 = v44;
  v53 = v43;
  v55 = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v19);
  while (1)
  {
    if (v59)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v14);
    if (v61)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v14);
    if (v63)
    {
      v20 = v62;
      v62 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v65)
    {
      v21 = v64;
      v64 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (!v55)
    {
      v14 = (void *)*a1;
      v34 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v35 = a1[3];
      if (v35)
      {
        if (v34)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v35 + 16))(v35, v14);
      }
    }
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 120) = 0;
      return std::__optional_destruct_base<WebCore::UserStyleSheet,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v14);
    }
    if (v6)
    {
      v37[0] = (WTF::StringImpl *)v4;
      if (v9)
      {
        v37[1] = (WTF::StringImpl *)v7;
        if (v55)
          break;
      }
    }
LABEL_34:
    __break(1u);
LABEL_35:
    LOBYTE(v46) = 0;
    v55 = 0;
  }
  v22 = v46;
  v46 = 0uLL;
  v39 = v47;
  v40 = v48;
  LODWORD(v47) = v47 & 0xFFFFFFFE;
  v23 = v49;
  v49 = 0;
  v41 = v23;
  v24 = v50;
  v50 = 0;
  v42 = v24;
  *(_QWORD *)&v43 = v51;
  v45 = v54;
  v51 = 0;
  v25 = v52;
  v52 = 0;
  *((_QWORD *)&v43 + 1) = v25;
  v44 = v53;
  *(_OWORD *)a2 = *(_OWORD *)v37;
  v38[1] = *((WTF::StringImpl **)&v22 + 1);
  *(_QWORD *)(a2 + 16) = v22;
  WTF::URL::URL(a2 + 24, (uint64_t *)&v38[1]);
  v26 = v41;
  v41 = 0;
  *(_QWORD *)(a2 + 64) = v26;
  v27 = v42;
  v42 = 0;
  *(_QWORD *)(a2 + 72) = v27;
  v28 = v43;
  *(_QWORD *)&v43 = 0;
  *(_QWORD *)(a2 + 80) = v28;
  v29 = *((_QWORD *)&v43 + 1);
  *((_QWORD *)&v43 + 1) = 0;
  *(_QWORD *)(a2 + 88) = v29;
  *(_OWORD *)(a2 + 96) = v44;
  *(_BYTE *)(a2 + 112) = v45;
  *(_BYTE *)(a2 + 120) = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v30);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v31);
  v32 = v38[1];
  v38[1] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v32 -= 2;
  }
  return std::__optional_destruct_base<WebCore::UserStyleSheet,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v14);
}

void sub_196EA4574(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<WebCore::UserStyleSheet,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _BYTE *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(v2 + 8));
  LOBYTE(v4) = v2[32];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = v2[33];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[34];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::SwapBuffersDisplayRequirement,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 4);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 6);
  return IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::encode<IPC::Encoder,std::optional<WebCore::ScreenDataOverrides> const&>(a1, (uint64_t)(a2 + 8));
}

_QWORD *IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v4 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v5 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v7 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  result = IPC::Decoder::decode<std::optional<WebCore::ScreenDataOverrides>>(a1, (uint64_t)v10);
  v9 = *a1;
  if (!*a1)
    goto LABEL_10;
  if ((v4 & 0xFF0000) == 0
    || (v5 & 0xFF0000) == 0
    || (v6 & 0xFF0000) == 0
    || (v7 & 0xFF0000) == 0
    || (LOBYTE(v9) = v11) == 0)
  {
    __break(1u);
LABEL_10:
    *(_BYTE *)a2 = 0;
    goto LABEL_8;
  }
  *(_OWORD *)(a2 + 8) = v10[0];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)((char *)v10 + 9);
  *(_WORD *)a2 = v4;
  *(_WORD *)(a2 + 2) = v5;
  *(_WORD *)(a2 + 4) = v6;
  *(_WORD *)(a2 + 6) = v7;
  LOBYTE(v9) = 1;
LABEL_8:
  *(_BYTE *)(a2 + 40) = v9;
  return result;
}

_QWORD *IPC::Decoder::decode<std::optional<WebCore::ScreenDataOverrides>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (_QWORD *)a2);
  v4 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  char v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _QWORD v19[2];
  char v20;

  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v19);
  v4 = (unsigned __int8 *)a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
    goto LABEL_15;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v7 = v4;
    v13 = 0;
    goto LABEL_16;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2)
    goto LABEL_18;
  v8 = 0;
  v9 = 1;
  while (1)
  {
    v10 = (_DWORD)v7 ? v9 : 0;
    result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
    if (!*a1)
      break;
    if (v20)
    {
      *(_QWORD *)&v18 = v19[0];
      *(_QWORD *)((char *)&v18 + 5) = *(_QWORD *)((char *)v19 + 5);
      if (!v8)
      {
        if (v12)
        {
          *(_OWORD *)a2 = v18;
          *(_BYTE *)(a2 + 16) = v10;
          *(_QWORD *)(a2 + 24) = result;
          *(_BYTE *)(a2 + 32) = 1;
          return result;
        }
      }
    }
    __break(1u);
LABEL_15:
    v7 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v7 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v7 = 0;
        v13 = 0;
      }
    }
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v15 + 16))(v15, v13, v7);
        LODWORD(v7) = 0;
        v5 = *a1;
        v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
      LODWORD(v7) = 0;
    }
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v17 = (int)v7;
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
      v9 = 0;
      v8 = 1;
      LODWORD(v7) = v17;
    }
    else
    {
      v9 = 0;
      v8 = 1;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char *result;

  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
  v4 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v4;
  __n128 v5;
  unsigned __int8 *v6;
  _BYTE *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  _QWORD v51[2];
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char v59;

  IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v57, a1);
  IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v54, a1);
  v6 = (unsigned __int8 *)a1[1];
  v7 = (_BYTE *)*a1;
  v8 = a1[2] - *a1;
  if ((unint64_t)v6 <= v8)
    goto LABEL_30;
  v9 = &v7[v8];
  v10 = v9 + 1;
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v9 = v6;
    v25 = 0;
    goto LABEL_31;
  }
  LODWORD(v9) = *v9;
  if (v9 < 2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (!v28 || (v45 = (int)v9, !v6))
    {
      v12 = 0;
      v13 = 0;
      v7 = 0;
      v11 = 1;
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, _BYTE *, __n128, __n128))(*(_QWORD *)v28 + 16))(v28, v7, v4, v5);
    v12 = 0;
    v7 = (_BYTE *)*a1;
    v6 = (unsigned __int8 *)a1[1];
    v11 = 1;
    v10 = (unsigned __int8 *)a1[2];
    LODWORD(v9) = v45;
LABEL_5:
    if (!(_DWORD)v9)
      v12 = 0;
    if ((unint64_t)v6 <= v10 - v7)
    {
      v44 = v11;
      v50 = v12;
      v13 = 0;
      v34 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v34 && v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v7 = (_BYTE *)*a1;
        v13 = a1[1];
      }
      else
      {
        v7 = 0;
      }
      v11 = v44;
      v12 = v50;
      goto LABEL_35;
    }
    a1[2] = (uint64_t)(v10 + 1);
    if (!v7)
    {
      v13 = (uint64_t)v6;
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        v41 = v11;
        v47 = v12;
        if (v13)
        {
          (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128, __n128))(*(_QWORD *)v29 + 16))(v29, v7, v13, v4, v5);
          LODWORD(v13) = 0;
          v7 = (_BYTE *)*a1;
          v6 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v6 = 0;
          v7 = 0;
        }
        v11 = v41;
        v12 = v47;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        LODWORD(v13) = 0;
      }
LABEL_37:
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30)
      {
        v37 = v13;
        v40 = v11;
        v46 = v12;
        if (v6)
        {
          (*(void (**)(uint64_t, _BYTE *, __n128, __n128))(*(_QWORD *)v30 + 16))(v30, v7, v4, v5);
          v15 = 0;
          v7 = (_BYTE *)*a1;
          v6 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v7 = 0;
          v15 = 0;
        }
        v14 = 1;
        v11 = v40;
        v12 = v46;
        LODWORD(v13) = v37;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v15 = 0;
        v14 = 1;
      }
      goto LABEL_11;
    }
    LODWORD(v13) = *v10;
    if (v13 >= 2)
      goto LABEL_37;
    v14 = 0;
    v15 = 1;
LABEL_11:
    v16 = (_DWORD)v13 ? v15 : 0;
    v17 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v7;
    if ((unint64_t)v6 < v17 || (unint64_t)&v6[-v17] <= 7)
      break;
    v18 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v18 + 1);
    if (!v7)
    {
      v31 = (uint64_t)v6;
      v32 = 0;
      goto LABEL_40;
    }
    v19 = 0;
    v20 = *v18;
LABEL_18:
    if (v59)
    {
      v21 = v57;
      v4.n128_u64[0] = v58;
      v57 = 0;
      v58 = 0;
      if (v56)
      {
        v22 = v54;
        v5.n128_u64[0] = v55;
        v54 = 0;
        v55 = 0;
        if (!v11)
        {
          LOBYTE(v53) = v12;
          if (!v14)
          {
            BYTE1(v53) = v16;
            if (!v19)
            {
              *((_QWORD *)&v53 + 1) = v20;
              v51[0] = 0;
              *(_QWORD *)a2 = v21;
              v51[1] = 0;
              *(_QWORD *)(a2 + 8) = v4.n128_u64[0];
              v52[0] = 0;
              *(_QWORD *)(a2 + 16) = v22;
              v52[1] = 0;
              *(_QWORD *)(a2 + 24) = v5.n128_u64[0];
              *(_OWORD *)(a2 + 32) = v53;
              *(_BYTE *)(a2 + 48) = 1;
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v7);
              result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v23);
              goto LABEL_24;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_30:
    v9 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v26 + 16))(v26, v4, v5);
        v25 = *a1;
        v9 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v9 = 0;
        v25 = 0;
      }
    }
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, __n128, __n128))(*(_QWORD *)v27 + 16))(v27, v25, v9, v4, v5);
        LODWORD(v9) = 0;
        v7 = (_BYTE *)*a1;
        v6 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
      LODWORD(v9) = 0;
    }
  }
  v31 = 0;
  v32 = 0;
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33)
  {
    v36 = v14;
    v39 = v16;
    v43 = v11;
    v49 = v12;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v32 = *a1;
      v31 = a1[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v11 = v43;
    v12 = v49;
    v14 = v36;
    v16 = v39;
  }
LABEL_40:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v31)
    {
      v35 = v14;
      v38 = v16;
      v42 = v11;
      v48 = v12;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v32, v31);
      v11 = v42;
      v12 = v48;
      v14 = v35;
      v16 = v38;
      if (*a1)
      {
        v20 = 0;
        v19 = 1;
        goto LABEL_18;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
LABEL_24:
  if (v56)
    result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v7);
  if (v59)
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v7);
  return result;
}

void sub_196EA4FA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (a19)
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  if (*(_BYTE *)(v19 - 24))
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 - 40, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((_BYTE *)v2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 17);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)v2 + 18);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *((_BYTE *)v2 + 19);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *((_BYTE *)v2 + 20);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_BYTE *)v2 + 21);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *((_BYTE *)v2 + 22);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v2) = *((_BYTE *)v2 + 23);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  char v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  char v42;
  char v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  char v49;
  char v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char v56;
  char v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t result;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  char v238;
  char v239;
  char v240;
  char v241;
  char v242;
  char v243;
  char v244;
  char v245;
  char v246;
  char v247;
  char v248;
  char v249;
  char v250;
  char v251;
  char v252;
  char v253;
  char v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  char v280;
  char v281;
  char v282;
  char v283;
  char v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  char v290;
  char v291;
  char v292;
  char v293;
  char v294;
  uint64_t v295;
  char v296;

  IPC::Decoder::decode<WTF::String>(a1, &v295);
  v4 = a1[1];
  v5 = (WTF::StringImpl *)*a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)((char *)v5 + v6);
    v9 = (uint64_t)v5 + v6 + 8;
    a1[2] = v9;
    if (!v5)
    {
      v64 = v4;
      v65 = 0;
      goto LABEL_72;
    }
    v10 = 0;
    v11 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v64 = 0;
    v65 = 0;
    *a1 = 0;
    a1[1] = 0;
    v66 = a1[3];
    if (v66)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        v65 = *a1;
        v64 = a1[1];
      }
      else
      {
        v64 = 0;
        v65 = 0;
      }
    }
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (!v67)
    {
      v11 = 0;
      v64 = 0;
LABEL_74:
      v5 = 0;
      v10 = 1;
      goto LABEL_75;
    }
    if (!v64)
    {
      v11 = 0;
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v65, v64);
    v11 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v10 = 1;
    v9 = a1[2];
LABEL_8:
    v12 = v9 - (_QWORD)v5;
    if (v4 <= v12)
    {
      v104 = v10;
      v105 = v11;
      v64 = 0;
      v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v106 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
        v5 = (WTF::StringImpl *)*a1;
        v64 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v105;
      v10 = v104;
      goto LABEL_75;
    }
    v13 = (unsigned __int8 *)v5 + v12;
    v14 = (uint64_t)v5 + v12 + 1;
    a1[2] = v14;
    if (!v5)
    {
      v64 = v4;
LABEL_75:
      *a1 = 0;
      a1[1] = 0;
      v68 = a1[3];
      if (v68)
      {
        v209 = v10;
        v94 = v11;
        if (v64)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v68 + 16))(v68, v5, v64);
          v15 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v15 = 0;
        }
        v11 = v94;
        v10 = v209;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v15 = 0;
      }
      goto LABEL_77;
    }
    v15 = *v13;
    if (v15 < 2)
    {
      v16 = 0;
      v17 = 1;
      goto LABEL_12;
    }
LABEL_77:
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (!v69)
    {
      v17 = 0;
      v70 = 0;
      v5 = 0;
      v16 = 1;
      goto LABEL_79;
    }
    v205 = v10;
    v90 = v11;
    if (!v4)
    {
      v17 = 0;
      v70 = 0;
      v5 = 0;
      v16 = 1;
LABEL_79:
      *a1 = 0;
      a1[1] = 0;
      v71 = a1[3];
      if (v71)
      {
        v279 = v17;
        v259 = v16;
        v211 = v10;
        v96 = v11;
        if (v70)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v71 + 16))(v71, v5, v70);
          v21 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v21 = 0;
        }
        v11 = v96;
        v10 = v211;
        v16 = v259;
        v17 = v279;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v21 = 0;
      }
      goto LABEL_81;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v69 + 16))(v69, v5);
    v17 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v16 = 1;
    v14 = a1[2];
    v11 = v90;
    v10 = v205;
LABEL_12:
    if (!v15)
      v17 = 0;
    v18 = v14 - (_QWORD)v5;
    if (v4 <= v18)
    {
      v294 = v17;
      v274 = v16;
      v123 = v10;
      v124 = v11;
      v70 = 0;
      v125 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v125 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125);
        v5 = (WTF::StringImpl *)*a1;
        v70 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v124;
      v10 = v123;
      v16 = v274;
      v17 = v294;
      goto LABEL_79;
    }
    v19 = (unsigned __int8 *)v5 + v18;
    v20 = (uint64_t)v5 + v18 + 1;
    a1[2] = v20;
    if (!v5)
    {
      v70 = v4;
      goto LABEL_79;
    }
    v21 = *v19;
    if (v21 < 2)
    {
      v22 = 0;
      v23 = 1;
      goto LABEL_18;
    }
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    v72 = a1[3];
    if (!v72)
    {
      v23 = 0;
      v73 = 0;
      v5 = 0;
      v22 = 1;
      goto LABEL_83;
    }
    v275 = v17;
    v255 = v16;
    v206 = v10;
    v91 = v11;
    if (!v4)
    {
      v23 = 0;
      v73 = 0;
      v5 = 0;
      v22 = 1;
LABEL_83:
      *a1 = 0;
      a1[1] = 0;
      v74 = a1[3];
      if (v74)
      {
        v225 = v22;
        v242 = v23;
        v281 = v17;
        v261 = v16;
        v213 = v10;
        v98 = v11;
        if (v73)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v74 + 16))(v74, v5, v73);
          v27 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v27 = 0;
        }
        v11 = v98;
        v10 = v213;
        v22 = v225;
        v23 = v242;
        v16 = v261;
        v17 = v281;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v27 = 0;
      }
      goto LABEL_85;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v72 + 16))(v72, v5);
    v23 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v22 = 1;
    v20 = a1[2];
    v11 = v91;
    v10 = v206;
    v16 = v255;
    v17 = v275;
LABEL_18:
    if (!v21)
      v23 = 0;
    v24 = v20 - (_QWORD)v5;
    if (v4 <= v24)
    {
      v237 = v22;
      v254 = v23;
      v293 = v17;
      v273 = v16;
      v120 = v10;
      v121 = v11;
      v73 = 0;
      v122 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v122 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
        v5 = (WTF::StringImpl *)*a1;
        v73 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v121;
      v10 = v120;
      v23 = v254;
      v16 = v273;
      v17 = v293;
      v22 = v237;
      goto LABEL_83;
    }
    v25 = (unsigned __int8 *)v5 + v24;
    v26 = (uint64_t)v5 + v24 + 1;
    a1[2] = v26;
    if (!v5)
    {
      v73 = v4;
      goto LABEL_83;
    }
    v27 = *v25;
    if (v27 < 2)
    {
      v28 = 0;
      v29 = 1;
      goto LABEL_24;
    }
LABEL_85:
    *a1 = 0;
    a1[1] = 0;
    v75 = a1[3];
    if (!v75)
    {
      v29 = 0;
      v76 = 0;
      v5 = 0;
      v28 = 1;
      goto LABEL_87;
    }
    v221 = v22;
    v238 = v23;
    v276 = v17;
    v256 = v16;
    v207 = v10;
    v92 = v11;
    if (!v4)
    {
      v29 = 0;
      v76 = 0;
      v5 = 0;
      v28 = 1;
LABEL_87:
      *a1 = 0;
      a1[1] = 0;
      v77 = a1[3];
      if (v77)
      {
        v181 = v28;
        v195 = v29;
        v227 = v22;
        v244 = v23;
        v283 = v17;
        v263 = v16;
        v215 = v10;
        v99 = v11;
        if (v76)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v77 + 16))(v77, v5, v76);
          v33 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v33 = 0;
        }
        v11 = v99;
        v10 = v215;
        v22 = v227;
        v23 = v244;
        v16 = v263;
        v17 = v283;
        v28 = v181;
        v29 = v195;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v33 = 0;
      }
      goto LABEL_89;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v75 + 16))(v75, v5);
    v29 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v28 = 1;
    v26 = a1[2];
    v11 = v92;
    v10 = v207;
    v22 = v221;
    v23 = v238;
    v16 = v256;
    v17 = v276;
LABEL_24:
    if (!v27)
      v29 = 0;
    v30 = v26 - (_QWORD)v5;
    if (v4 <= v30)
    {
      v190 = v28;
      v204 = v29;
      v236 = v22;
      v253 = v23;
      v292 = v17;
      v272 = v16;
      v117 = v10;
      v118 = v11;
      v76 = 0;
      v119 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v119 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
        v5 = (WTF::StringImpl *)*a1;
        v76 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v118;
      v10 = v117;
      v23 = v253;
      v16 = v272;
      v17 = v292;
      v22 = v236;
      v28 = v190;
      v29 = v204;
      goto LABEL_87;
    }
    v31 = (unsigned __int8 *)v5 + v30;
    v32 = (uint64_t)v5 + v30 + 1;
    a1[2] = v32;
    if (!v5)
    {
      v76 = v4;
      goto LABEL_87;
    }
    v33 = *v31;
    if (v33 < 2)
    {
      v34 = 0;
      v35 = 1;
      goto LABEL_30;
    }
LABEL_89:
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (!v78)
    {
      v36 = 0;
      v79 = 0;
      v5 = 0;
      v34 = 1;
      goto LABEL_91;
    }
    v177 = v28;
    v191 = v29;
    v222 = v22;
    v239 = v23;
    v277 = v17;
    v257 = v16;
    v208 = v10;
    v93 = v11;
    if (!v4)
    {
      v36 = 0;
      v79 = 0;
      v5 = 0;
      v34 = 1;
LABEL_91:
      *a1 = 0;
      a1[1] = 0;
      v80 = a1[3];
      if (v80)
      {
        v159 = v34;
        v170 = v36;
        v183 = v28;
        v197 = v29;
        v229 = v22;
        v246 = v23;
        v285 = v17;
        v265 = v16;
        v217 = v10;
        v100 = v11;
        if (v79)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v80 + 16))(v80, v5, v79);
          v40 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v40 = 0;
        }
        v11 = v100;
        v10 = v217;
        v22 = v229;
        v23 = v246;
        v16 = v265;
        v17 = v285;
        v28 = v183;
        v29 = v197;
        v34 = v159;
        v36 = v170;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v40 = 0;
      }
      goto LABEL_93;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v78 + 16))(v78, v5);
    v35 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v34 = 1;
    v32 = a1[2];
    v11 = v93;
    v10 = v208;
    v22 = v222;
    v23 = v239;
    v16 = v257;
    v17 = v277;
    v28 = v177;
    v29 = v191;
LABEL_30:
    if (v33)
      v36 = v35;
    else
      v36 = 0;
    v37 = v32 - (_QWORD)v5;
    if (v4 <= v37)
    {
      v165 = v34;
      v176 = v36;
      v189 = v28;
      v203 = v29;
      v235 = v22;
      v252 = v23;
      v291 = v17;
      v271 = v16;
      v114 = v10;
      v115 = v11;
      v79 = 0;
      v116 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v116 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
        v5 = (WTF::StringImpl *)*a1;
        v79 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v115;
      v10 = v114;
      v23 = v252;
      v16 = v271;
      v17 = v291;
      v22 = v235;
      v28 = v189;
      v29 = v203;
      v34 = v165;
      v36 = v176;
      goto LABEL_91;
    }
    v38 = (unsigned __int8 *)v5 + v37;
    v39 = (uint64_t)v5 + v37 + 1;
    a1[2] = v39;
    if (!v5)
    {
      v79 = v4;
      goto LABEL_91;
    }
    v40 = *v38;
    if (v40 < 2)
    {
      v41 = 0;
      v42 = 1;
      goto LABEL_37;
    }
LABEL_93:
    *a1 = 0;
    a1[1] = 0;
    v81 = a1[3];
    if (!v81)
    {
      v43 = 0;
      v82 = 0;
      v5 = 0;
      v41 = 1;
      goto LABEL_95;
    }
    v155 = v34;
    v166 = v36;
    v178 = v28;
    v192 = v29;
    v223 = v22;
    v240 = v23;
    v278 = v17;
    v258 = v16;
    v210 = v10;
    v95 = v11;
    if (!v4)
    {
      v43 = 0;
      v82 = 0;
      v5 = 0;
      v41 = 1;
LABEL_95:
      *a1 = 0;
      a1[1] = 0;
      v83 = a1[3];
      if (v83)
      {
        v142 = v41;
        v150 = v43;
        v160 = v34;
        v171 = v36;
        v184 = v28;
        v198 = v29;
        v230 = v22;
        v247 = v23;
        v286 = v17;
        v266 = v16;
        v218 = v10;
        v101 = v11;
        if (v82)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v83 + 16))(v83, v5, v82);
          v47 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v47 = 0;
        }
        v11 = v101;
        v10 = v218;
        v22 = v230;
        v23 = v247;
        v16 = v266;
        v17 = v286;
        v28 = v184;
        v29 = v198;
        v34 = v160;
        v36 = v171;
        v41 = v142;
        v43 = v150;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v47 = 0;
      }
      goto LABEL_97;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v81 + 16))(v81, v5);
    v42 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v41 = 1;
    v39 = a1[2];
    v11 = v95;
    v10 = v210;
    v22 = v223;
    v23 = v240;
    v16 = v258;
    v17 = v278;
    v28 = v178;
    v29 = v192;
    v34 = v155;
    v36 = v166;
LABEL_37:
    if (v40)
      v43 = v42;
    else
      v43 = 0;
    v44 = v39 - (_QWORD)v5;
    if (v4 <= v44)
    {
      v146 = v41;
      v154 = v43;
      v164 = v34;
      v175 = v36;
      v188 = v28;
      v202 = v29;
      v234 = v22;
      v251 = v23;
      v290 = v17;
      v270 = v16;
      v111 = v10;
      v112 = v11;
      v82 = 0;
      v113 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v113 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
        v5 = (WTF::StringImpl *)*a1;
        v82 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v112;
      v10 = v111;
      v23 = v251;
      v16 = v270;
      v17 = v290;
      v22 = v234;
      v28 = v188;
      v29 = v202;
      v34 = v164;
      v36 = v175;
      v41 = v146;
      v43 = v154;
      goto LABEL_95;
    }
    v45 = (unsigned __int8 *)v5 + v44;
    v46 = (uint64_t)v5 + v44 + 1;
    a1[2] = v46;
    if (!v5)
    {
      v82 = v4;
      goto LABEL_95;
    }
    v47 = *v45;
    if (v47 < 2)
    {
      v48 = 0;
      v49 = 1;
      goto LABEL_44;
    }
LABEL_97:
    *a1 = 0;
    a1[1] = 0;
    v84 = a1[3];
    if (!v84)
    {
      v50 = 0;
      v85 = 0;
      v5 = 0;
      v48 = 1;
      goto LABEL_99;
    }
    v139 = v41;
    v147 = v43;
    v156 = v34;
    v167 = v36;
    v179 = v28;
    v193 = v29;
    v224 = v22;
    v241 = v23;
    v280 = v17;
    v260 = v16;
    v212 = v10;
    v97 = v11;
    if (!v4)
    {
      v50 = 0;
      v85 = 0;
      v5 = 0;
      v48 = 1;
LABEL_99:
      *a1 = 0;
      a1[1] = 0;
      v86 = a1[3];
      if (v86)
      {
        v131 = v48;
        v136 = v50;
        v143 = v41;
        v151 = v43;
        v161 = v34;
        v172 = v36;
        v185 = v28;
        v199 = v29;
        v231 = v22;
        v248 = v23;
        v287 = v17;
        v267 = v16;
        v219 = v10;
        v102 = v11;
        if (v85)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v86 + 16))(v86, v5, v85);
          v54 = 0;
          v5 = (WTF::StringImpl *)*a1;
          v4 = a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v54 = 0;
        }
        v11 = v102;
        v10 = v219;
        v22 = v231;
        v23 = v248;
        v16 = v267;
        v17 = v287;
        v28 = v185;
        v29 = v199;
        v34 = v161;
        v36 = v172;
        v41 = v143;
        v43 = v151;
        v48 = v131;
        v50 = v136;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v54 = 0;
      }
      goto LABEL_101;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v84 + 16))(v84, v5);
    v49 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v48 = 1;
    v46 = a1[2];
    v11 = v97;
    v10 = v212;
    v22 = v224;
    v23 = v241;
    v16 = v260;
    v17 = v280;
    v28 = v179;
    v29 = v193;
    v34 = v156;
    v36 = v167;
    v41 = v139;
    v43 = v147;
LABEL_44:
    if (v47)
      v50 = v49;
    else
      v50 = 0;
    v51 = v46 - (_QWORD)v5;
    if (v4 <= v51)
    {
      v133 = v48;
      v138 = v50;
      v145 = v41;
      v153 = v43;
      v163 = v34;
      v174 = v36;
      v187 = v28;
      v201 = v29;
      v233 = v22;
      v250 = v23;
      v289 = v17;
      v269 = v16;
      v108 = v10;
      v109 = v11;
      v85 = 0;
      v110 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v110 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
        v5 = (WTF::StringImpl *)*a1;
        v85 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      v11 = v109;
      v10 = v108;
      v23 = v250;
      v16 = v269;
      v17 = v289;
      v22 = v233;
      v28 = v187;
      v29 = v201;
      v34 = v163;
      v36 = v174;
      v41 = v145;
      v43 = v153;
      v48 = v133;
      v50 = v138;
      goto LABEL_99;
    }
    v52 = (unsigned __int8 *)v5 + v51;
    v53 = (uint64_t)v5 + v51 + 1;
    a1[2] = v53;
    if (!v5)
    {
      v85 = v4;
      goto LABEL_99;
    }
    v54 = *v52;
    if (v54 < 2)
    {
      v55 = 0;
      v56 = 1;
      goto LABEL_51;
    }
LABEL_101:
    *a1 = 0;
    a1[1] = 0;
    v87 = a1[3];
    if (!v87)
    {
      v57 = 0;
      v88 = 0;
      v5 = 0;
      v55 = 1;
      goto LABEL_103;
    }
    v129 = v48;
    v134 = v50;
    v140 = v41;
    v148 = v43;
    v157 = v34;
    v168 = v36;
    v180 = v28;
    v194 = v29;
    v226 = v22;
    v243 = v23;
    v282 = v17;
    v262 = v16;
    v214 = v10;
    v126 = v11;
    if (!v4)
    {
      v57 = 0;
      v88 = 0;
      v5 = 0;
      v55 = 1;
LABEL_163:
      v11 = v126;
      v10 = v214;
      v22 = v226;
      v23 = v243;
      v16 = v262;
      v17 = v282;
      v28 = v180;
      v29 = v194;
      v34 = v157;
      v36 = v168;
      v41 = v140;
      v43 = v148;
      v48 = v129;
      v50 = v134;
      goto LABEL_103;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v87 + 16))(v87, v5);
    v56 = 0;
    v5 = (WTF::StringImpl *)*a1;
    v4 = a1[1];
    v55 = 1;
    v53 = a1[2];
    v11 = v126;
    v10 = v214;
    v22 = v226;
    v23 = v243;
    v16 = v262;
    v17 = v282;
    v28 = v180;
    v29 = v194;
    v34 = v157;
    v36 = v168;
    v41 = v140;
    v43 = v148;
    v48 = v129;
    v50 = v134;
LABEL_51:
    if (v54)
      v57 = v56;
    else
      v57 = 0;
    v58 = v53 - (_QWORD)v5;
    if (v4 <= v58)
    {
      v129 = v48;
      v134 = v50;
      v140 = v41;
      v148 = v43;
      v157 = v34;
      v168 = v36;
      v180 = v28;
      v194 = v29;
      v226 = v22;
      v243 = v23;
      v282 = v17;
      v262 = v16;
      v214 = v10;
      v126 = v11;
      v88 = 0;
      v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v107 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
        v5 = (WTF::StringImpl *)*a1;
        v88 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_163;
    }
    v59 = (unsigned __int8 *)v5 + v58;
    a1[2] = (uint64_t)(v59 + 1);
    if (!v5)
      break;
    v60 = *v59;
    if (v60 > 1)
      goto LABEL_105;
    result = 0;
    v62 = v60 != 0;
LABEL_58:
    if (v296)
    {
      v63 = v295;
      v295 = 0;
      if (!v10 && !v16 && !v22 && !v28 && !v34 && !v41 && !v48 && !v55 && !(_DWORD)result)
      {
        *(_QWORD *)a2 = v63;
        *(_QWORD *)(a2 + 8) = v11;
        *(_BYTE *)(a2 + 16) = v17;
        *(_BYTE *)(a2 + 17) = v23;
        *(_BYTE *)(a2 + 18) = v29;
        *(_BYTE *)(a2 + 19) = v36;
        *(_BYTE *)(a2 + 20) = v43;
        *(_BYTE *)(a2 + 21) = v50;
        *(_BYTE *)(a2 + 22) = v57;
        *(_BYTE *)(a2 + 23) = v62;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
    }
    __break(1u);
  }
  v88 = v4;
LABEL_103:
  *a1 = 0;
  a1[1] = 0;
  v89 = a1[3];
  if (v89)
  {
    v128 = v55;
    v132 = v48;
    v137 = v50;
    v144 = v41;
    v152 = v43;
    v162 = v34;
    v173 = v36;
    v186 = v28;
    v200 = v29;
    v232 = v22;
    v249 = v23;
    v288 = v17;
    v268 = v16;
    v220 = v10;
    v103 = v11;
    if (v88)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v89 + 16))(v89, v5, v88);
      v5 = (WTF::StringImpl *)*a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    v11 = v103;
    v10 = v220;
    v22 = v232;
    v23 = v249;
    v16 = v268;
    v17 = v288;
    v28 = v186;
    v29 = v200;
    v34 = v162;
    v36 = v173;
    v41 = v144;
    v43 = v152;
    v48 = v132;
    v50 = v137;
    v55 = v128;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_105:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v4)
    {
      v130 = v48;
      v135 = v50;
      v141 = v41;
      v149 = v43;
      v158 = v34;
      v169 = v36;
      v182 = v28;
      v196 = v29;
      v228 = v22;
      v245 = v23;
      v284 = v17;
      v264 = v16;
      v216 = v10;
      v127 = v11;
      result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
      v11 = v127;
      v10 = v216;
      v22 = v228;
      v23 = v245;
      v16 = v264;
      v17 = v284;
      v28 = v182;
      v29 = v196;
      v34 = v158;
      v36 = v169;
      v41 = v141;
      v43 = v149;
      v48 = v130;
      v50 = v135;
      if (*a1)
      {
        v62 = 0;
        result = 1;
        goto LABEL_58;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v296)
  {
    result = v295;
    v295 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196EA5FA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 - 40))
  {
    v4 = *(WTF::StringImpl **)(v2 - 48);
    *(_QWORD *)(v2 - 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 4);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 6);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 11);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformTimeRanges>,void>::encode<IPC::Encoder,std::optional<WebCore::PlatformTimeRanges> const&>(a1, (uint64_t)(v2 + 12));
  v4 = *((_BYTE *)v2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 121);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 122);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)v2 + 31);
  v7 = v2[17];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[18];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = v2[19];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = v2[20];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = v2[21];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  IPC::ArgumentCoder<std::optional<WebCore::VideoPlaybackQualityMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoPlaybackQualityMetrics> const&>(a1, (uint64_t)(v2 + 22));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)v2 + 216);
  LOBYTE(v11) = *((_BYTE *)v2 + 218);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 219);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 220);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 221);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 222);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 223);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v11) = *((_BYTE *)v2 + 224);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v2) = *((_BYTE *)v2 + 225);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  int v20;
  char v21;
  BOOL v22;
  int v23;
  char v24;
  BOOL v25;
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  char v83;
  char v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  char v90;
  char v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  char v97;
  char v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  char v104;
  char v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  char v111;
  char v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  char v118;
  char v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  char v125;
  char v126;
  unint64_t v127;
  char *v128;
  unsigned int v129;
  int v130;
  BOOL v131;
  int v132;
  int v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF *v136;
  __int128 v137;
  __int128 v138;
  WTF *result;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  int v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  int v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  uint64_t v176;
  int v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  char v182;
  int v183;
  char v184;
  uint64_t v185;
  char v186;
  int v187;
  char v188;
  int v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  char v194;
  int v195;
  char v196;
  uint64_t v197;
  int v198;
  char v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  char v203;
  int v204;
  uint64_t v205;
  int v206;
  int v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  int v212;
  char v213;
  int v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  char v219;
  int v220;
  char v221;
  int v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  char v227;
  int v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  char v239;
  char v240;
  char v241;
  char v242;
  char v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  char v287;
  int v288;
  char i;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  unint64_t v296;
  char v297;
  char v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  char v305;
  int v306;
  int v307;
  int v308;
  int v309;
  WTF *v310;
  _BYTE v311[32];
  __int128 v312;
  _BYTE v313[29];
  WTF::StringImpl *v314;
  char v315;
  WTF::StringImpl *v316;
  char v317;
  _QWORD v318[2];
  char v319;
  _QWORD v320[2];
  char v321;
  _QWORD v322[2];
  char v323;
  _QWORD v324[2];
  char v325;
  _QWORD v326[2];
  char v327;
  _OWORD v328[2];
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v326);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v324);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v322);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v320);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v318);
  IPC::Decoder::decode<WTF::String>(a1, &v316);
  IPC::Decoder::decode<WTF::String>(a1, &v314);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_9;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v10 = v5;
    v11 = 0;
LABEL_9:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v6);
    goto LABEL_11;
  }
  if (!v9)
  {
    v310 = 0;
    v309 = 0;
    v288 = 1;
    goto LABEL_13;
  }
  IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)v311);
  if (v311[16])
  {
    v288 = 0;
    v309 = 0;
    v2 = *(_QWORD *)&v311[8];
    v310 = *(WTF **)v311;
    goto LABEL_13;
  }
LABEL_11:
  v15 = *a1;
  v16 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  v310 = 0;
  v309 = 1;
LABEL_13:
  *(_WORD *)v311 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v311);
  v18 = v311[0];
  if (v311[1])
    v19 = v311[0] > 6u;
  else
    v19 = 1;
  v20 = v19;
  v308 = v20;
  if (v20 == 1)
  {
    v42 = *a1;
    v43 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
    v18 = 0;
  }
  v298 = v18;
  *(_WORD *)v311 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v311);
  v21 = v311[0];
  if (v311[1])
    v22 = v311[0] > 4u;
  else
    v22 = 1;
  v23 = v22;
  v307 = v23;
  if (v23 == 1)
  {
    v45 = *a1;
    v46 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
    v21 = 0;
  }
  v297 = v21;
  *(_WORD *)v311 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v311);
  v24 = v311[0];
  if (v311[1])
    v25 = v311[0] > 2u;
  else
    v25 = 1;
  v26 = v25;
  v306 = v26;
  if (v26 == 1)
  {
    v48 = *a1;
    v49 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50 && v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
    v24 = 0;
  }
  v296 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
  v305 = v27;
  v28 = a1[1];
  v29 = *a1;
  v30 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  v295 = v24;
  if (v28 < v30 || v28 - v30 <= 7)
  {
    v51 = 0;
    v52 = 0;
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        v52 = *a1;
        v51 = a1[1];
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
    }
  }
  else
  {
    v31 = (uint64_t *)(v29 + v30);
    a1[2] = (uint64_t)(v31 + 1);
    if (v29)
    {
      v304 = 0;
      v294 = *v31;
      goto LABEL_38;
    }
    v51 = v28;
    v52 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v54 = a1[3];
  if (v54 && v51)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
    v294 = 0;
    v29 = *a1;
    v28 = a1[1];
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v294 = 0;
  }
  v304 = 1;
LABEL_38:
  v32 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v29;
  if (v28 < v32 || v28 - v32 <= 7)
  {
    v55 = 0;
    v56 = 0;
    *a1 = 0;
    a1[1] = 0;
    v57 = a1[3];
    if (v57)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        v56 = *a1;
        v55 = a1[1];
      }
      else
      {
        v55 = 0;
        v56 = 0;
      }
    }
  }
  else
  {
    v33 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v33 + 1);
    if (v29)
    {
      v303 = 0;
      v293 = *v33;
      goto LABEL_42;
    }
    v55 = v28;
    v56 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v58 = a1[3];
  if (v58 && v55)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56, v55);
    v293 = 0;
    v29 = *a1;
    v28 = a1[1];
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v293 = 0;
  }
  v303 = 1;
LABEL_42:
  v34 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v29;
  if (v28 < v34 || v28 - v34 <= 7)
  {
    v59 = 0;
    v60 = 0;
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (v61)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
        v60 = *a1;
        v59 = a1[1];
      }
      else
      {
        v59 = 0;
        v60 = 0;
      }
    }
  }
  else
  {
    v35 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v35 + 1);
    if (v29)
    {
      v302 = 0;
      v292 = *v35;
      goto LABEL_46;
    }
    v59 = v28;
    v60 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v62 = a1[3];
  if (v62 && v59)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60, v59);
    v292 = 0;
    v29 = *a1;
    v28 = a1[1];
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v292 = 0;
  }
  v302 = 1;
LABEL_46:
  v36 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v29;
  if (v28 < v36 || v28 - v36 <= 7)
  {
    v63 = 0;
    v64 = 0;
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
        v64 = *a1;
        v63 = a1[1];
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
    }
  }
  else
  {
    v37 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v37 + 1);
    if (v29)
    {
      v301 = 0;
      v291 = *v37;
      goto LABEL_50;
    }
    v63 = v28;
    v64 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v66 = a1[3];
  if (v66 && v63)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v63);
    v291 = 0;
    v29 = *a1;
    v28 = a1[1];
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v291 = 0;
  }
  v301 = 1;
LABEL_50:
  v38 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v29;
  if (v28 < v38 || v28 - v38 <= 7)
  {
    v67 = 0;
    v68 = 0;
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
        v68 = *a1;
        v67 = a1[1];
      }
      else
      {
        v67 = 0;
        v68 = 0;
      }
    }
  }
  else
  {
    v39 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v39 + 1);
    if (v29)
    {
      v300 = 0;
      v290 = *v39;
      goto LABEL_54;
    }
    v67 = v28;
    v68 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v70 = a1[3];
  if (!v70 || !v67)
  {
    v29 = 0;
    v290 = 0;
    v28 = 0;
    v300 = 1;
LABEL_88:
    *a1 = 0;
    a1[1] = 0;
    v71 = a1[3];
    if (v71)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v29);
        v72 = *a1;
        v28 = a1[1];
      }
      else
      {
        v72 = 0;
      }
    }
    else
    {
      v72 = 0;
      v28 = 0;
    }
    goto LABEL_90;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v68, v67);
  v290 = 0;
  v29 = *a1;
  v28 = a1[1];
  v300 = 1;
LABEL_54:
  if (v28 <= a1[2] - v29)
    goto LABEL_88;
  v40 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v40 + 1);
  if (!v29)
  {
    v72 = 0;
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (v73)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v72);
        v29 = *a1;
        v28 = a1[1];
      }
      else
      {
        v29 = 0;
      }
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
LABEL_92:
    *a1 = 0;
    a1[1] = 0;
    v74 = a1[3];
    if (v74 && v28)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v29);
    goto LABEL_93;
  }
  v41 = *v40;
  if (v41 >= 2)
    goto LABEL_92;
  if (v41)
  {
    IPC::Decoder::decode<WebCore::VideoPlaybackQualityMetrics>(a1, (uint64_t)v311);
    if ((_BYTE)v312)
    {
      v299 = 0;
      i = v311[0];
      v328[0] = *(_OWORD *)&v311[1];
      *(_OWORD *)((char *)v328 + 15) = *(_OWORD *)&v311[16];
      v287 = 1;
      goto LABEL_95;
    }
LABEL_93:
    v75 = (char *)*a1;
    v76 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v77 = a1[3];
    if (v77)
      goto LABEL_196;
    goto LABEL_94;
  }
  v299 = 0;
  v287 = 0;
  for (i = 0; ; i = 0)
  {
LABEL_95:
    v77 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v76 = a1[1];
    v75 = (char *)*a1;
    v78 = a1[2] - *a1;
    if (v76 <= v78)
    {
      v140 = 0;
      v141 = 0;
      *a1 = 0;
      a1[1] = 0;
      v142 = a1[3];
      if (v142)
      {
        v192 = v77;
        if (v76)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v142 + 16))(a1[3]);
          v141 = *a1;
          v140 = a1[1];
        }
        else
        {
          v140 = 0;
          v141 = 0;
        }
        v77 = v192;
      }
      goto LABEL_199;
    }
    v79 = &v75[v78];
    v80 = (uint64_t)&v75[v78 + 1];
    a1[2] = v80;
    if (!v75)
    {
      v140 = v76;
      v141 = 0;
LABEL_199:
      *a1 = 0;
      a1[1] = 0;
      v143 = a1[3];
      if (v143)
      {
        v173 = v77;
        if (v140)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(a1[3], v141, v140);
          v81 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v81 = 0;
        }
        v77 = v173;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v81 = 0;
      }
      goto LABEL_201;
    }
    v81 = *v79;
    if (v81 < 2)
    {
      v82 = 0;
      v83 = 1;
      goto LABEL_99;
    }
LABEL_201:
    *a1 = 0;
    a1[1] = 0;
    v144 = a1[3];
    if (!v144)
    {
      v84 = 0;
      v75 = 0;
      v82 = 1;
      goto LABEL_203;
    }
    v159 = v77;
    if (!v76)
    {
      v84 = 0;
      v144 = 0;
      v75 = 0;
      v82 = 1;
LABEL_203:
      *a1 = 0;
      a1[1] = 0;
      v145 = a1[3];
      if (v145)
      {
        v177 = v82;
        v178 = v84;
        v179 = v77;
        if (v144)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v145 + 16))(a1[3], v75, v144);
          v88 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v88 = 0;
        }
        v77 = v179;
        v84 = v178;
        v82 = v177;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v88 = 0;
      }
      goto LABEL_205;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v144 + 16))(a1[3], v75);
    v83 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v82 = 1;
    v80 = a1[2];
    v77 = v159;
LABEL_99:
    if (v81)
      v84 = v83;
    else
      v84 = 0;
    v85 = v80 - (_QWORD)v75;
    if (v76 <= v85)
    {
      v232 = v82;
      v233 = v84;
      v234 = v77;
      v144 = 0;
      v235 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v235 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 16))(v235);
        v75 = (char *)*a1;
        v144 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      v77 = v234;
      v84 = v233;
      v82 = v232;
      goto LABEL_203;
    }
    v86 = &v75[v85];
    v87 = (uint64_t)&v75[v85 + 1];
    a1[2] = v87;
    if (!v75)
    {
      v144 = v76;
      goto LABEL_203;
    }
    v88 = *v86;
    if (v88 < 2)
    {
      v89 = 0;
      v90 = 1;
      goto LABEL_106;
    }
LABEL_205:
    *a1 = 0;
    a1[1] = 0;
    v146 = a1[3];
    if (!v146)
    {
      v91 = 0;
      v75 = 0;
      v89 = 1;
      goto LABEL_207;
    }
    v160 = v82;
    v161 = v84;
    v162 = v77;
    if (!v76)
    {
      v91 = 0;
      v146 = 0;
      v75 = 0;
      v89 = 1;
LABEL_207:
      *a1 = 0;
      a1[1] = 0;
      v147 = a1[3];
      if (v147)
      {
        v181 = v89;
        v182 = v91;
        v183 = v82;
        v184 = v84;
        v185 = v77;
        if (v146)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v147 + 16))(a1[3], v75, v146);
          v95 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v95 = 0;
        }
        v77 = v185;
        v84 = v184;
        v82 = v183;
        v91 = v182;
        v89 = v181;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v95 = 0;
      }
      goto LABEL_209;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v146 + 16))(a1[3], v75);
    v90 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v89 = 1;
    v87 = a1[2];
    v77 = v162;
    v84 = v161;
    v82 = v160;
LABEL_106:
    if (v88)
      v91 = v90;
    else
      v91 = 0;
    v92 = v87 - (_QWORD)v75;
    if (v76 <= v92)
    {
      v226 = v89;
      v227 = v91;
      v228 = v82;
      v229 = v84;
      v230 = v77;
      v146 = 0;
      v231 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v231 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v231 + 16))(v231);
        v75 = (char *)*a1;
        v146 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      v77 = v230;
      v84 = v229;
      v82 = v228;
      v91 = v227;
      v89 = v226;
      goto LABEL_207;
    }
    v93 = &v75[v92];
    v94 = (uint64_t)&v75[v92 + 1];
    a1[2] = v94;
    if (!v75)
    {
      v146 = v76;
      goto LABEL_207;
    }
    v95 = *v93;
    if (v95 < 2)
    {
      v96 = 0;
      v97 = 1;
      goto LABEL_113;
    }
LABEL_209:
    *a1 = 0;
    a1[1] = 0;
    v148 = a1[3];
    if (!v148)
    {
      v98 = 0;
      v75 = 0;
      v96 = 1;
      goto LABEL_211;
    }
    v163 = v89;
    v164 = v91;
    v165 = v82;
    v166 = v84;
    v167 = v77;
    if (!v76)
    {
      v98 = 0;
      v148 = 0;
      v75 = 0;
      v96 = 1;
LABEL_211:
      *a1 = 0;
      a1[1] = 0;
      v149 = a1[3];
      if (v149)
      {
        v280 = v96;
        v186 = v98;
        v187 = v89;
        v188 = v91;
        v189 = v82;
        v190 = v84;
        v191 = v77;
        if (v148)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v149 + 16))(v149, v75, v148);
          v102 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v102 = 0;
        }
        v77 = v191;
        v84 = v190;
        v82 = v189;
        v91 = v188;
        v89 = v187;
        v98 = v186;
        v96 = v280;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v102 = 0;
      }
      goto LABEL_213;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v148 + 16))(a1[3], v75);
    v97 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v96 = 1;
    v94 = a1[2];
    v77 = v167;
    v84 = v166;
    v82 = v165;
    v91 = v164;
    v89 = v163;
LABEL_113:
    if (v95)
      v98 = v97;
    else
      v98 = 0;
    v99 = v94 - (_QWORD)v75;
    if (v76 <= v99)
    {
      v218 = v96;
      v219 = v98;
      v220 = v89;
      v221 = v91;
      v222 = v82;
      v223 = v84;
      v224 = v77;
      v148 = 0;
      v225 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v225 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v225 + 16))(v225);
        v75 = (char *)*a1;
        v148 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      v77 = v224;
      v84 = v223;
      v82 = v222;
      v91 = v221;
      v89 = v220;
      v98 = v219;
      v96 = v218;
      goto LABEL_211;
    }
    v100 = &v75[v99];
    v101 = (uint64_t)&v75[v99 + 1];
    a1[2] = v101;
    if (!v75)
    {
      v148 = v76;
      goto LABEL_211;
    }
    v102 = *v100;
    if (v102 < 2)
    {
      v103 = 0;
      v104 = 1;
      goto LABEL_120;
    }
LABEL_213:
    *a1 = 0;
    a1[1] = 0;
    v150 = a1[3];
    if (!v150)
    {
      v105 = 0;
      v75 = 0;
      v103 = 1;
      goto LABEL_215;
    }
    v267 = v98;
    v276 = v96;
    v168 = v89;
    v169 = v91;
    v170 = v82;
    v171 = v84;
    v172 = v77;
    if (!v76)
    {
      v105 = 0;
      v150 = 0;
      v75 = 0;
      v103 = 1;
LABEL_215:
      *a1 = 0;
      a1[1] = 0;
      v151 = a1[3];
      if (v151)
      {
        v272 = v98;
        v282 = v96;
        v193 = v89;
        v194 = v91;
        v195 = v82;
        v196 = v84;
        v197 = v77;
        if (v150)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v151 + 16))(v151, v75, v150);
          v109 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v109 = 0;
        }
        v77 = v197;
        v84 = v196;
        v82 = v195;
        v91 = v194;
        v89 = v193;
        v98 = v272;
        v96 = v282;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v109 = 0;
      }
      goto LABEL_217;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v150 + 16))(v150, v75);
    v104 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v103 = 1;
    v101 = a1[2];
    v77 = v172;
    v84 = v171;
    v82 = v170;
    v91 = v169;
    v89 = v168;
    v98 = v267;
    v96 = v276;
LABEL_120:
    if (v102)
      v105 = v104;
    else
      v105 = 0;
    v106 = v101 - (_QWORD)v75;
    if (v76 <= v106)
    {
      v286 = v96;
      v211 = v98;
      v212 = v89;
      v213 = v91;
      v214 = v82;
      v215 = v84;
      v216 = v77;
      v150 = 0;
      v217 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v217 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v217 + 16))(v217);
        v75 = (char *)*a1;
        v150 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      v77 = v216;
      v84 = v215;
      v82 = v214;
      v91 = v213;
      v89 = v212;
      v98 = v211;
      v96 = v286;
      goto LABEL_215;
    }
    v107 = &v75[v106];
    v108 = (uint64_t)&v75[v106 + 1];
    a1[2] = v108;
    if (!v75)
    {
      v150 = v76;
      goto LABEL_215;
    }
    v109 = *v107;
    if (v109 < 2)
    {
      v110 = 0;
      v111 = 1;
      goto LABEL_127;
    }
LABEL_217:
    *a1 = 0;
    a1[1] = 0;
    v152 = a1[3];
    if (!v152)
    {
      v112 = 0;
      v75 = 0;
      v110 = 1;
      goto LABEL_219;
    }
    v264 = v105;
    v268 = v98;
    v277 = v96;
    v249 = v89;
    v256 = v91;
    v174 = v82;
    v175 = v84;
    v176 = v77;
    if (!v76)
    {
      v112 = 0;
      v152 = 0;
      v75 = 0;
      v110 = 1;
      goto LABEL_326;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v152 + 16))(v152, v75);
    v111 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v110 = 1;
    v108 = a1[2];
    v77 = v176;
    v84 = v175;
    v82 = v174;
    v89 = v249;
    v91 = v256;
    v98 = v268;
    v96 = v277;
LABEL_127:
    if (v109)
      v112 = v111;
    else
      v112 = 0;
    v113 = v108 - (_QWORD)v75;
    if (v76 <= v113)
    {
      v264 = v105;
      v268 = v98;
      v277 = v96;
      v206 = v89;
      v263 = v91;
      v207 = v82;
      v208 = v84;
      v209 = v77;
      v152 = 0;
      v210 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v210 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v210 + 16))(v210);
        v75 = (char *)*a1;
        v152 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      v77 = v209;
      v84 = v208;
      v82 = v207;
      v91 = v263;
      v89 = v206;
LABEL_326:
      v98 = v268;
      v96 = v277;
      v105 = v264;
LABEL_219:
      *a1 = 0;
      a1[1] = 0;
      v153 = a1[3];
      if (v153)
      {
        v273 = v98;
        v283 = v96;
        v253 = v89;
        v260 = v91;
        v198 = v82;
        v199 = v84;
        v200 = v77;
        if (v152)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v153 + 16))(v153, v75, v152);
          v116 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v116 = 0;
        }
        v77 = v200;
        v84 = v199;
        v82 = v198;
        v89 = v253;
        v91 = v260;
        v98 = v273;
        v96 = v283;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v116 = 0;
      }
      goto LABEL_221;
    }
    v114 = &v75[v113];
    v115 = (uint64_t)&v75[v113 + 1];
    a1[2] = v115;
    if (!v75)
    {
      v152 = v76;
      goto LABEL_219;
    }
    v116 = *v114;
    if (v116 < 2)
    {
      v117 = 0;
      v118 = 1;
      goto LABEL_134;
    }
LABEL_221:
    *a1 = 0;
    a1[1] = 0;
    v154 = a1[3];
    if (!v154)
    {
      v119 = 0;
      v75 = 0;
      v117 = 1;
      goto LABEL_223;
    }
    v265 = v105;
    v269 = v98;
    v278 = v96;
    v250 = v89;
    v257 = v91;
    v239 = v84;
    v244 = v82;
    v180 = v77;
    if (!v76)
    {
      v119 = 0;
      v154 = 0;
      v75 = 0;
      v117 = 1;
      goto LABEL_321;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v154 + 16))(v154, v75);
    v118 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v117 = 1;
    v115 = a1[2];
    v77 = v180;
    v84 = v239;
    v82 = v244;
    v89 = v250;
    v91 = v257;
    v98 = v269;
    v96 = v278;
LABEL_134:
    if (v116)
      v119 = v118;
    else
      v119 = 0;
    v120 = v115 - (_QWORD)v75;
    if (v76 <= v120)
    {
      v265 = v105;
      v269 = v98;
      v278 = v96;
      v250 = v89;
      v257 = v91;
      v244 = v82;
      v203 = v84;
      v204 = v77;
      v154 = 0;
      v205 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v205 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v205 + 16))(v205);
        v75 = (char *)*a1;
        v154 = a1[1];
      }
      else
      {
        v75 = 0;
      }
      LODWORD(v77) = v204;
      v84 = v203;
LABEL_321:
      v82 = v244;
      v89 = v250;
      v91 = v257;
      v105 = v265;
      v98 = v269;
      v96 = v278;
LABEL_223:
      *a1 = 0;
      a1[1] = 0;
      v155 = a1[3];
      if (v155)
      {
        v274 = v98;
        v284 = v96;
        v254 = v89;
        v261 = v91;
        v242 = v84;
        v247 = v82;
        v201 = v77;
        if (v154)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v155 + 16))(v155, v75, v154);
          v123 = 0;
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v123 = 0;
        }
        LODWORD(v77) = v201;
        v84 = v242;
        v82 = v247;
        v89 = v254;
        v91 = v261;
        v98 = v274;
        v96 = v284;
      }
      else
      {
        v76 = 0;
        v75 = 0;
        v123 = 0;
      }
      goto LABEL_225;
    }
    v121 = &v75[v120];
    v122 = (uint64_t)&v75[v120 + 1];
    a1[2] = v122;
    if (!v75)
    {
      v154 = v76;
      goto LABEL_223;
    }
    v123 = *v121;
    if (v123 < 2)
    {
      v124 = 0;
      v125 = 1;
      goto LABEL_141;
    }
LABEL_225:
    *a1 = 0;
    a1[1] = 0;
    v156 = a1[3];
    if (!v156)
    {
      v126 = 0;
      v75 = 0;
      v124 = 1;
      goto LABEL_227;
    }
    v266 = v105;
    v270 = v98;
    v279 = v96;
    v251 = v89;
    v258 = v91;
    v240 = v84;
    v245 = v82;
    v236 = v77;
    if (!v76)
    {
      v126 = 0;
      v156 = 0;
      v75 = 0;
      v124 = 1;
      goto LABEL_316;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v156 + 16))(v156, v75);
    v125 = 0;
    v75 = (char *)*a1;
    v76 = a1[1];
    v124 = 1;
    v122 = a1[2];
    v77 = v236;
    v84 = v240;
    v82 = v245;
    v89 = v251;
    v91 = v258;
    v98 = v270;
    v96 = v279;
LABEL_141:
    if (v123)
      v126 = v125;
    else
      v126 = 0;
    v127 = v122 - (_QWORD)v75;
    if (v76 <= v127)
    {
      v266 = v105;
      v270 = v98;
      v279 = v96;
      v251 = v89;
      v258 = v91;
      v240 = v84;
      v245 = v82;
      v236 = v77;
      v156 = 0;
      v202 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v202 && v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v202 + 16))(v202);
        v75 = (char *)*a1;
        v156 = a1[1];
      }
      else
      {
        v75 = 0;
      }
LABEL_316:
      LODWORD(v77) = v236;
      v84 = v240;
      v82 = v245;
      v89 = v251;
      v91 = v258;
      v105 = v266;
      v98 = v270;
      v96 = v279;
LABEL_227:
      *a1 = 0;
      a1[1] = 0;
      v157 = a1[3];
      if (v157)
      {
        v275 = v98;
        v285 = v96;
        v255 = v89;
        v262 = v91;
        v243 = v84;
        v248 = v82;
        v238 = v77;
        if (v156)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v157 + 16))(v157, v75, v156);
          v75 = (char *)*a1;
          v76 = a1[1];
        }
        else
        {
          v76 = 0;
          v75 = 0;
        }
        LODWORD(v77) = v238;
        v84 = v243;
        v82 = v248;
        v89 = v255;
        v91 = v262;
        v98 = v275;
        v96 = v285;
      }
      else
      {
        v76 = 0;
        v75 = 0;
      }
      goto LABEL_229;
    }
    v128 = &v75[v127];
    a1[2] = (uint64_t)(v128 + 1);
    if (!v75)
    {
      v156 = v76;
      goto LABEL_227;
    }
    v129 = *v128;
    if (v129 <= 1)
    {
      v130 = 0;
      v131 = v129 != 0;
      goto LABEL_148;
    }
LABEL_229:
    *a1 = 0;
    a1[1] = 0;
    v158 = a1[3];
    if (!v158)
      goto LABEL_230;
    if (!v76)
      goto LABEL_230;
    v271 = v98;
    v281 = v96;
    v252 = v89;
    v259 = v91;
    v241 = v84;
    v246 = v82;
    v237 = v77;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v158 + 16))(v158, v75);
    v77 = v237;
    v84 = v241;
    v82 = v246;
    v89 = v252;
    v91 = v259;
    v98 = v271;
    v96 = v281;
    if (!*a1)
    {
LABEL_230:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 232) = 0;
      v132 = v309;
      v133 = v288;
      result = v310;
      goto LABEL_181;
    }
    v131 = 0;
    v130 = 1;
LABEL_148:
    v132 = v309;
    v133 = v288;
    if (v327)
    {
      *(_QWORD *)v311 = v326[0];
      *(_QWORD *)&v311[5] = *(_QWORD *)((char *)v326 + 5);
      if (v325)
      {
        *(_QWORD *)&v311[16] = v324[0];
        *(_QWORD *)&v311[21] = *(_QWORD *)((char *)v324 + 5);
        if (v323)
        {
          *(_QWORD *)&v312 = v322[0];
          *(_QWORD *)((char *)&v312 + 5) = *(_QWORD *)((char *)v322 + 5);
          if (v321)
          {
            *(_QWORD *)v313 = v320[0];
            *(_QWORD *)&v313[5] = *(_QWORD *)((char *)v320 + 5);
            if (v319)
            {
              *(_QWORD *)&v313[16] = v318[0];
              *(_QWORD *)&v313[21] = *(_QWORD *)((char *)v318 + 5);
              if (v317)
              {
                v134 = v316;
                v316 = 0;
                if (v315)
                {
                  v135 = v314;
                  v314 = 0;
                  if (!v309)
                  {
                    v136 = (v288 & 1) != 0 ? v310 : 0;
                    if (!v308
                      && !v307
                      && !v306
                      && v305
                      && !v304
                      && !v303
                      && !v302
                      && !v301
                      && !v300
                      && !v299
                      && (v77 & 0xFF0000) != 0
                      && !v82
                      && !v89
                      && !v96
                      && !v103
                      && !v110
                      && !v117
                      && !v124
                      && !v130)
                    {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_196:
    if (v76)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v77 + 16))(v77, v75);
LABEL_94:
    v299 = 1;
  }
  v137 = *(_OWORD *)v313;
  *(_OWORD *)(a2 + 32) = v312;
  *(_OWORD *)(a2 + 48) = v137;
  *(_OWORD *)(a2 + 61) = *(_OWORD *)&v313[13];
  v138 = *(_OWORD *)&v311[16];
  *(_OWORD *)a2 = *(_OWORD *)v311;
  *(_OWORD *)(a2 + 16) = v138;
  *(_QWORD *)(a2 + 80) = v134;
  *(_QWORD *)(a2 + 88) = v135;
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if ((v288 & 1) == 0)
  {
    *(_QWORD *)(a2 + 96) = v310;
    *(_QWORD *)(a2 + 104) = v2;
    *(_BYTE *)(a2 + 112) = 1;
  }
  *(_BYTE *)(a2 + 120) = v298;
  *(_BYTE *)(a2 + 121) = v297;
  *(_BYTE *)(a2 + 122) = v295;
  *(_QWORD *)(a2 + 124) = v296;
  *(_QWORD *)(a2 + 136) = v294;
  *(_QWORD *)(a2 + 144) = v293;
  *(_QWORD *)(a2 + 152) = v292;
  *(_QWORD *)(a2 + 160) = v291;
  *(_QWORD *)(a2 + 168) = v290;
  *(_BYTE *)(a2 + 176) = i;
  *(_OWORD *)(a2 + 177) = v328[0];
  *(_OWORD *)(a2 + 192) = *(_OWORD *)((char *)v328 + 15);
  *(_BYTE *)(a2 + 208) = v287;
  *(_WORD *)(a2 + 216) = v77;
  *(_BYTE *)(a2 + 218) = v84;
  *(_BYTE *)(a2 + 219) = v91;
  *(_BYTE *)(a2 + 220) = v98;
  *(_BYTE *)(a2 + 221) = v105;
  *(_BYTE *)(a2 + 222) = v112;
  *(_BYTE *)(a2 + 223) = v119;
  *(_BYTE *)(a2 + 224) = v126;
  *(_BYTE *)(a2 + 225) = v131;
  result = v136;
  *(_BYTE *)(a2 + 232) = 1;
LABEL_181:
  if (((v133 | v132) & 1) == 0 && result)
    result = (WTF *)WTF::fastFree(result, v75);
  if (v315)
  {
    result = v314;
    v314 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v75);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v317)
  {
    result = v316;
    v316 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v75);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196EA797C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29,WTF *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,char a42,WTF::StringImpl *a43,char a44)
{
  if (((a14 | a29) & 1) == 0 && a30)
    WTF::fastFree(a30, a2);
  if (a42 && a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a44 && a43)
  {
    if (*(_DWORD *)a43 == 2)
      WTF::StringImpl::destroy(a43, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a43 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 2);
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOWORD(v5) = *((_WORD *)a2 + 17);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 9);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 11);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  return IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(a1, (char *)a2 + 48);
}

_QWORD *IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode(a1, (_QWORD *)a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (uint64_t *)(a2 + 16));
  v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4) = *(_BYTE *)(a2 + 32);
    a1[2] = v4 + 1;
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)(a2 + 34));
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)(a2 + 36));
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 44);
      a1[2] = v11;
    }
  }
  return IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(a1, (_BYTE *)(a2 + 48));
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  char i;
  char v11;
  int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[2];
  char v37;
  __int128 v38;
  char v39;

  IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v38);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v36);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_26;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v26 = v4;
    v27 = 0;
    goto LABEL_27;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_29;
  v9 = 0;
  for (i = 1; ; i = 0)
  {
    v11 = v8 ? i : 0;
    v12 = IPC::Decoder::decode<WebCore::VideoFrameRotation>(a1);
    v13 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1);
    v15 = v14;
    v16 = a1[1];
    v17 = *a1;
    v18 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v16 >= v18 && v16 - v18 > 3)
    {
      v20 = (_DWORD *)(v17 + v18);
      a1[2] = (uint64_t)(v20 + 1);
      if (v17)
      {
        v21 = 0;
        v22 = *v20 & 0xFFFFFF00;
        v23 = *v20;
        goto LABEL_15;
      }
      v31 = v16;
      v32 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v17, v16);
          v32 = *a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
    v22 = 0;
    v23 = 0;
    v21 = 1;
LABEL_15:
    result = IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>(a1);
    if (!*a1)
      break;
    if (v39)
    {
      if (v37)
      {
        *(_QWORD *)&v35 = v36[0];
        *(_QWORD *)((char *)&v35 + 5) = *(_QWORD *)((char *)v36 + 5);
        if (!v9 && (v12 & 0xFF0000) != 0 && v15 && !v21 && v25)
        {
          *(_OWORD *)a2 = v38;
          *(_OWORD *)(a2 + 16) = v35;
          *(_BYTE *)(a2 + 32) = v11;
          *(_WORD *)(a2 + 34) = v12;
          *(_QWORD *)(a2 + 36) = v13;
          *(_DWORD *)(a2 + 44) = v23 | v22;
          *(_QWORD *)(a2 + 48) = result;
          *(_BYTE *)(a2 + 56) = 1;
          return result;
        }
      }
    }
    __break(1u);
LABEL_26:
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a1;
        v26 = a1[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v26)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
      v8 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v5);
    }
    v9 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  __int16 v5;
  int v6;

  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (_QWORD *)a2);
  v4 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_WORD *)(a2 + 18);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v5;
  v6 = *(_DWORD *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>((char *)a1, a2 + 24, v6);
}

void IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  char i;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  _BYTE v20[16];
  int v21;
  _BYTE v22[16];
  int v23;
  char v24;
  _QWORD v25[2];
  char v26;
  char v27;

  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v25);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_20;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v13 = v4;
    v14 = 0;
    goto LABEL_21;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_23;
  v9 = 0;
  for (i = 1; ; i = 0)
  {
    if (v8)
      v11 = i;
    else
      v11 = 0;
    v12 = IPC::Decoder::decode<WebCore::VideoFrameRotation>(a1);
    IPC::Decoder::decode<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>(a1, (uint64_t)v22);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      goto LABEL_15;
    }
    if (v26)
    {
      *(_QWORD *)&v18 = v25[0];
      *(_QWORD *)((char *)&v18 + 5) = *(_QWORD *)((char *)v25 + 5);
      if (!v9)
      {
        LOBYTE(v19) = v11;
        if ((v12 & 0xFF0000) != 0)
        {
          HIWORD(v19) = v12;
          if (v24)
            break;
        }
      }
    }
    __break(1u);
LABEL_20:
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16 && v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
      v8 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v5);
    v9 = 1;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v20, (uint64_t)v22);
  *(_OWORD *)a2 = v18;
  *(_DWORD *)(a2 + 16) = v19;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 24, (uint64_t)v20);
  *(_BYTE *)(a2 + 48) = 1;
  if (v21 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v21])(&v27, v20);
LABEL_15:
  if (v24)
  {
    if (v23 != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v18, v22);
  }
}

void sub_196EA8150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, int a18, int a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a14])(v21 - 49, v20);
  if (a20)
  {
    if (a18 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a18])(&a9, &a16);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196EA8210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::encode(IPC::Encoder *a1, const char ***a2)
{
  const char ***v2;
  void *v4;
  void *v5;
  void *v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char **v10;
  uint64_t v11;

  v2 = a2;
  v8 = *a2;
  v9 = a2[1];
  v10 = 0;
  *a2 = 0;
  v11 = 0;
  a2[1] = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
  v8 = v2[2];
  v9 = v2[3];
  v10 = 0;
  v2[2] = 0;
  v11 = 0;
  v2[3] = 0;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v8);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v6);
  v7 = v2[4];
  v2 += 4;
  *v2 = 0;
  v8 = v7;
  v10 = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v2, 0);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v10);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, &v8);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
}

void sub_196EA8330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char **a9)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a9);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char **v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v27);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v24);
  if (!*a1)
    goto LABEL_12;
  if (!v29 || !v26)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (HIDWORD(v28) != v25)
  {
LABEL_12:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    goto LABEL_13;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v22);
  if (*a1)
  {
    if (v29)
    {
      v16[0] = v27;
      v7 = v28;
      v27 = 0;
      v28 = 0;
      v16[1] = v7;
      if (v26)
      {
        if (v23)
        {
          WebKit::MediaDeviceSandboxExtensions::MediaDeviceSandboxExtensions((uint64_t)&v17, (uint64_t)v16, &v24, (uint64_t *)&v22);
          v8 = v17;
          v17 = 0;
          *(_QWORD *)a3 = v8;
          v9 = v18;
          v18 = 0;
          *(_QWORD *)(a3 + 8) = v9;
          v10 = v19;
          v19 = 0;
          *(_QWORD *)(a3 + 16) = v10;
          v11 = v20;
          v20 = 0;
          *(_QWORD *)(a3 + 24) = v11;
          v12 = v21;
          v21 = 0;
          *(_QWORD *)(a3 + 32) = v12;
          *(_BYTE *)(a3 + 40) = 1;
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v13);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v14);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v15);
          goto LABEL_10;
        }
      }
    }
    goto LABEL_18;
  }
LABEL_19:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 40) = 0;
LABEL_10:
  if (v23)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
LABEL_13:
  if (v26)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v6);
  if (v29)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v6);
}

void sub_196EA84E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a21)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  if (*(_BYTE *)(v21 - 40))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 - 56, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  v4 = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 25);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unsigned __int8 *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;
  char v37;

  IPC::Decoder::decode<WTF::String>(a1, &v36);
  IPC::Decoder::decode<WTF::String>(a1, &v34);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v32);
  v5 = (unsigned __int8 *)a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if ((unint64_t)v5 <= v7)
    goto LABEL_29;
  v8 = (unsigned __int8 *)v6 + v7;
  v9 = v8 + 1;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v8 = v5;
    v18 = 0;
    goto LABEL_30;
  }
  LODWORD(v8) = *v8;
  if (v8 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (!v21 || (v28 = (int)v8, !v5))
    {
      v11 = 0;
      v22 = 0;
      v6 = 0;
      v10 = 1;
      goto LABEL_34;
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21, v6);
    v11 = 0;
    v6 = (WTF::StringImpl *)*a1;
    v5 = (unsigned __int8 *)a1[1];
    v10 = 1;
    v9 = (unsigned __int8 *)a1[2];
    LODWORD(v8) = v28;
LABEL_5:
    if (!(_DWORD)v8)
      v11 = 0;
    if ((unint64_t)v5 <= v9 - (unsigned __int8 *)v6)
      break;
    a1[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      v22 = (uint64_t)v5;
      goto LABEL_34;
    }
    v12 = *v9;
    if (v12 > 1)
      goto LABEL_36;
    v13 = 0;
    v14 = (v12 != 0) << 8;
LABEL_11:
    if (v37)
    {
      v15 = v36;
      v36 = 0;
      if (v35)
      {
        v16 = v34;
        v34 = 0;
        if (v33)
        {
          v17 = v32;
          v32 = 0;
          if (!v10 && !v13)
          {
            *(_QWORD *)a2 = v15;
            *(_QWORD *)(a2 + 8) = v16;
            *(_QWORD *)(a2 + 16) = v17;
            *(_WORD *)(a2 + 24) = v14 | v11;
            *(_BYTE *)(a2 + 32) = 1;
            goto LABEL_17;
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    v8 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a1;
        v8 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v8 = 0;
        v18 = 0;
      }
    }
LABEL_30:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v20 + 16))(v20, v18, v8);
        LODWORD(v8) = 0;
        v6 = (WTF::StringImpl *)*a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      LODWORD(v8) = 0;
    }
  }
  v27 = v10;
  v31 = v11;
  v22 = 0;
  v24 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v24 && v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v6 = (WTF::StringImpl *)*a1;
    v22 = a1[1];
  }
  else
  {
    v6 = 0;
  }
  v10 = v27;
  v11 = v31;
LABEL_34:
  *a1 = 0;
  a1[1] = 0;
  v23 = a1[3];
  if (v23)
  {
    v26 = v10;
    v30 = v11;
    if (v22)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v23 + 16))(v23, v6, v22);
      v6 = (WTF::StringImpl *)*a1;
      v5 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v10 = v26;
    v11 = v30;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_36:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v5)
    {
      v25 = v10;
      v29 = v11;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v6);
      v10 = v25;
      v11 = v29;
      if (*a1)
      {
        v14 = 0;
        v13 = 1;
        goto LABEL_11;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v33)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_17:
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v37)
  {
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196EA88BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (*(_BYTE *)(v14 - 24))
  {
    v16 = *(WTF::StringImpl **)(v14 - 32);
    *(_QWORD *)(v14 - 32) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::isValidEnum<WebCore::AuthenticatorTransport,void>(unsigned int a1)
{
  return a1 < 7;
}

WTF::StringImpl ****std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](WTF::StringImpl ****result, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  v2 = *result;
  *result = (WTF::StringImpl ***)a2;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
    return (WTF::StringImpl ****)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)(a1 + 24), 0);
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::RemoteMediaPlayerProxyConfiguration::RemoteMediaPlayerProxyConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *(_DWORD *)(a1 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = v8;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v9 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 48) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *(_DWORD *)(a1 + 56) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *(_DWORD *)(a1 + 60) = v9;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v10 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(a1 + 72) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = 0;
    *(_DWORD *)(a1 + 80) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = 0;
    *(_DWORD *)(a1 + 84) = v10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v11 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(a1 + 96) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 26);
    *((_DWORD *)a2 + 26) = 0;
    *(_DWORD *)(a1 + 104) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 27);
    *((_DWORD *)a2 + 27) = 0;
    *(_DWORD *)(a1 + 108) = v11;
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v12 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = 0;
    *(_DWORD *)(a1 + 128) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = 0;
    *(_DWORD *)(a1 + 132) = v12;
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v13 = a2[18];
    a2[18] = 0;
    *(_QWORD *)(a1 + 144) = v13;
    LODWORD(v13) = *((_DWORD *)a2 + 38);
    *((_DWORD *)a2 + 38) = 0;
    *(_DWORD *)(a1 + 152) = v13;
    LODWORD(v13) = *((_DWORD *)a2 + 39);
    *((_DWORD *)a2 + 39) = 0;
    *(_DWORD *)(a1 + 156) = v13;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v14 = a2[23];
  a2[23] = 0;
  *(_QWORD *)(a1 + 184) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = 0;
  *(_DWORD *)(a1 + 192) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 196) = v14;
  *(_QWORD *)(a1 + 208) = 0;
  v15 = a2[25];
  a2[25] = 0;
  *(_QWORD *)(a1 + 200) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = 0;
  *(_DWORD *)(a1 + 212) = v15;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 216, (uint64_t)(a2 + 27));
  v16 = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 262) = *(_OWORD *)((char *)a2 + 262);
  *(_OWORD *)(a1 + 248) = v16;
  return a1;
}

void sub_196EA8CD4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF **v9;
  WTF **v10;
  void *v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v12);
  if (*(_BYTE *)(v2 + 160))
  {
    v14 = *v10;
    if (*v10)
    {
      *(_QWORD *)(v2 + 144) = 0;
      *(_DWORD *)(v2 + 152) = 0;
      WTF::fastFree(v14, v13);
    }
  }
  if (*(_BYTE *)(v2 + 136))
  {
    v15 = *v9;
    if (*v9)
    {
      *(_QWORD *)(v2 + 120) = 0;
      *(_DWORD *)(v2 + 128) = 0;
      WTF::fastFree(v15, v13);
    }
  }
  if (*(_BYTE *)(v2 + 112))
  {
    v16 = *v8;
    if (*v8)
    {
      *(_QWORD *)(v2 + 96) = 0;
      *(_DWORD *)(v2 + 104) = 0;
      WTF::fastFree(v16, v13);
    }
  }
  if (*(_BYTE *)(v2 + 88))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v13);
  if (*(_BYTE *)(v2 + 64))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v13);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v13);
  v18 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration(WebKit::RemoteMediaPlayerProxyConfiguration *this, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v14, (char *)this + 216);
  *((_DWORD *)this + 60) = -1;
  WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 184, v4);
  if (*((_BYTE *)this + 160))
  {
    v6 = (WTF *)*((_QWORD *)this + 18);
    if (v6)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree(v6, v5);
    }
  }
  if (*((_BYTE *)this + 136))
  {
    v7 = (WTF *)*((_QWORD *)this + 15);
    if (v7)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      WTF::fastFree(v7, v5);
    }
  }
  if (*((_BYTE *)this + 112))
  {
    v8 = (WTF *)*((_QWORD *)this + 12);
    if (v8)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v8, v5);
    }
  }
  if (*((_BYTE *)this + 88))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v5);
  if (*((_BYTE *)this + 64))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v5);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v5);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
}

WebKit::NavigationActionData *WebKit::NavigationActionData::NavigationActionData(WebKit::NavigationActionData *this, const WebKit::NavigationActionData *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  const void *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  char v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  const void *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  const void *v24;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  v7 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 9) = v7;
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebKit::NavigationActionData *)((char *)this + 88), (const WebKit::NavigationActionData *)((char *)a2 + 88));
  v8 = (const void *)*((_QWORD *)a2 + 41);
  *((_QWORD *)this + 41) = v8;
  if (v8)
    CFRetain(v8);
  *((_BYTE *)this + 336) = *((_BYTE *)a2 + 336);
  v9 = *((_DWORD *)a2 + 86);
  *((_BYTE *)this + 348) = *((_BYTE *)a2 + 348);
  *((_DWORD *)this + 86) = v9;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 352, (uint64_t)a2 + 352);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 384, (uint64_t)a2 + 384);
  v10 = *((_OWORD *)a2 + 26);
  v11 = *((_OWORD *)a2 + 27);
  v12 = *((_OWORD *)a2 + 28);
  *((_WORD *)this + 232) = *((_WORD *)a2 + 232);
  *((_OWORD *)this + 27) = v11;
  *((_OWORD *)this + 28) = v12;
  *((_OWORD *)this + 26) = v10;
  v13 = (_DWORD *)*((_QWORD *)a2 + 59);
  if (v13)
    *v13 += 2;
  *((_QWORD *)this + 59) = v13;
  *((_DWORD *)this + 120) = *((_DWORD *)a2 + 120);
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 536) = 0;
  if (*((_BYTE *)a2 + 536))
  {
    std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>((uint64_t)this + 488, (uint64_t)a2 + 488);
    *((_BYTE *)this + 536) = 1;
  }
  *((_BYTE *)this + 544) = 0;
  *((_BYTE *)this + 856) = 0;
  if (*((_BYTE *)a2 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebKit::NavigationActionData *)((char *)this + 544), (const WebKit::NavigationActionData *)((char *)a2 + 544));
    *((_BYTE *)this + 856) = 1;
  }
  v14 = *((_BYTE *)a2 + 868);
  *((_DWORD *)this + 216) = *((_DWORD *)a2 + 216);
  *((_BYTE *)this + 868) = v14;
  *((_BYTE *)this + 872) = 0;
  *((_BYTE *)this + 1536) = 0;
  if (*((_BYTE *)a2 + 1536))
  {
    WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::NavigationActionData *)((char *)this + 872), (const WebKit::NavigationActionData *)((char *)a2 + 872));
    *((_BYTE *)this + 1536) = 1;
  }
  WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)this + 193, (const WebKit::NavigationActionData *)((char *)a2 + 1544));
  *((_OWORD *)this + 115) = *((_OWORD *)a2 + 115);
  WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)this + 232, (const WebKit::NavigationActionData *)((char *)a2 + 1856));
  *((_QWORD *)this + 269) = *((_QWORD *)a2 + 269);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebKit::NavigationActionData *)((char *)this + 2160), (const WebKit::NavigationActionData *)((char *)a2 + 2160));
  v15 = (_DWORD *)*((_QWORD *)a2 + 289);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 289) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 290);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 290) = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 291);
  if (v17)
    ++*v17;
  *((_QWORD *)this + 291) = v17;
  v18 = *((_QWORD *)a2 + 292);
  *((_BYTE *)this + 2344) = *((_BYTE *)a2 + 2344);
  *((_QWORD *)this + 292) = v18;
  v19 = (const void *)*((_QWORD *)a2 + 294);
  *((_QWORD *)this + 294) = v19;
  if (v19)
    CFRetain(v19);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebKit::NavigationActionData *)((char *)this + 2360), (const WebKit::NavigationActionData *)((char *)a2 + 2360));
  v20 = (_DWORD *)*((_QWORD *)a2 + 314);
  if (v20)
    *v20 += 2;
  *((_QWORD *)this + 314) = v20;
  v21 = (_DWORD *)*((_QWORD *)a2 + 315);
  if (v21)
    *v21 += 2;
  *((_QWORD *)this + 315) = v21;
  v22 = (_DWORD *)*((_QWORD *)a2 + 316);
  if (v22)
    ++*v22;
  *((_QWORD *)this + 316) = v22;
  v23 = *((_QWORD *)a2 + 317);
  *((_BYTE *)this + 2544) = *((_BYTE *)a2 + 2544);
  *((_QWORD *)this + 317) = v23;
  v24 = (const void *)*((_QWORD *)a2 + 319);
  *((_QWORD *)this + 319) = v24;
  if (v24)
    CFRetain(v24);
  return this;
}

void sub_196EA9230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  uint64_t v14;
  WebCore::ResourceResponseBase *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::PrivateClickMeasurement *v19;
  WebKit::WebHitTestResultData *v20;
  WebCore::ResourceRequestBase *v21;
  WebCore::ResourceRequestBase *v22;
  const void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  WebCore::ResourceRequestBase::~ResourceRequestBase(v22);
  v24 = *(const void **)(v14 + 2352);
  *(_QWORD *)(v14 + 2352) = 0;
  if (v24)
    CFRelease(v24);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v21);
  v26 = *(WTF::StringImpl **)(v14 + 2096);
  *(_QWORD *)(v14 + 2096) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *(unsigned int *)(v14 + 2088);
  if ((_DWORD)v27 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v27])(&a11, v14 + 2064);
  *(_DWORD *)(v14 + 2088) = -1;
  v28 = *(const void **)(v14 + 2056);
  *(_QWORD *)(v14 + 2056) = 0;
  if (v28)
    CFRelease(v28);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v14 + 1864));
  v30 = *(WTF::StringImpl **)(v14 + 1784);
  *(_QWORD *)(v14 + 1784) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *(unsigned int *)(v14 + 1776);
  if ((_DWORD)v31 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v31])(&a12, v14 + 1752);
  *(_DWORD *)(v14 + 1776) = -1;
  v32 = *(const void **)(v14 + 1744);
  *(_QWORD *)(v14 + 1744) = 0;
  if (v32)
    CFRelease(v32);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v14 + 1552));
  if (*(_BYTE *)(v14 + 1536))
    WebKit::WebHitTestResultData::~WebHitTestResultData(v20);
  if (*(_BYTE *)(v14 + 856))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v19, v33);
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100](v18, v33);
  v35 = *(WTF::StringImpl **)(v14 + 472);
  *(_QWORD *)(v14 + 472) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *(unsigned int *)(v14 + 408);
  if ((_DWORD)v36 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v36])(&a13, v17);
  *(_DWORD *)(v14 + 408) = -1;
  v37 = *(unsigned int *)(v14 + 376);
  if ((_DWORD)v37 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v37])(&a14, v16);
  *(_DWORD *)(v14 + 376) = -1;
  v38 = *(const void **)(v14 + 328);
  *(_QWORD *)(v14 + 328) = 0;
  if (v38)
    CFRelease(v38);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v15, v34);
  v40 = *(WTF::StringImpl **)(v14 + 72);
  *(_QWORD *)(v14 + 72) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196EA9460()
{
  JUMPOUT(0x196EA93ECLL);
}

void sub_196EA9468()
{
  JUMPOUT(0x196EA9418);
}

void sub_196EA9470()
{
  JUMPOUT(0x196EA942CLL);
}

_BYTE *std::__optional_copy_base<WebCore::CertificateInfo,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  const void *v3;

  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v3)
      CFRetain(v3);
    a1[8] = 1;
  }
  return a1;
}

void sub_196EA94C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    v4 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(result, a2);
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(v4 + 32), (unsigned __int8 **)(a2 + 32));
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(v3 + 40), (unsigned __int8 **)(a2 + 40));
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EA9548(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;

  v15 = v14;
  v17 = *v15;
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), a2);
  v18 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v18])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;

  *a1 = 0;
  v3 = *a2;
  if (!*a2)
    return a1;
  v4 = *((_DWORD *)v3 - 3);
  if (!v4)
    return a1;
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
  v7 = WTF::fastMalloc((WTF *)(v6 + 16));
  v8 = v7;
  v9 = v7 + 16;
  if (v6)
    memset((void *)(v7 + 16), 255, v6);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v10 = *a2;
  if (*a2)
  {
    v11 = *((unsigned int *)v10 - 1);
    v12 = &v10[v11];
    if (*((_DWORD *)v10 - 3))
    {
      v13 = *a2;
      if ((_DWORD)v11)
      {
        v13 = *a2;
        while (*v13 >= 0xFEu)
        {
          ++v13;
          if (!--v11)
          {
            v13 = v12;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v13 = &v10[v11];
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = &v10[v11];
LABEL_15:
  if (v10)
    v10 += *((unsigned int *)v10 - 1);
  while (v13 != v10)
  {
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = 0;
    v17 = *v13;
    v18 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
    v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
    do
    {
      v20 = v19 & v15;
      v19 = ++v16 + v20;
    }
    while (*(unsigned __int8 *)(v14 + v20) != 255);
    *(_BYTE *)(v14 + v20) = v17;
    v21 = v13 + 1;
    v13 = v12;
    if (v21 != v12)
    {
      v13 = v21;
      while (*v13 >= 0xFEu)
      {
        if (++v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v6;
  uint64_t Table;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _BYTE *v21;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      Table = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::allocateTable(v6);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[24 * *((unsigned int *)*a2 - 1)] : 0;
      if ((unsigned __int8 *)v12 != v8)
      {
        do
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = 0;
          v16 = *v9;
          v17 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
          v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
          v19 = v18 ^ HIWORD(v18);
          do
          {
            v20 = v19 & v14;
            v21 = (_BYTE *)(v13 + 24 * (v19 & v14));
            v19 = ++v15 + (v19 & v14);
          }
          while (*v21 != 255);
          *v21 = v16;
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1> const&>(v13 + 24 * v20 + 8, (uint64_t)(v9 + 8));
          while (1)
          {
            v9 += 24;
            if (v9 == v11)
              break;
            if (*v9 < 0xFEu)
              goto LABEL_17;
          }
          v9 = v11;
LABEL_17:
          ;
        }
        while (v9 != (unsigned __int8 *)v12);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_BYTE *)v5 - 8) = -1;
      *v5 = 0;
      v5[1] = 0;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[24 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[24 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while (*result >= 0xFEu)
    {
      result += 24;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD110[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34AD130[v4])(&v5, result, a2);
}

WebCore::SecurityOriginData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WebCore::SecurityOriginData **a2)
{
  WebCore::SecurityOriginData *result;

  result = *a2;
  if (*a2)
    return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(result, a2);
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(WebCore::SecurityOriginData *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  double v5;
  char v6;
  uint64_t v7;
  char v9;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)this;
    do
    {
      v5 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v4);
      if ((v6 & 1) == 0)
      {
        v7 = v4[6];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v9, v4, v5);
        v4[6] = -1;
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 == -1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, WebCore::SecurityOriginData **a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__assign_alt[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AD110[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 1;
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__assign_alt[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(uint64_t a1, WebCore::SecurityOriginData **a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 8))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__emplace[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(a1, a3);
  else
    return (uint64_t *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::operator=(a2, a3);
}

WebCore::SecurityOriginData **WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::operator=(WebCore::SecurityOriginData **a1, uint64_t *a2)
{
  void *v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v6;

  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  WebCore::SecurityOriginData *v12;
  WebCore::SecurityOriginData *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int isNull;
  WebCore::SecurityOriginData *v21[2];
  int v22;
  __int16 v23;
  char v24;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      v7 = WTF::fastMalloc((WTF *)((32 * v6) | 0x10));
      v8 = v7;
      v9 = v7 + 16;
      if (v6)
        bzero((void *)(v7 + 16), 32 * v6);
      *a1 = v9;
      *(_DWORD *)(v8 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v10 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
      v11 = v10;
      v21[0] = v10;
      v21[1] = v12;
      if (*a2)
        v13 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
      else
        v13 = 0;
      if (v13 != v10)
      {
        do
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v22 = -1640531527;
          v23 = 0;
          v24 = 0;
          WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v22, (uint64_t)v11);
          v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v14 + 32 * v18));
            v16 = ++v17 + v18;
          }
          while (!isNull);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v14 + 32 * v18, (uint64_t)v11);
          v21[0] = (WebCore::SecurityOriginData *)((char *)v21[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v21);
          v11 = v21[0];
        }
        while (v21[0] != v13);
      }
    }
  }
  return a1;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::makeConstIterator(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::SecurityOriginData *v5[2];

  v2 = *a1;
  if (*a1)
    v3 = *(unsigned int *)(v2 - 4);
  else
    v3 = 0;
  v5[0] = a2;
  v5[1] = (WebCore::SecurityOriginData *)(v2 + 32 * v3);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v5);
  return v5[0];
}

double WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  double result;
  WebCore::SecurityOriginData *v4;
  int v5;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WebCore::SecurityOriginData::isNull(v1) & 1) == 0)
      {
        result = WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v5)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 32);
      *a1 = v1;
    }
    while (v1 != v4);
  }
  return result;
}

uint64_t WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
    v2 = -1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v2) << 16) ^ (*a1 + (unsigned __int16)v2);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  *a1 = v4 + (v4 >> 11);
  v8 = a1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(v7);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **))off_1E34AD140[v5])(&v9);
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(unsigned int ***a1, uint64_t a2)
{
  return WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(**a1, (uint64_t *)a2, (uint64_t *)(a2 + 8), (unsigned __int16 *)(a2 + 16));
}

unsigned int ***_ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedINS4_23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENS4_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS4_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EclB8sn180100IJRKNS0_5__altILm1ESF_EEEEEDcDpOSJ_(unsigned int ***result, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;

  v2 = **result;
  v3 = *v2 + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (v6 >> 11);
  *v2 = v7;
  v8 = a2[1];
  v9 = (v8 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v8) << 16) ^ (v7 + (unsigned __int16)v8);
  v10 = v9 + WORD2(v8) + (v9 >> 11);
  LODWORD(v8) = (v8 >> 37) & 0x7FFF800 ^ (v10 << 16);
  *v2 = (v8 ^ v10) + ((v8 ^ v10) >> 11);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

WTF::StringImpl **std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl **result;
  char v6;

  if (*(_DWORD *)(a1 + 24))
    return (WTF::StringImpl **)std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple const&>(a1, a3);
  WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)a3);
  result = WTF::String::operator=((WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(a3 + 8));
  v6 = *(_BYTE *)(a3 + 18);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a3 + 16);
  *(_BYTE *)(a2 + 18) = v6;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  char v8;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v8, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__emplace[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *result;
  char v6;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD110[v4])(&v6, a1);
  *(_DWORD *)(a1 + 8) = -1;
  result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v3, a2);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      WTF::fastFree((WTF *)(v4 - 16), a2);
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v7, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

WebCore::PrivateClickMeasurement *WebCore::PrivateClickMeasurement::PrivateClickMeasurement(WebCore::PrivateClickMeasurement *this, const WebCore::PrivateClickMeasurement *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  __int128 v12;
  __int128 v13;
  _DWORD *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  _DWORD *v18;
  _DWORD *v19;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 2) = v5;
  v6 = *(_OWORD *)((char *)a2 + 24);
  v7 = *(_OWORD *)((char *)a2 + 33);
  *((_BYTE *)this + 56) = 0;
  *(_OWORD *)((char *)this + 33) = v7;
  *(_OWORD *)((char *)this + 24) = v6;
  *((_BYTE *)this + 184) = 0;
  if (*((_BYTE *)a2 + 184))
  {
    v8 = *((_BYTE *)a2 + 58);
    *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
    *((_BYTE *)this + 58) = v8;
    *((_BYTE *)this + 64) = 0;
    *((_BYTE *)this + 72) = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v9 = (_DWORD *)*((_QWORD *)a2 + 8);
      if (v9)
        *v9 += 2;
      *((_QWORD *)this + 8) = v9;
      *((_BYTE *)this + 72) = 1;
    }
    *((_BYTE *)this + 80) = 0;
    *((_BYTE *)this + 88) = 0;
    if (*((_BYTE *)a2 + 88))
    {
      v10 = (_DWORD *)*((_QWORD *)a2 + 10);
      if (v10)
        *v10 += 2;
      *((_QWORD *)this + 10) = v10;
      *((_BYTE *)this + 88) = 1;
    }
    *((_BYTE *)this + 96) = 0;
    *((_BYTE *)this + 104) = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v11 = (_DWORD *)*((_QWORD *)a2 + 12);
      if (v11)
        *v11 += 2;
      *((_QWORD *)this + 12) = v11;
      *((_BYTE *)this + 104) = 1;
    }
    *((_BYTE *)this + 112) = 0;
    *((_BYTE *)this + 144) = 0;
    if (*((_BYTE *)a2 + 144))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>((_QWORD *)this + 14, (uint64_t)a2 + 112);
      *((_BYTE *)this + 144) = 1;
    }
    *((_BYTE *)this + 152) = 0;
    *((_BYTE *)this + 176) = 0;
    if (*((_BYTE *)a2 + 176))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>((_QWORD *)this + 19, (uint64_t)a2 + 152);
      *((_BYTE *)this + 176) = 1;
    }
    *((_BYTE *)this + 184) = 1;
  }
  v12 = *((_OWORD *)a2 + 12);
  v13 = *((_OWORD *)a2 + 13);
  *((_BYTE *)this + 224) = 0;
  *((_OWORD *)this + 12) = v12;
  *((_OWORD *)this + 13) = v13;
  *((_BYTE *)this + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    v14 = (_DWORD *)*((_QWORD *)a2 + 28);
    if (v14)
      *v14 += 2;
    *((_QWORD *)this + 28) = v14;
    *((_BYTE *)this + 232) = 1;
  }
  v15 = (const void *)*((_QWORD *)a2 + 30);
  *((_QWORD *)this + 30) = v15;
  if (v15)
    CFRetain(v15);
  v16 = (const void *)*((_QWORD *)a2 + 31);
  *((_QWORD *)this + 31) = v16;
  if (v16)
    CFRetain(v16);
  v17 = (const void *)*((_QWORD *)a2 + 32);
  *((_QWORD *)this + 32) = v17;
  if (v17)
    CFRetain(v17);
  v18 = (_DWORD *)*((_QWORD *)a2 + 33);
  if (v18)
    *v18 += 2;
  *((_QWORD *)this + 33) = v18;
  *((_BYTE *)this + 272) = 0;
  *((_BYTE *)this + 296) = 0;
  if (*((_BYTE *)a2 + 296))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>((_QWORD *)this + 34, (uint64_t)a2 + 272);
    *((_BYTE *)this + 296) = 1;
  }
  v19 = (_DWORD *)*((_QWORD *)a2 + 38);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 38) = v19;
  return this;
}

void sub_196EAA3CC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v8, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](v7, v10);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v6, v11);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5, v12);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4, v13);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100](v3, v14);
  v16 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  _DWORD *v7;

  if (result)
  {
    v3 = result;
    v4 = *(const void **)a2;
    *v3 = *(_QWORD *)a2;
    if (v4)
      CFRetain(v4);
    v5 = *(const void **)(a2 + 8);
    v3[1] = v5;
    if (v5)
      CFRetain(v5);
    v6 = *(const void **)(a2 + 16);
    v3[2] = v6;
    if (v6)
      CFRetain(v6);
    v7 = *(_DWORD **)(a2 + 24);
    if (v7)
      *v7 += 2;
    v3[3] = v7;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EAA550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
      CFRelease(v6);
  }
  return a1;
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(_QWORD *result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  if (result)
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *result = v2;
    v3 = *(_DWORD **)(a2 + 8);
    if (v3)
      *v3 += 2;
    result[1] = v3;
    v4 = *(_DWORD **)(a2 + 16);
    if (v4)
      *v4 += 2;
    result[2] = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 128))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 96, a2);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 56, v3);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v5);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, v6);
  }
  return a1;
}

WebKit::WebHitTestResultData *WebKit::WebHitTestResultData::WebHitTestResultData(WebKit::WebHitTestResultData *this, const WebKit::WebHitTestResultData *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  __int128 v12;
  __int128 v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 4) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 5) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 6) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 7) = v11;
  v12 = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)((char *)a2 + 76);
  *((_OWORD *)this + 4) = v12;
  std::__optional_copy_base<WebKit::FrameInfoData,false>::__optional_copy_base[abi:sn180100]((WebKit::WebHitTestResultData *)((char *)this + 96), (const WebKit::WebHitTestResultData *)((char *)a2 + 96));
  v13 = *((_OWORD *)a2 + 26);
  *((_OWORD *)this + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)this + 26) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 54);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 54) = v14;
  v15 = (_DWORD *)*((_QWORD *)a2 + 55);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 55) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 56);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 56) = v16;
  v17 = (unsigned int *)*((_QWORD *)a2 + 57);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *((_QWORD *)this + 57) = v17;
  v19 = (unsigned int *)*((_QWORD *)a2 + 58);
  if (v19)
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  *((_QWORD *)this + 58) = v19;
  v21 = (_DWORD *)*((_QWORD *)a2 + 59);
  if (v21)
    *v21 += 2;
  *((_QWORD *)this + 59) = v21;
  v22 = (_DWORD *)*((_QWORD *)a2 + 60);
  if (v22)
    *v22 += 2;
  *((_QWORD *)this + 60) = v22;
  *((_WORD *)this + 244) = *((_WORD *)a2 + 244);
  *((_QWORD *)this + 62) = *((_QWORD *)a2 + 62);
  WebCore::TextIndicatorData::TextIndicatorData((WebKit::WebHitTestResultData *)((char *)this + 504), (const TextIndicatorData *)((char *)a2 + 504));
  MEMORY[0x19AEAEEB4]((char *)this + 616, (char *)a2 + 616);
  v23 = (_DWORD *)*((_QWORD *)a2 + 82);
  if (v23)
    ++*v23;
  *((_QWORD *)this + 82) = v23;
  return this;
}

void sub_196EAA93C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v5 = *(_QWORD *)(v2 + 600);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *(_DWORD **)(v2 + 592);
  *(_QWORD *)(v2 + 592) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 584);
  *(_QWORD *)(v2 + 584) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *(_DWORD **)(v2 + 576);
  *(_QWORD *)(v2 + 576) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(WTF **)(v2 + 552);
  if (v9)
  {
    *(_QWORD *)(v2 + 552) = 0;
    *(_DWORD *)(v2 + 560) = 0;
    WTF::fastFree(v9, a2);
  }
  v13 = *(WTF::StringImpl **)(v2 + 480);
  *(_QWORD *)(v2 + 480) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)(v2 + 472);
  *(_QWORD *)(v2 + 472) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(_QWORD *)(v2 + 464);
  *(_QWORD *)(v2 + 464) = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v15, a2);
  v16 = *(unsigned int **)(v2 + 456);
  *(_QWORD *)(v2 + 456) = 0;
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v16);
  v17 = *(WTF::StringImpl **)(v2 + 448);
  *(_QWORD *)(v2 + 448) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v2 + 440);
  *(_QWORD *)(v2 + 440) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v2 + 432);
  *(_QWORD *)(v2 + 432) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  v21 = *(WTF::StringImpl **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(WTF::StringImpl **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(WTF::StringImpl **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(WTF::StringImpl **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v20);
    else
      *(_DWORD *)v28 -= 2;
  }
  _Unwind_Resume(a1);
}

WebKit::FrameInfoData *std::__optional_copy_base<WebKit::FrameInfoData,false>::__optional_copy_base[abi:sn180100](WebKit::FrameInfoData *this, const WebKit::FrameInfoData *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 296) = 0;
  if (*((_BYTE *)a2 + 296))
  {
    WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)this, a2);
    *((_BYTE *)this + 296) = 1;
  }
  return this;
}

void sub_196EAAC5C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  const void *v5;
  char v7;

  if (*(_BYTE *)(a1 + 296))
  {
    v3 = *(WTF::StringImpl **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 232);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v7, a1 + 208);
    *(_DWORD *)(a1 + 232) = -1;
    v5 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

WebCore::TextIndicatorData *WebCore::TextIndicatorData::TextIndicatorData(WebCore::TextIndicatorData *this, const TextIndicatorData *a2)
{
  FloatRect selectionRectInRootViewCoordinates;
  FloatRect contentImageWithoutSelectionRectInRootViewCoordinates;
  Image *m_ptr;
  Image *v7;
  Image *v8;

  selectionRectInRootViewCoordinates = a2->selectionRectInRootViewCoordinates;
  contentImageWithoutSelectionRectInRootViewCoordinates = a2->contentImageWithoutSelectionRectInRootViewCoordinates;
  *((_OWORD *)this + 1) = a2->textBoundingRectInRootViewCoordinates;
  *((FloatRect *)this + 2) = contentImageWithoutSelectionRectInRootViewCoordinates;
  *(FloatRect *)this = selectionRectInRootViewCoordinates;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 48, (uint64_t)&a2->textRectsInBoundingRectCoordinates);
  *((_DWORD *)this + 16) = LODWORD(a2->contentImageScaleFactor);
  m_ptr = a2->contentImageWithHighlight.m_ptr;
  if (m_ptr)
    ++*((_DWORD *)m_ptr + 2);
  *((_QWORD *)this + 9) = m_ptr;
  v7 = a2->contentImageWithoutSelection.m_ptr;
  if (v7)
    ++*((_DWORD *)v7 + 2);
  *((_QWORD *)this + 10) = v7;
  v8 = a2->contentImage.m_ptr;
  if (v8)
    ++*((_DWORD *)v8 + 2);
  *((_QWORD *)this + 11) = v8;
  WebCore::Color::Color((WebCore::TextIndicatorData *)((char *)this + 96), &a2->estimatedBackgroundColor);
  *((_DWORD *)this + 26) = *(_DWORD *)&a2->presentationTransition;
  return this;
}

void sub_196EAADBC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;

  v5 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(_DWORD **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(__int128 **)a2;
      v8 = 16 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 16;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    v3 = (WTF *)MEMORY[0x19AEAD900]();
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

_BYTE *std::__optional_move_base<WebKit::NavigationActionData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[2560] = 0;
  if (*(_BYTE *)(a2 + 2560))
  {
    WebKit::NavigationActionData::NavigationActionData((uint64_t)a1, a2);
    a1[2560] = 1;
  }
  return a1;
}

void sub_196EAAF54(_Unwind_Exception *exception_object)
{
  WebKit::NavigationActionData *v1;

  if (*((_BYTE *)v1 + 2560))
    WebKit::NavigationActionData::~NavigationActionData(v1);
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

_BYTE *std::__optional_move_base<WebCore::NavigationRequester,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester,WebCore::NavigationRequester*>((uint64_t)a1, a2);
    a1[224] = 1;
  }
  return a1;
}

void sub_196EAB010(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::NavigationRequester *v2;

  if (*((_BYTE *)v2 + 224))
    WebCore::NavigationRequester::~NavigationRequester(v2, a2);
  _Unwind_Resume(exception_object);
}

void std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester,WebCore::NavigationRequester*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (a1)
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    v3 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(v4 + 40) = v3;
    v5 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 48) = v5;
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(v4 + 56) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(v4 + 64) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    *(_DWORD *)(v4 + 68) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(v4 + 76) = *(_BYTE *)(a2 + 76);
    *(_DWORD *)(v4 + 72) = v6;
    *(_WORD *)(v4 + 80) = *(_WORD *)(a2 + 80);
    v7 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(v4 + 88) = v7;
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(v4 + 96) = v8;
    *(_WORD *)(v4 + 104) = *(_WORD *)(a2 + 104);
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(v4 + 112) = v9;
    v10 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v4 + 120) = v10;
    *(_BYTE *)(v4 + 128) = *(_BYTE *)(a2 + 128);
    *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
    v11 = *(_OWORD *)(a2 + 152);
    v12 = *(_OWORD *)(a2 + 168);
    v13 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v4 + 196) = *(_OWORD *)(a2 + 196);
    *(_OWORD *)(v4 + 184) = v13;
    *(_OWORD *)(v4 + 168) = v12;
    *(_OWORD *)(v4 + 152) = v11;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, a2);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

const char ***WTF::RefCounted<WebKit::SandboxExtension>::deref(const char ***result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::SandboxExtension::~SandboxExtension(result);
    return (const char ***)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[32])
  {
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 16));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 32);
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(WTF **)(a1 + 8);
      if (v4)
      {
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v4, a2);
      }
    }
  }
  return a1;
}

uint64_t WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,IPC::FormDataReference::sandboxExtensionHandles(void)::{lambda(0ul &)#1},WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char **v16;
  char v17;
  const char **v18;
  char v19;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v3)
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, *(unsigned int *)(a2 + 12));
  if (!(v3 >> 29))
  {
    v4 = result;
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    v6 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)v4;
      v8 = 48 * v6;
      do
      {
        if (*(_DWORD *)(v7 + 40) == 1)
        {
          WebKit::SandboxExtension::createHandle(0, (uint64_t)&v18);
          if (v19)
          {
            v9 = v18;
            v18 = 0;
            v16 = v9;
            v17 = 1;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
            if (v17)
            {
              v10 = v16;
              v16 = 0;
              v18 = v10;
              v11 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
              {
                v13 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v11 + 1, (unint64_t)&v18);
                v11 = *(unsigned int *)(a2 + 12);
                v14 = *(_QWORD *)a2;
                v15 = *v13;
                *v13 = 0;
                *(_QWORD *)(v14 + 8 * v11) = v15;
              }
              else
              {
                v12 = *(_QWORD *)a2;
                v18 = 0;
                *(_QWORD *)(v12 + 8 * v11) = v10;
              }
              *(_DWORD *)(a2 + 12) = v11 + 1;
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
              if (v17)
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
            }
          }
        }
        v7 += 48;
        v8 -= 48;
      }
      while (v8);
    }
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, *(unsigned int *)(a2 + 12));
  }
  __break(0xC471u);
  return result;
}

void sub_196EAB530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char **a9, char a10, const char **a11)
{
  uint64_t v11;
  void *v13;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a11);
  if (a10)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a9);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, v13);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SandboxExtensionHandle>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char ***v8;
  uint64_t v9;
  const char ***v10;
  const char ***v11;
  const char **v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (const char ***)v6;
      v9 = 8 * v5;
      v10 = (const char ***)v4;
      v11 = (const char ***)v4;
      do
      {
        v12 = *v10;
        *v11++ = 0;
        *v8++ = v12;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v10);
        v10 = v11;
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_196EAB754(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 16))
    WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(exception_object);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(int a1, WTF::FileSystemImpl::MappedFileData *this)
{
  WTF::FileSystemImpl::MappedFileData::~MappedFileData(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t IPC::StreamServerConnectionHandle::StreamServerConnectionHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
  return a1;
}

void sub_196EAB834(_Unwind_Exception *a1)
{
  WTF::MachSendRight *v1;

  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

void API::Data::createWithoutCopying(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebKit **a5@<X8>)
{
  WebKit *v10;

  v10 = (WebKit *)API::Object::newObject(0x30uLL, 8);
  *(_QWORD *)v10 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v10);
  *(_QWORD *)v10 = &off_1E34AE750;
  *((_QWORD *)v10 + 2) = a1;
  *((_QWORD *)v10 + 3) = a2;
  *((_QWORD *)v10 + 4) = a3;
  *((_QWORD *)v10 + 5) = a4;
  *a5 = v10;
}

uint64_t API::ObjectImpl<(API::Object::Type)8>::type()
{
  return 8;
}

WTF *API::Data::create(std::span<unsigned char const,18446744073709551615ul>)::{lambda(unsigned char *,void const*)#1}::__invoke(WTF *this, void *a2)
{
  if (this)
    return (WTF *)WTF::fastFree(this, a2);
  return this;
}

void API::Error::~Error(API::Error *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34AD190;
  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34AD190;
  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

void API::FrameHandle::~FrameHandle(API::FrameHandle *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)11>::type()
{
  return 11;
}

void API::Size::~Size(API::Size *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)37>::type()
{
  return 37;
}

void API::Point::~Point(API::Point *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)36>::type()
{
  return 36;
}

void API::Rect::~Rect(API::Rect *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)38>::type()
{
  return 38;
}

void API::Boolean::~Boolean(API::Boolean *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)32>::type()
{
  return 32;
}

void API::Double::~Double(API::Double *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)33>::type()
{
  return 33;
}

void API::UInt64::~UInt64(API::UInt64 *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)34>::type()
{
  return 34;
}

void API::Int64::~Int64(API::Int64 *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)35>::type()
{
  return 35;
}

void API::PageHandle::~PageHandle(API::PageHandle *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)13>::type()
{
  return 13;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t result, char *a2, WTF *this)
{
  WTF *v3;
  uint64_t v4;
  _BYTE *v6;
  char v7;

  v3 = this;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = (_DWORD)this;
  if (!this)
    return v4;
  if (!((unint64_t)this >> 32))
  {
    v6 = (_BYTE *)WTF::fastMalloc(this);
    *(_DWORD *)(v4 + 8) = (_DWORD)v3;
    *(_QWORD *)v4 = v6;
    do
    {
      v7 = *a2++;
      *v6++ = v7;
      v3 = (WTF *)((char *)v3 - 1);
    }
    while (v3);
    return v4;
  }
  __break(0xC471u);
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)20>::type()
{
  return 20;
}

uint64_t API::ObjectImpl<(API::Object::Type)21>::type()
{
  return 21;
}

void API::URL::~URL(API::URL *this)
{
  _QWORD *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34AD320;
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  v2 = (_QWORD *)((char *)this + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v2, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _QWORD *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34AD320;
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  v2 = (_QWORD *)((char *)this + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v2, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)24>::type()
{
  return 24;
}

void std::default_delete<WTF::URL>::operator()[abi:sn180100](int a1, WTF::StringImpl **this)
{
  WTF::StringImpl *v3;

  if (this)
  {
    v3 = *this;
    *this = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)this);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::fastFree((WTF *)this, this);
  }
}

API::URLResponse *API::URLResponse::URLResponse(API::URLResponse *this, const WebCore::ResourceResponse *a2)
{
  const void *v4;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34AE728;
  WebCore::ResourceResponseBase::ResourceResponseBase((API::URLResponse *)((char *)this + 16), a2);
  v4 = (const void *)*((_QWORD *)a2 + 30);
  *((_QWORD *)this + 32) = v4;
  if (v4)
    CFRetain(v4);
  *((_BYTE *)this + 264) = *((_BYTE *)a2 + 248);
  return this;
}

void sub_196EABED4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v2;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
  _Unwind_Resume(a1);
}

void API::URLResponse::~URLResponse(API::URLResponse *this, WTF::StringImpl *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34AE728;
  v3 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::URLResponse *)((char *)this + 16), a2);
}

{
  const void *v3;

  *(_QWORD *)this = &off_1E34AE728;
  v3 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::URLResponse *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)26>::type()
{
  return 26;
}

API::UserContentURLPattern *API::UserContentURLPattern::UserContentURLPattern(API::UserContentURLPattern *this, const WTF::String *a2)
{
  _DWORD *v4;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34AD348;
  WebCore::UserContentURLPattern::UserContentURLPattern((uint64_t)this + 16);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 6) = v4;
  return this;
}

void API::UserContentURLPattern::~UserContentURLPattern(API::UserContentURLPattern *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34AD348;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34AD348;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebCore::UserContentURLPattern::UserContentURLPattern(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 24) = WebCore::UserContentURLPattern::parse();
  return a1;
}

void sub_196EAC1D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = v2[2];
  v2[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[1];
  v2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::ImageResource>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ImageResource>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v3[1];
      v3[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  WTF::URL::URL(v4 + 32, (uint64_t *)(a2 + 32));
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 88) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 143) = *(_DWORD *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 152) = 1;
  return a1;
}

void sub_196EAC3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

void std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF::StringImpl *v3;

  if (this)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, this);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::fastFree(this, this);
  }
}

void WebCore::FontPlatformSerializedTraits::~FontPlatformSerializedTraits(WebCore::FontPlatformSerializedTraits *this, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  WTF::StringImpl *v7;

  if (*((_BYTE *)this + 64))
  {
    v3 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v3)
      CFRelease(v3);
  }
  if (*((_BYTE *)this + 48))
  {
    v4 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
      CFRelease(v4);
  }
  if (*((_BYTE *)this + 32))
  {
    v5 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v5)
      CFRelease(v5);
  }
  if (*((_BYTE *)this + 16))
  {
    v6 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
      CFRelease(v6);
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34AD370[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_196EAC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD360[v14])(&a12, v12);
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIPK10__CFNumberEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIPK10__CFNumberEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIPK10__CFNumberEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIPK10__CFNumberEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>::destruct(*(_QWORD *)a1, *(_QWORD *)a1 + 16 * v3);
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>::destruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        CFRelease(v5);
      v3 += 16;
    }
    while (v3 != a2);
  }
}

uint64_t WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>::destruct(*(_QWORD *)a1, *(_QWORD *)a1 + 16 * v3);
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>::destruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        CFRelease(v5);
      v3 += 16;
    }
    while (v3 != a2);
  }
}

_BYTE *std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_196EAC7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34AD360[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebCore::FontPlatformSerializedTraits,false>::__optional_move_base[abi:sn180100](_BYTE *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = 0;
  result[72] = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    result[8] = 0;
    result[16] = 0;
    if (*((_BYTE *)a2 + 16))
    {
      v3 = a2[1];
      a2[1] = 0;
      *((_QWORD *)result + 1) = v3;
      result[16] = 1;
    }
    result[24] = 0;
    result[32] = 0;
    if (*((_BYTE *)a2 + 32))
    {
      v4 = a2[3];
      a2[3] = 0;
      *((_QWORD *)result + 3) = v4;
      result[32] = 1;
    }
    result[40] = 0;
    result[48] = 0;
    if (*((_BYTE *)a2 + 48))
    {
      v5 = a2[5];
      a2[5] = 0;
      *((_QWORD *)result + 5) = v5;
      result[48] = 1;
    }
    result[56] = 0;
    result[64] = 0;
    if (*((_BYTE *)a2 + 64))
    {
      v6 = a2[7];
      a2[7] = 0;
      *((_QWORD *)result + 7) = v6;
      result[64] = 1;
    }
    result[72] = 1;
  }
  return result;
}

uint64_t WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v7 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v8 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v9 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v10 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v11 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(a1 + 88) = v11;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v12 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v13 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v13;
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    v14 = a2[17];
    a2[17] = 0;
    *(_QWORD *)(a1 + 136) = v14;
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v15 = a2[19];
    a2[19] = 0;
    *(_QWORD *)(a1 + 152) = v15;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*((_BYTE *)a2 + 176))
  {
    v16 = a2[21];
    a2[21] = 0;
    *(_QWORD *)(a1 + 168) = v16;
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    v17 = a2[23];
    a2[23] = 0;
    *(_QWORD *)(a1 + 184) = v17;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    v18 = a2[25];
    a2[25] = 0;
    *(_QWORD *)(a1 + 200) = v18;
    LODWORD(v18) = *((_DWORD *)a2 + 52);
    *((_DWORD *)a2 + 52) = 0;
    *(_DWORD *)(a1 + 208) = v18;
    LODWORD(v18) = *((_DWORD *)a2 + 53);
    *((_DWORD *)a2 + 53) = 0;
    *(_DWORD *)(a1 + 212) = v18;
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    v19 = a2[28];
    a2[28] = 0;
    *(_QWORD *)(a1 + 224) = v19;
    LODWORD(v19) = *((_DWORD *)a2 + 58);
    *((_DWORD *)a2 + 58) = 0;
    *(_DWORD *)(a1 + 232) = v19;
    LODWORD(v19) = *((_DWORD *)a2 + 59);
    *((_DWORD *)a2 + 59) = 0;
    *(_DWORD *)(a1 + 236) = v19;
    *(_BYTE *)(a1 + 240) = 1;
  }
  std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 248), (uint64_t)(a2 + 31));
  std::__optional_move_base<WebCore::FontPlatformSerializedTraits,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 272), a2 + 34);
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  if (*((_BYTE *)a2 + 360))
  {
    v20 = a2[44];
    a2[44] = 0;
    *(_QWORD *)(a1 + 352) = v20;
    *(_BYTE *)(a1 + 360) = 1;
  }
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  if (*((_BYTE *)a2 + 376))
  {
    v21 = a2[46];
    a2[46] = 0;
    *(_QWORD *)(a1 + 368) = v21;
    *(_BYTE *)(a1 + 376) = 1;
  }
  return a1;
}

void sub_196EACBB8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if (*(_BYTE *)(v2 + 240))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  if (*(_BYTE *)(v2 + 216))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  if (*(_BYTE *)(v2 + 192))
  {
    v6 = *(const void **)(v2 + 184);
    *(_QWORD *)(v2 + 184) = 0;
    if (v6)
      CFRelease(v6);
  }
  if (*(_BYTE *)(v2 + 176))
  {
    v7 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = 0;
    if (v7)
      CFRelease(v7);
  }
  if (*(_BYTE *)(v2 + 160))
  {
    v8 = *(const void **)(v2 + 152);
    *(_QWORD *)(v2 + 152) = 0;
    if (v8)
      CFRelease(v8);
  }
  if (*(_BYTE *)(v2 + 144))
  {
    v9 = *(const void **)(v2 + 136);
    *(_QWORD *)(v2 + 136) = 0;
    if (v9)
      CFRelease(v9);
  }
  if (*(_BYTE *)(v2 + 128))
  {
    v10 = *(const void **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v10)
      CFRelease(v10);
  }
  if (*(_BYTE *)(v2 + 112))
  {
    v11 = *(const void **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v11)
      CFRelease(v11);
  }
  if (*(_BYTE *)(v2 + 96))
  {
    v12 = *(const void **)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v12)
      CFRelease(v12);
  }
  if (*(_BYTE *)(v2 + 80))
  {
    v13 = *(const void **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v13)
      CFRelease(v13);
  }
  if (*(_BYTE *)(v2 + 64))
  {
    v14 = *(const void **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v14)
      CFRelease(v14);
  }
  if (*(_BYTE *)(v2 + 48))
  {
    v15 = *(const void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v15)
      CFRelease(v15);
  }
  if (*(_BYTE *)(v2 + 32))
  {
    v16 = *(const void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes(WebCore::FontPlatformSerializedAttributes *this, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;

  if (*((_BYTE *)this + 376))
  {
    v3 = (const void *)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v3)
      CFRelease(v3);
  }
  if (*((_BYTE *)this + 360))
  {
    v4 = (const void *)*((_QWORD *)this + 44);
    *((_QWORD *)this + 44) = 0;
    if (v4)
      CFRelease(v4);
  }
  if (*((_BYTE *)this + 344))
    WebCore::FontPlatformSerializedTraits::~FontPlatformSerializedTraits((WebCore::FontPlatformSerializedAttributes *)((char *)this + 272), a2);
  if (*((_BYTE *)this + 264))
  {
    v5 = *((unsigned int *)this + 64);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))off_1E34AD360[v5])(&v20, (char *)this + 248);
    *((_DWORD *)this + 64) = -1;
  }
  if (*((_BYTE *)this + 240))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, a2);
  if (*((_BYTE *)this + 216))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, a2);
  if (*((_BYTE *)this + 192))
  {
    v6 = (const void *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v6)
      CFRelease(v6);
  }
  if (*((_BYTE *)this + 176))
  {
    v7 = (const void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v7)
      CFRelease(v7);
  }
  if (*((_BYTE *)this + 160))
  {
    v8 = (const void *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v8)
      CFRelease(v8);
  }
  if (*((_BYTE *)this + 144))
  {
    v9 = (const void *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v9)
      CFRelease(v9);
  }
  if (*((_BYTE *)this + 128))
  {
    v10 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v10)
      CFRelease(v10);
  }
  if (*((_BYTE *)this + 112))
  {
    v11 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v11)
      CFRelease(v11);
  }
  if (*((_BYTE *)this + 96))
  {
    v12 = (const void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v12)
      CFRelease(v12);
  }
  if (*((_BYTE *)this + 80))
  {
    v13 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v13)
      CFRelease(v13);
  }
  if (*((_BYTE *)this + 64))
  {
    v14 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v14)
      CFRelease(v14);
  }
  if (*((_BYTE *)this + 48))
  {
    v15 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v15)
      CFRelease(v15);
  }
  if (*((_BYTE *)this + 32))
  {
    v16 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
}

_BYTE *std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[384] = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes((uint64_t)a1, (uint64_t *)a2);
    a1[384] = 1;
  }
  return a1;
}

void sub_196EAD018(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::FontPlatformSerializedAttributes *v2;

  if (*((_BYTE *)v2 + 384))
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WTF::RetainPtr<NSShadow>,WTF::RetainPtr<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34AD3F8[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 40) = v3;
  }
  return a1;
}

void sub_196EAD094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD380[v14])(&a12, v12);
  *(_DWORD *)(v12 + 40) = -1;
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::Font>::deref(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF *v4;
  const void *v5;

  v3 = (WTF *)a2[3];
  if (v3)
  {
    a2[3] = 0;
    *((_DWORD *)a2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)a2[1];
  if (v4)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (const void *)*a2;
  *a2 = 0;
  if (v5)
    CFRelease(v5);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)a2[4];
  a2[4] = 0;
  if (v3)
    CFRelease(v3);
  WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 2), a2);
  v5 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
    CFRelease(v4);
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<6ul,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs>::__alt[abi:sn180100]<WebCore::AttributedString::ParagraphStyleWithTableAndListIDs>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_()
{
  return WebCore::Color::Color();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v5;
  v6 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(a2 + 32) = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
  v5 = a3[2];
  a3[2] = 0;
  a2[2] = v5;
}

uint64_t std::__variant_detail::__alt<6ul,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs>::__alt[abi:sn180100]<WebCore::AttributedString::ParagraphStyleWithTableAndListIDs>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v4 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v4;
  return result;
}

uint64_t WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 16 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 8) && (*(_QWORD *)result & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)result & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v5;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(unsigned int *)(v4 + 48);
        if ((_DWORD)v6 != -1)
        {
          ((void (*)(char *, uint64_t))off_1E34AD380[v6])(&v8, v4 + 8);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_DWORD *)(v4 + 48) = -1;
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    v6 = (uint64_t *)((char *)v4 + 16);
    do
    {
      if (*v6)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v6, a2);
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayDisbursementRequest,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = *(WTF **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v3, a2);
      }
    }
  }
  return a1;
}

WebCore::ApplePaySessionPaymentRequest *WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest(WebCore::ApplePaySessionPaymentRequest *this, const WebCore::ApplePaySessionPaymentRequest *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  char v7;
  uint64_t v8;
  const void *v9;
  int v10;
  char v11;
  const void *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v18;
  _DWORD *v19;
  char v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 2) = v5;
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_BYTE *)a2 + 28);
  v8 = MEMORY[0x1E0DD8F88] + 16;
  *((_QWORD *)this + 4) = MEMORY[0x1E0DD8F88] + 16;
  *((_BYTE *)this + 28) = v7;
  *((_DWORD *)this + 6) = v6;
  v9 = (const void *)*((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v9;
  if (v9)
    CFRetain(v9);
  v10 = *((_DWORD *)a2 + 12);
  v11 = *((_BYTE *)a2 + 52);
  *((_QWORD *)this + 7) = v8;
  *((_BYTE *)this + 52) = v11;
  *((_DWORD *)this + 12) = v10;
  v12 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v12;
  if (v12)
    CFRetain(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 72, (uint64_t)a2 + 72);
  v13 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 46) = *((_WORD *)a2 + 46);
  *((_DWORD *)this + 22) = v13;
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 96, (uint64_t)a2 + 96);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112, (uint64_t)a2 + 112);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  v14 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 17) = v14;
  v15 = (_DWORD *)*((_QWORD *)a2 + 18);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 18) = v15;
  v16 = *(_OWORD *)((char *)a2 + 152);
  v17 = *(_OWORD *)((char *)a2 + 168);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *(_OWORD *)((char *)this + 168) = v17;
  *(_OWORD *)((char *)this + 152) = v16;
  v18 = (_DWORD *)*((_QWORD *)a2 + 24);
  if (v18)
    *v18 += 2;
  *((_QWORD *)this + 24) = v18;
  *((_WORD *)this + 100) = *((_WORD *)a2 + 100);
  v19 = (_DWORD *)*((_QWORD *)a2 + 26);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 26) = v19;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 216, (uint64_t)a2 + 216);
  v20 = *((_BYTE *)a2 + 232);
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 232) = v20;
  *((_BYTE *)this + 336) = 0;
  if (*((_BYTE *)a2 + 336))
  {
    *((_BYTE *)this + 240) = *((_BYTE *)a2 + 240);
    v21 = (_DWORD *)*((_QWORD *)a2 + 31);
    if (v21)
      *v21 += 2;
    *((_QWORD *)this + 31) = v21;
    v22 = (_DWORD *)*((_QWORD *)a2 + 32);
    if (v22)
      *v22 += 2;
    *((_QWORD *)this + 32) = v22;
    v23 = (_DWORD *)*((_QWORD *)a2 + 33);
    if (v23)
      *v23 += 2;
    *((_QWORD *)this + 33) = v23;
    v24 = (_DWORD *)*((_QWORD *)a2 + 34);
    if (v24)
      *v24 += 2;
    *((_QWORD *)this + 34) = v24;
    *((_BYTE *)this + 280) = *((_BYTE *)a2 + 280);
    v25 = (_DWORD *)*((_QWORD *)a2 + 36);
    if (v25)
      *v25 += 2;
    *((_QWORD *)this + 36) = v25;
    v26 = (_DWORD *)*((_QWORD *)a2 + 37);
    if (v26)
      *v26 += 2;
    *((_QWORD *)this + 37) = v26;
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 304, (uint64_t)a2 + 304);
    v27 = (_DWORD *)*((_QWORD *)a2 + 40);
    if (v27)
      *v27 += 2;
    *((_QWORD *)this + 40) = v27;
    *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
    *((_BYTE *)this + 336) = 1;
  }
  *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
  v28 = (_DWORD *)*((_QWORD *)a2 + 44);
  if (v28)
    *v28 += 2;
  *((_QWORD *)this + 44) = v28;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 560) = 0;
  if (*((_BYTE *)a2 + 560))
  {
    v29 = (_DWORD *)*((_QWORD *)a2 + 45);
    if (v29)
      *v29 += 2;
    *((_QWORD *)this + 45) = v29;
    *((_BYTE *)this + 368) = *((_BYTE *)a2 + 368);
    v30 = (_DWORD *)*((_QWORD *)a2 + 47);
    if (v30)
      *v30 += 2;
    *((_QWORD *)this + 47) = v30;
    v31 = (_DWORD *)*((_QWORD *)a2 + 48);
    if (v31)
      *v31 += 2;
    *((_QWORD *)this + 48) = v31;
    v32 = *(_OWORD *)((char *)a2 + 392);
    v33 = *(_OWORD *)((char *)a2 + 408);
    *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
    *(_OWORD *)((char *)this + 392) = v32;
    *(_OWORD *)((char *)this + 408) = v33;
    v34 = (_DWORD *)*((_QWORD *)a2 + 54);
    if (v34)
      *v34 += 2;
    *((_QWORD *)this + 54) = v34;
    *((_WORD *)this + 220) = *((_WORD *)a2 + 220);
    *((_BYTE *)this + 448) = 0;
    *((_BYTE *)this + 528) = 0;
    if (*((_BYTE *)a2 + 528))
    {
      std::construct_at[abi:sn180100]<WebCore::ApplePayLineItem,WebCore::ApplePayLineItem const&,WebCore::ApplePayLineItem*>((uint64_t)this + 448, (uint64_t)a2 + 448);
      *((_BYTE *)this + 528) = 1;
    }
    v35 = (_DWORD *)*((_QWORD *)a2 + 67);
    if (v35)
      *v35 += 2;
    *((_QWORD *)this + 67) = v35;
    v36 = (_DWORD *)*((_QWORD *)a2 + 68);
    if (v36)
      *v36 += 2;
    *((_QWORD *)this + 68) = v36;
    v37 = (_DWORD *)*((_QWORD *)a2 + 69);
    if (v37)
      *v37 += 2;
    *((_QWORD *)this + 69) = v37;
    *((_BYTE *)this + 560) = 1;
  }
  *((_BYTE *)this + 568) = 0;
  *((_BYTE *)this + 680) = 0;
  if (*((_BYTE *)a2 + 680))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest const&,WebCore::ApplePayAutomaticReloadPaymentRequest*>((uint64_t)this + 568, (uint64_t)a2 + 568);
    *((_BYTE *)this + 680) = 1;
  }
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 704) = 0;
  if (*((_BYTE *)a2 + 704))
  {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 688, (uint64_t)a2 + 688);
    *((_BYTE *)this + 704) = 1;
  }
  *((_BYTE *)this + 712) = 0;
  *((_BYTE *)this + 840) = 0;
  if (*((_BYTE *)a2 + 840))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest const&,WebCore::ApplePayDeferredPaymentRequest*>((uint64_t)this + 712, (uint64_t)a2 + 712);
    *((_BYTE *)this + 840) = 1;
  }
  std::__optional_copy_base<WebCore::ApplePayDisbursementRequest,false>::__optional_copy_base[abi:sn180100]((_BYTE *)this + 848, (uint64_t)a2 + 848);
  *((_WORD *)this + 440) = *((_WORD *)a2 + 440);
  v38 = (_DWORD *)*((_QWORD *)a2 + 111);
  if (v38)
    *v38 += 2;
  *((_QWORD *)this + 111) = v38;
  return this;
}

void sub_196EADBCC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  WebCore::PaymentContact *v13;
  WebCore::PaymentContact *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ApplePayInstallmentConfiguration *v17;
  WebCore::ApplePayRecurringPaymentRequest *v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v15, a2);
  v21 = *(WTF::StringImpl **)(v12 + 432);
  *(_QWORD *)(v12 + 432) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(WTF::StringImpl **)(v12 + 384);
  *(_QWORD *)(v12 + 384) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(WTF::StringImpl **)(v12 + 376);
  *(_QWORD *)(v12 + 376) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(WTF::StringImpl **)v18;
  *(_QWORD *)v18 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*(_BYTE *)(v12 + 560))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(v18, v20);
  v25 = *(WTF::StringImpl **)(v12 + 352);
  *(_QWORD *)(v12 + 352) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*(_BYTE *)(v12 + 336))
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration(v17, v20);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v20);
  v27 = *(WTF::StringImpl **)(v12 + 208);
  *(_QWORD *)(v12 + 208) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *(WTF::StringImpl **)(v12 + 192);
  *(_QWORD *)(v12 + 192) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(WTF::StringImpl **)(v12 + 144);
  *(_QWORD *)(v12 + 144) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v26);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *(WTF::StringImpl **)(v12 + 136);
  *(_QWORD *)(v12 + 136) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v26);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, v26);
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, v31);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, v32);
  WebCore::PaymentContact::~PaymentContact(v14);
  WebCore::PaymentContact::~PaymentContact(v13);
  v34 = *(WTF::StringImpl **)(v12 + 16);
  *(_QWORD *)(v12 + 16) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(WTF::StringImpl **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196EADEE8()
{
  JUMPOUT(0x196EADE78);
}

void sub_196EADEF0()
{
  JUMPOUT(0x196EADE80);
}

void sub_196EADEF8()
{
  JUMPOUT(0x196EADE88);
}

uint64_t WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3)
    return v2;
  if (v3 < 0x2762763)
  {
    v5 = 104 * v3;
    v6 = WTF::fastMalloc((WTF *)(104 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x68;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplePayShippingMethod>::uninitializedCopy<WebCore::ApplePayShippingMethod>(*(_QWORD *)a2, *(_QWORD *)a2 + 104 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196EADF94(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplePayShippingMethod>::uninitializedCopy<WebCore::ApplePayShippingMethod>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *(_QWORD *)a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a3 + 8) = v4;
    v5 = *(_DWORD **)(result + 16);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a3 + 16) = v5;
    v6 = *(_DWORD **)(result + 24);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a3 + 24) = v6;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    v7 = *(_OWORD *)(result + 48);
    v8 = *(_OWORD *)(result + 64);
    v9 = *(_OWORD *)(result + 80);
    *(_QWORD *)(a3 + 93) = *(_QWORD *)(result + 93);
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 80) = v9;
    *(_OWORD *)(a3 + 48) = v7;
    result += 104;
    a3 += 104;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x3333334)
  {
    v5 = 80 * v3;
    v6 = WTF::fastMalloc((WTF *)(80 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplePayLineItem>::uninitializedCopy<WebCore::ApplePayLineItem>(*(_QWORD *)a2, *(_QWORD *)a2 + 80 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196EAE0E4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplePayLineItem>::uninitializedCopy<WebCore::ApplePayLineItem>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;

  while (result != a2)
  {
    *(_BYTE *)a3 = *(_BYTE *)result;
    v3 = *(_DWORD **)(result + 8);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(a3 + 8) = v3;
    v4 = *(_DWORD **)(result + 16);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a3 + 16) = v4;
    v5 = *(_OWORD *)(result + 24);
    v6 = *(_OWORD *)(result + 40);
    *(_QWORD *)(a3 + 56) = *(_QWORD *)(result + 56);
    *(_OWORD *)(a3 + 40) = v6;
    *(_OWORD *)(a3 + 24) = v5;
    v7 = *(_DWORD **)(result + 64);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a3 + 64) = v7;
    *(_WORD *)(a3 + 72) = *(_WORD *)(result + 72);
    result += 80;
    a3 += 80;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x5555556)
  {
    v5 = 48 * v3;
    v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplePayInstallmentItem>::uninitializedCopy<WebCore::ApplePayInstallmentItem>(*(_QWORD *)a2, *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196EAE224(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplePayInstallmentItem>::uninitializedCopy<WebCore::ApplePayInstallmentItem>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  while (result != a2)
  {
    *(_BYTE *)a3 = *(_BYTE *)result;
    v3 = *(_DWORD **)(result + 8);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(a3 + 8) = v3;
    v4 = *(_DWORD **)(result + 16);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a3 + 16) = v4;
    v5 = *(_DWORD **)(result + 24);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a3 + 24) = v5;
    v6 = *(_DWORD **)(result + 32);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a3 + 32) = v6;
    v7 = *(_DWORD **)(result + 40);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a3 + 40) = v7;
    result += 48;
    a3 += 48;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayLineItem,WebCore::ApplePayLineItem const&,WebCore::ApplePayLineItem*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  __int128 v4;
  __int128 v5;
  _DWORD *v6;

  if (result)
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v2 = *(_DWORD **)(a2 + 8);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_OWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(result + 40) = v5;
    *(_OWORD *)(result + 24) = v4;
    v6 = *(_DWORD **)(a2 + 64);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 64) = v6;
    *(_WORD *)(result + 72) = *(_WORD *)(a2 + 72);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest const&,WebCore::ApplePayAutomaticReloadPaymentRequest*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  if (result)
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = *(_DWORD **)(a2 + 72);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
    v8 = *(_DWORD **)(a2 + 88);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 88) = v8;
    v9 = *(_DWORD **)(a2 + 96);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 96) = v9;
    v10 = *(_DWORD **)(a2 + 104);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(result + 104) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplePayPaymentTokenContext>::uninitializedCopy<WebCore::ApplePayPaymentTokenContext>(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196EAE558(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplePayPaymentTokenContext>::uninitializedCopy<WebCore::ApplePayPaymentTokenContext>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    a3[1] = v4;
    v5 = *(_DWORD **)(result + 16);
    if (v5)
      *v5 += 2;
    a3[2] = v5;
    v6 = *(_DWORD **)(result + 24);
    if (v6)
      *v6 += 2;
    a3[3] = v6;
    v7 = *(_DWORD **)(result + 32);
    if (v7)
      *v7 += 2;
    a3[4] = v7;
    result += 40;
    a3 += 5;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ApplePayPaymentTokenContext *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::ApplePayPaymentTokenContext **)a1;
    v5 = 40 * v3;
    do
    {
      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v4, a2);
      v4 = (WebCore::ApplePayPaymentTokenContext *)(v6 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest const&,WebCore::ApplePayDeferredPaymentRequest*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  if (result)
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = *(_DWORD **)(a2 + 72);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
    *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
    v8 = *(_DWORD **)(a2 + 96);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 96) = v8;
    v9 = *(_DWORD **)(a2 + 104);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 104) = v9;
    v10 = *(_DWORD **)(a2 + 112);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(result + 112) = v10;
    v11 = *(_DWORD **)(a2 + 120);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(result + 120) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_BYTE *std::__optional_copy_base<WebCore::ApplePayDisbursementRequest,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::__optional_copy_base<WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1, a2);
    a1[24] = 1;
  }
  return a1;
}

void sub_196EAE794(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ApplePayDisbursementRequest,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    if ((_DWORD)v4)
    {
      v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = (_DWORD)v4;
      *(_QWORD *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_196EAE818(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EAE878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 64) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 64);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 64) = -1;
  v5 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD488[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 64) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AE060[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WebCore::Pattern *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WebCore::Pattern **a2)
{
  WebCore::Pattern *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::Pattern>::deref(result);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100](a2, a3);
  result = *(__n128 *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(__n128 *)(v4 + 16) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__optional_move_base<WebCore::GraphicsDropShadow,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v4 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v4;
    WebCore::Color::Color();
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_196EAEA4C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 32))
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x8000000000000) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v6 = result;
        WTF::fastFree((WTF *)v3, a2);
        return v6;
      }
    }
  }
  return result;
}

_BYTE *std::__optional_move_base<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_196EAEB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 88))
  {
    v15 = *(unsigned int *)(v13 + 80);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 80) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EAEB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD4B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v5;
  result = WebCore::Color::Color();
  *(_QWORD *)(a2 + 24) = a3[3];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EAED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 56);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 56) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 56);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 56) = -1;
  v5 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD4E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 56) = v5;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  *a1 = a2;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(WTF **)a1;
  if (!v3)
  {
    if (!v4)
      return a1;
LABEL_9:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
    return a1;
  }
  v6 = 360 * v3;
  v7 = (_DWORD *)((char *)v4 + 352);
  do
  {
    v8 = *v7;
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, _DWORD *))off_1E34AD500[v8])(&v9, v7 - 86);
    *v7 = -1;
    v7 += 90;
    v6 -= 360;
  }
  while (v6);
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_9;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = a2[11];
  if ((v2 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v11 = a2;
      WTF::fastFree((WTF *)v5, a2);
      a2 = v11;
    }
  }
  v3 = a2[10];
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v12 = a2;
      WTF::fastFree((WTF *)v8, a2);
      a2 = v12;
    }
  }
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[3];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(a2 + 4, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 80);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, (void *)a2);
    }
  }
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v4])(&v8, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  WTF *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  v2 = a2[3];
  if ((v2 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = a2;
      WTF::fastFree((WTF *)v4, a2);
      a2 = v7;
    }
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  WTF *result;

  v3 = *(WTF **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *result;

  result = *(WTF **)(a2 + 16);
  if (result)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm29EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm31EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm34EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm36EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm37EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(a2 + 2, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm38EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(a2 + 2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm39EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[8];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm40EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[6];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm50EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm53EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(int a1, WebCore::GraphicsContextState *this)
{
  WebCore::GraphicsContextState::~GraphicsContextState(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm57EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(result + 48))
  {
    v2 = *(_QWORD *)(result + 24);
    if ((v2 & 0x8000000000000) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v10 = result;
        WTF::fastFree((WTF *)v4, a2);
        result = v10;
      }
    }
    v3 = *(_QWORD *)(result + 16);
    if ((v3 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v11 = result;
        WTF::fastFree((WTF *)v7, a2);
        return v11;
      }
    }
  }
  return result;
}

uint64_t WebKit::DocumentEditingContext::DocumentEditingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v4 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 216) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_DWORD *)(a1 + 224) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = 0;
  *(_DWORD *)(a1 + 228) = v4;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v5 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 232) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 240) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(a1 + 244) = v5;
  return a1;
}

_BYTE *std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[304] = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)a1, (__int128 *)a2);
    a1[304] = 1;
  }
  return a1;
}

void sub_196EAF770(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::EditorState::PostLayoutData *v2;

  if (*((_BYTE *)v2 + 304))
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::EditorState::PostLayoutData::PostLayoutData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  WebCore::Color::Color();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v5 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *((_QWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(a1 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = 0;
  *(_DWORD *)(a1 + 84) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 22);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v9;
  WebCore::Color::Color();
  v10 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v10;
  v11 = *(__int128 *)((char *)a2 + 136);
  v12 = *(__int128 *)((char *)a2 + 152);
  v13 = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 177) = *(__int128 *)((char *)a2 + 177);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 208), (uint64_t)(a2 + 13));
  v14 = *((_WORD *)a2 + 148);
  *(_BYTE *)(a1 + 298) = *((_BYTE *)a2 + 298);
  *(_WORD *)(a1 + 296) = v14;
  return a1;
}

void sub_196EAF8AC(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  WTF **v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if ((*v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(WTF::StringImpl **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if ((*v2 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v2 = *a2;
    v3 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v3;
    *(_OWORD *)a1 = v2;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v4 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 48) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *(_DWORD *)(a1 + 56) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *(_DWORD *)(a1 + 60) = v4;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v5 = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 64) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    *(_DWORD *)(a1 + 72) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = 0;
    *(_DWORD *)(a1 + 76) = v5;
    result = (__n128)a2[5];
    v7 = a2[6];
    *(__n128 *)(a1 + 80) = result;
    *(_OWORD *)(a1 + 96) = v7;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)(a1 + 48);
    if (v4)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::EditorState,false>::__optional_destruct_base[abi:sn180100]<WebKit::EditorState>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)a1 = v4;
  std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 32), (uint64_t)(a2 + 2));
  std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](a1 + 352, a2 + 22);
  *(_BYTE *)(a1 + 480) = 1;
  return a1;
}

void sub_196EAFAAC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WebKit::EditorState::PostLayoutData *v3;

  if (*(_BYTE *)(v2 + 336))
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v3, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    WebCore::FontAttributes::FontAttributes((uint64_t)a1, (uint64_t *)a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_196EAFB08(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::FontAttributes::FontAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v5 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(a1 + 64) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(a1 + 68) = v5;
  LOWORD(v5) = *((_WORD *)a2 + 36);
  *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
  *(_WORD *)(a1 + 72) = v5;
  return a1;
}

void sub_196EAFBC4(_Unwind_Exception *exception_object, void *a2)
{
  _DWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;

  if ((*v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if ((*v3 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *v2;
  *v2 = 0;
  if (v12)
    WTF::RefCounted<WebCore::Font>::deref(v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (*(_BYTE *)(a1 + 80))
  {
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v3);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v3);
      }
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & 0x8000000000000) != 0)
    {
      v15 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v3);
      }
    }
    v7 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
      WTF::RefCounted<WebCore::Font>::deref(v7);
  }
  return a1;
}

void WebKit::EditorState::PostLayoutData::~PostLayoutData(WebKit::EditorState::PostLayoutData *this, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 208, a2);
  v4 = *((_QWORD *)this + 12);
  if ((v4 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v3);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v5, v3);
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v3);
    }
  }
}

uint64_t WebKit::WebExtensionContextParameters::WebExtensionContextParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  WTF::URL::URL(a1 + 8, (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 128) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 132) = v10;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 136) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 144) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 148) = v11;
  return a1;
}

void WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(WebKit::WebExtensionContextParameters *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v7)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, (WTF::StringImpl *)a2);
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WebKit::WebExtensionContextParameters *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WebKit::WebExtensionContextParameters **)a1;
    v7 = 152 * v3;
    do
    {
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v6, a2);
      v6 = (WebKit::WebExtensionContextParameters *)(v8 + 152);
      v7 -= 152;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_BYTE *std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    WTF::URL::URL((uint64_t)a1, (uint64_t *)a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_196EB0044(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters(WebKit::WebExtensionMenuItemParameters *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*((_BYTE *)this + 104))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  if (*((_BYTE *)this + 80))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 8, (WTF::StringImpl *)a2);
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
}

_BYTE *std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)a1, a2);
    a1[176] = 1;
  }
  return a1;
}

void sub_196EB0170(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (result)
  {
    v3 = result;
    *(_OWORD *)result = *(_OWORD *)a2;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(result + 16), a2 + 16);
    *(_BYTE *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 72) = 0;
    if (*(_BYTE *)(a2 + 72))
    {
      v4 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(v3 + 64) = v4;
      *(_BYTE *)(v3 + 72) = 1;
    }
    v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v3 + 96) = v5;
    v6 = *(_OWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v3 + 154) = *(_OWORD *)(a2 + 154);
    *(_OWORD *)(v3 + 128) = v7;
    *(_OWORD *)(v3 + 144) = v8;
    *(_OWORD *)(v3 + 112) = v6;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 176))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 64, a2);
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, v3);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v4 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v4;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 154) = *(_OWORD *)(a2 + 154);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 176) = 1;
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct(*(_QWORD *)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 176 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = (WTF::StringImpl *)result;
    do
    {
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + 64, a2);
      result = std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + 16, v4);
      v3 = (WTF::StringImpl *)((char *)v3 + 176);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebKit::FocusedElementInformation::FocusedElementInformation(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[10];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  v13 = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a1 + 208) = 0;
  v14 = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 200) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v14;
  *(_QWORD *)&v10 = *(_QWORD *)((char *)a2 + 212);
  *((_DWORD *)a2 + 53) = 0;
  *(_QWORD *)(a1 + 212) = v10;
  v15 = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = 0;
  *(_QWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  v16 = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = 0;
  *(_QWORD *)(a1 + 240) = v16;
  *(_WORD *)(a1 + 248) = *((_WORD *)a2 + 124);
  WTF::URL::URL(a1 + 256, (uint64_t *)a2 + 32);
  *(_WORD *)(a1 + 296) = *((_WORD *)a2 + 148);
  v17 = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = 0;
  *(_QWORD *)(a1 + 304) = v17;
  v18 = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = 0;
  *(_QWORD *)(a1 + 312) = v18;
  v19 = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = 0;
  *(_QWORD *)(a1 + 320) = v19;
  *(_WORD *)(a1 + 328) = *((_WORD *)a2 + 164);
  WebCore::Color::Color();
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v20 = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = 0;
  *(_QWORD *)(a1 + 344) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 88);
  *((_DWORD *)a2 + 88) = 0;
  *(_DWORD *)(a1 + 352) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 89);
  *((_DWORD *)a2 + 89) = 0;
  *(_DWORD *)(a1 + 356) = v20;
  v21 = *(__int128 *)((char *)a2 + 360);
  v22 = *(__int128 *)((char *)a2 + 376);
  v23 = *(__int128 *)((char *)a2 + 392);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_OWORD *)(a1 + 376) = v22;
  *(_OWORD *)(a1 + 392) = v23;
  *(_OWORD *)(a1 + 360) = v21;
  return a1;
}

void sub_196EB04A4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v6 = (WTF::StringImpl *)v2[40];
  v2[40] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)v2[39];
  v2[39] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)v2[38];
  v2[38] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *v4;
  *v4 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)v2[30];
  v2[30] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)v2[28];
  v2[28] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v13 = (WTF::StringImpl *)v2[24];
  v2[24] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::VectorDestructor<true,WebCore::Color>::destruct(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  for (; result != a2; ++result)
  {
    if ((*result & 0x8000000000000) != 0)
    {
      v2 = (unsigned int *)(*result & 0xFFFFFFFFFFFFLL);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v5 = a2;
        v6 = result;
        WTF::fastFree((WTF *)v2, a2);
        a2 = v5;
        result = v6;
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 8, a2 + 8);
  v4 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v4;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 208, a2 + 208);
  v5 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v5;
  v6 = *(_OWORD *)(a2 + 248);
  v7 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 278) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 264) = v7;
  *(_OWORD *)(a1 + 248) = v6;
  *(_BYTE *)(a1 + 296) = 1;
  return a1;
}

void sub_196EB06B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  const void *v4;

  v4 = *(const void **)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::FrameTreeCreationParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::FrameTreeCreationParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  char *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (char *)result + 24;
    do
    {
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3);
      result = (WTF::StringImpl *)*((_QWORD *)v3 - 1);
      *((_QWORD *)v3 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)(v3 + 16);
      v3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  char v12;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(WTF **)a1;
  if (v3)
  {
    v5 = 312 * v3;
    v6 = (char *)v4 + 296;
    do
    {
      WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6);
      v8 = (WTF::StringImpl *)*((_QWORD *)v6 - 7);
      *((_QWORD *)v6 - 7) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *((unsigned int *)v6 - 16);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v12, v6 - 88);
      *((_DWORD *)v6 - 16) = -1;
      v10 = (const void *)*((_QWORD *)v6 - 12);
      *((_QWORD *)v6 - 12) = 0;
      if (v10)
        CFRelease(v10);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v6 - 288));
      v6 += 312;
      v5 -= 312;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebKit::FrameTreeNodeData>::destruct(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v12 = v2;
    v13 = v3;
    v5 = (uint64_t)a1 + 296;
    do
    {
      WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v7 = *(WTF::StringImpl **)(v5 - 56);
      *(_QWORD *)(v5 - 56) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(unsigned int *)(v5 - 64);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v11, v5 - 88);
      *(_DWORD *)(v5 - 64) = -1;
      v9 = *(const void **)(v5 - 96);
      *(_QWORD *)(v5 - 96) = 0;
      if (v9)
        CFRelease(v9);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v5 - 288));
      v10 = (void *)(v5 + 16);
      v5 += 312;
    }
    while (v10 != a2);
  }
}

_BYTE *std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>((uint64_t)a1, (uint64_t *)a2);
    a1[112] = 1;
  }
  return a1;
}

void sub_196EB0978(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebKit::WebsitePoliciesData *v2;

  if (*((_BYTE *)v2 + 112))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    *(_QWORD *)result = 0;
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(result + 20) = v3;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = 0;
    *(_DWORD *)(result + 36) = v4;
    v5 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v5;
    v6 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v6;
    v7 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(result + 56) = v7;
    v8 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(result + 64) = v8;
    LOWORD(v8) = *((_WORD *)a2 + 36);
    *(_BYTE *)(result + 74) = *((_BYTE *)a2 + 74);
    *(_WORD *)(result + 72) = v8;
    *(_BYTE *)(result + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(result + 88) = 0;
    v9 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(result + 88) = v9;
    v10 = a2[12];
    *(_QWORD *)(result + 103) = *(uint64_t *)((char *)a2 + 103);
    *(_QWORD *)(result + 96) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::TextIndicatorData::TextIndicatorData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  v7 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  WebCore::Color::Color();
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

void sub_196EB0B14(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;

  v5 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(_DWORD **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::URL::URL(a1 + 72, (uint64_t *)(a2 + 72));
  WTF::URL::URL(a1 + 112, (uint64_t *)(a2 + 112));
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v7;
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v8;
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v10 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v10;
  v11 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v11;
  v12 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v12;
  v13 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v13;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    v14 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a1 + 248) = v14;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 272) = 1;
  }
  WebCore::TextIndicatorData::TextIndicatorData(a1 + 280, (__int128 *)(a2 + 280));
  v15 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a1 + 392) = v15;
  v16 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v17 = *(_OWORD *)(a2 + 424);
  v18 = *(_OWORD *)(a2 + 440);
  v19 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 424) = v17;
  *(_OWORD *)(a1 + 440) = v18;
  v20 = *(_OWORD *)(a2 + 488);
  v21 = *(_OWORD *)(a2 + 504);
  v22 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v22;
  *(_OWORD *)(a1 + 488) = v20;
  *(_OWORD *)(a1 + 504) = v21;
  v23 = *(_OWORD *)(a2 + 552);
  v24 = *(_OWORD *)(a2 + 568);
  v25 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 593) = *(_OWORD *)(a2 + 593);
  *(_OWORD *)(a1 + 568) = v24;
  *(_OWORD *)(a1 + 584) = v25;
  *(_OWORD *)(a1 + 552) = v23;
  *(_OWORD *)(a1 + 624) = 0u;
  v26 = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a2 + 624) = 0;
  *(_QWORD *)(a1 + 624) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 632);
  *(_DWORD *)(a2 + 632) = 0;
  *(_DWORD *)(a1 + 632) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 636);
  *(_DWORD *)(a2 + 636) = 0;
  *(_DWORD *)(a1 + 636) = v26;
  return a1;
}

void sub_196EB0D50(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (*(_BYTE *)(v2 + 272))
  {
    v6 = *(_DWORD **)(v2 + 248);
    *(_QWORD *)(v2 + 248) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
  }
  v7 = *(WTF::StringImpl **)(v2 + 208);
  *(_QWORD *)(v2 + 208) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v9, a2);
  v10 = *(WTF::StringImpl **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v4;
  *v4 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v3;
  *v3 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(_QWORD *)(a1 + 96);
    if ((v3 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
    v4 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    v5 = *(_DWORD **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    v6 = *(_DWORD **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    v7 = *(WTF **)(a1 + 48);
    if (v7)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return a1;
}

uint64_t std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
    *(_QWORD *)(a1 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = 0;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v5;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_196EB0FF4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WebCore::PrivateClickMeasurement,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 24) = v6;
    std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](a1 + 56, a2 + 56);
    v7 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v7;
    *(_BYTE *)(a1 + 224) = 0;
    *(_BYTE *)(a1 + 232) = 0;
    if (*(_BYTE *)(a2 + 232))
    {
      v8 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(a1 + 224) = v8;
      *(_BYTE *)(a1 + 232) = 1;
    }
    v9 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a1 + 240) = v9;
    v10 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a1 + 248) = v10;
    v11 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a1 + 256) = v11;
    v12 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a1 + 264) = v12;
    *(_BYTE *)(a1 + 272) = 0;
    *(_BYTE *)(a1 + 296) = 0;
    if (*(_BYTE *)(a2 + 296))
    {
      v13 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(a1 + 272) = v13;
      v14 = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(a1 + 280) = v14;
      v15 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a2 + 288) = 0;
      *(_QWORD *)(a1 + 288) = v15;
      *(_BYTE *)(a1 + 296) = 1;
    }
    v16 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a1 + 304) = v16;
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

uint64_t WebCore::PrivateClickMeasurement::PrivateClickMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = v6;
  std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](a1 + 56, a2 + 56);
  v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v8 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 224) = v8;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v9 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v9;
  v10 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v10;
  v11 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 256) = v11;
  v12 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v12;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v13 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a1 + 272) = v13;
    v14 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a1 + 280) = v14;
    v15 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a1 + 288) = v15;
    *(_BYTE *)(a1 + 296) = 1;
  }
  v16 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v16;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 33);
  *(_BYTE *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_OWORD *)(v8 - 23) = v7;
  *(_OWORD *)(v8 - 32) = v6;
  *(_BYTE *)(v8 + 128) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v10 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 224) = v10;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v11 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v11;
  v12 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v12;
  v13 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 256) = v13;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v14;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v15 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a1 + 272) = v15;
    v16 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a1 + 280) = v16;
    v17 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a1 + 288) = v17;
    *(_BYTE *)(a1 + 296) = 1;
  }
  v18 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v18;
  return a1;
}

uint64_t std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v2 = *(_BYTE *)(a2 + 2);
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 2) = v2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v3 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v3;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(result + 24) = v4;
      *(_BYTE *)(result + 32) = 1;
    }
    *(_BYTE *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(result + 40) = v5;
      *(_BYTE *)(result + 48) = 1;
    }
    *(_BYTE *)(result + 56) = 0;
    *(_BYTE *)(result + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v6 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(result + 56) = v6;
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(result + 64) = v7;
      v8 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(result + 72) = v8;
      v9 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(result + 80) = v9;
      *(_BYTE *)(result + 88) = 1;
    }
    *(_BYTE *)(result + 96) = 0;
    *(_BYTE *)(result + 120) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      v10 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(result + 96) = v10;
      v11 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(result + 104) = v11;
      v12 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(result + 112) = v12;
      *(_BYTE *)(result + 120) = 1;
    }
    *(_BYTE *)(result + 128) = 1;
  }
  return result;
}

_BYTE *std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[664] = 0;
  if (*(_BYTE *)(a2 + 664))
  {
    WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)a1, (uint64_t *)a2);
    a1[664] = 1;
  }
  return a1;
}

void sub_196EB1384(_Unwind_Exception *exception_object)
{
  WebKit::WebHitTestResultData *v1;

  if (*((_BYTE *)v1 + 664))
    WebKit::WebHitTestResultData::~WebHitTestResultData(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebHitTestResultData::WebHitTestResultData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)((char *)a2 + 76);
  *(_OWORD *)(a1 + 64) = v12;
  std::__optional_move_base<WebKit::FrameInfoData,false>::__optional_move_base[abi:sn180100](a1 + 96, (uint64_t)(a2 + 12));
  v13 = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 400) = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 416) = v13;
  v14 = a2[54];
  a2[54] = 0;
  *(_QWORD *)(a1 + 432) = v14;
  v15 = a2[55];
  a2[55] = 0;
  *(_QWORD *)(a1 + 440) = v15;
  v16 = a2[56];
  a2[56] = 0;
  *(_QWORD *)(a1 + 448) = v16;
  v17 = a2[57];
  a2[57] = 0;
  *(_QWORD *)(a1 + 456) = v17;
  v18 = a2[58];
  a2[58] = 0;
  *(_QWORD *)(a1 + 464) = v18;
  v19 = a2[59];
  a2[59] = 0;
  *(_QWORD *)(a1 + 472) = v19;
  v20 = a2[60];
  a2[60] = 0;
  *(_QWORD *)(a1 + 480) = v20;
  *(_WORD *)(a1 + 488) = *((_WORD *)a2 + 244);
  WebCore::DictionaryPopupInfo::DictionaryPopupInfo((_QWORD *)(a1 + 496), (uint64_t)(a2 + 62));
  v21 = a2[82];
  a2[82] = 0;
  *(_QWORD *)(a1 + 656) = v21;
  return a1;
}

void sub_196EB14C8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v5 = *(WTF::StringImpl **)(v2 + 480);
  *(_QWORD *)(v2 + 480) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v2 + 472);
  *(_QWORD *)(v2 + 472) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(v2 + 464);
  *(_QWORD *)(v2 + 464) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v7, a2);
  v8 = *(unsigned int **)(v2 + 456);
  *(_QWORD *)(v2 + 456) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  v9 = *(WTF::StringImpl **)(v2 + 448);
  *(_QWORD *)(v2 + 448) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 440);
  *(_QWORD *)(v2 + 440) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v2 + 432);
  *(_QWORD *)(v2 + 432) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  v13 = *(WTF::StringImpl **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v12);
    else
      *(_DWORD *)v20 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WebKit::FrameInfoData,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>((_WORD *)a1, a2);
    *(_BYTE *)(a1 + 296) = 1;
  }
  return a1;
}

void sub_196EB1718(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

_WORD *std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>(_WORD *result, uint64_t a2)
{
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if (result)
  {
    v3 = result;
    *result = *(_WORD *)a2;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)(result + 4), a2 + 8);
    v4 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *((_QWORD *)v3 + 25) = v4;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v3 + 104), a2 + 208);
    v5 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *((_QWORD *)v3 + 30) = v5;
    v6 = *(_OWORD *)(a2 + 248);
    v7 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 139) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v3 + 132) = v7;
    *(_OWORD *)(v3 + 124) = v6;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EB17B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  const void *v4;

  v4 = *(const void **)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::DictionaryPopupInfo::DictionaryPopupInfo(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  WebCore::TextIndicatorData::TextIndicatorData((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
  WebCore::AttributedString::AttributedString();
  return a1;
}

void sub_196EB1830(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *(_QWORD *)(v2 + 104);
  if ((v4 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v5 = *(_DWORD **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *(WTF **)(v2 + 56);
  if (v8)
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PasteboardImage::~PasteboardImage(WebCore::PasteboardImage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v4);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
}

uint64_t std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

void WebCore::PasteboardWebContent::~PasteboardWebContent(WebCore::PasteboardWebContent *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;

  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v3);
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v3);
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v3);
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v3);
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

const char **std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](const char ***a1, const char **a2)
{
  const char **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(result);
    return (const char **)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v5 = 56 * v3;
    do
    {
      v6 = v4[12];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E34AD740[v6])(&v8, v4);
      v4[12] = -1;
      v4 += 14;
      v5 -= 56;
    }
    while (v5);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB1C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD740[v15])(&a13, v13);
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AD740[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD758[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  v5 = *(_OWORD *)(a3 + 3);
  *(_BYTE *)(a2 + 40) = *((_BYTE *)a3 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
      return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(result, (uint64_t *)a2);
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(result + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(result + 12) = v3;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

WTF::StringImpl *std::__optional_storage_base<WebKit::HTTPBody,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::HTTPBody,false>>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = result;
  if (*((unsigned __int8 *)result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*((_BYTE *)result + 24))
    {
      WTF::String::operator=((WTF::StringImpl **)result, a2);
      v4 = (uint64_t *)((char *)v3 + 8);
      v5 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v5)
      {
        v6 = *v4;
        v7 = 56 * v5;
        do
        {
          v8 = *(unsigned int *)(v6 + 48);
          if ((_DWORD)v8 != -1)
            ((void (*)(char *, uint64_t))off_1E34AD740[v8])(&v11, v6);
          *(_DWORD *)(v6 + 48) = -1;
          v6 += 56;
          v7 -= 56;
        }
        while (v7);
      }
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, (_DWORD *)a2 + 2);
    }
  }
  else if (*((_BYTE *)result + 24))
  {
    return std::__optional_destruct_base<WebKit::HTTPBody,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = v9;
    v10 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)result + 1) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *((_DWORD *)result + 4) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *((_DWORD *)result + 5) = v10;
    *((_BYTE *)result + 24) = 1;
  }
  return result;
}

WTF::StringImpl *std::__optional_destruct_base<WebKit::HTTPBody,false>::reset[abi:sn180100](WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  if (*((_BYTE *)result + 24))
  {
    v2 = result;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 8, a2);
    result = *(WTF::StringImpl **)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v2 + 24) = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::SerializedScriptValue *v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
    {
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v6 = (WebCore::SerializedScriptValue *)v2;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
      }
    }
  }
  return a1;
}

uint64_t WebKit::BackForwardListItemState::BackForwardListItemState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  WebKit::FrameState::FrameState(a1 + 24, (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v5;
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v6;
  return a1;
}

void sub_196EB2134(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::ViewSnapshot *WTF::RefCounted<WebKit::ViewSnapshot>::deref(WebKit::ViewSnapshot *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::ViewSnapshot::~ViewSnapshot(result);
    return (WebKit::ViewSnapshot *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::SerializedScriptValue *v8;

  if (*(_BYTE *)(a1 + 280))
  {
    v2 = *(unsigned int **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    if (v2)
    {
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v8 = (WebCore::SerializedScriptValue *)v2;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
      }
    }
    WebKit::FrameState::~FrameState((WTF::StringImpl **)(a1 + 8));
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase::RequestData *a4, uint64_t a5)
{
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(a1 + 16), a4);
  v8 = (_DWORD *)*((_QWORD *)a4 + 19);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a1 + 168) = v8;
  v9 = (_DWORD *)*((_QWORD *)a4 + 20);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a1 + 176) = v9;
  v10 = (_DWORD *)*((_QWORD *)a4 + 21);
  if (v10)
    ++*v10;
  *(_QWORD *)(a1 + 184) = v10;
  v11 = *((_QWORD *)a4 + 22);
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a4 + 184);
  *(_QWORD *)(a1 + 192) = v11;
  v12 = (const void *)*((_QWORD *)a4 + 24);
  *(_QWORD *)(a1 + 208) = v12;
  if (v12)
    CFRetain(v12);
  *(_WORD *)(a1 + 216) = *(_WORD *)a5;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 224, a5 + 8);
  v13 = *(_QWORD *)(a5 + 200);
  *(_QWORD *)(a5 + 200) = 0;
  *(_QWORD *)(a1 + 416) = v13;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 424, a5 + 208);
  v14 = *(_QWORD *)(a5 + 240);
  *(_QWORD *)(a5 + 240) = 0;
  *(_QWORD *)(a1 + 456) = v14;
  v15 = *(_OWORD *)(a5 + 248);
  v16 = *(_OWORD *)(a5 + 264);
  *(_OWORD *)(a1 + 494) = *(_OWORD *)(a5 + 278);
  *(_OWORD *)(a1 + 464) = v15;
  *(_OWORD *)(a1 + 480) = v16;
  return a1;
}

void sub_196EB2378(_Unwind_Exception *a1)
{
  WebCore::ResourceRequestBase *v1;

  WebCore::ResourceRequestBase::~ResourceRequestBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v4;
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 224, a2 + 224);
  v5 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a1 + 416) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 424, a2 + 424);
  v6 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  *(_QWORD *)(a1 + 456) = v6;
  v7 = *(_OWORD *)(a2 + 464);
  v8 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 494) = *(_OWORD *)(a2 + 494);
  *(_OWORD *)(a1 + 464) = v7;
  *(_OWORD *)(a1 + 480) = v8;
  return a1;
}

void sub_196EB246C(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  WebCore::ResourceRequestBase *v3;
  const void *v5;
  const void *v6;

  v5 = *(const void **)(v1 + 416);
  *(_QWORD *)(v1 + 416) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v3);
  v6 = *(const void **)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::UserContentControllerParameters>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v4 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v4;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  v5 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(result + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v5;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v6 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(result + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(result + 68) = v6;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  v7 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(result + 72) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(result + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = 0;
  *(_DWORD *)(result + 84) = v7;
  *(_BYTE *)(result + 88) = 1;
  return result;
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  _DWORD *v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = a4;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 24, a5);
  v16 = *(_QWORD *)(a5 + 192);
  *(_QWORD *)(a5 + 192) = 0;
  *(_QWORD *)(a1 + 216) = v16;
  LODWORD(v16) = *(_DWORD *)a6;
  *(_DWORD *)(a1 + 227) = *(_DWORD *)(a6 + 3);
  *(_DWORD *)(a1 + 224) = v16;
  v17 = *(_DWORD **)(a6 + 8);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(a1 + 232) = v17;
  v18 = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 256) = v18;
  v19 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 272) = v19;
  *(_BYTE *)(a1 + 280) = a8;
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 288, a9);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 568, a10);
  *(_QWORD *)(a1 + 584) = a11;
  return a1;
}

void sub_196EB26B4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceRequestBase *v2;
  _QWORD *v3;
  WebCore::ResourceResponseData *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;

  WebCore::ResourceResponseData::~ResourceResponseData(v4, a2);
  v7 = (WTF::StringImpl *)v3[34];
  v3[34] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)v3[29];
  v3[29] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (const void *)v3[27];
  v3[27] = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v3)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
    v4 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = 0;
  *(_QWORD *)(a1 + 216) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 56);
  *(_DWORD *)(a1 + 227) = *(_DWORD *)((char *)a2 + 227);
  *(_DWORD *)(a1 + 224) = v5;
  v6 = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = 0;
  *(_QWORD *)(a1 + 232) = v6;
  v7 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v7;
  v8 = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = 0;
  *(_QWORD *)(a1 + 272) = v8;
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 288, (uint64_t)(a2 + 18));
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 568, (uint64_t)a2 + 568);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  return a1;
}

void sub_196EB2844(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceRequestBase *v2;
  _QWORD *v3;
  WebCore::ResourceResponseData *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;

  WebCore::ResourceResponseData::~ResourceResponseData(v4, a2);
  v7 = (WTF::StringImpl *)v3[34];
  v3[34] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)v3[29];
  v3[29] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (const void *)v3[27];
  v3[27] = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

WTF::RefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::RefCountedBase **a2)
{
  WTF::RefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB2928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD7D0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)v4 + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v9, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v3);
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v2])(&v5, a1 + 40);
    *(_DWORD *)(a1 + 56) = -1;
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v3])(&v6, a1 + 8);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34AD818[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 16) = v3;
  }
  return a1;
}

void sub_196EB2C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 16);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v14])(&a12, v12);
  *(_DWORD *)(v12 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)(32 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = v6 + 8;
        v9 = 32 * v7;
        v10 = *(_QWORD *)a3 + 8;
        do
        {
          *(_BYTE *)(v8 - 8) = *(_BYTE *)(v10 - 8);
          v8 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor(v8, v10)+ 32;
          v10 += 32;
          v9 -= 32;
        }
        while (v9);
      }
    }
  }
}

void sub_196EB2D4C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = *a3;
  if (*a3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

uint64_t WebCore::IDBGetResult::IDBGetResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v6;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 48, (uint64_t)(a2 + 6));
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 80, (uint64_t)(a2 + 10));
  std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 104), (uint64_t)(a2 + 13));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v7 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v7;
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  return a1;
}

void sub_196EB2F30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v19 = *(unsigned int *)(v13 + 96);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v19])(&a12, v17);
  *(_DWORD *)(v13 + 96) = -1;
  v20 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(&a13, v16);
  *(_DWORD *)(v13 + 64) = -1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v21);
  v23 = *(_QWORD *)v13;
  *(_QWORD *)v13 = 0;
  if (v23)
    WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v23, v22);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a2);
    a1[24] = 1;
  }
  return a1;
}

void sub_196EB300C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34AD860[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB3084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD860[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AD860[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD880[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::IDBCursorRecord>::destruct(*(_QWORD *)a1, (void *)(*(_QWORD *)a1 + 104 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::IDBCursorRecord>::destruct(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if ((void *)result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 88, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 72, v6);
      result = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v5 + 64) = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(result, a2);
      v7 = *(unsigned int *)(v5 + 56);
      if ((_DWORD)v7 != -1)
        result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v9, v5 + 40);
      *(_DWORD *)(v5 + 56) = -1;
      v8 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v8 != -1)
        result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v8])(&v10, v5 + 8);
      *(_DWORD *)(v5 + 24) = -1;
      v5 += 104;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::IDBValue>::destruct(*(_QWORD *)a1, (uint64_t *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::IDBValue>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 3), a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), v4);
      result = *v3;
      *v3 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(result, a2);
      v3 += 5;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)(a1 + 40);
    do
    {
      if (*((_QWORD *)v4 - 5) != -1)
      {
        v5 = *((_QWORD *)v4 + 3);
        if (v5)
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v5, a2);
        if (*((_BYTE *)v4 + 8))
        {
          v6 = *v4;
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, unsigned int *))off_1E34AD860[v6])(&v9, v4 - 4);
          *v4 = -1;
        }
        v7 = (WTF::StringImpl *)*((_QWORD *)v4 - 3);
        *((_QWORD *)v4 - 3) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 18;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100](int a1, bmalloc::api *this)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  if (this)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, this);
    v4 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, this);
      else
        *(_DWORD *)v4 -= 2;
    }
    bmalloc::api::isoDeallocate(this, this);
  }
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 24;
    do
    {
      if (*(_QWORD *)(v4 - 24) != -1)
      {
        v5 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_1E34AD860[v5])(&v8, v4 + 8);
        *(_DWORD *)(v4 + 24) = -1;
        v6 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 64;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::IDBOpenRequestData::IDBOpenRequestData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 32, (uint64_t)(a2 + 2));
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 64, (uint64_t)(a2 + 4));
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v6 = *((_QWORD *)a2 + 13);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v6;
  return a1;
}

void sub_196EB356C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WTF::StringImpl *v17;

  v16 = *(unsigned int *)(v13 + 56);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v16])(&a13, v14);
  *(_DWORD *)(v13 + 56) = -1;
  v17 = *(WTF::StringImpl **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v7, a1 + 40);
    *(_DWORD *)(a1 + 64) = -1;
    v4 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v8, a1 + 8);
    *(_DWORD *)(a1 + 32) = -1;
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v2])(&v5, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v6, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

void std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  bmalloc::api *v4;
  void *v5;

  if (a2)
  {
    v3 = a2 + 6;
    v4 = (bmalloc::api *)a2[6];
    *v3 = 0;
    if (v4)
      std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)v3, v4);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 4), v4);
    WTF::fastFree((WTF *)a2, v5);
  }
}

unsigned int **std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100](unsigned int **result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[6];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v3])(&v4, v2 + 2);
    v2[6] = -1;
    return (unsigned int **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

void std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  if (a2)
  {
    WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 17), a2);
    if (*((_BYTE *)a2 + 128))
    {
      v4 = *((unsigned int *)a2 + 30);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t *))off_1E34AD860[v4])(&v10, a2 + 13);
      *((_DWORD *)a2 + 30) = -1;
    }
    v5 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v11, a2 + 10);
    *((_DWORD *)a2 + 24) = -1;
    v6 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v6])(&v12, a2 + 6);
    *((_DWORD *)a2 + 16) = -1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 3), v3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v7);
    v9 = *a2;
    *a2 = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v9, v8);
    bmalloc::api::isoDeallocate((bmalloc::api *)a2, v8);
  }
}

uint64_t std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t result;
  char v7;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 64))
    {
      v3 = *(unsigned int *)(a2 + 56);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E34AD860[v3])(&v7, a2 + 40);
      *(_DWORD *)(a2 + 56) = -1;
    }
    WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 24, (void *)a2);
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 8, v4);
    return bmalloc::api::isoDeallocate((bmalloc::api *)a2, v5);
  }
  return result;
}

void WebCore::IDBResultData::~IDBResultData(WebCore::IDBResultData *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  bmalloc::api *v7;
  WTF::StringImpl *v8;

  v4 = *((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 88);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((uint64_t)v2, v3);
  v5 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)this + 80, v5);
  std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100]((unsigned int **)this + 9, 0);
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)this + 64, v6);
  v7 = (bmalloc::api *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((_DWORD)this + 56, v7);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebCore::LinearTimingFunction::clone@<X0>(WebCore::LinearTimingFunction *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E34AD8A0;
  result = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 16, (uint64_t)this + 16);
  *a2 = v4;
  return result;
}

void sub_196EB39E4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

BOOL WebCore::LinearTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  v4 = *(unsigned int *)(a1 + 28);
  return (_DWORD)v4 == *(_DWORD *)(a2 + 28)
      && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 16 * v4) == 0;
}

__n128 WebCore::CubicBezierTimingFunction::clone@<Q0>(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  __n128 v7;

  v4 = WTF::fastMalloc((WTF *)0x38);
  v5 = this[3].n128_u8[0];
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E34AD8D8;
  result = this[1];
  v7 = this[2];
  *(__n128 *)(v4 + 16) = result;
  *(__n128 *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 48) = v5;
  *a2 = v4;
  return result;
}

BOOL WebCore::CubicBezierTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 1)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 48);
  if (v4 != *(unsigned __int8 *)(a2 + 48))
    return 0;
  if (v4 == 4)
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32))
    {
      return *(double *)(a1 + 40) == *(double *)(a2 + 40);
    }
    return 0;
  }
  return 1;
}

uint64_t WebCore::StepsTimingFunction::clone@<X0>(WebCore::StepsTimingFunction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  __int16 v6;

  result = WTF::fastMalloc((WTF *)0x18);
  v5 = *((_DWORD *)this + 3);
  v6 = *((_WORD *)this + 8);
  *(_QWORD *)result = &off_1E34AD910;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v5;
  *(_WORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::StepsTimingFunction::type(WebCore::StepsTimingFunction *this)
{
  return 2;
}

uint64_t WebCore::StepsTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result != 2 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  if (*(_BYTE *)(a1 + 17) && *(_BYTE *)(a2 + 17))
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 17) != 0) == (*(_BYTE *)(a2 + 17) != 0))
    return 1;
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a2 + 17))
      return 0;
    v5 = *(unsigned __int8 *)(a1 + 16);
    return v5 == 5;
  }
  if (*(_BYTE *)(a2 + 17))
  {
    v5 = *(unsigned __int8 *)(a2 + 16);
    return v5 == 5;
  }
  __break(1u);
  return result;
}

__n128 WebCore::SpringTimingFunction::clone@<Q0>(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E34AD948;
  result = this[1];
  v6 = this[2];
  *(__n128 *)(v4 + 16) = result;
  *(__n128 *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SpringTimingFunction::type(WebCore::SpringTimingFunction *this)
{
  return 3;
}

BOOL WebCore::SpringTimingFunction::operator==(double *a1, double *a2)
{
  return (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 24))(a2) == 3
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5];
}

__n128 WebCore::ResourceLoadStatistics::ResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)((char *)a2 + 17);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  v9 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = 0;
  v10 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = 0;
  v11 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = 0;
  v12 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 120) = 0;
  v13 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_QWORD *)(a1 + 144) = 0;
  v14 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(a1 + 144) = v14;
  *(_QWORD *)(a1 + 152) = 0;
  v15 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = 0;
  v16 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(a1 + 160) = v16;
  *(_QWORD *)(a1 + 168) = 0;
  v17 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 168) = v17;
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  result = *(__n128 *)(a2 + 23);
  *(__n128 *)(a1 + 184) = result;
  return result;
}

void WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(WebCore::ResourceLoadStatistics *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 21);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 20);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 19);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 18);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 15);
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 14);
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  v9 = (WTF::StringImpl **)*((_QWORD *)this + 13);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, a2);
  v10 = (WTF::StringImpl **)*((_QWORD *)this + 12);
  if (v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2);
  v11 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, a2);
  v12 = (WTF::StringImpl **)*((_QWORD *)this + 9);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, a2);
  v13 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, a2);
  v14 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, a2);
  v15 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v15)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
  v16 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v16)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, a2);
  v17 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[4];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::RawFile>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::RawFile>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ShareData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF::StringImpl ****)a1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      if (*v4)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v4, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
    v4 = *(WTF::StringImpl ****)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB4200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD970[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AD970[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AD988[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SB_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SB_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void WebCore::TargetedElementInfo::~TargetedElementInfo(WebCore::TargetedElementInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 19);
  if (v3)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WebCore::DictionaryPopupInfo::~DictionaryPopupInfo(WebCore::DictionaryPopupInfo *this)
{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  MEMORY[0x19AEAEECC]((char *)this + 120);
  v3 = *((_QWORD *)this + 13);
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v2);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, v2);
  }
}

uint64_t WebCore::PrivateClickMeasurement::PrivateClickMeasurement(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _BYTE *a6, _OWORD *a7, uint64_t a8, _OWORD *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *a2;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v12;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = *a5;
  *(_BYTE *)(a1 + 32) = *a6;
  *(_OWORD *)(a1 + 40) = *a7;
  std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](a1 + 56, a8);
  v14 = a9[1];
  *(_OWORD *)(a1 + 192) = *a9;
  *(_OWORD *)(a1 + 208) = v14;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a10 + 8))
  {
    v15 = *a10;
    *a10 = 0;
    *(_QWORD *)(a1 + 224) = v15;
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 272) = 0;
  v16 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 304) = v16;
  return a1;
}

void WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 272, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v8)
    CFRelease(v8);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 224, v4);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 56, v9);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
}

__n128 std::__optional_move_base<WebCore::ApplePayLineItem,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v3;
    result = *(__n128 *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
    *(__n128 *)(a1 + 24) = result;
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v6;
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

void WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(WebCore::ApplePayRecurringPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(WebCore::ApplePayPaymentTokenContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(WebCore::ApplePayDeferredPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(WebCore::ApplePayAutomaticReloadPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WebCore::ApplePayError::~ApplePayError(WebCore::ApplePayError *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *((_OWORD *)a2 + 2);
    v8 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = v8;
    v9 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(a1 + 72) = v9;
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    std::__optional_move_base<WebCore::ApplePayLineItem,false>::__optional_move_base[abi:sn180100](a1 + 88, (uint64_t)(a2 + 11));
    v10 = a2[22];
    a2[22] = 0;
    *(_QWORD *)(a1 + 176) = v10;
    v11 = a2[23];
    a2[23] = 0;
    *(_QWORD *)(a1 + 184) = v11;
    v12 = a2[24];
    a2[24] = 0;
    *(_QWORD *)(a1 + 192) = v12;
    *(_BYTE *)(a1 + 200) = 1;
  }
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest*>((uint64_t)a1, (uint64_t *)a2);
    a1[112] = 1;
  }
  return a1;
}

void sub_196EB4D3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::ApplePayAutomaticReloadPaymentRequest *v2;

  if (*((_BYTE *)v2 + 112))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest,WebCore::ApplePayAutomaticReloadPaymentRequest*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
    v3 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *((_OWORD *)a2 + 2);
    v6 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(result + 64) = a2[8];
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *((_WORD *)a2 + 40);
    v8 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(result + 88) = v8;
    v9 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(result + 96) = v9;
    v10 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_BYTE *std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[128] = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest*>((uint64_t)a1, (uint64_t *)a2);
    a1[128] = 1;
  }
  return a1;
}

void sub_196EB4E18(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::ApplePayDeferredPaymentRequest *v2;

  if (*((_BYTE *)v2 + 128))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
    v3 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *((_OWORD *)a2 + 2);
    v6 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(result + 64) = a2[8];
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *((_WORD *)a2 + 40);
    *(_QWORD *)(result + 88) = a2[11];
    v8 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(result + 96) = v8;
    v9 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v9;
    v10 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(result + 112) = v10;
    v11 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(result + 120) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_move_base<WebCore::ApplePayDisbursementRequest,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_BYTE *)(result + 16) = 0;
    if (*((_BYTE *)a2 + 16))
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v2 = *a2;
      *a2 = 0;
      *(_QWORD *)result = v2;
      LODWORD(v2) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(result + 8) = v2;
      LODWORD(v2) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(result + 12) = v2;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

void WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(WebCore::ApplePayDetailsUpdateBase *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  std::__optional_destruct_base<WebCore::ApplePayDisbursementRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 584, a2);
  if (*((_BYTE *)this + 576))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 448), v3);
  if (*((_BYTE *)this + 440))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 424, v3);
  if (*((_BYTE *)this + 416))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 304), v3);
  if (*((_BYTE *)this + 296))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 96), v3);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
}

double std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentMethodUpdate>(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  updated = WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(a1, a2);
  result = 0.0;
  *(_OWORD *)(updated + 616) = 0u;
  v5 = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_QWORD *)(updated + 616) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 624);
  *(_DWORD *)(a2 + 624) = 0;
  *(_DWORD *)(updated + 624) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 628);
  *(_DWORD *)(a2 + 628) = 0;
  *(_DWORD *)(updated + 628) = v5;
  *(_OWORD *)(updated + 632) = 0u;
  v6 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  *(_QWORD *)(updated + 632) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 640);
  *(_DWORD *)(a2 + 640) = 0;
  *(_DWORD *)(updated + 640) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 644);
  *(_DWORD *)(a2 + 644) = 0;
  *(_DWORD *)(updated + 644) = v6;
  v7 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a2 + 648) = 0;
  *(_QWORD *)(updated + 648) = v7;
  *(_BYTE *)(updated + 656) = 1;
  return result;
}

double std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  double result;
  uint64_t v5;
  uint64_t v6;

  updated = WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(a1, a2);
  result = 0.0;
  *(_OWORD *)(updated + 616) = 0u;
  v5 = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_QWORD *)(updated + 616) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 624);
  *(_DWORD *)(a2 + 624) = 0;
  *(_DWORD *)(updated + 624) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 628);
  *(_DWORD *)(a2 + 628) = 0;
  *(_DWORD *)(updated + 628) = v5;
  *(_OWORD *)(updated + 632) = 0u;
  v6 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  *(_QWORD *)(updated + 632) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 640);
  *(_DWORD *)(a2 + 640) = 0;
  *(_DWORD *)(updated + 640) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 644);
  *(_DWORD *)(a2 + 644) = 0;
  *(_DWORD *)(updated + 644) = v6;
  *(_BYTE *)(updated + 648) = 1;
  return result;
}

uint64_t std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v5;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentAuthorizationResult,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentAuthorizationResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 20) = v3;
  std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](a1 + 24, (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_196EB5280(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration(WebCore::ApplePayInstallmentConfiguration *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(WebCore::ApplePayInstallmentItem *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Icon>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  WTF::URL::URL(a1, (uint64_t *)a2);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(v3 + 48) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(v3 + 52) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v3 + 56) = v5;
  *(_BYTE *)(v3 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(v3 + 72) = 1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Shortcut>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v5;
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_196EB5554(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ApplicationManifest::ApplicationManifest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  WTF::URL::URL(a1 + 32, a2 + 4);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  WTF::URL::URL(a1 + 80, a2 + 10);
  WTF::URL::URL(a1 + 120, a2 + 15);
  WTF::URL::URL(a1 + 160, a2 + 20);
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v8 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(a1 + 216) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v8;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v9 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v9;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v10 = a2[31];
  a2[31] = 0;
  *(_QWORD *)(a1 + 248) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(a1 + 256) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(a1 + 260) = v10;
  return a1;
}

void sub_196EB56CC(_Unwind_Exception *exception_object, void *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  _QWORD *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if ((*v7 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *v6;
  *v6 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v5;
  *v5 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v4;
  *v4 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *v3;
  *v3 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v2[3];
  v2[3] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v2[2];
  v2[2] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v2[1];
  v2[1] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *v2;
  *v2 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ApplicationManifest::~ApplicationManifest(WebCore::ApplicationManifest *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 248, a2);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v4);
  v6 = *((_QWORD *)this + 26);
  if ((v6 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v5);
    }
  }
  v7 = *((_QWORD *)this + 25);
  if ((v7 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v5);
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v15 -= 2;
  }
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + (v3 << 6)));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 6), a2);
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 8;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WebCore::NotificationData::NotificationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v5 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v5 + 72) = v9;
  *(_BYTE *)(v5 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(v5 + 88) = v10;
  WTF::URL::URL(v5 + 96, (uint64_t *)(a2 + 96));
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 216) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a1 + 220) = v14;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  return a1;
}

void sub_196EB5B94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v4 = v2[11];
  v2[11] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[9];
  v2[9] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v2[8];
  v2[8] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[7];
  v2[7] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v2[6];
  v2[6] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v2[5];
  v2[5] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *v2;
  *v2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::NotificationData::~NotificationData(WebCore::NotificationData *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = (WTF *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_196EB5E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v2 = result;
    *(_DWORD *)result = *(_DWORD *)a2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
      v3 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(result + 16) = v3;
      *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
      *(_BYTE *)(result + 32) = 1;
    }
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](result + 40, a2 + 40);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EB5EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF::DeferrableRefCountedBase *v3;

  if (*(_BYTE *)(v1 + 32))
  {
    v3 = *(WTF::DeferrableRefCountedBase **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v3)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::DeferrableRefCountedBase *v2;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 72))
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(a1 + 48));
    if (*(_BYTE *)(a1 + 32))
    {
      v2 = *(WTF::DeferrableRefCountedBase **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v2)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
    }
  }
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs const&,WebCore::AuthenticationExtensionsClientOutputs*>((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_196EB5F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs const&,WebCore::AuthenticationExtensionsClientOutputs*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  if (result)
  {
    v2 = result;
    *(_DWORD *)result = *(_DWORD *)a2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
      v3 = *(_DWORD **)(a2 + 16);
      if (v3)
        *v3 += 2;
      *(_QWORD *)(result + 16) = v3;
      *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
      *(_BYTE *)(result + 32) = 1;
    }
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(result + 40), a2 + 40);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EB5FF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF::DeferrableRefCountedBase *v3;

  if (*(_BYTE *)(v1 + 32))
  {
    v3 = *(WTF::DeferrableRefCountedBase **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v3)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_WORD *)result = *(_WORD *)a2;
    v2 = *(_DWORD **)(a2 + 8);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(result + 8) = v2;
    *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_base[abi:sn180100]((uint64_t)(a1 + 8), a2 + 8);
    a1[32] = 1;
  }
  return a1;
}

void sub_196EB60B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v2;

  if (*(_BYTE *)(v1 + 32))
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    v3 = *(_DWORD **)(a2 + 8);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 8) = v3;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<2ul,WebCore::AuthenticatorAttestationResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAttestationResponseData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 8), (uint64_t)(a2 + 1));
  v5 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v5;
  v6 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = v6;
  v7 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  return a1;
}

void sub_196EB6190(_Unwind_Exception *exception_object)
{
  WTF::DeferrableRefCountedBase **v1;
  WTF::DeferrableRefCountedBase *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::AuthenticatorResponseBaseData>::__alt[abi:sn180100]<WebCore::AuthenticatorResponseBaseData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 8), (uint64_t)(a2 + 1));
  return a1;
}

void sub_196EB61DC(_Unwind_Exception *exception_object)
{
  WTF::DeferrableRefCountedBase **v1;
  WTF::DeferrableRefCountedBase *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<3ul,WebCore::AuthenticatorAssertionResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAssertionResponseData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 8), (uint64_t)(a2 + 1));
  v5 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v5;
  v6 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v6;
  v7 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v7;
  v8 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v8;
  return a1;
}

void sub_196EB625C(_Unwind_Exception *exception_object)
{
  WTF::DeferrableRefCountedBase **v1;
  WTF::DeferrableRefCountedBase *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  _Unwind_Resume(exception_object);
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS8_36AuthenticatorAttestationResponseDataENS8_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJDnS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a2 + 1));
  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS8_36AuthenticatorAttestationResponseDataENS8_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJDnS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  WTF::DeferrableRefCountedBase *result;

  v3 = (WTF *)a2[14];
  if (v3)
  {
    a2[14] = 0;
    *((_DWORD *)a2 + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::DeferrableRefCountedBase *)a2[13];
  a2[13] = 0;
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  v5 = (WTF::DeferrableRefCountedBase *)a2[12];
  a2[12] = 0;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a2 + 1));
  result = (WTF::DeferrableRefCountedBase *)*a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS8_36AuthenticatorAttestationResponseDataENS8_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJDnS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *v3;
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF::DeferrableRefCountedBase *result;

  v3 = a2[15];
  a2[15] = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  v4 = a2[14];
  a2[14] = 0;
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  v5 = a2[13];
  a2[13] = 0;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  v6 = a2[12];
  a2[12] = 0;
  if (v6)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a2 + 1));
  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

uint64_t WebCore::AuthenticatorResponseData::AuthenticatorResponseData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];
  _QWORD *v6;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v5[0] = a1;
  v5[1] = a1;
  v5[2] = a1;
  v3 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v3 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v6 = v5;
    ((void (*)(_QWORD **))off_1E34AD9E0[v3])(&v6);
    return a1;
  }
  return result;
}

void sub_196EB6438(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::DeferrableRefCountedBase **v4;
  WTF *v6;
  WTF::DeferrableRefCountedBase *v7;
  WTF::DeferrableRefCountedBase *v8;
  WTF::DeferrableRefCountedBase *v9;
  WTF::DeferrableRefCountedBase *v10;
  WTF::DeferrableRefCountedBase *v11;
  WTF::DeferrableRefCountedBase *v12;

  v6 = *(WTF **)(v2 + 144);
  if (v6)
  {
    *(_QWORD *)(v2 + 144) = 0;
    *(_DWORD *)(v2 + 152) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF::DeferrableRefCountedBase **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v7)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v7);
  v8 = *(WTF::DeferrableRefCountedBase **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (v8)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
  v9 = *(WTF::DeferrableRefCountedBase **)(v2 + 120);
  *(_QWORD *)(v2 + 120) = 0;
  if (v9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v9);
  v10 = *(WTF::DeferrableRefCountedBase **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v10)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v10);
  v11 = *v4;
  *v4 = 0;
  if (v11)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v11);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](v3);
  v12 = *(WTF::DeferrableRefCountedBase **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v12)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v12);
  _Unwind_Resume(a1);
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AuthenticatorResponseData::AuthenticatorResponseData(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(decltype(nullptr))#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorResponseBaseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAttestationResponseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAssertionResponseData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&>(uint64_t **a1, _DWORD **a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::DeferrableRefCountedBase *v5;

  v3 = **a1;
  v4 = *a2;
  if (*a2)
    *v4 += 2;
  v5 = *(WTF::DeferrableRefCountedBase **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false> const&>((_BYTE *)(v3 + 16), (uint64_t)(a2 + 1));
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AuthenticatorResponseData::AuthenticatorResponseData(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(decltype(nullptr))#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorResponseBaseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAttestationResponseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAssertionResponseData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::DeferrableRefCountedBase *v5;
  _DWORD *v6;
  WTF::DeferrableRefCountedBase *v7;
  _DWORD *v8;
  WTF::DeferrableRefCountedBase *v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  *(_BYTE *)v3 = 1;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::DeferrableRefCountedBase **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false> const&>((_BYTE *)(v3 + 16), a2 + 8);
  v6 = *(_DWORD **)(a2 + 96);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::DeferrableRefCountedBase **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v6;
  if (v7)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v7);
  v8 = *(_DWORD **)(a2 + 104);
  if (v8)
    *v8 += 2;
  v9 = *(WTF::DeferrableRefCountedBase **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = v8;
  if (v9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v9);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v3 + 144), a2 + 112);
}

WTF::DeferrableRefCountedBase *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AuthenticatorResponseData::AuthenticatorResponseData(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(decltype(nullptr))#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorResponseBaseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAttestationResponseData const&)#1},WebCore::AuthenticatorResponseData::(std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&)::{lambda(WebCore::AuthenticatorAssertionResponseData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::DeferrableRefCountedBase *v5;
  _DWORD *v6;
  WTF::DeferrableRefCountedBase *v7;
  _DWORD *v8;
  WTF::DeferrableRefCountedBase *v9;
  _DWORD *v10;
  WTF::DeferrableRefCountedBase *v11;
  _DWORD *v12;
  WTF::DeferrableRefCountedBase *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::DeferrableRefCountedBase **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false> const&>((_BYTE *)(v3 + 16), a2 + 8);
  v6 = *(_DWORD **)(a2 + 96);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::DeferrableRefCountedBase **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v6;
  if (v7)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v7);
  v8 = *(_DWORD **)(a2 + 104);
  if (v8)
    *v8 += 2;
  v9 = *(WTF::DeferrableRefCountedBase **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v8;
  if (v9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v9);
  v10 = *(_DWORD **)(a2 + 112);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::DeferrableRefCountedBase **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v10;
  if (v11)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v11);
  v12 = *(_DWORD **)(a2 + 120);
  if (v12)
    *v12 += 2;
  result = *(WTF::DeferrableRefCountedBase **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v12;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false> const&>(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;

  v3 = result;
  if (result[80] == *(_BYTE *)(a2 + 80))
  {
    if (result[80])
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false> const&>((uint64_t)(result + 8), a2 + 8);
      return (_BYTE *)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false> const&>((uint64_t)(v3 + 40), a2 + 40);
    }
  }
  else if (result[80])
  {
    return std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::reset[abi:sn180100](result);
  }
  else
  {
    result = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs const&,WebCore::AuthenticationExtensionsClientOutputs*>((uint64_t)result, a2);
    v3[80] = 1;
  }
  return result;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::reset[abi:sn180100](_BYTE *result)
{
  _BYTE *v1;

  if (result[80])
  {
    v1 = result;
    if (result[72])
      result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(result + 48));
    if (v1[32])
    {
      result = (_BYTE *)*((_QWORD *)v1 + 2);
      *((_QWORD *)v1 + 2) = 0;
      if (result)
        result = (_BYTE *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    }
    v1[80] = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      *(_WORD *)result = *(_WORD *)a2;
      v4 = *(_DWORD **)(a2 + 8);
      if (v4)
        *v4 += 2;
      result = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 8) = v4;
      if (result)
        result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
      *(_WORD *)(v3 + 16) = *(_WORD *)(a2 + 16);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    result = *(_QWORD *)(result + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (result)
      result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    *(_WORD *)result = *(_WORD *)a2;
    v5 = *(_DWORD **)(a2 + 8);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(result + 8) = v5;
    *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      *(_WORD *)result = *(_WORD *)a2;
      return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false> const&>(result + 8, a2 + 8);
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    result = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(result + 8));
    *(_BYTE *)(v2 + 32) = 0;
  }
  else
  {
    *(_WORD *)result = *(_WORD *)a2;
    result = std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_base[abi:sn180100](result + 8, a2 + 8);
    *(_BYTE *)(v2 + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false> const&>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  _DWORD *v4;
  WTF::DeferrableRefCountedBase *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = (_QWORD *)result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v4 += 2;
      v5 = *(WTF::DeferrableRefCountedBase **)result;
      *v3 = v4;
      if (v5)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
      v6 = *(_DWORD **)(a2 + 8);
      if (v6)
        *v6 += 2;
      result = v3[1];
      v3[1] = v6;
      if (result)
        return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    return std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::reset[abi:sn180100](result);
  }
  else
  {
    v7 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v7 += 2;
    *(_QWORD *)result = v7;
    v8 = *(_DWORD **)(a2 + 8);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 8) = v8;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::reset[abi:sn180100](uint64_t result)
{
  uint64_t v1;
  WTF::DeferrableRefCountedBase *v2;

  if (*(_BYTE *)(result + 16))
  {
    v1 = result;
    v2 = *(WTF::DeferrableRefCountedBase **)(result + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v2)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
    result = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0;
    if (result)
      result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    *(_BYTE *)(v1 + 16) = 0;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, (WTF *)*(unsigned int *)(a2 + 12));
        v4 = a1[3];
      }
    }
    else
    {
      a1[3] = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, v4);
      v6 = a1[3];
    }
    else
    {
      v6 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + v6), (const void *)(*(_QWORD *)a2 + v6), *(_QWORD *)a2 + *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + v6));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticatorResponseData,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticatorResponseData>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 144) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 152) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a2 + 156) = 0;
  *(_DWORD *)(a1 + 156) = v10;
  *(_BYTE *)(a1 + 160) = 1;
  return a1;
}

void sub_196EB6B2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF::DeferrableRefCountedBase *v3;

  v3 = *(WTF::DeferrableRefCountedBase **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  _Unwind_Resume(exception_object);
}

void WebCore::AuthenticatorResponseData::~AuthenticatorResponseData(WebCore::AuthenticatorResponseData *this, void *a2)
{
  WTF *v3;
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF::DeferrableRefCountedBase *v7;
  WTF::DeferrableRefCountedBase *v8;
  WTF::DeferrableRefCountedBase *v9;

  v3 = (WTF *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  v5 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  v6 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  v7 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v7);
  v8 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 16);
  v9 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v9);
}

{
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData(this, a2);
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void sub_196EB6C2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v4 + 16), a2 + 16);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void sub_196EB6CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADA00[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1, a2);
  result[48] = 0;
  result[64] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *((_QWORD *)result + 6) = 0;
    *((_QWORD *)result + 7) = 0;
    v4 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *((_QWORD *)result + 6) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    *((_DWORD *)result + 14) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    *((_DWORD *)result + 15) = v4;
    result[64] = 1;
  }
  result[72] = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 64), (uint64_t)(a2 + 8));
  *(_BYTE *)(a1 + 144) = 1;
  return a1;
}

void sub_196EB6DA8(_Unwind_Exception *a1)
{
  WTF::StringImpl **v1;
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v2;
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = v2;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v3);
  v6 = *v1;
  *v1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v2 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v2;
      v3 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(result + 16) = v3;
      *(_BYTE *)(result + 24) = 1;
    }
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v2 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v2;
      v3 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(result + 16) = v3;
      *(_BYTE *)(result + 24) = 1;
    }
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v3;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 1;
  }
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

void sub_196EB6EFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF::DeferrableRefCountedBase *v3;

  if (*(_BYTE *)(v1 + 32))
  {
    v3 = *(WTF::DeferrableRefCountedBase **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v3)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::UserEntity,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v8;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADA00[v4])(&v8, a1 + 16);
    *(_DWORD *)(a1 + 24) = -1;
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::RpEntity,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS8_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 16), a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a2 + 14));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a2 + 12));
  v4 = (WTF::StringImpl *)a2[11];
  a2[11] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a2[5];
  a2[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS8_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS8_27ResourceRequestPlatformDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,WebCore::ResourceRequestBase::RequestData>::__alt[abi:sn180100]<WebCore::ResourceRequestBase::RequestData>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS8_27ResourceRequestPlatformDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

uint64_t std::__variant_detail::__alt<0ul,WebCore::ResourceRequestBase::RequestData>::__alt[abi:sn180100]<WebCore::ResourceRequestBase::RequestData>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  return a1;
}

void sub_196EB7210(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB7278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADA40[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*(_QWORD *)a1, (char *)(*(_QWORD *)a1 + 944 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(uint64_t result, char *a2)
{
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  if ((char *)result != a2)
  {
    v3 = (char *)result;
    do
    {
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 728), a2);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 672), v4);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 616), v5);
      result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 560), v6);
      v3 += 944;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 968))
  {
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 944, a2);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 728, v3);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 672, v4);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 616, v5);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 560, v6);
  }
  return a1;
}

void WebCore::IntConstraint::~IntConstraint(WebCore::IntConstraint *this)
{
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebCore::NumericConstraint<int>::isRequired(_BYTE *a1)
{
  return a1[16] || a1[24] || a1[32] != 0;
}

void WebCore::NumericConstraint<int>::~NumericConstraint()
{
  JUMPOUT(0x19AEB936CLL);
}

void WebCore::DoubleConstraint::~DoubleConstraint(WebCore::DoubleConstraint *this)
{
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebCore::NumericConstraint<double>::isRequired(_BYTE *a1)
{
  return a1[24] || a1[40] || a1[56] != 0;
}

void WebCore::NumericConstraint<double>::~NumericConstraint()
{
  JUMPOUT(0x19AEB936CLL);
}

void WebCore::BooleanConstraint::~BooleanConstraint(WebCore::BooleanConstraint *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebCore::BooleanConstraint::isRequired(WebCore::BooleanConstraint *this)
{
  return *((unsigned __int8 *)this + 10);
}

WTF *std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>(WTF *result, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*((unsigned __int8 *)result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*((_BYTE *)result + 48))
    {
      *((_BYTE *)result + 8) = *(_BYTE *)(a2 + 8);
      v4 = *((unsigned int *)result + 7);
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 8 * v4));
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3 + 16, (_DWORD *)(a2 + 16));
      v5 = *((unsigned int *)v3 + 11);
      if ((_DWORD)v5)
        WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)v3 + 4), (WTF::StringImpl *)(*((_QWORD *)v3 + 4) + 8 * v5));
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3 + 32, (_DWORD *)(a2 + 32));
    }
  }
  else if (*((_BYTE *)result + 48))
  {
    return (WTF *)std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100]((uint64_t)result, (void *)a2);
  }
  else
  {
    result = (WTF *)std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint,WebCore::StringConstraint*>((uint64_t)result, a2);
    *((_BYTE *)v3 + 48) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  void *v3;

  if (*(_BYTE *)(result + 48))
  {
    v2 = result;
    *(_QWORD *)result = &off_1E34AE7C8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 32, a2);
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, v3);
    *(_BYTE *)(v2 + 48) = 0;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint,WebCore::StringConstraint*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)result = &off_1E34AE7C8;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v2 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(result + 24) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    *(_DWORD *)(result + 28) = v2;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    v3 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(result + 40) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    *(_DWORD *)(result + 44) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL WebCore::StringConstraint::isRequired(WebCore::StringConstraint *this)
{
  return *((_DWORD *)this + 7) != 0;
}

uint64_t std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)a1 = &off_1E34AE7C8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v3);
  }
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1, void *a2)
{
  WTF::StringImpl *v3;

  if (a1[160])
  {
    if (a1[144])
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 128), a2);
    if (a1[120])
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 104), a2);
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 48), (WTF::StringImpl *)a2);
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1, v3);
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)((char *)a3 + 17);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

uint64_t WebCore::NetworkTransactionInformation::NetworkTransactionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 8, a2 + 8);
  v4 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v4;
  WTF::URL::URL(a1 + 208, (uint64_t *)(a2 + 208));
  v5 = *(_QWORD *)(a2 + 248);
  v6 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v5;
  *(_QWORD *)(a1 + 256) = v6;
  v7 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v7;
  v8 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 272) = v8;
  v9 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v9;
  v10 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 288) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = 0;
  *(_DWORD *)(a1 + 296) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 300) = 0;
  *(_DWORD *)(a1 + 300) = v10;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v11 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a2 + 312) = 0;
  *(_DWORD *)(a1 + 312) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a2 + 316) = 0;
  *(_DWORD *)(a1 + 316) = v11;
  v12 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 320) = v12;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    v13 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a1 + 328) = v13;
    *(_BYTE *)(a1 + 336) = 1;
  }
  v14 = *(_OWORD *)(a2 + 344);
  v15 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v15;
  *(_OWORD *)(a1 + 344) = v14;
  v16 = *(_OWORD *)(a2 + 392);
  v17 = *(_OWORD *)(a2 + 408);
  v18 = *(_OWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 439) = *(_DWORD *)(a2 + 439);
  *(_OWORD *)(a1 + 424) = v18;
  *(_OWORD *)(a1 + 408) = v17;
  *(_OWORD *)(a1 + 392) = v16;
  v19 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a1 + 448) = v19;
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v20 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v20;
  v21 = *(_OWORD *)(a2 + 496);
  v22 = *(_OWORD *)(a2 + 512);
  v23 = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 512) = v22;
  *(_OWORD *)(a1 + 528) = v23;
  *(_OWORD *)(a1 + 496) = v21;
  v24 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = 0;
  *(_QWORD *)(a1 + 552) = v24;
  v25 = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = v25;
  v26 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_QWORD *)(a1 + 584) = v26;
  return a1;
}

void sub_196EB7A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  const void *v4;

  v4 = *(const void **)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_OWORD *)a2 == 0 && *(_BYTE *)(a2 + 18) == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::PasteboardCustomData::Entry>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::PasteboardCustomData::Entry>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v9 = v2;
    v10 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 6);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v8, (char *)v5 + 16);
      *((_DWORD *)v5 + 6) = -1;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = &off_1E34ADA88;
    v4 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 12) = v4;
    *(_QWORD *)a1 = &off_1E34ADA60;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = &off_1E34ADA88;
    v5 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    *(_OWORD *)(a1 + 68) = v5;
    *(_QWORD *)(a1 + 56) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = &off_1E34ADA88;
    v6 = *(_OWORD *)(a2 + 124);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(a1 + 124) = v6;
    *(_QWORD *)(a1 + 112) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = &off_1E34ADA88;
    v7 = *(_OWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
    *(_OWORD *)(a1 + 180) = v7;
    *(_QWORD *)(a1 + 168) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    v8 = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = &off_1E34ADAD8;
    *(_BYTE *)(a1 + 232) = v8;
    v9 = *(_OWORD *)(a2 + 240);
    v10 = *(_OWORD *)(a2 + 256);
    v11 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    *(_OWORD *)(a1 + 256) = v10;
    *(_OWORD *)(a1 + 272) = v11;
    *(_OWORD *)(a1 + 240) = v9;
    *(_QWORD *)(a1 + 224) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 304) = 1;
  }
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = &off_1E34ADAD8;
    v12 = *(_OWORD *)(a2 + 328);
    v13 = *(_OWORD *)(a2 + 344);
    v14 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 369) = *(_OWORD *)(a2 + 369);
    *(_OWORD *)(a1 + 344) = v13;
    *(_OWORD *)(a1 + 360) = v14;
    *(_OWORD *)(a1 + 328) = v12;
    *(_QWORD *)(a1 + 312) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 392) = 1;
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a2 + 480))
  {
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = &off_1E34ADAD8;
    v15 = *(_OWORD *)(a2 + 416);
    v16 = *(_OWORD *)(a2 + 432);
    v17 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
    *(_OWORD *)(a1 + 432) = v16;
    *(_OWORD *)(a1 + 448) = v17;
    *(_OWORD *)(a1 + 416) = v15;
    *(_QWORD *)(a1 + 400) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 480) = 1;
  }
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 497) = *(_DWORD *)(a2 + 497);
    *(_BYTE *)(a1 + 504) = 1;
  }
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  if (*(_BYTE *)(a2 + 528))
  {
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
    *(_QWORD *)(a1 + 512) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 521) = *(_DWORD *)(a2 + 521);
    *(_BYTE *)(a1 + 528) = 1;
  }
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  if (*(_BYTE *)(a2 + 552))
  {
    *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
    *(_QWORD *)(a1 + 536) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 545) = *(_DWORD *)(a2 + 545);
    *(_BYTE *)(a1 + 552) = 1;
  }
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 560), a2 + 560);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 616), a2 + 616);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 672), a2 + 672);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 728), a2 + 728);
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  if (*(_BYTE *)(a2 + 864))
  {
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_QWORD *)(a1 + 784) = &off_1E34ADAD8;
    v18 = *(_OWORD *)(a2 + 800);
    v19 = *(_OWORD *)(a2 + 816);
    v20 = *(_OWORD *)(a2 + 832);
    *(_OWORD *)(a1 + 841) = *(_OWORD *)(a2 + 841);
    *(_OWORD *)(a1 + 816) = v19;
    *(_OWORD *)(a1 + 832) = v20;
    *(_OWORD *)(a1 + 800) = v18;
    *(_QWORD *)(a1 + 784) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 864) = 1;
  }
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  if (*(_BYTE *)(a2 + 888))
  {
    *(_BYTE *)(a1 + 880) = *(_BYTE *)(a2 + 880);
    *(_QWORD *)(a1 + 872) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 881) = *(_DWORD *)(a2 + 881);
    *(_BYTE *)(a1 + 888) = 1;
  }
  *(_BYTE *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 912) = 0;
  if (*(_BYTE *)(a2 + 912))
  {
    *(_BYTE *)(a1 + 904) = *(_BYTE *)(a2 + 904);
    *(_QWORD *)(a1 + 896) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 905) = *(_DWORD *)(a2 + 905);
    *(_BYTE *)(a1 + 912) = 1;
  }
  *(_BYTE *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  if (*(_BYTE *)(a2 + 936))
  {
    *(_BYTE *)(a1 + 928) = *(_BYTE *)(a2 + 928);
    *(_QWORD *)(a1 + 920) = &off_1E34ADB00;
    *(_DWORD *)(a1 + 929) = *(_DWORD *)(a2 + 929);
    *(_BYTE *)(a1 + 936) = 1;
  }
  return a1;
}

void sub_196EB7F78(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;

  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v3, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v2, v7);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[48] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint,WebCore::StringConstraint*>((uint64_t)a1, a2);
    a1[48] = 1;
  }
  return a1;
}

{
  *a1 = 0;
  a1[48] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    a1[8] = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = &off_1E34AE7C8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 16), a2 + 16);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 32), a2 + 32);
    a1[48] = 1;
  }
  return a1;
}

void sub_196EB7FEC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 944))
  {
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 728, a2);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 672, v3);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 616, v4);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a1 + 560, v5);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Region *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::Region *)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254)
        WebCore::Region::~Region(v4);
      v4 = (WebCore::Region *)((char *)v4 + 32);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 96 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (uint64_t)result + 16;
    do
    {
      std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
      result = *(WTF::StringImpl **)(v3 - 8);
      *(_QWORD *)(v3 - 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v4 = (WTF::StringImpl *)(v3 + 80);
      v3 += 96;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo*>((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_196EB8180(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo*>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *a2 = 0;
    *result = v4;
    v5 = a2[1];
    a2[1] = 0;
    result[1] = v5;
    WTF::URL::URL((uint64_t)(result + 2), a2 + 2);
    *((_BYTE *)v3 + 56) = *((_BYTE *)a2 + 56);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EB81EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::__optional_destruct_base[abi:sn180100]<WebCore::TextManipulationTokenInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  WTF::URL::URL(a1 + 16, a2 + 2);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_196EB832C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ProtectionSpace,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_196EB8450(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v2 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v2 != -1)
        ((void (*)(char *, uint64_t))off_1E34ADF00[v2])(&v5, a1 + 16);
      *(_DWORD *)(a1 + 24) = -1;
    }
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADF00[v3])(&v6, a1);
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(WTF **)(this + 8);
    if (v5)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v5, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

_DWORD *WTF::RefCounted<WebCore::SVGPathByteStream::Data>::deref(_DWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  char v5;

  v2 = (uint64_t)this;
  if (*this == 1)
  {
    v3 = this[22];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, this + 8);
    *(_DWORD *)(v2 + 88) = -1;
    v4 = *(WTF **)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v4, a2);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*this;
  }
  return this;
}

WTF **WTF::WeakPtrFactory<WebCore::SVGPathByteStream,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory(WTF **a1, void *a2)
{
  WTF *v3;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        WTF::fastFree(v3, a2);
      else
        --*(_DWORD *)v3;
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  _BYTE *v1;
  _BYTE *v2;

  if (result[20])
  {
    if (result[16] == 11)
    {
      v1 = result;
      WebCore::Length::deref((WebCore::Length *)(result + 12));
      result = v1;
    }
    if (result[8] == 11)
    {
      v2 = result;
      WebCore::Length::deref((WebCore::Length *)(result + 4));
      return v2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Length *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WebCore::Length **)a1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      if (*((_BYTE *)v4 + 4) == 11)
        WebCore::Length::deref(v4);
      v4 = (WebCore::Length *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    v4 = *(WebCore::Length **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  _DWORD *v3;
  WTF **v4;
  void *v5;

  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    WTF::RefCounted<WebCore::SVGPathByteStream::Data>::deref(v3, a2);
  v4 = WTF::WeakPtrFactory<WebCore::SVGPathByteStream,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory((WTF **)a1, a2);
  return WTF::fastFree((WTF *)v4, v5);
}

WebCore::Length *std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100](WebCore::Length *result)
{
  WebCore::Length *v1;
  WebCore::Length *v2;

  if (*((_BYTE *)result + 16))
  {
    if (*((_BYTE *)result + 12) == 11)
    {
      v1 = result;
      WebCore::Length::deref((WebCore::Length *)((char *)result + 8));
      result = v1;
    }
    if (*((_BYTE *)result + 4) == 11)
    {
      v2 = result;
      WebCore::Length::deref(result);
      return v2;
    }
  }
  return result;
}

WebCore::Path *std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100](WebCore::Path *this, const WebCore::Path *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    WebCore::Path::Path(this, a2);
    *((_BYTE *)this + 72) = 1;
  }
  return this;
}

void sub_196EB87F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 72))
  {
    v15 = *(unsigned int *)(v13 + 64);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ShapePathOperation::~ShapePathOperation(WebCore::ShapePathOperation *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::ShapePathOperation::~ShapePathOperation(WebCore::ShapePathOperation *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

double WebCore::ShapePathOperation::clone@<D0>(WebCore::ShapePathOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x20);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 16))(&v7);
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v4 + 8) = 0x100000001;
  *(_BYTE *)(v4 + 16) = v5;
  *(_QWORD *)v4 = off_1E34ADB78;
  *(_QWORD *)(v4 + 24) = v7;
  *a2 = v4;
  return result;
}

void sub_196EB8944(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ShapePathOperation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 12) || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
}

uint64_t WebCore::ShapePathOperation::canBlend(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12) == 1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  else
    return 0;
}

uint64_t WebCore::ShapePathOperation::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a2 + 12) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 56))(&v5, *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)(result + 8) = 0x100000001;
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = off_1E34ADB78;
    *(_QWORD *)(result + 24) = v5;
    *a3 = result;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_196EB8A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PathOperation::canBlend()
{
  return 0;
}

void WebCore::PathOperation::blend(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::BoxPathOperation::clone@<D0>(WebCore::BoxPathOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(v4 + 8) = 0x200000001;
  *(_BYTE *)(v4 + 16) = v5;
  *(_QWORD *)v4 = off_1E34ADBC0;
  *a2 = v4;
  return result;
}

BOOL WebCore::BoxPathOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12) && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::ResourceResponseData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[280] = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    WebCore::ResourceResponseData::ResourceResponseData((uint64_t)a1, a2);
    a1[280] = 1;
  }
  return a1;
}

void sub_196EB8BE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseData *v2;

  if (*((_BYTE *)v2 + 280))
    WebCore::ResourceResponseData::~ResourceResponseData(v2, a2);
  _Unwind_Resume(exception_object);
}

__n128 WebCore::ResourceResponse::ResourceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v3 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v3 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v3 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v3 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v3 + 92) = v9;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v3 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v3 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v3 + 108) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v3 + 112) = v11;
  *(_BYTE *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v3 + 120) = v12;
    *(_BYTE *)(v3 + 128) = 1;
  }
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v3 + 168) = v14;
  *(_OWORD *)(v3 + 152) = v13;
  result = *(__n128 *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v3 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v3 + 216) = v17;
  *(_OWORD *)(v3 + 200) = v16;
  *(__n128 *)(v3 + 184) = result;
  *(_QWORD *)(v3 + 240) = 0;
  *(_BYTE *)(v3 + 248) = 0;
  *(_BYTE *)(v3 + 138) = *(_BYTE *)(v3 + 138) & 0xF1 | 4;
  return result;
}

__n128 std::__optional_destruct_base<WebCore::ResourceResponse,false>::__optional_destruct_base[abi:sn180100]<WebCore::ResourceResponse>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v3 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v3 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v3 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v3 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v3 + 92) = v9;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v3 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v3 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v3 + 108) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v3 + 112) = v11;
  *(_BYTE *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v3 + 120) = v12;
    *(_BYTE *)(v3 + 128) = 1;
  }
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 152) = v14;
  *(_OWORD *)(v3 + 136) = v13;
  result = *(__n128 *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v3 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v3 + 216) = v17;
  *(_OWORD *)(v3 + 200) = v16;
  *(__n128 *)(v3 + 184) = result;
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(v3 + 240) = v18;
  *(_BYTE *)(v3 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(v3 + 256) = 1;
  return result;
}

void WebCore::ButtonPart::~ButtonPart(WebCore::ButtonPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ButtonPart::createPlatformControl(WebCore::ButtonPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::ButtonPart *))(*(_QWORD *)v2 + 24))(v2, this);
}

void WebCore::ControlPart::~ControlPart(WebCore::ControlPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E34ADC30;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::InnerSpinButtonPart::~InnerSpinButtonPart(WebCore::InnerSpinButtonPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::InnerSpinButtonPart::createPlatformControl(WebCore::InnerSpinButtonPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::InnerSpinButtonPart *))(*(_QWORD *)v2 + 40))(v2, this);
}

void WebCore::MenuListButtonPart::~MenuListButtonPart(WebCore::MenuListButtonPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::MenuListButtonPart::createPlatformControl(WebCore::MenuListButtonPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::MenuListButtonPart *))(*(_QWORD *)v2 + 56))(v2, this);
}

void WebCore::MenuListPart::~MenuListPart(WebCore::MenuListPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::MenuListPart::createPlatformControl(WebCore::MenuListPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::MenuListPart *))(*(_QWORD *)v2 + 48))(v2, this);
}

void WebCore::SearchFieldPart::~SearchFieldPart(WebCore::SearchFieldPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SearchFieldPart::createPlatformControl(WebCore::SearchFieldPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldPart *))(*(_QWORD *)v2 + 80))(v2, this);
}

void WebCore::SliderThumbPart::~SliderThumbPart(WebCore::SliderThumbPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SliderThumbPart::createPlatformControl(WebCore::SliderThumbPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SliderThumbPart *))(*(_QWORD *)v2 + 104))(v2, this);
}

void WebCore::SearchFieldResultsPart::~SearchFieldResultsPart(WebCore::SearchFieldResultsPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SearchFieldResultsPart::createPlatformControl(WebCore::SearchFieldResultsPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldResultsPart *))(*(_QWORD *)v2 + 96))(v2, this);
}

void WebCore::SearchFieldCancelButtonPart::~SearchFieldCancelButtonPart(WebCore::SearchFieldCancelButtonPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SearchFieldCancelButtonPart::createPlatformControl(WebCore::SearchFieldCancelButtonPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldCancelButtonPart *))(*(_QWORD *)v2 + 88))(v2, this);
}

void WebCore::TextAreaPart::~TextAreaPart(WebCore::TextAreaPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::TextAreaPart::createPlatformControl(WebCore::TextAreaPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::TextAreaPart *))(*(_QWORD *)v2 + 136))(v2, this);
}

void WebCore::TextFieldPart::~TextFieldPart(WebCore::TextFieldPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::TextFieldPart::createPlatformControl(WebCore::TextFieldPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::TextFieldPart *))(*(_QWORD *)v2 + 144))(v2, this);
}

void WebCore::ToggleButtonPart::~ToggleButtonPart(WebCore::ToggleButtonPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ToggleButtonPart::createPlatformControl(WebCore::ToggleButtonPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::ToggleButtonPart *))(*(_QWORD *)v2 + 152))(v2, this);
}

void WebCore::ColorWellPart::~ColorWellPart(WebCore::ColorWellPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ColorWellPart::createPlatformControl(WebCore::ColorWellPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::ColorWellPart *))(*(_QWORD *)v2 + 32))(v2, this);
}

void WebCore::SwitchThumbPart::~SwitchThumbPart(WebCore::SwitchThumbPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SwitchThumbPart::createPlatformControl(WebCore::SwitchThumbPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SwitchThumbPart *))(*(_QWORD *)v2 + 120))(v2, this);
}

void WebCore::SwitchTrackPart::~SwitchTrackPart(WebCore::SwitchTrackPart *this)
{
  WTF *v1;
  void *v2;

  WebCore::ControlPart::~ControlPart(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SwitchTrackPart::createPlatformControl(WebCore::SwitchTrackPart *this)
{
  uint64_t v2;

  v2 = WebCore::ControlPart::controlFactory(this);
  return (*(uint64_t (**)(uint64_t, WebCore::SwitchTrackPart *))(*(_QWORD *)v2 + 128))(v2, this);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(WTF **)(v4 + 8);
        if (v6)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v6, a2);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<WebCore::RunJavaScriptParameters,false>::__optional_destruct_base[abi:sn180100]<WebCore::RunJavaScriptParameters>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  WTF::URL::URL(a1 + 16, a2 + 2);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_QWORD *)(a1 + 64) = 0;
    v5 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a1 + 64) = v5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(_BYTE *)(a1 + 88) = 1;
  return a1;
}

void sub_196EB93F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextList>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::TextList>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 24) && (*(_QWORD *)result & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)result & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v5;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26FontPlatformSerializedDataENS8_34FontPlatformSerializedCreationDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  if (*(_BYTE *)(a2 + 408))
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)(a2 + 24), (WTF::StringImpl *)a2);
  v3 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
    CFRelease(v4);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26FontPlatformSerializedDataENS8_34FontPlatformSerializedCreationDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF *result;

  v3 = *(WTF::StringImpl **)(a2 + 408);
  *(_QWORD *)(a2 + 408) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a2 + 400))
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)(a2 + 16), (WTF::StringImpl *)a2);
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

JSC::ArrayBuffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, JSC::ArrayBuffer **a2)
{
  JSC::ArrayBuffer *result;

  result = *a2;
  if (*a2)
    return (JSC::ArrayBuffer *)JSC::ArrayBuffer::span(result);
  return result;
}

uint64_t _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EclB8sn180100IJRKNS0_5__altILm0EN3WTF6RefPtrIN3JSC15ArrayBufferViewENSC_12RawPtrTraitsISF_EENSC_21DefaultRefDerefTraitsISF_EEEEEEEEEDcDpOT_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *v2;
  uint64_t v3;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = JSC::ArrayBufferView::baseAddress(*a2);
  JSC::ArrayBufferView::byteLength(v2);
  return v3;
}

unint64_t JSC::ArrayBufferView::byteLength(JSC::ArrayBufferView *this)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;

  if (JSC::ArrayBufferView::isDetached(this))
    return 0;
  v2 = *((_BYTE *)this + 6);
  if ((v2 & 3) == 0)
    return *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v4 + 64) && (v5 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v6 = atomic_load((unint64_t *)(v5 + 32));
    v2 = *((_BYTE *)this + 6);
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 48);
  }
  v7 = *((_QWORD *)this + 1);
  if ((v2 & 4) == 0)
  {
    if (*((_QWORD *)this + 2) + v7 <= v6 && v6 >= v7)
      return 0;
    else
      return *((_QWORD *)this + 2);
  }
  v9 = v6 - v7;
  if (v6 >= v7)
    return 0;
  if ((*((_BYTE *)this + 4) - 4) > 7u)
    LOBYTE(v10) = 0;
  else
    v10 = qword_1978CE4F0[(char)(*((_BYTE *)this + 4) - 4)];
  return (-1 << v10) & v9;
}

uint64_t JSC::ArrayBufferView::baseAddress(JSC::ArrayBufferView *this)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;

  if (JSC::ArrayBufferView::isDetached(this))
    return 0;
  result = *((_QWORD *)this + 3);
  if (result)
  {
    v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v3)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
        v4 = 1;
      else
        v4 = *MEMORY[0x1E0CC10F0] == 0;
      if (v4)
        return (result & 0x3FFFFFFFFLL) + v3;
    }
  }
  return result;
}

BOOL JSC::ArrayBufferView::isDetached(JSC::ArrayBufferView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) ? (v4 = *MEMORY[0x1E0CC10F0] == 0) : (v4 = 1), v4))
    return (v2 & 0x3FFFFFFFFLL) + v3 == 0;
  else
    return 0;
}

uint64_t JSC::ArrayBuffer::span(JSC::ArrayBuffer *this)
{
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v2 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v2)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
        v3 = 1;
      else
        v3 = *MEMORY[0x1E0CC10F0] == 0;
      v4 = (result & 0x3FFFFFFFFLL) + v2;
      if (v3)
        return v4;
    }
  }
  return result;
}

_DWORD *WebCore::CompositionHighlight::CompositionHighlight(_DWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WebCore::Color *)(a1 + 2), a4);
  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WebCore::Color *)(a1 + 6), a5);
  return a1;
}

void sub_196EB9890(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WebCore::Color *std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100](WebCore::Color *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    WebCore::Color::Color(this, (const Color *)a2);
    *((_BYTE *)this + 8) = 1;
  }
  return this;
}

void sub_196EB98E4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WebCore::FontShadow,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    WebCore::Color::Color();
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_196EB9944(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::FontChanges,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB9A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADE88[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::MediaEngineSupportParameters::MediaEngineSupportParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  WTF::URL::URL(a1 + 16, a2 + 2);
  v5 = *((_WORD *)a2 + 28);
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
  *(_WORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(a1 + 72) = v6;
  v7 = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *(_BYTE *)(a1 + 96) = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v8 = a2[10];
    a2[10] = 0;
    *(_QWORD *)(a1 + 80) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = 0;
    *(_DWORD *)(a1 + 88) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = 0;
    *(_DWORD *)(a1 + 92) = v8;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    v9 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(a1 + 104) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = 0;
    *(_DWORD *)(a1 + 112) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = 0;
    *(_DWORD *)(a1 + 116) = v9;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v10 = a2[16];
    a2[16] = 0;
    *(_QWORD *)(a1 + 128) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 34);
    *((_DWORD *)a2 + 34) = 0;
    *(_DWORD *)(a1 + 136) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 35);
    *((_DWORD *)a2 + 35) = 0;
    *(_DWORD *)(a1 + 140) = v10;
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v11 = a2[19];
    a2[19] = 0;
    *(_QWORD *)(a1 + 152) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 40);
    *((_DWORD *)a2 + 40) = 0;
    *(_DWORD *)(a1 + 160) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 41);
    *((_DWORD *)a2 + 41) = 0;
    *(_DWORD *)(a1 + 164) = v11;
    *(_BYTE *)(a1 + 168) = 1;
  }
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v12 = a2[22];
    a2[22] = 0;
    *(_QWORD *)(a1 + 176) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 46);
    *((_DWORD *)a2 + 46) = 0;
    *(_DWORD *)(a1 + 184) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 47);
    *((_DWORD *)a2 + 47) = 0;
    *(_DWORD *)(a1 + 188) = v12;
    *(_BYTE *)(a1 + 192) = 1;
  }
  return a1;
}

void sub_196EB9D7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters(WebCore::MediaEngineSupportParameters *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*((_BYTE *)this + 192))
  {
    v3 = (WTF *)*((_QWORD *)this + 22);
    if (v3)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_BYTE *)this + 168))
  {
    v4 = (WTF *)*((_QWORD *)this + 19);
    if (v4)
    {
      *((_QWORD *)this + 19) = 0;
      *((_DWORD *)this + 40) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 144))
  {
    v5 = (WTF *)*((_QWORD *)this + 16);
    if (v5)
    {
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  if (*((_BYTE *)this + 120))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, a2);
  if (*((_BYTE *)this + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EB9EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADEA0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34ADEA0[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADEB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SA_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SA_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 24 * v3;
    do
    {
      v4 = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2)+ 24;
      v5 -= 24;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void WebCore::GenericCueData::~GenericCueData(WebCore::GenericCueData *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *((_QWORD *)this + 15);
  if ((v3 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v4 = *((_QWORD *)this + 14);
  if ((v4 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v5 = *((_QWORD *)this + 13);
  if ((v5 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 16))
  {
    v2 = *(_QWORD *)(result + 8);
    if ((v2 & 0x8000000000000) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v6 = result;
        WTF::fastFree((WTF *)v3, a2);
        return v6;
      }
    }
  }
  return result;
}

__n128 std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v4 + 40) = v3;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(v4 + 64) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(v4 + 68) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(v4 + 72) = v6;
  *(_WORD *)(v4 + 80) = *(_WORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(v4 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v4 + 96) = v8;
  *(_WORD *)(v4 + 104) = *(_WORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v4 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(v4 + 120) = v10;
  *(_BYTE *)(v4 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  result = *(__n128 *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(v4 + 184) = v13;
  *(_OWORD *)(v4 + 168) = v12;
  *(__n128 *)(v4 + 152) = result;
  *(_BYTE *)(v4 + 224) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t WebCore::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, uint64_t a3, WebCore::ResourceResponseBase *a4, char a5)
{
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  const void *v11;

  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v8;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 32) = v10;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 48), a4);
  v11 = (const void *)*((_QWORD *)a4 + 30);
  *(_QWORD *)(a1 + 288) = v11;
  if (v11)
    CFRetain(v11);
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a4 + 248);
  *(_BYTE *)(a1 + 304) = a5;
  return a1;
}

void sub_196EBA404(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::ResourceResponseBase *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int **)v2;
  *(_QWORD *)v2 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  WTF::URL::URL(a1 + 48, a2 + 6);
  v5 = a2[11];
  v6 = a2[12];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v6;
  v7 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v7;
  v8 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v8;
  v9 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v9;
  v10 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 128) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(a1 + 136) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(a1 + 140) = v10;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v11 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(a1 + 144) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = 0;
  *(_DWORD *)(a1 + 152) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = 0;
  *(_DWORD *)(a1 + 156) = v11;
  v12 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(a1 + 160) = v12;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*((_BYTE *)a2 + 176))
  {
    v13 = a2[21];
    a2[21] = 0;
    *(_QWORD *)(a1 + 168) = v13;
    *(_BYTE *)(a1 + 176) = 1;
  }
  v14 = *(_OWORD *)(a2 + 23);
  v15 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 184) = v14;
  v16 = *(_OWORD *)(a2 + 29);
  v17 = *(_OWORD *)(a2 + 31);
  v18 = *(_OWORD *)(a2 + 33);
  *(_DWORD *)(a1 + 279) = *(_DWORD *)((char *)a2 + 279);
  *(_OWORD *)(a1 + 264) = v18;
  *(_OWORD *)(a1 + 248) = v17;
  *(_OWORD *)(a1 + 232) = v16;
  v19 = a2[36];
  a2[36] = 0;
  *(_QWORD *)(a1 + 288) = v19;
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
  *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
  return a1;
}

void sub_196EBA5B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unsigned int **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  unsigned int *v6;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  WTF::URL::URL(a1 + 40, (uint64_t *)a2 + 5);
  WTF::URL::URL(a1 + 80, (uint64_t *)a2 + 10);
  v6 = *(__int128 *)((char *)a2 + 120);
  v7 = *(__int128 *)((char *)a2 + 136);
  v8 = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 176) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(a1 + 184) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(a1 + 188) = v9;
  *(_BYTE *)(a1 + 192) = 1;
  return a1;
}

void sub_196EBA6A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::SerializedScriptValue *v8;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v8 = (WebCore::SerializedScriptValue *)v4;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

void WebCore::ServiceWorkerJobData::~ServiceWorkerJobData(WebCore::ServiceWorkerJobData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 232, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 26);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v6])(&v9, (char *)this + 80);
  *((_DWORD *)this + 26) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit(WebCore::SecurityPolicyViolationEventInit *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  WTF *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = (WTF *)*((unsigned int *)a2 + 15);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = (_DWORD)v6;
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc(v6);
    *(_DWORD *)(a1 + 56) = (_DWORD)v6;
    *(_QWORD *)(a1 + 48) = v7;
    memcpy(v7, *((const void **)a2 + 6), *((unsigned int *)a2 + 15));
  }
  v8 = a2[4];
  v9 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 104) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  v12 = (WTF *)*((unsigned int *)a2 + 37);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(a1 + 144) = (_DWORD)v12;
    *(_QWORD *)(a1 + 136) = v13;
    memcpy(v13, *((const void **)a2 + 17), *((unsigned int *)a2 + 37));
  }
  v14 = *(__int128 *)((char *)a2 + 152);
  v15 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 182) = *(_QWORD *)((char *)a2 + 182);
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  return a1;
}

void sub_196EBAB0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v5 = *(WTF::StringImpl **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v7, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDeviceWithCapabilities>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities(a1 + 40, (__int128 *)(a2 + 5));
  *(_BYTE *)(a1 + 232) = 1;
  return a1;
}

void sub_196EBABDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = v2[3];
  v2[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[2];
  v2[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

void WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities(WebCore::RealtimeMediaSourceCapabilities *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, a2);
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v8 = v2;
    v9 = v3;
    v5 = result;
    do
    {
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 14);
      *((_QWORD *)v5 + 14) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 = *((unsigned int *)v5 + 26);
      if ((_DWORD)v6 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1E34ADED0[v6])(&v7, (char *)v5 + 8);
      *((_DWORD *)v5 + 26) = -1;
      v5 = (WTF::StringImpl *)((char *)v5 + 152);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction *this)
{
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction(WebCore::ContentExtensions::RedirectAction::URLTransformAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E34ADEF0[v5])(&v10, (char *)this + 40);
  *((_DWORD *)this + 18) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SE_EEEEEEDcSI_DpT0_(uint64_t a1, void *a2)
{
  void *v3;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 16, a2);
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v3);
}

uint64_t WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::destruct(WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 2), a2);
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v3);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::SourceImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::SourceImage>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(v4 + 16, a2 + 16);
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void sub_196EBB204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(v13 + 32))
  {
    v16 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADF00[v16])(&a13, v14);
    *(_DWORD *)(v13 + 24) = -1;
  }
  v17 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADF00[v17])(&a12, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBB2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADF00[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34ADF00[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADF18[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(a2, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(a2, a2);
}

uint64_t *WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v5 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v12 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_BYTE *std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    WebCore::Region::Region();
    a1[24] = 1;
  }
  return a1;
}

void sub_196EBB4C4(_Unwind_Exception *exception_object)
{
  WebCore::Region *v1;

  if (*((_BYTE *)v1 + 24))
    WebCore::Region::~Region(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MediaControlsContextMenuItem>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MediaControlsContextMenuItem>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((char *)v3 + 32);
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 48);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WTF::URL::URL(a1 + 16, (uint64_t *)(a2 + 16));
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_196EBB604(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::WorkerFetchResult::~WorkerFetchResult(WebCore::WorkerFetchResult *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;

  v3 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v11 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v6, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(int a1, WTF::MachSendRight *this)
{
  WTF::MachSendRight::~MachSendRight(this);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  WTF::URL::URL(v4 + 32, (uint64_t *)(a2 + 32));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  WTF::URL::URL(a1 + 80, (uint64_t *)(a2 + 80));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a1 + 136, a2 + 136);
  std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a1 + 208, a2 + 208);
  std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a1 + 280, a2 + 280);
  return a1;
}

{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v14;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  v4 = *(_DWORD **)(a2 + 32);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_DWORD **)(a2 + 80);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  v8 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = v8;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    v9 = *(_DWORD **)(a2 + 152);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(a1 + 152) = v9;
    v10 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v10;
    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    v11 = *(_DWORD **)(a2 + 224);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a1 + 224) = v11;
    v12 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v12;
    *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
    *(_BYTE *)(a1 + 272) = 1;
  }
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    v13 = *(_DWORD **)(a2 + 296);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(a1 + 296) = v13;
    v14 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v14;
    *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
    *(_BYTE *)(a1 + 344) = 1;
  }
  return a1;
}

void sub_196EBB8AC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v17, a2);
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v16, v19);
  v21 = *v15;
  *v15 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *v14;
  *v14 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v23])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (char *)this + 48;
    do
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (unsigned int *)*((_QWORD *)v4 - 1);
      *((_QWORD *)v4 - 1) = 0;
      if (v7)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, a2);
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 - 6);
      *((_QWORD *)v4 - 6) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

void WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(WebCore::ServiceWorkerContextData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  const void *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 63);
  if (v4)
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 128));
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 400, a2);
  v10 = (const void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (unsigned int *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 304, (WTF::StringImpl *)v9);
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 232, v12);
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 160, v13);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *((unsigned int *)this + 12);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v17])(&v18, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v10;

  if (*(_BYTE *)(a1 + 352))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 280, a2);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 208, v3);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 136, v4);
    v6 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v10, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a1 + 8), a2 + 8);
    a1[72] = 1;
  }
  return a1;
}

void sub_196EBBCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (*(_BYTE *)(v13 + 72))
  {
    v16 = *(unsigned int *)(v13 + 64);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v16])(&a13, v14);
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;

  if (*(_BYTE *)(a1 + 272))
  {
    v3 = *(WTF **)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v3 != 0)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;

  if (*(_BYTE *)(a1 + 144))
  {
    v3 = *(WTF **)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v3 != 0)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

_OWORD *std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _OWORD *result;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;

  v4 = WTF::fastMalloc((WTF *)0x1A0);
  v5 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = v4 + 16;
  *(_DWORD *)(v4 + 8) = 32;
  *(_DWORD *)(v4 + 12) = v5;
  v6 = (void *)(v4 + 16);
  if (v5 >= 0x21)
  {
    if (v5 >> 30)
      goto LABEL_11;
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v4 + 8) = v5;
    *(_QWORD *)v4 = v6;
  }
  memcpy(v6, *(const void **)a1, 4 * *(unsigned int *)(a1 + 12));
  v7 = *(unsigned int *)(a1 + 156);
  result = (_OWORD *)(v4 + 160);
  *(_QWORD *)(v4 + 144) = v4 + 160;
  *(_DWORD *)(v4 + 152) = 16;
  *(_DWORD *)(v4 + 156) = v7;
  if (v7 < 0x11)
    goto LABEL_3;
  if (v7 >> 28)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x196EBBEB4);
  }
  result = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
  *(_DWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 144) = result;
LABEL_3:
  v9 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v9)
  {
    v10 = *(__int128 **)(a1 + 144);
    v11 = 16 * v9;
    do
    {
      v12 = *v10++;
      *result++ = v12;
      v11 -= 16;
    }
    while (v11);
  }
  *a2 = v4;
  return result;
}

void sub_196EBBEC0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF *v5;

  v5 = *(WTF **)v2;
  if (v3 != *(_QWORD *)v2)
  {
    if (v5)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF *v3;
  WTF *v5;

  if (this)
  {
    v3 = (WTF *)*((_QWORD *)this + 18);
    if ((WTF *)((char *)this + 160) != v3 && v3 != 0)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree(v3, this);
    }
    v5 = *(WTF **)this;
    if ((WTF *)((char *)this + 16) != *(WTF **)this && v5 != 0)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v5, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBC058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADF40[v15])(&a13, v13);
  *(_DWORD *)(v13 + 64) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 64);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34ADF40[v4])(&v7, result);
  *(_DWORD *)(v3 + 64) = -1;
  v5 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADF60[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 64) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(WTF **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 32);
  if ((v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, (void *)a2);
    }
  }
  return WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 16, (void *)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[1];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  result = WebCore::Color::Color();
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  return result;
}

uint64_t std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v5;
  WebCore::Color::Color();
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v6;
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  return a1;
}

void sub_196EBC2E8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::AcceleratedEffect::Keyframe>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 280 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::AcceleratedEffect::Keyframe>::destruct(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _DWORD *v4;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = (_DWORD *)v3[33];
      v3[33] = 0;
      if (v4)
      {
        if (v4[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        else
          --v4[2];
      }
      WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)(v3 + 2), a2);
      v3 += 35;
    }
    while (v3 != a2);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBC548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34ADFB0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 48, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::TextExtraction::TextItemData>::__alt[abi:sn180100]<WebCore::TextExtraction::TextItemData>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::TextExtraction::TextItemData>::__alt[abi:sn180100]<WebCore::TextExtraction::TextItemData>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  v3 = *((_OWORD *)a2 + 1);
  *(_QWORD *)(result + 32) = a2[4];
  *(_OWORD *)(result + 16) = v3;
  v4 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v4;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v5 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v5;
    v6 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(result + 56) = v6;
    *(_WORD *)(result + 64) = *((_WORD *)a2 + 32);
    *(_BYTE *)(result + 72) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 120 * v3;
    v6 = (char *)v4 + 104;
    do
    {
      WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6);
      v7 = *((unsigned int *)v6 - 6);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v7])(&v9, v6 - 104);
      *((_DWORD *)v6 - 6) = -1;
      v6 += 120;
      v5 -= 120;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel::Content>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel::Content>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 3);
      if ((v4 & 0x8000000000000) != 0)
      {
        v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      v5 = *((_QWORD *)v3 + 1);
      if ((v5 & 0x8000000000000) != 0)
      {
        v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 32);
    }
    while (v3 != a2);
  }
  return result;
}

void WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *this, void *a2)
{
  void *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  v4 = (WTF *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v4, v3);
  }
  v5 = (WTF *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v5, v3);
  }
  v6 = (WTF *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v6, v3);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, v3);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, v3);
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v3);
    }
  }
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel>::destruct(*(_QWORD *)a1, (void *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel>::destruct(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if ((void *)result != a2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 24);
      if ((v4 & 0x8000000000000) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      result = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      v3 += 40;
    }
    while ((void *)v3 != a2);
  }
  return result;
}

void WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight(WebCore::InspectorOverlayHighlight *this, void *a2)
{
  void *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v3);
  v5 = (WTF *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = *((_QWORD *)this + 4);
  if ((v6 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v4);
    }
  }
  v7 = *((_QWORD *)this + 3);
  if ((v7 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v4);
    }
  }
  v8 = *((_QWORD *)this + 2);
  if ((v8 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v4);
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v4);
    }
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v4);
    }
  }
}

uint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay **)a1;
    v5 = 136 * v3;
    do
    {
      WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(v4, a2);
      v4 = (WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)(v6 + 136);
      v5 -= 136;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      v5 = *(WTF::StringImpl **)(v4 - 8);
      if (v5 != (WTF::StringImpl *)-1)
      {
        v6 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v6 != -1)
        {
          ((void (*)(char *, uint64_t))off_1E34ADFD0[v6])(&v8, v4);
          v5 = *(WTF::StringImpl **)(v4 - 8);
        }
        *(_DWORD *)(v4 + 8) = -1;
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEyxbdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_yxbdEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FixedPositionViewportConstraints::constraintType(WebCore::FixedPositionViewportConstraints *this)
{
  return 0;
}

uint64_t WebCore::StickyPositionViewportConstraints::constraintType(WebCore::StickyPositionViewportConstraints *this)
{
  return 1;
}

uint64_t std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(_DWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 64);
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 64) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34AE048[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient,WebCore::SourceBrushLogicalGradient>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>(*a1, a2, a3);
}

double std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient,WebCore::SourceBrushLogicalGradient>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;

  if (*(_DWORD *)(a1 + 64) == 1)
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>((uint64_t)a2, (uint64_t)a3);
    v5 = a3[1];
    v6 = a3[3];
    a2[2] = a3[2];
    a2[3] = v6;
    a2[1] = v5;
  }
  else
  {
    *(_QWORD *)&v5 = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__emplace[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient>(a1, (uint64_t)a3).n128_u64[0];
  }
  return *(double *)&v5;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AE060[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34AE070[v4])(&v5, result, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSG_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(a2, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AE060[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v9, a2);
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))off_1E34AE060[v5])(&v10, result);
  }
  v8 = *a3;
  *a3 = 0;
  *v4 = v8;
  *((_DWORD *)v4 + 2) = 0;
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__emplace[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  char v7;

  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v7, a1);
  *(_DWORD *)(a1 + 64) = -1;
  std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100](a1, a2);
  result = *(__n128 *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(__n128 *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 64) = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[16];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[16] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)WTF::RefCounted<WebCore::Pattern>::deref((WebCore::Pattern *)result);
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 32))
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x8000000000000) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v6 = result;
        WTF::fastFree((WTF *)v3, a2);
        result = v6;
      }
    }
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v7;
      result = WebCore::Color::operator=();
      *(_QWORD *)(a2 + 24) = a3[3];
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  v9 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v9;
  result = WebCore::Color::Color();
  *(_QWORD *)(v4 + 24) = a3[3];
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      result = *(__n128 *)(a3 + 16);
      v7 = *(_OWORD *)(a3 + 32);
      v8 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(__n128 *)(a2 + 16) = result;
      *(_OWORD *)(a2 + 32) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 32);
  v10 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 64) = v10;
  *(__n128 *)(v4 + 16) = result;
  *(_OWORD *)(v4 + 32) = v9;
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::SourceBrush,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v8, a1 + 16);
    *(_DWORD *)(a1 + 80) = -1;
    if ((*(_QWORD *)a1 & 0x8000000000000) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFLL);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceBrushLogicalGradient::serializableGradient(void)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::SourceBrushLogicalGradient::serializableGradient(void)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  int v8;

  v3 = *a1;
  if (!*(_BYTE *)(*a1 + 40))
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEABB3C](v5);
LABEL_8:
    ++*(_QWORD *)(v5 + 8);
    v8 = __ldxr((unsigned __int8 *)v5);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
    v4 = 0;
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(v3 + 32);
  v4 = 1;
LABEL_3:
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceBrushLogicalGradient::serializableGradient(void)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::SourceBrushLogicalGradient::serializableGradient(void)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 1;
}

uint64_t std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBD640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AE060[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AE060[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AE0A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_BYTE *std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    WebCore::TextIndicatorData::TextIndicatorData((uint64_t)a1, (__int128 *)a2);
    a1[112] = 1;
  }
  return a1;
}

void sub_196EBD75C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD ***)a2;
      v8 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        v9 = *v7;
        if (*v7)
          *v9 += 2;
        *v5 = v9;
        v10 = v7[1];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        v5[1] = v10;
        v5 += 2;
        v7 += 2;
      }
      while (v7 != (_DWORD **)v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int **v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(unsigned int ***)a1;
    v7 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v8 + 2);
          v12 = v7;
          v13 = v6;
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          v7 = v12;
          v6 = v13;
        }
      }
      ++v6;
    }
    while (v6 != (unsigned int **)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v4, a2)+ 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)a1;
    v7 = 8 * v3;
    do
    {
      v6 = WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    v4 = (WTF *)WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  JSC::ArrayBufferContents *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(JSC::ArrayBufferContents **)a1;
    v5 = 56 * v3;
    do
    {
      JSC::ArrayBufferContents::~ArrayBufferContents(v4);
      v4 = (JSC::ArrayBufferContents *)(v6 + 56);
      v5 -= 56;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::SerializedScriptValue::Internals::~Internals(WebCore::SerializedScriptValue::Internals *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WTF::FastMalloc **v9;
  uint64_t v10;
  WTF::FastMalloc *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  bmalloc::api *v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  bmalloc::api *v42;
  void *v43;
  WTF *v44;
  uint64_t v45;
  WebCore::DetachedOffscreenCanvas **v46;
  uint64_t v47;
  WebCore::DetachedOffscreenCanvas *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  uint64_t v52;
  WebCore::DetachedImageBitmap *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  WTF *v61;
  void *v62;
  void *v63;
  WTF *v64;

  v3 = *((unsigned int *)this + 59);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 28);
    v5 = 72 * v3;
    do
    {
      v4 = MEMORY[0x19AEB06D8](v4) + 72;
      v5 -= 72;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 28);
  if (v6)
  {
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
  {
    v8 = *((unsigned int *)v7 + 3);
    if ((_DWORD)v8)
    {
      v9 = *(WTF::FastMalloc ***)v7;
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
          WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *(WTF **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree(v7, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v13)
  {
    v14 = *((unsigned int *)v13 + 3);
    if ((_DWORD)v14)
    {
      v15 = *(unsigned int ***)v13;
      v16 = *(_QWORD *)v13 + 8 * v14;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            v20 = (WTF *)MEMORY[0x19AEAAAD4]();
            WTF::fastFree(v20, v21);
          }
        }
        ++v15;
      }
      while (v15 != (unsigned int **)v16);
    }
    v22 = *(WTF **)v13;
    if (*(_QWORD *)v13)
    {
      *(_QWORD *)v13 = 0;
      *((_DWORD *)v13 + 2) = 0;
      WTF::fastFree(v22, a2);
    }
    WTF::fastFree(v13, a2);
  }
  v23 = *((unsigned int *)this + 51);
  if ((_DWORD)v23)
  {
    v24 = (uint64_t *)*((_QWORD *)this + 24);
    for (i = 8 * v23; i; i -= 8)
    {
      v26 = *v24;
      *v24 = 0;
      if (!v26)
        goto LABEL_45;
      v27 = *(_QWORD *)(v26 + 48);
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_33;
      }
      MEMORY[0x19AEABB3C](v27);
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v36 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v36 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
          if (!v30)
            goto LABEL_41;
          goto LABEL_45;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      if (!v30)
      {
LABEL_41:
        if (v31)
        {
          v34 = (bmalloc::api *)MEMORY[0x19AEAD0CC](v31);
          bmalloc::api::isoDeallocate(v34, v35);
        }
        if (!v32)
          WTF::fastFree((WTF *)v27, a2);
      }
LABEL_45:
      ++v24;
    }
  }
  v37 = (WTF *)*((_QWORD *)this + 24);
  if (v37)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v37, a2);
  }
  v38 = *((unsigned int *)this + 47);
  if ((_DWORD)v38)
  {
    v39 = (uint64_t *)*((_QWORD *)this + 22);
    v40 = 8 * v38;
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        if (*(_DWORD *)(v41 + 24) == 1)
        {
          v42 = (bmalloc::api *)MEMORY[0x19AEAEB60]();
          bmalloc::api::isoDeallocate(v42, v43);
        }
        else
        {
          --*(_DWORD *)(v41 + 24);
        }
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  v44 = (WTF *)*((_QWORD *)this + 22);
  if (v44)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v44, a2);
  }
  v45 = *((unsigned int *)this + 43);
  if ((_DWORD)v45)
  {
    v46 = (WebCore::DetachedOffscreenCanvas **)*((_QWORD *)this + 20);
    v47 = 8 * v45;
    do
    {
      v48 = *v46;
      *v46 = 0;
      if (v48)
      {
        WebCore::DetachedOffscreenCanvas::~DetachedOffscreenCanvas(v48);
        WTF::fastFree(v49, v50);
      }
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
  v51 = (WTF *)*((_QWORD *)this + 20);
  if (v51)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v51, a2);
  }
  v52 = *((unsigned int *)this + 39);
  v53 = (WebCore::DetachedImageBitmap *)*((_QWORD *)this + 18);
  if ((_DWORD)v52)
  {
    v54 = 24 * v52;
    do
    {
      if (*((_BYTE *)v53 + 16))
        WebCore::DetachedImageBitmap::~DetachedImageBitmap(v53);
      v53 = (WebCore::DetachedImageBitmap *)((char *)v53 + 24);
      v54 -= 24;
    }
    while (v54);
    v53 = (WebCore::DetachedImageBitmap *)*((_QWORD *)this + 18);
  }
  if (v53)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v53, a2);
  }
  std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)this + 17, a2);
  WTF::Vector<std::unique_ptr<WebCore::MediaStreamTrackDataHolder>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v55);
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v56);
  WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v57);
  WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v58);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, v59);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v60);
  WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v61);
  std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)this + 2, v62);
  v64 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v64, v63);
  }
}

void WebCore::FilterOperation::blend(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::FilterOperation::transformColor()
{
  return 0;
}

uint64_t WebCore::FilterOperation::inverseTransformColor()
{
  return 0;
}

uint64_t WebCore::FilterOperation::isIdentity(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::outsets(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::affectsOpacity(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::movesPixels(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::shouldBeRestrictedBySecurityOrigin(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::PassthroughFilterOperation::clone@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 12;
  *(_QWORD *)result = off_1E34AE0C8;
  *a1 = result;
  return result;
}

BOOL WebCore::PassthroughFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS8_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_DWORD **)a2;
    *(_QWORD *)a2 = 0;
    if (v2)
    {
      if (v2[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      else
        --v2[2];
    }
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&)::{lambda(WebCore::PlatformCursorType&&)#1},WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &)::{lambda(std::optional<WebCore::Cursor::CustomCursorIPCData>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&>@<X0>(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if ((_DWORD)result == 44 || (_DWORD)result == 0)
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v6 = WebCore::Cursor::fromType();
    result = WebCore::Cursor::platformCursor((WebCore::Cursor *)v6);
    *(_BYTE *)a2 = *(_BYTE *)v6;
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      ++*(_DWORD *)(v7 + 8);
    *(_QWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v6 + 16);
    v5 = 1;
  }
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&)::{lambda(WebCore::PlatformCursorType&&)#1},WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &)::{lambda(std::optional<WebCore::Cursor::CustomCursorIPCData>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&>@<D0>(WebCore::Image *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Image *v4;
  IntPoint *v5;
  char v6;
  uint64_t v7;
  double result;
  IntPoint v9;
  _BYTE v10[8];
  uint64_t v11;
  __int128 v12;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = (IntPoint *)(a2 + 8);
    v4 = *(WebCore::Image **)a2;
  }
  else
  {
    v4 = (WebCore::Image *)WebCore::Image::nullImage(a1);
    v9 = 0;
    v5 = &v9;
  }
  WebCore::Cursor::Cursor((WebCore::Cursor *)v10, v4, v5);
  v6 = v10[0];
  v7 = v11;
  result = *(double *)&v12;
  *(_OWORD *)(a3 + 16) = v12;
  *(_BYTE *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBDFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD770[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AD770[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AE148[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WTF::URL>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WTF::URL>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

double WebCore::ShareableBitmapHandle::ShareableBitmapHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(v3 + 24) = v4;
    *(_BYTE *)(v3 + 32) = 1;
  }
  *(_BYTE *)(v3 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(v3 + 44) = 0;
  if (*(_BYTE *)(a2 + 44))
    *(_BYTE *)(v3 + 44) = 1;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(v3 + 52) = 0;
  if (*(_BYTE *)(a2 + 52))
    *(_BYTE *)(v3 + 52) = 1;
  result = *(double *)(a2 + 56);
  *(double *)(v3 + 56) = result;
  return result;
}

WTF::MachSendRight *std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](WTF::MachSendRight *this)
{
  const void *v2;

  if (*((_BYTE *)this + 64))
  {
    if (*((_BYTE *)this + 32))
    {
      v2 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (v2)
        CFRelease(v2);
    }
    WTF::MachSendRight::~MachSendRight(this);
  }
  return this;
}

uint64_t std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    WebCore::SerializedPlatformDataCueValue::Data::Data((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_196EBE258(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::SerializedPlatformDataCueValue::Data::Data(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  a1[1] = 0;
  v4 = a2[1];
  a2[1] = 0;
  a1[1] = v4;
  v5 = a2[2];
  a2[2] = 0;
  a1[2] = v5;
  v6 = a2[3];
  a2[3] = 0;
  a1[3] = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void sub_196EBE2C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v4 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl ***)(v2 + 8);
  if (v6)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  v7 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  char v9;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34AE160[v3])(&v9, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl ***)(a1 + 8);
    if (v6)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AE160[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AE160[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AE188[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSC_15CrashOnOverflowELm16ENSC_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SJ_EEEEEEDcSN_DpT0_(int a1, WTF::MachSendRight *this)
{
  if (*((_BYTE *)this + 16))
    WTF::MachSendRight::~MachSendRight(this);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSC_15CrashOnOverflowELm16ENSC_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34AE1C0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_196EBE618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34AD110[v14])(&a12, v12);
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  *a2 = 0;
  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(unsigned __int8 *)(v4 - 8) != 254)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_1E34AD110[v5])(&v7, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

__n128 std::__optional_destruct_base<WebKit::WebKeyboardEvent,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebKeyboardEvent>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_DWORD **)(a2 + 32);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD **)(a2 + 40);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_DWORD **)(a2 + 48);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_DWORD **)(a2 + 56);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_DWORD **)(a2 + 64);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 64) = v7;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x38E38E4)
  {
    v5 = 72 * v3;
    v6 = WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v2 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = 72 * v7;
      do
      {
        *(_OWORD *)v6 = *(_OWORD *)v8;
        v10 = *(_OWORD *)(v8 + 16);
        v11 = *(_OWORD *)(v8 + 32);
        v12 = *(_OWORD *)(v8 + 48);
        *(_QWORD *)(v6 + 64) = *(_QWORD *)(v8 + 64);
        *(_OWORD *)(v6 + 32) = v11;
        *(_OWORD *)(v6 + 48) = v12;
        *(_OWORD *)(v6 + 16) = v10;
        v6 += 72;
        v8 += 72;
        v9 -= 72;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::TextIndicator>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEADE34]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 96))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v2 = *(const void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v2)
        CFRelease(v2);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 32));
    v3 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      CFRelease(v3);
  }
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[264] = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a1, (uint64_t *)a2);
    a1[264] = 1;
  }
  return a1;
}

void sub_196EBE914(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::ApplicationManifest *v2;

  if (*((_BYTE *)v2 + 264))
    WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    WebCore::Color::Color();
    a1[8] = 1;
  }
  return a1;
}

void sub_196EBE970(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v2;
    LOBYTE(v2) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = 0;
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)this, a2);
}

_BYTE *std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[200] = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    std::construct_at[abi:sn180100]<WebKit::RemotePageParameters,WebKit::RemotePageParameters,WebKit::RemotePageParameters*>((uint64_t)a1, a2);
    a1[200] = 1;
  }
  return a1;
}

void sub_196EBEA88(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::RemotePageParameters,WebKit::RemotePageParameters,WebKit::RemotePageParameters*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result;
    WTF::URL::URL(result, (uint64_t *)a2);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 56) = v5;
    *(_QWORD *)(v4 + 72) = 0;
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(v4 + 64) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(v4 + 72) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(v4 + 76) = v6;
    std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v4 + 80), a2 + 80);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EBEB24(_Unwind_Exception *a1, void *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v6 = v2[7];
  v2[7] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v2;
  *v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 200))
  {
    if (*(_BYTE *)(a1 + 192))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 80), a2);
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl **v2;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v2 = *(WTF::StringImpl ***)a1;
      if (*(_QWORD *)a1)
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*(unsigned int *)(a1 + 8));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 88))
  {
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(a1 + 24), v5);
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v6);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(WTF **)(a1 + 24);
    if (v2)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*(unsigned int *)(a1 + 32));
    if (*(_QWORD *)a1)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)a1, (WTF::StringImpl *)*(unsigned int *)(a1 + 8));
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::RemotePageParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::RemotePageParameters>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  WTF::URL::URL(a1, (uint64_t *)a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(v4 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(v4 + 76) = v6;
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v4 + 80), a2 + 80);
  *(_BYTE *)(a1 + 200) = 1;
  return a1;
}

void sub_196EBED70(_Unwind_Exception *a1, void *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = v3;
  WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  v7 = v2[7];
  v2[7] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v3])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_bjdEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 152) = 0;
  if (*((_BYTE *)a2 + 152))
  {
    v2 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)result = v2;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v5;
    *(_QWORD *)(result + 32) = a2[4];
    v6 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v6;
    v7 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v7;
    *(_BYTE *)(result + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(result + 64) = 0;
    v8 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(result + 64) = v8;
    *(_QWORD *)(result + 72) = 0;
    v9 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(result + 72) = v9;
    v10 = a2[10];
    a2[10] = 0;
    *(_QWORD *)(result + 80) = v10;
    v11 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(result + 88) = v11;
    *(_BYTE *)(result + 96) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v12 = a2[12];
      a2[12] = 0;
      *(_QWORD *)(result + 96) = v12;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 0;
    *(_BYTE *)(result + 120) = 0;
    if (*((_BYTE *)a2 + 120))
    {
      v13 = a2[14];
      a2[14] = 0;
      *(_QWORD *)(result + 112) = v13;
      *(_BYTE *)(result + 120) = 1;
    }
    *(_BYTE *)(result + 128) = 0;
    *(_BYTE *)(result + 136) = 0;
    if (*((_BYTE *)a2 + 136))
    {
      v14 = a2[16];
      a2[16] = 0;
      *(_QWORD *)(result + 128) = v14;
      *(_BYTE *)(result + 136) = 1;
    }
    *(_BYTE *)(result + 144) = *((_BYTE *)a2 + 144);
    *(_BYTE *)(result + 152) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(WTF::StringImpl **a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<WebCore::ApplePaySetupConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

unsigned int *std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(unsigned int *result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*((unsigned __int8 *)result + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*((_BYTE *)result + 72))
      return (unsigned int *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((uint64_t)result, a2);
  }
  else if (*((_BYTE *)result + 72))
  {
    v3 = result[16];
    if ((_DWORD)v3 != -1)
      result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3]((int)&v4, (WTF::MachSendRight *)result);
    v2[16] = -1;
    *((_BYTE *)v2 + 72) = 0;
  }
  else
  {
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
    *((_BYTE *)v2 + 72) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 64);
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 64) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRSB_SF_EEEDcmSH_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(int a1, WTF::MachSendRight *this)
{
  const void *v3;

  if (*((_BYTE *)this + 32))
  {
    v3 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
      CFRelease(v3);
  }
  WTF::MachSendRight::~MachSendRight(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(int a1, WTF::MachSendRight *this)
{
  WTF::MachSendRight::~MachSendRight(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__assign_alt[abi:sn180100]<0ul,WebCore::ShareableBitmapHandle,WebCore::ShareableBitmapHandle>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(unsigned int **a1)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__assign_alt[abi:sn180100]<1ul,WTF::MachSendRight,WTF::MachSendRight>(*a1);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__assign_alt[abi:sn180100]<0ul,WebCore::ShareableBitmapHandle,WebCore::ShareableBitmapHandle>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (a1[16])
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__emplace[abi:sn180100]<0ul,WebCore::ShareableBitmapHandle>(a1, a3);
  else
    WebCore::ShareableBitmapHandle::operator=(a2, a3);
}

uint64_t WebCore::ShareableBitmapHandle::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  WTF::MachSendRight::operator=();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  std::__optional_storage_base<WebCore::DestinationColorSpace,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::DestinationColorSpace,false>>(a1 + 24, (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44) != 0;
  *(_DWORD *)(a1 + 48) = v4;
  v5 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52) != 0;
  v6 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v5;
  *(_DWORD *)(a1 + 60) = v6;
  return a1;
}

void std::__optional_storage_base<WebCore::DestinationColorSpace,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::DestinationColorSpace,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(const void **)a1;
      *(_QWORD *)a1 = v3;
      if (v4)
        CFRelease(v4);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
      CFRelease(v5);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__emplace[abi:sn180100]<0ul,WebCore::ShareableBitmapHandle>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = a1[16];
  if ((_DWORD)v4 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4]((int)&v5, (WTF::MachSendRight *)a1);
  a1[16] = -1;
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2);
  a1[16] = 0;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__assign_alt[abi:sn180100]<1ul,WTF::MachSendRight,WTF::MachSendRight>(unsigned int *a1)
{
  if (a1[16] == 1)
    return WTF::MachSendRight::operator=();
  else
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__emplace[abi:sn180100]<1ul,WTF::MachSendRight>(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__emplace[abi:sn180100]<1ul,WTF::MachSendRight>(unsigned int *a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = a1[16];
  if ((_DWORD)v2 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v2]((int)&v4, (WTF::MachSendRight *)a1);
  a1[16] = -1;
  result = WTF::MachSendRight::MachSendRight();
  a1[16] = 1;
  return result;
}

unsigned int *std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor(unsigned int *a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  a1[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196EBF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned int *v13;
  uint64_t v15;

  v15 = v13[16];
  if ((_DWORD)v15 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((int)&a13, (WTF::MachSendRight *)v13);
  v13[16] = -1;
  _Unwind_Resume(exception_object);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = result[16];
  if ((_DWORD)v4 != -1)
    result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4]((int)&v7, (WTF::MachSendRight *)result);
  v3[16] = -1;
  v5 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v5 != -1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    v3[16] = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_()
{
  return WTF::MachSendRight::MachSendRight();
}

void std::__optional_storage_base<WebKit::EditorState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState,false>>(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;

  if (*(unsigned __int8 *)(a1 + 480) == a2[480])
  {
    if (*(_BYTE *)(a1 + 480))
    {
      v4 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)(a1 + 32), a2 + 32);
      std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(a1 + 352, (__int128 *)a2 + 22);
    }
  }
  else if (*(_BYTE *)(a1 + 480))
  {
    std::__optional_destruct_base<WebKit::EditorState,false>::reset[abi:sn180100]((_BYTE *)a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void std::__optional_destruct_base<WebKit::EditorState,false>::reset[abi:sn180100](_BYTE *a1, void *a2)
{
  void *v3;

  if (a1[480])
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 352), a2);
    if (a1[336])
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)(a1 + 32), v3);
    a1[480] = 0;
  }
}

void std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>(WebKit::EditorState::PostLayoutData *this, unsigned __int8 *a2)
{
  __int128 v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;

  if (*((unsigned __int8 *)this + 304) == a2[304])
  {
    if (*((_BYTE *)this + 304))
    {
      v4 = *(_OWORD *)a2;
      *((_BYTE *)this + 16) = a2[16];
      *(_OWORD *)this = v4;
      WebCore::Color::operator=();
      *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
      WTF::String::operator=((WTF::StringImpl **)this + 5, (WTF::StringImpl *)(a2 + 40));
      WTF::String::operator=((WTF::StringImpl **)this + 6, (WTF::StringImpl *)(a2 + 48));
      v5 = *((_DWORD *)a2 + 16);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 16) = v5;
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)this + 72, (_DWORD *)a2 + 18);
      v6 = *((_DWORD *)a2 + 22);
      *((_BYTE *)this + 92) = a2[92];
      *((_DWORD *)this + 22) = v6;
      WebCore::Color::operator=();
      v7 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)((char *)this + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)((char *)this + 120) = v7;
      v8 = *(_OWORD *)(a2 + 152);
      v9 = *(_OWORD *)(a2 + 168);
      v10 = *(_OWORD *)(a2 + 177);
      *(_OWORD *)((char *)this + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)((char *)this + 177) = v10;
      *(_OWORD *)((char *)this + 168) = v9;
      *(_OWORD *)((char *)this + 152) = v8;
      std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontAttributes,false>>((_DWORD *)this + 52, a2 + 208);
      v11 = *((_WORD *)a2 + 148);
      *((_BYTE *)this + 298) = a2[298];
      *((_WORD *)this + 148) = v11;
    }
  }
  else if (*((_BYTE *)this + 304))
  {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(this, a2);
    *((_BYTE *)this + 304) = 0;
  }
  else
  {
    WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)this, (__int128 *)a2);
    *((_BYTE *)this + 304) = 1;
  }
}

_DWORD *std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontAttributes,false>>(_DWORD *result, unsigned __int8 *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  __int16 v7;

  v3 = result;
  if (*((unsigned __int8 *)result + 80) == a2[80])
  {
    if (*((_BYTE *)result + 80))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(_DWORD **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
        WTF::RefCounted<WebCore::Font>::deref(v5);
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
      *((_WORD *)v3 + 24) = *((_WORD *)a2 + 24);
      v6 = v3[17];
      if (v6)
        WTF::VectorDestructor<true,WebCore::TextList>::destruct(*((WTF::StringImpl **)v3 + 7), (WTF::StringImpl *)(*((_QWORD *)v3 + 7) + 24 * v6));
      result = WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)(v3 + 14), (_DWORD *)a2 + 14);
      v7 = *((_WORD *)a2 + 36);
      *((_BYTE *)v3 + 74) = a2[74];
      *((_WORD *)v3 + 36) = v7;
    }
  }
  else if (*((_BYTE *)result + 80))
  {
    return std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    result = (_DWORD *)WebCore::FontAttributes::FontAttributes((uint64_t)result, (uint64_t *)a2);
    *((_BYTE *)v3 + 80) = 1;
  }
  return result;
}

_DWORD *std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100](_DWORD *result, void *a2)
{
  _DWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (*((_BYTE *)result + 80))
  {
    v2 = result;
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 14), a2);
    v4 = *((_QWORD *)v2 + 3);
    if ((v4 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v3);
      }
    }
    v5 = *((_QWORD *)v2 + 2);
    if ((v5 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v3);
      }
    }
    v6 = *((_QWORD *)v2 + 1);
    if ((v6 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v3);
      }
    }
    result = *(_DWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (result)
      result = WTF::RefCounted<WebCore::Font>::deref(result);
    *((_BYTE *)v2 + 80) = 0;
  }
  return result;
}

__n128 std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (*(unsigned __int8 *)(a1 + 112) == *((unsigned __int8 *)a2 + 112))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 48, (_DWORD *)a2 + 12);
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 64, (_DWORD *)a2 + 16);
      result = (__n128)a2[5];
      v7 = a2[6];
      *(__n128 *)(a1 + 80) = result;
      *(_OWORD *)(a1 + 96) = v7;
    }
  }
  else if (*(_BYTE *)(a1 + 112))
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::reset[abi:sn180100](a1, a2);
  }
  else
  {
    v8 = *a2;
    v9 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v10 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 48) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *(_DWORD *)(a1 + 56) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *(_DWORD *)(a1 + 60) = v10;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v11 = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 64) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    *(_DWORD *)(a1 + 72) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = 0;
    *(_DWORD *)(a1 + 76) = v11;
    result = (__n128)a2[5];
    v12 = a2[6];
    *(__n128 *)(a1 + 80) = result;
    *(_OWORD *)(a1 + 96) = v12;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;

  if (*(_BYTE *)(result + 112))
  {
    v2 = result;
    v3 = *(WTF **)(result + 64);
    if (v3)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    result = *(_QWORD *)(v2 + 48);
    if (result)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v2 + 112) = 0;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *(_DWORD *)(result + 15) = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)result = v4;
    std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(result + 32), (uint64_t)(a2 + 2));
    std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](v3 + 352, a2 + 22);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_196EBFBF0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WebKit::EditorState::PostLayoutData *v3;

  if (*(_BYTE *)(v2 + 336))
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v3, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1, void *a2)
{
  void *v3;

  if (a1[480])
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 352), a2);
    if (a1[336])
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)(a1 + 32), v3);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::LayerProperties **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::LayerProperties **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::LayerProperties *)-1)
        std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100](v4, 0);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::LayerProperties *std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100](WebKit::LayerProperties **a1, WebKit::LayerProperties *a2)
{
  WebKit::LayerProperties *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LayerProperties::~LayerProperties(result);
    return (WebKit::LayerProperties *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::Model *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSB_SC_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebCore::Model **a2)
{
  WebCore::Model *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::Model>::deref(result);
  return result;
}

uint64_t WebCore::AcceleratedEffectValues::AcceleratedEffectValues(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 96) = 0;
  *(_WORD *)(result + 101) = 0;
  v6 = *(unsigned __int8 *)(a2 + 100);
  *(_BYTE *)(result + 100) = v6;
  *(_BYTE *)(result + 101) = *(_BYTE *)(a2 + 101);
  if (v6 <= 0xD)
  {
    v7 = 1 << v6;
    if ((v7 & 0x7FC) != 0)
    {
      v8 = *(unsigned __int8 *)(a2 + 102);
      *(_BYTE *)(result + 102) = v8;
      if (v8)
      {
        *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 96);
        goto LABEL_10;
      }
      v9 = *(_DWORD *)(a2 + 96);
    }
    else
    {
      if ((v7 & 0x3003) != 0)
      {
        *(_DWORD *)(result + 96) = 0;
        goto LABEL_10;
      }
      v9 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a2 + 96) = 0;
    }
    *(_DWORD *)(result + 96) = v9;
  }
LABEL_10:
  *(_BYTE *)(a2 + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 109) = 0;
  v10 = *(unsigned __int8 *)(a2 + 108);
  *(_BYTE *)(result + 108) = v10;
  *(_BYTE *)(result + 109) = *(_BYTE *)(a2 + 109);
  if (v10 > 0xD)
    goto LABEL_19;
  v11 = 1 << v10;
  if ((v11 & 0x7FC) != 0)
  {
    v12 = *(unsigned __int8 *)(a2 + 110);
    *(_BYTE *)(result + 110) = v12;
    if (v12)
    {
      *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
      goto LABEL_19;
    }
    v13 = *(_DWORD *)(a2 + 104);
  }
  else
  {
    if ((v11 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 104) = 0;
      goto LABEL_19;
    }
    v13 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
  }
  *(_DWORD *)(result + 104) = v13;
LABEL_19:
  *(_BYTE *)(a2 + 108) = 0;
  *(_BYTE *)(result + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(result + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(result + 128) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(result + 132) = v14;
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(result + 136) = v15;
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(result + 144) = v16;
  v17 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(result + 152) = v17;
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(result + 160) = v18;
  *(_DWORD *)(result + 168) = 0;
  *(_BYTE *)(result + 173) = 0;
  *(_BYTE *)(result + 174) = 0;
  v19 = *(unsigned __int8 *)(a2 + 172);
  *(_BYTE *)(result + 172) = v19;
  *(_BYTE *)(result + 173) = *(_BYTE *)(a2 + 173);
  if (v19 > 0xD)
    goto LABEL_28;
  v20 = 1 << v19;
  if ((v20 & 0x7FC) != 0)
  {
    v21 = *(unsigned __int8 *)(a2 + 174);
    *(_BYTE *)(result + 174) = v21;
    if (v21)
    {
      *(_DWORD *)(result + 168) = *(_DWORD *)(a2 + 168);
      goto LABEL_28;
    }
    v22 = *(_DWORD *)(a2 + 168);
  }
  else
  {
    if ((v20 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 168) = 0;
      goto LABEL_28;
    }
    v22 = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = 0;
  }
  *(_DWORD *)(result + 168) = v22;
LABEL_28:
  *(_BYTE *)(a2 + 172) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(_WORD *)(result + 181) = 0;
  v23 = *(unsigned __int8 *)(a2 + 180);
  *(_BYTE *)(result + 180) = v23;
  *(_BYTE *)(result + 181) = *(_BYTE *)(a2 + 181);
  if (v23 > 0xD)
    goto LABEL_37;
  v24 = 1 << v23;
  if ((v24 & 0x7FC) != 0)
  {
    v25 = *(unsigned __int8 *)(a2 + 182);
    *(_BYTE *)(result + 182) = v25;
    if (v25)
    {
      *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 176);
      goto LABEL_37;
    }
    v26 = *(_DWORD *)(a2 + 176);
  }
  else
  {
    if ((v24 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 176) = 0;
      goto LABEL_37;
    }
    v26 = *(_DWORD *)(a2 + 176);
    *(_DWORD *)(a2 + 176) = 0;
  }
  *(_DWORD *)(result + 176) = v26;
LABEL_37:
  *(_BYTE *)(a2 + 180) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_WORD *)(result + 189) = 0;
  v27 = *(unsigned __int8 *)(a2 + 188);
  *(_BYTE *)(result + 188) = v27;
  *(_BYTE *)(result + 189) = *(_BYTE *)(a2 + 189);
  if (v27 > 0xD)
    goto LABEL_46;
  v28 = 1 << v27;
  if ((v28 & 0x7FC) != 0)
  {
    v29 = *(unsigned __int8 *)(a2 + 190);
    *(_BYTE *)(result + 190) = v29;
    if (v29)
    {
      *(_DWORD *)(result + 184) = *(_DWORD *)(a2 + 184);
      goto LABEL_46;
    }
    v30 = *(_DWORD *)(a2 + 184);
  }
  else
  {
    if ((v28 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 184) = 0;
      goto LABEL_46;
    }
    v30 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = 0;
  }
  *(_DWORD *)(result + 184) = v30;
LABEL_46:
  *(_BYTE *)(a2 + 188) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_WORD *)(result + 197) = 0;
  v31 = *(unsigned __int8 *)(a2 + 196);
  *(_BYTE *)(result + 196) = v31;
  *(_BYTE *)(result + 197) = *(_BYTE *)(a2 + 197);
  if (v31 > 0xD)
    goto LABEL_55;
  v32 = 1 << v31;
  if ((v32 & 0x7FC) != 0)
  {
    v33 = *(unsigned __int8 *)(a2 + 198);
    *(_BYTE *)(result + 198) = v33;
    if (v33)
    {
      *(_DWORD *)(result + 192) = *(_DWORD *)(a2 + 192);
      goto LABEL_55;
    }
    v34 = *(_DWORD *)(a2 + 192);
  }
  else
  {
    if ((v32 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 192) = 0;
      goto LABEL_55;
    }
    v34 = *(_DWORD *)(a2 + 192);
    *(_DWORD *)(a2 + 192) = 0;
  }
  *(_DWORD *)(result + 192) = v34;
LABEL_55:
  *(_BYTE *)(a2 + 196) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_WORD *)(result + 205) = 0;
  v35 = *(unsigned __int8 *)(a2 + 204);
  *(_BYTE *)(result + 204) = v35;
  *(_BYTE *)(result + 205) = *(_BYTE *)(a2 + 205);
  if (v35 <= 0xD)
  {
    v36 = 1 << v35;
    if ((v36 & 0x7FC) != 0)
    {
      v37 = *(unsigned __int8 *)(a2 + 206);
      *(_BYTE *)(result + 206) = v37;
      if (v37)
      {
        *(_DWORD *)(result + 200) = *(_DWORD *)(a2 + 200);
        goto LABEL_64;
      }
      v38 = *(_DWORD *)(a2 + 200);
    }
    else
    {
      if ((v36 & 0x3003) != 0)
      {
        *(_DWORD *)(result + 200) = 0;
        goto LABEL_64;
      }
      v38 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 200) = 0;
    }
    *(_DWORD *)(result + 200) = v38;
  }
LABEL_64:
  *(_BYTE *)(a2 + 204) = 0;
  v39 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 208) = v39;
  v40 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(result + 216) = v40;
  LODWORD(v40) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_DWORD *)(result + 224) = v40;
  LODWORD(v40) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = 0;
  *(_DWORD *)(result + 228) = v40;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  v41 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(result + 232) = v41;
  LODWORD(v41) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(result + 240) = v41;
  LODWORD(v41) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(result + 244) = v41;
  return result;
}

void std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100](int a1, WTF *this)
{
  const void *v3;
  uint64_t v4;
  char v5;

  if (this)
  {
    v3 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
      CFRelease(v3);
    if (*((_BYTE *)this + 72))
    {
      v4 = *((unsigned int *)this + 16);
      if ((_DWORD)v4 != -1)
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4]((int)&v5, this);
      *((_DWORD *)this + 16) = -1;
    }
    WTF::fastFree(this, this);
  }
}

uint64_t std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    v4 = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebCore::AcceleratedEffectValues::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  _DWORD *v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  _DWORD *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  _DWORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int ***v56;
  uint64_t v57;
  unsigned int **v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int ***v64;
  uint64_t v65;
  unsigned int **v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 != a2)
  {
    v8 = (_DWORD *)(a1 + 96);
    if (*(_BYTE *)(a1 + 100) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 96));
    v9 = *(unsigned __int8 *)(a2 + 100);
    *(_BYTE *)(a1 + 100) = v9;
    *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
    if (v9 <= 0xD)
    {
      v10 = 1 << v9;
      if ((v10 & 0x7FC) != 0)
      {
        v11 = *(unsigned __int8 *)(a2 + 102);
        *(_BYTE *)(a1 + 102) = v11;
        if (v11)
        {
          *v8 = *(_DWORD *)(a2 + 96);
          goto LABEL_13;
        }
        v12 = *(_DWORD *)(a2 + 96);
      }
      else
      {
        if ((v10 & 0x3003) != 0)
        {
          *v8 = 0;
          goto LABEL_13;
        }
        v12 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)(a2 + 96) = 0;
      }
      *v8 = v12;
    }
LABEL_13:
    *(_BYTE *)(a2 + 100) = 0;
    v13 = (_DWORD *)(a1 + 104);
    if (*(_BYTE *)(a1 + 108) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 104));
    v14 = *(unsigned __int8 *)(a2 + 108);
    *(_BYTE *)(a1 + 108) = v14;
    *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
    if (v14 > 0xD)
      goto LABEL_24;
    v15 = 1 << v14;
    if ((v15 & 0x7FC) != 0)
    {
      v16 = *(unsigned __int8 *)(a2 + 110);
      *(_BYTE *)(a1 + 110) = v16;
      if (v16)
      {
        *v13 = *(_DWORD *)(a2 + 104);
LABEL_24:
        *(_BYTE *)(a2 + 108) = 0;
        goto LABEL_25;
      }
      v17 = *(_DWORD *)(a2 + 104);
    }
    else
    {
      if ((v15 & 0x3003) != 0)
      {
        *v13 = 0;
        goto LABEL_24;
      }
      v17 = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a2 + 104) = 0;
    }
    *v13 = v17;
    goto LABEL_24;
  }
LABEL_25:
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v18 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v18)
  {
    v19 = *(_DWORD ***)(a1 + 120);
    v20 = 8 * v18;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1 + 120, (_DWORD *)(a2 + 120));
  v22 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v23 = *(_DWORD **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v22;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v25 = *(_DWORD **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v24;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v27 = *(_DWORD **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v26;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  v28 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v29 = *(_DWORD **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
  }
  if (a1 != a2)
  {
    v30 = (_DWORD *)(a1 + 168);
    if (*(_BYTE *)(a1 + 172) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 168));
    v31 = *(unsigned __int8 *)(a2 + 172);
    *(_BYTE *)(a1 + 172) = v31;
    *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
    if (v31 <= 0xD)
    {
      v32 = 1 << v31;
      if ((v32 & 0x7FC) != 0)
      {
        v33 = *(unsigned __int8 *)(a2 + 174);
        *(_BYTE *)(a1 + 174) = v33;
        if (v33)
        {
          *v30 = *(_DWORD *)(a2 + 168);
          goto LABEL_60;
        }
        v34 = *(_DWORD *)(a2 + 168);
      }
      else
      {
        if ((v32 & 0x3003) != 0)
        {
          *v30 = 0;
          goto LABEL_60;
        }
        v34 = *(_DWORD *)(a2 + 168);
        *(_DWORD *)(a2 + 168) = 0;
      }
      *v30 = v34;
    }
LABEL_60:
    *(_BYTE *)(a2 + 172) = 0;
    v35 = (_DWORD *)(a1 + 176);
    if (*(_BYTE *)(a1 + 180) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 176));
    v36 = *(unsigned __int8 *)(a2 + 180);
    *(_BYTE *)(a1 + 180) = v36;
    *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
    if (v36 <= 0xD)
    {
      v37 = 1 << v36;
      if ((v37 & 0x7FC) != 0)
      {
        v38 = *(unsigned __int8 *)(a2 + 182);
        *(_BYTE *)(a1 + 182) = v38;
        if (v38)
        {
          *v35 = *(_DWORD *)(a2 + 176);
          goto LABEL_71;
        }
        v39 = *(_DWORD *)(a2 + 176);
      }
      else
      {
        if ((v37 & 0x3003) != 0)
        {
          *v35 = 0;
          goto LABEL_71;
        }
        v39 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)(a2 + 176) = 0;
      }
      *v35 = v39;
    }
LABEL_71:
    *(_BYTE *)(a2 + 180) = 0;
    v40 = (_DWORD *)(a1 + 184);
    if (*(_BYTE *)(a1 + 188) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 184));
    v41 = *(unsigned __int8 *)(a2 + 188);
    *(_BYTE *)(a1 + 188) = v41;
    *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
    if (v41 <= 0xD)
    {
      v42 = 1 << v41;
      if ((v42 & 0x7FC) != 0)
      {
        v43 = *(unsigned __int8 *)(a2 + 190);
        *(_BYTE *)(a1 + 190) = v43;
        if (v43)
        {
          *v40 = *(_DWORD *)(a2 + 184);
          goto LABEL_82;
        }
        v44 = *(_DWORD *)(a2 + 184);
      }
      else
      {
        if ((v42 & 0x3003) != 0)
        {
          *v40 = 0;
          goto LABEL_82;
        }
        v44 = *(_DWORD *)(a2 + 184);
        *(_DWORD *)(a2 + 184) = 0;
      }
      *v40 = v44;
    }
LABEL_82:
    *(_BYTE *)(a2 + 188) = 0;
    v45 = (_DWORD *)(a1 + 192);
    if (*(_BYTE *)(a1 + 196) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 192));
    v46 = *(unsigned __int8 *)(a2 + 196);
    *(_BYTE *)(a1 + 196) = v46;
    *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
    if (v46 <= 0xD)
    {
      v47 = 1 << v46;
      if ((v47 & 0x7FC) != 0)
      {
        v48 = *(unsigned __int8 *)(a2 + 198);
        *(_BYTE *)(a1 + 198) = v48;
        if (v48)
        {
          *v45 = *(_DWORD *)(a2 + 192);
          goto LABEL_93;
        }
        v49 = *(_DWORD *)(a2 + 192);
      }
      else
      {
        if ((v47 & 0x3003) != 0)
        {
          *v45 = 0;
          goto LABEL_93;
        }
        v49 = *(_DWORD *)(a2 + 192);
        *(_DWORD *)(a2 + 192) = 0;
      }
      *v45 = v49;
    }
LABEL_93:
    *(_BYTE *)(a2 + 196) = 0;
    v50 = (_DWORD *)(a1 + 200);
    if (*(_BYTE *)(a1 + 204) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 200));
    v51 = *(unsigned __int8 *)(a2 + 204);
    *(_BYTE *)(a1 + 204) = v51;
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    if (v51 > 0xD)
      goto LABEL_104;
    v52 = 1 << v51;
    if ((v52 & 0x7FC) != 0)
    {
      v53 = *(unsigned __int8 *)(a2 + 206);
      *(_BYTE *)(a1 + 206) = v53;
      if (v53)
      {
        *v50 = *(_DWORD *)(a2 + 200);
LABEL_104:
        *(_BYTE *)(a2 + 204) = 0;
        goto LABEL_105;
      }
      v54 = *(_DWORD *)(a2 + 200);
    }
    else
    {
      if ((v52 & 0x3003) != 0)
      {
        *v50 = 0;
        goto LABEL_104;
      }
      v54 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 200) = 0;
    }
    *v50 = v54;
    goto LABEL_104;
  }
LABEL_105:
  v55 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v55;
  v56 = (unsigned int ***)(a1 + 216);
  v57 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v57)
  {
    v58 = *v56;
    v59 = (uint64_t)&(*v56)[v57];
    do
    {
      v60 = *v58;
      *v58 = 0;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          atomic_store(1u, v60 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
        }
      }
      ++v58;
    }
    while (v58 != (unsigned int **)v59);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 216, (_DWORD *)(a2 + 216));
  v64 = (unsigned int ***)(a1 + 232);
  v65 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v65)
  {
    v66 = *v64;
    v67 = (uint64_t)&(*v64)[v65];
    do
    {
      v68 = *v66;
      *v66 = 0;
      if (v68)
      {
        v69 = v68 + 2;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          atomic_store(1u, v68 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
        }
      }
      ++v66;
    }
    while (v66 != (unsigned int **)v67);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 232, (_DWORD *)(a2 + 232));
  return a1;
}

_DWORD *WTF::VectorTypeOperations<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 56))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::LayerProperties::AnimationChanges,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;

  if (*(_BYTE *)(a1 + 288))
  {
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)(a1 + 40), a2);
    WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v3);
    v5 = *(WTF::StringImpl ***)(a1 + 16);
    if (v5)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v4);
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v4);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 56);
  v4 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 56) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34AE240[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 56);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = result;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 56) = -1;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v10;
  *(__n128 *)v4 = result;
  *(_DWORD *)(v4 + 56) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__assign_alt[abi:sn180100]<2ul,WTF::DataRef<WebCore::PathImpl>,WTF::DataRef<WebCore::PathImpl>>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__assign_alt[abi:sn180100]<2ul,WTF::DataRef<WebCore::PathImpl>,WTF::DataRef<WebCore::PathImpl>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char v11;

  v4 = result;
  v5 = result[14];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v11, result);
LABEL_9:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    v4[14] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_BYTE *std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  void *v2;

  if (a1[120])
  {
    if (a1[112])
      WebCore::Region::~Region((WebCore::Region *)(a1 + 88));
    WebCore::Region::~Region((WebCore::Region *)(a1 + 64));
    WebCore::Region::~Region((WebCore::Region *)(a1 + 40));
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v2);
    WebCore::Region::~Region((WebCore::Region *)a1);
  }
  return a1;
}

uint64_t std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor((unsigned int *)a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_196EC0B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 72))
  {
    v15 = *(unsigned int *)(v13 + 64);
    if ((_DWORD)v15 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((int)&a13, (WTF::MachSendRight *)v13);
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ScrollingStateTree::operator delete(uint64_t a1, size_t a2)
{
  _DWORD *v3;
  void *v4;

  v3 = (_DWORD *)MEMORY[0x19AEB00FC]();
  if (*v3)
    bzero(v3, a2);
  else
    WTF::fastFree((WTF *)v3, v4);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), a2);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

