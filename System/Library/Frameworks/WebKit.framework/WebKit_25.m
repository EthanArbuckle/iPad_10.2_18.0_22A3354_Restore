_DWORD *WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move(_DWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (result != (_DWORD *)a2)
  {
    v5 = result;
    do
    {
      *a3 = *v5;
      v6 = v5[1];
      v5[1] = 0;
      a3[1] = v6;
      result = (_DWORD *)v5[1];
      v5[1] = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  result = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentController::addUserScriptInternal(WebKit::InjectedBundleScriptWorld &,std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::UserScript &&,WebKit::InjectUserScriptImmediately)::$_0,void,WebCore::Page &>::call(uint64_t a1, const WebCore::Frame **this)
{
  uint64_t v4;
  uint64_t result;
  const WebCore::Frame *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  result = WebCore::Page::userContentProvider((WebCore::Page *)this);
  if (result == v4)
  {
    v6 = this[20];
    if (v6 && *((_BYTE *)v6 + 144) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 81))
      {
        return WebCore::LocalFrame::injectUserScriptImmediately();
      }
      else
      {
        v8 = (uint64_t)v6;
        do
        {
          if (!*(_BYTE *)(v8 + 144))
            WebCore::LocalFrame::injectUserScriptImmediately();
          result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v8 + 48), v6);
          v8 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = v15 + 24 * v22 + 8;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v25, v8);
          v27 = *v23;
          *v23 = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          v28 = *v12;
          *v12 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v9;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *(_QWORD *)v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v29, v26);
          v32 = *v12;
          *v12 = 0;
          if (v32)
            CFRelease(*(CFTypeRef *)(v32 + 8));
          if (v12 == a3)
            v10 = v23;
        }
        else
        {
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v4 + 24 * v9 + 8), v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 104 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2762763)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 12);
      v5 = 104 * a2;
      v6 = WTF::fastMalloc((WTF *)(104 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v6;
      WTF::VectorMover<false,WebKit::WebUserScriptData>::move((uint64_t)v3, v4, v6);
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  result = WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = (_QWORD *)(v15 + 24 * v22 + 8);
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          v27 = *v23;
          *v23 = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          v28 = *v12;
          *v12 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v9;
          *v25 = 0;
          v25[1] = 0;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          v32 = *v12;
          *v12 = 0;
          if (v32)
            CFRelease(*(CFTypeRef *)(v32 + 8));
          if (v12 == a3)
            v10 = v23;
        }
        else
        {
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 24));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 76) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 88) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v6;
  v7 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v7;
  return a1;
}

unint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 120 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x19760FE28);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 120 * *((unsigned int *)result + 3));
    v5 = 120 * a2;
    v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (result != a2)
  {
    v5 = (uint64_t)result;
    do
    {
      std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>::pair[abi:sn180100](a3, v5);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 80, v6);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 64, v7);
      v9 = *(WTF::StringImpl **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      result = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 120;
      v5 += 120;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = -1;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  result = (_QWORD *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), a2);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE3C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE3C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _BYTE v7[168];
  _BYTE v8[24];

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>((uint64_t)v7, a2);
    if (v8[16])
    {
      v4 = v7[160];
      v5 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v7, v4, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v7, v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v7, v3);
      IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BYTE v4[8];
  WTF::StringImpl *v5;
  _OWORD v6[10];

  memset(v6, 0, sizeof(v6));
  v4[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _OWORD *, _QWORD, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v6, 0, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v6, v2);
}

void IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  void *v5;
  int v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  _BYTE v20[88];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  _BYTE v26[8];
  uint64_t v27;
  unsigned __int8 v28;

  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::decode(a2, v18);
  if (!v25)
  {
    v5 = (void *)*a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = (WTF::StringImpl *)a2[3];
    if (v8)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      goto LABEL_25;
LABEL_20:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 184) = 0;
LABEL_21:
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    }
    return;
  }
  while (1)
  {
    v4 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>(a2);
    if (v4 <= 0xFFu)
    {
      v6 = 0;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 184) = 0;
      goto LABEL_11;
    }
    v7 = v4;
    v8 = IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)v26);
    v6 = v28;
    if (!v28)
    {
      *(_BYTE *)a1 = 0;
      goto LABEL_10;
    }
    if (v25)
      break;
    __break(1u);
LABEL_25:
    (*(void (**)(WTF::StringImpl *, void *))(*(_QWORD *)v8 + 16))(v8, v5);
    if (!v25)
      goto LABEL_20;
  }
  *(_BYTE *)a1 = v18[0];
  v9 = v19;
  v19 = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (v20[80])
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1 + 16, (uint64_t)v20);
    *(_BYTE *)(a1 + 96) = 1;
  }
  v10 = v21;
  v21 = 0u;
  *(_OWORD *)(a1 + 104) = v10;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(a1 + 120) = v11;
  v12 = v23;
  v23 = 0u;
  *(_OWORD *)(a1 + 136) = v12;
  *(_QWORD *)&v12 = v24;
  v24 = 0;
  *(_QWORD *)(a1 + 152) = v12;
  *(_BYTE *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 168) = v26[0];
  v6 = 1;
  *(_QWORD *)(a1 + 176) = v27;
LABEL_10:
  *(_BYTE *)(a1 + 184) = v6;
LABEL_11:
  if (v25)
  {
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v18, v5);
    v6 = *(unsigned __int8 *)(a1 + 184);
  }
  if (!v6)
    goto LABEL_21;
}

WebCore::AuthenticatorResponseData *std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticatorResponseData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 184))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData(this, a2);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE3E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE3E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _BYTE v7[168];
  _BYTE v8[24];

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>((uint64_t)v7, a2);
    if (v8[16])
    {
      v4 = v7[160];
      v5 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v7, v4, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v7, v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v7, v3);
      IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>((uint64_t *)(a1 + 8));
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE410;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE410;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE460;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *result;
  void *v23;
  WTF::StringImpl **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  char v47;
  _QWORD v48[2];
  char v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_39:
    v50 = 0;
    v51 = 0;
    v34 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 16))(v34, &v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v24 = &v50;
    return (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v39 = *a2;
        v40 = a2[1];
        v41 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v41)
        {
          if (v40)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39);
        }
      }
    }
    goto LABEL_37;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v53 = 0;
  v54 = 0;
  if (v9 < 0x10000)
  {
    if (!v9)
    {
      v18 = 0;
      v19 = 0;
LABEL_24:
      v45 = v19;
      v53 = 0;
      v54 = 0;
      v49 = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v4);
      v48[0] = 0;
      v48[1] = 0;
      v46[0] = v18;
      v46[1] = v45;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v20);
      v47 = 1;
      v21 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 16))(v21, v46);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (!v47)
        return result;
      v24 = (WTF::StringImpl **)v46;
      return (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
    }
    LODWORD(v54) = v9;
    v53 = WTF::fastMalloc((WTF *)(16 * v9));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>((uint64_t)&v50, a2);
      if (!v52)
        goto LABEL_36;
      if (HIDWORD(v54) != (_DWORD)v54)
        break;
      v10 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, HIDWORD(v54) + 1, (unint64_t)&v50);
      v11 = HIDWORD(v54) + 1;
      v12 = v53 + 16 * HIDWORD(v54);
      v13 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v12 = v13;
      *(_BYTE *)(v12 + 8) = *(_BYTE *)(v10 + 8);
      HIDWORD(v54) = v11;
      if (v52)
        goto LABEL_16;
LABEL_20:
      if (!--v9)
        goto LABEL_21;
    }
    v14 = HIDWORD(v54) + 1;
    v15 = v53 + 16 * HIDWORD(v54);
    v16 = v50;
    v50 = 0;
    *(_QWORD *)v15 = v16;
    *(_BYTE *)(v15 + 8) = v51;
    HIDWORD(v54) = v14;
LABEL_16:
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v17 -= 2;
    }
    goto LABEL_20;
  }
  do
  {
    IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>((uint64_t)&v50, a2);
    if (!v52)
    {
LABEL_36:
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v4);
LABEL_37:
      v31 = *a2;
      v32 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v33 = a2[3];
      if (v33 && v32)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
        v35 = *a2;
        v36 = a2[1];
        v37 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v37)
        {
          if (v36)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      goto LABEL_39;
    }
    if (HIDWORD(v54) == (_DWORD)v54)
    {
      result = (WTF::StringImpl *)WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, HIDWORD(v54) + 1, (unint64_t)&v50);
      v25 = HIDWORD(v54) + 1;
      v26 = v53 + 16 * HIDWORD(v54);
      v27 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v26 = v27;
      *(_BYTE *)(v26 + 8) = *((_BYTE *)result + 8);
      HIDWORD(v54) = v25;
      if (!v52)
        goto LABEL_34;
    }
    else
    {
      v28 = HIDWORD(v54) + 1;
      v29 = v53 + 16 * HIDWORD(v54);
      v30 = v50;
      v50 = 0;
      *(_QWORD *)v29 = v30;
      *(_BYTE *)(v29 + 8) = v51;
      HIDWORD(v54) = v28;
    }
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_34:
    --v9;
  }
  while (v9);
  v42 = HIDWORD(v54);
  v18 = (WTF *)v53;
  if (v54 <= HIDWORD(v54))
  {
LABEL_22:
    v19 = v54;
    goto LABEL_24;
  }
  v43 = (WTF *)v53;
  if (!HIDWORD(v54))
  {
LABEL_56:
    if (v18)
    {
      if (v43 == v18)
      {
        v53 = 0;
        LODWORD(v54) = 0;
      }
      WTF::fastFree(v18, v4);
LABEL_21:
      v18 = (WTF *)v53;
    }
    else
    {
      v18 = v43;
    }
    goto LABEL_22;
  }
  if (!(HIDWORD(v54) >> 28))
  {
    v44 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v54)));
    LODWORD(v54) = v42;
    v53 = v44;
    v43 = v18;
    if ((WTF *)v44 != v18)
    {
      WTF::VectorMover<false,WebCore::ContentType>::move(v18, (WTF *)((char *)v18 + 16 * v42), v44);
      v43 = (WTF *)v53;
    }
    goto LABEL_56;
  }
  __break(0xC471u);
  return result;
}

_QWORD *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  WTF::StringImpl *v19;
  char v20;

  result = IPC::Decoder::decode<WTF::String>(a2, &v19);
  if (v20)
  {
    v5 = a2[1];
    v6 = (WTF::StringImpl *)*a2;
    v7 = a2[2] - *a2;
    if (v5 <= v7)
    {
      v10 = 0;
      v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v11 = *a2;
          v10 = a2[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
      }
    }
    else
    {
      v8 = (unsigned __int8 *)v6 + v7;
      a2[2] = (uint64_t)(v8 + 1);
      if (v6)
      {
        v9 = *v8;
        if (v9 < 2)
        {
          *(_QWORD *)a1 = v19;
          *(_BYTE *)(a1 + 8) = v9 != 0;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_10;
      }
      v10 = v5;
      v11 = 0;
    }
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = (WTF::StringImpl *)*a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v6);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v20)
    {
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_16;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_16:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  int v41;
  __int16 v42;
  char v43;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 48);
    do
    {
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      *v10 = 0;
      v10[1] = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v4 + 48 * v11;
      v14 = *(_QWORD *)(v13 + 16);
      if (v14 != -1)
      {
        if (v14)
          v15 = 0;
        else
          v15 = *(_OWORD *)v13 == 0;
        if (v15)
        {
          v18 = v4 + 48 * v11;
          v19 = *(_QWORD *)(v18 + 40);
          if (v19)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v19, v8);
          v20 = *(_QWORD *)(v18 + 32);
          if (v20)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v20, v8);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v41 = -1640531527;
          v42 = 0;
          v43 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v41, (_QWORD *)(v4 + 48 * v11));
          v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41);
          v22 = 0;
          do
          {
            v23 = v21 & v17;
            v24 = v16 + 48 * (v21 & v17);
            v21 = ++v22 + (v21 & v17);
          }
          while (*(_OWORD *)v24 != 0 || *(_QWORD *)(v24 + 16) != 0);
          v26 = v16 + 48 * v23;
          v29 = *(_QWORD *)(v26 + 40);
          v28 = (uint64_t *)(v26 + 40);
          v27 = v29;
          if (v29)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v27, v8);
          v30 = v28 - 1;
          v31 = *(v28 - 1);
          if (v31)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v31, v8);
          v32 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)v24 = *(_OWORD *)v13;
          *(_OWORD *)(v24 + 16) = v32;
          v33 = v4 + 48 * v11;
          *v30 = 0;
          v35 = *(_QWORD *)(v33 + 32);
          v34 = (uint64_t *)(v33 + 32);
          *v34 = 0;
          *v30 = v35;
          *v28 = 0;
          v36 = v34[1];
          v34[1] = 0;
          *v28 = v36;
          v37 = v34[1];
          if (v37)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v37, v8);
          if (*v34)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(*v34, v8);
          if (v13 == a3)
            v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unsigned int v34;
  __int16 v35;
  char v36;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 32 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 32 * v12;
      if (*(_QWORD *)(v14 + 8) != -1)
      {
        if (*(_OWORD *)v14 == 0)
        {
          v17 = v5 + 32 * v12;
          v18 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 24) = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          v19 = *(_QWORD *)(v17 + 16);
          *(_QWORD *)(v17 + 16) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v34 = -1640531527;
          v35 = 0;
          v36 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v34, (_QWORD *)(v5 + 32 * v12));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          v21 = 0;
          do
          {
            v22 = v20 & v16;
            v23 = v15 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(_QWORD *)(v23 + 24);
          *(_QWORD *)(v23 + 24) = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v25 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          *(_OWORD *)v23 = *(_OWORD *)v14;
          v26 = v5 + 32 * v12;
          v28 = *(_QWORD *)(v26 + 16);
          v27 = (uint64_t *)(v26 + 16);
          *v27 = 0;
          *(_QWORD *)(v23 + 16) = v28;
          v29 = v27[1];
          v27[1] = 0;
          *(_QWORD *)(v23 + 24) = v29;
          v30 = v27[1];
          v27[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v31 = *v27;
          *v27 = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (v14 == a3)
            v13 = v23;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = *(_OWORD **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (result)
    result = (_OWORD *)(*(uint64_t (**)(_OWORD *))(*(_QWORD *)result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *result;
  unsigned int v33;
  __int16 v34;
  char v35;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = v5 + 24 * v12;
      if (*(_QWORD *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          v18 = v5 + 24 * v12;
          v19 = *(_QWORD *)(v18 + 16);
          *(_QWORD *)(v18 + 16) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v33 = -1640531527;
          v34 = 0;
          v35 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v33, (_QWORD *)(v5 + 24 * v12));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v33);
          v21 = 0;
          do
          {
            v22 = v20 & v17;
            v23 = (_OWORD *)(v16 + 24 * (v20 & v17));
            v20 = ++v21 + (v20 & v17);
          }
          while (*v23 != 0);
          v24 = v16 + 24 * v22;
          v27 = *(_QWORD *)(v24 + 16);
          v26 = (_QWORD *)(v24 + 16);
          v25 = v27;
          *v26 = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          *v23 = *(_OWORD *)v15;
          v28 = v5 + 24 * v12;
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          *v26 = v29;
          v30 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (v15 == a3)
            v13 = v23;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>>::customDeleteBucket(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t result;

  *a1 = 1;
  a1[1] = 0;
  a1[2] = -1;
  v3 = a1[5];
  if (v3)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  result = a1[4];
  if (result)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(result, a2);
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(_QWORD *)a2);
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34EE4B0;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34EE4B0;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(_QWORD *a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _BOOL8 v26;

  if (a2)
  {
    if (*a2)
    {
      v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
      if (v3 >= 0x100u)
      {
        v6 = v3;
        v7 = a1[2];
        if (!v7)
          goto LABEL_38;
        if (!(_BYTE)v3)
          goto LABEL_38;
        v8 = *(_QWORD *)(v7 + 8);
        if (!v8)
          goto LABEL_38;
        v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(v8 + 16), a1 + 6);
        v10 = v9;
        v11 = *(_QWORD *)(a1[2] + 8);
        if (v11)
          v12 = v11 - 16;
        else
          v12 = 0;
        v13 = *(uint64_t **)(v12 + 32);
        if (v13)
          v13 += 6 * *((unsigned int *)v13 - 1);
        if (v13 == v9)
          goto LABEL_38;
        v14 = v9 + 4;
        v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v9 + 4, a1 + 3);
        v16 = v10[4];
        if (v16)
        {
          v17 = (uint64_t *)(v16 + 32 * *(unsigned int *)(v16 - 4));
          if (v17 == v15)
            goto LABEL_23;
        }
        else
        {
          if (!v15)
            goto LABEL_24;
          v17 = 0;
        }
        if (v17 != v15)
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v10 + 4, (uint64_t)v15);
          v16 = *v14;
        }
        if (v16)
        {
LABEL_23:
          if (*(_DWORD *)(v16 - 12))
            goto LABEL_38;
        }
LABEL_24:
        v18 = v10[5];
        if (v18 && *(_DWORD *)(v18 - 12))
          goto LABEL_38;
        v19 = a1[2];
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
            v21 = v20 - 16;
          else
            v21 = 0;
        }
        else
        {
          v21 = 0;
        }
        v24 = *(_QWORD *)(v21 + 32);
        v22 = (uint64_t *)(v21 + 32);
        v23 = v24;
        if (v24)
        {
          v25 = (uint64_t *)(v23 + 48 * *(unsigned int *)(v23 - 4));
          if (v25 == v10)
            goto LABEL_38;
LABEL_36:
          if (v25 != v10)
            WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v22, v10);
          goto LABEL_38;
        }
        if (v10)
        {
          v25 = 0;
          goto LABEL_36;
        }
LABEL_38:
        v26 = v6 != 0;
        v4 = a1[10];
        a1[10] = 0;
        (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 16))(v4, v26);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  v4 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>>::customDeleteBucket(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  *(_OWORD *)a1 = xmmword_1978CF7D0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE4D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE4D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>((uint64_t *)(a1 + 8));
  IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot,void>::decode(a2, (uint64_t)&v19);
  if (v23)
  {
    v5 = v19;
    v19 = 0;
    v17[0] = v5;
    v6 = v20;
    v20 = 0;
    v17[1] = v6;
    v7 = v21;
    v21 = 0;
    v17[2] = v7;
    v8 = v22;
    v22 = 0;
    v17[3] = v8;
    v18 = 1;
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v4);
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
    v10 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v11);
  }
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15)
  {
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
      v16 = (void *)*a2;
      v14 = a2[1];
      v15 = a2[3];
      goto LABEL_10;
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = 0;
LABEL_10:
  LOBYTE(v17[0]) = 0;
  v18 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v15)
  {
    if (v14)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v15 + 16))(v15, v16);
  }
  std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v16);
  return IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v1 + 16))(v1, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v3);
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
    v3 += 32 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return a1;
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)a3 = v4;
  if (*a1)
  {
    v5 = *a1 + 32 * *(unsigned int *)(*a1 - 4);
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
    v3 += 24 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

_DWORD *WTF::RefCounted<WebCore::HistoryItem>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEACB2C]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = (uint64_t *)(v5 + 24 * v12);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(v16, v15[1]);
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v25 = (uint64_t *)(v20 + 24 * (v22 & v21));
            v22 = ++v23 + (v22 & v21);
          }
          while (*v25);
          v26 = v20 + 24 * v24;
          v29 = *(_QWORD *)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          if (v29)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v9);
          v30 = v25[1];
          v25[1] = 0;
          if (v30)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v30, (WTF::StringImpl *)v9);
          v31 = *v25;
          *v25 = 0;
          if (v31)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v31, (WTF::StringImpl *)v9);
          v32 = *v15;
          *v15 = 0;
          *v25 = v32;
          v33 = v15[1];
          v15[1] = 0;
          v25[1] = v33;
          v34 = v5 + 24 * v12;
          *v28 = 0;
          v35 = *(_QWORD *)(v34 + 16);
          *(_QWORD *)(v34 + 16) = 0;
          *v28 = v35;
          v36 = *(_QWORD *)(v34 + 16);
          if (v36)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v9);
          v37 = v15[1];
          v15[1] = 0;
          if (v37)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v37, (WTF::StringImpl *)v9);
          v38 = *v15;
          *v15 = 0;
          if (v38)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v38, (WTF::StringImpl *)v9);
          if (v15 == a3)
            v13 = v25;
        }
        else
        {
          v17 = *(_QWORD *)(v5 + 24 * v12 + 16);
          if (v17)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v9);
          v18 = v15[1];
          v15[1] = 0;
          if (v18)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, (WTF::StringImpl *)v9);
          v19 = *v15;
          *v15 = 0;
          if (v19)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, (WTF::StringImpl *)v9);
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::computeHash<WebCore::PartitionedSecurityOrigin>(uint64_t a1, uint64_t a2)
{
  int v4;
  __int16 v5;
  char v6;

  v4 = -1640531527;
  v5 = 0;
  v6 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v4, a1 + 8);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v4, a2 + 8);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v4);
}

uint64_t WTF::PartitionedSecurityOriginHash::equal(WebCore::SecurityOrigin **a1, const WebCore::SecurityOrigin **a2)
{
  uint64_t result;

  result = WebCore::SecurityOrigin::isSameOriginAs(*a1, *a2);
  if ((_DWORD)result)
    return WebCore::SecurityOrigin::isSameOriginAs(a1[1], a2[1]);
  return result;
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  int i;
  unsigned int v8;
  _QWORD *v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(*a2, a2[1]);
  for (i = 0; ; v6 = ++i + v8)
  {
    v8 = v6 & v5;
    v9 = (_QWORD *)(v2 + 24 * (v6 & v5));
    if (*v9 == -1)
      continue;
    if (!*v9)
      break;
    if ((WTF::PartitionedSecurityOriginHash::equal((WebCore::SecurityOrigin **)(v2 + 24 * v8), (const WebCore::SecurityOrigin **)a2) & 1) != 0)return (uint64_t)v9;
  }
  if (!*a1)
    return 0;
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EE500;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34EE500;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebBroadcastChannelRegistry::postMessageLocally(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::DestructionThread>,WTF::DefaultRefDerefTraits<WTF::DestructionThread>> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EE528;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebBroadcastChannelRegistry::postMessageLocally(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::DestructionThread>,WTF::DefaultRefDerefTraits<WTF::DestructionThread>> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34EE528;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification(WTF::StringImpl *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a2 + 24), *a2 + 16);
  v6 = *(unsigned int **)(v5 + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)a1 = v6;
  *((_BYTE *)a1 + 8) = a3;
  if (a3)
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(a1, 1);
  return a1;
}

void WebKit::WebChromeClient::~WebChromeClient(WebKit::WebChromeClient *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v2)
    goto LABEL_2;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
  {
LABEL_2:
    WebCore::ChromeClient::~ChromeClient(this);
  }
  else
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
    WebCore::ChromeClient::~ChromeClient(this);
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebChromeClient::~WebChromeClient(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebChromeClient::setWindowRect(WebKit::WebChromeClient *this, const WebCore::FloatRect *a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::sendSetWindowFrame((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

float WebKit::WebChromeClient::windowRect(WebKit::WebChromeClient *this)
{
  return 0.0;
}

float WebKit::WebChromeClient::pageRect(WebKit::WebChromeClient *this)
{
  return 0.0;
}

void WebKit::WebChromeClient::focus(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2035;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = 1;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::unfocus(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2035;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = 0;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::elementDidFocus(uint64_t a1, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef *v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  WebKit::WebPage::elementDidFocus((WebKit::WebPage *)v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::elementDidRefocus(uint64_t a1, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef *v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  WebKit::WebPage::elementDidRefocus((WebKit::WebPage *)v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::elementDidBlur(WebKit::WebChromeClient *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::elementDidBlur(v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::focusedElementDidChangeInputMode(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  CFTypeRef *v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  WebKit::WebPage::focusedElementDidChangeInputMode((IPC::Encoder *)v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::focusedSelectElementDidChangeOptions(WebKit::WebChromeClient *this, const WebCore::HTMLSelectElement *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(const WebCore::HTMLSelectElement **)(v4 + 920) == a2)
    WebCore::DeferrableOneShotTimer::restart(v4 + 1584);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::makeFirstResponder(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1970;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::assistiveTechnologyMakeFirstResponder(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1835;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebChromeClient::canTakeFocus()
{
  return 1;
}

void WebKit::WebChromeClient::takeFocus(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2078;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::focusedElementChanged(uint64_t this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2
    && (*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = this;
    *((_DWORD *)a2 + 6) += 2;
    this = WebCore::HTMLInputElement::isText(a2);
    if ((_DWORD)this)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (unsigned int *)(v5 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
        }
      }
      else
      {
        v5 = 0;
      }
      WebKit::WebFrame::fromCoreFrame(v5, &v11);
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
      if (v8)
        v9 = v8 - 16;
      else
        v9 = 0;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      v10 = v11;
      (*(void (**)(_QWORD, uint64_t, WebCore::Element *, uint64_t))(**(_QWORD **)(v9 + 352) + 16))(*(_QWORD *)(v9 + 352), v9, a2, v11);
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 - 8));
      if (v10)
        CFRelease(*(CFTypeRef *)(v10 + 8));
      this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  return this;
}

void WebKit::WebChromeClient::focusedFrameChanged(WebKit::WebChromeClient *this, WebCore::Frame *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  IPC::Encoder *v19;

  if (a2)
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v18);
  else
    v18 = 0;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = v18;
  if (v18)
  {
    v16 = *(_OWORD *)(v18 + 80);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v16) = 0;
  }
  v17 = v6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 40);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1940;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v19 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v10, (uint64_t *)&v16);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v19, 0, 0);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

uint64_t WebKit::WebChromeClient::createWindow(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WebCore::WindowFeatures *a3, const WebCore::NavigationAction *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::FullscreenManager *v13;
  uint64_t *v14;
  IPC::Encoder *v15;
  _BYTE *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  const WebCore::ResourceRequest *v26;
  const WebCore::ResourceRequest *v27;
  _DWORD *v28;
  uint64_t v29;
  WebKit::WebFrame *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  IPC::Encoder *v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  char v55;
  WTF *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  int v59;
  char v60;
  WTF *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  void *v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  const char ***v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  const char ***v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl **v91;
  WTF::StringImpl **v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  void *v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF *v108;
  WTF *v109;
  uint64_t v110;
  WTF::StringImpl **v111;
  WTF::StringImpl **v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  uint64_t v121;
  WebKit::SandboxExtensionImpl *v122;
  const char **v123;
  WTF *v124;
  void *v125;
  uint64_t *v126;
  uint64_t v127;
  IPC::Decoder *v128;
  WTF *v129;
  void *v130;
  WTF *v131;
  void *v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  const char **v139;
  uint64_t v141;
  _BYTE v142[24];
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  int v146;
  char v147;
  WTF *v148;
  WTF::StringImpl *v149;
  int v150;
  char v151;
  __int128 v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  WTF::StringImpl *v163;
  char v164;
  WTF *v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _BYTE v172[19];
  WTF *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  char v184;
  char v185;
  WTF *v186;
  uint64_t v187;
  WTF *v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  int v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  char v195;
  WTF::StringImpl **v196;
  WTF *v197;
  uint64_t v198;
  _WORD v199[137];
  char v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  WTF *v204;
  uint64_t v205;
  char v206;
  unsigned __int8 v207[16];
  uint64_t v208;
  char v209;
  WTF::StringImpl *v210;
  WTF *v211;
  uint64_t v212;
  WTF::StringImpl **v213;
  __int16 v214;
  uint64_t v215[4];
  int v216;
  char v217;
  char v218;
  WTF::StringImpl *v219;
  _BYTE v220[21];
  _OWORD v221[14];
  _OWORD v222[2];
  WTF *v223;
  uint64_t v224;
  WTF *v225;
  uint64_t v226;
  WebKit::SandboxExtensionImpl *v227;
  char v228;
  unsigned __int8 v229;
  int v230;
  _DWORD *v231;
  WebKit::WebFrame *v232;
  __int128 v233;
  const char **v234;
  __int16 v235;
  WTF *v236;
  uint64_t v237;
  int v238;
  char v239;
  WTF *v240;
  WTF::StringImpl *v241;
  int v242;
  char v243;
  __int128 v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  uint64_t v247;
  char v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  WTF::StringImpl *v255;
  char v256;
  WTF *v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _BYTE v264[19];
  WTF *v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  char v276;
  char v277;
  WTF *v278;
  uint64_t v279;
  WTF *v280;
  uint64_t v281;
  WTF *v282;
  uint64_t v283;
  int v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  char v287;
  WTF::StringImpl **v288;
  WTF *v289;
  uint64_t v290;
  _WORD v291[137];
  char v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  WTF *v296;
  uint64_t v297;
  char v298;
  _QWORD v299[3];
  char v300;
  WTF::StringImpl *v301;
  WTF *v302;
  uint64_t v303;
  WTF::StringImpl **v304;
  __int16 v305;
  uint64_t v306;
  int v307;
  char v308;
  char v309;
  WTF::StringImpl *v310;
  _BYTE v311[21];
  _OWORD v312[14];
  _OWORD v313[2];
  WTF *v314;
  uint64_t v315;
  WTF *v316;
  uint64_t v317;
  WebKit::SandboxExtensionImpl *v318;
  char v319;
  unsigned __int8 v320;
  unint64_t *v321;
  int v322;
  IPC::Encoder *v323;
  uint64_t v324;
  __int128 v325;
  char v326;
  _BYTE v327[24];
  const char **v328[133];
  char v329;
  char v330;
  char v331;
  char v332;
  char v333;
  _BYTE v334[2];
  char v335;
  char v336;
  __n128 v337;
  __int128 v338;
  __int128 v339;
  char canHandleRequest;
  char v341;
  _DWORD *v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  char v347;
  char v348;
  __int16 v349;
  char v350;
  BOOL v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  char v356;
  char v357;
  char v358;
  char v359;
  __int16 v360;
  uint64_t v361;
  int v362;
  char v363;
  char v364;
  char v365[312];
  char v366;
  __int16 v367;
  char v368;
  char v369;
  char v370;
  char v371;
  _QWORD v372[38];
  char v373;
  _QWORD v374[38];
  CFTypeRef v375;
  CFTypeRef v376[29];

  v4 = MEMORY[0x1E0C80A78](this, a2, a3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v4;
  v376[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(v9 + 296);
  if (v12)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v13 = *(WebCore::FullscreenManager **)(v12 + 1992);
    if (!v13)
      v13 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager((WebCore::Document *)v12);
    WebCore::FullscreenManager::cancelFullscreen(v13);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  {
    v14 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess((WebKit::WebProcess *)v14);
  }
  WebKit::WebFrame::fromCoreFrame(v10, &v232);
  v334[0] = *(_BYTE *)(v6 + 868);
  v15 = (IPC::Encoder *)WebKit::modifiersForNavigationAction((_BYTE *)v6);
  v334[1] = (_BYTE)v15;
  v18 = *(_BYTE *)(v6 + 476);
  if (v18)
  {
    if (*(_BYTE *)(v6 + 474))
      v44 = *(_BYTE *)(v6 + 448) == 0;
    else
      v44 = 1;
    v45 = *(_BYTE *)(v6 + 472);
    if (v44)
      v45 = -2;
    v335 = v45;
    if (v44)
      v18 = 0;
    else
      v18 = *(_BYTE *)(v6 + 473);
  }
  else
  {
    v335 = -2;
  }
  v336 = v18;
  if (!*(_BYTE *)(v6 + 224))
    goto LABEL_217;
  v19 = *(_QWORD *)(v6 + 160);
  v20 = *(_QWORD *)(v6 + 168);
  v21 = *(_DWORD **)(v6 + 480);
  if (v21)
    ++*v21;
  v231 = v21;
  WebKit::WebProcess::userGestureTokenIdentifier((uint64_t)v14, v19, v20, (uint64_t *)&v231, &v337);
  v22 = *(_QWORD *)(v6 + 480);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v23 = *(_OWORD *)(v22 + 112);
    v338 = *(_OWORD *)(v22 + 96);
    v339 = v23;
  }
  else
  {
    LOBYTE(v338) = 0;
    LOBYTE(v339) = 0;
  }
  v141 = v11;
  v24 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
  v25 = v24 - 16;
  if (!v24)
    v25 = 0;
  CFRetain(*(CFTypeRef *)(v25 + 8));
  v26 = (const WebCore::ResourceRequest *)(v6 + 240);
  canHandleRequest = WebKit::WebPage::canHandleRequest((WebKit::WebPage *)(v6 + 240), v27);
  v341 = *(_BYTE *)(v6 + 871);
  v28 = *(_DWORD **)(v6 + 488);
  if (v28)
    *v28 += 2;
  if (*(_BYTE *)(v6 + 476))
    v29 = *(_QWORD *)(v6 + 464);
  else
    v29 = 0;
  v342 = v28;
  v343 = v29;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v344);
  v346 = 0;
  v347 = 0;
  v345 = v345 & 0xF1 | 4;
  v348 = *(_BYTE *)(v6 + 876);
  v349 = 0;
  v350 = 0;
  v351 = *(_BYTE *)(v6 + 880) == 1;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v362 = 0;
  v363 = 0;
  v364 = 0;
  v365[0] = 0;
  v366 = 0;
  v356 = 0;
  v355 = 0u;
  v354 = 0u;
  v353 = 0u;
  v352 = 0u;
  if (*(_BYTE *)(v6 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v365, (const WebCore::PrivateClickMeasurement *)(v6 + 544));
    v366 = 1;
  }
  v367 = 0;
  v368 = 0;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v30 = v232;
  WebKit::WebFrame::info(v232, (uint64_t)v372);
  v31 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v30 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v31 + 1368))(v31);
  v32 = *(_QWORD *)(v31[2] + 8);
  if (v32)
    v33 = v32 - 16;
  else
    v33 = 0;
  v372[37] = *(_QWORD *)(v33 + 2120);
  v373 = 1;
  WebKit::WebFrame::info(v30, (uint64_t)v374);
  v374[37] = 0;
  WebCore::ResourceRequest::ResourceRequest(&v375, v26);
  WebCore::ResourceRequest::ResourceRequest(v376, v26);
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 - 8));
  v11 = v141;
  if (v22)
  {
    WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v22);
    WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v22);
  }
  v231 = 0;
  if (v21)
    WTF::RefCounted<WebCore::UserGestureToken>::deref(v21);
  v34 = v14[4];
  v35 = *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8);
  if (v35)
    v36 = v35 - 16;
  else
    v36 = 0;
  v37 = *(_QWORD *)(v36 + 40);
  v324 = 0;
  IPC::Connection::createSyncMessageEncoder(3659, v37, &v324, (uint64_t *)&v323);
  v38 = v323;
  IPC::ArgumentCoder<WebCore::WindowFeatures,void>::encode(v323, (uint64_t)v8);
  IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v38, (uint64_t)v334);
  IPC::Connection::sendSyncMessage(v34, v324, (uint64_t *)&v323, 4, (uint64_t)&v321, INFINITY);
  if (v322)
  {
    if (v322 != 1)
      goto LABEL_224;
    v142[0] = (_BYTE)v321;
    v39 = 1;
    v230 = 1;
    goto LABEL_191;
  }
  LOBYTE(v233) = 0;
  v320 = 0;
  v8 = v321;
  v15 = (IPC::Encoder *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v321, &v325);
  if (!v326)
    goto LABEL_73;
  v17 = v8[1];
  v16 = (_BYTE *)*v8;
  v40 = v8[2] - *v8;
  if (v17 <= v40)
  {
    v46 = 0;
    v47 = 0;
    *v8 = 0;
    v8[1] = 0;
    v48 = v8[3];
    if (v48)
    {
      if (v17)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v48 + 16))(v48);
        v47 = *v8;
        v46 = v8[1];
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
      v11 = v141;
    }
    goto LABEL_69;
  }
  v41 = &v16[v40];
  v8[2] = (unint64_t)(v41 + 1);
  if (!v16)
  {
    v46 = v17;
    v47 = 0;
LABEL_69:
    v17 = 0;
    v16 = 0;
    *v8 = 0;
    v8[1] = 0;
    v49 = v8[3];
    if (v49)
    {
      if (v46)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v47, v46);
        v16 = (_BYTE *)*v8;
        v17 = v8[1];
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
      v11 = v141;
    }
LABEL_70:
    *v8 = 0;
    v8[1] = 0;
    v50 = v8[3];
    if (v50)
      goto LABEL_225;
    goto LABEL_71;
  }
  v42 = *v41;
  if (v42 >= 2)
    goto LABEL_70;
  if (v42)
  {
    IPC::Decoder::decode<WebKit::WebPageCreationParameters>(v8, (uint64_t)v142);
    if (!(_BYTE)v226)
      goto LABEL_71;
    v15 = (IPC::Encoder *)WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v327, (uint64_t *)v142);
    v330 = 1;
    v331 = 1;
    if ((_BYTE)v226)
    {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v142);
      if (!v331)
        goto LABEL_72;
    }
  }
  else
  {
    v327[0] = 0;
    v330 = 0;
    v331 = 1;
  }
LABEL_49:
  if (v326)
  {
    *(_OWORD *)v142 = v325;
    v142[16] = 0;
    v228 = 0;
    if (v330)
    {
      WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v142[16], (uint64_t *)v327);
      v228 = 1;
      v229 = 1;
      if (v331)
      {
        if (v330)
        {
          WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v327);
          if (!v229)
          {
LABEL_74:
            v16 = (_BYTE *)*v8;
            v17 = v8[1];
            *v8 = 0;
            v8[1] = 0;
            v15 = (IPC::Encoder *)v8[3];
            if (v15)
              goto LABEL_218;
LABEL_75:
            v43 = 0;
            goto LABEL_76;
          }
        }
      }
    }
    else
    {
      v229 = 1;
    }
    v43 = 1;
    goto LABEL_76;
  }
  while (1)
  {
LABEL_217:
    __break(1u);
LABEL_218:
    if (!v17)
      goto LABEL_75;
    (*(void (**)(IPC::Encoder *, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v16);
    v43 = v229;
LABEL_76:
    if (v320 == v43)
    {
      if (v320)
      {
        *(_QWORD *)&v233 = *(_QWORD *)v142;
        BYTE8(v233) = v142[8];
        v16 = &v142[16];
        if (v319 == v228)
        {
          if (v319)
          {
            v234 = *(const char ***)&v142[16];
            v235 = v143;
            v54 = v146;
            v146 = 0;
            v55 = v147;
            v147 = 0;
            v56 = v236;
            v236 = v144;
            v57 = (WTF::StringImpl *)v237;
            v58 = v145;
            v144 = 0;
            v145 = 0;
            v237 = v58;
            v238 = v54;
            v239 = v55;
            if (v56)
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v56, v57);
            v59 = v150;
            v150 = 0;
            v60 = v151;
            v151 = 0;
            v61 = v240;
            v240 = v148;
            v62 = (WTF::StringImpl *)v241;
            v63 = v149;
            v148 = 0;
            v149 = 0;
            v241 = v63;
            v242 = v59;
            v243 = v60;
            if (v61)
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v61, v62);
            v244 = v152;
            v64 = v154;
            v154 = 0;
            v65 = v246;
            v245 = v153;
            v246 = v64;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, v62);
              else
                *(_DWORD *)v65 -= 2;
            }
            v247 = v155;
            v248 = v156;
            WebCore::Color::operator=();
            v251 = v159;
            v252 = v160;
            v253 = v161;
            v254 = v162;
            v249 = v157;
            v250 = v158;
            v67 = v163;
            v163 = 0;
            v68 = v255;
            v255 = v67;
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v66);
              else
                *(_DWORD *)v68 -= 2;
            }
            v256 = v164;
            if (HIDWORD(v258))
              WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(v257, (WTF *)((char *)v257 + 312 * HIDWORD(v258)));
            v69 = v257;
            if (v257)
            {
              v257 = 0;
              LODWORD(v258) = 0;
              WTF::fastFree(v69, v66);
            }
            v257 = v165;
            v70 = v166;
            v165 = 0;
            v166 = 0;
            v258 = v70;
            v263 = v171;
            *(_OWORD *)v264 = *(_OWORD *)v172;
            *(_DWORD *)&v264[15] = *(_DWORD *)&v172[15];
            v259 = v167;
            v260 = v168;
            v261 = v169;
            v262 = v170;
            if (HIDWORD(v266))
              WTF::VectorDestructor<true,WTF::String>::destruct(v265, (WTF *)((char *)v265 + 8 * HIDWORD(v266)));
            v71 = v265;
            if (v265)
            {
              v265 = 0;
              LODWORD(v266) = 0;
              WTF::fastFree(v71, v66);
            }
            v265 = v173;
            v72 = v174;
            v173 = 0;
            v174 = 0;
            v266 = v72;
            v273 = v181;
            v274 = v182;
            v275 = v183;
            v276 = v184;
            v269 = v177;
            v270 = v178;
            v271 = v179;
            v272 = v180;
            v267 = v175;
            v268 = v176;
            WebCore::Color::operator=();
            v277 = v185;
            if (HIDWORD(v279))
              WTF::VectorDestructor<true,WTF::String>::destruct(v278, (WTF *)((char *)v278 + 8 * HIDWORD(v279)));
            v74 = v278;
            if (v278)
            {
              v278 = 0;
              LODWORD(v279) = 0;
              WTF::fastFree(v74, v73);
            }
            v75 = v186;
            v186 = 0;
            v278 = v75;
            v76 = v187;
            v187 = 0;
            v279 = v76;
            if (HIDWORD(v281))
            {
              v77 = (const char ***)v280;
              v78 = 8 * HIDWORD(v281);
              do
              {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v77);
                v77 = (const char ***)(v79 + 8);
                v78 -= 8;
              }
              while (v78);
            }
            v80 = v280;
            if (v280)
            {
              v280 = 0;
              LODWORD(v281) = 0;
              WTF::fastFree(v80, v73);
            }
            v81 = v188;
            v188 = 0;
            v280 = v81;
            v82 = v189;
            v189 = 0;
            v281 = v82;
            if (HIDWORD(v283))
            {
              v83 = (const char ***)v282;
              v84 = 8 * HIDWORD(v283);
              do
              {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v83);
                v83 = (const char ***)(v85 + 8);
                v84 -= 8;
              }
              while (v84);
            }
            v86 = v282;
            if (v282)
            {
              v282 = 0;
              LODWORD(v283) = 0;
              WTF::fastFree(v86, v73);
            }
            v87 = v190;
            v190 = 0;
            v282 = v87;
            v88 = v191;
            v191 = 0;
            v283 = v88;
            v284 = v192;
            v89 = v193;
            v193 = 0;
            v90 = v285;
            v285 = v89;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v73);
              else
                *(_DWORD *)v90 -= 2;
            }
            v286 = v194;
            v287 = v195;
            v91 = v196;
            v196 = 0;
            v92 = v288;
            v288 = v91;
            if (v92)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v92, (WTF::StringImpl *)v73);
            if (HIDWORD(v290))
              WTF::VectorDestructor<true,WTF::String>::destruct(v289, (WTF *)((char *)v289 + 8 * HIDWORD(v290)));
            v93 = v289;
            if (v289)
            {
              v289 = 0;
              LODWORD(v290) = 0;
              WTF::fastFree(v93, v73);
            }
            v94 = v197;
            v197 = 0;
            v289 = v94;
            v95 = v198;
            v198 = 0;
            v290 = v95;
            std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>((WebCore::ApplicationManifest *)v291, (uint64_t)v199);
            v291[136] = v199[136];
            v292 = v200;
            WebKit::UserContentControllerParameters::operator=((uint64_t)&v293, (uint64_t)&v201);
            if (v298 == v206)
            {
              if (v298)
              {
                v294 = v202;
                v295 = v203;
                if (HIDWORD(v297))
                {
                  v97 = v296;
                  v98 = 152 * HIDWORD(v297);
                  do
                  {
                    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v97, v96);
                    v97 = (WTF *)(v99 + 152);
                    v98 -= 152;
                  }
                  while (v98);
                }
                v100 = v296;
                if (v296)
                {
                  v296 = 0;
                  LODWORD(v297) = 0;
                  WTF::fastFree(v100, v96);
                }
                v101 = v204;
                v204 = 0;
                v296 = v101;
                v102 = v205;
                v205 = 0;
                v297 = v102;
              }
            }
            else if (v298)
            {
              WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v296, v96);
              v298 = 0;
            }
            else
            {
              v294 = v202;
              v295 = v203;
              v103 = v204;
              v204 = 0;
              v296 = v103;
              v104 = v205;
              v205 = 0;
              v297 = v104;
              v298 = 1;
            }
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)v299, v207);
            v299[2] = v208;
            v300 = v209;
            v106 = v210;
            v210 = 0;
            v107 = v301;
            v301 = v106;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v105);
              else
                *(_DWORD *)v107 -= 2;
            }
            if (HIDWORD(v303))
              WTF::VectorDestructor<true,WTF::String>::destruct(v302, (WTF *)((char *)v302 + 8 * HIDWORD(v303)));
            v108 = v302;
            if (v302)
            {
              v302 = 0;
              LODWORD(v303) = 0;
              WTF::fastFree(v108, v105);
            }
            v109 = v211;
            v211 = 0;
            v302 = v109;
            v110 = v212;
            v212 = 0;
            v303 = v110;
            v111 = v213;
            v213 = 0;
            v112 = v304;
            v304 = v111;
            if (v112)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v112, v105);
            v305 = v214;
            std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>>((uint64_t)&v306, v215);
            if (v308 == v217)
            {
              if (v308)
                v307 = v216;
            }
            else if (v308)
            {
              v308 = 0;
            }
            else
            {
              v307 = v216;
              v308 = 1;
            }
            v309 = v218;
            v114 = v219;
            v219 = 0;
            v115 = v310;
            v310 = v114;
            if (v115)
            {
              if (*(_DWORD *)v115 == 2)
                WTF::StringImpl::destroy(v115, v113);
              else
                *(_DWORD *)v115 -= 2;
            }
            v8 = (unint64_t *)v142;
            *(_QWORD *)&v311[13] = *(_QWORD *)&v220[13];
            *(_OWORD *)v311 = *(_OWORD *)v220;
            std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>((uint64_t)v312, (uint64_t)v221);
            v312[13] = v221[13];
            v313[0] = v222[0];
            *(_OWORD *)((char *)v313 + 9) = *(_OWORD *)((char *)v222 + 9);
            if (HIDWORD(v315))
              WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(v314, (WTF *)((char *)v314 + 24 * HIDWORD(v315)));
            v116 = v314;
            if (v314)
            {
              v314 = 0;
              LODWORD(v315) = 0;
              WTF::fastFree(v116, v16);
            }
            v117 = v223;
            v223 = 0;
            v314 = v117;
            v118 = v224;
            v224 = 0;
            v315 = v118;
            if (HIDWORD(v317))
              WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(v316, (WTF *)((char *)v316 + 24 * HIDWORD(v317)));
            v119 = v316;
            if (v316)
            {
              v316 = 0;
              LODWORD(v317) = 0;
              WTF::fastFree(v119, v16);
            }
            v120 = v225;
            v225 = 0;
            v316 = v120;
            v121 = v226;
            v226 = 0;
            v317 = v121;
            v122 = v227;
            v227 = 0;
            v123 = (const char **)v318;
            v318 = v122;
            if (v123)
            {
              WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v123);
              WTF::fastFree(v124, v125);
            }
          }
        }
        else if (v319)
        {
          WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v234);
          v319 = 0;
        }
        else
        {
          WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v234, (uint64_t *)&v142[16]);
          v319 = 1;
        }
      }
    }
    else if (v320)
    {
      if (v319)
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v234);
      v320 = 0;
    }
    else
    {
      v233 = *(_OWORD *)v142;
      LOBYTE(v234) = 0;
      v319 = 0;
      if (v228)
      {
        WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v234, (uint64_t *)&v142[16]);
        v319 = 1;
      }
      v320 = 1;
    }
    if (v229 && v228)
      WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v142[16]);
    if (v320)
    {
      if (v322)
      {
LABEL_224:
        v50 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_225:
        if (v17)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 16))(v50, v16);
LABEL_71:
        v327[0] = 0;
        v331 = 0;
LABEL_72:
        v51 = *v8;
        v52 = v8[1];
        *v8 = 0;
        v8[1] = 0;
        v53 = v8[3];
        if (!v53
          || !v52
          || (v15 = (IPC::Encoder *)(*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51), !v331))
        {
LABEL_73:
          v142[0] = 0;
          v229 = 0;
          goto LABEL_74;
        }
        goto LABEL_49;
      }
      v126 = (uint64_t *)v321;
      v321 = 0;
      *(_QWORD *)v327 = v126;
      *(_OWORD *)&v327[8] = v233;
      LOBYTE(v328[0]) = 0;
      v333 = 0;
      if (v319)
      {
        WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v328, (uint64_t *)&v234);
        v333 = 1;
        v127 = *(_QWORD *)v327;
        *(_QWORD *)v327 = 0;
        *(_QWORD *)v142 = v127;
        *(_OWORD *)&v142[8] = *(_OWORD *)&v327[8];
        LOBYTE(v143) = 0;
        v229 = 0;
        WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v143, (uint64_t *)v328);
        v229 = 1;
        v230 = 0;
        if (v333)
          WebKit::WebPageCreationParameters::~WebPageCreationParameters(v328);
      }
      else
      {
        *(_QWORD *)v327 = 0;
        *(_QWORD *)v142 = v126;
        *(_OWORD *)&v142[8] = v233;
        LOBYTE(v143) = 0;
        v229 = 0;
        v230 = 0;
      }
      v128 = *(IPC::Decoder **)v327;
      *(_QWORD *)v327 = 0;
      if (v128)
      {
        IPC::Decoder::~Decoder(v128);
        WTF::fastFree(v129, v130);
      }
      if (v320 && v319)
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v234);
    }
    else
    {
      v142[0] = 13;
      v230 = 1;
    }
    v39 = v322;
    if (v322 != -1)
LABEL_191:
      ((void (*)(_BYTE *, unint64_t **))off_1E34EEF40[v39])(v327, &v321);
    v15 = v323;
    v323 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v16);
      v15 = (IPC::Encoder *)WTF::fastFree(v131, v132);
    }
    v133 = v230;
    if (v230)
    {
      v134 = 0;
      goto LABEL_210;
    }
    *(_OWORD *)v327 = *(_OWORD *)&v142[8];
    v8 = (unint64_t *)&v327[16];
    v327[16] = 0;
    v332 = 0;
    v135 = v229;
    if (v229)
    {
      v15 = (IPC::Encoder *)WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v327[16], &v143);
      v136 = 1;
      v332 = 1;
    }
    else
    {
      v136 = 0;
    }
    if (!v327[8])
      break;
    v137 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
    if (v137)
      v138 = v137 - 16;
    else
      v138 = 0;
    if (v135)
    {
      v139 = *(const char ***)(v138 + 40);
      if (!v329)
        v329 = 1;
      v328[132] = v139;
      WebKit::WebProcess::createWebPage((uint64_t)v14, *(uint64_t *)v327, (uint64_t)&v327[16]);
      if (v327[8])
      {
        *(_QWORD *)&v233 = *(_QWORD *)v327;
        v134 = *(_QWORD *)(WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v14 + 14, &v233)+ 48);
        if (v332)
          goto LABEL_208;
        goto LABEL_209;
      }
    }
  }
  v134 = 0;
  if (!v136)
    goto LABEL_209;
LABEL_208:
  WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v327[16]);
LABEL_209:
  v133 = v230;
LABEL_210:
  if (v133 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34EEE50[v133])(v327, v142);
  WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v334);
  if (v232)
    CFRelease(*((CFTypeRef *)v232 + 1));
  return v134;
}

uint64_t WebKit::WebChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(WebKit::WebChromeClient *this)
{
  unsigned int v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int16 v9;
  void *v10;
  int v11;
  uint64_t *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  int v16;
  BOOL v17;
  uint64_t result;
  unsigned int v19;
  WebKit::WebProcess *v20;
  WebKit::WebChromeClient *v21;
  uint64_t *v22;
  unsigned __int8 v23;
  int v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  char v29;

  do
    v2 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v2 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 2120);
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3527, 0, &v28, (uint64_t *)&v27);
  *(_QWORD *)IPC::Encoder::grow(v27, 8uLL, 8) = v7;
  IPC::Connection::sendSyncMessage(v4, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  v8 = v26;
  if (!v26)
  {
    v9 = IPC::Decoder::decode<std::tuple<BOOL>>(v25);
    if (v9 < 0x100u)
    {
      LOBYTE(v22) = 13;
      v8 = 1;
      v24 = 1;
      v11 = v26;
      if (v26 == -1)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (!v26)
    {
      v12 = v25;
      v25 = 0;
      v22 = v12;
      v23 = v9;
      goto LABEL_15;
    }
LABEL_28:
    v21 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebChromeClient::show(v21);
  }
  if (v26 != 1)
    goto LABEL_28;
  LOBYTE(v22) = (_BYTE)v25;
LABEL_15:
  v24 = v8;
  v11 = v8;
LABEL_16:
  ((void (*)(char *, uint64_t **))off_1E34EEF40[v11])(&v29, &v25);
LABEL_17:
  v13 = v27;
  v27 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  v16 = v23;
  ((void (*)(uint64_t **, uint64_t **))off_1E34EEE70[v8])(&v25, &v22);
  if (v8)
    v17 = 1;
  else
    v17 = v16 == 0;
  result = !v17;
  do
    v19 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v19 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  return result;
}

void WebKit::WebChromeClient::show(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  WebKit::WebPage::show((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

BOOL WebKit::WebChromeClient::canRunModal(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 793);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 != 0;
}

void WebKit::WebChromeClient::runModal(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::runModal(v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

IPC::Encoder *WebKit::WebChromeClient::reportProcessCPUTime(WebKit::WebProcess *a1, unsigned int a2, double a3)
{
  WebKit::WebProcess *v4;
  _QWORD v6[2];
  double v7;

  v7 = a3;
  v4 = WebKit::WebProcess::singleton(a1);
  v6[0] = &v7;
  v6[1] = a2;
  return IPC::MessageSender::send<Messages::WebProcessPool::ReportWebContentCPUTime>((uint64_t)v4 + 16, (uint64_t)v6);
}

void WebKit::WebChromeClient::setToolbarsVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2049;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::toolbarsVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  void *v12;
  int v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  WebKit::WebChromeClient *v20;
  BOOL v21;
  uint64_t *v22;
  char v23;
  int v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  char v29;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 376) + 96))(*(_QWORD *)(v2 + 376), v2);
  if (v3)
  {
    v4 = v3 == 1;
    if (!v1)
      return v4;
LABEL_6:
    CFRelease(*(CFTypeRef *)(v1 - 8));
    return v4;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v8 = *(_QWORD *)(v2 + 40);
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3670, v8, &v28, (uint64_t *)&v27);
  IPC::Connection::sendSyncMessage(v7, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  v9 = v26;
  if (v26)
  {
    if (v26 == 1)
    {
      v10 = 0;
      LOBYTE(v22) = (_BYTE)v25;
LABEL_18:
      v24 = v9;
      v14 = v9;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = IPC::Decoder::decode<std::tuple<BOOL>>(v25);
    if (v11 < 0x100u)
    {
      v10 = 0;
      v13 = 0;
      LOBYTE(v22) = 13;
      v9 = 1;
      v24 = 1;
      v14 = v26;
      if (v26 == -1)
      {
LABEL_20:
        v16 = v27;
        v27 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v12);
          WTF::fastFree(v17, v18);
        }
        v4 = (v9 | v13) != 0;
        ((void (*)(uint64_t **, uint64_t **))off_1E34EEE80[v9])(&v25, &v22);
        if (!v1)
          return v4;
        goto LABEL_6;
      }
LABEL_19:
      ((void (*)(char *, uint64_t **))off_1E34EEF40[v14])(&v29, &v25);
      v13 = v10;
      goto LABEL_20;
    }
    if (!v26)
    {
      v10 = v11;
      v15 = v25;
      v25 = 0;
      v22 = v15;
      v23 = v11;
      goto LABEL_18;
    }
  }
  v20 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebChromeClient::setStatusbarVisible(v20, v21);
}

void WebKit::WebChromeClient::setStatusbarVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2046;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::statusbarVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  void *v12;
  int v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  uint64_t *v20;
  char v21;
  int v22;
  uint64_t *v23;
  int v24;
  IPC::Encoder *v25;
  uint64_t v26;
  char v27;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 376) + 80))(*(_QWORD *)(v2 + 376), v2);
  if (!v3)
  {
    {
      v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v6 = WebKit::WebProcess::WebProcess(v19);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    }
    v7 = *((_QWORD *)v6 + 4);
    v8 = *(_QWORD *)(v2 + 40);
    v26 = 0;
    IPC::Connection::createSyncMessageEncoder(3669, v8, &v26, (uint64_t *)&v25);
    IPC::Connection::sendSyncMessage(v7, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
    v9 = v24;
    if (v24)
    {
      if (v24 == 1)
      {
        v10 = 0;
        LOBYTE(v20) = (_BYTE)v23;
LABEL_18:
        v22 = v9;
        v14 = v9;
        goto LABEL_19;
      }
    }
    else
    {
      v11 = IPC::Decoder::decode<std::tuple<BOOL>>(v23);
      if (v11 < 0x100u)
      {
        v10 = 0;
        v13 = 0;
        LOBYTE(v20) = 13;
        v9 = 1;
        v22 = 1;
        v14 = v24;
        if (v24 == -1)
        {
LABEL_20:
          v16 = v25;
          v25 = 0;
          if (v16)
          {
            IPC::Encoder::~Encoder(v16, v12);
            WTF::fastFree(v17, v18);
          }
          v4 = (v9 | v13) != 0;
          ((void (*)(uint64_t **, uint64_t **))off_1E34EEE90[v9])(&v23, &v20);
          if (v1)
            goto LABEL_6;
          return v4;
        }
LABEL_19:
        ((void (*)(char *, uint64_t **))off_1E34EEF40[v14])(&v27, &v23);
        v13 = v10;
        goto LABEL_20;
      }
      if (!v24)
      {
        v10 = v11;
        v15 = v23;
        v23 = 0;
        v20 = v15;
        v21 = v11;
        goto LABEL_18;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1976144E4);
  }
  v4 = v3 == 1;
  if (v1)
LABEL_6:
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

uint64_t WebKit::WebChromeClient::scrollbarsVisible(WebKit::WebChromeClient *this)
{
  return 1;
}

void WebKit::WebChromeClient::setMenubarVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2040;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::menubarVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  void *v12;
  int v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  WebKit::WebChromeClient *v20;
  BOOL v21;
  uint64_t *v22;
  char v23;
  int v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  char v29;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 376) + 88))(*(_QWORD *)(v2 + 376), v2);
  if (v3)
  {
    v4 = v3 == 1;
    if (!v1)
      return v4;
LABEL_6:
    CFRelease(*(CFTypeRef *)(v1 - 8));
    return v4;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v8 = *(_QWORD *)(v2 + 40);
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3668, v8, &v28, (uint64_t *)&v27);
  IPC::Connection::sendSyncMessage(v7, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  v9 = v26;
  if (v26)
  {
    if (v26 == 1)
    {
      v10 = 0;
      LOBYTE(v22) = (_BYTE)v25;
LABEL_18:
      v24 = v9;
      v14 = v9;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = IPC::Decoder::decode<std::tuple<BOOL>>(v25);
    if (v11 < 0x100u)
    {
      v10 = 0;
      v13 = 0;
      LOBYTE(v22) = 13;
      v9 = 1;
      v24 = 1;
      v14 = v26;
      if (v26 == -1)
      {
LABEL_20:
        v16 = v27;
        v27 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v12);
          WTF::fastFree(v17, v18);
        }
        v4 = (v9 | v13) != 0;
        ((void (*)(uint64_t **, uint64_t **))off_1E34EEEA0[v9])(&v25, &v22);
        if (!v1)
          return v4;
        goto LABEL_6;
      }
LABEL_19:
      ((void (*)(char *, uint64_t **))off_1E34EEF40[v14])(&v29, &v25);
      v13 = v10;
      goto LABEL_20;
    }
    if (!v26)
    {
      v10 = v11;
      v15 = v25;
      v25 = 0;
      v22 = v15;
      v23 = v11;
      goto LABEL_18;
    }
  }
  v20 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebChromeClient::setResizable(v20, v21);
}

void WebKit::WebChromeClient::setResizable(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2039;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::runBeforeUnloadConfirmPanel(WebKit::WebChromeClient *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  uint64_t *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  int v22;
  void *v23;
  BOOL v24;
  WebKit::WebChromeClient *v26;
  __int128 v27;
  _QWORD v28[3];
  uint64_t *v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  _BYTE v33[16];
  WebKit::WebFrame *v34;
  uint64_t *v35;
  int v36;
  IPC::Encoder *v37;
  uint64_t v38;
  char v39;
  _BYTE v40[8];
  uint64_t v41;
  CFTypeRef cf;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::fromCoreFrame((uint64_t)a3, &v34);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v32 = v6;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v33, &v32, 1);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  v27 = *((_OWORD *)v34 + 5);
  WebKit::WebFrame::info(v34, (uint64_t)v40);
  v28[0] = &v27;
  v28[1] = v40;
  v28[2] = a2;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v6);
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  if (v10)
  {
    v12 = v10;
    v38 = 0;
    IPC::Connection::createSyncMessageEncoder(3681, v9, &v38, (uint64_t *)&v37);
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v37, (uint64_t)v28);
    IPC::Connection::sendSyncMessage(v12, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
    v13 = v36;
    if (v36)
    {
      if (v36 == 1)
      {
        LOBYTE(v29) = (_BYTE)v35;
LABEL_16:
        v31 = v13;
        v15 = v13;
        goto LABEL_17;
      }
    }
    else
    {
      v14 = IPC::Decoder::decode<std::tuple<BOOL>>(v35);
      if (v14 < 0x100u)
      {
        LOBYTE(v29) = 13;
        v13 = 1;
        v31 = 1;
        v15 = v36;
        if (v36 == -1)
        {
LABEL_18:
          v17 = v37;
          v37 = 0;
          if (v17)
          {
            IPC::Encoder::~Encoder(v17, v11);
            WTF::fastFree(v18, v19);
          }
          goto LABEL_20;
        }
LABEL_17:
        ((void (*)(char *, uint64_t **))off_1E34EEF40[v15])(&v39, &v35);
        goto LABEL_18;
      }
      if (!v36)
      {
        v16 = v35;
        v35 = 0;
        v29 = v16;
        v30 = v14;
        goto LABEL_16;
      }
    }
    v26 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebChromeClient::closeWindow(v26);
  }
  LOBYTE(v29) = 3;
  v13 = 1;
  v31 = 1;
LABEL_20:
  v20 = v45;
  v45 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v44 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E34EEE60[v44])(&v35, &v43);
  v44 = -1;
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v41);
  v22 = v30;
  ((void (*)(_BYTE *, uint64_t **))off_1E34EEEB0[v13])(v40, &v29);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v33, v23);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  if (v34)
    CFRelease(*((CFTypeRef *)v34 + 1));
  if (v13)
    v24 = 1;
  else
    v24 = v22 == 0;
  return !v24;
}

void WebKit::WebChromeClient::closeWindow(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::Page *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(WebCore::Page **)(v2 + 48);
  v11 = 0;
  WebCore::Page::setGroupName(v3, (const WTF::String *)&v11);
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(v2 + 88);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (!*(_BYTE *)(v8 + 144))
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v8 + 280));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
      }
    }
  }
  WebKit::WebPage::sendClose((WebKit::WebPage *)v2);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebChromeClient::rootFrameRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  result = *(_QWORD *)(v3 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 256))(result, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  return result;
}

void WebKit::WebChromeClient::runJavaScriptAlert(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  void *v23;
  unsigned int v24;
  WebKit *v25;
  WebCore::LocalFrame *v26;
  __int128 v27;
  _QWORD v28[3];
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE v32[16];
  WebKit::WebFrame *v33;
  uint64_t v34;
  unsigned int v35;
  IPC::Encoder *v36;
  uint64_t v37;
  char v38;
  _BYTE v39[8];
  uint64_t v40;
  CFTypeRef cf;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!WebKit::shouldSuppressJavaScriptDialogs(a2, a2))
  {
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v33);
    v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(_QWORD, uint64_t, const WTF::String *, WebKit::WebFrame *))(**(_QWORD **)(v7 + 376) + 40))(*(_QWORD *)(v7 + 376), v7, a3, v33);
    WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v7);
    do
      v8 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
    while (__stlxr(v8 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v31 = v7;
    WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v32, &v31, 1);
    v31 = 0;
    if (v6)
      CFRelease(*(CFTypeRef *)(v6 - 8));
    v27 = *((_OWORD *)v33 + 5);
    WebKit::WebFrame::info(v33, (uint64_t)v39);
    v28[0] = &v27;
    v28[1] = v39;
    v28[2] = a3;
    WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v7);
    v10 = *(_QWORD *)(v7 + 32);
    v9 = v7 + 32;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    if (v12)
    {
      v13 = v12;
      v37 = 0;
      IPC::Connection::createSyncMessageEncoder(3682, v11, &v37, (uint64_t *)&v36);
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v36, (uint64_t)v28);
      IPC::Connection::sendSyncMessage(v13, v37, (uint64_t *)&v36, 4, (uint64_t)&v34, INFINITY);
      v14 = v35;
      if (v35)
      {
        if (v35 != 1)
        {
          v25 = (WebKit *)std::__throw_bad_variant_access[abi:sn180100]();
          WebKit::shouldSuppressJavaScriptDialogs(v25, v26);
          return;
        }
        LOBYTE(v29) = v34;
      }
      else
      {
        v15 = v34;
        v34 = 0;
        v29 = v15;
      }
      v30 = v35;
      ((void (*)(char *, uint64_t *))off_1E34EEF40[v35])(&v38, &v34);
      v17 = v36;
      v36 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v16);
        WTF::fastFree(v18, v19);
      }
    }
    else
    {
      LOBYTE(v29) = 3;
      v14 = 1;
      v30 = 1;
    }
    ((void (*)(uint64_t *, uint64_t *))off_1E34EEEC0[v14])(&v34, &v29);
    v30 = -1;
    v21 = v44;
    v44 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v43 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34EEE60[v43])(&v34, &v42);
    v43 = -1;
    v22 = cf;
    cf = 0;
    if (v22)
      CFRelease(v22);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v40);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v32, v23);
    do
      v24 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
    while (__stlxr(v24 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
    if (v6)
      CFRelease(*(CFTypeRef *)(v6 - 8));
    if (v33)
      CFRelease(*((CFTypeRef *)v33 + 1));
  }
}

BOOL WebKit::shouldSuppressJavaScriptDialogs(WebKit *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 20);
  return v2
      && *(_QWORD *)(v2 + 8)
      && WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*((_QWORD *)this + 35) + 64))
      && *(_QWORD *)(*((_QWORD *)this + 35) + 96);
}

uint64_t WebKit::WebChromeClient::runJavaScriptConfirm(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned __int16 v17;
  int v18;
  uint64_t *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  BOOL v25;
  void *v26;
  unsigned int v27;
  WebKit::WebChromeClient *v29;
  WebCore::LocalFrame *v30;
  const WTF::String *v31;
  const WTF::String *v32;
  WTF::String *v33;
  __int128 v34;
  _QWORD v35[3];
  uint64_t *v36;
  char v37;
  int v38;
  uint64_t v39;
  _BYTE v40[16];
  WebKit::WebFrame *v41;
  uint64_t *v42;
  int v43;
  IPC::Encoder *v44;
  uint64_t v45;
  char v46;
  _BYTE v47[8];
  uint64_t v48;
  CFTypeRef cf;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (WebKit::shouldSuppressJavaScriptDialogs(a2, a2))
    return 0;
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v41);
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  (*(void (**)(_QWORD, uint64_t, const WTF::String *, WebKit::WebFrame *))(**(_QWORD **)(v8 + 376) + 48))(*(_QWORD *)(v8 + 376), v8, a3, v41);
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v8);
  do
    v9 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v9 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v39 = v8;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v40, &v39, 1);
  v39 = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  v34 = *((_OWORD *)v41 + 5);
  WebKit::WebFrame::info(v41, (uint64_t)v47);
  v35[0] = &v34;
  v35[1] = v47;
  v35[2] = a3;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v8);
  v11 = *(_QWORD *)(v8 + 32);
  v10 = v8 + 32;
  v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  if (!v13)
  {
    LOBYTE(v36) = 3;
    v16 = 1;
    v38 = 1;
LABEL_24:
    v23 = v52;
    v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v14);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v51 != -1)
      ((void (*)(uint64_t **, uint64_t *))off_1E34EEE60[v51])(&v42, &v50);
    v51 = -1;
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v48);
    if (v16)
      v25 = 1;
    else
      v25 = v37 == 0;
    v6 = !v25;
    ((void (*)(_BYTE *, uint64_t **))off_1E34EEED0[v16])(v47, &v36);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v40, v26);
    do
      v27 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
    while (__stlxr(v27 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 - 8));
    if (v41)
      CFRelease(*((CFTypeRef *)v41 + 1));
    return v6;
  }
  v15 = v13;
  v45 = 0;
  IPC::Connection::createSyncMessageEncoder(3683, v12, &v45, (uint64_t *)&v44);
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v44, (uint64_t)v35);
  IPC::Connection::sendSyncMessage(v15, v45, (uint64_t *)&v44, 4, (uint64_t)&v42, INFINITY);
  v16 = v43;
  if (v43)
  {
    if (v43 == 1)
    {
      LOBYTE(v36) = (_BYTE)v42;
LABEL_20:
      v38 = v16;
      v18 = v16;
      goto LABEL_21;
    }
  }
  else
  {
    v17 = IPC::Decoder::decode<std::tuple<BOOL>>(v42);
    if (v17 < 0x100u)
    {
      LOBYTE(v36) = 13;
      v16 = 1;
      v38 = 1;
      v18 = v43;
      if (v43 == -1)
      {
LABEL_22:
        v20 = v44;
        v44 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v14);
          WTF::fastFree(v21, v22);
        }
        goto LABEL_24;
      }
LABEL_21:
      ((void (*)(char *, uint64_t **))off_1E34EEF40[v18])(&v46, &v42);
      goto LABEL_22;
    }
    if (!v43)
    {
      v19 = v42;
      v42 = 0;
      v36 = v19;
      v37 = v17;
      goto LABEL_20;
    }
  }
  v29 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebChromeClient::runJavaScriptPrompt(v29, v30, v31, v32, v33);
}

uint64_t WebKit::WebChromeClient::runJavaScriptPrompt(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  int v21;
  int v22;
  uint64_t *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  void *v33;
  unsigned int v34;
  WebKit::WebChromeClient *v36;
  const WTF::String *v37;
  uint64_t v38[3];
  uint64_t *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  _BYTE v43[16];
  WebKit::WebFrame *v44;
  WTF::StringImpl *v45;
  char v46;
  uint64_t *v47;
  int v48;
  IPC::Encoder *v49;
  uint64_t v50;
  char v51[8];
  uint64_t v52;
  CFTypeRef cf;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (WebKit::shouldSuppressJavaScriptDialogs(a2, a2))
    return 0;
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v44);
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v11)
    v12 = v11 - 16;
  else
    v12 = 0;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  (*(void (**)(_QWORD, uint64_t, const WTF::String *, const WTF::String *, WebKit::WebFrame *))(**(_QWORD **)(v12 + 376) + 56))(*(_QWORD *)(v12 + 376), v12, a3, a4, v44);
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v12);
  do
    v13 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v13 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  CFRetain(*(CFTypeRef *)(v12 + 8));
  v42 = v12;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v43, &v42, 1);
  v42 = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 - 8));
  *(_OWORD *)v38 = *((_OWORD *)v44 + 5);
  WebKit::WebFrame::info(v44, (uint64_t)v51);
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v12);
  v15 = *(_QWORD *)(v12 + 32);
  v14 = v12 + 32;
  v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  if (!v17)
  {
    LOBYTE(v39) = 3;
    v21 = 1;
    v41 = 1;
LABEL_22:
    v27 = v56;
    v56 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v18);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v55 != -1)
      ((void (*)(uint64_t **, uint64_t *))off_1E34EEE60[v55])(&v47, &v54);
    v55 = -1;
    v28 = cf;
    cf = 0;
    if (v28)
      CFRelease(v28);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v52);
    if (v21)
    {
      v10 = 0;
      v30 = 1;
    }
    else
    {
      v31 = v40;
      v40 = 0;
      v32 = *a5;
      *a5 = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v29);
        else
          *(_DWORD *)v32 -= 2;
      }
      v30 = 0;
      v10 = *a5 != 0;
    }
    ((void (*)(char *, uint64_t **))off_1E34EEEE0[v30])(v51, &v39);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v43, v33);
    do
      v34 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
    while (__stlxr(v34 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 - 8));
    if (v44)
      CFRelease(*((CFTypeRef *)v44 + 1));
    return v10;
  }
  v19 = v17;
  v50 = 0;
  IPC::Connection::createSyncMessageEncoder(3684, v16, &v50, (uint64_t *)&v49);
  v20 = v49;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v49, v38);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v20, v51);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v20, (uint64_t *)a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v20, (uint64_t *)a4);
  IPC::Connection::sendSyncMessage(v19, v50, (uint64_t *)&v49, 4, (uint64_t)&v47, INFINITY);
  if (v48)
  {
    if (v48 == 1)
    {
      LOBYTE(v39) = (_BYTE)v47;
      v21 = 1;
      v41 = 1;
      v22 = 1;
LABEL_19:
      ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34EEF40[v22])(&v45, &v47);
LABEL_20:
      v24 = v49;
      v49 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v18);
        WTF::fastFree(v25, v26);
      }
      goto LABEL_22;
    }
  }
  else
  {
    LOBYTE(v45) = 0;
    v46 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v47, &v45);
    if (!v46)
    {
      LOBYTE(v39) = 13;
      v21 = 1;
      v41 = 1;
      v22 = v48;
      if (v48 == -1)
        goto LABEL_20;
      goto LABEL_19;
    }
    v22 = v48;
    if (!v48)
    {
      v21 = 0;
      v23 = v47;
      v47 = 0;
      v39 = v23;
      v40 = v45;
      v41 = 0;
      goto LABEL_19;
    }
  }
  v36 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebChromeClient::setStatusbarText(v36, v37);
}

void WebKit::WebChromeClient::setStatusbarText(WebKit::WebChromeClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, uint64_t, const WTF::String *))(**(_QWORD **)(v4 + 376) + 32))(*(_QWORD *)(v4 + 376), v4, a2);
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2047;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::keyboardUIMode(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  v3 = WebKit::WebPage::keyboardUIMode((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

uint64_t WebKit::WebChromeClient::hoverSupportedByPrimaryPointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v2 = v1 - 16;
  if (!v1)
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return 0;
}

uint64_t WebKit::WebChromeClient::hoverSupportedByAnyAvailablePointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  v3 = WebKit::WebPage::hoverSupportedByAnyAvailablePointingDevice((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

uint64_t WebKit::WebChromeClient::pointerCharacteristicsOfPrimaryPointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v2 = v1 - 16;
  if (!v1)
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return 257;
}

uint64_t WebKit::WebChromeClient::pointerCharacteristicsOfAllAvailablePointingDevices(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  v3 = WebKit::WebPage::pointerCharacteristicsOfAllAvailablePointingDevices((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

void WebKit::WebChromeClient::invalidateContentsForSlowScroll(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v6 + 296);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) = v11 + 2;
    if (*(_BYTE *)(v10 + 3382))
    {
      if (v11)
      {
        *(_DWORD *)(v10 + 24) = v11;
      }
      else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)(v10 + 24) = v11;
    }
    else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
  }
  WebKit::WebPage::pageDidScroll((WebKit::WebPage *)v4, v5);
  (*(void (**)(_QWORD, const WebCore::IntRect *))(**(_QWORD **)(v4 + 72) + 48))(*(_QWORD *)(v4 + 72), a2);
LABEL_18:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
LABEL_19:
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

char *WebKit::WebChromeClient::screenToRootView(WebKit::WebChromeClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  char *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = WebKit::WebPage::screenToRootView((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v5;
}

char *WebKit::WebChromeClient::rootViewToScreen(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  char *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = WebKit::WebPage::rootViewToScreen((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v5;
}

char *WebKit::WebChromeClient::accessibilityScreenToRootView(WebKit::WebChromeClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  char *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = WebKit::WebPage::accessibilityScreenToRootView((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v5;
}

char *WebKit::WebChromeClient::rootViewToAccessibilityScreen(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  char *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = WebKit::WebPage::rootViewToAccessibilityScreen((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v5;
}

uint64_t WebKit::WebChromeClient::platformPageClient(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::intrinsicContentsSizeChanged(WebKit::WebChromeClient *this, const IntSize *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(_DWORD *)(v4 + 880) || *(_QWORD *)(v4 + 888))
  {
    v5 = (uint64_t)*a2;
    if (!*(_BYTE *)(v4 + 2136))
      *(_BYTE *)(v4 + 2136) = 1;
    *(_QWORD *)(v4 + 2128) = v5;
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::scrollMainFrameToRevealRect(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IntPoint v13;
  int v14;
  int v15[4];
  IPC::Encoder *v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v15, a2);
  v13.m_x = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  v13.m_y = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v14, &v13);
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2014;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v8, v15);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, &v14);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v16, 0);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::shouldUnavailablePluginMessageBeButton(uint64_t a1, unsigned int a2)
{
  return (a2 < 6) & (9u >> a2);
}

void WebKit::WebChromeClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebHitTestResultData **a2, unsigned int a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  CFTypeRef *v18;
  CFTypeRef *v19;
  WebKit::WebProcess *v20;
  CFTypeRef *v21;
  CFTypeRef *v22;
  void *v23;
  IPC::Encoder *v24;
  _BYTE v25[68];
  _DWORD v26[151];

  *(_QWORD *)&v26[149] = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v6 = a3 & 0x12 | (a3 >> 3) & 1 | (4 * (a3 & 1)) & 0xF7 | (8 * ((a3 >> 2) & 1));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  (*(void (**)(_QWORD, uint64_t, WebKit::WebHitTestResultData **, uint64_t, void **))(**(_QWORD **)(v8 + 376)
                                                                                             + 64))(*(_QWORD *)(v8 + 376), v8, a2, v6, &v23);
  WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v25, a2, a4);
  *(_QWORD *)v26 = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)v26);
  *(_QWORD *)&v26[2] = v9;
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v20);
  }
  v10 = v8 + 32;
  v24 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(v23, (uint64_t)&v24, (WebKit **)&v21);
  v11 = v21;
  if (v21)
    CFRetain(v21[1]);
  v22 = v11;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1984;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v24 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode((IPC::Encoder *)v13, (uint64_t)v25);
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v13, (uint64_t *)&v22);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v24, 0);
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v16, v17);
  }
  if (v22)
    CFRelease(v22[1]);
  v18 = v21;
  v21 = 0;
  if (v18)
    CFRelease(v18[1]);
  WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v25);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  v19 = (CFTypeRef *)v23;
  v23 = 0;
  if (v19)
    CFRelease(v19[1]);
}

void WebKit::WebChromeClient::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::LocalFrame *v6;
  WebKit::PluginView *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE v33[16];
  WTF::StringImpl *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  IPC::Encoder *v40;
  uint64_t v41;
  char v42;

  WebKit::WebFrame::fromCoreFrame(a2, &v37);
  v36 = 0;
  v7 = (WebKit::PluginView *)WebKit::WebPage::pluginViewForFrame(a2, v6);
  if (v7)
  {
    LODWORD(v36) = WebKit::PluginView::pdfDocumentSizeForPrinting(v7);
    HIDWORD(v36) = v8;
  }
  WTF::String::left((WTF::StringImpl **)a3, 0x3E8u, &v34);
  v35 = *(_BYTE *)(a3 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  CFRetain(*(CFTypeRef *)(v10 + 8));
  v32 = v10;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v33, &v32, 1);
  v32 = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
  do
    v11 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v11 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  *(_OWORD *)v29 = *(_OWORD *)(v37 + 80);
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v10);
  v13 = *(_QWORD *)(v10 + 32);
  v12 = v10 + 32;
  v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  if (v15)
  {
    v16 = v15;
    v41 = 0;
    IPC::Connection::createSyncMessageEncoder(3676, v14, &v41, (uint64_t *)&v40);
    v17 = v40;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v40, v29);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v17, (uint64_t *)&v34);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v17, (int *)&v36);
    IPC::Connection::sendSyncMessage(v16, v41, (uint64_t *)&v40, 0, (uint64_t)&v38, INFINITY);
    v18 = v39;
    if (v39)
    {
      if (v39 != 1)
      {
        v28 = std::__throw_bad_variant_access[abi:sn180100]();
        WebKit::WebChromeClient::createColorChooser(v28);
        return;
      }
      LOBYTE(v30) = v38;
    }
    else
    {
      v19 = v38;
      v38 = 0;
      v30 = v19;
    }
    v31 = v39;
    ((void (*)(char *, uint64_t *))off_1E34EEF40[v39])(&v42, &v38);
    v21 = v40;
    v40 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
  }
  else
  {
    LOBYTE(v30) = 3;
    v18 = 1;
    v31 = 1;
  }
  ((void (*)(uint64_t *, uint64_t *))off_1E34EEEF0[v18])(&v38, &v30);
  v31 = -1;
  do
    v25 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
  while (__stlxr(v25 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v33, v24);
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (v37)
    CFRelease(*(CFTypeRef *)(v37 + 8));
}

void WebKit::WebChromeClient::createColorChooser(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebKit::WebColorChooser **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::WebColorChooser *v9;
  WebKit::WebPage *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v8 = v7 - 16;
  if (!v7)
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = (WebKit::WebColorChooser *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = off_1E34EED40;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = a2;
  if (v7
    && (WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v7), (v17 = *(_QWORD *)(v7 + 8)) != 0))
  {
    do
      v18 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v18 + 1, (unsigned int *)v17));
    *((_QWORD *)v9 + 3) = v17;
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
      v10 = (WebKit::WebPage *)(v19 - 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
    *((_QWORD *)v9 + 3) = 0;
  }
  WebKit::WebPage::setActiveColorChooser(v10, v9);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *((_QWORD *)v11 + 4);
  v22[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v22[1] = v13;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(v21, a2);
  v23[0] = a3;
  v23[1] = v22;
  v23[2] = v21;
  v14 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 8);
  if (v14)
    v15 = v14 - 16;
  else
    v15 = 0;
  IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(v12, (uint64_t)v23, *(_QWORD *)(v15 + 40));
  WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v16);
  *a4 = v9;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::createDataListSuggestionPicker(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34EEDA8;
  v7[1] = 0;
  v7[2] = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 24), v6 + 16);
  v8 = *(unsigned int **)(v6 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v7[3] = v8;
  *a3 = v7;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::WebChromeClient::canShowDataListSuggestionLabels(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::createDateTimeChooser(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34EEDE0;
  v7[1] = 0;
  v7[2] = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 24), v6 + 16);
  v8 = *(unsigned int **)(v6 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v7[3] = v8;
  *a3 = v7;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::runOpenPanel(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebKit::WebOpenPanelResultListener *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  __int128 v19;
  WebKit::WebFrame *v20;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (!*(_QWORD *)(v6 + 608))
  {
    ++*(_DWORD *)a3;
    *(_QWORD *)&v19 = a3;
    WebKit::WebOpenPanelResultListener::create(v6, (uint64_t *)&v19, &v22);
    v8 = *(WebKit::WebOpenPanelResultListener **)(v6 + 608);
    *(_QWORD *)(v6 + 608) = v22;
    if (v8)
      WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v8, v7);
    if ((_QWORD)v19)
      WTF::RefCounted<WebCore::FileChooser>::deref((WebCore::FileChooser *)v19);
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v20);
    v19 = *((_OWORD *)v20 + 5);
    WebKit::WebFrame::info(v20, (uint64_t)&v22);
    v10 = *(_QWORD *)(v6 + 32);
    v9 = v6 + 32;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2021;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v21 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, (uint64_t *)&v19);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v12, (char *)&v22);
    IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::encode((IPC::Encoder *)v12, (char *)a3 + 16);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v21, 0);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v15, v16);
    }
    v17 = v27;
    v27 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v26 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EEE60[v26])(&v21, &v25);
    v26 = -1;
    v18 = cf;
    cf = 0;
    if (v18)
      CFRelease(v18);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
    if (v20)
      CFRelease(*((CFTypeRef *)v20 + 1));
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::showShareSheet(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v10 = a2;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(v7, &v10, a3, v9, 0);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v10 = a2;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v7, &v10, a3, v9, 0);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

WebCore::Icon *WebKit::WebChromeClient::loadIconForFiles(uint64_t a1, uint64_t a2)
{
  WebCore::Icon *result;
  WebCore::Icon *v3;

  WebKit::WebChromeClient::createIconForFiles(a1, a2);
  WebCore::FileIconLoader::iconLoaded();
  result = v3;
  if (v3)
    return WTF::RefCounted<WebCore::Icon>::deref(v3);
  return result;
}

void WebKit::WebChromeClient::setCursor(WebKit::WebChromeClient *this, const WebCore::Cursor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2032;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::Cursor,void>::encode((IPC::Encoder *)v8, (uint64_t)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::setCursorHiddenUntilMouseMoves(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2033;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::didAssociateFormControls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WebKit::WebFrame::fromCoreFrame(a3, &v8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 352) + 80))(*(_QWORD *)(v6 + 352), v6, a2, v8);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t WebKit::WebChromeClient::shouldNotifyOnFormChanges(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 352) + 88))(*(_QWORD *)(v2 + 352), v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

uint64_t WebKit::WebChromeClient::selectItemWritingDirectionIsNatural(WebKit::WebChromeClient *this)
{
  return 0;
}

uint64_t WebKit::WebChromeClient::selectItemAlignmentFollowsMenuWritingDirection(WebKit::WebChromeClient *this)
{
  return 1;
}

void WebKit::WebChromeClient::createPopupMenu(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPopupMenu::create(v6, a2, &v7);
  *a3 = v7;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::createSearchPopupMenu(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E34F0AE8;
  WebKit::WebPopupMenu::create(v6, a2, &v8);
  *(_QWORD *)(v7 + 16) = v8;
  *a3 = v7;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::WebChromeClient::displayRefreshMonitorFactory(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
    return v3 + 16;
  else
    return 0;
}

void WebKit::WebChromeClient::createImageBuffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  WebKit::WebProcess *v15;
  uint64_t v16;
  CFTypeRef *v17;
  unsigned int *v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  uint64_t v22;

  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = a1;
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v20);
    a1 = v19;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  if ((a3 - 2) >= 5)
  {
    if (a3 == 1)
    {
      if (*((_BYTE *)v15 + 760))
        goto LABEL_5;
    }
    else
    {
      if (a3 != 8)
      {
LABEL_16:
        if ((a3 - 8) > 0xFDu)
        {
          v21 = 0;
          v22 = 0;
          WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(a2, a4, 1, a3, (uint64_t)&v21, a7, a8);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v22 + 4));
          return;
        }
        goto LABEL_17;
      }
      if (*((_BYTE *)v15 + 762))
        goto LABEL_5;
    }
LABEL_17:
    *a7 = 0;
    return;
  }
  if (!*((_BYTE *)v15 + 761))
    goto LABEL_16;
LABEL_5:
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v16)
    v17 = (CFTypeRef *)(v16 - 16);
  else
    v17 = 0;
  CFRetain(v17[1]);
  v18 = (unsigned int *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v17);
  WebKit::RemoteRenderingBackendProxy::createImageBuffer(v18, a2, a3, a4, a5, a6, a7, a8);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 - 8));
}

void WebKit::WebChromeClient::sinkIntoImageBuffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11[2];

  if (!*a2)
  {
    v7 = 0;
LABEL_12:
    *a2 = 0;
    WebCore::SerializedImageBuffer::sinkIntoImageBuffer();
    v11[1] = 0;
    if (!v7)
      return;
    goto LABEL_9;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
  v7 = *a2;
  if ((v6 & 1) == 0)
    goto LABEL_12;
  *a2 = 0;
  v11[0] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v8)
    v9 = (CFTypeRef *)(v8 - 16);
  else
    v9 = 0;
  CFRetain(v9[1]);
  v10 = WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v9);
  WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(v11, v10, a3);
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 - 8));
  if (v7)
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebKit::WebChromeClient::createWorkerClient(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = *(_QWORD *)(v6 + 48);
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 312);
  *(_QWORD *)v8 = off_1E34F0D08;
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 24) = 0;
  *a3 = v8;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::createGraphicsContextGL(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  CFTypeRef *v7;
  WTF::RunLoop *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = a1;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v12);
    a1 = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  if (*((_BYTE *)v5 + 763))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (v6)
      v7 = (CFTypeRef *)(v6 - 16);
    else
      v7 = 0;
    CFRetain(v7[1]);
    v8 = (WTF::RunLoop *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v7);
    v9 = WTF::RunLoop::main(v8);
    WebKit::RemoteGraphicsContextGLProxy::create(a2, (uint64_t)v8, v9, &v13);
    if (v13)
      v10 = v13 + 16;
    else
      v10 = 0;
    *a3 = v10;
    CFRelease(v7[1]);
  }
  else
  {
    WebCore::createWebProcessGraphicsContextGL();
  }
}

void WebKit::WebChromeClient::createGPUForWebGPU(WebKit::WebChromeClient *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  CFTypeRef *v6;
  WTF::RunLoop *v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E4F00;
  v4[1] = 1;
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = (WTF::RunLoop *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
  v8 = WTF::RunLoop::main(v7);
  WebKit::RemoteGPUProxy::create((uint64_t)v4, (uint64_t)v7, v8, &v9);
  *a2 = v9;
  CFRelease(v6[1]);
  if (*((_DWORD *)v4 + 2) == 1)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  else
    --*((_DWORD *)v4 + 2);
}

void WebKit::WebChromeClient::createBarcodeDetector(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  CFTypeRef *v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  uint64_t v8;
  uint64_t IdentifierInternal;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  IPC::StreamClientConnection *v20;
  uint64_t v21;
  IPC::StreamClientConnection *v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
  WebKit::RemoteRenderingBackendProxy::connection(v7, (unsigned int **)&v22);
  if (v22)
  {
    v20 = v22;
    v22 = 0;
    v8 = *((_QWORD *)v7 + 7);
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::create((uint64_t *)&v20, v8, IdentifierInternal, a2, &v21);
    v10 = (unsigned int *)v20;
    *a3 = v21;
    v20 = 0;
    v21 = 0;
    if (v10)
    {
      do
      {
        v16 = __ldaxr(v10);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v10));
      if (!v17)
      {
        atomic_store(1u, v10);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10);
        WTF::fastFree(v18, v19);
      }
    }
    v11 = (unsigned int *)v22;
    v22 = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v11);
        WTF::fastFree(v14, v15);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::getBarcodeDetectorSupportedFormats(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  WebKit::RemoteRenderingBackendProxy *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  IPC::StreamClientConnection *v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  WebKit::RemoteRenderingBackendProxy::connection(v5, (unsigned int **)&v20);
  v6 = (unsigned int *)v20;
  if (v20)
  {
    v20 = 0;
    v7 = *((_QWORD *)v5 + 7);
    LOBYTE(v18) = 0;
    IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v6, INFINITY, (uint64_t)&v18, a2, v7);
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (v9)
      goto LABEL_12;
    atomic_store(1u, v6);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6);
    goto LABEL_11;
  }
  v18 = 0;
  v19 = 0;
  v12 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v12 + 16))(v12, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v10 = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
LABEL_11:
    WTF::fastFree(v10, v11);
  }
LABEL_12:
  v13 = (unsigned int *)v20;
  v20 = 0;
  if (!v13)
    goto LABEL_15;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v13);
    WTF::fastFree(v16, v17);
    if (!v3)
      return;
  }
  else
  {
LABEL_15:
    if (!v3)
      return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::createFaceDetector(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  CFTypeRef *v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  uint64_t v8;
  uint64_t IdentifierInternal;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  IPC::StreamClientConnection *v20;
  uint64_t v21;
  IPC::StreamClientConnection *v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
  WebKit::RemoteRenderingBackendProxy::connection(v7, (unsigned int **)&v22);
  if (v22)
  {
    v20 = v22;
    v22 = 0;
    v8 = *((_QWORD *)v7 + 7);
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteFaceDetectorProxy::create((uint64_t *)&v20, v8, IdentifierInternal, a2, &v21);
    v10 = (unsigned int *)v20;
    *a3 = v21;
    v20 = 0;
    v21 = 0;
    if (v10)
    {
      do
      {
        v16 = __ldaxr(v10);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v10));
      if (!v17)
      {
        atomic_store(1u, v10);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10);
        WTF::fastFree(v18, v19);
      }
    }
    v11 = (unsigned int *)v22;
    v22 = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v11);
        WTF::fastFree(v14, v15);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::createTextDetector(WebKit::WebChromeClient *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  CFTypeRef *v4;
  WebKit::RemoteRenderingBackendProxy *v5;
  uint64_t v6;
  uint64_t IdentifierInternal;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  IPC::StreamClientConnection *v18;
  uint64_t v19;
  IPC::StreamClientConnection *v20;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  WebKit::RemoteRenderingBackendProxy::connection(v5, (unsigned int **)&v20);
  if (v20)
  {
    v18 = v20;
    v20 = 0;
    v6 = *((_QWORD *)v5 + 7);
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteTextDetectorProxy::create((uint64_t *)&v18, v6, IdentifierInternal, &v19);
    v8 = (unsigned int *)v18;
    *a2 = v19;
    v18 = 0;
    v19 = 0;
    if (v8)
    {
      do
      {
        v14 = __ldaxr(v8);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v8));
      if (!v15)
      {
        atomic_store(1u, v8);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v8);
        WTF::fastFree(v16, v17);
      }
    }
    v9 = (unsigned int *)v20;
    v20 = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v9);
        WTF::fastFree(v12, v13);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::attachViewOverlayGraphicsLayer(WebKit::WebChromeClient *this, WebCore::GraphicsLayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
  {
    v6 = *(_QWORD **)(v4 + 88);
    v7 = v6[3];
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 144))
          (*(void (**)(uint64_t, _QWORD, _QWORD, WebCore::GraphicsLayer *))(*(_QWORD *)v5 + 344))(v5, v6[10], v6[11], a2);
      }
    }
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::shouldTriggerRenderingUpdate(WebKit::WebChromeClient *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v7 = 1;
  if (a2 <= 0x3B)
  {
    v5 = *(_QWORD *)(v4 + 2392);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 232) - *(_QWORD *)(v5 + 240);
      if ((v6 & ~(v6 >> 63)) > 2)
        v7 = 0;
    }
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v7;
}

void WebKit::WebChromeClient::triggerRenderingUpdate(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 264))(v3);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebChromeClient::remoteImagesCountForTesting(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 2392);
  if (!v3)
  {
    v4 = 0;
    if (!v1)
      return v4;
    goto LABEL_6;
  }
  v4 = WebKit::RemoteResourceCacheProxy::imagesCount((WebKit::RemoteResourceCacheProxy *)(v3 + 64));
  if (v1)
LABEL_6:
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

void WebKit::WebChromeClient::contentRuleListNotification(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1851;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v15 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode((IPC::Encoder *)v10, (char *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v10, (uint64_t *)(a3 + 40));
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v15, 0);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::WebChromeClient::layerTreeStateIsFrozen(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
  {
    v4 = 0;
    if (!v1)
      return v4;
    goto LABEL_6;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  if (v1)
LABEL_6:
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

void WebKit::WebChromeClient::prepareForVideoFullscreen(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

BOOL WebKit::WebChromeClient::canEnterVideoFullscreen(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  int v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = *((unsigned __int8 *)WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v4) + 96);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return a2 != 1 || v5 == 0;
}

uint64_t WebKit::WebChromeClient::supportsVideoFullscreen(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return 1;
}

uint64_t WebKit::WebChromeClient::supportsVideoFullscreenStandby(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return 1;
}

void WebKit::WebChromeClient::setMockVideoPresentationModeEnabled(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2041;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::enterVideoFullscreenForVideoElement(WebKit::WebChromeClient *this, WebCore::HTMLVideoElement *a2, int a3, char a4)
{
  uint64_t v7;
  CFTypeRef *v8;
  WebKit::VideoPresentationManager *v9;

  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
    v8 = (CFTypeRef *)(v7 - 16);
  else
    v8 = 0;
  CFRetain(v8[1]);
  v9 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v8);
  WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(v9, a2, a3, a4);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::exitVideoFullscreenForVideoElement(uint64_t a1, WebKit *a2, uint64_t *a3)
{
  uint64_t v5;
  CFTypeRef *v6;
  WebKit::VideoPresentationManager *v7;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v6);
  WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement((uint64_t)v7, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::setUpPlaybackControlsManager(WebKit::WebChromeClient *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  WebKit::PlaybackSessionManager *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v4);
  WebKit::PlaybackSessionManager::setUpPlaybackControlsManager(v5, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::mediaEngineChanged(WebKit::WebChromeClient *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = (uint64_t *)WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v4);
  WebKit::PlaybackSessionManager::mediaEngineChanged(v5, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::exitVideoFullscreenToModeWithoutAnimation(WebKit::WebChromeClient *this, WebCore::HTMLVideoElement *a2, int a3)
{
  uint64_t v5;
  CFTypeRef *v6;
  WebKit::VideoPresentationManager *v7;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v6);
  WebKit::VideoPresentationManager::exitVideoFullscreenToModeWithoutAnimation(v7, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::WebChromeClient::supportsFullScreenForElement(WebKit::WebChromeClient *this, const WebCore::Element *a2, uint64_t a3)
{
  uint64_t v4;
  CFTypeRef *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v4)
    v5 = (CFTypeRef *)(v4 - 16);
  else
    v5 = 0;
  CFRetain(v5[1]);
  v6 = (_QWORD *)*((_QWORD *)WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v5) + 9);
  if ((*(_QWORD *)(*(_QWORD *)(v6[6] + 112) + 704) & 0x80000000000000) != 0)
    v7 = WebKit::InjectedBundlePageFullScreenClient::supportsFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(v6 + 48), (WebKit::WebPage *)v6, a3);
  else
    v7 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
  return v7;
}

void WebKit::WebChromeClient::enterFullScreenForElement(WebKit::WebChromeClient *this, WebCore::Element *a2, int a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  CFTypeRef *v11;
  WebKit::VideoPresentationManager *v12;

  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v6)
    v7 = (CFTypeRef *)(v6 - 16);
  else
    v7 = 0;
  CFRetain(v7[1]);
  v8 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v7);
  WebKit::WebFullScreenManager::enterFullScreenForElement(v8, a2, a3);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
  {
    v9 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v9 + 2;
    if (a3 == 4)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      if (v10)
        v11 = (CFTypeRef *)(v10 - 16);
      else
        v11 = 0;
      CFRetain(v11[1]);
      v12 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v11);
      WebKit::VideoPresentationManager::setVideoFullscreenMode(v12, a2, 4);
      if (v10)
        CFRelease(*(CFTypeRef *)(v10 - 8));
      v9 = *((_DWORD *)a2 + 6) - 2;
    }
    if (v9)
    {
      *((_DWORD *)a2 + 6) = v9;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a2);
    }
  }
}

void WebKit::WebChromeClient::exitFullScreenForElement(WebKit::WebChromeClient *this, WebCore::Element *a2)
{
  WebCore::Element *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  CFTypeRef *v8;
  WebKit::WebFullScreenManager *v9;
  uint64_t v10;
  CFTypeRef *v11;
  WebKit::VideoPresentationManager *v12;
  CFTypeRef *v13;
  WebKit::WebFullScreenManager *v14;
  WebCore::Element *v15;
  CFTypeRef *v16;

  if (!a2)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (v10)
      v16 = (CFTypeRef *)(v10 - 16);
    else
      v16 = 0;
    CFRetain(v16[1]);
    v14 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v16);
    v15 = 0;
LABEL_27:
    WebKit::WebFullScreenManager::exitFullScreenForElement(v14, v15);
    if (!v10)
      return;
LABEL_28:
    CFRelease(*(CFTypeRef *)(v10 - 8));
    return;
  }
  v3 = a2;
  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || (v4 = MEMORY[0x1E0DD6158], *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24)))
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (v10)
      v13 = (CFTypeRef *)(v10 - 16);
    else
      v13 = 0;
    CFRetain(v13[1]);
    v14 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v13);
    v15 = v3;
    goto LABEL_27;
  }
  v5 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5 + 2;
  v6 = *((_DWORD *)a2 + 270);
  if (v5)
  {
    *((_DWORD *)a2 + 6) = v5;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(a2);
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
    v8 = (CFTypeRef *)(v7 - 16);
  else
    v8 = 0;
  CFRetain(v8[1]);
  v9 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v8);
  WebKit::WebFullScreenManager::exitFullScreenForElement(v9, v3);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  if (v6 == 4)
  {
    if (*(_QWORD *)(*((_QWORD *)v3 + 12) + 24) != *(_QWORD *)(*(_QWORD *)v4 + 24))
      v3 = 0;
    v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v11 = v10 ? (CFTypeRef *)(v10 - 16) : 0;
    CFRetain(v11[1]);
    v12 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v11);
    WebKit::VideoPresentationManager::clearVideoFullscreenMode(v12, v3, 4);
    if (v10)
      goto LABEL_28;
  }
}

float WebKit::WebChromeClient::screenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(float *)(v2 + 1312);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

float WebKit::WebChromeClient::availableScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(float *)(v2 + 1320);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

float WebKit::WebChromeClient::overrideAvailableScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(float *)(v2 + 1336);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

float WebKit::WebChromeClient::screenSizeForFingerprintingProtections(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  PAL *v5;
  uint64_t v6;
  float v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = (PAL *)CFRetain(*(CFTypeRef *)(v4 + 8));
  if (PAL::currentUserInterfaceIdiomIsSmallScreen(v5))
  {
    v6 = 0;
    while (1)
    {
      v7 = *(float *)&WebKit::WebPage::screenSizeForFingerprintingProtections(WebCore::LocalFrame const&,WebCore::FloatSize)const::fixedSizes[v6];
      if (a2 <= v7)
        break;
      v6 += 2;
      if (v6 == 8)
      {
        v7 = 414.0;
        break;
      }
    }
  }
  else
  {
    v7 = *(float *)(v4 + 1064);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v7;
}

void WebKit::WebChromeClient::notifyScrollerThumbIsVisibleInRect(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1985;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v8, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::recommendedScrollbarStyleDidChange(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1996;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::underlayColor(WebKit::WebChromeClient *this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebCore::Color::Color(a2, (const Color *)(v4 + 152));
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::themeColorChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(_BYTE *)(v2 + 937) = 1;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebChromeClient::appHighlightsVisiblility(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(v2 + 2416);
}

void WebKit::WebChromeClient::plugInStartLabelTitle(WebKit::WebChromeClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, const WTF::String *))(**(_QWORD **)(v4 + 376) + 112))(*(_QWORD *)(v4 + 376), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::plugInStartLabelSubtitle(WebKit::WebChromeClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, const WTF::String *))(**(_QWORD **)(v4 + 376) + 120))(*(_QWORD *)(v4 + 376), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::plugInExtraStyleSheet(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 376) + 128))(*(_QWORD *)(v2 + 376));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::plugInExtraScript(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 376) + 136))(*(_QWORD *)(v2 + 376));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::enableSuddenTermination(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2557;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::isPlayingMediaDidChange(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::isPlayingMediaDidChange(v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::handleAutoplayEvent(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1946;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v15 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v15, 0);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::setTextIndicator(WebKit::WebChromeClient *this, const WebCore::TextIndicatorData *a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::setTextIndicator((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::handleClickForDataDetectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v10[0] = a2;
  v10[1] = a3;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::send<Messages::WebPageProxy::HandleClickForDataDetectionResult>(v7, (uint64_t)v10, v9, 0);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

BOOL WebKit::WebChromeClient::shouldDispatchFakeMouseMoveEvents(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 2025);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 != 0;
}

void WebKit::WebChromeClient::handleAutoFillButtonClick(WebKit::WebChromeClient *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  WebKit::WebProcess *v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  CFTypeRef *v18;
  void *v19;
  IPC::Encoder *v20;

  v19 = 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, (WebKit::InjectedBundleNodeHandle **)&v18);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, uint64_t, CFTypeRef *, void **))(**(_QWORD **)(v4 + 376) + 144))(*(_QWORD *)(v4 + 376), v4, v18, &v19);
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v5 = v4 + 32;
  v20 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(v19, (uint64_t)&v20, (WebKit **)&v16);
  v6 = v16;
  if (v16)
    CFRetain(v16[1]);
  v17 = v6;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1944;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v17);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v20, 0);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v17)
    CFRelease(v17[1]);
  v13 = v16;
  v16 = 0;
  if (v13)
    CFRelease(v13[1]);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  if (v18)
    CFRelease(v18[1]);
  v14 = (CFTypeRef *)v19;
  v19 = 0;
  if (v14)
    CFRelease(v14[1]);
}

void WebKit::WebChromeClient::inputElementDidResignStrongPasswordAppearance(WebKit::WebChromeClient *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  WebKit::WebProcess *v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  CFTypeRef *v18;
  void *v19;
  IPC::Encoder *v20;

  v19 = 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, (WebKit::InjectedBundleNodeHandle **)&v18);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, uint64_t, CFTypeRef *, void **))(**(_QWORD **)(v4 + 376) + 152))(*(_QWORD *)(v4 + 376), v4, v18, &v19);
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v5 = v4 + 32;
  v20 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(v19, (uint64_t)&v20, (WebKit **)&v16);
  v6 = v16;
  if (v16)
    CFRetain(v16[1]);
  v17 = v6;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1912;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v17);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v20, 0);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v17)
    CFRelease(v17[1]);
  v13 = v16;
  v16 = 0;
  if (v13)
    CFRelease(v13[1]);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  if (v18)
    CFRelease(v18[1]);
  v14 = (CFTypeRef *)v19;
  v19 = 0;
  if (v14)
    CFRelease(v14[1]);
}

void WebKit::WebChromeClient::performSwitchHapticFeedback(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1990;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::imageOrMediaDocumentSizeChanged(WebKit::WebChromeClient *this, const WebCore::IntSize *a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::imageOrMediaDocumentSizeChanged((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::didInvalidateDocumentMarkerRects(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::PageOverlay *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(WebCore::PageOverlay **)(*(_QWORD *)(v2 + 448) + 16);
  if (v3)
    WebCore::PageOverlay::setNeedsDisplay(v3);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::hasStorageAccess(uint64_t a1, WebCore::RegistrableDomain *a2, WebCore::RegistrableDomain *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  WebKit::WebFrame::fromCoreFrame(a4, &v12);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  v11 = v12;
  WebKit::WebPage::hasStorageAccess((uint64_t *)v10, a2, a3, v12, a5);
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void WebKit::WebChromeClient::requestStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  WebKit::WebFrame::fromCoreFrame(a4, &v14);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v11)
    v12 = v11 - 16;
  else
    v12 = 0;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  v13 = v14;
  WebKit::WebPage::requestStorageAccess(v12, a2, a3, v14, a5, a6);
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 - 8));
  CFRelease(*(CFTypeRef *)(v13 + 8));
}

uint64_t WebKit::WebChromeClient::hasPageLevelStorageAccess(WebKit::WebChromeClient *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t hasPageLevelStorageAccess;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  hasPageLevelStorageAccess = WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  return hasPageLevelStorageAccess;
}

void WebKit::WebChromeClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WebKit::WebFrame *v17;
  uint64_t *v18[2];
  char v19;
  _QWORD v20[2];
  _BYTE v21[8];
  uint64_t v22;
  CFTypeRef cf;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::fromCoreFrame(a2, &v17);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *((_QWORD *)v17 + 10);
  v10 = *((_QWORD *)v17 + 11);
  WebKit::WebFrame::info(v17, (uint64_t)v21);
  v20[0] = v9;
  v20[1] = v10;
  v18[0] = v20;
  v18[1] = (uint64_t *)v21;
  v19 = a3;
  v12 = *(_QWORD *)(v8 + 32);
  v11 = v8 + 32;
  v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(v11, v18, a4, v13, 0);
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v25 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E34EEE60[v25])(v18, &v24);
  v25 = -1;
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v22);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  if (v17)
    CFRelease(*((CFTypeRef *)v17 + 1));
}

void WebKit::WebChromeClient::configureLoggingChannel(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::configureLoggingChannel(v8, a2, a3, a4);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

BOOL WebKit::WebChromeClient::userIsInteracting(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 912);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 != 0;
}

void WebKit::WebChromeClient::setUserIsInteracting(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(_BYTE *)(v4 + 912) = a2;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::setMockWebAuthenticationConfiguration(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2042;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::encode((IPC::Encoder *)v8, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::animationDidFinishForElement(WebKit::WebChromeClient *this, const WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::animationDidFinishForElement((WebCore::Page **)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  CFTypeRef *v8;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = (CFTypeRef *)(v7 - 16);
  else
    v8 = 0;
  CFRetain(v8[1]);
  WebKit::WebPage::requestTextRecognition((WebCore::ShareableBitmap *)v8, a2, a3, a4);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::didAddOrRemoveViewportConstrainedObjects(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 112) + 432) != 0.0)
    WebCore::DeferrableOneShotTimer::restart(v2 + 2264);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::textAutosizingUsesIdempotentModeChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::textAutosizingUsesIdempotentModeChanged((_QWORD *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

double WebKit::WebChromeClient::baseViewportLayoutSizeScaleFactor(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(double *)(v2 + 1184);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

void WebKit::WebChromeClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v12[0] = a2;
  v12[1] = a3;
  v10 = *(_QWORD *)(v8 + 32);
  v9 = v8 + 32;
  v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(v9, (uint64_t)v12, a4, v11, 0);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::startApplePayAMSUISession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  IPC::Encoder *v21;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v10 = *(_QWORD *)(v8 + 32);
  v9 = v8 + 32;
  v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2073;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
  v13 = *a4;
  *a4 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34EEF60;
  v14[1] = v13;
  v20[0] = v14;
  v20[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v9 + 40))(v9, &v21, v20, 0);
  v16 = v20[0];
  v20[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v15);
    WTF::fastFree(v18, v19);
  }
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::abortApplePayAMSUISession(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1833;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::beginSystemPreview(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v22[2];
  IPC::Encoder *v23;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  v12 = *(_QWORD *)(v10 + 32);
  v11 = v10 + 32;
  v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1839;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v23 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v14, a3);
  IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode((IPC::Encoder *)v14, a4);
  v15 = *a5;
  *a5 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34EEF88;
  v16[1] = v15;
  v22[0] = v16;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v11 + 40))(v11, &v23, v22, 0);
  v18 = v22[0];
  v22[0] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
  }
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
}

void WebKit::WebChromeClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v4 + 32);
  v5 = v4 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2009;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  v9 = *a2;
  *a2 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EEFB0;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::isUsingUISideCompositing(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 72) + 24);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 == 0;
}

void WebKit::WebChromeClient::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::didAdjustVisibilityWithSelectors(v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::gamepadsRecentlyAccessed(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  WebKit::WebPage::gamepadsRecentlyAccessed((WebKit::WebPage *)v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  WebKit::WebPage::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(v10, a2, a3, a4, a5);
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
}

void WebKit::WebChromeClient::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::proofreadingSessionUpdateStateForSuggestionWithID(v8, a2, a3, a4);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::removeTextAnimationForAnimationID(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::removeTextAnimationForAnimationID((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::removeTransparentMarkersForSessionID(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::TextAnimationController::removeTransparentMarkersForSessionID(*(WebKit::TextAnimationController **)(v4 + 2472), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::removeInitialTextAnimation(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::TextAnimationController::removeInitialTextAnimation(*(WebKit::TextAnimationController **)(v4 + 2472), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::addInitialTextAnimation(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::TextAnimationController::addInitialTextAnimation(*(WebKit::TextAnimationController **)(v4 + 2472), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::addSourceTextAnimation(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v6 = v5 - 16;
  if (!v5)
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v8 = *a4;
  if (!v8)
  {
LABEL_7:
    if (!v5)
      return;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 4;
  if (v9 == -2)
  {
    WTF::StringImpl::destroy(v8, v7);
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)v8 = v9 + 2;
    if (v9)
    {
LABEL_6:
      *(_DWORD *)v8 = v9;
      goto LABEL_7;
    }
  }
  WTF::StringImpl::destroy(v8, v7);
  if (v5)
LABEL_8:
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::addDestinationTextAnimation(uint64_t a1, const WTF::UUID *a2, __int128 *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *a4;
  if (!v9)
  {
    v11 = 0;
    WebKit::WebPage::addDestinationTextAnimation(v8, a2, a3, &v11);
    if (!v7)
      return;
    goto LABEL_9;
  }
  *(_DWORD *)v9 += 2;
  v11 = v9;
  WebKit::WebPage::addDestinationTextAnimation(v8, a2, a3, &v11);
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, v10);
    if (!v7)
      return;
    goto LABEL_9;
  }
  *(_DWORD *)v9 -= 2;
  if (v7)
LABEL_9:
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::clearAnimationsForSessionID(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::TextAnimationController::clearAnimationsForSessionID(*(WebKit::TextAnimationController **)(v4 + 2472), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::hasActiveNowPlayingSessionChanged(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::hasActiveNowPlayingSessionChanged((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  v5 = (uint64_t *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v7 = *a2;
  *a2 = 0;
  *v6 = &off_1E34EEFD8;
  v6[1] = v7;
  v9 = v6;
  v10 = 0;
  WebKit::RemoteRenderingBackendProxy::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v5, (uint64_t)&v10, (uint64_t *)&v9, v5[7]);
  v8 = (uint64_t)v9;
  v9 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebColorChooser::~WebColorChooser(WebKit::WebColorChooser *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E34EED40;
  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
    *((_QWORD *)this + 3) = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
    *((_QWORD *)this + 3) = 0;
    do
    {
LABEL_10:
      v8 = __ldaxr((unsigned int *)v3);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v3));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
    goto LABEL_13;
  }
  v5 = *(unsigned int **)(v4 + 568);
  *(_QWORD *)(v4 + 568) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    goto LABEL_10;
LABEL_13:
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebColorChooser::~WebColorChooser(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebColorChooser::reattachColorChooser(WebKit::WebColorChooser *this, const WebCore::Color *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebPage *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[3];

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = (WebKit::WebPage *)(v5 - 16);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  WebKit::WebPage::setActiveColorChooser(v6, this);
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 4);
  v16[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v16[1] = v9;
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 40))(v15);
  v17[0] = a2;
  v17[1] = v16;
  v17[2] = v15;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(v8, (uint64_t)v17, *(_QWORD *)(v11 + 40));
  return WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v12);
}

IPC::Encoder *WebKit::WebColorChooser::setSelectedColor(IPC::Encoder *this, const WebCore::Color *a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;
  WebKit::WebProcess *v15;
  IPC::Encoder *v16;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(IPC::Encoder **)(v3 + 568);
      if (v5)
        v5 = (IPC::Encoder *)*((_QWORD *)v5 + 1);
      if (v5 == this)
      {
        {
          v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v14 = this;
          v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v6 = WebKit::WebProcess::WebProcess(v15);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
          v3 = *(_QWORD *)(*((_QWORD *)v14 + 3) + 8);
        }
        v7 = *((_QWORD *)v6 + 4);
        if (v3)
          v8 = v3 - 16;
        else
          v8 = 0;
        v9 = *(_QWORD *)(v8 + 40);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 2031;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v16 = (IPC::Encoder *)v10;
        IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v10, a2);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
        this = v16;
        v16 = 0;
        if (this)
        {
          IPC::Encoder::~Encoder(this, v11);
          return (IPC::Encoder *)WTF::fastFree(v12, v13);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebColorChooser::endChooser(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      {
        v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v11 = this;
        v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v3 = WebKit::WebProcess::WebProcess(v12);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
        v2 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 8);
      }
      v4 = *((_QWORD *)v3 + 4);
      if (v2)
        v5 = v2 - 16;
      else
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 40);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1932;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v13 = (IPC::Encoder *)v7;
      IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
      this = v13;
      v13 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebCryptoClient::wrapCryptoKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  WebKit::WebProcess *v13;
  int v14;
  int v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  uint64_t (**v26)();
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WebKit::WebProcess *v34;
  WebKit::WebProcess *v35;
  WebKit::WebProcess *v36;
  uint64_t *v37;
  WTF *v38;
  unint64_t v39;
  char v40;
  int v41;
  WTF *v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t *v46;
  int v47;
  IPC::Encoder *v48;
  uint64_t v49;

  if (!*(_BYTE *)(a1 + 16))
  {
    v7 = &_MergedGlobals_106;
      goto LABEL_54;
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    goto LABEL_9;
  }
  v7 = &_MergedGlobals_106;
    goto LABEL_52;
  v8 = WebKit::WebProcess::singleton(void)::process;
LABEL_4:
  v7 = *(char **)(v8 + 32);
  v9 = *(_QWORD *)(a1 + 8);
  v49 = 0;
  IPC::Connection::createSyncMessageEncoder(3690, v9, &v49, (uint64_t *)&v48);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v48, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::Connection::sendSyncMessage((uint64_t)v7, v49, (uint64_t *)&v48, 0, (uint64_t)&v46, INFINITY);
  if (!v47)
  {
    LOBYTE(v42) = 0;
    v45 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v46, (uint64_t)&v42);
    if (v45)
    {
      if (v47)
        goto LABEL_51;
      v17 = v46;
      v46 = 0;
      if (v44)
      {
        v4 = v43;
        LODWORD(v3) = HIDWORD(v43);
        v38 = v42;
        v39 = v43;
        v10 = 1;
      }
      else
      {
        v10 = 0;
        LOBYTE(v38) = 0;
      }
      v11 = 0;
      v12 = 0;
      v37 = v17;
      v40 = v10;
      v41 = 0;
    }
    else
    {
      v10 = 0;
      LOBYTE(v37) = 13;
      v11 = 1;
      v41 = 1;
      v12 = v47;
      if (v47 == -1)
        goto LABEL_25;
    }
LABEL_24:
    ((void (*)(WTF **, uint64_t **))off_1E34EEF40[v12])(&v42, &v46);
LABEL_25:
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v16);
      WTF::fastFree(v21, v22);
    }
    if (v11)
    {
      LOBYTE(v42) = 0;
      v44 = 0;
    }
    else
    {
      LOBYTE(v42) = 0;
      v44 = 0;
      if (v10)
      {
        v23 = v38;
        v38 = 0;
        v39 = 0;
        v42 = v23;
        v43 = __PAIR64__(v3, v4);
        v44 = 1;
      }
    }
    std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a3, (uint64_t)&v42);
    if (v44)
    {
      v25 = v42;
      if (v42)
      {
        v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree(v25, v24);
      }
    }
    v26 = off_1E34EEF00;
    return ((uint64_t (*)(WTF **, uint64_t **))v26[v11])(&v42, &v37);
  }
  if (v47 == 1)
  {
    v10 = 0;
    LOBYTE(v37) = (_BYTE)v46;
    v11 = 1;
    v41 = 1;
    v12 = 1;
    goto LABEL_24;
  }
  while (1)
  {
    while (1)
    {
LABEL_51:
      a1 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_52:
      v3 = a1;
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v35 = WebKit::WebProcess::WebProcess(v34);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
      v7[2488] = 1;
      if (*(_BYTE *)(v3 + 16))
      {
        v8 = (uint64_t)v35;
        a1 = v3;
        goto LABEL_4;
      }
      __break(1u);
LABEL_54:
      v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v36);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
      v7[2488] = 1;
LABEL_9:
      v7 = (char *)*((_QWORD *)v13 + 4);
      v49 = 0;
      IPC::Connection::createSyncMessageEncoder(3734, 0, &v49, (uint64_t *)&v48);
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v48, *(const void **)a2, *(unsigned int *)(a2 + 12));
      IPC::Connection::sendSyncMessage((uint64_t)v7, v49, (uint64_t *)&v48, 0, (uint64_t)&v46, INFINITY);
      if (!v47)
        break;
      if (v47 == 1)
      {
        v14 = 0;
        LOBYTE(v37) = (_BYTE)v46;
        v11 = 1;
        v41 = 1;
        v15 = 1;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v45 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v46, (uint64_t)&v42);
    if (!v45)
      break;
    if (!v47)
    {
      v19 = v46;
      v46 = 0;
      if (v44)
      {
        v4 = v43;
        LODWORD(v3) = HIDWORD(v43);
        v38 = v42;
        v39 = v43;
        v14 = 1;
      }
      else
      {
        v14 = 0;
        LOBYTE(v38) = 0;
      }
      v11 = 0;
      v15 = 0;
      v37 = v19;
      v40 = v14;
      v41 = 0;
      goto LABEL_39;
    }
  }
  v14 = 0;
  LOBYTE(v37) = 13;
  v11 = 1;
  v41 = 1;
  v15 = v47;
  if (v47 == -1)
    goto LABEL_40;
LABEL_39:
  ((void (*)(WTF **, uint64_t **))off_1E34EEF40[v15])(&v42, &v46);
LABEL_40:
  v27 = v48;
  v48 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v18);
    WTF::fastFree(v28, v29);
  }
  if (v11)
  {
    LOBYTE(v42) = 0;
    v44 = 0;
  }
  else
  {
    LOBYTE(v42) = 0;
    v44 = 0;
    if (v14)
    {
      v30 = v38;
      v38 = 0;
      v39 = 0;
      v42 = v30;
      v43 = __PAIR64__(v3, v4);
      v44 = 1;
    }
  }
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a3, (uint64_t)&v42);
  if (v44)
  {
    v32 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v32, v31);
    }
  }
  v26 = off_1E34EEF10;
  return ((uint64_t (*)(WTF **, uint64_t **))v26[v11])(&v42, &v37);
}

WTF *WebKit::WebCryptoClient::unwrapCryptoKey@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  WTF *result;
  void *v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  WebKit::WebProcess *v13;
  int v14;
  int v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  uint64_t (**v26)();
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WebKit::WebProcess *v33;
  WebKit::WebProcess *v34;
  uint64_t *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  WTF *v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t *v44;
  int v45;
  IPC::Encoder *v46;
  uint64_t v47;
  _BYTE v48[24];
  WTF *v49;
  int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::readSerializedCryptoKey();
  if (!v51)
  {
    *a2 = 0;
    a2[16] = 0;
    goto LABEL_54;
  }
  v8 = &_MergedGlobals_106;
  if (!*(_BYTE *)(a1 + 16))
  {
    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v34);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
    }
    a1 = *((_QWORD *)v13 + 4);
    v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3733, 0, &v47, (uint64_t *)&v46);
    IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(v46, (uint64_t)v48);
    IPC::Connection::sendSyncMessage(a1, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 != 1)
        goto LABEL_58;
      v14 = 0;
      LOBYTE(v35) = (_BYTE)v44;
      v11 = 1;
      v39 = 1;
      v15 = 1;
    }
    else
    {
      LOBYTE(v40) = 0;
      v43 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
      if (v43)
      {
        if (v45)
          goto LABEL_58;
        v19 = v44;
        v44 = 0;
        if (v42)
        {
          v3 = v41;
          v2 = HIDWORD(v41);
          v36 = v40;
          v37 = v41;
          v14 = 1;
        }
        else
        {
          v14 = 0;
          LOBYTE(v36) = 0;
        }
        v11 = 0;
        v15 = 0;
        v35 = v19;
        v38 = v14;
        v39 = 0;
      }
      else
      {
        v14 = 0;
        LOBYTE(v35) = 13;
        v11 = 1;
        v39 = 1;
        v15 = v45;
        if (v45 == -1)
          goto LABEL_43;
      }
    }
    ((void (*)(WTF **, uint64_t **))off_1E34EEF40[v15])(&v40, &v44);
LABEL_43:
    v27 = v46;
    v46 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v18);
      WTF::fastFree(v28, v29);
    }
    if (v11)
    {
      LOBYTE(v40) = 0;
      v42 = 0;
    }
    else
    {
      LOBYTE(v40) = 0;
      v42 = 0;
      if (v14)
      {
        v30 = v36;
        v36 = 0;
        v37 = 0;
        v40 = v30;
        v41 = __PAIR64__(v2, v3);
        v42 = 1;
      }
    }
    std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)&v40);
    if (v42)
    {
      v32 = v40;
      if (v40)
      {
        v40 = 0;
        LODWORD(v41) = 0;
        WTF::fastFree(v32, v31);
      }
    }
    v26 = off_1E34EEF30;
    goto LABEL_53;
  }
    goto LABEL_59;
  result = (WTF *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
LABEL_62:
      __break(1u);
      return result;
    }
    v8 = (char *)*((_QWORD *)result + 4);
    v9 = *(_QWORD *)(a1 + 8);
    v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3689, v9, &v47, (uint64_t *)&v46);
    IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(v46, (uint64_t)v48);
    IPC::Connection::sendSyncMessage((uint64_t)v8, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 == 1)
      {
        v10 = 0;
        LOBYTE(v35) = (_BYTE)v44;
        v11 = 1;
        v39 = 1;
        v12 = 1;
        goto LABEL_27;
      }
      goto LABEL_58;
    }
    LOBYTE(v40) = 0;
    v43 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
    if (!v43)
      break;
    if (!v45)
    {
      v17 = v44;
      v44 = 0;
      if (v42)
      {
        v3 = v41;
        v2 = HIDWORD(v41);
        v36 = v40;
        v37 = v41;
        v10 = 1;
      }
      else
      {
        v10 = 0;
        LOBYTE(v36) = 0;
      }
      v11 = 0;
      v12 = 0;
      v35 = v17;
      v38 = v10;
      v39 = 0;
      goto LABEL_27;
    }
LABEL_58:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_59:
    v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v33);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
    v8[2488] = 1;
    if (!v51)
      goto LABEL_62;
  }
  v10 = 0;
  LOBYTE(v35) = 13;
  v11 = 1;
  v39 = 1;
  v12 = v45;
  if (v45 == -1)
    goto LABEL_28;
LABEL_27:
  ((void (*)(WTF **, uint64_t **))off_1E34EEF40[v12])(&v40, &v44);
LABEL_28:
  v20 = v46;
  v46 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v16);
    WTF::fastFree(v21, v22);
  }
  if (v11)
  {
    LOBYTE(v40) = 0;
    v42 = 0;
  }
  else
  {
    LOBYTE(v40) = 0;
    v42 = 0;
    if (v10)
    {
      v23 = v36;
      v36 = 0;
      v37 = 0;
      v40 = v23;
      v41 = __PAIR64__(v2, v3);
      v42 = 1;
    }
  }
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)&v40);
  if (v42)
  {
    v25 = v40;
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree(v25, v24);
    }
  }
  v26 = off_1E34EEF20;
LABEL_53:
  result = (WTF *)((uint64_t (*)(WTF **, uint64_t **))v26[v11])(&v40, &v35);
LABEL_54:
  if (v51)
  {
    result = v49;
    if (v49)
    {
      v49 = 0;
      v50 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDataListSuggestionPicker::handleKeydownWithIdentifier(WebKit::WebDataListSuggestionPicker *this, const WTF::String *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  WebKit::WebDataListSuggestionPicker *v13;
  WebKit::WebProcess *v14;
  IPC::Encoder *v15;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = this;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v14);
    this = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 40);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1948;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebDataListSuggestionPicker::close(WebKit::WebDataListSuggestionPicker *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  WebKit::WebDataListSuggestionPicker *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = this;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v12);
    this = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1933;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebDataListSuggestionPicker::displayWithActivationType(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScrollView *v8;
  IPC::Encoder *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WebKit::WebProcess *v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  IPC::Encoder *v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 24))(&v28);
  if (HIDWORD(v29))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    *(_QWORD *)&v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
    *((_QWORD *)&v27 + 1) = v6;
    v7 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v5);
    if (v7)
    {
      v8 = (WebCore::ScrollView *)v7;
      ++*(_DWORD *)(v7 + 8);
      v26[0] = (IPC::Encoder *)WebCore::ScrollView::unobscuredContentRect();
      v26[1] = v9;
      v23 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v26);
      v24[0] = v10;
      if ((WebCore::IntRect::intersects((WebCore::IntRect *)&v23, (const WebCore::IntRect *)&v27) & 1) == 0)
      {
        WebKit::WebDataListSuggestionPicker::close((WebKit::WebDataListSuggestionPicker *)a1);
        if (*((_DWORD *)v8 + 2) == 1)
        {
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
          if (!v4)
            return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v11);
        }
        else
        {
          --*((_DWORD *)v8 + 2);
          if (!v4)
            return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v11);
        }
        goto LABEL_19;
      }
      if (*((_DWORD *)v8 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 2);
    }
    WebKit::WebPage::setActiveDataListSuggestionPicker((WebKit::WebPage *)v5, (WebKit::WebDataListSuggestionPicker *)a1);
    LOBYTE(v23) = a2;
    v24[0] = v28;
    v12 = v29;
    v28 = 0;
    v29 = 0;
    v24[1] = v12;
    v25 = v27;
    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v22);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
    }
    v14 = *((_QWORD *)v13 + 4);
    v15 = *(_QWORD *)(v5 + 40);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 2055;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v26[0] = (IPC::Encoder *)v16;
    IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::encode((IPC::Encoder *)v16, (char *)&v23);
    IPC::Connection::sendMessageImpl(v14, (uint64_t *)v26, 0, 0);
    v18 = v26[0];
    v26[0] = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v17);
      WTF::fastFree(v19, v20);
    }
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v17);
    if (v4)
LABEL_19:
      CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    WebKit::WebDataListSuggestionPicker::close((WebKit::WebDataListSuggestionPicker *)a1);
  }
  return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v11);
}

IPC::Encoder *WebKit::WebDateTimeChooser::endChooser(WebKit::WebDateTimeChooser *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  WebKit::WebDateTimeChooser *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = this;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v12);
    this = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1934;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebDateTimeChooser::showChooser(WebKit::WebDateTimeChooser *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WebKit::WebProcess *v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPage::setActiveDateTimeChooser((WebKit::WebPage *)v5, a1);
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v8 = *(_QWORD *)(v5 + 40);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2056;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v15 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::encode((IPC::Encoder *)v9, a2);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v15, 0, 0);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v12, v13);
  }
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

void WebKit::WebDiagnosticLoggingClient::~WebDiagnosticLoggingClient(WTF *this, void *a2)
{
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessage(WTF *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  IPC::Encoder *result;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  void *v15;
  uint64_t *v16[2];
  char v17;
  IPC::Encoder *v18;

  if (!a4 || (result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v8 <= 0.05))
  {
    v9 = (_QWORD *)*((_QWORD *)a1 + 2);
    v16[0] = a2;
    v16[1] = a3;
    v17 = 0;
    v10 = v9[4];
    v9 += 4;
    v11 = (*(uint64_t (**)(_QWORD *))(v10 + 56))(v9);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1962;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v18 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, v16);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v9 + 32))(v9, &v18, 0);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithResult(WTF *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  IPC::Encoder *result;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  if (!a5 || (result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v10 <= 0.05))
  {
    v11 = (_QWORD *)*((_QWORD *)a1 + 2);
    v12 = v11[4];
    v11 += 4;
    v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1965;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v18 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 4uLL, 4) = a4;
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = 0;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v11 + 32))(v11, &v18, 0);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithValue(WTF *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6)
{
  IPC::Encoder *result;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;

  if (!a5 || (result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v12 <= 0.05))
  {
    v13 = (_QWORD *)*((_QWORD *)a1 + 2);
    v14 = v13[4];
    v13 += 4;
    v15 = (*(uint64_t (**)(_QWORD *))(v14 + 56))(v13);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 1967;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v20 = (IPC::Encoder *)v16;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
    *(double *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a6;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 4uLL, 4) = a4;
    *IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1) = 0;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v13 + 32))(v13, &v20, 0);
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(WTF *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  IPC::Encoder *result;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12[2];
  char v13;

  if (!a4 || (result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v8 <= 0.05))
  {
    v9 = *((_QWORD *)a1 + 2);
    v12[0] = a2;
    v12[1] = a3;
    v13 = 0;
    v10 = *(_QWORD *)(v9 + 32);
    v9 += 32;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    return IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(v9, v12, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithValueDictionary(WTF *a1, uint64_t *a2, uint64_t *a3, _QWORD **a4, int a5)
{
  IPC::Encoder *result;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  if (!a5 || (result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v10 <= 0.05))
  {
    v11 = (_QWORD *)*((_QWORD *)a1 + 2);
    v12 = v11[4];
    v11 += 4;
    v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1966;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v18 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits> const&>((IPC::Encoder *)v14, a4);
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = 0;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v11 + 32))(v11, &v18, 0);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithDomain(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v5 = *(_QWORD **)(a1 + 16);
  v6 = v5[4];
  v5 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1963;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v5 + 32))(v5, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

const char ***WebKit::WebDragClient::willPerformDragDestinationAction(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char ***result;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2 == 4)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 712);
    *(_QWORD *)(v4 + 712) = 0;
    result = *(const char ****)(v4 + 688);
    *(_QWORD *)(v4 + 688) = v5;
    if (result)
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
  }
  else if (v2 && (v7 = *(_QWORD *)(v2 + 8)) != 0)
  {
    return (const char ***)WebKit::WebPage::mayPerformUploadDragDestinationAction((WebKit::WebPage *)(v7 - 16));
  }
  else
  {
    return (const char ***)WebKit::WebPage::mayPerformUploadDragDestinationAction(0);
  }
  return result;
}

uint64_t WebKit::WebDragClient::dragSourceActionMaskForPoint(WebKit::WebDragClient *this, const IntPoint *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  return *(unsigned __int8 *)(v3 + 796);
}

uint64_t WebKit::WebChromeClient::supportsSettingCursor(WebKit::WebChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::allowsAcceleratedCompositing(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::requiresFullscreenForVideoPlayback(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::firstResponder(WebCore::ChromeClient *this)
{
  return 0;
}

float WebCore::ChromeClient::minimumWindowSize(WebCore::ChromeClient *this)
{
  return 100.0;
}

uint64_t WebKit::WebChromeClient::needsImageOverlayControllerForSelectionPainting(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebDataListSuggestionPicker::~WebDataListSuggestionPicker(WebKit::WebDataListSuggestionPicker *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

void WebKit::WebDateTimeChooser::~WebDateTimeChooser(WebKit::WebDateTimeChooser *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

uint64_t WebCore::DragClient::useLegacyDragClient(WebCore::DragClient *this)
{
  return 1;
}

void WebKit::WebDragClient::~WebDragClient(WebKit::WebDragClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF000;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF000;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy13CreateNewPageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 1512))
    WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)(a2 + 24));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21GetToolbarsAreVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21GetStatusBarIsVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19GetMenuBarIsVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy18RunJavaScriptAlertEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20RunJavaScriptConfirmEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19RunJavaScriptPromptEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy10PrintFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy13WrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy13WrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy15UnwrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy15UnwrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

_DWORD *WTF::RefCounted<WebCore::UserGestureToken>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAF5E0]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(uint64_t result, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(result + 8) == a2[8])
  {
    if (*(_BYTE *)(result + 8))
      return WebCore::Color::operator=();
  }
  else if (*(_BYTE *)(result + 8))
  {
    return std::__optional_destruct_base<WebCore::Color,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    result = WebCore::Color::Color();
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebProcessPool::ReportWebContentCPUTime>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2540;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WTF::Seconds const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::Seconds const&,unsigned long long>,0ul,1ul>((IPC::Encoder *)v4, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::Seconds const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::Seconds const&,unsigned long long>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WTF::Seconds,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, *(char **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1870;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebCore::FileChooser *WTF::RefCounted<WebCore::FileChooser>::deref(WebCore::FileChooser *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FileChooser::~FileChooser(result);
    return (WebCore::FileChooser *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebKit::WebOpenPanelResultListener *WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(WebKit::WebOpenPanelResultListener *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebOpenPanelResultListener::~WebOpenPanelResultListener(result, a2);
    return (WebKit::WebOpenPanelResultListener *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::Icon *WTF::RefCounted<WebCore::Icon>::deref(WebCore::Icon *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Icon::~Icon(result);
    return (WebCore::Icon *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EEF60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EEF60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v5;
  int v6;
  __int16 v7;

  if (a2 && *a2)
  {
    v6 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2);
    if ((v6 & 0xFF0000) != 0)
    {
      v3 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 16))(v3, &v6);
    }
    else
    {
      v7 = 0;
      v3 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v7);
    }
  }
  else
  {
    v5 = 0;
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EEF88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EEF88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EEFB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EEFB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || (v5 = *a2) == 0)
  {
LABEL_8:
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v10 + 16))(v10, 0, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    a3 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v6);
        a3 = 0;
        v16 = *a2;
        v17 = a2[1];
        v18 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v9 = 0;
        if (v18 && v17)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v17);
          v9 = *a2;
          a3 = a2[1];
        }
      }
      else
      {
        a3 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  a3 = v6;
  v9 = v5;
  if (v8 >= 3)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v9);
        v14 = *a2;
        a3 = a2[1];
        v15 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v15)
        {
          if (a3)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
        }
      }
    }
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EEFD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EEFD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::call(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  _OWORD v6[4];
  char v7;

  v2 = a2[3];
  v6[2] = a2[2];
  v6[3] = v2;
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v7 = 1;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 16))(v4, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

IPC::Encoder *IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2052;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v6, *(WebCore::Color **)a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v6, *(uint64_t **)(a2 + 8));
  IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v6, *(_QWORD *)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1964;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::shouldDeleteRange(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 48))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::smartInsertDeleteEnabled(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 112) + 696) >> 38) & 1;
}

uint64_t WebKit::WebEditorClient::isSelectTrailingWhitespaceEnabled(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 112) + 696) >> 3) & 1;
}

uint64_t WebKit::WebEditorClient::isContinuousSpellCheckingEnabled(WebKit::WebEditorClient *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((unsigned __int8 *)v1 + 280);
}

uint64_t WebKit::WebEditorClient::isGrammarCheckingEnabled(WebKit::WebEditorClient *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((unsigned __int8 *)v1 + 281);
}

uint64_t WebKit::WebEditorClient::spellCheckerDocumentTag(WebKit::WebEditorClient *this)
{
  return 0;
}

uint64_t WebKit::WebEditorClient::shouldBeginEditing(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 16))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::shouldEndEditing(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 24))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::shouldInsertNode(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 32))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::shouldInsertText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 40))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::shouldChangeSelectedRange(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 56))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::shouldApplyStyle(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 64))(*(_QWORD *)(v2 + 344));
}

unsigned int *WebKit::WebEditorClient::registerAttachmentIdentifier(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int **a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  unsigned int *v21;
  unsigned int *result;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  IPC::Encoder *v26;

  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *a5;
  v12 = *((_QWORD *)*a5 + 6);
  *a5 = 0;
  v23 = v12;
  v24 = v11;
  v25 = 0;
  v14 = *(_QWORD *)(v10 + 32);
  v13 = v10 + 32;
  v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1998;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v26 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a4);
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v16, (IPC::SharedBufferReference *)&v23);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v26, 0);
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v19, v20);
  }
  v21 = v25;
  v25 = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v21);
  result = v24;
  v24 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
  return result;
}

char *WebKit::WebEditorClient::registerAttachments(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *result;
  WTF *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2000;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v27 = (IPC::Encoder *)v9;
  v10 = *(unsigned int *)(a2 + 12);
  v11 = *(_QWORD *)(v9 + 544);
  v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 8;
  v14 = *(_QWORD *)(v9 + 552);
  if (v14 < v12 + 8)
  {
    v24 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v13);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v15 = result;
    memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v26 = *(void **)(v9 + 528);
    if (v26 != (void *)(v9 + 16))
      munmap(v26, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v15;
    *(_QWORD *)(v9 + 552) = v25;
    v11 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v15 = *(char **)(v9 + 528);
  }
  bzero(&v15[v11], v12 - v11);
  *(_QWORD *)(v9 + 544) = v13;
  v16 = (_QWORD *)(*(_QWORD *)(v9 + 528) + v12);
  *(_QWORD *)(v9 + 536) = v16 + 1;
  *v16 = v10;
  v17 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)a2;
    v19 = 24 * v17;
    do
    {
      IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode((IPC::Encoder *)v9, v18);
      v18 += 24;
      v19 -= 24;
    }
    while (v19);
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v27, 0);
  result = (char *)v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
    return (char *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::registerAttachmentIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t *v15[3];
  IPC::Encoder *v16;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v15[0] = (uint64_t *)a2;
  v15[1] = (uint64_t *)a3;
  v15[2] = (uint64_t *)a4;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = v6 + 32;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1999;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(v10, v15);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::registerAttachmentIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1997;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::cloneAttachmentData(WebKit::WebEditorClient *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(v7 + 32);
  v8 = v7 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1845;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

char *WebKit::WebEditorClient::didInsertAttachmentWithIdentifier(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  char *result;
  WTF *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = *(_QWORD *)(v9 + 32);
  v10 = v9 + 32;
  v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1899;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v27 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
  v14 = *(_QWORD *)(v13 + 544);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(v13 + 552);
  if (v16 < v14 + 1)
  {
    v24 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v15);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v17 = result;
    memcpy(result, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
    v26 = *(void **)(v13 + 528);
    if (v26 != (void *)(v13 + 16))
      munmap(v26, *(_QWORD *)(v13 + 552));
    *(_QWORD *)(v13 + 528) = v17;
    *(_QWORD *)(v13 + 552) = v25;
    v18 = *(_QWORD *)(v13 + 544);
  }
  else
  {
    v17 = *(char **)(v13 + 528);
    v18 = *(_QWORD *)(v13 + 544);
  }
  bzero(&v17[v18], v14 - v18);
  *(_QWORD *)(v13 + 544) = v15;
  v19 = (_BYTE *)(*(_QWORD *)(v13 + 528) + v14);
  *(_QWORD *)(v13 + 536) = v19 + 1;
  *v19 = a4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v27, 0);
  result = (char *)v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
    return (char *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::didRemoveAttachmentWithIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1911;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::serializedAttachmentDataForIdentifiers@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  void *v13;
  int v14;
  int v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  IPC::Decoder *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t **v25;
  uint64_t result;
  void *v27;
  _QWORD *v28;
  void *v29;
  uint64_t *v30;
  _DWORD *v31;
  _DWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  int v44;
  IPC::Encoder *v45;
  uint64_t v46;
  IPC::Decoder *v47;
  _QWORD v48[3];

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(v7 + 32);
  v8 = v7 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  if (!v12)
  {
    LODWORD(v10) = 0;
    LODWORD(a2) = 0;
    LOBYTE(v35) = 3;
    v14 = 1;
    v39 = 1;
LABEL_22:
    v25 = (uint64_t **)&v40;
    goto LABEL_24;
  }
  v46 = 0;
  IPC::Connection::createSyncMessageEncoder(3686, v10, &v46, (uint64_t *)&v45);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v45, a2);
  IPC::Connection::sendSyncMessage((uint64_t)v12, v46, (uint64_t *)&v45, 0, (uint64_t)&v43, INFINITY);
  if (!v44)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v43, v13, (uint64_t)&v35);
    if ((_BYTE)v37)
    {
      v12 = v35;
      LODWORD(v10) = (_DWORD)v36;
      LODWORD(a2) = HIDWORD(v36);
      v35 = 0;
      v36 = 0;
      v42 = 1;
      WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v11);
      if (v44)
        goto LABEL_39;
      v17 = v43;
      v43 = 0;
      v40 = 0;
      v41 = 0;
      v47 = 0;
      v48[0] = 0;
      v35 = v17;
      v36 = v12;
      v48[1] = 0;
      v37 = v10;
      v38 = a2;
      v39 = 0;
      WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v16);
      v19 = v47;
      v47 = 0;
      if (v19)
      {
        IPC::Decoder::~Decoder(v19);
        WTF::fastFree(v20, v21);
      }
      WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v18);
      v14 = 0;
    }
    else
    {
      LOBYTE(v35) = 13;
      v14 = 1;
      v39 = 1;
    }
    v15 = v44;
    if (v44 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v44 != 1)
  {
LABEL_39:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_40;
  }
  LOBYTE(v35) = (_BYTE)v43;
  v14 = 1;
  v39 = 1;
  v15 = 1;
LABEL_17:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34EF848[v15])(&v47, &v43);
LABEL_18:
  v22 = v45;
  v45 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v11);
    WTF::fastFree(v23, v24);
  }
  v40 = 0;
  v41 = 0;
  if (v14)
  {
    v12 = 0;
    LODWORD(v10) = 0;
    LODWORD(a2) = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v25 = &v36;
LABEL_24:
  *v25 = 0;
  v25[1] = 0;
  v47 = (IPC::Decoder *)v12;
  v48[0] = __PAIR64__(a2, v10);
  result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = a2;
  if (!(_DWORD)a2)
  {
    result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v27);
    return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34EF720[v14])(result, &v35);
  }
  if (a2 >= 0xAAAAAAB)
  {
LABEL_40:
    __break(0xC471u);
    return result;
  }
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * a2));
  *(_DWORD *)(a3 + 8) = 24 * (int)a2 / 0x18u;
  *(_QWORD *)a3 = v28;
  v30 = &v12[3 * a2];
  do
  {
    v31 = (_DWORD *)*v12;
    if (*v12)
      *v31 += 2;
    *v28 = v31;
    v32 = (_DWORD *)v12[1];
    if (v32)
      *v32 += 2;
    v28[1] = v32;
    v33 = (unsigned int *)v12[2];
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v28[2] = v33;
    v28 += 3;
    v12 += 3;
  }
  while (v12 != v30);
  v14 = v39;
  result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v29);
  if (v14 != -1)
    return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34EF720[v14])(result, &v35);
  return result;
}

unsigned int *WebKit::WebEditorClient::didApplyStyle(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)(v2 - 16));
  else
    return WebKit::WebPage::sendEditorStateUpdate(0);
}

uint64_t WebKit::WebEditorClient::shouldMoveRangeAfterDelete()
{
  return 1;
}

WTF::StringImpl *WebKit::WebEditorClient::didBeginEditing(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if ((_MergedGlobals_103 & 1) == 0)
  {
    WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE72EE8 = (uint64_t)&WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_103 = 1;
  }
  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = v3 + 344;
  }
  else
  {
    v4 = 344;
  }
  v5 = *(_QWORD *)v4;
  if (qword_1ECE72EE8)
    WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl += 2;
  v8 = (WTF::StringImpl *)qword_1ECE72EE8;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

unsigned int *WebKit::WebEditorClient::respondToChangedContents(WebKit::WebEditorClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebPage *v10;
  WTF::StringImpl *v12;

  if ((byte_1ECE72EE1 & 1) == 0)
  {
    WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE72EF0 = (uint64_t)&WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl;
    byte_1ECE72EE1 = 1;
  }
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    v5 = v4 + 344;
  }
  else
  {
    v5 = 344;
  }
  v6 = *(_QWORD *)v5;
  if (qword_1ECE72EF0)
    WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl += 2;
  v12 = (WTF::StringImpl *)qword_1ECE72EF0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebKit::WebPage *)(v9 - 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return WebKit::WebPage::sendEditorStateUpdate(v10);
}

uint64_t WebKit::WebEditorClient::respondToChangedSelection(WebKit::WebEditorClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebPage *v13;
  WTF::StringImpl *v14;

  if ((byte_1ECE72EE2 & 1) == 0)
  {
    WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl += 2;
    qword_1ECE72EF8 = (uint64_t)&WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl;
    byte_1ECE72EE2 = 1;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    v7 = v6 + 344;
  }
  else
  {
    v7 = 344;
  }
  v8 = *(_QWORD *)v7;
  if (qword_1ECE72EF8)
    WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl += 2;
  v14 = (WTF::StringImpl *)qword_1ECE72EF8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  result = (uint64_t)v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      result = WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a2)
  {
    v11 = *((_QWORD *)this + 4);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v13 = (WebKit::WebPage *)(v12 - 16);
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    return WebKit::WebPage::didChangeSelection(v13, a2);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::didEndUserTriggeredSelectionChanges(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::didEndUserTriggeredSelectionChanges((WebCore::Page **)(v2 - 16));
  else
    return WebKit::WebPage::didEndUserTriggeredSelectionChanges(0);
}

unsigned int *WebKit::WebEditorClient::didUpdateComposition(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)(v2 - 16));
  else
    return WebKit::WebPage::sendEditorStateUpdate(0);
}

unsigned int *WebKit::WebEditorClient::discardedComposition(WebKit::WebEditorClient *this, const WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebPage *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = (WebKit::WebPage *)(v3 - 16);
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return WebKit::WebPage::discardedComposition(v4, a2);
}

unsigned int *WebKit::WebEditorClient::canceledComposition(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::canceledComposition((WebKit::WebPage *)(v2 - 16));
  else
    return WebKit::WebPage::canceledComposition(0);
}

WTF::StringImpl *WebKit::WebEditorClient::didEndEditing(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if ((byte_1ECE72EE3 & 1) == 0)
  {
    WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE72F00 = (uint64_t)&WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl;
    byte_1ECE72EE3 = 1;
  }
  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = v3 + 344;
  }
  else
  {
    v4 = 344;
  }
  v5 = *(_QWORD *)v4;
  if (qword_1ECE72F00)
    WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl += 2;
  v8 = (WTF::StringImpl *)qword_1ECE72F00;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebKit::WebEditorClient::didWriteSelectionToPasteboard(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 120))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::willWriteSelectionToPasteboard(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 104))(*(_QWORD *)(v2 + 344));
}

uint64_t WebKit::WebEditorClient::getClientPasteboardData(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v6;
  unint64_t i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  WTF *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t v36;
  unsigned int *v37;
  WTF::StringImpl *v39;
  unsigned int *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v6 = a3[3];
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = (_QWORD *)(*(_QWORD *)a3 + 16 * i);
      v9 = HIDWORD(v44);
      if (HIDWORD(v44) == (_DWORD)v44)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v43, (unint64_t)v8);
        v6 = a3[3];
      }
      else
      {
        v10 = v43;
        v11 = (_DWORD *)*v8;
        if (*v8)
          *v11 += 2;
        *(_QWORD *)(v10 + 8 * v9) = v11;
        HIDWORD(v44) = v9 + 1;
      }
      if (i >= v6)
      {
        __break(0xC471u);
        goto LABEL_50;
      }
      v12 = (unsigned int **)(*(_QWORD *)a3 + 16 * i + 8);
      v13 = HIDWORD(v42);
      if (HIDWORD(v42) == (_DWORD)v42)
      {
        v14 = (unsigned int **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)v12);
        v13 = HIDWORD(v42);
        v15 = v41;
        v16 = *v14;
        if (!*v14)
          goto LABEL_18;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      else
      {
        v15 = v41;
        v16 = *v12;
        if (!*v12)
        {
LABEL_18:
          v19 = v13;
          goto LABEL_15;
        }
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 + 1, v16));
      }
      v19 = HIDWORD(v42);
LABEL_15:
      *((_QWORD *)v15 + v13) = v16;
      HIDWORD(v42) = v19 + 1;
      v6 = a3[3];
    }
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v20)
    v21 = v20 - 16;
  else
    v21 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, WTF **))(**(_QWORD **)(v21 + 344) + 112))(*(_QWORD *)(v21 + 344), v21, a2, &v43, &v41);
  WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, 0);
  if (HIDWORD(v44))
  {
    v23 = 0;
    while (v23 < HIDWORD(v42))
    {
      v24 = v41;
      v25 = *(WTF::StringImpl **)(v43 + 8 * v23);
      if (v25)
        *(_DWORD *)v25 += 2;
      v39 = v25;
      v26 = (unsigned int *)*((_QWORD *)v24 + v23);
      if (v26)
      {
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
      v40 = v26;
      v28 = a3[3];
      if ((_DWORD)v28 == a3[2])
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)a3, (unint64_t)&v39);
      }
      else
      {
        v29 = v28 + 1;
        v30 = (WTF::StringImpl **)(*(_QWORD *)a3 + 16 * v28);
        v31 = v39;
        v39 = 0;
        *v30 = v31;
        v32 = v40;
        v40 = 0;
        v30[1] = (WTF::StringImpl *)v32;
        a3[3] = v29;
      }
      v33 = v40;
      v40 = 0;
      if (v33)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v22);
      v34 = v39;
      v39 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)v34 -= 2;
      }
      if (++v23 >= HIDWORD(v44))
        goto LABEL_39;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x19761DC9CLL);
  }
LABEL_39:
  v35 = v41;
  if (HIDWORD(v42))
  {
    v36 = 8 * HIDWORD(v42);
    do
    {
      v37 = *(unsigned int **)v35;
      *(_QWORD *)v35 = 0;
      if (v37)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v37, v22);
      v35 = (WTF *)((char *)v35 + 8);
      v36 -= 8;
    }
    while (v36);
    v35 = v41;
  }
  if (v35)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree(v35, v22);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v22);
}

uint64_t WebKit::WebEditorClient::performTwoStepDrop(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 344) + 128))(*(_QWORD *)(v2 + 344));
}

WTF *WebKit::WebEditorClient::registerUndoStep(WTF *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  IPC::Encoder *v23[3];
  WTF::StringImpl *v24;

  v2 = *(_QWORD *)(*((_QWORD *)result + 4) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (!*(_BYTE *)(v3 + 185))
  {
    v5 = result;
    ++a2[2];
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    v7 = (WTF::StringImpl *)WebKit::generateUndoStep(void)::uniqueEntryID++;
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = a2;
    *((_QWORD *)v6 + 2) = v7;
    v22 = v6;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v8 = v9 - 16;
      else
        v8 = 0;
    }
    v24 = v7;
    WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>((uint64_t *)(v8 + 336), (uint64_t *)&v24, (uint64_t *)&v22, (uint64_t)v23);
    v10 = *((_QWORD *)v5 + 4);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = v11 - 16;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)a2 + 40))(&v24, a2);
    v14 = *(_QWORD *)(v12 + 32);
    v13 = v12 + 32;
    v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 2001;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v23[0] = (IPC::Encoder *)v16;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v7;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v24);
    (*(void (**)(uint64_t, IPC::Encoder **, uint64_t))(*(_QWORD *)v13 + 32))(v13, v23, 1);
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v17);
      WTF::fastFree(v19, v20);
    }
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = v22;
    v22 = 0;
    if (result)
      return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, v17);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::canCopyCut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t WebKit::WebEditorClient::canPaste(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL WebKit::WebEditorClient::canUndo(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  _BYTE v12[16];
  int v13;
  char v14;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v14 = 0;
  v5 = *(_QWORD *)(v3 + 32);
  v4 = v3 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (!v7)
  {
    v9 = 0;
    v12[0] = 3;
    v8 = 1;
    v13 = 1;
    goto LABEL_9;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>((uint64_t)v12, v7, &v14, v6);
  v8 = v13;
  v9 = v12[8];
  if (v13 != -1)
LABEL_9:
    ((void (*)(char *, _BYTE *))off_1E34EF730[v8])(&v14, v12);
  if (v8)
    v10 = 1;
  else
    v10 = v9 == 0;
  return !v10;
}

BOOL WebKit::WebEditorClient::canRedo(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  _BYTE v12[16];
  int v13;
  char v14;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
  v14 = 1;
  v6 = *(_QWORD *)(v3 + 32);
  v5 = v3 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!v8)
  {
    v9 = 0;
    v12[0] = 3;
    v13 = 1;
    goto LABEL_9;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>((uint64_t)v12, v8, &v14, v7);
  v4 = v13;
  v9 = v12[8];
  if (v13 != -1)
LABEL_9:
    ((void (*)(char *, _BYTE *))off_1E34EF730[v4])(&v14, v12);
  if (v4)
    v10 = 1;
  else
    v10 = v9 == 0;
  return !v10;
}

IPC::Encoder *WebKit::WebEditorClient::undo(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  IPC::Encoder *result;
  int v9;
  char v10;
  _BYTE v11[16];
  int v12;
  char v13;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v10 = 0;
  v5 = *(_QWORD *)(v3 + 32);
  v4 = v3 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (!v7)
  {
    v11[0] = 3;
    v9 = 1;
    v12 = 1;
    return (IPC::Encoder *)((uint64_t (*)(char *, _BYTE *))off_1E34EF740[v9])(&v13, v11);
  }
  result = IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>((uint64_t)v11, v7, &v10, v6);
  v9 = v12;
  if (v12 != -1)
    return (IPC::Encoder *)((uint64_t (*)(char *, _BYTE *))off_1E34EF740[v9])(&v13, v11);
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::redo(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *result;
  char v10;
  _BYTE v11[16];
  int v12;
  char v13;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
  v10 = 1;
  v6 = *(_QWORD *)(v3 + 32);
  v5 = v3 + 32;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!v8)
  {
    v11[0] = 3;
    v12 = 1;
    return (IPC::Encoder *)((uint64_t (*)(char *, _BYTE *))off_1E34EF740[v4])(&v13, v11);
  }
  result = IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>((uint64_t)v11, v8, &v10, v7);
  v4 = v12;
  if (v12 != -1)
    return (IPC::Encoder *)((uint64_t (*)(char *, _BYTE *))off_1E34EF740[v4])(&v13, v11);
  return result;
}

uint64_t WebKit::WebEditorClient::requestDOMPasteAccess(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = (CFTypeRef *)(v6 - 16);
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  return WebKit::WebPage::requestDOMPasteAccess(v7, a2, a3, a4, a5);
}

unsigned int *WebKit::WebEditorClient::textFieldDidBeginEditing(unsigned int *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = (uint64_t)this;
    *((_DWORD *)a2 + 6) += 2;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
    }
    else
    {
      v5 = 0;
    }
    WebKit::WebFrame::fromCoreFrame(v5, &v13);
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v10 = v9 - 16;
      else
        v10 = 0;
      v11 = v10 + 352;
    }
    else
    {
      v11 = 352;
    }
    v12 = v13;
    (*(void (**)(_QWORD))(**(_QWORD **)v11 + 24))(*(_QWORD *)v11);
    if (v12)
      CFRelease(*(CFTypeRef *)(v12 + 8));
    this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return (unsigned int *)WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  return this;
}

void WebKit::WebEditorClient::textFieldDidEndEditing(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    *((_DWORD *)a2 + 6) += 2;
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v9);
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
      v7 = v6 + 352;
    }
    else
    {
      v7 = 352;
    }
    v8 = v9;
    (*(void (**)(_QWORD))(**(_QWORD **)v7 + 32))(*(_QWORD *)v7);
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

void WebKit::WebEditorClient::textDidChangeInTextField(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  WebCore::UserTypingGestureIndicator *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    *((_DWORD *)a2 + 6) += 2;
    v4 = (WebCore::UserTypingGestureIndicator *)WebCore::UserTypingGestureIndicator::processingUserTypingGesture(this);
    if ((_DWORD)v4)
      WebCore::UserTypingGestureIndicator::focusedElementAtGestureStart(v4);
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v10);
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 16;
      else
        v7 = 0;
      v8 = v7 + 352;
    }
    else
    {
      v8 = 352;
    }
    v9 = v10;
    (*(void (**)(_QWORD))(**(_QWORD **)v8 + 40))(*(_QWORD *)v8);
    if (v9)
      CFRelease(*(CFTypeRef *)(v9 + 8));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

void WebKit::WebEditorClient::textDidChangeInTextArea(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
  {
    *((_DWORD *)a2 + 6) += 2;
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v9);
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
      v7 = v6 + 352;
    }
    else
    {
      v7 = 352;
    }
    v8 = v9;
    (*(void (**)(_QWORD))(**(_QWORD **)v7 + 48))(*(_QWORD *)v7);
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

uint64_t WebKit::WebEditorClient::doTextFieldCommandFromEvent(WebKit::WebEditorClient *this, WebCore::Element *a2, WebCore::KeyboardEvent *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    return 0;
  }
  *((_DWORD *)a2 + 6) += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)a3 + 14);
  if (v5)
    *(_DWORD *)v5 += 2;
  v7 = (MEMORY[0x19AEABBCC](v5, "Up", 2) & 1) != 0
    || (MEMORY[0x19AEABBCC](v5, "Down", 4) & 1) != 0
    || (MEMORY[0x19AEABBCC](v5, "U+001B", 6) & 1) != 0
    || MEMORY[0x19AEABBCC](v5, "U+0009", 6)
    || MEMORY[0x19AEABBCC](v5, "Enter", 5);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (v7)
  {
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v15);
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = v11 - 16;
      else
        v12 = 0;
      v13 = v12 + 352;
    }
    else
    {
      v13 = 352;
    }
    v14 = v15;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v13 + 56))(*(_QWORD *)v13);
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    v8 = 0;
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return v8;
}

void WebKit::WebEditorClient::textWillBeDeletedInTextField(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    *((_DWORD *)a2 + 6) += 2;
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v9);
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
      v7 = v6 + 352;
    }
    else
    {
      v7 = 352;
    }
    v8 = v9;
    (*(void (**)(_QWORD))(**(_QWORD **)v7 + 56))(*(_QWORD *)v7);
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

BOOL WebKit::WebEditorClient::shouldEraseMarkersAfterChangeSelection(uint64_t a1, int a2)
{
  return (a2 - 3) < 0xFFFFFFFE;
}

BOOL `non-virtual thunk to'WebKit::WebEditorClient::shouldEraseMarkersAfterChangeSelection(uint64_t a1, int a2)
{
  return (a2 - 3) < 0xFFFFFFFE;
}

IPC::Encoder *WebKit::WebEditorClient::ignoreWordInSpellDocument(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1957;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebEditorClient::ignoreWordInSpellDocument(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  return WebKit::WebEditorClient::ignoreWordInSpellDocument((WebKit::WebEditorClient *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebEditorClient::learnWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1961;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebEditorClient::learnWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  return WebKit::WebEditorClient::learnWord((WebKit::WebEditorClient *)((char *)this - 24), a2);
}

uint64_t WebKit::WebEditorClient::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  _QWORD v32[2];
  uint64_t *v33;
  int v34;
  IPC::Encoder *v35;
  uint64_t v36;
  char v37;

  v32[0] = a2;
  v32[1] = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WTF::StringView::toStringWithoutCopying((uint64_t)v32, &v28);
  v11 = *(_QWORD *)(v9 + 32);
  v10 = v9 + 32;
  v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  if (v13)
  {
    v15 = v13;
    v36 = 0;
    IPC::Connection::createSyncMessageEncoder(3657, v12, &v36, (uint64_t *)&v35);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v35, (uint64_t *)&v28);
    IPC::Connection::sendSyncMessage(v15, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
    v16 = v34;
    if (v34)
    {
      if (v34 == 1)
      {
        LOBYTE(v29) = (_BYTE)v33;
LABEL_13:
        v31 = v16;
        v19 = v16;
        goto LABEL_14;
      }
    }
    else
    {
      v17 = IPC::Decoder::decode<std::tuple<int,int>>(v33);
      if (!(_BYTE)v14)
      {
        LOBYTE(v29) = 13;
        v16 = 1;
        v31 = 1;
        v19 = v34;
        if (v34 == -1)
        {
LABEL_15:
          v20 = v35;
          v35 = 0;
          if (v20)
          {
            IPC::Encoder::~Encoder(v20, v14);
            WTF::fastFree(v21, v22);
          }
          goto LABEL_17;
        }
LABEL_14:
        ((void (*)(char *, uint64_t **))off_1E34EF848[v19])(&v37, &v33);
        goto LABEL_15;
      }
      if (!v34)
      {
        v18 = v33;
        v33 = 0;
        v29 = v18;
        v30 = v17;
        goto LABEL_13;
      }
    }
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v29) = 3;
  v16 = 1;
  v31 = 1;
LABEL_17:
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v23 -= 2;
  }
  v25 = v30;
  v24 = HIDWORD(v30);
  if (v16)
  {
    v25 = -1;
    v24 = 0;
  }
  *a4 = v25;
  *a5 = v24;
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34EF750[v16])(&v33, &v29);
}

uint64_t `non-virtual thunk to'WebKit::WebEditorClient::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  return WebKit::WebEditorClient::checkSpellingOfString(a1 - 24, a2, a3, a4, a5);
}

uint64_t WebKit::WebEditorClient::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  char *v26;
  unint64_t v27;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  void *v35;
  IPC::Decoder *v36;
  WTF *v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  WTF *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  IPC::Decoder *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  _QWORD v63[2];
  _QWORD v64[2];
  unsigned int v65;
  int v66;
  char v67;
  uint64_t *v68;
  int v69;
  IPC::Encoder *v70;
  uint64_t v71;
  IPC::Decoder *v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int v76;

  v63[0] = a2;
  v63[1] = a3;
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = v13 - 16;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  WTF::StringView::toStringWithoutCopying((uint64_t)v63, &v57);
  v16 = *(_QWORD *)(v14 + 32);
  v15 = v14 + 32;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
  if (!v18)
  {
    LOBYTE(v58) = 3;
    v21 = 1;
    v62 = 1;
    goto LABEL_39;
  }
  v20 = (uint64_t *)v18;
  v71 = 0;
  IPC::Connection::createSyncMessageEncoder(3656, v17, &v71, (uint64_t *)&v70);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v70, (uint64_t *)&v57);
  IPC::Connection::sendSyncMessage((uint64_t)v20, v71, (uint64_t *)&v70, 0, (uint64_t)&v68, INFINITY);
  if (!v69)
  {
    v20 = v68;
    IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v68, (uint64_t)&v72);
    if ((_BYTE)v74)
    {
      v23 = v20[1];
      v19 = (char *)*v20;
      v24 = ((v20[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v20;
      if (v23 < v24 || v23 - v24 <= 3)
      {
        v50 = 0;
        v51 = 0;
        *v20 = 0;
        v20[1] = 0;
        v52 = v20[3];
        if (!v52)
          goto LABEL_54;
        goto LABEL_61;
      }
      v26 = &v19[v24];
      v20[2] = (uint64_t)(v26 + 4);
      if (!v19)
      {
        v50 = v23;
        v51 = 0;
        goto LABEL_54;
      }
      v27 = ((unint64_t)(v26 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v19;
      if (v23 >= v27 && v23 - v27 > 3)
      {
        v29 = 0;
        v6 = *(_DWORD *)v26;
        LODWORD(v17) = *(_DWORD *)((unint64_t)(v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
        v20[2] = ((unint64_t)(v26 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v58 = v72;
        v8 = v73;
        v7 = HIDWORD(v73);
        v72 = 0;
        v73 = 0;
        v59 = __PAIR64__(v7, v8);
        v30 = 1;
        v60 = __PAIR64__(v17, v6);
        goto LABEL_23;
      }
      *v20 = 0;
      v20[1] = 0;
      v54 = v20[3];
      if (v54)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
          v19 = (char *)*v20;
          v55 = v20[1];
          v56 = v20[3];
          *v20 = 0;
          v20[1] = 0;
          if (v56)
          {
            if (v55)
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v56 + 16))(v56, v19);
          }
        }
      }
      goto LABEL_58;
    }
    v30 = 0;
    LOBYTE(v58) = 0;
    LOBYTE(v61) = 0;
    goto LABEL_28;
  }
  if (v69 == 1)
  {
    LOBYTE(v58) = (_BYTE)v68;
    v21 = 1;
    v62 = 1;
    v22 = 1;
  }
  else
  {
    do
    {
      v52 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        v51 = *v20;
        v50 = v20[1];
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
LABEL_54:
      *v20 = 0;
      v20[1] = 0;
      v53 = v20[3];
      if (v53 && v50)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
LABEL_58:
      v30 = 0;
      LOBYTE(v58) = 0;
      v29 = 1;
LABEL_23:
      LOBYTE(v61) = v30;
      if ((_BYTE)v74)
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v19);
      if (v29)
      {
LABEL_28:
        v19 = (char *)*v20;
        v31 = v20[1];
        *v20 = 0;
        v20[1] = 0;
        v32 = v20[3];
        if (v32 && v31)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 16))(v32, v19);
      }
      if (!v30)
      {
        LOBYTE(v58) = 13;
        v21 = 1;
        v62 = 1;
        goto LABEL_35;
      }
      v20 = (uint64_t *)v58;
      v58 = 0;
      v59 = 0;
      v65 = v6;
      v66 = v17;
      v67 = 1;
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v19);
    }
    while (v69);
    v34 = v68;
    v68 = 0;
    v64[0] = 0;
    v64[1] = 0;
    v75 = v6;
    v76 = v17;
    v72 = 0;
    v73 = 0;
    v58 = (IPC::Decoder *)v34;
    v59 = (unint64_t)v20;
    v74 = 0;
    v60 = __PAIR64__(v7, v8);
    v61 = __PAIR64__(v17, v6);
    v62 = 0;
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v33);
    v36 = v72;
    v72 = 0;
    if (v36)
    {
      IPC::Decoder::~Decoder(v36);
      WTF::fastFree(v37, v38);
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64, v35);
    v21 = 0;
LABEL_35:
    v22 = v69;
    if (v69 == -1)
      goto LABEL_37;
  }
  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34EF848[v22])(&v72, &v68);
LABEL_37:
  v39 = v70;
  v70 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v19);
    WTF::fastFree(v40, v41);
  }
LABEL_39:
  v42 = v57;
  v57 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
      if (v21)
        goto LABEL_43;
      goto LABEL_45;
    }
    *(_DWORD *)v42 -= 2;
  }
  if (v21)
  {
LABEL_43:
    v43 = 0;
    v44 = -1;
    goto LABEL_50;
  }
LABEL_45:
  v45 = v59;
  v46 = v60;
  v59 = 0;
  v60 = 0;
  v44 = v61;
  v43 = HIDWORD(v61);
  v74 = v61;
  v47 = *(_DWORD *)(a4 + 12);
  if (v47)
    WTF::VectorDestructor<true,WebCore::GrammarDetail>::destruct(*(_QWORD *)a4, (WTF::StringImpl *)(*(_QWORD *)a4 + 40 * v47));
  v48 = *(WTF **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    WTF::fastFree(v48, v19);
  }
  v72 = 0;
  v73 = 0;
  *(_QWORD *)a4 = v45;
  *(_QWORD *)(a4 + 8) = v46;
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v19);
LABEL_50:
  *a5 = v44;
  *a6 = v43;
  return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1E34EF760[v21])(&v72, &v58);
}

uint64_t `non-virtual thunk to'WebKit::WebEditorClient::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  return WebKit::WebEditorClient::checkGrammarOfString(a1 - 24, a2, a3, a4, a5, a6);
}

uint64_t WebKit::WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WebKit *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::VisibleSelection *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t *v24;
  void *v25;
  IPC::Decoder *v26;
  IPC::Decoder *v27;
  IPC::Decoder *v28;
  void *v29;
  uint64_t *v30;
  IPC::Decoder *v31;
  IPC::Decoder *v32;
  IPC::Decoder *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t result;
  WTF::StringImpl *v63;
  uint64_t *v64;
  IPC::Decoder *v65;
  IPC::Decoder *v66;
  int v67;
  _QWORD v68[2];
  IPC::Decoder *v69;
  IPC::Decoder *v70;
  char v71;
  uint64_t *v72;
  int v73;
  IPC::Encoder *v74;
  uint64_t v75;
  IPC::Decoder *v76;
  unint64_t v77;
  uint64_t v78;

  v68[0] = a2;
  v68[1] = a3;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = v10 - 16;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WTF::StringView::toStringWithoutCopying((uint64_t)v68, &v63);
  v13 = WebKit::insertionPointFromCurrentSelection(a5, v12);
  v15 = *(_QWORD *)(v11 + 32);
  v14 = v11 + 32;
  v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  if (!v17)
  {
    LOBYTE(v64) = 3;
    v22 = 1;
    v67 = 1;
    goto LABEL_24;
  }
  v19 = v17;
  v75 = 0;
  IPC::Connection::createSyncMessageEncoder(3658, v16, &v75, (uint64_t *)&v74);
  v20 = v74;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v74, (uint64_t *)&v63);
  *IPC::Encoder::grow(v20, 1uLL, 1) = a4;
  *(_DWORD *)IPC::Encoder::grow(v20, 4uLL, 4) = v13;
  IPC::Connection::sendSyncMessage(v19, v75, (uint64_t *)&v74, 0, (uint64_t)&v72, INFINITY);
  if (!v73)
  {
    v24 = v72;
    IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v72, v21, (uint64_t)&v64);
    if ((_BYTE)v66)
    {
      v26 = (IPC::Decoder *)v64;
      v64 = 0;
      v76 = v26;
      v27 = v65;
      v65 = 0;
      WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v25);
      LOBYTE(v78) = 1;
      v28 = v76;
      v76 = 0;
      v69 = v28;
      v77 = 0;
      v70 = v27;
      v71 = 1;
      WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v29);
      if (v71)
      {
        if (v73)
          goto LABEL_51;
        v30 = v72;
        v72 = 0;
        v31 = v69;
        v69 = 0;
        v76 = 0;
        v77 = 0;
        v64 = v30;
        v65 = v31;
        v78 = 0;
        v32 = v70;
        v70 = 0;
        v66 = v32;
        v67 = 0;
        WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v18);
        v33 = v76;
        v76 = 0;
        if (v33)
        {
          IPC::Decoder::~Decoder(v33);
          WTF::fastFree(v34, v35);
        }
        if (v71)
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v18);
        v22 = 0;
LABEL_20:
        v23 = v73;
        if (v73 == -1)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else
    {
      v18 = (void *)*v24;
      v36 = v24[1];
      *v24 = 0;
      v24[1] = 0;
      v37 = v24[3];
      if (v37 && v36)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v37 + 16))(v37, v18);
    }
    LOBYTE(v64) = 13;
    v22 = 1;
    v67 = 1;
    goto LABEL_20;
  }
  if (v73 != 1)
  {
LABEL_51:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_52;
  }
  LOBYTE(v64) = (_BYTE)v72;
  v22 = 1;
  v67 = 1;
  v23 = 1;
LABEL_21:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34EF848[v23])(&v76, &v72);
LABEL_22:
  v38 = v74;
  v74 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v18);
    WTF::fastFree(v39, v40);
  }
LABEL_24:
  v41 = v63;
  v63 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v41 -= 2;
  }
  v69 = 0;
  v70 = 0;
  if (v22)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v42 = (unsigned int *)v65;
    v43 = v66;
    v44 = HIDWORD(v66);
    v65 = 0;
    v66 = 0;
  }
  v76 = (IPC::Decoder *)v42;
  v77 = __PAIR64__(v44, v43);
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v18);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 12) = v44;
  if (!v44)
  {
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v45);
    return ((uint64_t (*)(IPC::Decoder **, uint64_t **))off_1E34EF770[v22])(&v76, &v64);
  }
  if (v44 >= 0x5555556)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x19761F564);
  }
  v47 = WTF::fastMalloc((WTF *)(48 * v44));
  *(_DWORD *)(a6 + 8) = 48 * v44 / 0x30;
  *(_QWORD *)a6 = v47;
  v48 = (__int128 *)&v42[12 * v44];
  do
  {
    v49 = *(_OWORD *)v42;
    *(_QWORD *)(v47 + 16) = *((_QWORD *)v42 + 2);
    *(_OWORD *)v47 = v49;
    v50 = v42[9];
    *(_QWORD *)(v47 + 24) = 0;
    *(_QWORD *)(v47 + 32) = 0;
    *(_DWORD *)(v47 + 36) = v50;
    if ((_DWORD)v50)
    {
      if (v50 >= 0x6666667)
        goto LABEL_52;
      v51 = 40 * v50;
      v52 = WTF::fastMalloc((WTF *)(40 * v50));
      *(_DWORD *)(v47 + 32) = (v51 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)(v47 + 24) = v52;
      v53 = v42[9];
      if (v53)
      {
        v54 = *((_QWORD *)v42 + 3);
        v55 = v54 + 40 * v53;
        v56 = v52 + 16;
        v57 = v54 + 16;
        do
        {
          *(_OWORD *)(v56 - 16) = *(_OWORD *)(v57 - 16);
          v58 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v56, v57);
          v59 = *(_DWORD **)(v57 + 16);
          if (v59)
            *v59 += 2;
          v60 = v57 - 16;
          *(_QWORD *)(v58 + 16) = v59;
          v56 = v58 + 40;
          v57 += 40;
        }
        while (v60 + 40 != v55);
      }
    }
    v61 = (_DWORD *)*((_QWORD *)v42 + 5);
    if (v61)
      *v61 += 2;
    *(_QWORD *)(v47 + 40) = v61;
    v47 += 48;
    v42 += 12;
  }
  while (v42 != (unsigned int *)v48);
  v22 = v67;
  result = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v46);
  if (v22 != -1)
    return ((uint64_t (*)(IPC::Decoder **, uint64_t **))off_1E34EF770[v22])(&v76, &v64);
  return result;
}

uint64_t WebKit::insertionPointFromCurrentSelection(WebKit *this, const WebCore::VisibleSelection *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Node *v5;
  _BYTE v6[40];
  uint64_t v7;

  WebCore::VisiblePosition::VisiblePosition();
  WebCore::startOfParagraph();
  WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>((uint64_t)v6);
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (v6[32])
    v2 = WebCore::characterCount();
  else
    v2 = 0;
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v2;
}

uint64_t `non-virtual thunk to'WebKit::WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WebKit *a5@<X4>, uint64_t a6@<X8>)
{
  return WebKit::WebEditorClient::checkTextOfParagraph(a1 - 24, a2, a3, a4, a5, a6);
}

IPC::Encoder *WebKit::WebEditorClient::updateSpellingUIWithGrammarString(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(v7 + 32);
  v8 = v7 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2085;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode((IPC::Encoder *)v11, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::updateSpellingUIWithMisspelledWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2086;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::spellingUIIsShowing(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  void *v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  BOOL v19;
  int v21;
  int v22;
  int v23;
  WebKit *v24;
  uint64_t *v25;
  char v26;
  int v27;
  uint64_t *v28;
  int v29;
  IPC::Encoder *v30;
  uint64_t v31;
  char v32;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(v3 + 32);
  v4 = v3 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (v7)
  {
    v8 = v7;
    v31 = 0;
    IPC::Connection::createSyncMessageEncoder(3688, v6, &v31, (uint64_t *)&v30);
    IPC::Connection::sendSyncMessage(v8, v31, (uint64_t *)&v30, 0, (uint64_t)&v28, INFINITY);
    v9 = v29;
    if (v29)
    {
      if (v29 == 1)
      {
        v10 = 0;
        LOBYTE(v25) = (_BYTE)v28;
LABEL_15:
        v27 = v9;
        v14 = v9;
        goto LABEL_16;
      }
    }
    else
    {
      v12 = IPC::Decoder::decode<std::tuple<BOOL>>(v28);
      if (v12 < 0x100u)
      {
        v10 = 0;
        v11 = 0;
        LOBYTE(v25) = 13;
        v9 = 1;
        v27 = 1;
        v14 = v29;
        if (v29 == -1)
        {
LABEL_17:
          v16 = v30;
          v30 = 0;
          if (v16)
          {
            IPC::Encoder::~Encoder(v16, v13);
            WTF::fastFree(v17, v18);
          }
          goto LABEL_19;
        }
LABEL_16:
        ((void (*)(char *, uint64_t **))off_1E34EF848[v14])(&v32, &v28);
        v11 = v10;
        goto LABEL_17;
      }
      if (!v29)
      {
        v10 = v12;
        v15 = v28;
        v28 = 0;
        v25 = v15;
        v26 = v12;
        goto LABEL_15;
      }
    }
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebEditorClient::getGuessesForWord(v21, v22, v23, v24);
  }
  v11 = 0;
  LOBYTE(v25) = 3;
  v9 = 1;
  v27 = 1;
LABEL_19:
  ((void (*)(uint64_t **, uint64_t **))off_1E34EF780[v9])(&v28, &v25);
  if (v9)
    v19 = 1;
  else
    v19 = v11 == 0;
  return !v19;
}

uint64_t WebKit::WebEditorClient::getGuessesForWord(uint64_t a1, const WebCore::VisibleSelection *a2, uint64_t *a3, WebKit *this, WTF::StringImpl **a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  IPC::Decoder *v23;
  WTF *v24;
  void *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t *v32;
  WTF::StringImpl **v33;
  unint64_t v34;
  int v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  int v40;
  IPC::Encoder *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  _QWORD v44[3];

  v7 = (uint64_t *)a2;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = (WTF::StringImpl **)WebKit::insertionPointFromCurrentSelection(this, a2);
  v13 = *(_QWORD *)(v10 + 32);
  v12 = v10 + 32;
  v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  if (!v15)
  {
    LOBYTE(v32) = 3;
    v20 = 1;
    v35 = 1;
    return ((uint64_t (*)(WTF::StringImpl ***, uint64_t **))off_1E34EF790[v20])(&v43, &v32);
  }
  v16 = v15;
  v42 = 0;
  IPC::Connection::createSyncMessageEncoder(3666, v14, &v42, (uint64_t *)&v41);
  v17 = v41;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v41, v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v17, a3);
  *(_DWORD *)IPC::Encoder::grow(v17, 4uLL, 4) = (_DWORD)v11;
  IPC::Connection::sendSyncMessage(v16, v42, (uint64_t *)&v41, 0, (uint64_t)&v39, INFINITY);
  if (!v40)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v39, &v36);
    if (v38)
    {
      if (v40)
        goto LABEL_27;
      v22 = v39;
      v39 = 0;
      v11 = v36;
      v36 = 0;
      LODWORD(v7) = v37;
      LODWORD(a3) = HIDWORD(v37);
      v37 = 0;
      v43 = 0;
      v44[0] = 0;
      v32 = v22;
      v33 = v11;
      v44[1] = 0;
      v34 = __PAIR64__(a3, v7);
      v35 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v21);
      v23 = (IPC::Decoder *)v43;
      v43 = 0;
      if (v23)
      {
        IPC::Decoder::~Decoder(v23);
        WTF::fastFree(v24, v25);
      }
      if (v38)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v21);
      v18 = 0;
    }
    else
    {
      LOBYTE(v32) = 13;
      v18 = 1;
      v35 = 1;
    }
    v19 = v40;
    if (v40 == -1)
    {
LABEL_20:
      v26 = v41;
      v41 = 0;
      if (v26)
      {
        IPC::Encoder::~Encoder(v26, v21);
        WTF::fastFree(v27, v28);
      }
      if (v18)
      {
        v20 = 1;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v43 = v11;
        v44[0] = __PAIR64__(a3, v7);
        v36 = a5;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(&v36, &v43);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v29);
        v20 = 0;
      }
      return ((uint64_t (*)(WTF::StringImpl ***, uint64_t **))off_1E34EF790[v20])(&v43, &v32);
    }
LABEL_19:
    ((void (*)(WTF::StringImpl ***, uint64_t **))off_1E34EF848[v19])(&v43, &v39);
    goto LABEL_20;
  }
  if (v40 == 1)
  {
    LOBYTE(v32) = (_BYTE)v39;
    v18 = 1;
    v35 = 1;
    v19 = 1;
    goto LABEL_19;
  }
LABEL_27:
  v31 = std::__throw_bad_variant_access[abi:sn180100]();
}

uint64_t `non-virtual thunk to'WebKit::WebEditorClient::getGuessesForWord(uint64_t a1, const WebCore::VisibleSelection *a2, uint64_t *a3, WebKit *a4, WTF::StringImpl **a5)
{
  return WebKit::WebEditorClient::getGuessesForWord(a1 - 24, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::WebEditorClient::requestCheckingOfString(uint64_t a1, _DWORD *a2, WebKit *a3)
{
  uint64_t IdentifierInternal;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::VisibleSelection *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  _DWORD *v25;
  IPC::Encoder *v26[3];
  uint64_t v27;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v7 = IdentifierInternal;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v8 = v9 - 16;
    else
      v8 = 0;
  }
  ++a2[2];
  v25 = a2;
  v27 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>((uint64_t *)(v8 + 120), &v27, (uint64_t *)&v25, (uint64_t)v26);
  v10 = v25;
  v25 = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v13 = v12 - 16;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  v16 = WebKit::insertionPointFromCurrentSelection(a3, v15);
  v18 = *(_QWORD *)(v13 + 32);
  v17 = v13 + 32;
  v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 2008;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v26[0] = (IPC::Encoder *)v20;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v20, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::encode((IPC::Encoder *)v20, v14);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v20, 4uLL, 4) = v16;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v17 + 32))(v17, v26, 0);
  result = v26[0];
  v26[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebEditorClient::requestCheckingOfString(uint64_t a1, _DWORD *a2, WebKit *a3)
{
  return WebKit::WebEditorClient::requestCheckingOfString(a1 - 24, a2, a3);
}

uint64_t WebKit::WebEditorClient::willChangeSelectionForAccessibility(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  *(_BYTE *)(v2 + 2027) = 1;
  return this;
}

uint64_t WebKit::WebEditorClient::didChangeSelectionForAccessibility(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  *(_BYTE *)(v2 + 2027) = 0;
  return this;
}

uint64_t WebKit::WebEditorClient::supportsGlobalSelection(WebKit::WebEditorClient *this)
{
  return 0;
}

uint64_t *WebKit::WebFileSystemStorageConnection::connectionClosed(WebKit::WebFileSystemStorageConnection *this)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v2)
    goto LABEL_16;
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v18 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v7 = v18 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (__stlxr(0, v3))
    goto LABEL_13;
  if (v6)
    goto LABEL_16;
LABEL_14:
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = off_1E34ACA48;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v7;
  v19 = v10;
  WTF::ensureOnMainRunLoop();
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
LABEL_16:
  result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)this + 2);
  v12 = result;
  v14 = v13;
  v15 = *((_QWORD *)this + 2);
  if (v15)
    v16 = (uint64_t *)(v15 + 48 * *(unsigned int *)(v15 - 4));
  else
    v16 = 0;
  if (v16 != result)
  {
    do
    {
      v17 = *v12;
      v12 += 6;
      result = WebKit::WebFileSystemStorageConnection::invalidateAccessHandle((uint64_t)this, v17);
      while (v12 != v14)
      {
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_25;
        v12 += 6;
      }
      v12 = v14;
LABEL_25:
      ;
    }
    while (v12 != v16);
  }
  return result;
}

uint64_t *WebKit::WebFileSystemStorageConnection::invalidateAccessHandle(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v6, (uint64_t)v9);
  if (v9[0] != 0)
  {
    v7 = v9[0];
    v8 = v9[1];
    v3 = v6;
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v4 = (uint64_t)off_1E34EFA50;
    v4[1] = v3;
    v5 = v4;
    WebCore::ScriptExecutionContext::postTaskTo();
    result = v5;
    if (v5)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v5 + 8))(v5);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::closeHandle(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 534;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v8 = (IPC::Encoder *)v4;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = a2;
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
    result = v8;
    v8 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v5);
      return (IPC::Encoder *)WTF::fastFree(v6, v7);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::isSameEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  os_unfair_lock_s *v5;
  uint64_t v8;
  IPC::Encoder *result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18[2];
  int v19;
  IPC::Encoder *v20;

  v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18[0]) = 24;
    v19 = 1;
LABEL_5:
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, v18);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v19 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1E34EF7A0[v19])(&v20, v18);
    return result;
  }
  if (a2 == a3)
  {
    LOBYTE(v18[0]) = 1;
    v19 = 0;
    goto LABEL_5;
  }
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34EF868;
  v11[1] = v10;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 562;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v20 = (IPC::Encoder *)v13;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a3;
  v18[0] = (uint64_t)v11;
  v18[1] = v12;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v20, v18, 0, 0);
  v15 = v18[0];
  v18[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getFileHandle(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  os_unfair_lock_s *v6;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t *v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27[2];
  IPC::Encoder *v28;

  v26 = a2;
  v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v24[0] = &v26;
    v24[1] = a3;
    LOBYTE(v25) = a4;
    v8 = (unsigned int *)(a1 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = (WTF::StringImpl *)*a3;
    v11 = *a5;
    if (*a3)
      *(_DWORD *)v10 += 4;
    *a5 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    v14 = (uint64_t)v12;
    *v12 = &off_1E34EF890;
    v12[1] = a1;
    v12[2] = a1;
    if (v10)
    {
      v15 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      v12[3] = v10;
      v12[4] = v11;
      if (v15)
        *(_DWORD *)v10 = v15;
      else
        WTF::StringImpl::destroy(v10, v13);
    }
    else
    {
      v12[3] = 0;
      v12[4] = v11;
    }
    v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 558;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v28 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v19, v24);
    v27[0] = v14;
    v27[1] = v18;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v28, v27, 0, 0);
    v21 = v27[0];
    v27[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v20);
      result = (IPC::Encoder *)WTF::fastFree(v22, v23);
    }
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v24[0]) = 24;
    v25 = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v16 + 16))(v16, v24);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v25 != -1)
      return (IPC::Encoder *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E34EF7B0[v25])(v27, v24);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getDirectoryHandle(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  os_unfair_lock_s *v6;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t *v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27[2];
  IPC::Encoder *v28;

  v26 = a2;
  v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v24[0] = &v26;
    v24[1] = a3;
    LOBYTE(v25) = a4;
    v8 = (unsigned int *)(a1 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = (WTF::StringImpl *)*a3;
    v11 = *a5;
    if (*a3)
      *(_DWORD *)v10 += 4;
    *a5 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    v14 = (uint64_t)v12;
    *v12 = &off_1E34EF8B8;
    v12[1] = a1;
    v12[2] = a1;
    if (v10)
    {
      v15 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      v12[3] = v10;
      v12[4] = v11;
      if (v15)
        *(_DWORD *)v10 = v15;
      else
        WTF::StringImpl::destroy(v10, v13);
    }
    else
    {
      v12[3] = 0;
      v12[4] = v11;
    }
    v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 556;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v28 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v19, v24);
    v27[0] = v14;
    v27[1] = v18;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v28, v27, 0, 0);
    v21 = v27[0];
    v27[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v20);
      result = (IPC::Encoder *)WTF::fastFree(v22, v23);
    }
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v24[0]) = 24;
    v25 = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v16 + 16))(v16, v24);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v25 != -1)
      return (IPC::Encoder *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E34EF7B0[v25])(v27, v24);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::removeEntry(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, char a4, uint64_t *a5)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  uint64_t v22[2];
  IPC::Encoder *v23;

  v21 = a2;
  v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v18 = &v21;
    v19 = a3;
    v20 = a4;
    v7 = *a5;
    *a5 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34EF8E0;
    v8[1] = v7;
    v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 572;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v23 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v10, &v18);
    v22[0] = (uint64_t)v8;
    v22[1] = v9;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v23, v22, 0, 0);
    v12 = v22[0];
    v22[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18) = 24;
    v20 = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v16 + 16))(v16, &v18);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v20)
    {
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  os_unfair_lock_s *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  int v19;
  IPC::Encoder *v20;

  v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    v8 = *a4;
    *a4 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34EF908;
    v9[1] = v8;
    v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 578;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v20 = (IPC::Encoder *)v11;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a3;
    v18[0] = (uint64_t)v9;
    v18[1] = v10;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v20, v18, 0, 0);
    v13 = v18[0];
    v18[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18[0]) = 24;
    v19 = 1;
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v18);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v19 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1E34EF7E8[v19])(&v20, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16[2];
  int v17;
  IPC::Encoder *v18;

  v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    v6 = *a3;
    *a3 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34EF940;
    v7[1] = v6;
    v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 557;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v18 = (IPC::Encoder *)v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
    v16[0] = (uint64_t)v7;
    v16[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v16, 0, 0);
    v11 = v16[0];
    v16[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 24;
    v17 = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v16);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v17 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1E34EF7F8[v17])(&v18, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16[5];
  unsigned int v17;
  IPC::Encoder *v18;

  v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    v6 = *a3;
    *a3 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34EF978;
    v7[1] = v6;
    v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 540;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v18 = (IPC::Encoder *)v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
    v16[0] = (uint64_t)v7;
    v16[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v16, 0, 0);
    v11 = v16[0];
    v16[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 24;
    v17 = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v16);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v17 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))*(&off_1E34EF808 + v17))(&v18, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::closeSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  os_unfair_lock_s *v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[2];
  IPC::Encoder *v18;

  v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    v7 = *a4;
    *a4 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34EF9B0;
    v8[1] = v7;
    v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 535;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v18 = (IPC::Encoder *)v10;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = a3;
    v17[0] = (uint64_t)v8;
    v17[1] = v9;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v17, 0, 0);
    v12 = v17[0];
    v17[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getHandleNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16[2];
  int v17;
  IPC::Encoder *v18;

  v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    v6 = *a3;
    *a3 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34EF9D8;
    v7[1] = v6;
    v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 560;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v18 = (IPC::Encoder *)v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
    v16[0] = (uint64_t)v7;
    v16[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v16, 0, 0);
    v11 = v16[0];
    v16[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = v18;
    v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 24;
    v17 = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v16);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v17 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1E34EF7E8[v17])(&v18, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getHandle(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  os_unfair_lock_s *v5;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21[2];
  int v22;
  IPC::Encoder *v23;

  v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    v9 = (unsigned int *)(a1 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *a4;
    *a4 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E34EFA00;
    v12[1] = a1;
    v12[2] = a1;
    v12[3] = v11;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 559;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v23 = (IPC::Encoder *)v14;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = a2;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
    v21[0] = (uint64_t)v12;
    v21[1] = v13;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v23, v21, 0, 0);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v21[0]) = 24;
    v22 = 1;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 16))(v20, v21);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v22 != -1)
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1E34EF7B0[v22])(&v23, v21);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  os_unfair_lock_s *v6;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  char v23;
  IPC::Encoder *v24;

  v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v10 = *a5;
    *a5 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34EFA28;
    v11[1] = v10;
    v12 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 565;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v24 = (IPC::Encoder *)v13;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a3;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a4);
    v21 = v11;
    v22 = v12;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v24, (uint64_t *)&v21, 0, 0);
    v15 = (uint64_t)v21;
    v21 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = v24;
    v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v21) = 24;
    v23 = 1;
    v19 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v19 + 16))(v19, &v21);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v23)
    {
      result = v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, v20);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebFileSystemStorageConnection::registerSyncAccessHandle(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  v6 = (uint64_t *)(result + 16);
  v5 = *(_QWORD *)(result + 16);
  if (v5
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(result + 16)),
        (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v5 + 48 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = a2;
    v16 = *a3;
    v12[4] = *((_QWORD *)a3 + 2);
    *((_OWORD *)v12 + 1) = v16;
    v17 = *v6;
    if (*v6)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v6;
    if (*v6)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        return result;
    }
    else if (3 * v22 > 4 * v21)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6);
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (_QWORD *)(v5 + 48 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[3] = 0;
        v14[4] = 0;
        v14[2] = 0;
        --*(_DWORD *)(*v6 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t *WebKit::WebFileSystemStorageConnection::unregisterSyncAccessHandle(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *(_QWORD *)(a1 + 16);
  result = (uint64_t *)(a1 + 16);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = (uint64_t *)(v3 + 48 * v9);
    v11 = *v10;
    if (*v10 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v9 = (v9 + v12) & v5;
        v10 = (uint64_t *)(v3 + 48 * v9);
        v11 = *v10;
        ++v12;
        if (*v10 == a2)
          goto LABEL_8;
      }
      v10 = (uint64_t *)(v3 + 48 * *(unsigned int *)(v3 - 4));
    }
LABEL_8:
    if ((uint64_t *)(v3 + 48 * *(unsigned int *)(v3 - 4)) != v10)
    {
      *v10 = -1;
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      v14 = *result ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v17 >> 1);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  os_unfair_lock_s *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    v9 = *a5;
    *a5 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34EFA78;
    v10[1] = v9;
    v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 576;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v21 = (IPC::Encoder *)v12;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a3;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a4;
    v19 = v10;
    v20 = v11;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v21, (uint64_t *)&v19, 0, 0);
    v14 = (uint64_t)v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    LOBYTE(v19) = 0;
    LOBYTE(v20) = 0;
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v18 + 16))(v18, &v19);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

void WebKit::WebFrameLoaderClient::~WebFrameLoaderClient(WebKit::WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E34EF110;
  if (*((_BYTE *)this + 24))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WebKit::WebFrameLoaderClient::navigationActionData(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, _DWORD **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, int a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v22;
  char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL isFocused;
  WebKit::WebProcess *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Frame *v49;
  unsigned int *v50;
  unsigned int v51;
  void *v52;
  char v53;
  WebKit::WebProcess *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  const WebCore::ResourceRequest *v58;
  uint64_t v59;
  __int128 v60;
  _DWORD *v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  CFTypeRef v77;
  WTF::StringImpl *v78;
  void *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  CFTypeRef v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  char v109;
  WebKit::WebProcess *v110;
  WebKit::WebProcess *v111;
  WebKit::WebProcess *v112;
  int v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  CFTypeRef *v120;
  _DWORD *v123;
  __int128 v124;
  uint64_t v125[83];
  _BYTE buf[12];
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  _BYTE v131[32];
  char canHandleRequest;
  char v133;
  _DWORD *v134;
  uint64_t v135;
  _QWORD v136[31];
  char v137;
  char v138;
  char v139;
  __int16 v140;
  char v141;
  _BYTE v142[24];
  int v143;
  _BYTE v144[24];
  int v145;
  __int128 v146;
  char v147;
  __int128 v148;
  char v149;
  __int16 v150;
  _DWORD *v151;
  int v152;
  uint64_t v153;
  _BYTE v154[312];
  char v155;
  _BYTE v156[6];
  _BYTE v157[672];
  __int16 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  char v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  CFTypeRef v178;
  _BYTE v179[24];
  int v180;
  WTF::StringImpl *v181;
  __int128 v182;
  _OWORD v183[2];
  unint64_t v184;
  char v185;
  _QWORD v186[38];
  CFTypeRef v187;
  CFTypeRef v188;
  _BYTE v189[56];
  __int16 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  char v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  CFTypeRef cf;
  _BYTE v211[24];
  int v212;
  WTF::StringImpl *v213;
  __int128 v214;
  _BYTE v215[30];
  uint64_t v216;

  v12 = (uint64_t)buf;
  v216 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 8)) == 0
    || (v15 = *(_QWORD *)(v14 + 24)) == 0
    || (v16 = *(_QWORD *)(v15 + 8)) == 0
    || (v22 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v22 + 1368))(v22) & 1) != 0)
    || (v23 = *(char **)(v22[2] + 8)) == 0)
  {
    a3 = off_1ECE713E8;
    if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      *a9 = 0;
      a9[2560] = 0;
      return;
    }
    v23 = *(char **)(a1 + 8);
    a2 = *((_QWORD *)v23 + 10);
    v41 = *((_QWORD *)v23 + 3);
    if (v41
      && (v42 = *(_QWORD *)(v41 + 8)) != 0
      && (v43 = *(_QWORD *)(v42 + 24)) != 0
      && (v83 = *(_QWORD *)(v43 + 8)) != 0
      && (v84 = *(_QWORD **)(*(_QWORD *)(v83 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v84 + 1368))(v84) & 1) == 0))
    {
      v85 = *(_QWORD *)(v84[2] + 8);
      if (v85)
        a8 = v85 - 16;
      else
        a8 = 0;
    }
    else
    {
      a8 = 0;
    }
    v86 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24);
    if (!v86 || (v86 = (_QWORD *)v86[1]) == 0 || (v86 = (_QWORD *)v86[3]) == 0 || (v86 = (_QWORD *)v86[1]) == 0)
    {
LABEL_103:
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)(v12 + 4) = a1;
      v127 = 2048;
      *(_QWORD *)(v12 + 14) = v23;
      v129 = 2048;
      v130 = a2;
      *(_WORD *)v131 = 2048;
      *(_QWORD *)(v12 + 34) = a8;
      *(_WORD *)&v131[10] = 2048;
      *(_QWORD *)(v12 + 44) = v86;
      _os_log_error_impl(&dword_196BCC000, a3, OS_LOG_TYPE_ERROR, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: ignoring because there's no web page", buf, 0x34u);
      goto LABEL_14;
    }
    v87 = *(_QWORD **)(v86[6] + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v87 + 1368))(v87) & 1) == 0)
    {
      v86 = *(_QWORD **)(v87[2] + 8);
      if (v86)
      {
        v88 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                             + 24)
                                                 + 8)
                                     + 48)
                         + 16);
        (*(void (**)(_QWORD *))(*v88 + 1368))(v88);
        v89 = *(_QWORD *)(v88[2] + 8);
        if (v89)
          v90 = v89 - 16;
        else
          v90 = 0;
        v86 = *(_QWORD **)(v90 + 40);
      }
      goto LABEL_103;
    }
LABEL_156:
    v86 = 0;
    goto LABEL_103;
  }
  CFRetain(*((CFTypeRef *)v23 - 1));
  if (WebCore::ResourceRequestBase::isEmpty((WebCore::ResourceRequestBase *)a3))
  {
    v24 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(v25 + 80);
      v27 = *(_QWORD *)(v25 + 24);
      if (v27
        && (v28 = *(_QWORD *)(v27 + 8)) != 0
        && (v29 = *(_QWORD *)(v28 + 24)) != 0
        && (v91 = *(_QWORD *)(v29 + 8)) != 0
        && (v92 = *(_QWORD **)(*(_QWORD *)(v91 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v92 + 1368))(v92) & 1) == 0))
      {
        v93 = *(_QWORD *)(v92[2] + 8);
        if (v93)
          v30 = v93 - 16;
        else
          v30 = 0;
      }
      else
      {
        v30 = 0;
      }
      v94 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24);
      if (v94)
      {
        v94 = (_QWORD *)v94[1];
        if (v94)
        {
          v94 = (_QWORD *)v94[3];
          if (v94)
          {
            v94 = (_QWORD *)v94[1];
            if (v94)
            {
              v95 = *(_QWORD **)(v94[6] + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v95 + 1368))(v95) & 1) != 0)
              {
                v94 = 0;
              }
              else
              {
                v94 = *(_QWORD **)(v95[2] + 8);
                if (v94)
                {
                  v96 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                               + 24)
                                                                                   + 8)
                                                                       + 24)
                                                           + 8)
                                               + 48)
                                   + 16);
                  (*(void (**)(_QWORD *))(*v96 + 1368))(v96);
                  v97 = *(_QWORD *)(v96[2] + 8);
                  if (v97)
                    v98 = v97 - 16;
                  else
                    v98 = 0;
                  v94 = *(_QWORD **)(v98 + 40);
                }
              }
            }
          }
        }
      }
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      v127 = 2048;
      v128 = v25;
      v129 = 2048;
      v130 = v26;
      *(_WORD *)v131 = 2048;
      *(_QWORD *)&v131[2] = v30;
      *(_WORD *)&v131[10] = 2048;
      *(_QWORD *)&v131[12] = v94;
      v99 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyFo"
            "rNavigationAction: ignoring because request is empty";
LABEL_120:
      _os_log_error_impl(&dword_196BCC000, v24, OS_LOG_TYPE_ERROR, v99, buf, 0x34u);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if (!*(_BYTE *)(a2 + 224))
    goto LABEL_121;
  if (*(_BYTE *)(a2 + 152))
  {
    v119 = v23;
    {
      v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v110 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v31 = WebKit::WebProcess::WebProcess(v110);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v31;
      if (!*(_BYTE *)(a2 + 152))
        goto LABEL_155;
    }
    v23 = (char *)(a2 + 136);
    v32 = WebKit::WebProcess::webFrame((uint64_t)v31, *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144));
    v120 = (CFTypeRef *)v32;
    if (v32)
    {
      v33 = (unsigned int *)v32;
      CFRetain(*(CFTypeRef *)(v32 + 8));
      if (!*(_BYTE *)(a2 + 152))
        goto LABEL_155;
      v124 = *(_OWORD *)v23;
      WebKit::WebFrame::parentFrame(v33, buf);
      if (*(_QWORD *)buf)
      {
        v34 = *(_QWORD *)(*(_QWORD *)buf + 80);
        v115 = *(_QWORD *)(*(_QWORD *)buf + 88);
        v117 = v34 & 0xFFFFFFFFFFFFFF00;
        CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
        v12 = 1;
      }
      else
      {
        v117 = 0;
        LOBYTE(v34) = 0;
        v12 = 0;
      }
    }
    else
    {
      if (!*(_BYTE *)(a2 + 152))
        goto LABEL_155;
      v117 = 0;
      LOBYTE(v34) = 0;
      v12 = 0;
      v124 = *(_OWORD *)v23;
    }
    v190 = *(_BYTE *)(a2 + 872) == 0;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v191, (const WTF::URL *)a2, 0);
    cf = 0;
    v44 = *(_QWORD *)(a2 + 40) + 8;
    v211[0] = 0;
    v212 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v211, v44);
    v214 = v124;
    v213 = 0;
    *(_QWORD *)v215 = v34 | v117;
    *(_QWORD *)&v215[8] = v115;
    v215[16] = v12;
    *(_DWORD *)&v215[24] = getpid();
    isFocused = (char)v120;
    if (v120)
      isFocused = WebKit::WebFrame::isFocused((WebKit::WebFrame *)v120);
    v23 = &_MergedGlobals_106;
    v215[28] = isFocused;
    v215[29] = 0;
    if (!*(_BYTE *)(a2 + 168))
      goto LABEL_40;
    {
      v46 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      goto LABEL_38;
    }
    v112 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v46 = WebKit::WebProcess::WebProcess(v112);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v46;
    if (*(_BYTE *)(a2 + 168))
    {
LABEL_38:
      *(_QWORD *)buf = *(_QWORD *)(a2 + 160);
      v47 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v46 + 14, buf);
      if (v47)
      {
        v116 = *(_QWORD *)(v47 + 2120);
        v118 = v116 & 0xFFFFFFFFFFFFFF00;
        v114 = 1;
LABEL_41:
        v189[0] = 0;
        v189[48] = 0;
        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
        if (v48)
        {
          v49 = *(WebCore::Frame **)(v48 + 8);
          if (v49)
          {
            v50 = (unsigned int *)((char *)v49 + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 + 1, v50));
            WebCore::Frame::ownerPermissionsPolicy(v49);
            std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v189, (uint64_t)buf);
            std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v52);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v50);
          }
        }
        buf[0] = *(_BYTE *)(a2 + 868);
        buf[1] = WebKit::modifiersForNavigationAction((_BYTE *)a2);
        v53 = *(_BYTE *)(a2 + 476);
        if (v53)
        {
          if (*(_BYTE *)(a2 + 474))
            v108 = *(_BYTE *)(a2 + 448) == 0;
          else
            v108 = 1;
          v109 = *(_BYTE *)(a2 + 472);
          if (v108)
            v109 = -2;
          buf[2] = v109;
          if (v108)
            v53 = 0;
          else
            v53 = *(_BYTE *)(a2 + 473);
          v23 = &_MergedGlobals_106;
        }
        else
        {
          buf[2] = -2;
        }
        buf[3] = v53;
        if (v23[2488] == 1)
        {
          v54 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v111 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v54 = WebKit::WebProcess::WebProcess(v111);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v54;
          v23[2488] = 1;
        }
        if (*(_BYTE *)(a2 + 224))
        {
          v55 = *(_QWORD *)(a2 + 160);
          v56 = *(_QWORD *)(a2 + 168);
          v57 = *(_DWORD **)(a2 + 480);
          if (v57)
            ++*v57;
          v123 = v57;
          WebKit::WebProcess::userGestureTokenIdentifier((uint64_t)v54, v55, v56, (uint64_t *)&v123, (__n128 *)&buf[8]);
          v59 = *(_QWORD *)(a2 + 480);
          if (v59)
          {
            *(_DWORD *)v59 += 2;
            v60 = *(_OWORD *)(v59 + 112);
            *(_OWORD *)v131 = *(_OWORD *)(v59 + 96);
            *(_OWORD *)&v131[16] = v60;
          }
          else
          {
            v131[0] = 0;
            v131[16] = 0;
          }
          canHandleRequest = WebKit::WebPage::canHandleRequest((WebKit::WebPage *)a3, v58);
          v133 = *(_BYTE *)(a2 + 871);
          v61 = *(_DWORD **)(a2 + 488);
          if (v61)
            *v61 += 2;
          if (*(_BYTE *)(a2 + 476))
            v62 = *(_QWORD *)(a2 + 464);
          else
            v62 = 0;
          v134 = v61;
          v135 = v62;
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v136, (const WebCore::ResourceResponseBase *)a4);
          v63 = *(const void **)(a4 + 240);
          v136[30] = v63;
          if (v63)
            CFRetain(v63);
          v137 = *(_BYTE *)(a4 + 248);
          v138 = *(_BYTE *)(a2 + 876);
          v139 = *(_BYTE *)(a2 + 873);
          v140 = *(_WORD *)(a2 + 874);
          v141 = a8;
          v64 = *(_QWORD *)(a2 + 40) + 8;
          v142[0] = 0;
          v143 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v142, v64);
          v65 = *(_QWORD *)(a2 + 48) + 8;
          v144[0] = 0;
          v145 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v144, v65);
          v146 = *(_OWORD *)(a2 + 496);
          v147 = *(_BYTE *)(a2 + 512);
          v148 = *(_OWORD *)(a2 + 520);
          v149 = *(_BYTE *)(a2 + 536);
          v150 = *(_WORD *)(a2 + 878);
          v66 = *a5;
          if (*a5)
            *v66 += 2;
          v151 = v66;
          v152 = a10;
          std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v153, (uint64_t)v189);
          v154[0] = 0;
          v155 = 0;
          if (*(_BYTE *)(a2 + 856))
          {
            WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v154, (const WebCore::PrivateClickMeasurement *)(a2 + 544));
            v155 = 1;
          }
          if (v120)
          {
            *(_WORD *)v156 = WebKit::WebFrame::advancedPrivacyProtections((WebKit::WebFrame *)v120);
            *(_DWORD *)&v156[2] = WebKit::WebFrame::originatorAdvancedPrivacyProtections((WebKit::WebFrame *)v120);
          }
          else
          {
            *(_DWORD *)v156 = 0;
            v156[4] = 1;
          }
          v67 = *(_BYTE *)(a7 + 136);
          v113 = v67;
          if (v67)
          {
            WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v125, (WebKit::WebHitTestResultData **)a7, 0);
            WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v157, v125);
            v67 = 1;
          }
          else
          {
            v157[0] = 0;
          }
          v157[664] = v67;
          v158 = v190;
          v68 = v191;
          v69 = v194;
          v191 = 0;
          v159 = v68;
          v160 = v192;
          v161 = v193;
          LODWORD(v192) = v192 & 0xFFFFFFFE;
          v194 = 0;
          v162 = v69;
          v163 = v195;
          v164 = v196;
          LODWORD(v195) = v195 & 0xFFFFFFFE;
          v70 = v199;
          v165 = v197;
          v71 = v198;
          v198 = 0u;
          v166 = v71;
          v199 = 0;
          v167 = v70;
          v72 = v200;
          v200 = 0;
          v168 = v72;
          v73 = v201;
          v201 = 0;
          v169 = v73;
          v74 = v202;
          v202 = 0;
          v170 = v74;
          v75 = v203;
          v203 = 0;
          v171 = v75;
          v173 = v205;
          v172 = v204;
          v76 = v206;
          v206 = 0u;
          v174 = v76;
          v175 = v207;
          v177 = v209;
          v176 = v208;
          v77 = cf;
          v207 = 0;
          cf = 0;
          v178 = v77;
          v179[0] = 0;
          v180 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v179, (uint64_t)v211);
          *(_OWORD *)((char *)v183 + 14) = *(_OWORD *)&v215[14];
          v182 = v214;
          v78 = v213;
          v213 = 0;
          v181 = v78;
          v183[0] = *(_OWORD *)v215;
          v184 = v116 | v118;
          v185 = v114;
          WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 8), (uint64_t)v186);
          v186[37] = a6;
          WebCore::ResourceRequest::ResourceRequest(&v187, (const WebCore::ResourceRequest *)(a2 + 240));
          WebCore::ResourceRequest::ResourceRequest(&v188, (const WebCore::ResourceRequest *)a3);
          WebKit::NavigationActionData::NavigationActionData((uint64_t)a9, (uint64_t)buf);
          a9[2560] = 1;
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
          if (v113)
            WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v125);
          v23 = v119;
          if (v59)
          {
            WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v59);
            WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v59);
          }
          if (v123)
            WTF::RefCounted<WebCore::UserGestureToken>::deref(v123);
          std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v189, v79);
          v81 = v213;
          v213 = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v80);
            else
              *(_DWORD *)v81 -= 2;
          }
          if (v212 != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34EF818[v212])(buf, v211);
          v212 = -1;
          v82 = cf;
          cf = 0;
          if (v82)
            CFRelease(v82);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v191);
          if (v120)
            CFRelease(v120[1]);
          goto LABEL_122;
        }
        goto LABEL_155;
      }
LABEL_40:
      v118 = 0;
      LOBYTE(v116) = 0;
      v114 = 0;
      goto LABEL_41;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v24 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
  {
    v35 = *(_QWORD *)(a1 + 8);
    v36 = *(_QWORD *)(v35 + 80);
    v37 = *(_QWORD *)(v35 + 24);
    if (v37
      && (v38 = *(_QWORD *)(v37 + 8)) != 0
      && (v39 = *(_QWORD *)(v38 + 24)) != 0
      && (v100 = *(_QWORD *)(v39 + 8)) != 0
      && (v101 = *(_QWORD **)(*(_QWORD *)(v100 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v101 + 1368))(v101) & 1) == 0))
    {
      v102 = *(_QWORD *)(v101[2] + 8);
      if (v102)
        v40 = v102 - 16;
      else
        v40 = 0;
    }
    else
    {
      v40 = 0;
    }
    v103 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24);
    if (v103)
    {
      v103 = (_QWORD *)v103[1];
      if (v103)
      {
        v103 = (_QWORD *)v103[3];
        if (v103)
        {
          v103 = (_QWORD *)v103[1];
          if (v103)
          {
            v104 = *(_QWORD **)(v103[6] + 16);
            if (((*(uint64_t (**)(_QWORD *))(*v104 + 1368))(v104) & 1) != 0)
            {
              v103 = 0;
            }
            else
            {
              v103 = *(_QWORD **)(v104[2] + 8);
              if (v103)
              {
                v105 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                              + 24)
                                                                                  + 8)
                                                                      + 24)
                                                          + 8)
                                              + 48)
                                  + 16);
                (*(void (**)(_QWORD *))(*v105 + 1368))(v105);
                v106 = *(_QWORD *)(v105[2] + 8);
                if (v106)
                  v107 = v106 - 16;
                else
                  v107 = 0;
                v103 = *(_QWORD **)(v107 + 40);
              }
            }
          }
        }
      }
    }
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v127 = 2048;
    v128 = v35;
    v129 = 2048;
    v130 = v36;
    *(_WORD *)v131 = 2048;
    *(_QWORD *)&v131[2] = v40;
    *(_WORD *)&v131[10] = 2048;
    *(_QWORD *)&v131[12] = v103;
    v99 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForN"
          "avigationAction: ignoring because frame does not exist";
    goto LABEL_120;
  }
LABEL_121:
  *a9 = 0;
  a9[2560] = 0;
LABEL_122:
  CFRelease(*((CFTypeRef *)v23 - 1));
}

void WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned int a11, uint64_t *a12)
{
  WebKit::WebFrame *v12;
  const char ***p_buf;
  uint64_t v14;
  NSObject *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  CFTypeRef *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  NSObject *v48;
  CFTypeRef *v49;
  WTF::StringImpl *v50;
  const char **v51;
  int v52;
  CFTypeRef *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebKit::WebFrame *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69[112];
  char v70;
  const char **v71;
  char v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;
  int v76;
  const char **buf;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  _BYTE v89[24];
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  const char *v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  _BYTE v102[2560];
  char v103;
  uint64_t v104;

  v15 = a2;
  v104 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrameLoaderClient::navigationActionData(a1, a2, a3, a4, a6, a7, a8, a9, v102, a10);
  if (v103)
  {
    v17 = a11;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (v18
      && (v19 = *(_QWORD *)(v18 + 8)) != 0
      && (v20 = *(_QWORD *)(v19 + 24)) != 0
      && (v21 = *(_QWORD *)(v20 + 8)) != 0
      && (v12 = *(WebKit::WebFrame **)(*(_QWORD *)(v21 + 48) + 16),
          ((*(uint64_t (**)(WebKit::WebFrame *))(*(_QWORD *)v12 + 1368))(v12) & 1) == 0)
      && (v22 = *(_QWORD *)(*((_QWORD *)v12 + 2) + 8)) != 0)
    {
      v23 = v22 - 16;
      CFRetain(*(CFTypeRef *)(v22 - 8));
      v24 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    v25 = WebKit::WebFrame::setUpPolicyListener(*(_QWORD *)(a1 + 8), a12, 1);
    if (a11)
    {
      if (v103)
      {
        v26 = *(_QWORD *)(a1 + 8);
        CFRetain(*(CFTypeRef *)(v26 + 8));
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 32) + 56))(v23 + 32);
        v28 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v28 = 1854;
        *(_QWORD *)(v28 + 8) = v27;
        *(_QWORD *)(v28 + 528) = v28 + 16;
        *(_QWORD *)(v28 + 536) = v28 + 16;
        *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v28 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
        *(_QWORD *)v89 = v28;
        IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode((IPC::Encoder *)v28, (uint64_t)v102);
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v29 = &off_1E34EFAC8;
        v29[1] = a1;
        v29[2] = v26;
        v29[3] = v25;
        v65 = v29;
        v66 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        (*(void (**)(uint64_t, _BYTE *, _QWORD **, _QWORD))(*(_QWORD *)(v23 + 32) + 40))(v23 + 32, v89, &v65, 0);
        v31 = v65;
        v65 = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        v32 = *(IPC::Encoder **)v89;
        *(_QWORD *)v89 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v30);
          WTF::fastFree(v33, v34);
        }
LABEL_16:
        CFRelease(*(CFTypeRef *)(v23 + 8));
        goto LABEL_17;
      }
    }
    else
    {
      isa = v15[60].isa;
      if (isa && !*((_DWORD *)isa + 17) && *((_BYTE *)isa + 16) == 1
        || (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
      {
        if (v103)
        {
          p_buf = &buf;
          *(_QWORD *)v89 = v102;
          IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>((uint64_t)&v65, v23 + 32, (uint64_t *)v89);
          if (v76)
          {
            v48 = off_1ECE713E8;
            if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
            {
              v56 = *(WebKit::WebFrame **)(a1 + 8);
              v57 = *((_QWORD *)v56 + 10);
              v58 = WebKit::WebFrame::page(v56);
              if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)))
                v59 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)) + 40);
              else
                v59 = 0;
              if (v76)
              {
                if (v76 != 1)
                {
                  v62 = std::__throw_bad_variant_access[abi:sn180100]();
                  IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>(v62, v63, v64);
                  return;
                }
                v60 = v65;
              }
              else
              {
                v60 = 0;
              }
              v61 = IPC::errorAsString(v60);
              *(_DWORD *)v89 = 134219266;
              *(_QWORD *)&v89[4] = a1;
              *(_WORD *)&v89[12] = 2048;
              *(_QWORD *)&v89[14] = v56;
              *(_WORD *)&v89[22] = 2048;
              v90 = v57;
              v91 = 2048;
              v92 = v58;
              v93 = 2048;
              v94 = v59;
              v95 = 2082;
              v96 = v61;
              _os_log_error_impl(&dword_196BCC000, v48, OS_LOG_TYPE_ERROR, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: ignoring because of failing to send sync IPC with error %{public}s", v89, 0x3Eu);
            }
            v49 = *(CFTypeRef **)(a1 + 8);
            *(_WORD *)v89 = 0;
            v89[2] = 2;
            *(_QWORD *)&v89[8] = 0;
            v89[16] = 0;
            LOBYTE(v90) = 0;
            LOBYTE(v91) = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            v101 = 0;
            WebKit::WebFrame::didReceivePolicyDecision(v49, v25, (__int16 *)v89);
            WebKit::PolicyDecision::~PolicyDecision((const char ***)v89, v50);
LABEL_43:
            if (v76 != -1)
              ((void (*)(_BYTE *, _QWORD **))off_1E34EF828[v76])(v89, &v65);
            if ((v24 & 1) != 0)
              goto LABEL_17;
            goto LABEL_16;
          }
          IPC::ConnectionSendSyncResult<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>::takeReply((uint64_t)v89, (uint64_t)&v65);
          v15 = off_1ECE713E8;
          if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
LABEL_51:
            v53 = *(CFTypeRef **)(a1 + 8);
            LOWORD(buf) = *(_WORD *)v89;
            BYTE2(buf) = v89[2];
            v78 = 0;
            v79 = *(_QWORD *)&v89[16];
            LOBYTE(v80) = v90;
            LOBYTE(v81) = 0;
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
            v88 = 0;
            WebKit::WebFrame::didReceivePolicyDecision(v53, v25, (__int16 *)&buf);
            WebKit::PolicyDecision::~PolicyDecision(&buf, v54);
            WebKit::PolicyDecision::~PolicyDecision((const char ***)v89, v55);
            goto LABEL_43;
          }
          v12 = *(WebKit::WebFrame **)(a1 + 8);
          v14 = *((_QWORD *)v12 + 10);
          v17 = WebKit::WebFrame::page(v12);
          if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)))
          {
            v51 = *(const char ***)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)) + 40);
LABEL_50:
            v52 = v89[2];
            LODWORD(buf) = 134219264;
            *(const char ***)((char *)p_buf + 4) = (const char **)a1;
            WORD2(v78) = 2048;
            *(const char ***)((char *)p_buf + 14) = (const char **)v12;
            HIWORD(v79) = 2048;
            v80 = v14;
            v81 = 2048;
            *(const char ***)((char *)p_buf + 34) = (const char **)v17;
            v82 = 2048;
            *(const char ***)((char *)p_buf + 44) = v51;
            v83 = 1024;
            *(_DWORD *)((char *)p_buf + 54) = v52;
            _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: Got policyAction %u from sync IPC", (uint8_t *)&buf, 0x3Au);
            goto LABEL_51;
          }
LABEL_53:
          v51 = 0;
          goto LABEL_50;
        }
      }
      else if (v103)
      {
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 32) + 56))(v23 + 32);
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 1854;
        *(_QWORD *)(v37 + 8) = v36;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        *(_QWORD *)v89 = v37;
        IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode((IPC::Encoder *)v37, (uint64_t)v102);
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v38 = off_1E34EFAA0;
        v65 = v38;
        v66 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        (*(void (**)(uint64_t, _BYTE *, _QWORD **, _QWORD))(*(_QWORD *)(v23 + 32) + 40))(v23 + 32, v89, &v65, 0);
        v40 = v65;
        v65 = 0;
        if (v40)
          (*(void (**)(_QWORD *))(*v40 + 8))(v40);
        v41 = *(IPC::Encoder **)v89;
        *(_QWORD *)v89 = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v39);
          WTF::fastFree(v42, v43);
        }
        v44 = *(CFTypeRef **)(a1 + 8);
        LOWORD(v65) = 0;
        BYTE2(v65) = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69[0] = 0;
        v70 = 0;
        LOBYTE(v71) = 0;
        v72 = 0;
        v73 = 0;
        v75 = 0;
        WebKit::WebFrame::didReceivePolicyDecision(v44, v25, (__int16 *)&v65);
        if (v75)
        {
          v46 = v74;
          v74 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v45);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
        if (v72)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v71);
        if (v70)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v69, v45);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_53;
  }
  v47 = *a12;
  *a12 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
LABEL_17:
  if (v103)
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v102);
}

IPC::Encoder *IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  IPC::Encoder *result;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  IPC::Decoder *v12;
  IPC::Decoder *v13;
  WTF::StringImpl *v14;
  IPC::Decoder *v15;
  WTF *v16;
  void *v17;
  void *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  __int128 v22[9];
  char v23;
  uint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;
  IPC::Decoder *v28[5];
  _BYTE v29[120];
  const char **v30;
  __int16 v31;
  WTF::StringImpl *v32;
  char v33;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (!result)
  {
    *(_BYTE *)a1 = 3;
    *(_DWORD *)(a1 + 200) = 1;
    return result;
  }
  v8 = (uint64_t)result;
  v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3660, v6, &v27, (uint64_t *)&v26);
  IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v26, *a3);
  IPC::Connection::sendSyncMessage(v8, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  if (!v25)
  {
    LOBYTE(v22[0]) = 0;
    v23 = 0;
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>((uint64_t)v28, v24);
    if (v33)
    {
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]((uint64_t)v22, (__int128 *)v28);
      v23 = 1;
    }
    std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v10);
    if (v23)
    {
      if (v25)
        goto LABEL_27;
      v12 = (IPC::Decoder *)v24;
      v24 = 0;
      v28[0] = v12;
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]((uint64_t)&v28[1], v22);
      v13 = v28[0];
      v28[0] = 0;
      *(_QWORD *)a1 = v13;
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100](a1 + 8, (__int128 *)&v28[1]);
      *(_DWORD *)(a1 + 200) = 0;
      if (v33)
      {
        v14 = v32;
        v32 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if ((_BYTE)v31)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v30);
      if (v29[112])
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v29, v11);
      v15 = v28[0];
      v28[0] = 0;
      if (v15)
      {
        IPC::Decoder::~Decoder(v15);
        WTF::fastFree(v16, v17);
      }
    }
    else
    {
      *(_BYTE *)a1 = 13;
      *(_DWORD *)(a1 + 200) = 1;
    }
    std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
    v9 = v25;
    if (v25 == -1)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v25 != 1)
  {
LABEL_27:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::ConnectionSendSyncResult<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>::takeReply(v21);
  }
  *(_BYTE *)a1 = (_BYTE)v24;
  v9 = 1;
  *(_DWORD *)(a1 + 200) = 1;
LABEL_23:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34EF848[v9])(v28, &v24);
LABEL_24:
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

void IPC::ConnectionSendSyncResult<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>::takeReply(uint64_t a1, uint64_t a2)
{
  WebKit::WebGeolocationClient *v2;
  void *v3;

  if (*(_DWORD *)(a2 + 200))
  {
    v2 = (WebKit::WebGeolocationClient *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::WebGeolocationClient::~WebGeolocationClient(v2, v3);
  }
  else
  {
    std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100](a1, (__int128 *)(a2 + 8));
  }
}

void WebKit::WebGeolocationClient::~WebGeolocationClient(WebKit::WebGeolocationClient *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebKit::WebGeolocationClient *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = this;
      WTF::fastFree((WTF *)v2, a2);
      this = v5;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebGeolocationClient::geolocationDestroyed(WebKit::WebGeolocationClient *this)
{
  WebKit::WebProcess *v2;
  WebKit::WebGeolocationManager *v3;
  uint64_t v4;
  WebKit::WebPage *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v9;
  unsigned int v10;
  WebKit::WebProcess *v11;
  _QWORD v12[2];

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v12[0] = "WebGeolocationManager";
  v12[1] = 22;
  v3 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v2 + 34, (WTF::ASCIILiteralHash *)v12);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v4)
    v5 = (WebKit::WebPage *)(v4 - 16);
  else
    v5 = 0;
  WebKit::WebGeolocationManager::unregisterWebPage(v3, v5);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  return WTF::fastFree(this, v6);
}

WTF::StringImpl *WebKit::WebGeolocationClient::startUpdating(WebKit::WebGeolocationClient *this, const WTF::String *a2, int a3)
{
  WebKit::WebProcess *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebKit::WebPage *v9;
  WebKit::WebProcess *v11;
  _QWORD v12[2];

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v12[0] = "WebGeolocationManager";
  v12[1] = 22;
  v7 = (WTF::StringImpl *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v6 + 34, (WTF::ASCIILiteralHash *)v12);
  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v8)
    v9 = (WebKit::WebPage *)(v8 - 16);
  else
    v9 = 0;
  return WebKit::WebGeolocationManager::registerWebPage(v7, v9, a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationClient::stopUpdating(WebKit::WebGeolocationClient *this)
{
  WebKit::WebProcess *v2;
  WebKit::WebGeolocationManager *v3;
  uint64_t v4;
  WebKit::WebPage *v5;
  WebKit::WebProcess *v7;
  _QWORD v8[2];

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v8[0] = "WebGeolocationManager";
  v8[1] = 22;
  v3 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v2 + 34, (WTF::ASCIILiteralHash *)v8);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v4)
    v5 = (WebKit::WebPage *)(v4 - 16);
  else
    v5 = 0;
  return WebKit::WebGeolocationManager::unregisterWebPage(v3, v5);
}

WTF::StringImpl *WebKit::WebGeolocationClient::setEnableHighAccuracy(WebKit::WebGeolocationClient *this, int a2)
{
  WebKit::WebProcess *v4;
  WebKit::WebGeolocationManager *v5;
  uint64_t v6;
  WebKit::WebPage *v7;
  WebKit::WebProcess *v9;
  _QWORD v10[2];

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v10[0] = "WebGeolocationManager";
  v10[1] = 22;
  v5 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v4 + 34, (WTF::ASCIILiteralHash *)v10);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v6)
    v7 = (WebKit::WebPage *)(v6 - 16);
  else
    v7 = 0;
  return WebKit::WebGeolocationManager::setEnableHighAccuracyForPage(v5, v7, a2);
}

void WebKit::WebGeolocationClient::lastPosition(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[112] = 0;
}

void WebKit::WebGeolocationClient::requestPermission(WebKit::WebGeolocationClient *this, WebCore::Geolocation *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  WebKit::GeolocationPermissionRequestManager::startRequestForGeolocation(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

IPC::Encoder *WebKit::WebGeolocationClient::revokeAuthorizationToken(WebKit::WebGeolocationClient *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  return WebKit::GeolocationPermissionRequestManager::revokeAuthorizationToken(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

uint64_t *WebKit::WebGeolocationClient::cancelPermissionRequest(WebKit::WebGeolocationClient *this, WebCore::Geolocation *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  return WebKit::GeolocationPermissionRequestManager::cancelRequestForGeolocation(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

uint64_t WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  LOBYTE(v7) = *((_BYTE *)a4 + 8);
  *((_BYTE *)a4 + 8) = 0;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &off_1E34EF138;
  *(_QWORD *)(a1 + 8) = &unk_1E34EF630;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 45) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  v8 = *(unsigned int **)(a2 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(a1 + 88) = v8;
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(WebKit::WebLocalFrameLoaderClient *this, void *a2)
{
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient((WebKit::WebLocalFrameLoaderClient *)((char *)this + 8));
}

{
  WTF *v2;
  void *v3;

  WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(WebKit::WebLocalFrameLoaderClient *this, void *a2)
{
  WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient((WebKit::WebLocalFrameLoaderClient *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient((WebKit::WebLocalFrameLoaderClient *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebLocalFrameLoaderClient::loadedSubresourceDomains(WebKit::WebLocalFrameLoaderClient *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
    && (v8 = *(_QWORD *)(v7[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    *a2 = 0;
    a2[1] = 0;
    WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(a2, (uint64_t *)(v8 + 2208), (const WTF::StringImpl *)&v9);
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

BOOL WebKit::WebLocalFrameLoaderClient::hasWebView(WebKit::WebFrame **this)
{
  return WebKit::WebFrame::page(this[2]) != 0;
}

void WebKit::WebLocalFrameLoaderClient::detachedFromParent2(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9[2];

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    v4 = (WebKit::WebProcess *)CFRetain(*(CFTypeRef *)(v2 + 8));
    if (*((_BYTE *)this + 80))
    {
      v6 = WebKit::WebProcess::singleton(v4);
      v7 = WebKit::WebProcess::ensureNetworkProcessConnection(v6);
      if (!*((_BYTE *)this + 80))
      {
        __break(1u);
        return;
      }
      v8 = *(_QWORD *)(v7 + 24);
      v9[0] = (uint64_t *)(this + 7);
      v9[1] = (uint64_t *)(this + 9);
      IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(v8, v9);
      if (*((_BYTE *)this + 80))
        *((_BYTE *)this + 80) = 0;
    }
    v9[0] = 0;
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, uint64_t **))(**(_QWORD **)(v3 + 360) + 112))(*(_QWORD *)(v3 + 360), v3, this[2], v9);
    v5 = v9[0];
    v9[0] = 0;
    if (v5)
      CFRelease((CFTypeRef)v5[1]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 259;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v4, *a2);
  v5 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::documentLoaderDetached(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v9 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v9 + 1368))(v9) & 1) == 0)
          {
            v10 = *(_QWORD *)(v9[2] + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              if ((a3 & 1) == 0)
              {
                v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 16) + 56))(v10 + 16);
                v12 = WTF::fastMalloc((WTF *)0x240);
                *(_WORD *)v12 = 1878;
                *(_QWORD *)(v12 + 8) = v11;
                *(_QWORD *)(v12 + 528) = v12 + 16;
                *(_QWORD *)(v12 + 536) = v12 + 16;
                *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
                *(_OWORD *)(v12 + 560) = 0u;
                IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
                v17 = (IPC::Encoder *)v12;
                *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a2;
                (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v10 + 16) + 32))(v10 + 16, &v17, 0);
                v14 = v17;
                v17 = 0;
                if (v14)
                {
                  IPC::Encoder::~Encoder(v14, v13);
                  WTF::fastFree(v15, v16);
                }
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::assignIdentifierToInitialRequest(uint64_t a1, uint64_t a2, WebCore::DocumentLoader *a3, WebCore::ResourceRequestBase *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;

  v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = a3 && (v11 = WebCore::DocumentLoader::frameLoader(a3)) != 0 && *(_QWORD *)(v11 + 96) == (_QWORD)a3;
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, WebCore::ResourceRequestBase *, _BOOL8))(**(_QWORD **)(v9 + 368) + 16))(*(_QWORD *)(v9 + 368), v9, *(_QWORD *)(a1 + 16), a2, a4, v10);
    WebKit::WebPage::addResourceRequest(v9, a2, a4);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;

  v9 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v9)
  {
    v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v11 = *((_BYTE *)a4 + 147);
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, WebCore::ResourceRequestBase *, uint64_t))(**(_QWORD **)(v10 + 368) + 24))(*(_QWORD *)(v10 + 368), v10, *(_QWORD *)(a1 + 16), a3, a4, a5);
    if ((WebCore::ResourceRequestBase::isNull(a4) & 1) == 0)
    {
      *((_BYTE *)a4 + 147) = v11;
      WebCore::ResourceRequestBase::setIsAppInitiated(a4);
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v5)
    return 1;
  v6 = v5;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v6 + 368) + 72))(*(_QWORD *)(v6 + 368), v6, *(_QWORD *)(a1 + 16), a3);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  return v7;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canAuthenticateAgainstProtectionSpace()
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v7)
  {
    v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 368) + 32))(*(_QWORD *)(v8 + 368), v8, *(_QWORD *)(a1 + 16), a3, a4);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveContentLength(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v7)
  {
    v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v8 + 368) + 40))(*(_QWORD *)(v8 + 368), v8, *(_QWORD *)(a1 + 16), a3, a4);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishDataDetection(WebKit::WebFrame **this, NSArray *a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = WebKit::WebFrame::page(this[2]);
  if (v3)
  {
    v4 = (CFTypeRef *)v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebPage::setDataDetectionResults((WebKit::WebPage *)v4, a2);
    CFRelease(v4[1]);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v5)
  {
    v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v6 + 368) + 48))(*(_QWORD *)(v6 + 368), v6, *(_QWORD *)(a1 + 16), a3);
    WebKit::WebPage::removeResourceRequest(v6, a3);
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailLoading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v7)
  {
    v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 368) + 56))(*(_QWORD *)(v8 + 368), v8, *(_QWORD *)(a1 + 16), a3, a4);
    WebKit::WebPage::removeResourceRequest(v8, a3);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidDispatchOnloadEvents(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *))(**(_QWORD **)(v3 + 360) + 192))(*(_QWORD *)(v3 + 360), v3, this[2]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  NSObject *v16;
  WebKit::WebFrame *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebKit::WebProcess *v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  void *v26;
  IPC::Encoder *v27;
  _BYTE buf[22];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 96);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 24);
      v26 = 0;
      (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v3 + 360) + 40))(*(_QWORD *)(v3 + 360), v3, this[2], &v26);
      *(_OWORD *)buf = *((_OWORD *)this[2] + 5);
      v5 = *(_QWORD *)(v4 + 2528);
      {
        v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v23);
      }
      v6 = v3 + 32;
      v27 = (IPC::Encoder *)&off_1E34E0698;
      WebKit::UserData::transform(v26, (uint64_t)&v27, (WebKit **)&v24);
      v7 = v24;
      if (v24)
        CFRetain(v24[1]);
      v25 = v7;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v3 + 32);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1909;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v27 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, (uint64_t *)buf);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v5;
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v9, (WebCore::ResourceRequest *)(v4 + 872));
      IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v25);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v3 + 32, &v27, 0);
      v11 = v27;
      v27 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v12, v13);
      }
      if (v7)
        CFRelease(v7[1]);
      v14 = v24;
      v24 = 0;
      if (v14)
        CFRelease(v14[1]);
      v15 = (CFTypeRef *)v26;
      v26 = 0;
      if (v15)
        CFRelease(v15[1]);
      if (*(_DWORD *)(v4 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    else
    {
      v16 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_FAULT))
      {
        v17 = this[2];
        v18 = *((_QWORD *)v17 + 10);
        v19 = WebKit::WebFrame::page(v17);
        if (WebKit::WebFrame::page(this[2]))
          v20 = *(_QWORD *)(WebKit::WebFrame::page(this[2]) + 40);
        else
          v20 = 0;
        v21 = *(_QWORD *)(*((_QWORD *)this[11] + 1) + 280);
        v22 = *(unsigned __int8 *)(v21 + 80);
        LODWORD(v21) = *(_DWORD *)(v21 + 64);
        *(_DWORD *)buf = 134219520;
        *(_QWORD *)&buf[4] = this;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v17;
        v29 = 2048;
        v30 = v18;
        v31 = 2048;
        v32 = v19;
        v33 = 2048;
        v34 = v20;
        v35 = 1024;
        v36 = v22;
        v37 = 1024;
        v38 = v21;
        _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad: Called with no provisional DocumentLoader (frameState=%hhu, stateForDebugging=%i)", buf, 0x40u);
      }
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeProvisionalURL(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13[3];
  IPC::Encoder *v14;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 96);
    ++*(_DWORD *)(v4 + 24);
    *(_OWORD *)v13 = *((_OWORD *)this[2] + 5);
    v5 = *(_QWORD *)(v4 + 2528);
    v6 = (uint64_t *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 872));
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 56))(v3 + 32);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1868;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v14 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, v13);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v5;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v6);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 32) + 32))(v3 + 32, &v14, 0);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      --*(_DWORD *)(v4 + 24);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidCancelClientRedirect(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10[3];
  IPC::Encoder *v11;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *))(**(_QWORD **)(v3 + 360) + 176))(*(_QWORD *)(v3 + 360), v3, this[2]);
    *(_OWORD *)v10 = *((_OWORD *)this[2] + 5);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 56))(v3 + 32);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 1861;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v11 = (IPC::Encoder *)v5;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, v10);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 32) + 32))(v3 + 32, &v11, 0);
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillPerformClientRedirect(uint64_t a1, uint64_t *a2, char a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18[3];
  IPC::Encoder *v19;

  v10 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, double, double))(**(_QWORD **)(v11 + 360) + 184))(*(_QWORD *)(v11 + 360), v11, *(_QWORD *)(a1 + 16), a2, a4, a5);
    *(_OWORD *)v18 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 32) + 56))(v11 + 32);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2090;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v19 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, v18);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
    *(double *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a4;
    *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a3;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v11 + 32) + 32))(v11 + 32, &v19, 0);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v16, v17);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeLocationWithinPage(WebKit::WebFrame **this)
{
  uint64_t v2;
  CFTypeRef *v3;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = (CFTypeRef *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::didSameDocumentNavigationForFrame((WebKit::WebPage *)v3, this[2]);
    CFRelease(v3[1]);
  }
}

uint64_t WebCore::areRegistrableDomainsEqual(WebCore *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  WebCore::RegistrableDomain::RegistrableDomain(&v10, this);
  v4 = WTF::URL::host(a2);
  v7 = WebCore::RegistrableDomain::matches(&v10, v4, v5);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

void WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WebCore::UserGestureIndicator *v9;
  WebCore::UserGestureIndicator *v10;
  IPC::Encoder *v11;
  uint64_t v12;
  _DWORD *v13;
  IPC::Encoder *v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  CFTypeRef *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  CFTypeRef *v25;
  CFTypeRef *v26;
  __int128 v27;
  WebKit::WebProcess *v28;
  CFTypeRef *v29;
  CFTypeRef *v30;
  uint64_t v31;
  _DWORD *v32;
  void *v33;
  IPC::Encoder *v34;
  int v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  char v53;
  char v54;
  char v55;
  __int16 v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  char v61;
  char v62;
  __int16 v63;
  char v64;
  char v65;
  char v66;
  char v67;
  _BYTE v68[312];
  _QWORD v69[38];
  uint64_t v70;
  _QWORD v71[27];

  v71[26] = *MEMORY[0x1E0C80C00];
  v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v33 = 0;
    v6 = (WebKit::WebProcess *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, void **))(**(_QWORD **)(v5 + 360) + 96))(*(_QWORD *)(v5 + 360), v5, *(_QWORD *)(a1 + 16), 1, &v33);
    v35 = 16646149;
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v6 = WebKit::WebProcess::WebProcess(v7);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    }
    v8 = *(_QWORD *)(v5 + 40);
    WebCore::UserGestureIndicator::currentUserGesture(v6);
    WebKit::WebProcess::userGestureTokenIdentifier((uint64_t)v7, v8, 1, (uint64_t *)&v32, &v36);
    v10 = (WebCore::UserGestureIndicator *)WebCore::UserGestureIndicator::currentUserGesture(v9);
    v11 = v34;
    if (v34)
    {
      WebCore::UserGestureIndicator::currentUserGesture(v10);
      v27 = *(_OWORD *)(v31 + 112);
      v37 = *(_OWORD *)(v31 + 96);
      v38 = v27;
    }
    else
    {
      LOBYTE(v37) = 0;
      LOBYTE(v38) = 0;
    }
    v39 = 1;
    v40 = 0;
    v41 = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v42);
    v44 = 0;
    v45 = 0;
    v43 = v43 & 0xF1 | 4;
    v46 = 256;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 160);
    if (v12)
      LOBYTE(v12) = *(_QWORD *)(v12 + 8) != 0;
    v47 = v12;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v68);
    v68[296] = 0;
    v68[304] = 0;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v69);
    v69[37] = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v70);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v71);
    if (v11)
    {
      v13 = (_DWORD *)v31;
      v31 = 0;
      if (v13)
        WTF::RefCounted<WebCore::UserGestureToken>::deref(v13);
    }
    v14 = v34;
    v34 = 0;
    if (v14)
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v14);
    v15 = v32;
    v32 = 0;
    if (v15)
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v15);
    v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 296) + 736);
    {
      v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v28);
    }
    v17 = v5 + 32;
    v34 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v33, (uint64_t)&v34, (WebKit **)&v29);
    v18 = v29;
    if (v29)
      CFRetain(v29[1]);
    v30 = v18;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v5 + 32);
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 1916;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v34 = (IPC::Encoder *)v20;
    *IPC::Encoder::grow((IPC::Encoder *)v20, 1uLL, 1) = a2;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, v16);
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode((IPC::Encoder *)v20, (uint64_t)&v35);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v20, (uint64_t *)&v30);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v17 + 32))(v5 + 32, &v34, 0);
    v22 = v34;
    v34 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
    if (v18)
      CFRelease(v18[1]);
    v25 = v29;
    v29 = 0;
    if (v25)
      CFRelease(v25[1]);
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v35);
    v26 = (CFTypeRef *)v33;
    v33 = 0;
    if (v26)
      CFRelease(v26[1]);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidPushStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
  WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReplaceStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
  WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidPopStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
  WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidExplicitOpen(WebKit::WebFrame **this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14[3];
  IPC::Encoder *v15;

  v6 = WebKit::WebFrame::page(this[2]);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    *(_OWORD *)v14 = *((_OWORD *)this[2] + 5);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 56))(v7 + 32);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1881;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v15 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, v14);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a3);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v7 + 32) + 32))(v7 + 32, &v15, 0);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailProvisionalLoad(uint64_t a1, WebCore::ResourceError *a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  WebKit::WebFrame *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  CFTypeRef v20;
  uint64_t *v21;
  uint64_t v22;
  CFTypeRef *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  CFTypeRef *v30;
  WTF::StringImpl *v31;
  CFTypeRef v32;
  uint64_t v33;
  CFTypeRef v34;
  CFTypeRef *v35;
  uint64_t v36;
  WebKit::WebProcess *v37;
  char v38;
  CFTypeRef *v39;
  CFTypeRef *v40;
  _BYTE v41[192];
  CFTypeRef cf;
  void *v43;
  IPC::Encoder *v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  WebKit::WebFrame *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  CFTypeRef v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    if (!*(_BYTE *)(v9 + 2254))
    {
      v38 = a4;
      v10 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(WebKit::WebFrame **)(a1 + 16);
        v12 = *((_QWORD *)v11 + 10);
        v13 = WebKit::WebFrame::page(v11);
        if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
          v14 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
        else
          v14 = 0;
        *(_DWORD *)buf = 134219008;
        v46 = a1;
        v47 = 2048;
        v48 = v11;
        v49 = 2048;
        v50 = v12;
        v51 = 2048;
        v52 = v13;
        v53 = 2048;
        v54 = v14;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidFailProvisionalLoad:", buf, 0x34u);
      }
      v43 = 0;
      (*(void (**)(_QWORD, uint64_t, _QWORD, WebCore::ResourceError *, void **))(**(_QWORD **)(v9 + 360) + 48))(*(_QWORD *)(v9 + 360), v9, *(_QWORD *)(a1 + 16), a2, &v43);
      v15 = *(_QWORD *)(v9 + 632);
      if (v15)
      {
        v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        WebKit::WebExtensionControllerProxy::didFailLoadForFrame(v15, (WebKit::WebPage *)v9, *(WebKit::WebFrame **)(a1 + 16), (const WTF::URL *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 112));
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      WebKit::WebPage::SandboxExtensionTracker::didFailProvisionalLoad((const char ***)(v9 + 688), *(WebKit::WebFrame **)(a1 + 16));
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v41);
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 96);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 2528);
        WebCore::ResourceRequestBase::operator=((uint64_t)v41, v17 + 872);
        v19 = *(const void **)(v17 + 1064);
        if (v19)
          CFRetain(*(CFTypeRef *)(v17 + 1064));
        v20 = cf;
        cf = v19;
        if (v20)
          CFRelease(v20);
      }
      else
      {
        v18 = 0;
      }
      WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)buf);
      v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 112);
      {
        v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v37);
      }
      v22 = v9 + 32;
      v44 = (IPC::Encoder *)&off_1E34E0698;
      WebKit::UserData::transform(v43, (uint64_t)&v44, (WebKit **)&v39);
      v23 = v39;
      if (v39)
        CFRetain(v39[1]);
      v40 = v23;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v9 + 32);
      v25 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v25 = 1883;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(v25 + 528) = v25 + 16;
      *(_QWORD *)(v25 + 536) = v25 + 16;
      *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v25 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
      v44 = (IPC::Encoder *)v25;
      IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v25, (char *)buf);
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v25, (WebCore::ResourceRequest *)v41);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v18;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, v21);
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v25, a2);
      *IPC::Encoder::grow((IPC::Encoder *)v25, 1uLL, 1) = a3;
      IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v25, (uint64_t *)&v40);
      *IPC::Encoder::grow((IPC::Encoder *)v25, 1uLL, 1) = v38;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v22 + 32))(v9 + 32, &v44, 0);
      v27 = v44;
      v44 = 0;
      if (v27)
      {
        IPC::Encoder::~Encoder(v27, v26);
        WTF::fastFree(v28, v29);
      }
      if (v23)
        CFRelease(v23[1]);
      v30 = v39;
      v39 = 0;
      if (v30)
        CFRelease(v30[1]);
      v31 = v58;
      v58 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
        else
          *(_DWORD *)v31 -= 2;
      }
      if (v57 != -1)
        ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EF818[v57])(&v44, &v56);
      v57 = -1;
      v32 = v55;
      v55 = 0;
      if (v32)
        CFRelease(v32);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v46 + 4));
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
      if (v33)
      {
        v36 = *(_QWORD *)(v33 + 8);
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
      }
      v34 = cf;
      cf = 0;
      if (v34)
        CFRelease(v34);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v41);
      v35 = (CFTypeRef *)v43;
      v43 = 0;
      if (v35)
        CFRelease(v35[1]);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailLoad(WebKit::WebFrame **this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  WebKit::WebFrame *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebKit::WebFrame *v17;
  uint64_t v18;
  CFTypeRef *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  CFTypeRef *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  uint64_t v29;
  CFTypeRef *v30;
  uint64_t v31;
  WebKit::WebProcess *v32;
  CFTypeRef *v33;
  CFTypeRef *v34;
  __int128 v35;
  void *v36;
  IPC::Encoder *v37;
  _BYTE buf[12];
  __int16 v39;
  WebKit::WebFrame *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  CFTypeRef cf;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = WebKit::WebFrame::page(this[2]);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v6 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = this[2];
      v8 = *((_QWORD *)v7 + 10);
      v9 = WebKit::WebFrame::page(v7);
      if (WebKit::WebFrame::page(this[2]))
        v10 = *(_QWORD *)(WebKit::WebFrame::page(this[2]) + 40);
      else
        v10 = 0;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = this;
      v39 = 2048;
      v40 = v7;
      v41 = 2048;
      v42 = v8;
      v43 = 2048;
      v44 = v9;
      v45 = 2048;
      v46 = v10;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidFailLoad:", buf, 0x34u);
    }
    v36 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 88);
    ++*(_DWORD *)(v11 + 24);
    v12 = *(_QWORD *)(v11 + 2528);
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, const WebCore::ResourceError *, void **))(**(_QWORD **)(v5 + 360) + 88))(*(_QWORD *)(v5 + 360), v5, this[2], a2, &v36);
    v13 = *(_QWORD *)(v5 + 632);
    if (v13)
    {
      ++*(_DWORD *)(v13 + 16);
      v14 = this[2];
      WebKit::WebFrame::url(v14, (uint64_t)buf);
      WebKit::WebExtensionControllerProxy::didFailLoadForFrame(v13, (WebKit::WebPage *)v5, v14, (const WTF::URL *)buf);
      v16 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v13 + 16));
    }
    v17 = this[2];
    v35 = *((_OWORD *)v17 + 5);
    WebKit::WebFrame::info(v17, (uint64_t)buf);
    {
      v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v32);
    }
    v18 = v5 + 32;
    v37 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v36, (uint64_t)&v37, (WebKit **)&v33);
    v19 = v33;
    if (v33)
      CFRetain(v33[1]);
    v34 = v19;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v5 + 32);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1882;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v37 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v21, (uint64_t *)&v35);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v21, buf);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v21, (WebCore::ResourceRequest *)(v11 + 872));
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v21, 8uLL, 8) = v12;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v21, a2);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v21, (uint64_t *)&v34);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v18 + 32))(v5 + 32, &v37, 0);
    v23 = v37;
    v37 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v24, v25);
    }
    if (v19)
      CFRelease(v19[1]);
    v26 = v33;
    v33 = 0;
    if (v26)
      CFRelease(v26[1]);
    v27 = v50;
    v50 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v49 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EF818[v49])(&v37, &v48);
    v49 = -1;
    v28 = cf;
    cf = 0;
    if (v28)
      CFRelease(v28);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
    v29 = *((_QWORD *)this[2] + 9);
    if (v29)
    {
      v31 = *(_QWORD *)(v29 + 8);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
    }
    if (*(_DWORD *)(v11 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      --*(_DWORD *)(v11 + 24);
    v30 = (CFTypeRef *)v36;
    v36 = 0;
    if (v30)
      CFRelease(v30[1]);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchCreatePage(uint64_t a1, const WebCore::NavigationAction *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[36];
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  _QWORD v17[2];

  v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v6)
    return 0;
  v7 = v6;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v12[0] = 0;
  v12[4] = 0;
  v12[8] = 0;
  v12[12] = 0;
  v12[16] = 0;
  v12[20] = 0;
  v12[24] = 0;
  v12[28] = 0;
  v12[32] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v16 = (a3 == 0) | 0x100;
  WebCore::Chrome::createWindow(*(WebCore::Chrome **)(*(_QWORD *)(v7 + 48) + 48), *(WebCore::LocalFrame **)(*(_QWORD *)(a1 + 88) + 8), (const WebCore::WindowFeatures *)v12, a2);
  if (v11)
  {
    if (*(_BYTE *)(*(_QWORD *)(v11 + 160) + 144))
      v9 = 0;
    else
      v9 = *(_QWORD *)(v11 + 160);
    WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v11);
  }
  else
  {
    v9 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v8);
  CFRelease(*(CFTypeRef *)(v7 + 8));
  return v9;
}

void WebKit::WebLocalFrameLoaderClient::dispatchShow(WebKit::WebFrame **this)
{
  uint64_t v1;
  CFTypeRef *v2;

  v1 = WebKit::WebFrame::page(this[2]);
  if (v1)
  {
    v2 = (CFTypeRef *)v1;
    CFRetain(*(CFTypeRef *)(v1 + 8));
    WebKit::WebPage::show((WebKit::WebPage *)v2);
    CFRelease(v2[1]);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(uint64_t a1, const WebCore::ResourceResponse *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  CFTypeRef *v11;
  NSObject *v12;
  WebKit::WebFrame *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  WebKit::WebFrame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char canShowResponse;
  uint64_t v24;
  CFTypeRef *v25;
  char isDisplayingInitialEmptyDocument;
  WebCore::Document *v27;
  char v28;
  NSObject *v29;
  WebKit::WebFrame *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38[2];
  _QWORD v39[4];
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  WebKit::WebFrame *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v10)
  {
    v11 = (CFTypeRef *)v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    if (*(_QWORD *)WebCore::ResourceRequestBase::url(a3))
    {
      if (!WebKit::WebPage::shouldSkipDecidePolicyForResponse((WebKit::WebPage *)v11, a2))
      {
        canShowResponse = WebKit::WebPage::canShowResponse((WebKit::WebPage *)v11, a2);
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 96);
        v37 = canShowResponse;
        if (v24)
        {
          ++*(_DWORD *)(v24 + 24);
          v35 = *(_QWORD *)(v24 + 2528);
        }
        else
        {
          v35 = 0;
        }
        v25 = *(CFTypeRef **)(a1 + 16);
        CFRetain(v25[1]);
        v36 = WebKit::WebFrame::setUpPolicyListener((uint64_t)v25, a5, 0);
        isDisplayingInitialEmptyDocument = WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 64));
        v27 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 296);
        if (v27)
          v28 = *(_BYTE *)WebCore::Document::crossOriginOpenerPolicy(v27);
        else
          v28 = 1;
        WebKit::WebFrame::info((WebKit::WebFrame *)v25, (uint64_t)buf);
        v39[0] = buf;
        v39[1] = v35;
        v39[2] = a2;
        v39[3] = a3;
        v40 = v37;
        v41 = a4;
        v42 = isDisplayingInitialEmptyDocument;
        v43 = v28;
        CFRetain(v25[1]);
        v38[0] = (uint64_t)v25;
        v38[1] = v36;
        IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>((uint64_t)(v11 + 4), (uint64_t)v39, v38);
        if (v38[0])
          CFRelease(*(CFTypeRef *)(v38[0] + 8));
        WebKit::FrameInfoData::~FrameInfoData((WebKit::FrameInfoData *)buf);
        CFRelease(v25[1]);
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
          else
            --*(_DWORD *)(v24 + 24);
        }
        goto LABEL_10;
      }
      v12 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_9:
        v18 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_10:
        CFRelease(v11[1]);
        return;
      }
      v13 = *(WebKit::WebFrame **)(a1 + 16);
      v14 = *((_QWORD *)v13 + 10);
      v15 = WebKit::WebFrame::page(v13);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
        v16 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      else
        v16 = 0;
      *(_DWORD *)buf = 134219008;
      v45 = a1;
      v46 = 2048;
      v47 = v13;
      v48 = 2048;
      v49 = v14;
      v50 = 2048;
      v51 = v15;
      v52 = 2048;
      v53 = v16;
      v17 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePol"
            "icyForResponse: continuing because injected bundle says so";
    }
    else
    {
      v12 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
      v19 = *(WebKit::WebFrame **)(a1 + 16);
      v20 = *((_QWORD *)v19 + 10);
      v21 = WebKit::WebFrame::page(v19);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
        v22 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      else
        v22 = 0;
      *(_DWORD *)buf = 134219008;
      v45 = a1;
      v46 = 2048;
      v47 = v19;
      v48 = 2048;
      v49 = v20;
      v50 = 2048;
      v51 = v21;
      v52 = 2048;
      v53 = v22;
      v17 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePol"
            "icyForResponse: continuing because the url string is null";
    }
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, v17, buf, 0x34u);
    goto LABEL_9;
  }
  v29 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v30 = *(WebKit::WebFrame **)(a1 + 16);
    v31 = *((_QWORD *)v30 + 10);
    v32 = WebKit::WebFrame::page(v30);
    if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
      v33 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
    else
      v33 = 0;
    *(_DWORD *)buf = 134219008;
    v45 = a1;
    v46 = 2048;
    v47 = v30;
    v48 = 2048;
    v49 = v31;
    v50 = 2048;
    v51 = v32;
    v52 = 2048;
    v53 = v33;
    _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse: ignoring because there's no web page", buf, 0x34u);
  }
  v34 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
}

IPC::Encoder *IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1856;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v7, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v7, *(WebCore::ResourceResponseBase **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v7, *(WebCore::ResourceRequest **)(a2 + 24));
  LOBYTE(v8) = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)(a2 + 40));
  LOBYTE(v8) = *(_BYTE *)(a2 + 48);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = v8;
  LOBYTE(a2) = *(_BYTE *)(a2 + 49);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  v9 = *a3;
  v10 = a3[1];
  *a3 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34EFAF0;
  v11[1] = v9;
  v11[2] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v18, v17, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, WebKit::WebPage *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  _DWORD *v20;
  const WebCore::ResourceRequest *v21;
  uint64_t v22;
  __int128 v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  WebKit::WebProcess *v41;
  uint64_t v42;
  _DWORD *v43;
  _QWORD v44[2];
  IPC::Encoder *v45;
  uint64_t v46[83];
  _BYTE v47[2];
  char v48;
  char v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  char canHandleRequest;
  char v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  int v61;
  BOOL v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  __int16 v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  _BYTE v76[312];
  char v77;
  __int16 v78;
  char v79;
  char v80;
  _BYTE v81[672];
  _BYTE v82[312];
  _QWORD v83[38];
  uint64_t v84;
  CFTypeRef v85[29];

  v85[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v13 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v13)
  {
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v15 = WebKit::WebFrame::setUpPolicyListener(*(_QWORD *)(a1 + 16), a7, 0);
    v47[0] = *(_BYTE *)(a2 + 868);
    v47[1] = WebKit::modifiersForNavigationAction((_BYTE *)a2);
    v16 = *(_BYTE *)(a2 + 476);
    v42 = v15;
    if (v16)
    {
      if (*(_BYTE *)(a2 + 474))
        v38 = *(_BYTE *)(a2 + 448) == 0;
      else
        v38 = 1;
      v39 = *(_BYTE *)(a2 + 472);
      if (v38)
        v39 = -2;
      v48 = v39;
      v17 = a5;
      if (v38)
        v16 = 0;
      else
        v16 = *(_BYTE *)(a2 + 473);
    }
    else
    {
      v17 = a5;
      v48 = -2;
    }
    v49 = v16;
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v18 = WebKit::WebProcess::WebProcess(v41);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
    }
    v19 = *(_QWORD *)(v14 + 40);
    v20 = *(_DWORD **)(a2 + 480);
    if (v20)
      ++*v20;
    v43 = v20;
    WebKit::WebProcess::userGestureTokenIdentifier((uint64_t)v18, v19, 1, (uint64_t *)&v43, &v50);
    v22 = *(_QWORD *)(a2 + 480);
    if (v22)
    {
      *(_DWORD *)v22 += 2;
      v23 = *(_OWORD *)(v22 + 112);
      v51 = *(_OWORD *)(v22 + 96);
      v52 = v23;
    }
    else
    {
      LOBYTE(v51) = 0;
      LOBYTE(v52) = 0;
    }
    canHandleRequest = WebKit::WebPage::canHandleRequest(a3, v21);
    v54 = *(_BYTE *)(a2 + 871);
    v24 = *(_DWORD **)(a2 + 488);
    if (v24)
      *v24 += 2;
    if (*(_BYTE *)(a2 + 476))
      v25 = *(_QWORD *)(a2 + 464);
    else
      v25 = 0;
    v55 = v24;
    v56 = v25;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v57);
    v59 = 0;
    v60 = 0;
    v58 = v58 & 0xF1 | 4;
    v61 = 0;
    v62 = *(_BYTE *)(a2 + 880) == 1;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76[0] = 0;
    v77 = 0;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0;
    if (*(_BYTE *)(a2 + 856))
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v76, (const WebCore::PrivateClickMeasurement *)(a2 + 544));
      v77 = 1;
    }
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v26 = *(unsigned __int8 *)(a6 + 136);
    if (*(_BYTE *)(a6 + 136))
    {
      WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v46, (WebKit::WebHitTestResultData **)a6, 0);
      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v81, v46);
      v27 = 1;
    }
    else
    {
      v27 = 0;
      v81[0] = 0;
    }
    v81[664] = v27;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v82);
    v82[296] = 0;
    v82[304] = 0;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v83);
    v83[37] = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v84);
    WebCore::ResourceRequest::ResourceRequest(v85, a3);
    if (v26)
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v46);
    if (v22)
    {
      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v22);
      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v22);
    }
    if (v20)
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v20);
    v28 = *(_QWORD *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(v28 + 8));
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 32) + 56))(v14 + 32);
    v30 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v30 = 1855;
    *(_QWORD *)(v30 + 8) = v29;
    *(_QWORD *)(v30 + 528) = v30 + 16;
    *(_QWORD *)(v30 + 536) = v30 + 16;
    *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v30 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
    v45 = (IPC::Encoder *)v30;
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode((IPC::Encoder *)v30, (uint64_t)v47);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, v17);
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v31 = &off_1E34EFB18;
    v31[1] = v28;
    v31[2] = v42;
    v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v44[0] = v31;
    v44[1] = v32;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)(v14 + 32) + 40))(v14 + 32, &v45, v44, 0);
    v34 = v44[0];
    v44[0] = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v33);
      WTF::fastFree(v36, v37);
    }
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v47);
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    v40 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v4;

  result = WebCore::FrameLoader::loaderForWebsitePolicies();
  if (v4)
  {
    WebKit::WebsitePoliciesData::applyToDocumentLoader(a2, (uint64_t)v4);
    result = (uint64_t)v4;
    if (v4[6] == 1)
      return (*(uint64_t (**)())(*(_QWORD *)v4 + 24))();
    else
      --v4[6];
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(uint64_t a1, uint64_t a2)
{
  return WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(a1 - 8, a2);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned int a11, uint64_t *a12)
{
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSendSubmitEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v6 = *a2;
    v7 = *(_QWORD *)(*a2 + 32);
    *(_DWORD *)(v7 + 24) += 2;
    v11 = v7;
    WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 528) + 8), &v10);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 352) + 72))(*(_QWORD *)(v5 + 352), v5, v7, v8, v10, *a2 + 40);
    if (v9)
      CFRelease(*(CFTypeRef *)(v9 + 8));
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSubmitForm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  CFTypeRef *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  CFTypeRef *v28;
  CFTypeRef *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebKit::WebProcess *v33;
  CFTypeRef *v34;
  CFTypeRef *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  IPC::Encoder *v42;

  v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v8 + 24) += 2;
    v40 = v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 528);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      WebKit::WebFrame::fromCoreFrame(v10, &v39);
      v13 = v39;
      if (v39)
      {
        v14 = a2 + 40;
        v38 = 0;
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void **))(**(_QWORD **)(v7 + 352)
                                                                                            + 64))(*(_QWORD *)(v7 + 352), v7, v40, *(_QWORD *)(a1 + 16), v39, v14, &v38);
        v15 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
        v36 = *(_OWORD *)(v13 + 80);
        v37 = v15;
        {
          v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v33);
        }
        v16 = v7 + 32;
        v41[0] = &off_1E34E0698;
        WebKit::UserData::transform(v38, (uint64_t)v41, (WebKit **)&v34);
        v17 = v34;
        if (v34)
          CFRetain(v34[1]);
        v35 = v17;
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v7 + 32);
        v19 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v19 = 2092;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 528) = v19 + 16;
        *(_QWORD *)(v19 + 536) = v19 + 16;
        *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v19 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
        v42 = (IPC::Encoder *)v19;
        IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v19, (uint64_t *)&v37);
        IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v19, (uint64_t *)&v36);
        IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v19, v14);
        IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v19, (uint64_t *)&v35);
        v20 = *a3;
        *a3 = 0;
        v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v21 = &off_1E34EFB40;
        v21[1] = v20;
        v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v41[0] = v21;
        v41[1] = v22;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v16 + 40))(v7 + 32, &v42, v41, 0);
        v24 = v41[0];
        v41[0] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v25 = v42;
        v42 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v23);
          WTF::fastFree(v26, v27);
        }
        if (v17)
          CFRelease(v17[1]);
        v28 = v34;
        v34 = 0;
        if (v28)
          CFRelease(v28[1]);
        v29 = (CFTypeRef *)v38;
        v38 = 0;
        if (v29)
          CFRelease(v29[1]);
        CFRelease(*(CFTypeRef *)(v13 + 8));
      }
      else
      {
        v30 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
    }
    else
    {
      v31 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    v32 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::setMainDocumentError(WebKit::WebLocalFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceError *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    WebKit::PluginView::manualLoadDidFail((unsigned __int8 *)result, a2);
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
    *((_BYTE *)this + 48) = 0;
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::startDownload(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t *a3, char a4)
{
  return WebKit::WebFrame::startDownload(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void WebKit::WebLocalFrameLoaderClient::willReplaceMultipartContent(WebKit::WebFrame **this)
{
  uint64_t v2;
  CFTypeRef *v3;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = (CFTypeRef *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::willReplaceMultipartContent((WebKit::WebPage *)v3, this[2]);
    CFRelease(v3[1]);
  }
}

void WebKit::WebLocalFrameLoaderClient::didReplaceMultipartContent(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *((_QWORD *)this[2] + 3);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 168))(*(_QWORD *)(v3 + 72), v3 + 1520);
      }
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::pluginWillHandleLoadError@<X0>(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::pluginWillHandleLoadError(a1, a2);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadingDataForCustomContentProvider>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1889;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v5, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

BOOL WebKit::WebLocalFrameLoaderClient::shouldGoToHistoryItem(WebKit::WebFrame **this, WebCore::HistoryItem *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v3 = WebKit::WebFrame::page(this[2]);
  v4 = v3;
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v5 = *((_QWORD *)a2 + 25) != 0;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 56))(v4 + 32);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2089;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v13 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2 + 44);
    *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = v5;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v4 + 32) + 32))(v4 + 32, &v13, 0);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return v4 != 0;
}

void WebKit::WebLocalFrameLoaderClient::didDisplayInsecureContent(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  CFTypeRef *v12;
  CFTypeRef *v13;
  WebKit::WebProcess *v14;
  CFTypeRef *v15;
  CFTypeRef *v16;
  __int128 v17;
  void *v18;
  IPC::Encoder *v19;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v18 = 0;
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v3 + 360) + 120))(*(_QWORD *)(v3 + 360), v3, this[2], &v18);
    v17 = *((_OWORD *)this[2] + 5);
    {
      v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
    }
    v4 = v3 + 32;
    v19 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v18, (uint64_t)&v19, (WebKit **)&v15);
    v5 = v15;
    if (v15)
      CFRetain(v15[1]);
    v16 = v5;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v3 + 32);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1880;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v19 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, (uint64_t *)&v17);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v7, (uint64_t *)&v16);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v3 + 32, &v19, 0);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    if (v5)
      CFRelease(v5[1]);
    v12 = v15;
    v15 = 0;
    if (v12)
      CFRelease(v12[1]);
    v13 = (CFTypeRef *)v18;
    v18 = 0;
    if (v13)
      CFRelease(v13[1]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::didRunInsecureContent(WebKit::WebFrame **this, WebCore::SecurityOrigin *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  WebKit::WebProcess *v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  __int128 v18;
  void *v19;
  IPC::Encoder *v20;

  v3 = WebKit::WebFrame::page(this[2]);
  if (v3)
  {
    v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v19 = 0;
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v4 + 360) + 128))(*(_QWORD *)(v4 + 360), v4, this[2], &v19);
    v18 = *((_OWORD *)this[2] + 5);
    {
      v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
    }
    v5 = v4 + 32;
    v20 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v19, (uint64_t)&v20, (WebKit **)&v16);
    v6 = v16;
    if (v16)
      CFRetain(v16[1]);
    v17 = v6;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v4 + 32);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1914;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v20 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v18);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v17);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v4 + 32, &v20, 0);
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    if (v6)
      CFRelease(v6[1]);
    v13 = v16;
    v16 = 0;
    if (v13)
      CFRelease(v13[1]);
    v14 = (CFTypeRef *)v19;
    v19 = 0;
    if (v14)
      CFRelease(v14[1]);
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::cancelledError(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  WebKit::cancelledError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedByContentBlockerError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedByContentBlockerError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::cannotShowURLError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::cannotShowURLError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::interruptedForPolicyChangeError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::interruptedForPolicyChangeError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedByContentFilterError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedByContentFilterError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::cannotShowMIMETypeError@<X0>(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::cannotShowMIMETypeError(a1, a2);
}

void WebKit::WebLocalFrameLoaderClient::fileDoesNotExistError(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
  WebKit::fileDoesNotExistError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::httpsUpgradeRedirectLoopError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::httpsUpgradeRedirectLoopError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::httpNavigationWithHTTPSOnlyError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::httpNavigationWithHTTPSOnlyError(a1, a2);
}

BOOL WebKit::WebLocalFrameLoaderClient::shouldFallBack(WebKit::WebLocalFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  int v3;
  const WTF::StringImpl *v4;
  int v5;
  const WTF::StringImpl *v6;
  _BOOL8 result;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  _BYTE v18[138];
  char v19;
  CFTypeRef cf;
  CFTypeRef v21;
  char v22;
  WTF::StringImpl *v23;
  uint64_t v24[5];
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  char v29;

  if ((byte_1ECE72EE4 & 1) == 0)
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v18);
    WebKit::cancelledError((WebKit *)v18, (uint64_t)&v23);
    v8 = (uint64_t)v23;
    v23 = 0;
    qword_1ECE72F08 = v8;
    WTF::URL::URL((uint64_t)&unk_1ECE72F10, v24);
    v10 = (WTF::StringImpl *)v24[0];
    qword_1ECE72F38 = v25;
    dword_1ECE72F40 = v26;
    word_1ECE72F44 = v27;
    qword_1ECE72F48 = v28;
    byte_1ECE72F50 = v29;
    v28 = 0;
    v25 = 0;
    v24[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = cf;
    cf = 0;
    if (v16)
      CFRelease(v16);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
    byte_1ECE72EE4 = 1;
  }
  if ((byte_1ECE72EE5 & 1) == 0)
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v18);
    v21 = 0;
    v22 = 0;
    v19 = v19 & 0xF1 | 4;
    WebKit::pluginWillHandleLoadError((WebKit *)v18, (uint64_t)&v23);
    v11 = (uint64_t)v23;
    v23 = 0;
    qword_1ECE72F58 = v11;
    WTF::URL::URL((uint64_t)&unk_1ECE72F60, v24);
    v13 = (WTF::StringImpl *)v24[0];
    qword_1ECE72F88 = v25;
    dword_1ECE72F90 = v26;
    word_1ECE72F94 = v27;
    qword_1ECE72F98 = v28;
    byte_1ECE72FA0 = v29;
    v28 = 0;
    v25 = 0;
    v24[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v17 = v21;
    v21 = 0;
    if (v17)
      CFRelease(v17);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v18, v12);
    byte_1ECE72EE5 = 1;
  }
  MEMORY[0x19AEB7BFC](a2);
  v3 = *((_DWORD *)a2 + 14);
  MEMORY[0x19AEB7BFC](&qword_1ECE72F08);
  result = 0;
  if (v3 != dword_1ECE72F40
    || (MEMORY[0x19AEB7BFC](a2),
        MEMORY[0x19AEB7BFC](&qword_1ECE72F08),
        (WTF::equal(*(WTF **)a2, (const WTF::StringImpl *)qword_1ECE72F08, v4) & 1) == 0))
  {
    MEMORY[0x19AEB7BFC](a2);
    v5 = *((_DWORD *)a2 + 14);
    MEMORY[0x19AEB7BFC](&qword_1ECE72F58);
    if (v5 != dword_1ECE72F90)
      return 1;
    MEMORY[0x19AEB7BFC](a2);
    MEMORY[0x19AEB7BFC](&qword_1ECE72F58);
    if ((WTF::equal(*(WTF **)a2, (const WTF::StringImpl *)qword_1ECE72F58, v6) & 1) == 0)
      return 1;
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canShowMIMETypeAsHTML(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  return 1;
}

void WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebKit::WebProcess *v10;
  WTF::StringImpl *v11;
  int haveStorageAccessQuirksForDomain;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  os_unfair_lock_s *v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *((_QWORD *)this[2] + 3);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
        {
          v6 = *(_QWORD *)(*((_QWORD *)this[11] + 1) + 296);
          if (v6)
          {
            v20[0] = (WTF::StringImpl *)WTF::URL::viewWithoutQueryOrFragmentIdentifier((WTF::URL *)(v6 + 736));
            v20[1] = v7;
            WTF::StringView::toStringWithoutCopying((uint64_t)v20, &v21);
            MEMORY[0x19AEABB0C](v22, &v21, 0);
            v9 = v21;
            v21 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v8);
              else
                *(_DWORD *)v9 -= 2;
            }
            v10 = WebKit::WebProcess::singleton(v9);
            WebCore::RegistrableDomain::RegistrableDomain(v20, (const WTF::URL *)v22);
            haveStorageAccessQuirksForDomain = WebKit::WebProcess::haveStorageAccessQuirksForDomain(v10, v20);
            v13 = v20[0];
            v20[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
              else
                *(_DWORD *)v13 -= 2;
            }
            if (haveStorageAccessQuirksForDomain)
            {
              v15 = WebKit::WebProcess::singleton(v13);
              v16 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v15) + 24);
              v20[0] = (WTF::StringImpl *)v22;
              WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(v6 + 16), v6);
              v17 = (unsigned int *)(*(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFLL);
              if (v17)
              {
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 + 1, v17));
              }
              v21 = (WTF::StringImpl *)v17;
              IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(v16, (uint64_t **)v20, (uint64_t *)&v21);
              WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0::~$_0((unsigned int **)&v21, v19);
            }
            v14 = v22[0];
            v22[0] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v11);
              else
                *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EFB68;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 273;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unsigned int **WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0::~$_0(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::generatedMIMETypeForURLScheme(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebKit::WebLocalFrameLoaderClient::saveViewStateToItem(uint64_t a1, uint64_t a2)
{
  WebKit::WebFrame *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  double result;

  v2 = *(WebKit::WebFrame **)(a1 + 16);
  v3 = *((_QWORD *)v2 + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
      {
        v6 = WebKit::WebFrame::page(v2);
        *(_BYTE *)(a2 + 280) = *(_BYTE *)(v6 + 1291) ^ 1;
        result = *(double *)(v6 + 1064);
        *(double *)(a2 + 244) = result;
        *(_QWORD *)(a2 + 252) = *(_QWORD *)(v6 + 1056);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::restoreViewState(uint64_t this)
{
  uint64_t v1;
  WebCore::LocalFrameView *v2;
  const WebCore::HistoryItem *v3;
  WebKit::WebFrame *v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebPage *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 88) + 8);
  v2 = *(WebCore::LocalFrameView **)(v1 + 288);
  if (v2)
  {
    v3 = *(const WebCore::HistoryItem **)(*(_QWORD *)(v1 + 184) + 16);
    v4 = *(WebKit::WebFrame **)(this + 16);
    v5 = *((_QWORD *)v4 + 3);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6)
    {
      v7 = (WebKit::WebPage *)WebKit::WebFrame::page(v4);
      return (uint64_t)WebKit::WebPage::restorePageState(v7, v3);
    }
    else
    {
      this = WebCore::LocalFrameView::wasScrolledByUser(v2);
      if ((this & 1) == 0)
      {
        WebCore::HistoryItem::scrollPosition(v3);
        return WebCore::LocalFrameView::setScrollPosition();
      }
    }
  }
  return this;
}

_QWORD *WebKit::WebLocalFrameLoaderClient::didFinishLoad(_QWORD *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this[2] + 72);
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
  }
  return this;
}

uint64_t WebKit::WebLocalFrameLoaderClient::updateCachedDocumentLoader(WebKit::WebFrame **this, WebCore::DocumentLoader *a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::WebFrame::page(this[2]);
  if (*(_QWORD *)(result + 1896))
  {
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 128) + 8) == *((_QWORD *)this[11] + 1))
    {
      v5 = result;
      result = WebCore::DocumentLoader::setNavigationID(a2);
      *(_QWORD *)(v5 + 1896) = 0;
    }
  }
  return result;
}

BOOL WebKit::WebLocalFrameLoaderClient::hasCustomUserAgent(WebKit::WebFrame **this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;

  v1 = WebKit::WebFrame::page(this[2]);
  if (!v1)
    return 0;
  v2 = v1;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  v3 = *(_BYTE *)(v2 + 112) != 0;
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

uint64_t WebKit::WebLocalFrameLoaderClient::transitionToCommittedFromCachedFrame(uint64_t a1)
{
  WebKit::WebFrame *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  const WebCore::ResourceResponse *v6;
  WebKit::WebPage *v7;

  v2 = *(WebKit::WebFrame **)(a1 + 16);
  v3 = *((_QWORD *)v2 + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
  {
    v6 = (const WebCore::ResourceResponse *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280)
                                                       + 88)
                                           + 1272);
    v7 = (WebKit::WebPage *)WebKit::WebFrame::page(v2);
    result = WebKit::WebPage::shouldUseCustomContentProviderForResponse(v7, v6);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(a1 + 50) = result;
  *(_BYTE *)(a1 + 51) = 1;
  return result;
}

void WebKit::WebLocalFrameLoaderClient::transitionToCommittedForNewPage(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  char shouldUseCustomContentProviderForResponse;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  IntSize v22;
  uint64_t v23;
  WebCore::Page *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  IntSize v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  v5 = v4;
  if (v4)
    CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
  {
    v9 = *(_BYTE *)(v5 + 188) == 0;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v33 = 0;
  v34 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v11 = *(unsigned __int8 **)(v10 + 288);
  if (v11)
  {
    v13 = v11[1224];
    v12 = v11[1244];
    v14 = v11[1264];
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v29 = v14;
  v27 = v13;
  v28 = v12;
  if (v8 && (v25 = *(_QWORD *)(*(_QWORD *)(v10 + 280) + 88)) != 0)
    shouldUseCustomContentProviderForResponse = WebKit::WebPage::shouldUseCustomContentProviderForResponse((WebKit::WebPage *)v5, (const WebCore::ResourceResponse *)(v25 + 1272));
  else
    shouldUseCustomContentProviderForResponse = 0;
  *(_BYTE *)(a1 + 50) = shouldUseCustomContentProviderForResponse;
  *(_BYTE *)(a1 + 51) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v16
    && (v17 = *(_QWORD *)(v16 + 8)) != 0
    && (v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17), v11)
    && ((v8 | v18 ^ 1) & 1) == 0)
  {
    WebCore::Widget::frameRect((WebCore::Widget *)v11);
  }
  else
  {
    v19 = *(_QWORD *)(v5 + 56);
  }
  v32 = v19;
  v31 = (IntSize)WebKit::WebPage::fixedLayoutSize((WebKit::WebPage *)v5);
  WebCore::LocalFrame::createView();
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 288);
  if (v20)
    ++*(_DWORD *)(v20 + 8);
  if (v27)
    WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits();
  if (v28)
    WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits();
  if (v29)
    WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits();
  v21 = *(_QWORD *)(v5 + 880);
  if ((_DWORD)v21)
  {
    v26 = HIDWORD(v21);
    if (SHIDWORD(v21) <= 1)
      LODWORD(v26) = 1;
    v31.m_width = *(_QWORD *)(v5 + 880);
    v31.m_height = v26;
    WebCore::LocalFrameView::enableFixedWidthAutoSizeMode((WebCore::LocalFrameView *)v20, 1, &v31);
    if (*(_BYTE *)(v5 + 896))
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v20);
  }
  v22 = *(IntSize *)(v5 + 888);
  v31 = v22;
  if (v22.m_width && HIDWORD(*(unint64_t *)&v22))
  {
    if (v8)
      WebCore::LocalFrameView::enableSizeToContentAutoSizeMode((WebCore::LocalFrameView *)v20, 1, &v31);
    if (*(_BYTE *)(v5 + 896))
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v20);
  }
  if (*(_BYTE *)(v5 + 908))
    WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits((WebCore::LocalFrameView *)v20, *(FloatSize *)(v5 + 900));
  *(_BYTE *)(v20 + 315) = v9;
  WebCore::LocalFrameView::setVisualUpdatesAllowedByClient((WebCore::LocalFrameView *)v20);
  v23 = *(_QWORD *)(v5 + 72);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 128))(&v30, v23);
  WebCore::LocalFrameView::setViewExposedRect();
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 200))(v23);
    WebCore::ScrollView::setDelegatedScrollingMode();
  }
  v24 = *(WebCore::Page **)(v5 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 192))(v23);
  WebCore::Page::setDelegatesScaling(v24);
  if (*(_BYTE *)(v5 + 1828))
    WebCore::LocalFrameView::setScrollPinningBehavior();
  if ((a2 & 1) == 0)
    WebKit::WebPage::scheduleFullEditorStateUpdate((_BYTE *)v5);
  if (*(_DWORD *)(v20 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  else
    --*(_DWORD *)(v20 + 8);
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

uint64_t WebKit::WebLocalFrameLoaderClient::didRestoreFromBackForwardCache(uint64_t this)
{
  *(_BYTE *)(this + 51) = 1;
  return this;
}

BOOL WebKit::WebLocalFrameLoaderClient::canCachePage(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((_BYTE *)this + 50) == 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::convertMainResourceLoadToDownload(WebKit::WebLocalFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  return WebKit::WebFrame::convertMainResourceLoadToDownload(*((_QWORD *)this + 2), a2, a3, a4);
}

unsigned int *WebKit::WebLocalFrameLoaderClient::createPlugin@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, WTF::URL *a3@<X2>, WebCore::MIMETypeRegistry *a4@<X5>, int a5@<W6>, uint64_t *a6@<X8>)
{
  char v6;

  if (a5)
    v6 = *(_BYTE *)(a1 + 51) == 0;
  else
    v6 = 0;
  return WebKit::PluginView::create(a2, a3, a4, v6, a6);
}

_DWORD *WebKit::WebLocalFrameLoaderClient::redirectDataToPlugin(WebKit::WebLocalFrameLoaderClient *this, WebCore::Widget *a2)
{
  _DWORD *result;

  ++*((_DWORD *)a2 + 2);
  result = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::objectContentType(WebKit::WebFrame **this, const WTF::URL *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::PluginData *v17;
  void *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD v24[2];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    v25 = v4;
    if (*((_DWORD *)v4 + 1))
      goto LABEL_3;
  }
  else
  {
    v25 = 0;
  }
  v9 = WTF::URL::path(a2);
  v24[0] = v9;
  v24[1] = a2;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v10 = a2 - 1;
      while (*(_BYTE *)(v9 + v10) != 46)
      {
        if (--v10 == -1)
          goto LABEL_21;
      }
      goto LABEL_27;
    }
LABEL_21:
    LOBYTE(v5) = 2;
    goto LABEL_22;
  }
  if (!(_DWORD)a2)
    goto LABEL_21;
  v10 = a2 - 1;
  while (*(_WORD *)(v9 + 2 * v10) != 46)
  {
    if (--v10 == -1)
      goto LABEL_21;
  }
LABEL_27:
  v26 = (WTF::StringImpl *)WTF::StringView::substring((const char *)v24, (int)v10 + 1, 0xFFFFFFFF);
  v27 = v13;
  WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v26);
  WebCore::MIMETypeRegistry::mimeTypeForExtension();
  v5 = v26;
  v25 = v26;
  v26 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      v14 = v26;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v5 && *((_DWORD *)v5 + 1))
  {
    LODWORD(v15) = 1;
  }
  else
  {
    v16 = WebKit::WebFrame::page(this[2]);
    v15 = v16;
    if (v16)
    {
      CFRetain(*(CFTypeRef *)(v16 + 8));
      v17 = (WebCore::PluginData *)WebCore::Page::pluginData(*(WebCore::Page **)(v15 + 48));
      WebCore::PluginData::webVisibleMimeTypes(v17);
      if (HIDWORD(v27))
      {
        v20 = v26;
        v21 = (WTF::StringImpl *)((char *)v26 + 32 * HIDWORD(v27));
        while (!*((_DWORD *)v20 + 7))
        {
LABEL_44:
          v20 = (WTF::StringImpl *)((char *)v20 + 32);
          if (v20 == v21)
            goto LABEL_45;
        }
        v22 = 0;
        while ((WTF::equal(*(WTF **)(*((_QWORD *)v20 + 2) + 8 * v22), v23, v19) & 1) == 0)
        {
          if (++v22 >= (unint64_t)*((unsigned int *)v20 + 7))
            goto LABEL_44;
        }
        WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v18);
        LOBYTE(v5) = 3;
      }
      else
      {
LABEL_45:
        WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v18);
        LOBYTE(v5) = 2;
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
      LODWORD(v15) = 0;
    }
    else
    {
      LOBYTE(v5) = 2;
    }
  }
  if (!v23)
  {
LABEL_51:
    if (!(_DWORD)v15)
      goto LABEL_22;
LABEL_3:
    if ((WebCore::MIMETypeRegistry::isSupportedImageMIMEType((WebCore::MIMETypeRegistry *)&v25, a2) & 1) != 0)
    {
      LOBYTE(v5) = 1;
      goto LABEL_22;
    }
    v6 = WebKit::WebFrame::page(this[2]);
    if (v6)
    {
      v7 = v6;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebCore::Page::pluginData(*(WebCore::Page **)(v7 + 48));
      v8 = WebCore::PluginData::supportsMimeType();
      CFRelease(*(CFTypeRef *)(v7 + 8));
      if ((v8 & 1) != 0)
      {
        LOBYTE(v5) = 3;
        goto LABEL_22;
      }
    }
    if ((WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType((WebCore::MIMETypeRegistry *)&v25, a2) & 1) == 0)
    {
      LOBYTE(v5) = WebCore::MIMETypeRegistry::isPDFMIMEType((WebCore::MIMETypeRegistry *)&v25, a2);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_51;
  }
  WTF::StringImpl::destroy(v23, a2);
  if ((_DWORD)v15)
    goto LABEL_3;
LABEL_22:
  v11 = v25;
  v25 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v5;
}

void WebKit::WebLocalFrameLoaderClient::dispatchServiceWorkerGlobalObjectAvailable(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              v10 = *(unsigned int ***)(v9 + 616);
              if (v10)
              {
                v11 = v10 + 2;
                ++*((_DWORD *)v10 + 4);
                WebKit::WebExtensionControllerProxy::serviceWorkerGlobalObjectIsAvailableForFrame((WebKit::WebExtensionControllerProxy *)v10, (WebKit::WebPage *)(v9 - 16), *((WebKit::WebFrame **)this + 2), a2);
                WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v11);
              }
              (*(void (**)(_QWORD, uint64_t, _QWORD, WebCore::DOMWrapperWorld *))(**(_QWORD **)(v9 + 344)
                                                                                          + 208))(*(_QWORD *)(v9 + 344), v9 - 16, *((_QWORD *)this + 2), a2);
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillDisconnectDOMWindowExtensionFromGlobalObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 344) + 216))(*(_QWORD *)(v8 + 344), v8 - 16, a2);
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReconnectDOMWindowExtensionToGlobalObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 344) + 224))(*(_QWORD *)(v8 + 344), v8 - 16, a2);
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillDestroyGlobalObjectForDOMWindowExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 344) + 232))(*(_QWORD *)(v8 + 344), v8 - 16, a2);
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::accessibilityRemoteFrameOffset(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::accessibilityRemoteObject(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::willCacheResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(_QWORD *)(v8 + 24)) != 0
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && (v13 = *(_QWORD **)(*(_QWORD *)(v10 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
    && (v14 = *(_QWORD *)(v13[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v14 - 8));
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v14 + 352) + 64))(*(_QWORD *)(v14 + 352), v14 - 16, *(_QWORD *)(a1 + 16), a3))
    {
      v15 = a4;
    }
    else
    {
      v15 = 0;
    }
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    CFRelease(*(CFTypeRef *)(v14 - 8));
  }
  else
  {
    v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dataDetectionReferenceDate(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(v5[2] + 8);
  if (!v6)
    return 0;
  CFRetain(*(CFTypeRef *)(v6 - 8));
  v7 = *(_QWORD *)(v6 + 264);
  CFRelease(*(CFTypeRef *)(v6 - 8));
  return v7;
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebKit::WebLocalFrameLoaderClient *this, const URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) != 0)
    return 0;
  v8 = *(_QWORD *)(v7[2] + 8);
  if (!v8)
    return 0;
  CFRetain(*(CFTypeRef *)(v8 - 8));
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, const URL *))(**(_QWORD **)(v8 + 344) + 248))(*(_QWORD *)(v8 + 344), v8 - 16, a2);
  CFRelease(*(CFTypeRef *)(v8 - 8));
  return v9;
}

uint64_t WebKit::WebLocalFrameLoaderClient::contentFilterDidBlockLoad(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  double v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  const void *v29;
  CFTypeRef v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  IPC::Encoder *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[5];
  _BYTE v37[24];
  _BYTE *v38;
  CFTypeRef cf;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  result = WebCore::ContentFilterUnblockHandler::needsUIProcess((WebCore::ContentFilterUnblockHandler *)a2);
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = *(_QWORD **)(*(_QWORD *)(v8 + 48) + 16);
            result = (*(uint64_t (**)(_QWORD *))(*v9 + 1368))(v9);
            if ((result & 1) == 0)
            {
              v10 = *(_QWORD *)(v9[2] + 8);
              if (v10)
              {
                v33 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
                v12 = *(_QWORD *)(v10 + 16);
                v11 = v10 + 16;
                v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
                v14 = WTF::fastMalloc((WTF *)0x240);
                *(_WORD *)v14 = 1850;
                *(_QWORD *)(v14 + 8) = v13;
                *(_QWORD *)(v14 + 528) = v14 + 16;
                *(_QWORD *)(v14 + 536) = v14 + 16;
                *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
                *(_OWORD *)(v14 + 560) = 0u;
                IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
                v34 = (IPC::Encoder *)v14;
                IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode((IPC::Encoder *)v14, a2);
                IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v14, (uint64_t *)&v33);
                (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v11, &v34, 0);
                result = (uint64_t)v34;
                v34 = 0;
                if (result)
                {
                  IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
                  return WTF::fastFree(v16, v17);
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 24);
  v19 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v35 = v19;
  v21 = WTF::URL::URL((uint64_t)v36, (uint64_t *)(a2 + 8));
  v22 = v37;
  v23 = *(_QWORD *)(a2 + 72);
  if (v23)
  {
    if (v23 == a2 + 48)
    {
      v38 = v37;
      (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v23 + 24))(v23, v37, v21);
    }
    else
    {
      v38 = *(_BYTE **)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
    }
  }
  else
  {
    v38 = 0;
  }
  v24 = *(const void **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v40 = *(_BYTE *)(a2 + 88);
  v25 = v35;
  cf = v24;
  v35 = 0;
  v26 = *(WTF::StringImpl **)(v18 + 32);
  *(_QWORD *)(v18 + 32) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  WTF::URL::operator=(v18 + 40, (WTF::StringImpl *)v36);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((_QWORD *)(v18 + 80), (uint64_t)v37);
  v28 = cf;
  cf = 0;
  v29 = *(const void **)(v18 + 112);
  *(_QWORD *)(v18 + 112) = v28;
  if (v29)
  {
    CFRelease(v29);
    v30 = cf;
    *(_BYTE *)(v18 + 120) = v40;
    cf = 0;
    if (v30)
      CFRelease(v30);
  }
  else
  {
    *(_BYTE *)(v18 + 120) = v40;
    cf = 0;
  }
  if (v38 == v37)
  {
    v31 = 4;
    goto LABEL_27;
  }
  if (v38)
  {
    v31 = 5;
    v22 = v38;
LABEL_27:
    (*(void (**)(_QWORD *))(*v22 + 8 * v31))(v22);
  }
  v32 = v36[0];
  v36[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  result = (uint64_t)v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::WebLocalFrameLoaderClient::prefetchDNS(WebKit::WebLocalFrameLoaderClient *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;

  {
    v3 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (const WTF::String *)a2;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = (uint64_t *)WebKit::WebProcess::WebProcess(v5);
    a2 = (WTF::StringImpl **)v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  return WebKit::WebProcess::prefetchDNS(v3, a2, a3);
}

void WebKit::WebLocalFrameLoaderClient::sendH2Ping(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::RefCountedBase *v26;
  WTF::RefCountedBase *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  uint64_t v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  WebKit::WebProcess *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  void *v41;
  WTF::StringImpl *v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  CFTypeRef v46;
  WebKit::WebProcess *v47;
  WebKit::WebProcess *v48;
  WTF::StringImpl *v49[2];
  __int128 v50;
  __int128 v51;
  WTF::StringImpl *v52;
  int v53;
  __int16 v54;
  CFTypeRef v55;
  char v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::RefCountedBase *v59;
  uint64_t v60;
  char v61;
  CFTypeRef v62;
  IPC::Encoder *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[36];
  char v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::RefCountedBase *v72;
  uint64_t v73;
  char v74;
  CFTypeRef cf;
  char v76;
  __int16 isTopFrameNavigatingToAppBoundDomain;
  WebCore *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v10 = *(_QWORD **)(*(_QWORD *)(v8 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v10 + 1368))(v10) & 1) == 0)
    && (v11 = *(_QWORD *)(v10[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v11 - 8));
    WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v64);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v49, a2, 0);
    v62 = 0;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v69, (uint64_t)v49);
    v13 = v57;
    v57 = 0;
    v14 = v70;
    v70 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v24 = v58;
    v58 = 0;
    v25 = v71;
    v71 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v59;
    v59 = 0;
    v27 = v72;
    v72 = v26;
    if (v27)
      WTF::RefCounted<WebCore::FormData>::deref(v27);
    v73 = v60;
    v74 = v61;
    v28 = v62;
    v62 = 0;
    v29 = cf;
    cf = v28;
    if (v29)
    {
      CFRelease(v29);
      v46 = v62;
      v62 = 0;
      if (v46)
        CFRelease(v46);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v49);
    v78 = (WebCore *)WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v30 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)&v64 = *(_QWORD *)(v11 + 2104);
    *((_QWORD *)&v64 + 1) = v30;
    v65 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    *(_DWORD *)v67 = WebCore::presentingApplicationPID(v78);
    {
      v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v31 = WebKit::WebProcess::WebProcess(v47);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v31;
    }
    v32 = WebKit::WebProcess::ensureNetworkProcessConnection(v31);
    v33 = *(_BYTE *)(v32 + 64);
    v34 = *(_OWORD *)(v32 + 48);
    *(_OWORD *)&v67[4] = *(_OWORD *)(v32 + 32);
    *(_OWORD *)&v67[20] = v34;
    v68 = v33;
    v76 = 1;
    v79 = 0;
    isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(*(WebKit::WebFrame **)(a1 + 16));
    {
      v35 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v35 = WebKit::WebProcess::WebProcess(v48);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
    }
    v36 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v35) + 24);
    v37 = *a3;
    *a3 = 0;
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v38 = &off_1E34EFB90;
    *((_QWORD *)v38 + 1) = v37;
    v39 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v40 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v40 = 265;
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v40 + 528) = v40 + 16;
    *(_QWORD *)(v40 + 536) = v40 + 16;
    *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v40 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
    v63 = (IPC::Encoder *)v40;
    IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode((IPC::Encoder *)v40, (uint64_t *)&v64);
    v49[0] = v38;
    v49[1] = v39;
    IPC::Connection::sendMessageWithAsyncReply(v36, &v63, (uint64_t *)v49, 0, 0);
    v42 = v49[0];
    v49[0] = 0;
    if (v42)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
    v43 = v63;
    v63 = 0;
    if (v43)
    {
      IPC::Encoder::~Encoder(v43, v41);
      WTF::fastFree(v44, v45);
    }
    WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v64, (WTF::StringImpl *)v41);
    CFRelease(*(CFTypeRef *)(v11 - 8));
  }
  else
  {
    WebCore::createInternalError();
    v15 = v52;
    *(_WORD *)&v67[12] = v54;
    *(_DWORD *)&v67[8] = v53;
    v16 = v55;
    v52 = 0;
    v55 = 0;
    v17 = *(_OWORD *)v49;
    v49[0] = 0;
    v49[1] = 0;
    v64 = v17;
    v65 = v50;
    LODWORD(v50) = v50 & 0xFFFFFFFE;
    v66 = v51;
    *(_QWORD *)v67 = v15;
    *(_QWORD *)&v67[16] = v16;
    v67[24] = v56;
    *(_DWORD *)&v67[32] = 1;
    v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 16))(v18, &v64);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (*(_DWORD *)&v67[32] != -1)
      ((void (*)(IPC::Encoder **, __int128 *))off_1E34EF838[*(unsigned int *)&v67[32]])(&v63, &v64);
    *(_DWORD *)&v67[32] = -1;
    v20 = v55;
    v55 = 0;
    if (v20)
      CFRelease(v20);
    v21 = v52;
    v52 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v49[1];
    v49[1] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v49[0];
    v49[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::didRestoreScrollPosition(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              WebKit::WebPage::didRestoreScrollPosition((WebKit::WebPage *)(v6 - 16));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::didFinishServiceWorkerPageRegistration(WebKit::WebLocalFrameLoaderClient *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 16) + 56))(v8 + 16);
              v10 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v10 = 1891;
              *(_QWORD *)(v10 + 8) = v9;
              *(_QWORD *)(v10 + 528) = v10 + 16;
              *(_QWORD *)(v10 + 536) = v10 + 16;
              *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v10 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
              v15 = (IPC::Encoder *)v10;
              *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a2;
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v8 + 16) + 32))(v8 + 16, &v15, 0);
              v12 = v15;
              v15 = 0;
              if (v12)
              {
                IPC::Encoder::~Encoder(v12, v11);
                WTF::fastFree(v13, v14);
              }
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldUsePDFPlugin(uint64_t a1, WebCore::MIMETypeRegistry *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (v4 = *(_QWORD *)(v3 + 24)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
    && (v8 = *(_QWORD *)(v7[2] + 8)) != 0)
  {
    return WebKit::WebPage::shouldUsePDFPlugin(v8 - 16, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WebKit::AuxiliaryProcess *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
    && (v7 = *(_QWORD *)(v5[2] + 8)) != 0)
  {
    return WebKit::WebPage::isParentProcessAWebBrowser((WebKit::WebPage *)(v7 - 16), v6);
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchLoadEventToOwnerElementInAnotherProcess(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15[3];
  IPC::Encoder *v16;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = this;
          v6 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(_QWORD *))(*v6 + 1368))(v6);
          if ((this & 1) == 0)
          {
            v7 = *(_QWORD *)(v6[2] + 8);
            if (v7)
            {
              *(_OWORD *)v15 = *(_OWORD *)(*(_QWORD *)(v5 + 16) + 80);
              v9 = *(_QWORD *)(v7 + 16);
              v8 = v7 + 16;
              v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
              v11 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v11 = 1926;
              *(_QWORD *)(v11 + 8) = v10;
              *(_QWORD *)(v11 + 528) = v11 + 16;
              *(_QWORD *)(v11 + 536) = v11 + 16;
              *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v11 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
              v16 = (IPC::Encoder *)v11;
              IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, v15);
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v16, 0);
              this = (uint64_t)v16;
              v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v12);
                return WTF::fastFree(v13, v14);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebKit::WebLocalFrameLoaderClient::didAccessWindowProxyPropertyViaOpener(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18[3];
  IPC::Encoder *v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v10 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v10 + 1368))(v10) & 1) == 0)
          {
            v11 = *(_QWORD *)(v10[2] + 8);
            if (v11)
            {
              CFRetain(*(CFTypeRef *)(v11 - 8));
              *(_OWORD *)v18 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
              v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 16) + 56))(v11 + 16);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 1858;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v19 = (IPC::Encoder *)v13;
              IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, v18);
              IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v13, a2);
              *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a3;
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v11 + 16) + 32))(v11 + 16, &v19, 0);
              v15 = v19;
              v19 = 0;
              if (v15)
              {
                IPC::Encoder::~Encoder(v15, v14);
                WTF::fastFree(v16, v17);
              }
              CFRelease(*(CFTypeRef *)(v11 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::frameNameChanged(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16[3];
  IPC::Encoder *v17;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              *(_OWORD *)v16 = *(_OWORD *)(*((_QWORD *)this + 2) + 80);
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 16) + 56))(v9 + 16);
              v11 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v11 = 1941;
              *(_QWORD *)(v11 + 8) = v10;
              *(_QWORD *)(v11 + 528) = v11 + 16;
              *(_QWORD *)(v11 + 536) = v11 + 16;
              *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v11 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
              v17 = (IPC::Encoder *)v11;
              IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, v16);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v9 + 16) + 32))(v9 + 16, &v17, 0);
              v13 = v17;
              v17 = 0;
              if (v13)
              {
                IPC::Encoder::~Encoder(v13, v12);
                WTF::fastFree(v14, v15);
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebMediaKeySystemClient::requestMediaKeySystem(WebKit::WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  WebKit::MediaKeySystemPermissionRequestManager::startMediaKeySystemRequest(*(WebKit::MediaKeySystemPermissionRequestManager **)(*((_QWORD *)this + 2) + 664), a2);
}

_QWORD *WebKit::WebMediaKeySystemClient::cancelMediaKeySystemRequest(WebKit::WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  return WebKit::MediaKeySystemPermissionRequestManager::cancelMediaKeySystemRequest(*(WebKit::MediaKeySystemPermissionRequestManager **)(*((_QWORD *)this + 2) + 664), a2);
}

void WebKit::WebMessagePortChannelProvider::~WebMessagePortChannelProvider(WebKit::WebMessagePortChannelProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v5 - 16) != -1)
          v5 = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebMessagePortChannelProvider::~WebMessagePortChannelProvider(this, a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::createNewMessagePortChannel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  void *v6;
  void *v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  IPC::Encoder *v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = (uint64_t *)(a1 + 16);
  v17 = 0;
  v18 = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v16, (uint64_t *)(a1 + 16), a2, &v17);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v6);
  v17 = 0;
  v18 = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v16, v5, a3, &v17);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v7);
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v8) + 24);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 222;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16[0] = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, a3);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)v16, 0, 0);
  result = v16[0];
  v16[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::messagePortDisentangled(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 240;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebMessagePortChannelProvider::messagePortSentToRemote(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;

  v4 = (uint64_t *)(a1 + 16);
  v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a2);
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take(v4, v5, &v10);
  if (v11)
  {
    v7 = v10;
    v8 = 24 * v11;
    do
    {
      WebKit::WebMessagePortChannelProvider::postMessageToRemote(a1, v7, a2);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::messagePortClosed(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  IPC::Encoder *v16;

  v4 = (uint64_t *)(a1 + 16);
  v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a2);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v6 + 32 * *(unsigned int *)(v6 - 4));
    if (v7 == v5)
      goto LABEL_5;
  }
  else
  {
    if (!v5)
      goto LABEL_5;
    v7 = 0;
  }
  if (v7 != v5)
    WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(v4, v5);
LABEL_5:
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v8) + 24);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 239;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, a2);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PostMessageToRemote>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 246;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = *a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>((IPC::Encoder *)v4, *a2);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v4, (uint64_t)(v5 + 1));
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebNotificationClient::~WebNotificationClient(WebKit::WebNotificationClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::SecurityOriginData *v6;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  if (v6)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v6, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebNotificationClient::~WebNotificationClient(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebNotificationClient::show(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4)
{
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  uint64_t v29[5];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35[6];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  WTF *v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = &v27;
  WebCore::NotificationData::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v43[0] = v7;
  v8 = *(unsigned int **)(a1 + 16);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v43[1] = (WTF *)v8;
  v10 = *(_OWORD *)(a2 + 240);
  v44 = *(_OWORD *)(a2 + 224);
  v45 = v10;
  v46 = WebCore::ScriptExecutionContext::addNotificationCallback();
  v11 = WTF::fastMalloc((WTF *)0x150);
  *(_QWORD *)v11 = off_1E34EFC08;
  *(_QWORD *)(v11 + 16) = v28;
  WTF::URL::URL(v11 + 32, v29);
  v12 = v30;
  v30 = 0u;
  *(_OWORD *)(v11 + 72) = v12;
  v13 = v31;
  v31 = 0u;
  *(_OWORD *)(v11 + 88) = v13;
  *(_QWORD *)(v11 + 104) = v32;
  *(_BYTE *)(v11 + 112) = v33;
  v14 = v34;
  v32 = 0;
  v34 = 0;
  *(_QWORD *)(v11 + 120) = v14;
  WTF::URL::URL(v11 + 128, v35);
  v16 = v38;
  v15 = v39;
  v17 = v37;
  *(_OWORD *)(v11 + 176) = v36;
  *(_OWORD *)(v11 + 192) = v17;
  *(_OWORD *)(v11 + 208) = v16;
  *(_OWORD *)(v11 + 224) = v15;
  *(_QWORD *)(v11 + 240) = v40;
  *(_QWORD *)&v15 = v41;
  v40 = 0;
  v41 = 0;
  *(_QWORD *)(v11 + 248) = v15;
  *(_WORD *)(v11 + 256) = v42;
  v18 = *(_OWORD *)v43;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v11 + 272) = v18;
  v19 = v44;
  v20 = v45;
  *(_QWORD *)(v11 + 320) = v46;
  *(_OWORD *)(v11 + 288) = v19;
  *(_OWORD *)(v11 + 304) = v20;
  WTF::callOnMainRunLoopAndWait();
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v22 = (unsigned int *)v43[1];
  v43[1] = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  v25 = v43[0];
  v43[0] = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v25, v21);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v29, v21);
  return v27;
}

void WebKit::WebNotificationClient::cancel(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[5];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebCore::NotificationData::isolatedCopy();
  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v30 = (WTF *)v2;
  v4 = WTF::fastMalloc((WTF *)0x110);
  *(_QWORD *)v4 = off_1E34EFC80;
  WTF::URL::URL(v4 + 16, v16);
  v5 = v17;
  v17 = 0u;
  *(_OWORD *)(v4 + 56) = v5;
  v6 = v18;
  v18 = 0u;
  *(_OWORD *)(v4 + 72) = v6;
  *(_QWORD *)(v4 + 88) = v19;
  *(_BYTE *)(v4 + 96) = v20;
  v7 = v21;
  v19 = 0;
  v21 = 0;
  *(_QWORD *)(v4 + 104) = v7;
  WTF::URL::URL(v4 + 112, v22);
  v9 = v25;
  v8 = v26;
  v10 = v24;
  *(_OWORD *)(v4 + 160) = v23;
  *(_OWORD *)(v4 + 176) = v10;
  *(_OWORD *)(v4 + 192) = v9;
  *(_OWORD *)(v4 + 208) = v8;
  *(_QWORD *)(v4 + 224) = v27;
  *(_QWORD *)&v8 = v28;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(v4 + 232) = v8;
  *(_WORD *)(v4 + 240) = v29;
  v11 = v30;
  v30 = 0;
  *(_QWORD *)(v4 + 256) = v11;
  WTF::callOnMainRunLoopAndWait();
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v13 = (unsigned int *)v30;
  v30 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v16, v12);
}

void WebKit::WebNotificationClient::notificationObjectDestroyed(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[5];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebCore::NotificationData::isolatedCopy();
  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v30 = (WTF *)v2;
  v4 = WTF::fastMalloc((WTF *)0x110);
  *(_QWORD *)v4 = off_1E34EFCA8;
  WTF::URL::URL(v4 + 16, v16);
  v5 = v17;
  v17 = 0u;
  *(_OWORD *)(v4 + 56) = v5;
  v6 = v18;
  v18 = 0u;
  *(_OWORD *)(v4 + 72) = v6;
  *(_QWORD *)(v4 + 88) = v19;
  *(_BYTE *)(v4 + 96) = v20;
  v7 = v21;
  v19 = 0;
  v21 = 0;
  *(_QWORD *)(v4 + 104) = v7;
  WTF::URL::URL(v4 + 112, v22);
  v9 = v25;
  v8 = v26;
  v10 = v24;
  *(_OWORD *)(v4 + 160) = v23;
  *(_OWORD *)(v4 + 176) = v10;
  *(_OWORD *)(v4 + 192) = v9;
  *(_OWORD *)(v4 + 208) = v8;
  *(_QWORD *)(v4 + 224) = v27;
  *(_QWORD *)&v8 = v28;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(v4 + 232) = v8;
  *(_WORD *)(v4 + 240) = v29;
  v11 = v30;
  v30 = 0;
  *(_QWORD *)(v4 + 256) = v11;
  WTF::callOnMainRunLoopAndWait();
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v13 = (unsigned int *)v30;
  v30 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v16, v12);
}

uint64_t WebKit::WebNotificationClient::notificationControllerDestroyed(WebKit::WebNotificationClient *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34EFCD0;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::callOnMainRunLoop();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WebKit::WebNotificationClient::requestPermission(uint64_t a1, WebCore::SecurityContext *this, WTF::StringImpl *a3)
{
  uint64_t v4;
  WebKit::WebProcess *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebKit::WebProcess *v18;
  _BYTE v19[24];

  if (*((_BYTE *)this + 274))
    goto LABEL_2;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((unsigned __int8 *)v8 + 672);
  if (*((_BYTE *)v8 + 672))
  {
    v9 = *((_QWORD *)v8 + 83);
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_7;
  }
  else
  {
    __break(1u);
  }
  if (v9 != -1)
    goto LABEL_2;
LABEL_7:
  v10 = (unsigned int *)WebCore::SecurityContext::securityOrigin(this);
  if (!v10)
  {
LABEL_2:
    v4 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v11 = (uint64_t)v10;
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 + 1, v10));
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(a1 + 8), (uint64_t)(v10 + 2), (uint64_t)v19);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
      v15 = (CFTypeRef *)(v14 - 16);
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  CFRetain(v15[1]);
  v16 = WebKit::WebPage::notificationPermissionRequestManager((WebKit::WebPage *)v15);
  WebKit::NotificationPermissionRequestManager::startRequest(v16, (WebCore::SecurityOriginData *)(v11 + 8), a3);
  CFRelease(v15[1]);
  return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v11, v17);
}

uint64_t WebKit::WebNotificationClient::checkPermission(WebKit::WebNotificationClient *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  CFTypeRef *v17;
  char v18;
  WebKit::WebProcess *v19;
  WebKit::WebNotificationManager *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  int v23;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebKit::WebProcess *v28;
  WebKit::WebProcess *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  if (a2
    && (!*((_BYTE *)a2 + 274)
     || (*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 72))(a2)))
  {
    v4 = (unsigned int *)WebCore::SecurityContext::securityOrigin(a2);
    if (v4)
    {
      v5 = (uint64_t)v4;
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
      v8 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 1, (uint64_t)(v4 + 2));
      {
        v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v9 = WebKit::WebProcess::WebProcess(v28);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
      }
      if (*((_BYTE *)v9 + 672))
      {
        v10 = *((_QWORD *)v9 + 83);
        if (v10 < 0 && v10 != -1)
        {
LABEL_36:
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, v7);
          return v8;
        }
        v32 = 0;
        if (!*((_BYTE *)a2 + 274))
        {
          *((_DWORD *)a2 - 42) += 2;
          v11 = *((_QWORD *)a2 + 42);
          if (v11
            && (v12 = *(_QWORD *)(v11 + 8)) != 0
            && (v13 = *(_QWORD *)(v12 + 24)) != 0
            && (v14 = *(_QWORD *)(v13 + 8)) != 0
            && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
                ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0)
            && (v16 = *(_QWORD *)(v15[2] + 8)) != 0)
          {
            v17 = (CFTypeRef *)(v16 - 16);
            CFRetain(*(CFTypeRef *)(v16 - 8));
            v18 = 0;
          }
          else
          {
            v17 = 0;
            v18 = 1;
          }
          {
            v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v19 = WebKit::WebProcess::WebProcess(v29);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v19;
          }
          v33 = (WTF::StringImpl *)"WebNotificationManager";
          v34 = (WTF::StringImpl *)23;
          v20 = (WebKit::WebNotificationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v19 + 34, (WTF::ASCIILiteralHash *)&v33);
          WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v5 + 8));
          v21 = WebKit::WebNotificationManager::policyForOrigin(v20, &v33, (WebKit::WebPage *)v17);
          v32 = v21;
          v22 = v33;
          v33 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              WTF::StringImpl::destroy(v22, v7);
              if ((v18 & 1) != 0)
              {
LABEL_28:
                if (*((_DWORD *)a2 - 42) == 2)
                {
                  if ((*((_WORD *)a2 - 81) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192));
                }
                else
                {
                  *((_DWORD *)a2 - 42) -= 2;
                }
LABEL_30:
                if (v21 == 1)
                  v23 = v8;
                else
                  v23 = 1;
                if (v23)
                  v8 = v21;
                else
                  v8 = 0;
                goto LABEL_36;
              }
LABEL_27:
              CFRelease(v17[1]);
              goto LABEL_28;
            }
            *(_DWORD *)v22 -= 2;
          }
          if ((v18 & 1) != 0)
            goto LABEL_28;
          goto LABEL_27;
        }
      }
      else
      {
        __break(1u);
      }
      v33 = (WTF::StringImpl *)&v32;
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v5 + 8));
      WTF::String::isolatedCopy();
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v25 = &off_1E34EFCF8;
      v25[1] = v33;
      v26 = v34;
      v34 = 0;
      v25[2] = v26;
      v31 = v25;
      WTF::callOnMainRunLoopAndWait();
      if (v31)
        (*(void (**)(_QWORD *))(*v31 + 8))(v31);
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v7);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v7);
        else
          *(_DWORD *)v30 -= 2;
      }
      v21 = v32;
      goto LABEL_30;
    }
  }
  return 1;
}

void WebKit::WebEditorClient::~WebEditorClient(WebKit::WebEditorClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t WebKit::WebEditorClient::supportsClientSideAttachmentData(WebKit::WebEditorClient *this)
{
  return 1;
}

uint64_t WebKit::WebEditorClient::textChecker(WebKit::WebEditorClient *this)
{
  return (uint64_t)this + 24;
}

void `non-virtual thunk to'WebKit::WebEditorClient::~WebEditorClient(WebKit::WebEditorClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 2, a2);
}

{
  WebKit::WebEditorClient::operator delete((uint64_t)this - 24, a2);
}

void WebKit::WebFileSystemStorageConnection::~WebFileSystemStorageConnection(WebKit::WebFileSystemStorageConnection *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebFileSystemStorageConnection::~WebFileSystemStorageConnection(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_16;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *((_QWORD *)v4 + 2);
    v9 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v8 = v13 == 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (__stlxr(0, v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_16;
LABEL_14:
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = off_1E34ACA48;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v9;
  *(_BYTE *)(v11 + 24) = v8;
  v14 = v11;
  WTF::ensureOnMainRunLoop();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_16:
  v12 = *((_QWORD *)this + 2);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
}

uint64_t WebCore::FileSystemStorageConnection::isWorker(WebCore::FileSystemStorageConnection *this)
{
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::hasFrameSpecificStorageAccess(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((unsigned __int8 *)this + 80);
}

void WebKit::WebMediaKeySystemClient::~WebMediaKeySystemClient(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy11CanUndoRedoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy15ExecuteUndoRedoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21CheckSpellingOfStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20CheckGrammarOfStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20CheckTextOfParagraphEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19SpellingUIIsShowingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

WTF *std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(WTF::StringImpl ***a1, _DWORD *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((unsigned int *)*a1 + 3);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WTF::String>::destruct(*v3, (WTF::StringImpl *)((char *)*v3 + 8 * v4));
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17GetGuessesForWordEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E34EF7D0;
      v5[1] = v2;
      v6 = v5;
      WTF::ensureOnMainRunLoop();
      if (v6)
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::FileSystemHandleCloseScope,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(char **)(v1 + 8);
    if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 24))(*(_QWORD *)(v1 + 24));
    v3 = *(unsigned int **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    return WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_()
{
  JUMPOUT(0x19AEAC4F0);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;

  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](a2 + 176, (WTF::StringImpl *)a2);
  if (*(_BYTE *)(a2 + 168))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a2 + 160));
  if (*(_BYTE *)(a2 + 152))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a2 + 40), v3);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

double WebKit::WebEditorClient::operator delete(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  double result;

  v3 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)a1, v6);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(uint64_t a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[2]);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  WTF *v34;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v6, v5);
        v20 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v33 = 0;
    v34 = 0;
    if (v10 >= 0xAAAA)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::SerializedAttachmentData>(a1, (uint64_t)&v29);
        if (!v32)
          break;
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v33, (unint64_t)&v29);
        }
        else
        {
          v23 = HIDWORD(v34) + 1;
          v24 = (_QWORD *)(v33 + 24 * HIDWORD(v34));
          v25 = v29;
          v29 = 0;
          *v24 = v25;
          v26 = v30;
          v30 = 0;
          v24[1] = v26;
          v27 = v31;
          v31 = 0;
          v24[2] = v27;
          HIDWORD(v34) = v23;
        }
        std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v33, HIDWORD(v34));
          *(_QWORD *)a3 = v33;
          v28 = v34;
          v33 = 0;
          v34 = 0;
          *(_QWORD *)(a3 + 8) = v28;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v17 = 0;
        v18 = 0;
LABEL_17:
        v33 = 0;
        v34 = 0;
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v18;
LABEL_18:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
      }
      LODWORD(v34) = 24 * (int)v10 / 0x18u;
      v33 = WTF::fastMalloc((WTF *)(24 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::SerializedAttachmentData>(a1, (uint64_t)&v29);
        if (!v32)
          break;
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v33, (unint64_t)&v29);
        }
        else
        {
          v12 = HIDWORD(v34) + 1;
          v13 = (_QWORD *)(v33 + 24 * HIDWORD(v34));
          v14 = v29;
          v29 = 0;
          *v13 = v14;
          v15 = v30;
          v30 = 0;
          v13[1] = v15;
          v16 = v31;
          v31 = 0;
          v13[2] = v16;
          HIDWORD(v34) = v12;
        }
        std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          v17 = v33;
          v18 = v34;
          goto LABEL_17;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
    return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
  }
  v19 = v5;
  v20 = 0;
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v19)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void IPC::Decoder::decode<WebCore::SerializedAttachmentData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > this)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 24 * this), (WTF::StringImpl *)(*(_QWORD *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(24 * this);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (WTF::StringImpl **)result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::RefCounted<WebKit::WebUndoStep>::deref(WTF *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  int v7;
  unsigned __int16 v8;
  void *v9;
  uint64_t *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  IPC::Encoder *v17;
  uint64_t v18;
  char v19;

  v18 = 0;
  IPC::Connection::createSyncMessageEncoder(3655, a4, &v18, (uint64_t *)&v17);
  LOBYTE(a3) = *a3;
  *IPC::Encoder::grow(v17, 1uLL, 1) = (char)a3;
  IPC::Connection::sendSyncMessage(a2, v18, (uint64_t *)&v17, 0, (uint64_t)&v15, INFINITY);
  v7 = v16;
  if (v16)
  {
    if (v16 == 1)
    {
      *(_BYTE *)a1 = (_BYTE)v15;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  v8 = IPC::Decoder::decode<std::tuple<BOOL>>(v15);
  if (v8 >= 0x100u)
  {
    if (!v16)
    {
      v10 = v15;
      v15 = 0;
      *(_QWORD *)a1 = v10;
      *(_BYTE *)(a1 + 8) = v8;
      goto LABEL_9;
    }
LABEL_14:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>(v14);
  }
  *(_BYTE *)a1 = 13;
  *(_DWORD *)(a1 + 16) = 1;
  v7 = v16;
  if (v16 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t **))off_1E34EF848[v7])(&v19, &v15);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3664, a4, &v19, (uint64_t *)&v18);
  LOBYTE(a3) = *a3;
  *IPC::Encoder::grow(v18, 1uLL, 1) = (char)a3;
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  v7 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      v13 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, v14, v15);
    }
    *(_BYTE *)a1 = v16;
  }
  else
  {
    v8 = v16;
    v16 = 0;
    *(_QWORD *)a1 = v8;
  }
  *(_DWORD *)(a1 + 16) = v7;
  ((void (*)(char *, uint64_t *))off_1E34EF848[v7])(&v20, &v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v6, v5);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v34 = 0;
    v35 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextCheckingResult>(a1, (uint64_t)&v27);
        if (!v33)
          break;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>((uint64_t)&v34, (unint64_t)&v27);
        }
        else
        {
          v22 = v34 + 48 * HIDWORD(v35);
          v23 = v28;
          *(_OWORD *)v22 = v27;
          *(_QWORD *)(v22 + 24) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          *(_QWORD *)(v22 + 16) = v23;
          v24 = v29;
          v29 = 0;
          *(_QWORD *)(v22 + 24) = v24;
          LODWORD(v24) = v30;
          v30 = 0;
          *(_DWORD *)(v22 + 32) = v24;
          LODWORD(v24) = v31;
          v31 = 0;
          *(_DWORD *)(v22 + 36) = v24;
          v25 = v32;
          v32 = 0;
          *(_QWORD *)(v22 + 40) = v25;
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v34, HIDWORD(v35));
          *(_QWORD *)a3 = v34;
          v26 = v35;
          v34 = 0;
          v35 = 0;
          *(_QWORD *)(a3 + 8) = v26;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v16 = 0;
        v17 = 0;
LABEL_17:
        v34 = 0;
        v35 = 0;
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v17;
LABEL_18:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
      }
      LODWORD(v35) = 48 * (int)v10 / 0x30u;
      v34 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextCheckingResult>(a1, (uint64_t)&v27);
        if (!v33)
          break;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>((uint64_t)&v34, (unint64_t)&v27);
        }
        else
        {
          v12 = v34 + 48 * HIDWORD(v35);
          v13 = v28;
          *(_OWORD *)v12 = v27;
          *(_QWORD *)(v12 + 24) = 0;
          *(_QWORD *)(v12 + 32) = 0;
          *(_QWORD *)(v12 + 16) = v13;
          v14 = v29;
          v29 = 0;
          *(_QWORD *)(v12 + 24) = v14;
          LODWORD(v14) = v30;
          v30 = 0;
          *(_DWORD *)(v12 + 32) = v14;
          LODWORD(v14) = v31;
          v31 = 0;
          *(_DWORD *)(v12 + 36) = v14;
          v15 = v32;
          v32 = 0;
          *(_QWORD *)(v12 + 40) = v15;
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          v16 = v34;
          v17 = v35;
          goto LABEL_17;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
    return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  }
  v18 = v5;
  v19 = 0;
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v18)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::TextCheckingResult>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(*(_QWORD *)result + 48 * this, (WTF::StringImpl *)(*(_QWORD *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(48 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::TextCheckingResult>::move((uint64_t)v5, (WTF *)((char *)v5 + 48 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF868;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF868;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[16];
  int v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(v2);
  v6[0] = v3;
  v7 = 0;
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v7 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34EF7A0[v7])(&v8, v6);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34EF7A0[v4])(&v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34EF890;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34EF890;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 v5;
  char v6;
  __int128 v7;

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    v7 = v5;
    v3 = (uint64_t *)&v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    v3 = (uint64_t *)&v5;
  }
  return WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>(v2, v3);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        a1 = v16;
        v12 = *v16;
        v11 = v16[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v11 = v3;
    v12 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v15 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        a1 = v15;
        v4 = *v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    goto LABEL_8;
  }
  if (!v7)
  {
    result = IPC::Decoder::decode<WebKit::GestureType>(a1);
    if ((unsigned __int16)result > 0xFFu)
    {
      *(_BYTE *)a2 = result;
      v10 = 1;
      *(_DWORD *)(a2 + 8) = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v9)
  {
LABEL_8:
    v10 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_10;
  }
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  v10 = 1;
LABEL_10:
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16[8];
  WTF::StringImpl *v17;
  _QWORD v18[2];
  int v19;
  char v20;

  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_17;
        case 2:
          v4 = 5;
          goto LABEL_15;
        case 3:
          v4 = 10;
          goto LABEL_15;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_17;
        case 5:
          v4 = 8;
          goto LABEL_15;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_17:
          v16[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_15:
          v16[0] = v4;
          v17 = 0;
          break;
      }
      v12 = v17;
      v17 = 0;
      LOBYTE(v18[0]) = v4;
      v18[1] = v12;
      v19 = 1;
      v13 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v19 != -1)
        ((void (*)(char *, _QWORD *))off_1E34EF7B0[v19])(&v20, v18);
      v19 = -1;
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(v15);
    }
  }
  else
  {
    v5 = *a1;
    v6 = *a2;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = 0;
    v8 = (unsigned int *)(v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(v7 + 24) = v5;
    v18[0] = v7;
    v19 = 0;
    v10 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v18);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v19 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E34EF7B0[v19])(v16, v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34EF8B8;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34EF8B8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 v5;
  char v6;
  __int128 v7;

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    v7 = v5;
    v3 = (uint64_t *)&v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    v3 = (uint64_t *)&v5;
  }
  return WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>(v2, v3);
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  char v16[8];
  WTF::StringImpl *v17;
  _QWORD v18[2];
  int v19;
  char v20;

  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_17;
        case 2:
          v4 = 5;
          goto LABEL_15;
        case 3:
          v4 = 10;
          goto LABEL_15;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_17;
        case 5:
          v4 = 8;
          goto LABEL_15;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_17:
          v16[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_15:
          v16[0] = v4;
          v17 = 0;
          break;
      }
      v12 = v17;
      v17 = 0;
      LOBYTE(v18[0]) = v4;
      v18[1] = v12;
      v19 = 1;
      v13 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v19 != -1)
        ((void (*)(char *, _QWORD *))off_1E34EF7B0[v19])(&v20, v18);
      v19 = -1;
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v15 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(v15);
    }
  }
  else
  {
    v5 = *a1;
    v6 = *a2;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = 1;
    v8 = (unsigned int *)(v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(v7 + 24) = v5;
    v18[0] = v7;
    v19 = 0;
    v10 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v18);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v19 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E34EF7B0[v19])(v16, v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF8E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF8E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned int v3;
  WTF::StringImpl *result;
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  v3 = IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(a2);
  if (v3 < 0x10000)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  if ((v3 & 0xFF00) != 0)
  {
    switch((char)v3)
    {
      case 0:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        goto LABEL_15;
      case 1:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 6;
        break;
      case 2:
        v11 = 0;
        v5 = 5;
        break;
      case 3:
        v11 = 0;
        v5 = 10;
        break;
      case 4:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 33;
        break;
      case 5:
        v11 = 0;
LABEL_15:
        v5 = 8;
        break;
      case 6:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 13;
        break;
      default:
        v11 = 0;
        v5 = 24;
        break;
    }
    LOBYTE(v8) = v5;
    v9 = v11;
    LOBYTE(v10) = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if ((_BYTE)v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_13;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_13:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::Decoder::decode<WebKit::GestureType>(a1);
      v8 = v7;
      v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0)
        v8 = 0;
      v10 = 256;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16 && v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
  v9 = 0;
  v8 = 0;
  v10 = 0;
LABEL_9:
  if (HIWORD(v9))
    return v8 | v9 | v10 | 0x10000;
  v17 = *a1;
  v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (!v18)
      return 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
    result = 0;
    v19 = *a1;
    v20 = a1[1];
    v21 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v21 && v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF908;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF908;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  _BYTE v4[16];
  int v5;
  char v6;
  uint64_t v7[2];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>((uint64_t)v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
  LOBYTE(v7[0]) = 0;
  v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v7, (uint64_t)v4);
  result = WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(v2, v7);
  if (v8 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF920[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E34EF920[v5])(v7, v4);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t *a1)
{
  WTF::StringImpl *result;
  uint64_t v2[2];
  int v3;
  char v4;

  LOBYTE(v2[0]) = 7;
  v3 = 1;
  result = WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(a1, v2);
  if (v3 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF920[v3])(&v4, v2);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v20 = 0;
    v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a2;
        v20 = a2[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_21;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v20 = v6;
    v21 = 0;
LABEL_21:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 16))(v24, v5);
    goto LABEL_8;
  }
  if (v9)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v28);
    if (v30)
    {
      v25[0] = v28;
      v11 = v29;
      v28 = 0;
      v29 = 0;
      v25[1] = v11;
      v26 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
LABEL_14:
      v27 = 1;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 16) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v25);
      v19 = v27;
      *(_BYTE *)(a1 + 24) = 1;
      if (!v19)
        return result;
      if (v26 == -1)
        return result;
      result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34EF920[v26])(&v28, v25);
      if (*(_BYTE *)(a1 + 24))
        return result;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = IPC::Decoder::decode<WebKit::GestureType>(a2);
    if (v12 >= 0x100u)
    {
      LOBYTE(v25[0]) = v12;
      v26 = 1;
      goto LABEL_14;
    }
  }
LABEL_8:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_10:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  char v12[8];
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;

  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_15;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_15;
        case 2:
          v4 = 5;
          goto LABEL_13;
        case 3:
          v4 = 10;
          goto LABEL_13;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_15;
        case 5:
          v4 = 8;
          goto LABEL_13;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_15:
          v12[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_13:
          v12[0] = v4;
          v13 = 0;
          break;
      }
      v8 = v13;
      v13 = 0;
      LOBYTE(v14) = v4;
      v15 = v8;
      v16 = 1;
      v9 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v16 != -1)
        ((void (*)(char *, uint64_t *))off_1E34EF7E8[v16])(&v17, &v14);
      v16 = -1;
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v11 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::~CallableWrapper(v11);
    }
  }
  else
  {
    v14 = *a2;
    v5 = (WTF::StringImpl *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = v5;
    v16 = 0;
    v6 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF7E8[v16])(v12, &v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF940;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *result;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v4, v5);
        v16 = 0;
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v17 = 0;
        if (v22 && v21)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v21);
          v17 = *a2;
          v16 = a2[1];
        }
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_30;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v16 = v5;
    v17 = v4;
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    goto LABEL_10;
  }
  if (v7)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v29);
    if (v30)
    {
      v26 = v29;
      v27 = 0;
LABEL_15:
      v28 = 1;
      v23[0] = 0;
      v24 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)&v26);
      v25 = 1;
      if (!v28)
        goto LABEL_18;
      if (v27 == -1)
        goto LABEL_18;
      ((void (*)(uint64_t *, uint64_t *))off_1E34EF958[v27])(&v29, &v26);
      if (v25)
        goto LABEL_18;
      goto LABEL_12;
    }
  }
  else
  {
    v9 = IPC::Decoder::decode<WebKit::GestureType>(a2);
    if (v9 >= 0x100u)
    {
      LOBYTE(v26) = v9;
      v27 = 1;
      goto LABEL_15;
    }
  }
LABEL_10:
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (v12 && v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
  v23[0] = 0;
  v25 = 0;
LABEL_12:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (!v15)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
  if (!v14)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  if (!v25)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
LABEL_18:
  LOBYTE(v26) = 0;
  v27 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)&v26, (uint64_t)v23);
  result = WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>>(v2, &v26);
  if (v27 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E34EF958[v27])(&v29, &v26);
  if (v25)
  {
    if (v24 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E34EF958[v24])(&v26, v23);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(uint64_t *a1)
{
  WTF::StringImpl *result;
  uint64_t v2;
  int v3;
  char v4;

  v2 = 0;
  v3 = 0;
  result = WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>>(a1, &v2);
  if (v3 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF958[v3])(&v4, &v2);
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  char v12[8];
  WTF::StringImpl *v13;
  _QWORD v14[2];
  int v15;
  char v16;

  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_15;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_15;
        case 2:
          v4 = 5;
          goto LABEL_13;
        case 3:
          v4 = 10;
          goto LABEL_13;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_15;
        case 5:
          v4 = 8;
          goto LABEL_13;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_15:
          v12[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_13:
          v12[0] = v4;
          v13 = 0;
          break;
      }
      v8 = v13;
      v13 = 0;
      LOBYTE(v14[0]) = v4;
      v14[1] = v8;
      v15 = 1;
      v9 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v15 != -1)
        ((void (*)(char *, _QWORD *))off_1E34EF7F8[v15])(&v16, v14);
      v15 = -1;
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v11 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::~CallableWrapper(v11);
    }
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    v14[0] = v5;
    v15 = 0;
    v6 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v15 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E34EF7F8[v15])(v12, v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF978;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF978;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *result;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];
  unsigned int v27;
  char v28;
  uint64_t v29[5];
  unsigned int v30;
  char v31;
  uint64_t v32;
  _QWORD v33[4];
  char v34;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v4, v5);
        v16 = 0;
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v17 = 0;
        if (v25 && v24)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v24);
          v17 = *a2;
          v16 = a2[1];
        }
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
  }
  else
  {
    v6 = (unsigned __int8 *)a2[2];
    a2[2] = (uint64_t)(v6 + 1);
    v7 = *v6;
    if (v7 < 2)
    {
      if (v7)
      {
        IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::decode(a2, (uint64_t)&v32);
        if (!v34)
        {
          v20 = *a2;
          v21 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          v22 = a2[3];
          if (!v22)
            goto LABEL_11;
          if (!v21)
            goto LABEL_11;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
          if (!v34)
            goto LABEL_11;
        }
        v29[0] = v32;
        WebCore::FileHandle::FileHandle();
        v29[4] = v33[3];
        v30 = 0;
        v31 = 1;
        if (v34)
          MEMORY[0x19AEAC4F0](v33);
      }
      else
      {
        v9 = IPC::Decoder::decode<WebKit::GestureType>(a2);
        if (v9 <= 0xFFu)
          goto LABEL_11;
        LOBYTE(v29[0]) = v9;
        v30 = 1;
        v31 = 1;
      }
      v26[0] = 0;
      goto LABEL_18;
    }
    v16 = v5;
    v17 = v4;
  }
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
LABEL_11:
  LOBYTE(v29[0]) = 0;
  v31 = 0;
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (v12 && v11)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    v26[0] = 0;
    if (!v31)
      goto LABEL_13;
LABEL_18:
    v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)v29);
    v28 = 1;
    if (!v31)
      goto LABEL_21;
    if (v30 == -1)
      goto LABEL_21;
    ((void (*)(uint64_t *, uint64_t *))*(&off_1E34EF990 + v30))(&v32, v29);
    if (v28)
      goto LABEL_21;
    goto LABEL_14;
  }
  v26[0] = 0;
LABEL_13:
  v28 = 0;
LABEL_14:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (!v15)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
  if (!v14)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  if (!v28)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
LABEL_21:
  LOBYTE(v29[0]) = 0;
  v30 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)v26);
  result = WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>(v2, v29);
  if (v30 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))*(&off_1E34EF990 + v30))(&v32, v29);
  if (v28)
  {
    if (v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _BYTE *))*(&off_1E34EF990 + v27))(v29, v26);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(uint64_t *a1)
{
  WTF::StringImpl *result;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = 0u;
  v3 = 0u;
  DWORD1(v3) = -1;
  v4 = 0;
  v5 = 0;
  result = WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>(a1, (uint64_t *)&v2);
  if (v5 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, __int128 *))*(&off_1E34EF990 + v5))(&v6, &v2);
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;

  v4 = *((_DWORD *)a2 + 10);
  if (v4)
  {
    if (v4 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 8;
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 6;
          goto LABEL_17;
        case 2:
          v5 = 5;
          goto LABEL_15;
        case 3:
          v5 = 10;
          goto LABEL_15;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 33;
          goto LABEL_17;
        case 5:
          v5 = 8;
          goto LABEL_15;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 13;
          goto LABEL_17;
        default:
          v5 = 24;
LABEL_15:
          v13 = 0;
LABEL_17:
          v8 = v13;
          v13 = 0;
          LOBYTE(v15) = v5;
          v16 = (unint64_t)v8;
          v19 = 1;
          v9 = *a1;
          *a1 = 0;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v15);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          if (v19 != -1)
            ((void (*)(char *, uint64_t *))*(&off_1E34EF808 + v19))(&v20, &v15);
          v19 = -1;
          result = v13;
          v13 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
            else
              *(_DWORD *)result -= 2;
          }
          break;
      }
      return result;
    }
LABEL_24:
    v11 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v11);
  }
  v12 = *a2;
  v15 = 0;
  v16 = 0xFFFFFFFF00000000;
  v17 = 0;
  WebCore::FileHandle::FileHandle();
  WebCore::FileHandle::operator=();
  MEMORY[0x19AEAC4F0](&v15);
  if (*((_DWORD *)a2 + 10))
    goto LABEL_24;
  v14 = a2[4];
  v15 = v12;
  WebCore::FileHandle::FileHandle();
  v18 = v14;
  v19 = 0;
  v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v19 != -1)
    ((void (*)(char *, uint64_t *))*(&off_1E34EF808 + v19))(&v20, &v15);
  v19 = -1;
  return (WTF::StringImpl *)MEMORY[0x19AEAC4F0](&v13);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF9B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF9B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EF9D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EF9D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  _BYTE v4[16];
  int v5;
  char v6;
  uint64_t v7[2];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>((uint64_t)v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
  LOBYTE(v7[0]) = 0;
  v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v7, (uint64_t)v4);
  result = WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(v2, v7);
  if (v8 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF920[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E34EF920[v5])(v7, v4);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t *a1)
{
  WTF::StringImpl *result;
  uint64_t v2[2];
  int v3;
  char v4;

  LOBYTE(v2[0]) = 7;
  v3 = 1;
  result = WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(a1, v2);
  if (v3 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF920[v3])(&v4, v2);
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  char v12[8];
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;

  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_15;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_15;
        case 2:
          v4 = 5;
          goto LABEL_13;
        case 3:
          v4 = 10;
          goto LABEL_13;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_15;
        case 5:
          v4 = 8;
          goto LABEL_13;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_15:
          v12[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_13:
          v12[0] = v4;
          v13 = 0;
          break;
      }
      v8 = v13;
      v13 = 0;
      LOBYTE(v14) = v4;
      v15 = v8;
      v16 = 1;
      v9 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v16 != -1)
        ((void (*)(char *, uint64_t *))off_1E34EF7E8[v16])(&v17, &v14);
      v16 = -1;
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v11 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(v11);
    }
  }
  else
  {
    v14 = *a2;
    v5 = (WTF::StringImpl *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = v5;
    v16 = 0;
    v6 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34EF7E8[v16])(v12, &v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34EFA00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34EFA00;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  int v42;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (v4 = *a2) == 0)
  {
LABEL_17:
    v40 = 0;
    v41 = 0;
    v42 = 0;
    return WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>,WebKit::FileSystemStorageError>>(v2, (uint64_t *)&v40);
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v28 = 0;
    v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v4, v5);
        v28 = 0;
        v37 = *a2;
        v38 = a2[1];
        v39 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v29 = 0;
        if (v39 && v38)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v38);
          v29 = *a2;
          v28 = a2[1];
        }
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    goto LABEL_26;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v28 = v5;
    v29 = v4;
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v28)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
    goto LABEL_16;
  }
  if (!v7)
  {
    LOWORD(v8) = IPC::Decoder::decode<WebKit::GestureType>(a2);
    if ((unsigned __int16)v8 >= 0x100u)
    {
      v17 = 0;
      v15 = 1;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v9 = a2[1];
  if (!v10)
  {
    v18 = a2[1];
LABEL_15:
    v19 = *a2;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v18)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v19, v18);
LABEL_16:
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v27)
        {
          if (v26)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
        }
      }
    }
    goto LABEL_17;
  }
  v11 = *a2;
  v12 = a2[2] - *a2;
  if (v9 <= v12)
  {
    v32 = 0;
    v33 = 0;
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v33 = *a2;
        v32 = a2[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
    }
    goto LABEL_30;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  a2[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v32 = v9;
    v33 = 0;
LABEL_30:
    v9 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33, v32);
        v11 = *a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
        v11 = 0;
      }
    }
    goto LABEL_31;
  }
  v14 = *v13;
  if (v14 >= 2)
  {
LABEL_31:
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v11);
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
      }
    }
    goto LABEL_15;
  }
  v15 = 0;
  v16 = v14 != 0;
  v17 = v8 & 0xFFFFFFFFFFFFFF00;
LABEL_13:
  v40 = v17 | v8;
  v41 = v16;
  v42 = v15;
  return WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>,WebKit::FileSystemStorageError>>(v2, (uint64_t *)&v40);
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  char v17[8];
  WTF::StringImpl *v18;
  _QWORD v19[2];
  int v20;
  char v21;

  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 8;
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 6;
          goto LABEL_17;
        case 2:
          v4 = 5;
          goto LABEL_15;
        case 3:
          v4 = 10;
          goto LABEL_15;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 33;
          goto LABEL_17;
        case 5:
          v4 = 8;
          goto LABEL_15;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v4 = 13;
LABEL_17:
          v17[0] = v4;
          break;
        default:
          v4 = 24;
LABEL_15:
          v17[0] = v4;
          v18 = 0;
          break;
      }
      v13 = v18;
      v18 = 0;
      LOBYTE(v19[0]) = v4;
      v19[1] = v13;
      v20 = 1;
      v14 = a1[2];
      a1[2] = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (v20 != -1)
        ((void (*)(char *, _QWORD *))off_1E34EF7B0[v20])(&v21, v19);
      v20 = -1;
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v16 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(v16);
    }
  }
  else
  {
    v5 = *a1;
    v6 = *a2;
    v7 = *((_BYTE *)a2 + 8);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v8 = 1;
    *(_BYTE *)(v8 + 4) = 0;
    *(_QWORD *)(v8 + 8) = v6;
    *(_BYTE *)(v8 + 16) = v7;
    v9 = (unsigned int *)(v5 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    *(_QWORD *)(v8 + 24) = v5;
    v19[0] = v8;
    v20 = 0;
    v11 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v19);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v20 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E34EF7B0[v20])(v17, v19);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFA28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFA28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned int v3;
  WTF::StringImpl *result;
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  v3 = IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(a2);
  if (v3 < 0x10000)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  if ((v3 & 0xFF00) != 0)
  {
    switch((char)v3)
    {
      case 0:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        goto LABEL_15;
      case 1:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 6;
        break;
      case 2:
        v11 = 0;
        v5 = 5;
        break;
      case 3:
        v11 = 0;
        v5 = 10;
        break;
      case 4:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 33;
        break;
      case 5:
        v11 = 0;
LABEL_15:
        v5 = 8;
        break;
      case 6:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = 13;
        break;
      default:
        v11 = 0;
        v5 = 24;
        break;
    }
    LOBYTE(v8) = v5;
    v9 = v11;
    LOBYTE(v10) = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if ((_BYTE)v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t i;
  __int128 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 32);
    do
    {
      *(v10 - 2) = 0;
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (__int128 *)(v4 + 48 * i);
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) ^ ((*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v13 + 48 * v18;
          v8 = *(void **)v20;
          v18 = (v18 + v19++) & v14;
        }
        while (*(_QWORD *)v20);
        v21 = *v12;
        v22 = v12[2];
        *(_OWORD *)(v20 + 16) = v12[1];
        *(_OWORD *)(v20 + 32) = v22;
        *(_OWORD *)v20 = v21;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;

  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = *a2 + ~(*a2 << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v9 = *(_QWORD *)(v3 + 48 * v8);
    if (v9 == *a2)
    {
LABEL_6:
      v11 = v3 + 48 * v8;
      v12 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)a3 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(a3 + 16) = v12;
      return result;
    }
    v10 = 1;
    while (v9)
    {
      v8 = (v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 48 * v8);
      ++v10;
      if (v9 == *a2)
        goto LABEL_6;
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFileSystemStorageConnection::invalidateAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::WorkerGlobalScope *a2)
{
  uint64_t result;

  if (((*(uint64_t (**)(WebCore::WorkerGlobalScope *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
  {
    result = WebCore::WorkerGlobalScope::fileSystemStorageConnection(a2);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 128))(result, *(_QWORD *)(a1 + 8));
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFA78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFA78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  if (!a2 || !*a2)
  {
LABEL_6:
    v11 = 0uLL;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v11);
  if (!v12)
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
    goto LABEL_6;
  }
  v9 = v11;
  v10 = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(v5, (uint64_t *)a2 + 4);
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v6 = *((_QWORD *)a2 + 19);
    *((_QWORD *)a2 + 19) = 0;
    *(_QWORD *)(a1 + 152) = v6;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (*((_BYTE *)a2 + 184))
  {
    *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
    v7 = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = 0;
    *(_QWORD *)(a1 + 176) = v7;
    *(_BYTE *)(a1 + 184) = 1;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 192))
  {
    std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](a1 + 168, a2);
    if (*(_BYTE *)(a1 + 160))
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 152));
    if (*(_BYTE *)(a1 + 144))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 32), v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  uint64_t result;
  _BYTE v4[200];

  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>((uint64_t)v4, a2);
      return std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EFAC8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EFAC8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BYTE v5[200];

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>((uint64_t)v5, a2);
    if (v5[192])
    {
      WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(v2, (uint64_t)v5);
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(uint64_t *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v8[112];
  char v9;
  const char **v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  v3 = 0;
  v4 = 2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8[0] = 0;
  v9 = 0;
  LOBYTE(v10) = 0;
  v11 = 0;
  v12 = 0;
  v14 = 0;
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(a1, (uint64_t)&v3);
  if (v14)
  {
    v2 = v13;
    v13 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v1);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
  if (v11)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v10);
  if (v9)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v8, v1);
}

void WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,unsigned long long,std::optional<WebCore::HitTestResult> &&,BOOL,int,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a1;
    v5 = a1[1];
    v7 = *(_QWORD *)(v5 + 80);
    v8 = *(_QWORD *)(v5 + 24);
    if (v8
      && (v9 = *(_QWORD *)(v8 + 8)) != 0
      && (v10 = *(_QWORD *)(v9 + 24)) != 0
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (v12 = *(_QWORD **)(*(_QWORD *)(v11 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v12 + 1368))(v12) & 1) == 0))
    {
      v13 = *(_QWORD *)(v12[2] + 8);
      if (v13)
        v14 = v13 - 16;
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_QWORD **)(a1[1] + 24);
    if (v15)
    {
      v15 = (_QWORD *)v15[1];
      if (v15)
      {
        v15 = (_QWORD *)v15[3];
        if (v15)
        {
          v15 = (_QWORD *)v15[1];
          if (v15)
          {
            v16 = *(_QWORD **)(v15[6] + 16);
            if (((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) != 0)
            {
              v15 = 0;
            }
            else
            {
              v15 = *(_QWORD **)(v16[2] + 8);
              if (v15)
              {
                v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 24) + 8) + 24)
                                                         + 8)
                                             + 48)
                                 + 16);
                (*(void (**)(_QWORD *))(*v17 + 1368))(v17);
                v18 = *(_QWORD *)(v17[2] + 8);
                if (v18)
                  v19 = v18 - 16;
                else
                  v19 = 0;
                v15 = *(_QWORD **)(v19 + 40);
              }
            }
          }
        }
      }
    }
    v20 = *(unsigned __int8 *)(a2 + 2);
    v21 = 134219264;
    v22 = v6;
    v23 = 2048;
    v24 = v5;
    v25 = 2048;
    v26 = v7;
    v27 = 2048;
    v28 = v14;
    v29 = 2048;
    v30 = v15;
    v31 = 1024;
    v32 = v20;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: Got policyAction %u from async IPC", (uint8_t *)&v21, 0x3Au);
  }
  WebKit::WebFrame::didReceivePolicyDecision((CFTypeRef *)a1[1], a1[2], (__int16 *)a2);
}

uint64_t *WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD v12[2];

  v4 = result;
  if (*a2)
  {
    v5 = *(unsigned int *)(*a2 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v6 = WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v4 + 2) = v5;
      *v4 = v6;
    }
  }
  result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v12[0] = result;
  v12[1] = v7;
  if (*a2)
    v9 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v9 = 0;
  if ((uint64_t *)v9 != result)
  {
    do
    {
      v10 = (_DWORD *)*result;
      if (*result)
        *v10 += 2;
      v11 = *((unsigned int *)v4 + 3);
      *(_QWORD *)(*v4 + 8 * v11) = v10;
      *((_DWORD *)v4 + 3) = v11 + 1;
      v12[0] = result + 1;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v7, v8);
      result = (uint64_t *)v12[0];
    }
    while (v12[0] != v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, a2[1]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFAF0;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFAF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int16 v5[96];
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>((uint64_t)v5, a2);
    if (v6)
    {
      WebKit::WebFrame::didReceivePolicyDecision(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16), v5);
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
}

void IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(CFTypeRef *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  _BYTE v9[112];
  char v10;
  const char **v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;

  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9[0] = 0;
  v10 = 0;
  LOBYTE(v11) = 0;
  v12 = 0;
  v13 = 0;
  v15 = 0;
  WebKit::WebFrame::didReceivePolicyDecision(a1, a2, &v4);
  if (v15)
  {
    v3 = v14;
    v14 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  if (v12)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v11);
  if (v10)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v9, v2);
}

_QWORD *WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFB18;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFB18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int16 v5[96];
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>((uint64_t)v5, a2);
    if (v6)
    {
      WebKit::WebFrame::didReceivePolicyDecision(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16), v5);
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebKit::PolicyDecision>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFB40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFB40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v7;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34EFB68;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFB68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v9), !v11))
  {
    v9 = 0;
    v10 = 0;
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  if (!HIDWORD(v10))
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  v4 = *(WebCore::Document **)(v3 + 8);
  if (!v4)
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  v5 = *((_QWORD *)v4 + 86);
  if (!v5)
    v5 = WebCore::Document::ensureQuirks(v4);
  v6 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v6)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v5 + 80), (WTF::StringImpl *)(*(_QWORD *)(v5 + 80) + 8 * v6));
  result = *(WTF **)(v5 + 80);
  if (result)
  {
    *(_QWORD *)(v5 + 80) = 0;
    *(_DWORD *)(v5 + 88) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *(_QWORD *)(v5 + 80) = v9;
  v8 = v10;
  v9 = 0;
  v10 = 0;
  *(_QWORD *)(v5 + 88) = v8;
  if (v11)
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFB90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFB90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  _BYTE v6[80];
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34EF838[v7])(&v5, v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  _QWORD v4[10];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34EF838[v5])(&v3, v4);
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1943;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,0ul,1ul>((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::LinkIcon,void>::encode(a1, *(_QWORD *)a2);
  return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
}

void WebCore::MessageWithMessagePorts::~MessageWithMessagePorts(WebCore::MessageWithMessagePorts *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::SerializedScriptValue *v7;

  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (WebCore::SerializedScriptValue *)v4;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7);
    }
  }
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v27;
  uint64_t result;
  int v29;
  __int16 v30;
  char v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + 32 * v13;
      if (*(_QWORD *)v15 != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 32 * v13 + 16, v10);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v29, (_QWORD *)(v6 + 32 * v13), (_QWORD *)(v15 + 8));
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v20 = 0;
          do
          {
            v21 = v18 & v17;
            v22 = v16 + 32 * v21;
            v18 = ++v20 + v21;
          }
          while (*(_OWORD *)v22 != 0);
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 + 16, v19);
          *(_OWORD *)v22 = *(_OWORD *)v15;
          v23 = v6 + 32 * v13;
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v22 + 24) = 0;
          v24 = *(_QWORD *)(v23 + 16);
          v23 += 16;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)(v22 + 16) = v24;
          v25 = *(_DWORD *)(v23 + 8);
          *(_DWORD *)(v23 + 8) = 0;
          *(_DWORD *)(v22 + 24) = v25;
          v26 = *(_DWORD *)(v23 + 12);
          *(_DWORD *)(v23 + 12) = 0;
          *(_DWORD *)(v22 + 28) = v26;
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23, v27);
          if (v15 == a3)
            v14 = v22;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v3 = *result;
  if (*result)
    v3 += 32 * *(unsigned int *)(v3 - 4);
  if ((_QWORD *)v3 == a2)
  {
    v6[0] = 0;
    *a3 = 0;
    v6[1] = 0;
    a3[1] = 0;
    return (uint64_t *)WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, a2);
  }
  *a3 = a2[2];
  v4 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a3[1] = v4;
  if (*result)
  {
    v5 = *result + 32 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v5 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v5 = 0;
  }
  if ((_QWORD *)v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(result, a2);
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  result = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 2), a2 + 2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EFBB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EFBB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t **v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_42:
    v55 = 0;
    v56 = 0;
    WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(v2, (uint64_t)&v55, 0);
    v19 = (uint64_t **)&v55;
    return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v26 = *a2;
        v27 = a2[1];
        v28 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v28)
        {
          if (v27)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
        }
      }
    }
LABEL_40:
    v38 = *a2;
    v39 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40 && v39)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
LABEL_41:
    v41 = *a2;
    v42 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v43 = a2[3];
    if (v43)
    {
      if (v42)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
    }
    goto LABEL_42;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v60 = 0;
  v61 = 0;
  if (v9 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a2, (uint64_t)&v55);
      if (!v59)
        goto LABEL_39;
      v29 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)&v60, (unint64_t)&v55);
      }
      else
      {
        v30 = v60 + 24 * HIDWORD(v61);
        v31 = v55;
        v55 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)v30 = v31;
        v32 = v56;
        v56 = 0;
        *(_QWORD *)(v30 + 8) = v32;
        LODWORD(v32) = v57;
        v57 = 0;
        *(_DWORD *)(v30 + 16) = v32;
        LODWORD(v32) = v58;
        v58 = 0;
        *(_DWORD *)(v30 + 20) = v32;
        HIDWORD(v61) = v29 + 1;
      }
      result = std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v20);
      --v9;
    }
    while (v9);
    v44 = HIDWORD(v61);
    v11 = (uint64_t *)v60;
    if (v61 > HIDWORD(v61))
    {
      v45 = (uint64_t *)v60;
      if (HIDWORD(v61))
      {
        if (HIDWORD(v61) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v46 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v61)));
        LODWORD(v61) = 24 * v44 / 0x18;
        v60 = v46;
        v45 = v11;
        if ((uint64_t *)v46 != v11)
        {
          WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(v11, &v11[3 * v44], v46);
          v45 = (uint64_t *)v60;
        }
      }
      if (v11)
      {
        if (v45 == v11)
        {
          v60 = 0;
          LODWORD(v61) = 0;
        }
        WTF::fastFree((WTF *)v11, v4);
        v11 = (uint64_t *)v60;
      }
      else
      {
        v11 = v45;
      }
    }
    v60 = 0;
    v52 = v11;
    LODWORD(v9) = v61;
    v10 = HIDWORD(v61);
    goto LABEL_12;
  }
  if (v9)
  {
    LODWORD(v61) = 24 * (int)v9 / 0x18u;
    v60 = WTF::fastMalloc((WTF *)(24 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a2, (uint64_t)&v55);
      if (!v59)
        break;
      v21 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)&v60, (unint64_t)&v55);
      }
      else
      {
        v22 = v60 + 24 * HIDWORD(v61);
        v23 = v55;
        v55 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)v22 = v23;
        v24 = v56;
        v56 = 0;
        *(_QWORD *)(v22 + 8) = v24;
        LODWORD(v24) = v57;
        v57 = 0;
        *(_DWORD *)(v22 + 16) = v24;
        LODWORD(v24) = v58;
        v58 = 0;
        *(_DWORD *)(v22 + 20) = v24;
        HIDWORD(v61) = v21 + 1;
      }
      std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v20);
      if (!--v9)
      {
        v11 = (uint64_t *)v60;
        LODWORD(v9) = v61;
        v10 = HIDWORD(v61);
        goto LABEL_11;
      }
    }
LABEL_39:
    std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v20);
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v37);
    goto LABEL_40;
  }
  v10 = 0;
  v11 = 0;
LABEL_11:
  v60 = 0;
  v52 = v11;
LABEL_12:
  v61 = 0;
  v53 = __PAIR64__(v10, v9);
  v54 = 1;
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v4);
  v12 = a2[1];
  v13 = (char *)*a2;
  v14 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v12 < v14 || v12 - v14 <= 7)
  {
    v33 = 0;
    v34 = 0;
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v34 = *a2;
        v33 = a2[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
    goto LABEL_37;
  }
  v15 = (uint64_t *)&v13[v14];
  a2[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    v33 = v12;
    v34 = 0;
LABEL_37:
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36 && v33)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v13);
    goto LABEL_41;
  }
  v16 = *v15;
  v52 = 0;
  v53 = 0;
  v47 = v11;
  v48 = v9;
  v49 = v10;
  v50 = v16;
  v51 = 1;
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v13);
  result = WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(v2, (uint64_t)&v47, v16);
  if (!v51)
    return result;
  v19 = &v47;
  return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
}

uint64_t WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[2];
  _QWORD *v27;
  int v28;
  int v29;

  {
    v6 = (_QWORD *)WebKit::WebMessagePortChannelProvider::singleton(void)::provider;
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = off_1E34EF690;
    WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)v6;
  }
  v7 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(v6 + 2, a1 + 1);
  v9 = (uint64_t *)v6[2];
  if (v9)
    v9 += 4 * *((unsigned int *)v9 - 1);
  if (v9 != v7)
  {
    v10 = v7[2];
    v27 = (_QWORD *)v10;
    v11 = *((unsigned int *)v7 + 7);
    v28 = *((_DWORD *)v7 + 6);
    v29 = v11;
    v26[0] = 0;
    v7[2] = 0;
    v26[1] = 0;
    v7[3] = 0;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v8);
    v13 = *(unsigned int *)(a2 + 8);
    v14 = *(unsigned int *)(a2 + 12) + v11;
    if (v14 > v13)
    {
      v15 = v13 + (v13 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v14)
        v17 = *(unsigned int *)(a2 + 12) + v11;
      else
        v17 = v16;
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a2, v17);
    }
    if ((_DWORD)v11)
    {
      v18 = v10 + 24 * v11;
      v19 = *(_DWORD *)(a2 + 12);
      do
      {
        v20 = *(_QWORD *)a2 + 24 * v19;
        v21 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = v21;
        v22 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v20 + 8) = v22;
        LODWORD(v22) = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v20 + 16) = v22;
        LODWORD(v22) = *(_DWORD *)(v10 + 20);
        *(_DWORD *)(v10 + 20) = 0;
        *(_DWORD *)(v20 + 20) = v22;
        v19 = *(_DWORD *)(a2 + 12) + 1;
        *(_DWORD *)(a2 + 12) = v19;
        v10 += 24;
      }
      while (v10 != v18);
    }
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v12);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E34EFBE0;
  v23[1] = a3;
  v27 = v23;
  v24 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v24 + 16))(v24, a2, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long long)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 227;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *a1 = off_1E34EFC08;
  v3 = (unsigned int *)a1[35];
  a1[35] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)a1[34];
  a1[34] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v6, a2);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *a1 = off_1E34EFC08;
  v3 = (unsigned int *)a1[35];
  a1[35] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)a1[34];
  a1[34] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v6, a2);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return WTF::fastFree((WTF *)a1, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  *(_QWORD *)&v13 = "WebNotificationManager";
  *((_QWORD *)&v13 + 1) = 23;
  v3 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v2 + 34, (WTF::ASCIILiteralHash *)&v13);
  v4 = *(_QWORD *)(a1 + 280);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = (CFTypeRef *)(v5 - 16);
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v13 = *(_OWORD *)(a1 + 288);
  *(_QWORD *)&v14 = *(_QWORD *)(a1 + 304);
  v8 = *(_QWORD *)(a1 + 320);
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v9 = off_1E34EFC30;
  *(_OWORD *)(v9 + 16) = v13;
  *(_OWORD *)(v9 + 32) = v14;
  *(_QWORD *)(v9 + 48) = v8;
  v12 = v9;
  **(_BYTE **)(a1 + 16) = WebKit::WebNotificationManager::show((uint64_t)v3, a1 + 32, a1 + 272, (WebCore::DeprecatedGlobalSettings *)v6, &v12);
  v10 = v12;
  v12 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if ((v7 & 1) == 0)
    CFRelease(v6[1]);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34EFC58;
  v2[1] = v1;
  v4 = v2;
  WebCore::ScriptExecutionContext::ensureOnContextThread();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21WebNotificationClient4showERN7WebCore22ScriptExecutionContextEONS4_16NotificationDataEONS_6RefPtrINS4_21NotificationResourcesENS_12RawPtrTraitsISA_EENS_21DefaultRefDerefTraitsISA_EEEEONS_17CompletionHandlerIFvvEEEEN3__0clEvENKUlvE_clEvEUlRT_E_vJS6_EE4callES6_()
{
  uint64_t result;
  uint64_t v1;

  result = WebCore::ScriptExecutionContext::takeNotificationCallback();
  if (v1)
  {
    (*(void (**)())(*(_QWORD *)v1 + 16))();
    (*(void (**)())(*(_QWORD *)v1 + 8))();
    return 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E34EFC80;
  v3 = (unsigned int *)a1[32];
  a1[32] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = off_1E34EFC80;
  v3 = (unsigned int *)a1[32];
  a1[32] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  _QWORD v9[2];

  v2 = a1 + 16;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v9[0] = "WebNotificationManager";
  v9[1] = 23;
  v4 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v3 + 34, (WTF::ASCIILiteralHash *)v9);
  v5 = (uint64_t)v4;
  v6 = *(_QWORD *)(a1 + 256);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    WebKit::WebNotificationManager::cancel(v5, v2, (WebCore::DeprecatedGlobalSettings *)(v7 - 16));
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    WebKit::WebNotificationManager::cancel((uint64_t)v4, v2, 0);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E34EFCA8;
  v3 = (unsigned int *)a1[32];
  a1[32] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = off_1E34EFCA8;
  v3 = (unsigned int *)a1[32];
  a1[32] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  _QWORD v9[2];

  v2 = a1 + 16;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v9[0] = "WebNotificationManager";
  v9[1] = 23;
  v4 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v3 + 34, (WTF::ASCIILiteralHash *)v9);
  v5 = (uint64_t)v4;
  v6 = *(_QWORD *)(a1 + 256);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    WebKit::WebNotificationManager::didDestroyNotification(v5, v2, (WebCore::DeprecatedGlobalSettings *)(v7 - 16));
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    WebKit::WebNotificationManager::didDestroyNotification((uint64_t)v4, v2, 0);
  }
}

WebKit::WebNotificationClient *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationControllerDestroyed(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  WebKit::WebNotificationClient *result;
  WTF *v3;
  void *v4;

  result = *(WebKit::WebNotificationClient **)(a1 + 8);
  if (result)
  {
    WebKit::WebNotificationClient::~WebNotificationClient(result, a2);
    return (WebKit::WebNotificationClient *)WTF::fastFree(v3, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34EFCF8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34EFCF8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  WebKit::WebNotificationManager *v3;
  uint64_t result;
  WebKit::WebProcess *v5;
  _QWORD v6[2];

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v6[0] = "WebNotificationManager";
  v6[1] = 23;
  v3 = (WebKit::WebNotificationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v2 + 34, (WTF::ASCIILiteralHash *)v6);
  result = WebKit::WebNotificationManager::policyForOrigin(v3, (WTF::StringImpl **)(a1 + 16), 0);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

unsigned int *WebKit::WebPasteboardOverrides::addOverride(uint64_t *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, const WTF::StringImpl *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[3];

  v9 = 0;
  WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, a2, (const WTF::StringImpl *)&v9, (uint64_t)v10);
  v7 = v10[0];
  if (v9)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
  return WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)(v7 + 8), a3, a4, (uint64_t)v10);
}

uint64_t WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  uint64_t result;
  void *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    v19 = *(WTF **)a3;
    *(_QWORD *)a3 = 0;
    result = (uint64_t)v15[1];
    v15[1] = v19;
    if (result)
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v18);
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_28:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF **)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_28;
    }
    v29 = v24 + 16 * v27;
    v28 = 1;
    goto LABEL_35;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v28 = 0;
  v29 = v22 + 16 * v23;
LABEL_35:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t *WebKit::WebPasteboardOverrides::removeOverride(WebKit::WebPasteboardOverrides *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t *result;
  const WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this, a2, a3);
  v7 = result;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  if ((uint64_t *)v8 == result)
    return result;
  v9 = result + 1;
  result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result + 1, (WTF::StringImpl **)a3, v6);
  v10 = v7[1];
  if (v10)
  {
    v11 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
    if (v11 == result)
      goto LABEL_12;
  }
  else
  {
    if (!result)
      goto LABEL_13;
    v11 = 0;
  }
  if (v11 != result)
  {
    result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v7 + 1, (WTF::StringImpl *)result);
    v10 = *v9;
  }
  if (v10)
  {
LABEL_12:
    if (*(_DWORD *)(v10 - 12))
      return result;
  }
LABEL_13:
  if (*(_QWORD *)this)
  {
    v12 = *(_QWORD *)this + 16 * *(unsigned int *)(*(_QWORD *)this - 4);
    if ((uint64_t *)v12 == v7)
      return result;
  }
  else
  {
    if (!v7)
      return result;
    v12 = 0;
  }
  if ((uint64_t *)v12 != v7)
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)this, (WTF::StringImpl *)v7);
  return result;
}

uint64_t WebKit::WebPasteboardOverrides::overriddenTypes(WebKit::WebPasteboardOverrides *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  _QWORD *v15;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, a2, a3);
  v5 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides;
  if (WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides)
    v5 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides
       + 16 * *(unsigned int *)(WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides - 4);
  if (v5 == result)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return result;
  }
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 24 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(result + 8);
      if ((_DWORD)v7)
      {
        v10 = 24 * v7;
        v9 = *(_QWORD **)(result + 8);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 3;
          v10 -= 24;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v9 = (_QWORD *)(v6 + 24 * v7);
  }
  else
  {
    v9 = 0;
    LODWORD(v7) = 0;
  }
  v8 = (_QWORD *)(v6 + 24 * v7);
  if (!v6)
  {
    result = 0;
    v11 = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    goto LABEL_19;
  }
LABEL_11:
  v11 = (_QWORD *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v12 = *(unsigned int *)(v6 - 12);
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)this + 2) = v12;
    *(_QWORD *)this = result;
  }
  else
  {
    result = 0;
  }
LABEL_19:
  if (v11 != v9)
  {
    v13 = 0;
    do
    {
      v14 = (_DWORD *)*v9;
      if (*v9)
        *v14 += 2;
      *(_QWORD *)(result + 8 * v13) = v14;
      v15 = v9 + 3;
      v9 = v8;
      if (v15 != v8)
      {
        v9 = v15;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 3;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      ++v13;
    }
    while (v9 != v11);
    *((_DWORD *)this + 3) = v13;
  }
  return result;
}

uint64_t WebKit::WebPasteboardOverrides::overriddenInfo(WebKit::WebPasteboardOverrides *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[40];
  __int128 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[12];
  int v28;

  WebKit::WebPasteboardOverrides::overriddenTypes((WebKit::WebPasteboardOverrides *)v27, a2, a3);
  if (v28)
  {
    v21[32] = 0;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    v23 = 0;
    v19 = 0u;
    v20 = 0u;
    memset(v21, 0, 25);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v21, (uint64_t)v27);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v20, (uint64_t)v27);
    *(_QWORD *)&v19 = 0;
    *(_QWORD *)this = 0;
    v5 = *((_QWORD *)&v19 + 1);
    *((_QWORD *)&v19 + 1) = 0;
    *((_QWORD *)this + 1) = v5;
    v6 = v20;
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)this + 2) = v6;
    v7 = *((_QWORD *)&v20 + 1);
    *((_QWORD *)&v20 + 1) = 0;
    *((_QWORD *)this + 3) = v7;
    v8 = *(_QWORD *)v21;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)this + 4) = v8;
    v9 = *(_QWORD *)&v21[8];
    *(_QWORD *)&v21[8] = 0;
    *((_QWORD *)this + 5) = v9;
    *((_QWORD *)this + 6) = *(_QWORD *)&v21[16];
    v10 = *(_OWORD *)&v21[24];
    v11 = v22;
    *((_WORD *)this + 44) = v23;
    *(_OWORD *)((char *)this + 72) = v11;
    *(_OWORD *)((char *)this + 56) = v10;
    v12 = v24;
    *(_QWORD *)&v21[16] = 0;
    v24 = 0;
    *((_QWORD *)this + 12) = v12;
    *(_QWORD *)&v10 = v25;
    v25 = 0;
    *((_QWORD *)this + 13) = v10;
    *((_BYTE *)this + 112) = v26;
    *((_BYTE *)this + 120) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v13);
    v15 = *(WTF::StringImpl **)&v21[16];
    *(_QWORD *)&v21[16] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v14);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 120) = 0;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v4);
}

uint64_t WebKit::WebPasteboardOverrides::getDataForOverride(const WTF::StringImpl **a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v7;
  const WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int j;
  int v21;
  WTF **v22;
  WTF *v23;
  WTF **v24;

  v3 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides;
  if (!WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides)
    return 0;
  v7 = *(_DWORD *)(WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides - 8);
  v8 = *a1;
  v9 = *((_DWORD *)v8 + 4);
  v10 = v9 >= 0x100 ? v9 >> 8 : WTF::StringImpl::hashSlowCase(v8);
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v7;
    v13 = *(WTF **)(v3 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
      {
        v14 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides;
        if (!WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides)
          return 0;
        v15 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides
            + 16
            * *(unsigned int *)(WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides - 4);
        goto LABEL_13;
      }
      if ((WTF::equal(v13, *a1, a3) & 1) != 0)
        break;
    }
  }
  v15 = v3 + 16 * v12;
  v14 = WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides;
  if (!WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides)
    goto LABEL_14;
LABEL_13:
  v14 += 16 * *(unsigned int *)(v14 - 4);
LABEL_14:
  if (v14 == v15)
    return 0;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = *((_DWORD *)*a2 + 4);
  v19 = v18 >= 0x100 ? v18 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (j = 0; ; v19 = ++j + v21)
  {
    v21 = v19 & v17;
    v22 = (WTF **)(v16 + 24 * (v19 & v17));
    v23 = *v22;
    if (*v22 != (WTF *)-1)
    {
      if (!v23)
      {
        v24 = *(WTF ***)(v15 + 8);
        if (!v24)
          return 0;
        v22 = &v24[3 * *((unsigned int *)v24 - 1)];
        goto LABEL_27;
      }
      if ((WTF::equal(v23, *a2, a3) & 1) != 0)
        break;
    }
  }
  v24 = *(WTF ***)(v15 + 8);
  if (!v24)
    goto LABEL_28;
LABEL_27:
  v24 += 3 * *((unsigned int *)v24 - 1);
LABEL_28:
  if (v24 == v22)
    return 0;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a3, (uint64_t)(v22 + 1));
  return 1;
}

IPC::Encoder *WebKit::WebPerformanceLoggingClient::logScrollingEvent(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  void *v31;
  IPC::Encoder *result;
  WTF *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  void *v46;
  IPC::Encoder *v47;

  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v7 + 32);
  v8 = v7 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1968;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v47 = (IPC::Encoder *)v11;
  v13 = *(_QWORD *)(v11 + 544);
  v14 = (v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = *(_QWORD *)(v11 + 552);
  if (v16 < v14 + 4)
  {
    v35 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v36 = v35;
      v35 *= 2;
    }
    while (v36 < v15);
    v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
    if (v37 == (char *)-1)
      goto LABEL_30;
    v17 = v37;
    memcpy(v37, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v38 = *(void **)(v11 + 528);
    if (v38 != v12)
      munmap(v38, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v17;
    *(_QWORD *)(v11 + 552) = v36;
    v13 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v17 = *(char **)(v11 + 528);
  }
  bzero(&v17[v13], v14 - v13);
  *(_QWORD *)(v11 + 544) = v15;
  v18 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v14);
  *(_QWORD *)(v11 + 536) = v18 + 1;
  *v18 = a2;
  v19 = *(_QWORD *)(v11 + 544);
  v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  v22 = *(_QWORD *)(v11 + 552);
  if (v22 < v20 + 8)
  {
    v39 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v21);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197630ADCLL);
    }
    v23 = v41;
    memcpy(v41, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v42 = *(void **)(v11 + 528);
    if (v42 != v12)
      munmap(v42, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v23;
    *(_QWORD *)(v11 + 552) = v40;
    v19 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v23 = *(char **)(v11 + 528);
  }
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(v11 + 544) = v21;
  v24 = (double *)(*(_QWORD *)(v11 + 528) + v20);
  *(_QWORD *)(v11 + 536) = v24 + 1;
  *v24 = a4;
  v25 = *(_QWORD *)(v11 + 544);
  v26 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 + 8;
  v28 = *(_QWORD *)(v11 + 552);
  if (v28 >= v26 + 8)
  {
    v29 = *(char **)(v11 + 528);
    goto LABEL_7;
  }
  v43 = (2 * v28 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v44 = v43;
    v43 *= 2;
  }
  while (v44 < v27);
  v45 = (char *)mmap(0, v44, 3, 4098, -1, 0);
  if (v45 == (char *)-1)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x197630AD4);
  }
  v29 = v45;
  memcpy(v45, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
  v46 = *(void **)(v11 + 528);
  if (v46 != v12)
    munmap(v46, *(_QWORD *)(v11 + 552));
  *(_QWORD *)(v11 + 528) = v29;
  *(_QWORD *)(v11 + 552) = v44;
  v25 = *(_QWORD *)(v11 + 544);
LABEL_7:
  bzero(&v29[v25], v26 - v25);
  *(_QWORD *)(v11 + 544) = v27;
  v30 = (_QWORD *)(*(_QWORD *)(v11 + 528) + v26);
  *(_QWORD *)(v11 + 536) = v30 + 1;
  *v30 = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v47, 0);
  result = v47;
  v47 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v33, v34);
  }
  return result;
}

void WebKit::WebPermissionController::~WebPermissionController(WebKit::WebPermissionController *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  WebKit::WebProcess *v5;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)v2 + 5, 0xB8u);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPermissionController::~WebPermissionController(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebPermissionController::~WebPermissionController(WebKit::WebPermissionController *this)
{
  WebKit::WebPermissionController::~WebPermissionController((WebKit::WebPermissionController *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPermissionController::~WebPermissionController((WebKit::WebPermissionController *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebPermissionController::query(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  char v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *result;
  WTF *v25;
  void *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  IPC::Encoder *v30;

  v7 = a5;
  LOBYTE(v27) = 0;
  v28 = 0;
  if (a5 <= 1)
  {
    v10 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 48) + 16);
    (*(void (**)(_QWORD *))(*v10 + 1368))(v10);
    v11 = *(_QWORD *)(v10[2] + 8);
    if (v11)
      v12 = v11 - 16;
    else
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 2120);
    v28 = 1;
    v27 = v13;
  }
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
  }
  v16 = *((_QWORD *)v14 + 2);
  v15 = (_QWORD *)((char *)v14 + 16);
  v17 = (*(uint64_t (**)(_QWORD *))(v16 + 56))(v15);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2536;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v30 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v18, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a3;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v18, &v27);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v7;
  v19 = *a6;
  *a6 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34F07F0;
  v20[1] = v19;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v29[0] = v20;
  v29[1] = v21;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v15 + 40))(v15, &v30, v29, 0);
  v23 = v29[0];
  v29[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v30;
  v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v22);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

unsigned int *WebKit::WebPermissionController::addObserver(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  unsigned int *result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  v3 = (uint64_t *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 44);
  v5 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v5;
  if (v5 <= v4)
    goto LABEL_31;
  v7 = *v3;
  if (!*v3)
    goto LABEL_26;
  v8 = *(_DWORD *)(v7 - 4);
  if (!v8)
  {
LABEL_25:
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_28;
  }
  v9 = 0;
  do
  {
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 8 * --v8);
      if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
        break;
      if (!v8)
        goto LABEL_14;
    }
    *(_QWORD *)(v7 + 8 * v8) = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    *(_QWORD *)(v7 + 8 * v8) = -1;
    ++v9;
  }
  while (v8);
LABEL_14:
  v7 = *v3;
  if (v9)
  {
    *(_DWORD *)(v7 - 16) += v9;
    v13 = *v3;
    if (*v3)
      v14 = *(_DWORD *)(v13 - 12);
    else
      v14 = 0;
    *(_DWORD *)(v13 - 12) = v14 - v9;
    v7 = *v3;
  }
  if (!v7)
  {
LABEL_26:
    v17 = 0;
    *(_DWORD *)(a1 + 40) = 0;
LABEL_29:
    v18 = v17;
    goto LABEL_30;
  }
  v15 = *(_DWORD *)(v7 - 4);
  if (v15 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v15)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
  v7 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  if (!v7)
  {
    v17 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v17 = *(_DWORD *)(v7 - 12);
  v18 = 0x7FFFFFFF;
  if (v17 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 44) = 2 * v18;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v19 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v29 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v29, (uint64_t)&v28);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v26 = __ldaxr(result);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, result));
    if (!v27)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
    }
  }
  if (v19)
  {
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      atomic_store(1u, v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v22);
    }
  }
  return result;
}

uint64_t *WebKit::WebPermissionController::removeObserver(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result + 4;
  v4 = *((_DWORD *)result + 11);
  v5 = *((_DWORD *)result + 10) + 1;
  *((_DWORD *)result + 10) = v5;
  if (v5 > v4)
  {
    v6 = result;
    v7 = *v3;
    if (*v3)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          result = *(uint64_t **)(v7 + 8 * --v8);
          if ((unint64_t)result + 1 >= 2 && !result[1])
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)result);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)result));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v12 = *v3;
        if (*v3)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v9;
        v7 = *v3;
      }
      if (v7)
      {
        v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          v7 = v6[4];
          *((_DWORD *)v6 + 10) = 0;
          if (!v7)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)v6 + 10) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v7 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)v6 + 11) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *((_DWORD *)v6 + 10) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = a2[1];
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v20 = a2[1];
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v19 = 0;
    }
    if ((uint64_t *)v19 != result)
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)result);
  }
  return result;
}

uint64_t WebKit::WebPermissionController::permissionChanged(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *i;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _BYTE v30[24];
  int v31;
  _BYTE v32[24];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 32;
  v25 = a1 + 32;
  v26 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 32));
  v27 = v5;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 8 * v7);
    v28 = v8;
    v29 = v8;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
  }
  else
  {
    v28 = 0;
    v29 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
    v8 = 0;
    v7 = 0;
  }
  v20 = v4;
  v21 = v8;
  v22 = v8;
  v23 = v8;
  v24 = v6 + 8 * v7;
  result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v20);
  for (i = v26; i != v21; ++*(_DWORD *)(v25 + 8))
  {
    v11 = *(unsigned int **)(*i + 8);
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 40))(v11);
    if (a2 != result)
      break;
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 32))(v11);
    result = WebCore::operator==();
    if (!(_DWORD)result)
      break;
    v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 48))(v11);
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 56))(v11);
    if ((!*(_QWORD *)result || !*(_QWORD *)(*(_QWORD *)result + 8)) && v12 < 2)
      break;
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 32))(v11);
    v30[0] = 0;
    v31 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, v13);
    v32[0] = 0;
    v33 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, v13 + 32);
    v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 56))(v11);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v11 + 2, (uint64_t)v11);
    v15 = (unsigned int *)*((_QWORD *)v11 + 1);
    if (v15)
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = &off_1E34F0818;
    v17[1] = v15;
    v19 = v17;
    WebKit::WebPermissionController::query((uint64_t)v17, (uint64_t)v30, a2, v14, v12, (uint64_t *)&v19);
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    if (v33 != -1)
      ((void (*)(_QWORD **, _BYTE *))off_1E34F0610[v33])(&v19, v32);
    v33 = -1;
    if (v31 != -1)
      ((void (*)(_QWORD **, _BYTE *))off_1E34F0610[v31])(&v19, v30);
    v18 = v26 + 1;
    v26 = v18;
    if (v18 != v27)
    {
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        if (++v18 == v27)
        {
          v18 = v27;
          break;
        }
      }
      v26 = v18;
    }
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
    i = v26;
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::createPasteboardStrategy(WebKit::WebPlatformStrategies *this)
{
  return (uint64_t)this + 56;
}

_QWORD *WebKit::WebPlatformStrategies::createBlobRegistry(WebKit::WebPlatformStrategies *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1E34E1058;
  return result;
}

uint64_t WebKit::WebPlatformStrategies::createPushStrategy(WebKit::WebPlatformStrategies *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebKit::WebPlatformStrategies::getTypes(int a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t *v5;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t result;
  __n128 v12;
  WebKit::WebProcess *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  IPC::Encoder *v16;
  int v17;
  int v18;
  void *v19;
  uint64_t *v20;
  IPC::Decoder *v21;
  WTF *v22;
  void *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  void *v27;
  WebKit::WebProcess *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31[2];
  uint64_t *v32;
  WTF::StringImpl **v33;
  unint64_t v34;
  int v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  int v40;
  IPC::Encoder *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  _QWORD v44[3];

  v5 = (uint64_t *)a3;
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  WebKit::WebPasteboardOverrides::overriddenTypes((WebKit::WebPasteboardOverrides *)&v32, a3, (const WTF::StringImpl *)a3);
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 8 * v8));
  v9 = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v9, v7);
  }
  *(_QWORD *)a2 = v32;
  v10 = v33;
  v32 = 0;
  v33 = 0;
  *(_QWORD *)(a2 + 8) = v10;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v7);
  if (!*(_DWORD *)(a2 + 12))
  {
    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v28);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
    }
    v14 = (WTF::StringImpl **)*((_QWORD *)v13 + 4);
    v31[0] = WebKit::pageIdentifier(a4, v12);
    v31[1] = v15;
    v42 = 0;
    IPC::Connection::createSyncMessageEncoder(3714, 0, &v42, (uint64_t *)&v41);
    v16 = v41;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v41, v5);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v16, v31);
    IPC::Connection::sendSyncMessage((uint64_t)v14, v42, (uint64_t *)&v41, 0, (uint64_t)&v39, INFINITY);
    if (v40)
    {
      if (v40 == 1)
      {
        LOBYTE(v32) = (_BYTE)v39;
        v17 = 1;
        v35 = 1;
        v18 = 1;
        goto LABEL_22;
      }
LABEL_30:
      v29 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::pageIdentifier(v29, v30);
    }
    LOBYTE(v36) = 0;
    v38 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v39, &v36);
    if (v38)
    {
      if (v40)
        goto LABEL_30;
      v20 = v39;
      v39 = 0;
      v14 = v36;
      v36 = 0;
      LODWORD(v16) = v37;
      LODWORD(v5) = HIDWORD(v37);
      v37 = 0;
      v43 = 0;
      v44[0] = 0;
      v32 = v20;
      v33 = v14;
      v44[1] = 0;
      v34 = __PAIR64__(v5, v16);
      v35 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
      v21 = (IPC::Decoder *)v43;
      v43 = 0;
      if (v21)
      {
        IPC::Decoder::~Decoder(v21);
        WTF::fastFree(v22, v23);
      }
      if (v38)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v19);
      v17 = 0;
    }
    else
    {
      LOBYTE(v32) = 13;
      v17 = 1;
      v35 = 1;
    }
    v18 = v40;
    if (v40 == -1)
    {
LABEL_23:
      v24 = v41;
      v41 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v19);
        WTF::fastFree(v25, v26);
      }
      if (!v17)
      {
        v33 = 0;
        v34 = 0;
        v43 = v14;
        v44[0] = __PAIR64__(v5, v16);
        v36 = (WTF::StringImpl **)a2;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(&v36, &v43);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v27);
      }
      return ((uint64_t (*)(WTF::StringImpl ***, uint64_t **))off_1E34F0620[v17])(&v43, &v32);
    }
LABEL_22:
    ((void (*)(WTF::StringImpl ***, uint64_t **))off_1E34F0830[v18])(&v43, &v39);
    goto LABEL_23;
  }
  return result;
}

uint64_t WebKit::pageIdentifier(uint64_t a1, __n128 a2)
{
  int8x16_t v2;
  int v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t result;

  v2 = 0uLL;
  if (!a1)
  {
    v5 = 0uLL;
    return vorrq_s8(v2, v5).u64[0];
  }
  v4 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, a2, (__n128)0);
  v2 = 0uLL;
  v5 = 0uLL;
  if (!v4)
    return vorrq_s8(v2, v5).u64[0];
  if (((*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, (__n128)0, (__n128)0) & 1) != 0)
  {
    v6 = *(int8x16_t *)(a1 + 8);
    v7.i64[0] = -256;
    v7.i64[1] = -256;
    v5 = vandq_s8(v6, v7);
    v8.i64[0] = 255;
    v8.i64[1] = 255;
    v2 = vandq_s8(v6, v8);
    return vorrq_s8(v2, v5).u64[0];
  }
  result = 96;
  __break(0xC471u);
  return result;
}

WTF *WebKit::WebPlatformStrategies::bufferForType@<X0>(WTF::StringImpl **a1@<X1>, const WTF::StringImpl **a2@<X2>, unsigned int *a3@<X3>, unsigned int **a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  __n128 v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  unsigned int v21;
  WTF *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WebKit::WebProcess *v27;
  _QWORD v28[2];
  uint64_t *v29[3];
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int *v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  _QWORD v37[3];
  char v38;
  uint64_t *v39;
  int v40;
  IPC::Encoder *v41;
  uint64_t v42;
  _QWORD v43[3];
  char v44;

  v5 = (uint64_t *)a2;
  v6 = (uint64_t *)a1;
  v35 = 0;
  v36 = 0;
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  if (WebKit::WebPasteboardOverrides::getDataForOverride(a2, a1, (const WTF::StringImpl *)&v35))
  {
    WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4);
    goto LABEL_30;
  }
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v27);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = *((_QWORD *)v10 + 4);
  v28[0] = WebKit::pageIdentifier((uint64_t)a3, v8);
  v28[1] = v12;
  v29[0] = v5;
  v29[1] = v6;
  v29[2] = v28;
  v42 = 0;
  IPC::Connection::createSyncMessageEncoder(3707, 0, &v42, (uint64_t *)&v41);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v41, v29);
  IPC::Connection::sendSyncMessage(v11, v42, (uint64_t *)&v41, 0, (uint64_t)&v39, INFINITY);
  if (v40)
  {
    if (v40 == 1)
    {
      LOBYTE(v30) = (_BYTE)v39;
      v13 = 1;
      v34 = 1;
      v14 = 1;
LABEL_14:
      ((void (*)(_QWORD *, uint64_t **))off_1E34F0830[v14])(v43, &v39);
      goto LABEL_15;
    }
    while (1)
    {
      v25 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_43:
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
      if (!(_BYTE)v33)
      {
        v26 = (void *)*v6;
        v24 = v6[1];
        v25 = v6[3];
        goto LABEL_39;
      }
LABEL_11:
      v6 = v30;
      v5 = v31;
      a3 = (unsigned int *)v32;
      v44 = 1;
      memset(v43, 0, sizeof(v43));
      v38 = 1;
      std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v15);
      if (!v40)
      {
        v13 = 0;
        v17 = v39;
        v39 = 0;
        memset(v37, 0, sizeof(v37));
        v30 = v17;
        v31 = v6;
        v32 = v5;
        v33 = a3;
        goto LABEL_13;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    v38 = 0;
    v6 = v39;
    IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::decode(v39, (uint64_t)&v30);
    if ((_BYTE)v33)
      goto LABEL_11;
    v23 = *v6;
    v24 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v25 = v6[3];
    if (v25)
      goto LABEL_43;
    v24 = 0;
  }
  v26 = 0;
LABEL_39:
  LOBYTE(v43[0]) = 0;
  v44 = 0;
  *v6 = 0;
  v6[1] = 0;
  if (v25 && v24)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v25 + 16))(v25, v26);
  std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v26);
  LOBYTE(v30) = 13;
  v13 = 1;
LABEL_13:
  v34 = v13;
  std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v16);
  v14 = v40;
  if (v40 != -1)
    goto LABEL_14;
LABEL_15:
  v18 = v41;
  v41 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v9);
    WTF::fastFree(v19, v20);
  }
  if (v13)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (a3)
    {
      do
        v21 = __ldaxr(a3);
      while (__stlxr(v21 + 1, a3));
      *a4 = a3;
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a3, v9);
      if (!v5)
        goto LABEL_24;
      goto LABEL_21;
    }
  }
  *a4 = 0;
  if (v5)
  {
LABEL_21:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_24:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v34 != -1)
    ((void (*)(_QWORD *, uint64_t **))off_1E34F0630[v34])(v43, &v30);
LABEL_30:
  result = v35;
  if (v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

unsigned int *WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  unsigned int *result;
  unsigned int *v5;

  WebCore::FragmentedSharedBuffer::create();
  v2 = WTF::fastMalloc((WTF *)0x38);
  *a1 = MEMORY[0x19AEAD8A0](v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  return result;
}

uint64_t WebKit::WebPlatformStrategies::getPathnamesForType(__n128 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v13;
  char *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  IPC::Decoder *v31;
  WTF *v32;
  void *v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  const WebKit::SandboxExtensionHandle *v42;
  uint64_t v44;
  WebKit::WebProcess *v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t *v48[3];
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t *v55;
  unint64_t v56;
  _OWORD v57[2];
  char v58;
  uint64_t *v59;
  int v60;
  IPC::Encoder *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];

  v55 = 0;
  v56 = 0;
  v13 = &_MergedGlobals_106;
  v14 = &_MergedGlobals_106;
    goto LABEL_45;
  v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v13 = (char *)*((_QWORD *)v15 + 4);
    v47[0] = WebKit::pageIdentifier(a6, a1);
    v47[1] = v16;
    v48[0] = a5;
    v48[1] = a4;
    v48[2] = v47;
    v62 = 0;
    IPC::Connection::createSyncMessageEncoder(3711, 0, &v62, (uint64_t *)&v61);
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v61, v48);
    IPC::Connection::sendSyncMessage((uint64_t)v13, v62, (uint64_t *)&v61, 0, (uint64_t)&v59, INFINITY);
    if (v60)
    {
      if (v60 == 1)
      {
        LOBYTE(v49) = (_BYTE)v59;
        v18 = 1;
        v54 = 1;
        v19 = 1;
        goto LABEL_25;
      }
      goto LABEL_46;
    }
    LOBYTE(v57[0]) = 0;
    v58 = 0;
    a5 = v59;
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, v17, (uint64_t)&v63);
    if (!v65)
    {
      v8 = 0;
      LOBYTE(v49) = 0;
      LOBYTE(v53) = 0;
LABEL_11:
      v21 = (void *)*a5;
      v24 = a5[1];
      *a5 = 0;
      a5[1] = 0;
      v25 = a5[3];
      if (v25 && v24)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v25 + 16))(v25, v21);
      goto LABEL_18;
    }
    a6 = IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a5, v20, (uint64_t)&v66);
    v22 = v68;
    if (!(_BYTE)v68)
      break;
    if (v65)
    {
      v23 = v63;
      v63 = 0;
      v49 = v23;
      v7 = v64;
      LODWORD(v6) = HIDWORD(v64);
      v64 = 0;
      v50 = __PAIR64__(v6, v7);
      a4 = v66;
      v66 = 0;
      v51 = (unint64_t)a4;
      LODWORD(v14) = v67;
      LODWORD(v13) = HIDWORD(v67);
      v67 = 0;
      v52 = __PAIR64__(v13, v14);
      v8 = 1;
      LOBYTE(v53) = 1;
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v21);
      goto LABEL_15;
    }
    __break(1u);
LABEL_45:
    v6 = a6;
    v45 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v45);
    a6 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
    v13[2488] = 1;
  }
  v8 = 0;
  LOBYTE(v49) = 0;
  LOBYTE(v53) = 0;
LABEL_15:
  if (v65)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v21);
  if (!v22)
    goto LABEL_11;
LABEL_18:
  if (!(_DWORD)v8)
  {
    std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v21);
    LOBYTE(v49) = 13;
    v18 = 1;
    v54 = 1;
    goto LABEL_24;
  }
  v26 = v49;
  v49 = 0;
  *(_QWORD *)&v57[0] = v26;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v58 = 1;
  std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v21);
  if (!v60)
  {
    v28 = v59;
    v59 = 0;
    v8 = *(_QWORD *)&v57[0];
    memset(v57, 0, sizeof(v57));
    v66 = 0;
    v67 = 0;
    v49 = v28;
    v50 = v8;
    v68 = 0;
    v51 = __PAIR64__(v6, v7);
    v69[0] = 0;
    v52 = (unint64_t)a4;
    v69[1] = 0;
    v53 = __PAIR64__(v13, v14);
    v54 = 0;
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, v27);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v29);
    v31 = (IPC::Decoder *)v66;
    v66 = 0;
    if (v31)
    {
      IPC::Decoder::~Decoder(v31);
      WTF::fastFree(v32, v33);
    }
    v18 = 0;
LABEL_24:
    std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v30);
    v19 = v60;
    if (v60 != -1)
LABEL_25:
      ((void (*)(uint64_t **, uint64_t **))off_1E34F0830[v19])(&v66, &v59);
    v35 = v61;
    v61 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v34);
      WTF::fastFree(v36, v37);
    }
    if (v18)
    {
      v38 = 1;
      goto LABEL_36;
    }
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v39 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v39)
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 8 * v39));
    v40 = *(WTF **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      WTF::fastFree(v40, v34);
    }
    v66 = 0;
    *(_QWORD *)a3 = v8;
    v67 = 0;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v6;
    v68 = 0;
    v55 = a4;
    v69[0] = 0;
    v56 = __PAIR64__(v13, v14);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v34);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v41);
    if (!(_DWORD)v13)
    {
      v38 = 0;
      goto LABEL_36;
    }
    v44 = 8 * v13;
    do
    {
      if (*a4)
        WebKit::SandboxExtension::consumePermanently((const char ***)a4, v42);
      ++a4;
      v44 -= 8;
    }
    while (v44);
    v38 = v54;
    if (v54 != -1)
LABEL_36:
      ((void (*)(uint64_t **, uint64_t **))off_1E34F0640[v38])(&v66, &v49);
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v42);
  }
LABEL_46:
  v46 = std::__throw_bad_variant_access[abi:sn180100]();
}

uint64_t WebKit::WebPlatformStrategies::stringForType@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t result;
  WebKit::WebProcess *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t *v26[3];
  uint64_t *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t *v32;
  int v33;
  IPC::Encoder *v34;
  uint64_t v35;

  v5 = a3;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v22);
    v5 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v25[0] = WebKit::pageIdentifier(v5, a5);
  v25[1] = v11;
  v26[0] = a2;
  v26[1] = a1;
  v26[2] = v25;
  v35 = 0;
  IPC::Connection::createSyncMessageEncoder(3712, 0, &v35, (uint64_t *)&v34);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v34, v26);
  IPC::Connection::sendSyncMessage(v10, v35, (uint64_t *)&v34, 0, (uint64_t)&v32, INFINITY);
  if (!v33)
  {
    LOBYTE(v30) = 0;
    v31 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v32, &v30);
    if (!v31)
    {
      LOBYTE(v27) = 13;
      v12 = 1;
      v29 = 1;
      v13 = v33;
      if (v33 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    v13 = v33;
    if (!v33)
    {
      v12 = 0;
      v15 = v32;
      v32 = 0;
      a2 = (uint64_t *)v30;
      v27 = v15;
      v28 = v30;
      v29 = 0;
      goto LABEL_10;
    }
LABEL_26:
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v33 != 1)
    goto LABEL_26;
  LOBYTE(v27) = (_BYTE)v32;
  v12 = 1;
  v29 = 1;
  v13 = 1;
LABEL_10:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F0830[v13])(&v30, &v32);
LABEL_11:
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v17, v18);
  }
  if (v12)
    v19 = 0;
  else
    v19 = (WTF::StringImpl *)a2;
  if (!v12)
    v28 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    *a4 = v19;
    if (v20)
    {
      *(_DWORD *)v19 = v20;
    }
    else
    {
      result = WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
      v12 = v29;
      if (v29 == -1)
        return result;
    }
  }
  else
  {
    *a4 = 0;
  }
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34F0650[v12])(v26, &v27);
}

uint64_t WebKit::WebPlatformStrategies::allStringsForType@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t *v15;
  IPC::Decoder *v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  WebKit::WebProcess *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t *v29[3];
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  int v38;
  IPC::Encoder *v39;
  uint64_t v40;
  IPC::Decoder *v41;
  _QWORD v42[3];

  v5 = a3;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v26);
    v5 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v28[0] = WebKit::pageIdentifier(v5, a5);
  v28[1] = v11;
  v29[0] = a2;
  v29[1] = a1;
  v29[2] = v28;
  v40 = 0;
  IPC::Connection::createSyncMessageEncoder(3713, 0, &v40, (uint64_t *)&v39);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v39, v29);
  IPC::Connection::sendSyncMessage(v10, v40, (uint64_t *)&v39, 0, (uint64_t)&v37, INFINITY);
  if (v38)
  {
    if (v38 == 1)
    {
      LOBYTE(v30) = (_BYTE)v37;
      v12 = 1;
      v33 = 1;
      v13 = 1;
LABEL_15:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F0830[v13])(&v41, &v37);
      goto LABEL_16;
    }
LABEL_23:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v34) = 0;
  v36 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v37, &v34);
  if (v36)
  {
    if (v38)
      goto LABEL_23;
    v15 = v37;
    v37 = 0;
    v10 = v34;
    v34 = 0;
    LODWORD(a2) = v35;
    LODWORD(a1) = HIDWORD(v35);
    v35 = 0;
    v41 = 0;
    v42[0] = 0;
    v30 = v15;
    v31 = v10;
    v42[1] = 0;
    v32 = __PAIR64__(a1, a2);
    v33 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v14);
    v16 = v41;
    v41 = 0;
    if (v16)
    {
      IPC::Decoder::~Decoder(v16);
      WTF::fastFree(v17, v18);
    }
    if (v36)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v14);
    v12 = 0;
  }
  else
  {
    LOBYTE(v30) = 13;
    v12 = 1;
    v33 = 1;
  }
  v13 = v38;
  if (v38 != -1)
    goto LABEL_15;
LABEL_16:
  v19 = v39;
  v39 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v14);
    WTF::fastFree(v20, v21);
  }
  v34 = 0;
  v35 = 0;
  if (v12)
  {
    v10 = 0;
    LODWORD(a2) = 0;
    LODWORD(a1) = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v41 = (IPC::Decoder *)v10;
  v42[0] = __PAIR64__(a1, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v14);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a4, (uint64_t)&v41);
  v23 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v22);
  return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34F0660[v12])(v23, &v30);
}

WTF::StringImpl **WebKit::WebPlatformStrategies::changeCount(int a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebProcess *v5;
  __n128 v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  int v11;
  WTF::String *v12;
  void *v13;
  uint64_t *v14;
  int v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  uint64_t v23[2];
  _QWORD v24[2];
  int v25;
  uint64_t *v26;
  int v27;
  IPC::Encoder *v28;
  uint64_t v29;
  char v30;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  WebKit::WebProcess::waitForPendingPasteboardWritesToFinish(v5, a2, a3);
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 4);
  v23[0] = WebKit::pageIdentifier((uint64_t)a3, v6);
  v23[1] = v9;
  v29 = 0;
  IPC::Connection::createSyncMessageEncoder(3708, 0, &v29, (uint64_t *)&v28);
  v10 = v28;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v28, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v10, v23);
  IPC::Connection::sendSyncMessage(v8, v29, (uint64_t *)&v28, 0, (uint64_t)&v26, INFINITY);
  v11 = v27;
  if (!v27)
  {
    v12 = (WTF::String *)IPC::Decoder::decode<std::tuple<long long>>(v26);
    if (!(_BYTE)v13)
    {
      LOBYTE(v24[0]) = 13;
      v11 = 1;
      v25 = 1;
      v15 = v27;
      if (v27 == -1)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (!v27)
    {
      a2 = (WTF::StringImpl **)v12;
      v14 = v26;
      v26 = 0;
      v24[0] = v14;
      v24[1] = v12;
      goto LABEL_11;
    }
LABEL_22:
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v27 != 1)
    goto LABEL_22;
  LOBYTE(v24[0]) = (_BYTE)v26;
LABEL_11:
  v25 = v11;
  v15 = v11;
LABEL_12:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v15])(&v30, &v26);
LABEL_13:
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v11)
    a2 = 0;
  ((void (*)(uint64_t **, _QWORD *))off_1E34F0670[v11])(&v26, v24);
  return a2;
}

unsigned int *WebKit::WebPlatformStrategies::color@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, WebCore::Color *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t *v14;
  unint64_t m_colorAndFlags;
  IPC::Decoder *v16;
  WTF *v17;
  void *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  void *v23;
  unsigned int *result;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WebKit::WebProcess *v34;
  uint64_t v35;
  uint64_t v37[2];
  unint64_t v38;
  char v39;
  int v40;
  _BYTE v41[8];
  char v42;
  uint64_t *v43;
  int v44;
  IPC::Encoder *v45;
  uint64_t v46;
  Color v47;
  uint64_t v48;

  v4 = a2;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v34);
    v4 = a2;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 4);
  v37[0] = WebKit::pageIdentifier(v4, a4);
  v37[1] = v9;
  v46 = 0;
  IPC::Connection::createSyncMessageEncoder(3709, 0, &v46, (uint64_t *)&v45);
  v10 = v45;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v45, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v10, v37);
  IPC::Connection::sendSyncMessage(v8, v46, (uint64_t *)&v45, 0, (uint64_t)&v43, INFINITY);
  if (v44)
  {
    if (v44 == 1)
    {
      LOBYTE(v38) = (_BYTE)v43;
      v11 = 1;
      v40 = 1;
LABEL_15:
      ((void (*)(Color *, uint64_t **))off_1E34F0830[v11])(&v47, &v43);
      goto LABEL_16;
    }
LABEL_36:
    v35 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  v41[0] = 0;
  v42 = 0;
  IPC::Decoder::decode<std::tuple<WebCore::Color>>(v43, &v38);
  if (v39)
  {
    WebCore::Color::Color();
    v42 = 1;
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v12);
  if (v42)
  {
    if (v44)
      goto LABEL_36;
    v14 = v43;
    v43 = 0;
    v47.m_colorAndFlags = (unint64_t)v14;
    WebCore::Color::Color();
    m_colorAndFlags = v47.m_colorAndFlags;
    v47.m_colorAndFlags = 0;
    v38 = m_colorAndFlags;
    WebCore::Color::Color();
    v40 = 0;
    if ((v48 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v13);
      }
    }
    v16 = (IPC::Decoder *)v47.m_colorAndFlags;
    v47.m_colorAndFlags = 0;
    if (v16)
    {
      IPC::Decoder::~Decoder(v16);
      WTF::fastFree(v17, v18);
    }
  }
  else
  {
    LOBYTE(v38) = 13;
    v40 = 1;
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v13);
  v11 = v44;
  if (v44 != -1)
    goto LABEL_15;
LABEL_16:
  v20 = v45;
  v45 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  v43 = 0;
  WebCore::Color::Color();
  if (((unint64_t)v43 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)((unint64_t)v43 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v23);
    }
  }
  result = (unsigned int *)WebCore::Color::Color(a3, &v47);
  if ((v47.m_colorAndFlags & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v47.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr(result);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, result));
    if (!v30)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v25);
    }
  }
  if (v40 != -1)
    return (unsigned int *)((uint64_t (*)(Color *, unint64_t *))off_1E34F0680[v40])(&v47, &v38);
  return result;
}

uint64_t WebKit::WebPlatformStrategies::url@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  WebKit::WebProcess *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  int v11;
  int v12;
  void *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebKit::WebProcess *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  IPC::Encoder *v34;
  uint64_t v35;

  v4 = a2;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v24);
    v4 = a2;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)v7 + 4);
  v28[0] = WebKit::pageIdentifier(v4, a4);
  v28[1] = v9;
  v35 = 0;
  IPC::Connection::createSyncMessageEncoder(3715, 0, &v35, (uint64_t *)&v34);
  v10 = v34;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v34, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v10, v28);
  IPC::Connection::sendSyncMessage((uint64_t)v8, v35, (uint64_t *)&v34, 0, (uint64_t)&v26, INFINITY);
  if (v27)
  {
    if (v27 == 1)
    {
      LOBYTE(v29) = (_BYTE)v26;
      v11 = 1;
      v31 = 1;
      v12 = 1;
LABEL_10:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F0830[v12])(&v32, &v26);
      goto LABEL_11;
    }
    goto LABEL_28;
  }
  LOBYTE(v32) = 0;
  v33 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v26, &v32);
  if (v33)
  {
    v12 = v27;
    if (!v27)
    {
      v11 = 0;
      v14 = v26;
      v26 = 0;
      v8 = v32;
      v29 = v14;
      v30 = v32;
      v31 = 0;
      goto LABEL_10;
    }
LABEL_28:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v29) = 13;
  v11 = 1;
  v31 = 1;
  v12 = v27;
  if (v27 != -1)
    goto LABEL_10;
LABEL_11:
  v15 = v34;
  v34 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  if (v11)
    v18 = 0;
  else
    v18 = v8;
  if (!v11)
    v30 = 0;
  v32 = v18;
  v26 = 0;
  WTF::URL::invalidate((WTF::URL *)&v26);
  MEMORY[0x19AEABB24](a3, &v26, &v32, 0);
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F0690[v11])(&v26, &v29);
}

uint64_t WebKit::WebPlatformStrategies::addTypes(__n128 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  int v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD v24[3];
  _QWORD v25[2];
  int v26;
  uint64_t *v27;
  int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v20);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v23[0] = WebKit::pageIdentifier(v5, a1);
  v23[1] = v10;
  v24[0] = a4;
  v24[1] = a3;
  v24[2] = v23;
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3702, 0, &v30, (uint64_t *)&v29);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v29, (uint64_t)v24);
  IPC::Connection::sendSyncMessage(v9, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
  v11 = v28;
  if (!v28)
  {
    v12 = IPC::Decoder::decode<std::tuple<long long>>(v27);
    if (!(_BYTE)v13)
    {
      LOBYTE(v25[0]) = 13;
      v11 = 1;
      v26 = 1;
      v15 = v28;
      if (v28 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v28)
    {
      a3 = v12;
      v14 = v27;
      v27 = 0;
      v25[0] = v14;
      v25[1] = v12;
      goto LABEL_9;
    }
LABEL_19:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v28 != 1)
    goto LABEL_19;
  LOBYTE(v25[0]) = (_BYTE)v27;
LABEL_9:
  v26 = v11;
  v15 = v11;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v15])(&v31, &v27);
LABEL_11:
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v11)
    a3 = 0;
  ((void (*)(_QWORD *, _QWORD *))off_1E34F06A0[v11])(v24, v25);
  return a3;
}

uint64_t WebKit::WebPlatformStrategies::setTypes(__n128 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  int v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD v24[3];
  _QWORD v25[2];
  int v26;
  uint64_t *v27;
  int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v20);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v23[0] = WebKit::pageIdentifier(v5, a1);
  v23[1] = v10;
  v24[0] = a4;
  v24[1] = a3;
  v24[2] = v23;
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3723, 0, &v30, (uint64_t *)&v29);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v29, (uint64_t)v24);
  IPC::Connection::sendSyncMessage(v9, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
  v11 = v28;
  if (!v28)
  {
    v12 = IPC::Decoder::decode<std::tuple<long long>>(v27);
    if (!(_BYTE)v13)
    {
      LOBYTE(v25[0]) = 13;
      v11 = 1;
      v26 = 1;
      v15 = v28;
      if (v28 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v28)
    {
      a3 = v12;
      v14 = v27;
      v27 = 0;
      v25[0] = v14;
      v25[1] = v12;
      goto LABEL_9;
    }
LABEL_19:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v28 != 1)
    goto LABEL_19;
  LOBYTE(v25[0]) = (_BYTE)v27;
LABEL_9:
  v26 = v11;
  v15 = v11;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v15])(&v31, &v27);
LABEL_11:
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v11)
    a3 = 0;
  ((void (*)(_QWORD *, _QWORD *))off_1E34F06B0[v11])(v24, v25);
  return a3;
}

uint64_t WebKit::WebPlatformStrategies::setBufferForType(__n128 a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  IPC::Encoder *v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t *v18;
  int v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unsigned int *v23;
  unint64_t v24;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28[2];
  WebCore::FragmentedSharedBuffer *v29;
  uint64_t *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  int v34;
  IPC::Encoder *v35;
  uint64_t v36;
  char v37;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v26);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = *((_QWORD *)v10 + 4);
  if (a3)
  {
    do
      v12 = __ldaxr(a3);
    while (__stlxr(v12 + 1, a3));
  }
  else
  {
    a3 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer((WebCore::SharedBuffer *)a3);
  }
  v29 = (WebCore::FragmentedSharedBuffer *)a3;
  v28[0] = WebKit::pageIdentifier(a6, a1);
  v28[1] = v13;
  v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3720, 0, &v36, (uint64_t *)&v35);
  v14 = v35;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v35, a5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v14, a4);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v14, &v29);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v14, v28);
  IPC::Connection::sendSyncMessage(v11, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
  v15 = v34;
  if (!v34)
  {
    v16 = IPC::Decoder::decode<std::tuple<long long>>(v33);
    if (!(_BYTE)v17)
    {
      LOBYTE(v30) = 13;
      v15 = 1;
      v32 = 1;
      v19 = v34;
      if (v34 == -1)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (!v34)
    {
      v18 = v33;
      v33 = 0;
      v30 = v18;
      v31 = v16;
      goto LABEL_13;
    }
LABEL_26:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v34 != 1)
    goto LABEL_26;
  LOBYTE(v30) = (_BYTE)v33;
LABEL_13:
  v32 = v15;
  v19 = v15;
LABEL_14:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v19])(&v37, &v33);
LABEL_15:
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  v23 = (unsigned int *)v29;
  v29 = 0;
  if (v23)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v17);
  if (v15)
    v24 = 0;
  else
    v24 = v31;
  ((void (*)(uint64_t **, uint64_t **))off_1E34F06C0[v15])(&v33, &v30);
  return v24;
}

uint64_t WebKit::WebPlatformStrategies::setURL(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  int v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t *v24[3];
  _QWORD v25[2];
  int v26;
  uint64_t *v27;
  int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v20);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v23[0] = WebKit::pageIdentifier(v5, a1);
  v23[1] = v10;
  v24[0] = a3;
  v24[1] = a4;
  v24[2] = v23;
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3724, 0, &v30, (uint64_t *)&v29);
  IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v29, v24);
  IPC::Connection::sendSyncMessage(v9, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
  v11 = v28;
  if (!v28)
  {
    v12 = IPC::Decoder::decode<std::tuple<long long>>(v27);
    if (!(_BYTE)v13)
    {
      LOBYTE(v25[0]) = 13;
      v11 = 1;
      v26 = 1;
      v15 = v28;
      if (v28 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v28)
    {
      a4 = (uint64_t *)v12;
      v14 = v27;
      v27 = 0;
      v25[0] = v14;
      v25[1] = v12;
      goto LABEL_9;
    }
LABEL_19:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v28 != 1)
    goto LABEL_19;
  LOBYTE(v25[0]) = (_BYTE)v27;
LABEL_9:
  v26 = v11;
  v15 = v11;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v15])(&v31, &v27);
LABEL_11:
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v11)
    a4 = 0;
  ((void (*)(uint64_t **, _QWORD *))off_1E34F06D0[v11])(v24, v25);
  return (uint64_t)a4;
}

uint64_t WebKit::WebPlatformStrategies::setColor(__n128 a1, uint64_t a2, WebCore::Color *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  int v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WebKit::WebProcess *v22;
  uint64_t v23;
  uint64_t v24[2];
  _QWORD v25[2];
  int v26;
  uint64_t *v27;
  int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v22);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v24[0] = WebKit::pageIdentifier(v5, a1);
  v24[1] = v10;
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3721, 0, &v30, (uint64_t *)&v29);
  v11 = v29;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v29, a4);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v11, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v11, v24);
  IPC::Connection::sendSyncMessage(v9, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
  v12 = v28;
  if (!v28)
  {
    v13 = IPC::Decoder::decode<std::tuple<long long>>(v27);
    if (!(_BYTE)v14)
    {
      LOBYTE(v25[0]) = 13;
      v12 = 1;
      v26 = 1;
      v16 = v28;
      if (v28 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v28)
    {
      a3 = (WebCore::Color *)v13;
      v15 = v27;
      v27 = 0;
      v25[0] = v15;
      v25[1] = v13;
      goto LABEL_9;
    }
LABEL_19:
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v28 != 1)
    goto LABEL_19;
  LOBYTE(v25[0]) = (_BYTE)v27;
LABEL_9:
  v26 = v12;
  v16 = v12;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v16])(&v31, &v27);
LABEL_11:
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v12)
    a3 = 0;
  ((void (*)(uint64_t **, _QWORD *))off_1E34F06E0[v12])(&v27, v25);
  return (uint64_t)a3;
}

uint64_t WebKit::WebPlatformStrategies::setStringForType(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t *v16;
  int v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WebKit::WebProcess *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t *v26[4];
  _QWORD v27[2];
  int v28;
  uint64_t *v29;
  int v30;
  IPC::Encoder *v31;
  uint64_t v32;
  char v33;

  v6 = a6;
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v22);
    v6 = a6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = *((_QWORD *)v10 + 4);
  v25[0] = WebKit::pageIdentifier(v6, a1);
  v25[1] = v12;
  v26[0] = a5;
  v26[1] = a4;
  v26[2] = a3;
  v26[3] = v25;
  v32 = 0;
  IPC::Connection::createSyncMessageEncoder(3722, 0, &v32, (uint64_t *)&v31);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul>(v31, v26);
  IPC::Connection::sendSyncMessage(v11, v32, (uint64_t *)&v31, 0, (uint64_t)&v29, INFINITY);
  v13 = v30;
  if (!v30)
  {
    v14 = IPC::Decoder::decode<std::tuple<long long>>(v29);
    if (!(_BYTE)v15)
    {
      LOBYTE(v27[0]) = 13;
      v13 = 1;
      v28 = 1;
      v17 = v30;
      if (v30 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v30)
    {
      a3 = (uint64_t *)v14;
      v16 = v29;
      v29 = 0;
      v27[0] = v16;
      v27[1] = v14;
      goto LABEL_9;
    }
LABEL_19:
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v30 != 1)
    goto LABEL_19;
  LOBYTE(v27[0]) = (_BYTE)v29;
LABEL_9:
  v28 = v13;
  v17 = v13;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v17])(&v33, &v29);
LABEL_11:
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v13)
    a3 = 0;
  ((void (*)(uint64_t **, _QWORD *))off_1E34F06F0[v13])(v26, v27);
  return (uint64_t)a3;
}

uint64_t WebKit::WebPlatformStrategies::getNumberOfFiles(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  int v10;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  int v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WebKit::WebProcess *v20;
  uint64_t v21;
  uint64_t v22[2];
  _QWORD v23[2];
  int v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  char v29;

  v4 = a4;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v20);
    v4 = a4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v22[0] = WebKit::pageIdentifier(v4, a1);
  v22[1] = v8;
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3706, 0, &v28, (uint64_t *)&v27);
  v9 = v27;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v27, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v9, v22);
  IPC::Connection::sendSyncMessage(v7, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  v10 = v26;
  if (!v26)
  {
    v11 = IPC::Decoder::decode<std::tuple<double>>(v25);
    if (!(_BYTE)v12)
    {
      LOBYTE(v23[0]) = 13;
      v10 = 1;
      v24 = 1;
      v14 = v26;
      if (v26 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v26)
    {
      LODWORD(a3) = v11;
      v13 = v25;
      v25 = 0;
      v23[0] = v13;
      v23[1] = v11;
      goto LABEL_9;
    }
LABEL_20:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v26 != 1)
    goto LABEL_20;
  LOBYTE(v23[0]) = (_BYTE)v25;
LABEL_9:
  v24 = v10;
  v14 = v10;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v14])(&v29, &v25);
LABEL_11:
  v15 = v27;
  v27 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }
  if (v10)
    a3 = 0;
  else
    a3 = (uint64_t *)a3;
  ((void (*)(uint64_t **, _QWORD *))off_1E34F0700[v10])(&v25, v23);
  return (uint64_t)a3;
}

uint64_t WebKit::WebPlatformStrategies::containsURLStringSuitableForLoading(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  void *v13;
  int v14;
  int v15;
  uint64_t *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  BOOL v20;
  WebKit::WebProcess *v23;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t *v26;
  char v27;
  int v28;
  uint64_t *v29;
  int v30;
  IPC::Encoder *v31;
  uint64_t v32;
  char v33;

  v4 = a4;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v23);
    v4 = a4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v25[0] = WebKit::pageIdentifier(v4, a1);
  v25[1] = v8;
  v32 = 0;
  IPC::Connection::createSyncMessageEncoder(3705, 0, &v32, (uint64_t *)&v31);
  v9 = v31;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v31, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v9, v25);
  IPC::Connection::sendSyncMessage(v7, v32, (uint64_t *)&v31, 0, (uint64_t)&v29, INFINITY);
  v10 = v30;
  if (!v30)
  {
    v12 = IPC::Decoder::decode<std::tuple<BOOL>>(v29);
    if (v12 < 0x100u)
    {
      v11 = 0;
      v14 = 0;
      LOBYTE(v26) = 13;
      v10 = 1;
      v28 = 1;
      v15 = v30;
      if (v30 == -1)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (!v30)
    {
      v11 = v12;
      v16 = v29;
      v29 = 0;
      v26 = v16;
      v27 = v12;
      goto LABEL_11;
    }
LABEL_22:
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v30 != 1)
    goto LABEL_22;
  v11 = 0;
  LOBYTE(v26) = (_BYTE)v29;
LABEL_11:
  v28 = v10;
  v15 = v10;
LABEL_12:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v15])(&v33, &v29);
  v14 = v11;
LABEL_13:
  v17 = v31;
  v31 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v13);
    WTF::fastFree(v18, v19);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34F0710[v10])(&v29, &v26);
  if (v10)
    v20 = 1;
  else
    v20 = v14 == 0;
  return !v20;
}

uint64_t WebKit::WebPlatformStrategies::urlStringSuitableForLoading@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X3>, IPC::Encoder **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t *v28;
  IPC::Encoder *v29;
  uint64_t v30;
  int v31;
  IPC::Encoder *v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  int v36;
  IPC::Encoder *v37;
  uint64_t v38;

  v5 = a3;
  *a4 = 0;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v25);
    v5 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v27[0] = WebKit::pageIdentifier(v5, a5);
  v27[1] = v11;
  v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3726, 0, &v38, (uint64_t *)&v37);
  v12 = v37;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v37, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v12, v27);
  IPC::Connection::sendSyncMessage(v10, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
  if (!v36)
  {
    LOBYTE(v32) = 0;
    v34 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(v35, (uint64_t)&v32);
    if (v34)
    {
      if (v36)
        goto LABEL_23;
      v13 = 0;
      v16 = v35;
      v35 = 0;
      v12 = v32;
      v10 = v33;
      v32 = 0;
      v33 = 0;
      v28 = v16;
      v29 = v12;
      v30 = v10;
    }
    else
    {
      LOBYTE(v28) = 13;
      v13 = 1;
    }
    v31 = v13;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32, v15);
    v14 = v36;
    if (v36 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v36 == 1)
  {
    LOBYTE(v28) = (_BYTE)v35;
    v13 = 1;
    v31 = 1;
    v14 = 1;
LABEL_11:
    ((void (*)(IPC::Encoder **, uint64_t **))off_1E34F0830[v14])(&v32, &v35);
LABEL_12:
    v18 = v37;
    v37 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v17);
      WTF::fastFree(v19, v20);
    }
    if (v13)
    {
      v21 = 1;
      return ((uint64_t (*)(IPC::Encoder **, uint64_t **))off_1E34F0720[v21])(&v32, &v28);
    }
    v29 = 0;
    v30 = 0;
    *a4 = v12;
    v22 = *a2;
    *a2 = (WTF::StringImpl *)v10;
    if (v22)
    {
      if (*(_DWORD *)v22 != 2)
      {
        v21 = 0;
        *(_DWORD *)v22 -= 2;
        return ((uint64_t (*)(IPC::Encoder **, uint64_t **))off_1E34F0720[v21])(&v32, &v28);
      }
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
    }
    v21 = 0;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E34F0720[v21])(&v32, &v28);
  }
LABEL_23:
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
}

IPC::Encoder *WebKit::WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  WebKit::WebProcess *v7;
  __n128 v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  WebKit::WebProcess *v18;
  _QWORD v19[2];
  uint64_t *v20[3];
  IPC::Encoder *v21;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  LODWORD(v19[0]) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)v7 + 88, a3, (const WTF::StringImpl *)v19, (uint64_t)v20);
  ++*((_DWORD *)v20[0] + 2);
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v19[0] = WebKit::pageIdentifier(a4, v8);
  v19[1] = v11;
  v20[0] = a2;
  v20[1] = (uint64_t *)a3;
  v20[2] = v19;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2514;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, v20);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  WebKit::WebProcess *v7;
  __n128 v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  WebKit::WebProcess *v18;
  uint64_t v19[3];
  IPC::Encoder *v20;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  LODWORD(v20) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)v7 + 88, a3, (const WTF::StringImpl *)&v20, (uint64_t)v19);
  ++*(_DWORD *)(v19[0] + 8);
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v19[0] = WebKit::pageIdentifier(a4, v8);
  v19[1] = v11;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2515;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::encode((IPC::Encoder *)v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v12, v19);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

{
  WebKit::WebProcess *v7;
  __n128 v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  WebKit::WebProcess *v18;
  uint64_t v19[3];
  IPC::Encoder *v20;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  LODWORD(v20) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)v7 + 88, a3, (const WTF::StringImpl *)&v20, (uint64_t)v19);
  ++*(_DWORD *)(v19[0] + 8);
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v19[0] = WebKit::pageIdentifier(a4, v8);
  v19[1] = v11;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2512;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::PasteboardImage,void>::encode((IPC::Encoder *)v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v12, v19);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t *a2, uint64_t *a3, WTF::StringImpl **a4, uint64_t a5)
{
  WebKit::WebProcess *v9;
  __n128 v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  WebKit::WebProcess *v20;
  _QWORD v21[2];
  uint64_t *v22[4];
  IPC::Encoder *v23;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  LODWORD(v21[0]) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)v9 + 88, a4, (const WTF::StringImpl *)v21, (uint64_t)v22);
  ++*((_DWORD *)v22[0] + 2);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *((_QWORD *)v11 + 4);
  v21[0] = WebKit::pageIdentifier(a5, v10);
  v21[1] = v13;
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = (uint64_t *)a4;
  v22[3] = v21;
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2513;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v23 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v14, v22);
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)&v23, 0, 0);
  result = v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::updateSupportedTypeIdentifiers(__n128 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  WebKit::WebProcess *v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v17);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v18[0] = WebKit::pageIdentifier(v5, a1);
  v18[1] = v10;
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2511;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v19 = (IPC::Encoder *)v11;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v11, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v11, v18);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v19, 0, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::typesSafeForDOMToReadAndWrite@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t *v15;
  IPC::Decoder *v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  WebKit::WebProcess *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t *v29[3];
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  int v38;
  IPC::Encoder *v39;
  uint64_t v40;
  IPC::Decoder *v41;
  _QWORD v42[3];

  v5 = a3;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v26);
    v5 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *((_QWORD *)v9 + 4);
  v28[0] = WebKit::pageIdentifier(v5, a5);
  v28[1] = v11;
  v29[0] = a1;
  v29[1] = a2;
  v29[2] = v28;
  v40 = 0;
  IPC::Connection::createSyncMessageEncoder(3725, 0, &v40, (uint64_t *)&v39);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v39, v29);
  IPC::Connection::sendSyncMessage(v10, v40, (uint64_t *)&v39, 0, (uint64_t)&v37, INFINITY);
  if (v38)
  {
    if (v38 == 1)
    {
      LOBYTE(v30) = (_BYTE)v37;
      v12 = 1;
      v33 = 1;
      v13 = 1;
LABEL_15:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F0830[v13])(&v41, &v37);
      goto LABEL_16;
    }
LABEL_23:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v34) = 0;
  v36 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v37, &v34);
  if (v36)
  {
    if (v38)
      goto LABEL_23;
    v15 = v37;
    v37 = 0;
    v10 = v34;
    v34 = 0;
    LODWORD(a1) = v35;
    LODWORD(a2) = HIDWORD(v35);
    v35 = 0;
    v41 = 0;
    v42[0] = 0;
    v30 = v15;
    v31 = v10;
    v42[1] = 0;
    v32 = __PAIR64__(a2, a1);
    v33 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v14);
    v16 = v41;
    v41 = 0;
    if (v16)
    {
      IPC::Decoder::~Decoder(v16);
      WTF::fastFree(v17, v18);
    }
    if (v36)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v14);
    v12 = 0;
  }
  else
  {
    LOBYTE(v30) = 13;
    v12 = 1;
    v33 = 1;
  }
  v13 = v38;
  if (v38 != -1)
    goto LABEL_15;
LABEL_16:
  v19 = v39;
  v39 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v14);
    WTF::fastFree(v20, v21);
  }
  v34 = 0;
  v35 = 0;
  if (v12)
  {
    v10 = 0;
    LODWORD(a1) = 0;
    LODWORD(a2) = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v41 = (IPC::Decoder *)v10;
  v42[0] = __PAIR64__(a2, a1);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v14);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a4, (uint64_t)&v41);
  v23 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v22);
  return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34F0730[v12])(v23, &v30);
}

uint64_t WebKit::WebPlatformStrategies::writeCustomData(__n128 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t *v19;
  int v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t *v32;
  int v33;
  IPC::Encoder *v34;
  uint64_t v35;
  char v36;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v26);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v28[0] = WebKit::pageIdentifier(a5, a1);
  v28[1] = v10;
  v35 = 0;
  IPC::Connection::createSyncMessageEncoder(3727, 0, &v35, (uint64_t *)&v34);
  v11 = v34;
  v12 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)IPC::Encoder::grow(v34, 8uLL, 8) = v12;
  v13 = *(_DWORD *)(a3 + 12);
  if (v13)
  {
    v14 = *(uint64_t **)a3;
    v15 = &v14[3 * v13];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, v14);
      IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11, (uint64_t)(v14 + 1));
      v14 += 3;
    }
    while (v14 != v15);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, a4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v11, v28);
  IPC::Connection::sendSyncMessage(v9, v35, (uint64_t *)&v34, 0, (uint64_t)&v32, INFINITY);
  v16 = v33;
  if (!v33)
  {
    v17 = IPC::Decoder::decode<std::tuple<long long>>(v32);
    if (!(_BYTE)v18)
    {
      LOBYTE(v29) = 13;
      v16 = 1;
      v31 = 1;
      v20 = v33;
      if (v33 == -1)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (!v33)
    {
      v19 = v32;
      v32 = 0;
      v29 = v19;
      v30 = v17;
      goto LABEL_12;
    }
LABEL_23:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v33 != 1)
    goto LABEL_23;
  LOBYTE(v29) = (_BYTE)v32;
LABEL_12:
  v31 = v16;
  v20 = v16;
LABEL_13:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v20])(&v36, &v32);
LABEL_14:
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v16)
    v24 = 0;
  else
    v24 = v30;
  ((void (*)(uint64_t **, uint64_t **))off_1E34F0740[v16])(&v32, &v29);
  return v24;
}

uint64_t WebKit::WebPlatformStrategies::containsStringSafeForDOMToReadForType(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int16 v13;
  void *v14;
  int v15;
  int v16;
  uint64_t *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  BOOL v21;
  WebKit::WebProcess *v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t *v27[3];
  uint64_t *v28;
  char v29;
  int v30;
  uint64_t *v31;
  int v32;
  IPC::Encoder *v33;
  uint64_t v34;
  char v35;

  v5 = a5;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v23);
    v5 = a5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v26[0] = WebKit::pageIdentifier(v5, a1);
  v26[1] = v10;
  v27[0] = a3;
  v27[1] = a4;
  v27[2] = v26;
  v34 = 0;
  IPC::Connection::createSyncMessageEncoder(3704, 0, &v34, (uint64_t *)&v33);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(v33, v27);
  IPC::Connection::sendSyncMessage(v9, v34, (uint64_t *)&v33, 0, (uint64_t)&v31, INFINITY);
  v11 = v32;
  if (!v32)
  {
    v13 = IPC::Decoder::decode<std::tuple<BOOL>>(v31);
    if (v13 < 0x100u)
    {
      v12 = 0;
      v15 = 0;
      LOBYTE(v28) = 13;
      v11 = 1;
      v30 = 1;
      v16 = v32;
      if (v32 == -1)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (!v32)
    {
      v12 = v13;
      v17 = v31;
      v31 = 0;
      v28 = v17;
      v29 = v13;
      goto LABEL_11;
    }
LABEL_22:
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v32 != 1)
    goto LABEL_22;
  v12 = 0;
  LOBYTE(v28) = (_BYTE)v31;
LABEL_11:
  v30 = v11;
  v16 = v11;
LABEL_12:
  ((void (*)(char *, uint64_t **))off_1E34F0830[v16])(&v35, &v31);
  v15 = v12;
LABEL_13:
  v18 = v33;
  v33 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v14);
    WTF::fastFree(v19, v20);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34F0750[v11])(v27, &v28);
  if (v11)
    v21 = 1;
  else
    v21 = v15 == 0;
  return !v21;
}

uint64_t WebKit::WebPlatformStrategies::getPasteboardItemsCount(int a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  int v5;
  void *v6;
  __n128 v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  int v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WebKit::WebProcess *v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v4 = (uint64_t *)a2;
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  WebKit::WebPasteboardOverrides::overriddenTypes((WebKit::WebPasteboardOverrides *)&v24, a2, a3);
  v5 = HIDWORD(v25);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v6);
  if (v5)
    return 1;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 4);
  v23[0] = WebKit::pageIdentifier((uint64_t)a3, v7);
  v23[1] = v10;
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3710, 0, &v30, (uint64_t *)&v29);
  v11 = v29;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v29, v4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v11, v23);
  IPC::Connection::sendSyncMessage(v9, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
  v12 = v28;
  if (v28)
  {
    if (v28 == 1)
    {
      LOBYTE(v24) = (_BYTE)v27;
LABEL_13:
      v26 = v12;
      v16 = v12;
LABEL_14:
      ((void (*)(char *, uint64_t **))off_1E34F0830[v16])(&v31, &v27);
LABEL_15:
      v17 = v29;
      v29 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v14);
        WTF::fastFree(v18, v19);
      }
      if (v12)
        v4 = 0;
      else
        v4 = (uint64_t *)v4;
      ((void (*)(uint64_t **, uint64_t **))off_1E34F0760[v12])(&v27, &v24);
      return (uint64_t)v4;
    }
  }
  else
  {
    v13 = IPC::Decoder::decode<std::tuple<double>>(v27);
    if (!(_BYTE)v14)
    {
      LOBYTE(v24) = 13;
      v12 = 1;
      v26 = 1;
      v16 = v28;
      if (v28 == -1)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (!v28)
    {
      LODWORD(v4) = v13;
      v15 = v27;
      v27 = 0;
      v24 = v15;
      v25 = v13;
      goto LABEL_13;
    }
  }
  v22 = std::__throw_bad_variant_access[abi:sn180100]();
}

IPC::Encoder *WebKit::WebPlatformStrategies::allPasteboardItemInfo@<X0>(WTF::StringImpl **a1@<X1>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  void *v8;
  WTF *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __n128 v26;
  WebKit::WebProcess *v27;
  uint64_t v28;
  uint64_t v29;
  IPC::Encoder *v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  IPC::Encoder *result;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  IPC::Encoder **v45;
  uint64_t v46;
  void *v47;
  int v48;
  char *v49;
  WTF *v50;
  unint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  WTF *v57;
  void *v58;
  void *v59;
  int v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  char v65;
  uint64_t *v66;
  WTF *v67;
  IPC::Decoder *v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  void *v72;
  unint64_t v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  char *v77;
  char *v78;
  _DWORD *v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  WTF *v93;
  unint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WebKit::WebProcess *v107;
  uint64_t v108[2];
  WTF *v109;
  unint64_t v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  uint64_t *v113;
  int v114;
  IPC::Encoder *v115;
  uint64_t v116;
  _QWORD v117[2];
  char v118;
  WTF *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  WTF *v133;
  uint64_t v134;
  IPC::Decoder *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  WTF::StringImpl *v140;
  __int128 v141;
  __int128 v142;
  __int16 v143;
  _QWORD v144[2];
  char v145;
  uint64_t v146;

  v5 = (uint64_t)a2;
  v6 = (uint64_t *)a1;
  v146 = *MEMORY[0x1E0C80C00];
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  WebKit::WebPasteboardOverrides::overriddenInfo((WebKit::WebPasteboardOverrides *)&v119, a1, a2);
  if (v132)
  {
    v9 = v119;
    v119 = 0;
    v135 = v9;
    v10 = v120;
    v120 = 0;
    v136 = v10;
    v11 = v121;
    v121 = 0;
    v137 = v11;
    v12 = v122;
    v122 = 0;
    v138 = v12;
    v13 = v123;
    v123 = 0;
    v139[0] = v13;
    v14 = v124;
    v124 = 0;
    v139[1] = v14;
    v140 = v125;
    v143 = v128;
    v142 = v127;
    v141 = v126;
    v15 = v129;
    v125 = 0;
    v129 = 0;
    v144[0] = v15;
    v16 = v130;
    v130 = 0;
    v144[1] = v16;
    v145 = v131;
    v17 = WTF::fastMalloc((WTF *)0x78);
    v18 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17, (uint64_t)&v135);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 16, (uint64_t)&v137);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17 + 32, (uint64_t)v139);
    v19 = v140;
    if (v140)
      *(_DWORD *)v140 += 2;
    *(_QWORD *)(v17 + 48) = v19;
    v20 = v141;
    v21 = v142;
    *(_WORD *)(v17 + 88) = v143;
    *(_OWORD *)(v17 + 72) = v21;
    *(_OWORD *)(v17 + 56) = v20;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17 + 96, (uint64_t)v144);
    *(_BYTE *)(v17 + 112) = v145;
    v109 = 0;
    v110 = 0;
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = 0x100000001;
    *(_BYTE *)(a4 + 16) = 1;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v22);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v144, v23);
    v25 = v140;
    v140 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v139, v24);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v137, v34);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v35);
    return (IPC::Encoder *)std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v36);
  }
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v8);
  {
    v27 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v107 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v27 = WebKit::WebProcess::WebProcess(v107);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v27;
  }
  v28 = *((_QWORD *)v27 + 4);
  v108[0] = WebKit::pageIdentifier(a3, v26);
  v108[1] = v29;
  v116 = 0;
  IPC::Connection::createSyncMessageEncoder(3703, 0, &v116, (uint64_t *)&v115);
  v30 = v115;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v115, v6);
  *(_QWORD *)IPC::Encoder::grow(v30, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v30, v108);
  IPC::Connection::sendSyncMessage(v28, v116, (uint64_t *)&v115, 0, (uint64_t)&v113, INFINITY);
  if (!v114)
  {
    LOBYTE(v109) = 0;
    v112 = 0;
    v5 = (uint64_t)v113;
    v38 = v113[1];
    v39 = (char *)*v113;
    v40 = v113[2] - *v113;
    if (v38 <= v40)
    {
      v83 = 0;
      v84 = 0;
      *v113 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v85 = *(_QWORD *)(v5 + 24);
      if (v85)
        goto LABEL_130;
      goto LABEL_90;
    }
    v41 = &v39[v40];
    v42 = (uint64_t)&v39[v40 + 1];
    v113[2] = v42;
    if (!v39)
    {
      v83 = v38;
      v84 = 0;
      goto LABEL_90;
    }
    v43 = *v41;
    if (v43 >= 2)
      goto LABEL_110;
    if (v43)
    {
      v44 = ((v42 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v39;
      if (v38 < v44 || v38 - v44 <= 7)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v87 = *(_QWORD *)(v5 + 24);
        if (v87)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
          v88 = *(_QWORD *)v5;
          v89 = *(_QWORD *)(v5 + 8);
          v90 = *(_QWORD *)(v5 + 24);
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
          if (v90)
          {
            if (v89)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, v88);
          }
        }
        goto LABEL_109;
      }
      v45 = (IPC::Encoder **)&v39[v44];
      v30 = *v45;
      *(_QWORD *)(v5 + 16) = v45 + 1;
      v133 = 0;
      v134 = 0;
      if ((unint64_t)v30 >= 0x2222)
      {
        LODWORD(v28) = 120;
        do
        {
          IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v119, (uint64_t *)v5);
          if (!v132)
          {
LABEL_108:
            std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v47);
            WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v102);
            goto LABEL_109;
          }
          v91 = HIDWORD(v134);
          if (HIDWORD(v134) == (_DWORD)v134)
          {
            WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>((uint64_t)&v133, (unint64_t)&v119);
          }
          else
          {
            v92 = (char *)v133 + 120 * HIDWORD(v134);
            *(_QWORD *)v92 = 0;
            *((_QWORD *)v92 + 1) = 0;
            v93 = v119;
            v119 = 0;
            *(_QWORD *)v92 = v93;
            LODWORD(v93) = v120;
            LODWORD(v120) = 0;
            *((_DWORD *)v92 + 2) = (_DWORD)v93;
            LODWORD(v93) = HIDWORD(v120);
            HIDWORD(v120) = 0;
            *((_DWORD *)v92 + 3) = (_DWORD)v93;
            *((_QWORD *)v92 + 2) = 0;
            *((_QWORD *)v92 + 3) = 0;
            v94 = v121;
            v121 = 0;
            *((_QWORD *)v92 + 2) = v94;
            LODWORD(v94) = v122;
            LODWORD(v122) = 0;
            *((_DWORD *)v92 + 6) = v94;
            LODWORD(v94) = HIDWORD(v122);
            HIDWORD(v122) = 0;
            *((_DWORD *)v92 + 7) = v94;
            *((_QWORD *)v92 + 4) = 0;
            *((_QWORD *)v92 + 5) = 0;
            v95 = v123;
            v123 = 0;
            *((_QWORD *)v92 + 4) = v95;
            LODWORD(v95) = v124;
            LODWORD(v124) = 0;
            *((_DWORD *)v92 + 10) = v95;
            LODWORD(v95) = HIDWORD(v124);
            HIDWORD(v124) = 0;
            *((_DWORD *)v92 + 11) = v95;
            v96 = v125;
            v125 = 0;
            *((_QWORD *)v92 + 6) = v96;
            v97 = v126;
            v98 = v127;
            *((_WORD *)v92 + 44) = v128;
            *(_OWORD *)(v92 + 72) = v98;
            *(_OWORD *)(v92 + 56) = v97;
            *((_QWORD *)v92 + 12) = 0;
            *((_QWORD *)v92 + 13) = 0;
            v99 = v129;
            v129 = 0;
            *((_QWORD *)v92 + 12) = v99;
            LODWORD(v99) = v130;
            LODWORD(v130) = 0;
            *((_DWORD *)v92 + 26) = v99;
            LODWORD(v99) = HIDWORD(v130);
            HIDWORD(v130) = 0;
            *((_DWORD *)v92 + 27) = v99;
            v92[112] = v131;
            HIDWORD(v134) = v91 + 1;
          }
          std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v47);
          v30 = (IPC::Encoder *)((char *)v30 - 1);
        }
        while (v30);
        LODWORD(v30) = v134;
        LODWORD(v28) = HIDWORD(v134);
        v57 = v133;
        if (v134 > HIDWORD(v134))
        {
          v100 = v133;
          if (HIDWORD(v134))
          {
            if (HIDWORD(v134) >= 0x2222223)
              goto LABEL_136;
            v101 = WTF::fastMalloc((WTF *)(120 * HIDWORD(v134)));
            LODWORD(v30) = 120 * (int)v28 / 0x78u;
            if ((WTF *)v101 == v57)
            {
              v100 = v57;
            }
            else
            {
              v100 = (WTF *)v101;
              WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move((uint64_t)v57, (char *)v57 + 120 * v28, v101);
            }
          }
          if (v57)
          {
            if (v100 == v57)
            {
              LODWORD(v30) = 0;
              v100 = 0;
              v133 = 0;
              LODWORD(v134) = 0;
            }
            WTF::fastFree(v57, v39);
          }
          v57 = v100;
        }
      }
      else if (v30)
      {
        v46 = WTF::fastMalloc((WTF *)(120 * (_QWORD)v30));
        LODWORD(v134) = 120 * (int)v30 / 0x78u;
        v133 = (WTF *)v46;
        LODWORD(v28) = 120;
        do
        {
          IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v119, (uint64_t *)v5);
          if (!v132)
            goto LABEL_108;
          v48 = HIDWORD(v134);
          if (HIDWORD(v134) == (_DWORD)v134)
          {
            WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>((uint64_t)&v133, (unint64_t)&v119);
          }
          else
          {
            v49 = (char *)v133 + 120 * HIDWORD(v134);
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
            v50 = v119;
            v119 = 0;
            *(_QWORD *)v49 = v50;
            LODWORD(v50) = v120;
            LODWORD(v120) = 0;
            *((_DWORD *)v49 + 2) = (_DWORD)v50;
            LODWORD(v50) = HIDWORD(v120);
            HIDWORD(v120) = 0;
            *((_DWORD *)v49 + 3) = (_DWORD)v50;
            *((_QWORD *)v49 + 2) = 0;
            *((_QWORD *)v49 + 3) = 0;
            v51 = v121;
            v121 = 0;
            *((_QWORD *)v49 + 2) = v51;
            LODWORD(v51) = v122;
            LODWORD(v122) = 0;
            *((_DWORD *)v49 + 6) = v51;
            LODWORD(v51) = HIDWORD(v122);
            HIDWORD(v122) = 0;
            *((_DWORD *)v49 + 7) = v51;
            *((_QWORD *)v49 + 4) = 0;
            *((_QWORD *)v49 + 5) = 0;
            v52 = v123;
            v123 = 0;
            *((_QWORD *)v49 + 4) = v52;
            LODWORD(v52) = v124;
            LODWORD(v124) = 0;
            *((_DWORD *)v49 + 10) = v52;
            LODWORD(v52) = HIDWORD(v124);
            HIDWORD(v124) = 0;
            *((_DWORD *)v49 + 11) = v52;
            v53 = v125;
            v125 = 0;
            *((_QWORD *)v49 + 6) = v53;
            v54 = v126;
            v55 = v127;
            *((_WORD *)v49 + 44) = v128;
            *(_OWORD *)(v49 + 72) = v55;
            *(_OWORD *)(v49 + 56) = v54;
            *((_QWORD *)v49 + 12) = 0;
            *((_QWORD *)v49 + 13) = 0;
            v56 = v129;
            v129 = 0;
            *((_QWORD *)v49 + 12) = v56;
            LODWORD(v56) = v130;
            LODWORD(v130) = 0;
            *((_DWORD *)v49 + 26) = v56;
            LODWORD(v56) = HIDWORD(v130);
            HIDWORD(v130) = 0;
            *((_DWORD *)v49 + 27) = v56;
            v49[112] = v131;
            HIDWORD(v134) = v48 + 1;
          }
          std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v47);
          v30 = (IPC::Encoder *)((char *)v30 - 1);
        }
        while (v30);
        v57 = v133;
        LODWORD(v30) = v134;
        LODWORD(v28) = HIDWORD(v134);
      }
      else
      {
        LODWORD(v28) = 0;
        v57 = 0;
      }
      v133 = 0;
      v134 = 0;
      LODWORD(v6) = 1;
      v118 = 1;
      WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v39);
      v117[0] = 0;
      v117[1] = 0;
      LOBYTE(v137) = 1;
      WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v117, v58);
      LOBYTE(v138) = 1;
      v135 = 0;
      v136 = 0;
      v119 = v57;
      v120 = __PAIR64__(v28, v30);
      LOBYTE(v121) = 1;
      LOBYTE(v122) = 1;
      WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v59);
    }
    else
    {
      LODWORD(v6) = 0;
      LOBYTE(v119) = 0;
      LOBYTE(v121) = 0;
      LOBYTE(v122) = 1;
    }
    v5 = 0;
    v60 = 1;
    goto LABEL_35;
  }
  if (v114 == 1)
  {
    v31 = 0;
    LOBYTE(v119) = (_BYTE)v113;
    v32 = 1;
    LODWORD(v123) = 1;
    v33 = 1;
    goto LABEL_70;
  }
  do
  {
    v85 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_130:
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
      v84 = *(_QWORD *)v5;
      v83 = *(_QWORD *)(v5 + 8);
    }
    else
    {
      v83 = 0;
      v84 = 0;
    }
LABEL_90:
    v38 = 0;
    v39 = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v86 = *(_QWORD *)(v5 + 24);
    if (v86)
    {
      if (v83)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v84, v83);
LABEL_109:
        v39 = *(char **)v5;
        v38 = *(_QWORD *)(v5 + 8);
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
LABEL_110:
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v103 = *(_QWORD *)(v5 + 24);
    if (v103 && v38)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v103 + 16))(v103, v39);
    v104 = *(_QWORD *)v5;
    v105 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v106 = *(_QWORD *)(v5 + 24);
    if (!v106)
    {
      v105 = 0;
LABEL_113:
      v39 = 0;
      goto LABEL_114;
    }
    if (!v105)
      goto LABEL_113;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
    v39 = *(char **)v5;
    v105 = *(_QWORD *)(v5 + 8);
    v106 = *(_QWORD *)(v5 + 24);
LABEL_114:
    LOBYTE(v119) = 0;
    LOBYTE(v122) = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if (v106 && v105)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v106 + 16))(v106, v39);
    v60 = 0;
    LODWORD(v6) = 0;
    v5 = 1;
LABEL_35:
    if (v112 == v60)
    {
      if (v112)
      {
        if (v111 == (_DWORD)v6)
        {
          if (v111)
          {
            if (HIDWORD(v110))
              WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct((uint64_t)v109, (char *)v109 + 120 * HIDWORD(v110));
            v61 = v109;
            if (v109)
            {
              v109 = 0;
              LODWORD(v110) = 0;
              WTF::fastFree(v61, v39);
            }
            v62 = v119;
            v119 = 0;
            v120 = 0;
            v109 = v62;
            v110 = __PAIR64__(v28, v30);
          }
        }
        else if (v111)
        {
          WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v39);
          v111 = 0;
        }
        else
        {
          v64 = v119;
          v119 = 0;
          v120 = 0;
          v109 = v64;
          v110 = __PAIR64__(v28, v30);
          v111 = 1;
        }
      }
    }
    else if (v112)
    {
      if (v111)
        WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v39);
      v112 = 0;
    }
    else
    {
      LOBYTE(v109) = 0;
      v111 = 0;
      if ((_DWORD)v6)
      {
        v63 = v119;
        v119 = 0;
        v120 = 0;
        v109 = v63;
        v110 = __PAIR64__(v28, v30);
        v111 = 1;
      }
      v112 = 1;
    }
    if ((_DWORD)v6)
      v65 = v5;
    else
      v65 = 1;
    if ((v65 & 1) == 0)
      WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v39);
    if (!v112)
    {
      v31 = 0;
      LOBYTE(v119) = 13;
      v32 = 1;
      LODWORD(v123) = 1;
      goto LABEL_69;
    }
  }
  while (v114);
  v66 = v113;
  v113 = 0;
  if (v111)
  {
    v67 = v109;
    v109 = 0;
    LODWORD(v6) = v110;
    LODWORD(v5) = HIDWORD(v110);
    v110 = 0;
    v31 = 1;
    LOBYTE(v138) = 1;
    v135 = 0;
    v136 = 0;
    v119 = (WTF *)v66;
    v120 = (unint64_t)v67;
    v137 = 0;
    v121 = __PAIR64__(v5, v6);
    LOBYTE(v122) = 1;
    LODWORD(v123) = 0;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v39);
    v68 = v135;
    v135 = 0;
    if (v68)
    {
      IPC::Decoder::~Decoder(v68);
      WTF::fastFree(v69, v70);
    }
  }
  else
  {
    v31 = 0;
    v119 = (WTF *)v66;
    LOBYTE(v120) = 0;
    LOBYTE(v122) = 0;
    LODWORD(v123) = 0;
  }
  v32 = 0;
  if (v112 && v111)
  {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v39);
    v32 = 0;
  }
LABEL_69:
  v33 = v114;
  if (v114 != -1)
LABEL_70:
    ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F0830[v33])(&v135, &v113);
  result = v115;
  v115 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v39);
    result = (IPC::Encoder *)WTF::fastFree(v71, v72);
  }
  if (v32 || !v31)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_75;
  }
  v73 = v120;
  v120 = 0;
  v121 = 0;
  v135 = (IPC::Decoder *)v73;
  v136 = __PAIR64__(v5, v6);
  LOBYTE(v137) = 1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 12) = v5;
  if (!(_DWORD)v5)
  {
    *(_BYTE *)(a4 + 16) = 1;
LABEL_88:
    result = (IPC::Encoder *)WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v39);
    goto LABEL_75;
  }
  if (v5 >= 0x2222223)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x197635350);
  }
  v74 = (WTF *)(120 * v5);
  v75 = WTF::fastMalloc(v74);
  v76 = 0;
  *(_DWORD *)(a4 + 8) = (v74 & 0xFFFFFFF8) / 0x78;
  *(_QWORD *)a4 = v75;
  do
  {
    v77 = (char *)v76 + v73;
    v78 = (char *)v76 + v75;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v76 + v75, (uint64_t)v76 + v73);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v76 + v75 + 16, (uint64_t)v76 + v73 + 16);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v76 + v75 + 32, (uint64_t)v76 + v73 + 32);
    v79 = *(_DWORD **)((char *)v76 + v73 + 48);
    if (v79)
      *v79 += 2;
    *((_QWORD *)v78 + 6) = v79;
    v80 = *(_OWORD *)(v77 + 56);
    v81 = *(_OWORD *)(v77 + 72);
    *((_WORD *)v78 + 44) = *((_WORD *)v77 + 44);
    *(_OWORD *)(v78 + 72) = v81;
    *(_OWORD *)(v78 + 56) = v80;
    result = (IPC::Encoder *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v78 + 96), (uint64_t)(v77 + 96));
    v78[112] = v77[112];
    v76 = (WTF *)((char *)v76 + 120);
  }
  while (v74 != v76);
  v82 = v137;
  *(_BYTE *)(a4 + 16) = 1;
  if (v82)
    goto LABEL_88;
LABEL_75:
  if ((_DWORD)v123 != -1)
    return (IPC::Encoder *)((uint64_t (*)(IPC::Decoder **, WTF **))off_1E34F0770[v123])(&v135, &v119);
  return result;
}

uint64_t WebKit::WebPlatformStrategies::informationForItemAtIndex@<X0>(WTF::StringImpl **a1@<X2>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result;
  void *v11;
  __n128 v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unsigned int v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t *v69;
  char v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  IPC::Decoder *v80;
  WTF *v81;
  void *v82;
  IPC::Encoder *v83;
  WTF *v84;
  void *v85;
  char v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WebKit::WebProcess *v103;
  uint64_t v104[2];
  uint64_t *v105;
  WTF *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[40];
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  char v116;
  char v117;
  int v118;
  WTF *v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;
  WTF *v129;
  uint64_t v130;
  char v131;
  char v132;
  char v133;
  uint64_t *v134;
  int v135;
  IPC::Encoder *v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  _BYTE v145[40];
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;

  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  result = WebKit::WebPasteboardOverrides::overriddenInfo((WebKit::WebPasteboardOverrides *)a5, a1, (const WTF::StringImpl *)a1);
  if (*(_BYTE *)(a5 + 120))
    return result;
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100](a5, v11);
  {
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v103 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v13 = WebKit::WebProcess::WebProcess(v103);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
  }
  v14 = *((_QWORD *)v13 + 4);
  v104[0] = WebKit::pageIdentifier(a4, v12);
  v104[1] = v15;
  v137 = 0;
  IPC::Connection::createSyncMessageEncoder(3716, 0, &v137, (uint64_t *)&v136);
  v16 = v136;
  *(_QWORD *)IPC::Encoder::grow(v136, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v16, (uint64_t *)a1);
  *(_QWORD *)IPC::Encoder::grow(v16, 8uLL, 8) = a3;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v16, v104);
  IPC::Connection::sendSyncMessage(v14, v137, (uint64_t *)&v136, 0, (uint64_t)&v134, INFINITY);
  if (!v135)
  {
    LOBYTE(v119) = 0;
    v133 = 0;
    a3 = v134;
    v19 = v134[1];
    v20 = (char *)*v134;
    v21 = v134[2] - *v134;
    if (v19 <= v21)
    {
      v98 = 0;
      v99 = 0;
      *v134 = 0;
      a3[1] = 0;
      v100 = a3[3];
      if (v100)
      {
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
          v99 = *a3;
          v98 = a3[1];
        }
        else
        {
          v98 = 0;
          v99 = 0;
        }
      }
    }
    else
    {
      v22 = &v20[v21];
      v134[2] = (uint64_t)(v22 + 1);
      if (v20)
      {
        v23 = *v22;
        if (v23 >= 2)
          goto LABEL_91;
        if (v23)
        {
          IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v138, a3);
          if (!v149)
          {
            std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138, v24);
            goto LABEL_18;
          }
          a3 = (uint64_t *)v138;
          v138 = 0;
          v25 = v140;
          v140 = 0;
          v26 = v142;
          v142 = 0;
          v27 = v144;
          *(_OWORD *)v112 = *(_OWORD *)v145;
          *(_OWORD *)&v112[16] = *(_OWORD *)&v145[16];
          *(_WORD *)&v112[32] = *(_WORD *)&v145[32];
          v28 = v146;
          v144 = 0;
          v146 = 0;
          v29 = v148;
          LOBYTE(v115) = v148;
          v116 = 1;
          v117 = 1;
          v30 = v139;
          v139 = 0;
          v31 = v141;
          v141 = 0;
          v32 = v143;
          v143 = 0;
          v33 = v147;
          v147 = 0;
          std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138, v24);
          v105 = 0;
          v138 = (WTF *)a3;
          v106 = 0;
          v139 = v30;
          v107 = 0;
          v140 = v25;
          v108 = 0;
          v141 = v31;
          v109 = 0;
          v142 = v26;
          v110 = 0;
          v143 = v32;
          v144 = v27;
          *(_OWORD *)v145 = *(_OWORD *)v112;
          *(_OWORD *)&v145[16] = *(_OWORD *)&v112[16];
          *(_WORD *)&v145[32] = *(_WORD *)&v112[32];
          v111 = 0;
          v113 = 0;
          v146 = v28;
          v114 = 0;
          v147 = v33;
          LOBYTE(v148) = v29;
          v149 = 1;
        }
        else
        {
          LOBYTE(v138) = 0;
          v149 = 0;
          LOBYTE(v105) = 0;
          v116 = 0;
          v117 = 1;
          std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138, v20);
          LOBYTE(v138) = 0;
          v149 = 0;
        }
        v150 = 1;
        std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v105, v34);
        goto LABEL_22;
      }
      v98 = v19;
      v99 = 0;
    }
    v19 = 0;
    v20 = 0;
    *a3 = 0;
    a3[1] = 0;
    v101 = a3[3];
    if (!v101)
      goto LABEL_91;
    goto LABEL_96;
  }
  if (v135 == 1)
  {
    LOBYTE(v105) = (_BYTE)v134;
    v17 = 1;
    v118 = 1;
    v18 = 1;
    goto LABEL_73;
  }
  do
  {
    v101 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_96:
    if (v98)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v99, v98);
      v20 = (char *)*a3;
      v19 = a3[1];
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
LABEL_91:
    *a3 = 0;
    a3[1] = 0;
    v102 = a3[3];
    if (v102 && v19)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v102 + 16))(v102, v20);
LABEL_18:
    v36 = *a3;
    v37 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    v38 = a3[3];
    if (v38)
    {
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
        v35 = (void *)*a3;
        v37 = a3[1];
        v38 = a3[3];
        goto LABEL_21;
      }
    }
    else
    {
      v37 = 0;
    }
    v35 = 0;
LABEL_21:
    LOBYTE(v138) = 0;
    v150 = 0;
    *a3 = 0;
    a3[1] = 0;
    if (v38 && v37)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v38 + 16))(v38, v35);
LABEL_22:
    if (v133 == v150)
    {
      if (!v133)
        goto LABEL_61;
      if (v132 == v149)
      {
        if (v132)
        {
          if (HIDWORD(v120))
            WTF::VectorDestructor<true,WTF::String>::destruct(v119, (WTF *)((char *)v119 + 8 * HIDWORD(v120)));
          v39 = v119;
          if (v119)
          {
            v119 = 0;
            LODWORD(v120) = 0;
            WTF::fastFree(v39, v35);
          }
          v119 = v138;
          v40 = v139;
          v138 = 0;
          v139 = 0;
          v120 = v40;
          if (HIDWORD(v122))
            WTF::VectorDestructor<true,WTF::String>::destruct(v121, (WTF *)((char *)v121 + 8 * HIDWORD(v122)));
          v41 = v121;
          if (v121)
          {
            v121 = 0;
            LODWORD(v122) = 0;
            WTF::fastFree(v41, v35);
          }
          v121 = v140;
          v42 = v141;
          v140 = 0;
          v141 = 0;
          v122 = v42;
          if (HIDWORD(v124))
            WTF::VectorDestructor<true,WTF::String>::destruct(v123, (WTF *)((char *)v123 + 8 * HIDWORD(v124)));
          v43 = v123;
          if (v123)
          {
            v123 = 0;
            LODWORD(v124) = 0;
            WTF::fastFree(v43, v35);
          }
          v123 = v142;
          v44 = v143;
          v142 = 0;
          v143 = 0;
          v124 = v44;
          v45 = v144;
          v144 = 0;
          v46 = v125;
          v125 = v45;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v35);
            else
              *(_DWORD *)v46 -= 2;
          }
          v126 = *(_OWORD *)v145;
          v127 = *(_OWORD *)&v145[16];
          v128 = *(_WORD *)&v145[32];
          if (HIDWORD(v130))
            WTF::VectorDestructor<true,WTF::String>::destruct(v129, (WTF *)((char *)v129 + 8 * HIDWORD(v130)));
          v65 = v129;
          if (v129)
          {
            v129 = 0;
            LODWORD(v130) = 0;
            WTF::fastFree(v65, v35);
          }
          v129 = v146;
          v66 = v147;
          v146 = 0;
          v147 = 0;
          v130 = v66;
          v131 = v148;
        }
      }
      else if (v132)
      {
        a3 = (uint64_t *)&v119;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v35);
        v56 = v125;
        v125 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v55);
          else
            *(_DWORD *)v56 -= 2;
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v55);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v67);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v68);
        v132 = 0;
      }
      else
      {
        v57 = v138;
        v138 = 0;
        v119 = v57;
        v58 = v139;
        v139 = 0;
        v120 = v58;
        v59 = v140;
        v140 = 0;
        v121 = v59;
        v60 = v141;
        v141 = 0;
        v122 = v60;
        v61 = v142;
        v142 = 0;
        v123 = v61;
        v62 = v143;
        v143 = 0;
        v124 = v62;
        v125 = v144;
        v128 = *(_WORD *)&v145[32];
        v127 = *(_OWORD *)&v145[16];
        v126 = *(_OWORD *)v145;
        v63 = v146;
        v144 = 0;
        v146 = 0;
        v129 = v63;
        v64 = v147;
        v147 = 0;
        v130 = v64;
        v131 = v148;
        v132 = 1;
      }
    }
    else if (v133)
    {
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v35);
      v133 = 0;
    }
    else
    {
      LOBYTE(v119) = 0;
      v132 = 0;
      if (v149)
      {
        v47 = v138;
        v138 = 0;
        v119 = v47;
        v48 = v139;
        v139 = 0;
        v120 = v48;
        v49 = v140;
        v140 = 0;
        v121 = v49;
        v50 = v141;
        v141 = 0;
        v122 = v50;
        v51 = v142;
        v142 = 0;
        v123 = v51;
        v52 = v143;
        v143 = 0;
        v124 = v52;
        v125 = v144;
        v128 = *(_WORD *)&v145[32];
        v127 = *(_OWORD *)&v145[16];
        v126 = *(_OWORD *)v145;
        v53 = v146;
        v144 = 0;
        v146 = 0;
        v129 = v53;
        v54 = v147;
        v147 = 0;
        v130 = v54;
        v131 = v148;
        v132 = 1;
      }
      v133 = 1;
    }
    if (v150)
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138, v35);
LABEL_61:
    if (!v133)
    {
      LOBYTE(v105) = 13;
      v17 = 1;
      v118 = 1;
      goto LABEL_72;
    }
  }
  while (v135);
  v69 = v134;
  v134 = 0;
  LOBYTE(v139) = 0;
  v150 = 0;
  v70 = v132;
  if (v132)
  {
    v71 = v119;
    v119 = 0;
    v72 = v121;
    v121 = 0;
    v73 = v123;
    v123 = 0;
    v74 = v125;
    *(_OWORD *)&v145[8] = v126;
    *(_OWORD *)&v145[24] = v127;
    LOWORD(v146) = v128;
    v75 = v129;
    v125 = 0;
    v129 = 0;
    v149 = v131;
    v70 = 1;
    v150 = 1;
    v138 = 0;
    v139 = 0;
    v106 = v71;
    v140 = 0;
    v76 = v120;
    v120 = 0;
    v107 = v76;
    v141 = 0;
    v108 = v72;
    v142 = 0;
    v77 = v122;
    v122 = 0;
    v109 = v77;
    v143 = 0;
    v110 = v73;
    v144 = 0;
    v78 = v124;
    v124 = 0;
    v111 = v78;
    *(_QWORD *)v145 = 0;
    *(_QWORD *)v112 = v74;
    LOWORD(v113) = v128;
    *(_OWORD *)&v112[8] = v126;
    *(_OWORD *)&v112[24] = v127;
    v147 = 0;
    v114 = v75;
    v148 = 0;
    v79 = v130;
    v130 = 0;
    v115 = v79;
    v116 = v131;
  }
  else
  {
    v138 = 0;
    LOBYTE(v106) = 0;
  }
  v105 = v69;
  v117 = v70;
  v118 = 0;
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v139, v35);
  v80 = v138;
  v138 = 0;
  if (v80)
  {
    IPC::Decoder::~Decoder(v80);
    WTF::fastFree(v81, v82);
  }
  if (v133)
    std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v35);
  v17 = 0;
LABEL_72:
  v18 = v135;
  if (v135 != -1)
LABEL_73:
    ((void (*)(WTF **, uint64_t **))off_1E34F0830[v18])(&v138, &v134);
  v83 = v136;
  v136 = 0;
  if (v83)
  {
    IPC::Encoder::~Encoder(v83, v35);
    WTF::fastFree(v84, v85);
  }
  if (v17)
  {
    v86 = 0;
    LOBYTE(v138) = 0;
    v149 = 0;
    goto LABEL_78;
  }
  LOBYTE(v138) = 0;
  v149 = 0;
  v86 = v117;
  if (v117)
  {
    v87 = v106;
    v106 = 0;
    v138 = v87;
    v88 = v107;
    v107 = 0;
    v139 = v88;
    v89 = v108;
    v108 = 0;
    v140 = v89;
    v90 = v109;
    v109 = 0;
    v141 = v90;
    v91 = v110;
    v110 = 0;
    v142 = v91;
    v92 = v111;
    v111 = 0;
    v143 = v92;
    v144 = *(WTF::StringImpl **)v112;
    *(_WORD *)&v145[32] = v113;
    *(_OWORD *)v145 = *(_OWORD *)&v112[8];
    *(_OWORD *)&v145[16] = *(_OWORD *)&v112[24];
    v93 = v114;
    *(_QWORD *)v112 = 0;
    v114 = 0;
    v146 = v93;
    v94 = v115;
    v115 = 0;
    v147 = v94;
    LOBYTE(v148) = v116;
    v149 = 1;
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 120) = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5, (uint64_t)&v138);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 16, (uint64_t)&v140);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 32, (uint64_t)&v142);
    v95 = v144;
    if (v144)
      *(_DWORD *)v144 += 2;
    *(_QWORD *)(a5 + 48) = v95;
    v96 = *(_OWORD *)&v145[16];
    *(_OWORD *)(a5 + 56) = *(_OWORD *)v145;
    *(_OWORD *)(a5 + 72) = v96;
    *(_WORD *)(a5 + 88) = *(_WORD *)&v145[32];
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 96, (uint64_t)&v146);
    *(_BYTE *)(a5 + 112) = v148;
    v86 = 1;
  }
  else
  {
LABEL_78:
    *(_BYTE *)a5 = 0;
  }
  *(_BYTE *)(a5 + 120) = v86;
  v97 = std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138, v35);
  return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34F0780[v17])(v97, &v105);
}

WTF *WebKit::WebPlatformStrategies::readBufferFromPasteboard@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, WTF::StringImpl **a3@<X3>, const WTF::StringImpl **a4@<X4>, uint64_t a5@<X5>, uint64_t **a6@<X8>)
{
  uint64_t *v7;
  __n128 v10;
  void *v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  int v16;
  int v17;
  void *v18;
  uint64_t *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WTF *result;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t *v34;
  char v35;
  uint64_t *v36;
  int v37;
  IPC::Encoder *v38;
  uint64_t v39;

  v7 = (uint64_t *)a4;
  v33[0] = a1;
  v33[1] = a2;
  v31 = 0;
  v32 = 0;
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  if (WebKit::WebPasteboardOverrides::getDataForOverride(a4, a3, (const WTF::StringImpl *)&v31))
  {
    WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a6);
    goto LABEL_22;
  }
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v25);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *((_QWORD *)v12 + 4);
  v27[0] = WebKit::pageIdentifier(a5, v10);
  v27[1] = v14;
  v39 = 0;
  IPC::Connection::createSyncMessageEncoder(3717, 0, &v39, (uint64_t *)&v38);
  v15 = v38;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(v38, v33);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v15, (uint64_t *)a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v15, v7);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v15, v27);
  IPC::Connection::sendSyncMessage(v13, v39, (uint64_t *)&v38, 0, (uint64_t)&v36, INFINITY);
  if (v37)
  {
    if (v37 == 1)
    {
      LOBYTE(v28) = (_BYTE)v36;
      v16 = 1;
      v30 = 1;
      v17 = 1;
LABEL_14:
      ((void (*)(uint64_t **, uint64_t **))off_1E34F0830[v17])(&v34, &v36);
      goto LABEL_15;
    }
    goto LABEL_27;
  }
  LOBYTE(v34) = 0;
  v35 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(v36, (unsigned int *)&v34);
  if (v35)
  {
    v17 = v37;
    if (!v37)
    {
      v16 = 0;
      v19 = v36;
      v36 = 0;
      v7 = v34;
      v28 = v19;
      v29 = v34;
      v30 = 0;
      goto LABEL_14;
    }
LABEL_27:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v28) = 13;
  v16 = 1;
  v30 = 1;
  v17 = v37;
  if (v37 != -1)
    goto LABEL_14;
LABEL_15:
  v20 = v38;
  v38 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v21, v22);
  }
  if (v16 || (v29 = 0, !v7))
  {
    *a6 = 0;
  }
  else
  {
    do
      v23 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v23 + 1, (unsigned int *)v7));
    *a6 = v7;
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v18);
    v16 = v30;
    if (v30 == -1)
      goto LABEL_22;
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34F0790[v16])(&v36, &v28);
LABEL_22:
  result = v31;
  if (v31)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPlatformStrategies::readURLFromPasteboard@<X0>(WTF::StringImpl *a1@<X1>, uint64_t *a2@<X2>, WTF::StringImpl **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  WebKit::WebProcess *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WebKit::WebProcess *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34[2];
  uint64_t *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  int v41;
  IPC::Encoder *v42;
  uint64_t v43;

  v6 = a4;
  v39 = 0;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v29);
    v6 = a4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)v11 + 4);
  v34[0] = WebKit::pageIdentifier(v6, a6);
  v34[1] = v13;
  v43 = 0;
  IPC::Connection::createSyncMessageEncoder(3719, 0, &v43, (uint64_t *)&v42);
  v14 = v42;
  *(_QWORD *)IPC::Encoder::grow(v42, 8uLL, 8) = a1;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v14, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v14, v34);
  IPC::Connection::sendSyncMessage((uint64_t)v12, v43, (uint64_t *)&v42, 0, (uint64_t)&v40, INFINITY);
  if (v41)
  {
    if (v41 == 1)
    {
      LOBYTE(v35) = (_BYTE)v40;
      v15 = 1;
      v38 = 1;
      v16 = 1;
LABEL_11:
      ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F0830[v16])(&v31, &v40);
      goto LABEL_12;
    }
LABEL_29:
    v30 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v31) = 0;
  v33 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(v40, (uint64_t)&v31);
  if (v33)
  {
    if (v41)
      goto LABEL_29;
    v15 = 0;
    v18 = v40;
    v40 = 0;
    v12 = v31;
    a1 = v32;
    v31 = 0;
    v32 = 0;
    v35 = v18;
    v36 = v12;
    v37 = a1;
  }
  else
  {
    LOBYTE(v35) = 13;
    v15 = 1;
  }
  v38 = v15;
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v17);
  v16 = v41;
  if (v41 != -1)
    goto LABEL_11;
LABEL_12:
  v20 = v42;
  v42 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  if (!v15)
  {
    v36 = 0;
    v37 = 0;
    v39 = v12;
    v23 = *a3;
    *a3 = a1;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  MEMORY[0x19AEABB24](a5, &v31, &v39, 0);
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F07A0[v15])(&v31, &v35);
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::readStringFromPasteboard@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  int v15;
  int v16;
  void *v17;
  uint64_t *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t result;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  uint64_t *v34;
  int v35;
  IPC::Encoder *v36;
  uint64_t v37;

  v6 = a4;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v26);
    v6 = a4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *((_QWORD *)v11 + 4);
  v28[0] = WebKit::pageIdentifier(v6, a6);
  v28[1] = v13;
  v37 = 0;
  IPC::Connection::createSyncMessageEncoder(3718, 0, &v37, (uint64_t *)&v36);
  v14 = v36;
  *(_QWORD *)IPC::Encoder::grow(v36, 8uLL, 8) = a1;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v14, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v14, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v14, v28);
  IPC::Connection::sendSyncMessage(v12, v37, (uint64_t *)&v36, 0, (uint64_t)&v34, INFINITY);
  if (!v35)
  {
    LOBYTE(v32) = 0;
    v33 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v34, &v32);
    if (!v33)
    {
      LOBYTE(v29) = 13;
      v15 = 1;
      v31 = 1;
      v16 = v35;
      if (v35 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    v16 = v35;
    if (!v35)
    {
      v15 = 0;
      v18 = v34;
      v34 = 0;
      a2 = (uint64_t *)v32;
      v29 = v18;
      v30 = v32;
      v31 = 0;
      goto LABEL_10;
    }
LABEL_26:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v35 != 1)
    goto LABEL_26;
  LOBYTE(v29) = (_BYTE)v34;
  v15 = 1;
  v31 = 1;
  v16 = 1;
LABEL_10:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F0830[v16])(&v32, &v34);
LABEL_11:
  v19 = v36;
  v36 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
  }
  if (v15)
    v22 = 0;
  else
    v22 = (WTF::StringImpl *)a2;
  if (!v15)
    v30 = 0;
  if (v22)
  {
    v23 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    *a5 = v22;
    if (v23)
    {
      *(_DWORD *)v22 = v23;
    }
    else
    {
      result = WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
      v15 = v31;
      if (v31 == -1)
        return result;
    }
  }
  else
  {
    *a5 = 0;
  }
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34F07B0[v15])(&v34, &v29);
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  WebKit::WebProcess *v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v6 = *a4;
  *a4 = 0;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v7) + 24);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0850;
  v9[1] = v6;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 243;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v19 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v11, *(const void **)a3, *(unsigned int *)(a3 + 12));
  v18[0] = (uint64_t)v9;
  v18[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v8, &v19, v18, 0, 0);
  v13 = v18[0];
  v18[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  WebKit::WebProcess *v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v6 = *a4;
  *a4 = 0;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v7) + 24);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0898;
  v9[1] = v6;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 244;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v19 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a3;
  v18[0] = (uint64_t)v9;
  v18[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v8, &v19, v18, 0, 0);
  v13 = v18[0];
  v18[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorGetPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebProcess *v5;
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v4 = *a3;
  *a3 = 0;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34F08E0;
  v7[1] = v4;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 242;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v17, v16, 0, 0);
  v11 = v16[0];
  v16[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebProcess *v5;
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v4 = *a3;
  *a3 = 0;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34F0928;
  v7[1] = v4;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 241;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v17, v16, 0, 0);
  v11 = v16[0];
  v16[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::WebPopupMenu::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  result = WTF::fastMalloc((WTF *)0x20);
  v7 = result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34F0438;
  *(_QWORD *)(result + 16) = a2;
  if (a1)
  {
    result = (uint64_t)WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    v8 = *(unsigned int **)(a1 + 24);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(v7 + 24) = v8;
  *a3 = v7;
  return result;
}

void WebKit::WebPopupMenu::~WebPopupMenu(WebKit::WebPopupMenu *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F0438;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F0438;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebPopupMenu::disconnectClient(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t WebKit::WebPopupMenu::show(WebKit::WebPopupMenu *this, const WebCore::IntRect *a2, WebCore::LocalFrameView *a3, unsigned int a4)
{
  signed int v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  __int16 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  __int16 v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebKit::WebProcess *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  WebKit::WebProcess *v44;
  char *v45;
  const WebCore::IntRect *v46;
  WebCore::ScrollView *v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  WTF::StringImpl *v52[2];
  WTF::StringImpl *v53[2];
  WTF::StringImpl *v54[2];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[40];
  unsigned __int8 v58;
  unsigned __int8 v59;
  IPC::Encoder *v60;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  v55 = 0;
  v56 = 0;
  if (!v8)
    goto LABEL_31;
  v46 = a2;
  v47 = a3;
  v49 = a4;
  if (v8 >= 0x5555556)
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x197636F84);
  }
  v48 = v8;
  v51 = v8;
  v9 = 0;
  LODWORD(v56) = 48 * v8 / 0x30u;
  v55 = WTF::fastMalloc((WTF *)(48 * v8));
  v45 = (char *)v55;
  v10 = (_BYTE *)(v55 + 42);
  do
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2), v9) & 1) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 88))(v57, *((_QWORD *)this + 2), v9);
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 40))(v54, *((_QWORD *)this + 2), v9);
      v19 = v58;
      v50 = v59;
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 64))(v53, *((_QWORD *)this + 2), v9);
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 72))(v52, *((_QWORD *)this + 2), v9);
      v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), v9);
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2), v9);
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2), v9);
      v15 = v54[0];
      if (v54[0])
        *(_DWORD *)v54[0] += 2;
      v16 = v53[0];
      if (v53[0])
        *(_DWORD *)v53[0] += 2;
      v12 = v52[0];
      if (v52[0])
      {
        v21 = *(_DWORD *)v52[0];
        *(_DWORD *)v52[0] += 2;
        v52[0] = 0;
        if (v21)
          *(_DWORD *)v12 = v21;
        else
          WTF::StringImpl::destroy(v12, v20);
      }
      v22 = v53[0];
      v53[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v20);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v54[0];
      v54[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
      v14 = v19 | (v50 << 8);
      WebCore::PopupMenuStyle::~PopupMenuStyle((WebCore::PopupMenuStyle *)v57, v20);
      v17 = 1;
    }
    *(v10 - 42) = v17;
    *(_QWORD *)(v10 - 34) = v15;
    *((_WORD *)v10 - 13) = v14;
    *(_QWORD *)(v10 - 18) = v16;
    *(_QWORD *)(v10 - 10) = v12;
    *(v10 - 2) = v18;
    ++v9;
    *(v10 - 1) = v11;
    *v10 = v13;
    v10 += 48;
  }
  while (v51 != v9);
  HIDWORD(v56) = v48;
  v24 = *((_QWORD *)this + 3);
  if (!v24 || (v25 = *(_QWORD *)(v24 + 8)) == 0)
  {
LABEL_31:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 152))(*((_QWORD *)this + 2));
    return WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v27);
  }
  if (v49 != -1 && v48 <= v49)
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  ++*((_DWORD *)this + 2);
  v26 = *(_DWORD **)(v25 + 560);
  *(_QWORD *)(v25 + 560) = this;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v57[0] = *(_QWORD *)v46;
  v28 = (WTF::StringImpl *)WebCore::ScrollView::contentsToWindow(v47, (const WebCore::IntPoint *)v57);
  v29 = (WTF::StringImpl *)*((_QWORD *)v46 + 1);
  v54[0] = v28;
  v54[1] = v29;
  memset(v53, 0, 11);
  {
    v30 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v44 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v30 = WebKit::WebProcess::WebProcess(v44);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v30;
  }
  v31 = *((_QWORD *)v30 + 4);
  *(_OWORD *)v52 = *(_OWORD *)(WebCore::LocalFrameView::frame(v47) + 32);
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 96))(v57);
  v32 = v58;
  v33 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v33)
    v34 = v33 - 16;
  else
    v34 = 0;
  v35 = *(_QWORD *)(v34 + 40);
  v36 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v36 = 2063;
  *(_QWORD *)(v36 + 8) = v35;
  *(_QWORD *)(v36 + 528) = v36 + 16;
  *(_QWORD *)(v36 + 536) = v36 + 16;
  *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v36 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
  v60 = (IPC::Encoder *)v36;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v36, (uint64_t *)v52);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v36, (uint64_t *)v54);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v36, 8uLL, 8) = v32;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v36, 8uLL, 8) = v48;
  v37 = 48 * v48;
  v38 = v45;
  do
  {
    IPC::ArgumentCoder<WebKit::WebPopupItem,void>::encode((IPC::Encoder *)v36, v38);
    v38 += 48;
    v37 -= 48;
  }
  while (v37);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v36, 4uLL, 4) = v49;
  IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::encode((IPC::Encoder *)v36, v53);
  IPC::Connection::sendMessageImpl(v31, (uint64_t *)&v60, 0, 0);
  v40 = v60;
  v60 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v39);
    WTF::fastFree(v41, v42);
  }
  WebCore::PopupMenuStyle::~PopupMenuStyle((WebCore::PopupMenuStyle *)v57, (WTF::StringImpl *)v39);
  return WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v27);
}

uint64_t WebKit::WebPopupMenu::hide(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WebKit::WebProcess *v16;
  IPC::Encoder *v17;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      if (*(_QWORD *)(this + 16))
      {
        {
          v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v4 = WebKit::WebProcess::WebProcess(v16);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
          v2 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        }
        v5 = *((_QWORD *)v4 + 4);
        if (v2)
          v6 = v2 - 16;
        else
          v6 = 0;
        v7 = *(_QWORD *)(v6 + 40);
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 1955;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v17 = (IPC::Encoder *)v8;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v17, 0, 0);
        v10 = v17;
        v17 = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v11, v12);
        }
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if (v13)
          v14 = v13 - 16;
        else
          v14 = 0;
        v15 = *(_DWORD **)(v14 + 576);
        *(_QWORD *)(v14 + 576) = 0;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16));
      }
    }
  }
  return this;
}

void WebKit::WebProgressTrackerClient::progressStarted(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = v3 - 16;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v5 = *(_QWORD *)(v4 + 32);
    *(_BYTE *)(v4 + 2024) = 0;
    v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4 + 32);
    IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(v4 + 32, v6);
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebProgressTrackerClient::progressFinished(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = v3 - 16;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(_BYTE *)(v4 + 2024) = 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 360) + 80))(*(_QWORD *)(v4 + 360), v4);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 56))(v4 + 32);
    IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(v4 + 32, v5);
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebRemoteFrameClient::~WebRemoteFrameClient(WebKit::WebRemoteFrameClient *this)
{
  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient((WebKit::WebRemoteFrameClient *)((char *)this + 8));
}

{
  void *v2;

  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient((WebKit::WebRemoteFrameClient *)((char *)this + 8));
  WTF::fastFree(this, v2);
}

void `non-virtual thunk to'WebKit::WebRemoteFrameClient::~WebRemoteFrameClient(WebKit::WebRemoteFrameClient *this)
{
  WTF *v1;
  void *v2;

  v1 = (WebKit::WebRemoteFrameClient *)((char *)this - 8);
  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient(this);
  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::WebRemoteFrameClient::frameDetached(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 144))
      {
        v3 = (uint64_t)this;
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 48));
        if (v6)
        {
          v8 = v6;
          v9 = (unsigned int *)(v6 + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          v11 = *(unsigned int **)(v2 + 56);
          *(_QWORD *)(v2 + 56) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, v7);
            }
          }
          WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v8 + 48), (WebCore::Frame *)v2);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
        }
        WebKit::WebFrame::invalidate(*(WebKit::WebFrame **)(v3 + 16));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebRemoteFrameClient::sizeDidChange(uint64_t a1, uint64_t a2)
{
  return WebKit::WebFrame::updateRemoteFrameSize(*(IPC::Encoder **)(a1 + 16), a2);
}

uint64_t WebKit::WebRemoteFrameClient::postMessageToRemote(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  void *v23;
  _QWORD v24[5];
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;

  v26[0] = a2;
  v26[1] = a3;
  v25[0] = a5;
  v25[1] = a6;
  v8 = *(_QWORD *)(*(_QWORD *)(result + 16) + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v15 = *(_QWORD **)(*(_QWORD *)(v11 + 48) + 16);
          result = (*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15);
          if ((result & 1) == 0)
          {
            v16 = *(_QWORD *)(v15[2] + 8);
            if (v16)
            {
              v24[0] = v26;
              v24[1] = a4;
              v24[2] = v25;
              v24[3] = a7;
              v24[4] = a8;
              v18 = *(_QWORD *)(v16 + 16);
              v17 = v16 + 16;
              v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
              v20 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v20 = 1993;
              *(_QWORD *)(v20 + 8) = v19;
              *(_QWORD *)(v20 + 528) = v20 + 16;
              *(_QWORD *)(v20 + 536) = v20 + 16;
              *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v20 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
              v27 = v20;
              IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v20, (uint64_t)v24);
              (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v17 + 32))(v17, &v27, 0);
              result = v27;
              v27 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v21);
                return WTF::fastFree(v22, v23);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebRemoteFrameClient::changeLocation(uint64_t a1, WebCore::FrameLoadRequest *this)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  _BYTE v11[584];
  _QWORD *v12;
  _BYTE v13[136];
  char v14;
  WTF::StringImpl *v15;
  _BYTE v16[138];
  char v17;
  CFTypeRef cf;
  char v19;
  _BYTE v20[240];
  NSObject v21[84];

  v21[83] = *MEMORY[0x1E0C80C00];
  WebCore::FrameLoadRequest::requester(this);
  WebCore::NavigationAction::NavigationAction();
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v16);
  cf = 0;
  v19 = 0;
  v17 = v17 & 0xF1 | 4;
  v15 = 0;
  v13[0] = 0;
  v14 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  MEMORY[0x19AEAF0F4](v11, this);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x258);
  *v5 = off_1E34F0970;
  v5[1] = v4;
  MEMORY[0x19AEAF0F4](v5 + 2, v11);
  v12 = v5;
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(a1 + 8, (uint64_t)v20, v21, (uint64_t)v16, 0, (_DWORD **)&v15, 0, (uint64_t)v13, 0, 0, 1u, (uint64_t *)&v12);
  v6 = (uint64_t)v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  MEMORY[0x19AEAF10C](v11);
  if (v14)
    MEMORY[0x19AEADBAC](v13);
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v16, v7);
  return MEMORY[0x19AEAF388](v20);
}

void WebKit::WebRemoteFrameClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned int a11, uint64_t *a12)
{
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void WebKit::WebRemoteFrameClient::renderTreeAsText(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  void *v18;
  uint64_t *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  int v23;
  int v24;
  WebKit::WebRemoteFrameClient *v25;
  int v26;
  __int128 v27;
  uint64_t *v28[3];
  uint64_t *v29;
  WTF::StringImpl *v30;
  int v31;
  __int16 v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t *v35;
  int v36;
  IPC::Encoder *v37;
  uint64_t v38;

  v32 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 24)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || (v11 = *(_QWORD **)(*(_QWORD *)(v8 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v11 + 1368))(v11) & 1) != 0)
    || (v12 = *(_QWORD *)(v11[2] + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    return;
  }
  CFRetain(*(CFTypeRef *)(v12 - 8));
  v27 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
  v28[0] = (uint64_t *)&v27;
  v28[1] = a2;
  v28[2] = (uint64_t *)&v32;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 56))(v12 + 16);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 48))(v12 + 16);
  if (!v14)
  {
    LOBYTE(v29) = 3;
    v31 = 1;
    goto LABEL_21;
  }
  v15 = (WTF::StringImpl *)v14;
  v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3677, v13, &v38, (uint64_t *)&v37);
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(v37, v28);
  IPC::Connection::sendSyncMessage((uint64_t)v15, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
  if (v36)
  {
    if (v36 == 1)
    {
      LOBYTE(v29) = (_BYTE)v35;
      v16 = 1;
      v31 = 1;
      v17 = 1;
LABEL_17:
      ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F0830[v17])(&v33, &v35);
LABEL_18:
      v20 = v37;
      v37 = 0;
      if (v20)
      {
        IPC::Encoder::~Encoder(v20, v18);
        WTF::fastFree(v21, v22);
      }
      if (!v16)
      {
        v30 = 0;
        if (v15)
        {
          v24 = *(_DWORD *)v15;
          *(_DWORD *)v15 += 2;
          *a4 = v15;
          if (v24)
          {
            v23 = 0;
            *(_DWORD *)v15 = v24;
          }
          else
          {
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v18);
            v23 = v31;
            if (v31 == -1)
              goto LABEL_23;
          }
        }
        else
        {
          v23 = 0;
          *a4 = 0;
        }
LABEL_22:
        ((void (*)(uint64_t **, uint64_t **))off_1E34F07C0[v23])(v28, &v29);
LABEL_23:
        CFRelease(*(CFTypeRef *)(v12 - 8));
        return;
      }
LABEL_21:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v23 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    LOBYTE(v33) = 0;
    v34 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v35, &v33);
    if (!v34)
    {
      LOBYTE(v29) = 13;
      v16 = 1;
      v31 = 1;
      v17 = v36;
      if (v36 == -1)
        goto LABEL_18;
      goto LABEL_17;
    }
    v17 = v36;
    if (!v36)
    {
      v16 = 0;
      v19 = v35;
      v35 = 0;
      v15 = v33;
      v29 = v19;
      v30 = v33;
      v31 = 0;
      goto LABEL_17;
    }
  }
  v25 = (WebKit::WebRemoteFrameClient *)std::__throw_bad_variant_access[abi:sn180100]();
  WebKit::WebRemoteFrameClient::unbindRemoteAccessibilityFrames(v25, v26);
}

void WebKit::WebRemoteFrameClient::unbindRemoteAccessibilityFrames(WebKit::WebRemoteFrameClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebRemoteFrameClient::updateRemoteFrameAccessibilityOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[2];
  IPC::Encoder *v18;

  v17[0] = a2;
  v17[1] = a3;
  v16 = a4;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v7 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 16) + 56))(v9 + 16);
              v11 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v11 = 2083;
              *(_QWORD *)(v11 + 8) = v10;
              *(_QWORD *)(v11 + 528) = v11 + 16;
              *(_QWORD *)(v11 + 536) = v11 + 16;
              *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v11 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
              v18 = (IPC::Encoder *)v11;
              IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, v17);
              IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v11, &v16);
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v9 + 16) + 32))(v9 + 16, &v18, 0);
              v13 = v18;
              v18 = 0;
              if (v13)
              {
                IPC::Encoder::~Encoder(v13, v12);
                WTF::fastFree(v14, v15);
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebRemoteFrameClient::bindRemoteAccessibilityFrames(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  int v19;
  void *v20;
  WTF *v21;
  void *v22;
  uint64_t *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  void *v27;
  int v28;
  WTF *v29;
  WebKit::WebRemoteFrameClient *v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  int *v36[3];
  uint64_t *v37;
  WTF *v38;
  uint64_t v39;
  int v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[2];
  WTF *v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t *v50;
  int v51;
  IPC::Encoder *v52;
  uint64_t v53;

  v45[0] = a3;
  v45[1] = a4;
  v44 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v13 = *(_QWORD **)(*(_QWORD *)(v11 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
          {
            v14 = *(_QWORD *)(v13[2] + 8);
            if (v14)
            {
              CFRetain(*(CFTypeRef *)(v14 - 8));
              v36[0] = &v44;
              v36[1] = (int *)v45;
              v36[2] = a5;
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 16) + 56))(v14 + 16);
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 16) + 48))(v14 + 16);
              if (!v16)
              {
                LOBYTE(v37) = 3;
                v41 = 1;
                goto LABEL_22;
              }
              v17 = (WTF *)v16;
              v53 = 0;
              IPC::Connection::createSyncMessageEncoder(3654, v15, &v53, (uint64_t *)&v52);
              IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v52, v36);
              IPC::Connection::sendSyncMessage((uint64_t)v17, v53, (uint64_t *)&v52, 0, (uint64_t)&v50, INFINITY);
              if (v51)
              {
                if (v51 == 1)
                {
                  LOBYTE(v37) = (_BYTE)v50;
                  v18 = 1;
                  v41 = 1;
                  v19 = 1;
LABEL_18:
                  ((void (*)(WTF **, uint64_t **))off_1E34F0830[v19])(&v46, &v50);
LABEL_19:
                  v24 = v52;
                  v52 = 0;
                  if (v24)
                  {
                    IPC::Encoder::~Encoder(v24, v22);
                    WTF::fastFree(v25, v26);
                  }
                  if (!v18)
                  {
                    v38 = 0;
                    v39 = 0;
                    v31 = 0;
                    v32 = 0;
                    v33 = v6;
                    if (v6)
                    {
                      v32 = v6;
                      v31 = (WTF *)WTF::fastMalloc((WTF *)v6);
                      memcpy(v31, v17, v6);
                    }
                    WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v31);
                    v29 = v31;
                    if (v31)
                    {
                      v31 = 0;
                      v32 = 0;
                      WTF::fastFree(v29, v27);
                    }
                    if (v17)
                    {
LABEL_30:
                      WTF::fastFree(v17, v27);
                      v28 = v41;
                      if (v41 == -1)
                        goto LABEL_34;
                      goto LABEL_33;
                    }
                    v28 = 0;
LABEL_33:
                    ((void (*)(WTF **, uint64_t **))off_1E34F07D0[v28])(&v46, &v37);
LABEL_34:
                    CFRelease(*(CFTypeRef *)(v14 - 8));
                    return;
                  }
LABEL_22:
                  v34 = 0;
                  v35 = 0;
                  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v34);
                  v17 = v34;
                  if (v34)
                  {
                    v34 = 0;
                    LODWORD(v35) = 0;
                    goto LABEL_30;
                  }
                  v28 = 1;
                  goto LABEL_33;
                }
              }
              else
              {
                LOBYTE(v46) = 0;
                v49 = 0;
                IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v50, (uint64_t)&v46);
                if (!v49)
                {
                  LOBYTE(v37) = 13;
                  v18 = 1;
                  v41 = 1;
                  v19 = v51;
                  if (v51 == -1)
                    goto LABEL_19;
                  goto LABEL_18;
                }
                v19 = v51;
                if (!v51)
                {
                  v18 = 0;
                  v23 = v50;
                  v50 = 0;
                  v17 = v46;
                  v6 = HIDWORD(v47);
                  v37 = v23;
                  v38 = v46;
                  v39 = v47;
                  v40 = v48;
                  v41 = 0;
                  goto LABEL_18;
                }
              }
              v30 = (WebKit::WebRemoteFrameClient *)std::__throw_bad_variant_access[abi:sn180100]();
              WebKit::WebRemoteFrameClient::closePage(v30);
              return;
            }
          }
        }
      }
    }
  }
  v42 = 0;
  v43 = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v42);
  v21 = v42;
  if (v42)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    WTF::fastFree(v21, v20);
  }
}

uint64_t WebKit::WebRemoteFrameClient::closePage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5);
          if ((this & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
              return (uint64_t)WebKit::WebPage::sendClose((WebKit::WebPage *)(v6 - 16));
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebRemoteFrameClient::focus(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15[3];
  IPC::Encoder *v16;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = this;
          v6 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(_QWORD *))(*v6 + 1368))(v6);
          if ((this & 1) == 0)
          {
            v7 = *(_QWORD *)(v6[2] + 8);
            if (v7)
            {
              *(_OWORD *)v15 = *(_OWORD *)(*(_QWORD *)(v5 + 16) + 80);
              v9 = *(_QWORD *)(v7 + 16);
              v8 = v7 + 16;
              v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
              v11 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v11 = 1938;
              *(_QWORD *)(v11 + 8) = v10;
              *(_QWORD *)(v11 + 528) = v11 + 16;
              *(_QWORD *)(v11 + 536) = v11 + 16;
              *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v11 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
              v16 = (IPC::Encoder *)v11;
              IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, v15);
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v16, 0);
              this = (uint64_t)v16;
              v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v12);
                return WTF::fastFree(v13, v14);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebRemoteFrameClient::unfocus(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5);
          if ((this & 1) == 0)
          {
            v6 = *(_QWORD *)(v5[2] + 8);
            if (v6)
            {
              v8 = *(_QWORD *)(v6 + 16);
              v7 = v6 + 16;
              v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
              v10 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v10 = 2035;
              *(_QWORD *)(v10 + 8) = v9;
              *(_QWORD *)(v10 + 528) = v10 + 16;
              *(_QWORD *)(v10 + 536) = v10 + 16;
              *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v10 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
              v14 = (IPC::Encoder *)v10;
              *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = 0;
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v14, 0);
              this = (uint64_t)v14;
              v14 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v11);
                return WTF::fastFree(v12, v13);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebRemoteFrameClient::documentURLForConsoleLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];
  uint64_t v24[3];
  IPC::Encoder *v25;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v8 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
    && (v9 = *(_QWORD *)(v8[2] + 8)) != 0)
  {
    *(_OWORD *)v24 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    v11 = *(_QWORD *)(v9 + 16);
    v10 = v9 + 16;
    v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1927;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v25 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, v24);
    v14 = *a2;
    *a2 = 0;
    v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v15 = &off_1E34F0998;
    *((_QWORD *)v15 + 1) = v14;
    v23[0] = v15;
    v23[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v10 + 40))(v10, &v25, v23, 0);
    v17 = v23[0];
    v23[0] = 0;
    if (v17)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
    result = v25;
    v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    v23[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v23);
    v21 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebRemoteFrameClient::applyWebsitePolicies(unsigned int *result, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*((_QWORD *)result + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 144))
      {
        v5 = (unsigned int *)(v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WTF::String::operator=((WTF::StringImpl **)(v3 + 280), (WTF::StringImpl *)(a2 + 20));
        WTF::String::operator=((WTF::StringImpl **)(v3 + 288), (WTF::StringImpl *)(a2 + 24));
        *(_WORD *)(v3 + 304) = a2[36];
        WTF::String::operator=((WTF::StringImpl **)(v3 + 296), (WTF::StringImpl *)(a2 + 28));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::WebRemoteFrameClient::applyWebsitePolicies(uint64_t a1, _WORD *a2)
{
  return WebKit::WebRemoteFrameClient::applyWebsitePolicies((unsigned int *)(a1 - 8), a2);
}

void WebKit::WebResourceLoadObserver::~WebResourceLoadObserver(WebKit::WebResourceLoadObserver *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
    {
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E34F0A10;
      v11 = v10;
      WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(this, (uint64_t *)&v11);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  v4 = *((_QWORD *)this + 12);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  *((_QWORD *)this + 4) = off_1E34B3740;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  v9 = *((_QWORD *)this + 2);
  if (v9)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v9, v7);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebResourceLoadObserver::~WebResourceLoadObserver(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebKit::WebResourceLoadObserver::hasStatistics(WebKit::WebResourceLoadObserver *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34F0A38;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 263;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

WTF::StringImpl *WebKit::WebResourceLoadObserver::statisticsForURL@<X0>(WebKit::WebResourceLoadObserver *this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF **v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WebCore::ResourceLoadStatistics *v13;
  int v14;
  WTF::StringImpl *result;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  WebCore::RegistrableDomain::RegistrableDomain(&v22, a2);
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = WTF::ASCIICaseInsensitiveHash::hash(v22, v6) & v8;
    v10 = (WTF **)(v7 + 16 * v9);
    v13 = 0;
    if ((WTF::equal(*v10, 0, v11) & 1) == 0)
    {
      v14 = 1;
      while (*v10 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v10, v22, v12) & 1) == 0)
      {
        v9 = ((_DWORD)v9 + v14) & v8;
        v10 = (WTF **)(v7 + 16 * v9);
        ++v14;
        if ((WTF::equal(*v10, 0, v12) & 1) != 0)
          goto LABEL_7;
      }
      v13 = *(WebCore::ResourceLoadStatistics **)(v7 + 16 * v9 + 8);
    }
  }
  else
  {
LABEL_7:
    v13 = 0;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (v13)
        goto LABEL_12;
      goto LABEL_18;
    }
    *(_DWORD *)result -= 2;
  }
  if (v13)
  {
LABEL_12:
    WTF::URL::host(a2);
    if ((v16 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    WebCore::ResourceLoadStatistics::toString(v13);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Statistics for ", 16, (uint64_t *)&v21, (uint64_t)":\n", 3, (uint64_t *)&v20, a3);
    v18 = v20;
    v20 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
LABEL_18:
  v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v19 += 2;
  *a3 = v19;
  return result;
}

uint64_t WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::WebResourceLoadObserver::takeStatistics(void)::$_0,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  uint64_t v15[25];
  _QWORD v16[2];

  result = 0;
  v6 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*a2)
  {
    v13 = *(_DWORD *)(*a2 - 12);
    if (v13)
    {
      if (v13 >= 0x147AE15)
      {
        __break(0xC471u);
        return result;
      }
      v14 = 200 * v13;
      v6 = WTF::fastMalloc((WTF *)(200 * v13));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0xC8;
      *(_QWORD *)a1 = v6;
      result = *a2;
    }
    else
    {
      v6 = 0;
      result = *a2;
    }
  }
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(result, (uint64_t)a2, a3);
  v16[0] = result;
  v16[1] = v7;
  if (*a2)
    v8 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
  else
    v8 = 0;
  if (v8 != result)
  {
    v9 = 1;
    do
    {
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics((uint64_t)v15, *(uint64_t **)(result + 8));
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v6 + 200 * (v9 - 1), v15);
      *(_DWORD *)(a1 + 12) = v9;
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v15, v10);
      v16[0] += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v16, v11, v12);
      result = v16[0];
      ++v9;
    }
    while (v16[0] != v8);
  }
  return result;
}

WTF::StringImpl **WebKit::WebResourceLoadObserver::clearState(WebKit::WebResourceLoadObserver *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **result;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  }
  result = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (result)
  {
    *((_QWORD *)this + 3) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::hasHadUserInteraction(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 11, a2);
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logFontLoad(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2, WTF::StringImpl **a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WebKit::WebResourceLoadObserver *v10;
  WTF *v11;
  const WTF::StringImpl *v12;
  WTF *v13;
  uint64_t *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _BYTE v20[16];
  unsigned __int8 v21;
  WTF::StringImpl *v22;

  if (!*((_BYTE *)this + 8))
  {
    v4 = *((_QWORD *)a2 + 66);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_DWORD **)(v6 + 8);
          if (v7)
          {
            v10 = this;
            ++*v7;
            WebCore::RegistrableDomain::RegistrableDomain(&v22, (const WebCore::Document *)((char *)a2 + 736));
            v11 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v10, &v22);
            v13 = v11;
            if ((a4 & 1) != 0)
              v14 = (uint64_t *)((char *)v11 + 160);
            else
              v14 = (uint64_t *)((char *)v11 + 152);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v14, a3, v12, (uint64_t)v20);
            v15 = v21;
            WebCore::RegistrableDomain::RegistrableDomain(&v19, (const WTF::URL *)(v7 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v13 + 18, &v19, (uint64_t)v20);
            if (v21 | v15)
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v10);
            v17 = v19;
            v19 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v22;
            v22 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v16);
              else
                *(_DWORD *)v18 -= 2;
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v7);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logCanvasRead(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WebKit::WebResourceLoadObserver *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BYTE v11[24];
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (!*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)a2 + 66);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(_DWORD **)(v4 + 8);
          if (v5)
          {
            v6 = this;
            ++*v5;
            WebCore::RegistrableDomain::RegistrableDomain(&v13, (const WebCore::Document *)((char *)a2 + 736));
            v7 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v6, &v13);
            WebCore::RegistrableDomain::RegistrableDomain(&v12, (const WTF::URL *)(v5 + 42));
            *((_BYTE *)v7 + 176) = 1;
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v7 + 18, &v12, (uint64_t)v11);
            if (v11[16])
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v6);
            v9 = v12;
            v12 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v8);
              else
                *(_DWORD *)v9 -= 2;
            }
            v10 = v13;
            v13 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v8);
              else
                *(_DWORD *)v10 -= 2;
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v5);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logCanvasWriteOrMeasure(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WebKit::WebResourceLoadObserver *v8;
  WTF *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BYTE v14[24];
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (!*((_BYTE *)this + 8))
  {
    v3 = *((_QWORD *)a2 + 66);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            v8 = this;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain(&v16, (const WebCore::Document *)((char *)a2 + 736));
            v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v16);
            WebCore::RegistrableDomain::RegistrableDomain(&v15, (const WTF::URL *)(v6 + 42));
            v10 = WebCore::CanvasActivityRecord::recordWrittenOrMeasuredText((WTF *)((char *)v9 + 168), a3);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v9 + 18, &v15, (uint64_t)v14);
            if (v14[16] || v10)
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            v12 = v15;
            v15 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v11);
              else
                *(_DWORD *)v12 -= 2;
            }
            v13 = v16;
            v16 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v11);
              else
                *(_DWORD *)v13 -= 2;
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logNavigatorAPIAccessed(WebKit::WebResourceLoadObserver *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WebKit::WebResourceLoadObserver *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _BYTE v16[24];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (!*((_BYTE *)result + 8))
  {
    v3 = *(_QWORD *)(a2 + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            v8 = result;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain(&v18, (const WTF::URL *)(a2 + 736));
            v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v18);
            v10 = v9;
            v11 = *((_QWORD *)v9 + 23);
            v12 = v11 & a3;
            if ((v11 & a3) == 0)
              *((_QWORD *)v9 + 23) = v11 | a3;
            WebCore::RegistrableDomain::RegistrableDomain(&v17, (const WTF::URL *)(v6 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v10 + 18, &v17, (uint64_t)v16);
            if (!v12 || v16[16])
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            v14 = v17;
            v17 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = v18;
            v18 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v13);
              else
                *(_DWORD *)v15 -= 2;
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return result;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logScreenAPIAccessed(WebKit::WebResourceLoadObserver *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WebKit::WebResourceLoadObserver *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _BYTE v16[24];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (!*((_BYTE *)result + 8))
  {
    v3 = *(_QWORD *)(a2 + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            v8 = result;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain(&v18, (const WTF::URL *)(a2 + 736));
            v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v18);
            v10 = v9;
            v11 = *((_QWORD *)v9 + 24);
            v12 = v11 & a3;
            if ((v11 & a3) == 0)
              *((_QWORD *)v9 + 24) = v11 | a3;
            WebCore::RegistrableDomain::RegistrableDomain(&v17, (const WTF::URL *)(v6 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v10 + 18, &v17, (uint64_t)v16);
            if (!v12 || v16[16])
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            v14 = v17;
            v17 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = v18;
            v18 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v13);
              else
                *(_DWORD *)v15 -= 2;
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::logWebSocketLoading(uint64_t this, const WTF::URL *a2, const WTF::URL *a3)
{
  WebKit::WebResourceLoadObserver *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  _BYTE v17[24];
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if (!*(_BYTE *)(this + 8))
  {
    v5 = (WebKit::WebResourceLoadObserver *)this;
    v6 = (unsigned __int8 *)WTF::URL::host(a2);
    v8 = v7;
    this = WTF::URL::host(a3);
    if ((_DWORD)v8)
    {
      this = WTF::operator==(v6, v8, (unsigned __int8 *)this, v9);
      if ((this & 1) == 0)
      {
        WebCore::RegistrableDomain::RegistrableDomain(&v19, a2);
        WebCore::RegistrableDomain::RegistrableDomain(&v18, a3);
        v11 = WTF::equal(v19, v18, v10);
        if ((v11 & 1) == 0)
        {
          WTF::WallTime::now((WTF::WallTime *)v11);
          WebCore::ResourceLoadStatistics::reduceTimeResolution();
          v14 = v13;
          v15 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v19);
          *((_QWORD *)v15 + 1) = v14;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v15 + 13, &v18, (uint64_t)v17);
          WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
        }
        v16 = v18;
        v18 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v12);
          else
            *(_DWORD *)v16 -= 2;
        }
        this = (uint64_t)v19;
        v19 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebResourceLoadObserver::logUserInteractionWithReducedTimeResolution(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2)
{
  const WTF::URL *v4;
  uint64_t result;
  WTF::StringImpl **v6;
  double v7;
  double v8;
  uint64_t *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  WebKit::WebResourceLoadObserver *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  const WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebKit::WebProcess *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WebKit::WebProcess *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  void *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  NSObject *v72;
  char *v73;
  void *v74;
  WTF *v75;
  char *v76;
  void *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WebKit::WebProcess *v81;
  WebKit::WebProcess *v82;
  WTF *v83;
  WebKit::WebResourceLoadObserver *v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _BYTE buf[24];
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = (const WebCore::Document *)((char *)a2 + 736);
  result = WTF::URL::protocolIs();
  if ((result & 1) != 0)
    return result;
  result = WTF::URL::protocolIs();
  if ((result & 1) != 0 || !*(_QWORD *)v4 || !*(_DWORD *)(*(_QWORD *)v4 + 4))
    return result;
  v6 = WebCore::RegistrableDomain::RegistrableDomain(&v85, v4);
  WTF::WallTime::now((WTF::WallTime *)v6);
  WebCore::ResourceLoadStatistics::reduceTimeResolution();
  v8 = v7;
  v9 = (uint64_t *)((char *)this + 24);
  if (v7 != WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v85))
  {
    v11 = *v9;
    v84 = this;
    if (*v9
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 3, 0), (v11 = *v9) != 0))
    {
      v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = WTF::ASCIICaseInsensitiveHash::hash(v85, v10) & v12;
    v14 = v11 + 16 * v13;
    if ((WTF::equal(*(WTF **)v14, 0, v15) & 1) == 0)
    {
      v17 = 0;
      v18 = 1;
      do
      {
        v19 = (_QWORD *)v14;
        if (*(_QWORD *)v14 != -1)
        {
          v19 = v17;
          if (WTF::equalIgnoringASCIICase(*(WTF **)v14, v85, v16))
          {
            *(double *)(v11 + 16 * v13 + 8) = v8;
            v21 = v84;
            goto LABEL_31;
          }
        }
        v13 = ((_DWORD)v13 + v18) & v12;
        v14 = v11 + 16 * v13;
        ++v18;
        v17 = v19;
      }
      while (!WTF::equal(*(WTF **)v14, 0, v16));
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        v14 = (uint64_t)v19;
      }
    }
    WTF::String::operator=((WTF::StringImpl **)v14, (WTF::StringImpl *)&v85);
    *(double *)(v14 + 8) = v8;
    v20 = *v9;
    v21 = v84;
    if (*v9)
      v22 = *(_DWORD *)(v20 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v20 - 12) = v22;
    v23 = *v9;
    if (*v9)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_31;
    }
    else if (3 * v26 > 4 * v25)
    {
LABEL_31:
      if (!*((_BYTE *)v21 + 8))
      {
        v27 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v21, &v85);
        *((_BYTE *)v27 + 16) = 1;
        *((double *)v27 + 1) = v8;
        *((double *)v27 + 3) = v8;
      }
      v28 = *((_QWORD *)a2 + 66);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = (unsigned int *)(v29 + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          v32 = *(_QWORD *)(v29 + 160);
          if (v32)
          {
            v33 = *(_QWORD *)(v32 + 8);
            if (v33)
            {
              if (!*(_BYTE *)(v33 + 144))
              {
                v34 = (unsigned int *)(v33 + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 + 1, v34));
                v36 = *(_QWORD *)(v33 + 296);
                if (v36)
                {
                  v37 = *(_DWORD *)(v36 + 24) + 2;
                  *(_DWORD *)(v36 + 24) = v37;
                  v38 = *(_QWORD *)(v36 + 528);
                  if (v38)
                  {
                    v39 = *(_QWORD *)(v38 + 8);
                    if (v39)
                    {
                      v40 = *(_QWORD *)(v39 + 24);
                      if (v40)
                      {
                        v41 = *(_QWORD *)(v40 + 8);
                        if (v41)
                        {
                          v42 = *(_QWORD **)(*(_QWORD *)(v41 + 48) + 16);
                          if (((*(uint64_t (**)(_QWORD *))(*v42 + 1368))(v42) & 1) != 0)
                          {
                            v44 = 0;
                          }
                          else
                          {
                            v43 = *(_QWORD *)(v42[2] + 8);
                            if (v43)
                              v44 = v43 - 16;
                            else
                              v44 = 0;
                          }
                          CFRetain(*(CFTypeRef *)(v44 + 8));
                          v45 = *(_DWORD **)(v36 + 736);
                          if (v45)
                            *v45 += 2;
                          *(_QWORD *)buf = v45;
                          *(_OWORD *)&buf[8] = *(_OWORD *)(v36 + 744);
                          v90 = *(_OWORD *)(v36 + 760);
                          WebCore::RegistrableDomain::RegistrableDomain(&v87, (const WTF::URL *)buf);
                          if ((WTF::equal(v85, v87, v46) & 1) == 0
                            && (WebCore::Document::hasRequestedPageSpecificStorageAccessWithUserInteraction() & 1) == 0
                            && (WTF::URL::isAboutBlank((WTF::URL *)buf) & 1) == 0)
                          {
                            {
                              v48 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
                            }
                            else
                            {
                              v82 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                              v48 = WebKit::WebProcess::WebProcess(v82);
                              WebKit::WebProcess::singleton(void)::process = (uint64_t)v48;
                            }
                            v49 = WebKit::WebProcess::ensureNetworkProcessConnection(v48);
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v86, *(unsigned __int8 ***)(v49 + 24));
                            v83 = v86;
                            v50 = *(_QWORD *)(v44 + 40);
                            v51 = WTF::fastMalloc((WTF *)0x240);
                            *(_WORD *)v51 = 261;
                            *(_QWORD *)(v51 + 8) = 0;
                            *(_QWORD *)(v51 + 528) = v51 + 16;
                            *(_QWORD *)(v51 + 536) = v51 + 16;
                            *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
                            *(_OWORD *)(v51 + 560) = 0u;
                            IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
                            v88 = (WTF::StringImpl *)v51;
                            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v51, (uint64_t *)&v85);
                            *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 8uLL, 8) = v50;
                            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v51, (uint64_t *)&v87);
                            IPC::Connection::sendMessageImpl((uint64_t)v83, (uint64_t *)&v88, 0, 0);
                            v53 = v88;
                            v88 = 0;
                            if (v53)
                            {
                              IPC::Encoder::~Encoder(v53, v52);
                              WTF::fastFree(v54, v55);
                            }
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v86);
                            WebKit::WebPage::addDomainWithPageLevelStorageAccess((WebKit::WebPage *)v44, &v87, &v85);
                            WebCore::Document::setHasRequestedPageSpecificStorageAccessWithUserInteraction();
                            v21 = v84;
                          }
                          v56 = v87;
                          v87 = 0;
                          if (v56)
                          {
                            if (*(_DWORD *)v56 == 2)
                              WTF::StringImpl::destroy(v56, v47);
                            else
                              *(_DWORD *)v56 -= 2;
                          }
                          v57 = *(WTF::StringImpl **)buf;
                          *(_QWORD *)buf = 0;
                          if (v57)
                          {
                            if (*(_DWORD *)v57 == 2)
                              WTF::StringImpl::destroy(v57, v47);
                            else
                              *(_DWORD *)v57 -= 2;
                          }
                          CFRelease(*(CFTypeRef *)(v44 + 8));
                          v37 = *(_DWORD *)(v36 + 24);
                        }
                      }
                    }
                  }
                  v58 = v37 - 2;
                  if (v58)
                  {
                    *(_DWORD *)(v36 + 24) = v58;
                  }
                  else if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v36);
                  }
                }
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v34);
              }
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v30);
        }
      }
      {
        v59 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v81 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v59 = WebKit::WebProcess::WebProcess(v81);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v59;
      }
      v60 = WebKit::WebProcess::ensureNetworkProcessConnection(v59);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v88, *(unsigned __int8 ***)(v60 + 24));
      v61 = v88;
      v62 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v62 = 238;
      *(_QWORD *)(v62 + 8) = 0;
      *(_QWORD *)(v62 + 528) = v62 + 16;
      *(_QWORD *)(v62 + 536) = v62 + 16;
      *(_OWORD *)(v62 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v62 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v62);
      *(_QWORD *)buf = v62;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v62, (uint64_t *)&v85);
      IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)buf, 0, 0);
      v64 = *(IPC::Encoder **)buf;
      *(_QWORD *)buf = 0;
      if (v64)
      {
        IPC::Encoder::~Encoder(v64, v63);
        WTF::fastFree(v65, v66);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (WebKit::WebResourceLoadObserver::shouldLogUserInteraction)
      {
        v67 = *((_QWORD *)v21 + 13) + 1;
        *((_QWORD *)v21 + 13) = v67;
        if (*(_QWORD *)v4 && (WTF::StringImpl::replace(), (v68 = *(WTF::StringImpl **)buf) != 0))
        {
          WTF::StringImpl::replace();
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v69);
          else
            *(_DWORD *)v68 -= 2;
        }
        else
        {
          v88 = 0;
        }
        if (v85 && (WTF::StringImpl::replace(), (v70 = *(WTF::StringImpl **)buf) != 0))
        {
          WTF::StringImpl::replace();
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v71);
          else
            *(_DWORD *)v70 -= 2;
        }
        else
        {
          v87 = 0;
        }
        v72 = qword_1ECE71758;
        if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v86)
            v73 = (char *)v86 + 16;
          else
            v73 = 0;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v67;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v73;
          _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu: { \"url\": \"%{public}s\",", buf, 0x16u);
          v75 = v86;
          v86 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 1)
              WTF::fastFree(v75, v74);
            else
              --*(_DWORD *)v75;
          }
          v72 = qword_1ECE71758;
        }
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v86)
            v76 = (char *)v86 + 16;
          else
            v76 = 0;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v67;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v76;
          _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu:   \"domain\" : \"%{public}s\",", buf, 0x16u);
          v78 = v86;
          v86 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 1)
              WTF::fastFree(v78, v77);
            else
              --*(_DWORD *)v78;
          }
          v72 = qword_1ECE71758;
        }
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v67;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v8;
          _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu:   \"until\" : %f }", buf, 0x16u);
        }
        v79 = v87;
        v87 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v10);
          else
            *(_DWORD *)v79 -= 2;
        }
        v80 = v88;
        v88 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v10);
          else
            *(_DWORD *)v80 -= 2;
        }
      }
      goto LABEL_6;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9, v14);
    goto LABEL_31;
  }
LABEL_6:
  result = (uint64_t)v85;
  v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebResourceLoadObserver::logSubresourceLoadingForTesting(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3, int a4)
{
  WTF *v7;
  uint64_t v8;
  _BYTE v9[24];

  if (!*((_BYTE *)this + 8))
  {
    v7 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(this, a3);
    WTF::WallTime::now(v7);
    WebCore::ResourceLoadStatistics::reduceTimeResolution();
    *((_QWORD *)v7 + 1) = v8;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v7 + 13, a2, (uint64_t)v9);
    if (a4)
    {
      WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(this);
    }
    else if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
    }
  }
}

uint64_t WebKit::WebResourceLoadObserver::hasCrossPageStorageAccess(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 12, a3);
  v6 = *((_QWORD *)this + 12);
  if (v6)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 == v5)
    return 0;
  else
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v5 + 8), a2);
}

uint64_t WebKit::WebResourceLoadObserver::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v3;
  uint64_t v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  WTF::ASCIICaseInsensitiveHash **v15;
  WTF::ASCIICaseInsensitiveHash **v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  const WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  _BYTE v53[24];
  _QWORD v54[2];

  v3 = a3;
  v6 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v9 = v6;
  v54[0] = v6;
  v54[1] = v7;
  if (*a2)
    v10 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
  else
    v10 = 0;
  if (v10 == v6)
  {
LABEL_4:
    v11 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v13 = (uint64_t *)(a1 + 96);
  while (1)
  {
    v14 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v14)
      break;
LABEL_70:
    v54[0] = v9 + 24;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v54, (uint64_t)v7, v8);
    v9 = v54[0];
    if (v54[0] == v10)
      goto LABEL_4;
  }
  v49 = v10;
  v50 = v3;
  v15 = *(WTF::ASCIICaseInsensitiveHash ***)(v9 + 8);
  v16 = &v15[v14];
  while (1)
  {
    v17 = *v13;
    if (*v13
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, 0), (v17 = *v13) != 0))
    {
      v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v9, v7) & v18;
    v20 = v17 + 16 * v19;
    if ((WTF::equal(*(WTF **)v20, 0, v21) & 1) == 0)
    {
      v45 = 0;
      v46 = 1;
      do
      {
        if (*(_QWORD *)v20 == -1)
        {
          v45 = (_QWORD *)v20;
        }
        else if ((WTF::equalIgnoringASCIICase(*(WTF **)v20, *(const WTF::StringImpl **)v9, v22) & 1) != 0)
        {
          goto LABEL_21;
        }
        v19 = (v19 + v46) & v18;
        v20 = v17 + 16 * v19;
        ++v46;
      }
      while (!WTF::equal(*(WTF **)v20, 0, v22));
      if (v45)
      {
        *v45 = 0;
        v45[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        v20 = (uint64_t)v45;
      }
    }
    WTF::String::operator=((WTF::StringImpl **)v20, (WTF::StringImpl *)v9);
    v24 = *(WTF::StringImpl ***)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v24)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v23);
    v25 = *v13;
    if (*v13)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v13;
    if (*v13)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 <= 0x400)
    {
      if (3 * v30 > 4 * v29)
        goto LABEL_21;
LABEL_20:
      v20 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, v20);
      goto LABEL_21;
    }
    if (v30 <= 2 * v29)
      goto LABEL_20;
LABEL_21:
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v20 + 8), v15, (uint64_t)v53);
    WebCore::NetworkStorageSession::findAdditionalLoginDomain();
    if (v52)
      break;
LABEL_39:
    if (++v15 == v16)
    {
      v9 = v54[0];
      v10 = v49;
      v3 = v50;
      goto LABEL_70;
    }
  }
  v31 = *v13;
  if (*v13
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, 0), (v31 = *v13) != 0))
  {
    v32 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v9, v7) & v32;
  v34 = v31 + 16 * v33;
  if ((WTF::equal(*(WTF **)v34, 0, v35) & 1) == 0)
  {
    v47 = 0;
    v48 = 1;
    do
    {
      if (*(_QWORD *)v34 == -1)
      {
        v47 = (_QWORD *)v34;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*(WTF **)v34, *(const WTF::StringImpl **)v9, v36);
        if ((result & 1) != 0)
          goto LABEL_34;
      }
      v33 = (v33 + v48) & v32;
      v34 = v31 + 16 * v33;
      ++v48;
    }
    while (!WTF::equal(*(WTF **)v34, 0, v36));
    if (v47)
    {
      *v47 = 0;
      v47[1] = 0;
      --*(_DWORD *)(*v13 - 16);
      v34 = (uint64_t)v47;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v34, (WTF::StringImpl *)v9);
  result = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = 0;
  if (result)
    result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v37);
  v38 = *v13;
  if (*v13)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v13;
  if (*v13)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 <= 2 * v42)
    {
LABEL_33:
      result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, v34);
      v34 = result;
    }
  }
  else if (3 * v43 <= 4 * v42)
  {
    goto LABEL_33;
  }
LABEL_34:
  if (v52)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v34 + 8), &v51, (uint64_t)v53);
    if (v52)
    {
      v44 = v51;
      v51 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v7);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

void WebKit::WebPlatformStrategies::~WebPlatformStrategies(WebKit::WebPlatformStrategies *this)
{
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::WebPlatformStrategies::~WebPlatformStrategies(WebKit::WebPlatformStrategies *this)
{
  JUMPOUT(0x19AEB936CLL);
}

{
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebProgressTrackerClient::~WebProgressTrackerClient(WebKit::WebProgressTrackerClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34F0478;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34F0478;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18GetPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (unsigned int *)a2[3];
  a2[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (WTF::StringImpl *)a2[2];
  a2[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;

  v3 = (uint64_t)a2 + 8;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 24, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v4);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18GetPasteboardColorEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  IPC::Decoder **v2;
  IPC::Decoder *v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = a2;
  v3 = a2[1];
  if (((unint64_t)v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      v2 = a2;
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16GetPasteboardURLEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18AddPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18SetPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16SetPasteboardURLEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18SetPasteboardColorEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16GetNumberOfFilesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy15WriteCustomDataEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2)
{
  if (a2[24])
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 8), a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

void WebCore::PopupMenuStyle::~PopupMenuStyle(WebCore::PopupMenuStyle *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF *v4;
  void *v5;
  unsigned int *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (*((_BYTE *)this + 320) == 11)
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 316));
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v4 = (WTF *)MEMORY[0x19AEAF0B8]();
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*v3;
    }
  }
  if (*((_BYTE *)this + 228) == 11)
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 224));
  if (*((_BYTE *)this + 220) == 11)
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 216));
  v6 = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(v6 + 2), (WTF::StringImpl *)&v6[2 * v6[1] + 2]);
      WTF::fastFree((WTF *)v6, v7);
    }
    else
    {
      --*v6;
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v14);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF *)*((_QWORD *)this + 6);
  if (v17)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v17, v15);
  }
  v18 = (WTF *)*((_QWORD *)this + 4);
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, v15);
  }
  v19 = *((_QWORD *)this + 2);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v15);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v15);
    }
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v15);
    }
  }
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        if (*(_QWORD *)(v4 + 8))
        {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v4 + 8), a2);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceLoadStatistics **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::ResourceLoadStatistics **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebCore::ResourceLoadStatistics *)-1)
      {
        std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v4, 0);
        v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebCore::ResourceLoadStatistics *std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](WebCore::ResourceLoadStatistics **a1, WTF::StringImpl *a2)
{
  WebCore::ResourceLoadStatistics *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(result, a2);
    return (WebCore::ResourceLoadStatistics *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (WTF::StringImpl **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v17 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v17);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 16 * v23));
          v24 = v18 + 16 * v23;
          v26 = (_QWORD *)(v24 + 8);
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v10);
            v27 = *(WTF::StringImpl **)v24;
            *(_QWORD *)v24 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v24 = 0;
          }
          v28 = *v16;
          *v16 = 0;
          *(_QWORD *)v24 = v28;
          v29 = v6 + 16 * v13;
          *v26 = 0;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *v26 = v30;
          v31 = *(_QWORD *)(v29 + 8);
          if (v31)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v10);
          v32 = *v16;
          *v16 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (v16 == a3)
            v14 = v24;
        }
        else
        {
          if (*(_QWORD *)(v6 + 16 * v13 + 8))
          {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(_QWORD *)(v6 + 16 * v13 + 8), v10);
            v17 = *v16;
          }
          *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int *WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  unsigned int *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 24 * (v11 & v9);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 24 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v15 + 8), (uint64_t)a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (uint64_t)result;
        v22 = *a1;
        if (*a1)
          LODWORD(v25) = *(_DWORD *)(v22 - 4);
        else
          LODWORD(v25) = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v22 + 24 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 4);
  else
    v21 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v20 + 24 * v21;
  *(_BYTE *)(a4 + 16) = 0;
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v8 + 24 * v14 + 8), (uint64_t)a3);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  WTF *result;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t result;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F07F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F07F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a2 || (v4 = *a2) == 0)
  {
LABEL_24:
    v16 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v8 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v8 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v11 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
          v11 = *a2;
          v8 = a2[1];
        }
      }
      else
      {
        v8 = 0;
        v11 = 0;
      }
    }
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (!v8)
        goto LABEL_14;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v8);
    }
    LODWORD(v8) = 0;
LABEL_14:
    LOWORD(v7) = 0;
    v10 = 0;
    goto LABEL_19;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v8 = v5;
    v11 = v4;
    goto LABEL_12;
  }
  if (!*v6)
  {
    v10 = 0;
    goto LABEL_10;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    v8 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      v8 = 0;
      v27 = *a2;
      v28 = a2[1];
      v29 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v9 = 0;
      if (v29)
      {
        if (v28)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
          v9 = *a2;
          v8 = a2[1];
        }
      }
    }
  }
  else
  {
    a2[2] = (uint64_t)(v6 + 2);
    v7 = v6[1];
    v8 = v5;
    v9 = v4;
    if (v7 <= 2)
    {
      v10 = 256;
LABEL_10:
      LODWORD(v8) = 0x10000;
      goto LABEL_19;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15)
  {
    if (!v8)
      goto LABEL_18;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v9, v8);
  }
  LODWORD(v8) = 0;
LABEL_18:
  LOWORD(v7) = 0;
  v10 = 256;
LABEL_19:
  if (!WORD1(v8))
  {
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        v24 = *a2;
        v25 = a2[1];
        v26 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v26)
        {
          if (v25)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
        }
      }
    }
    goto LABEL_24;
  }
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, ((unsigned __int16)(v7 | v8) | (unsigned __int16)v10) & 0x1FF);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34F0818;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0818;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::call(_QWORD *result, __int16 a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = result[1];
  if (v2)
  {
    v3 = result;
    result = *(_QWORD **)(v2 + 8);
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      if ((a2 & 0xFF00) == 0 || (_DWORD)result != a2)
      {
        v5 = v3[1];
        if (v5)
        {
          result = *(_QWORD **)(v5 + 8);
          if ((a2 & 0xFF00) != 0)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 24))(result, a2);
        }
        else
        {
          result = 0;
          if ((a2 & 0xFF00) != 0)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 24))(result, a2);
        }
        __break(1u);
      }
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2[2]);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, *(uint64_t **)(a2 + 16));
}

char *IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t *v4;

  v4 = *a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v4 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2[2]);
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2[3]);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v13;
  unsigned __int8 v14;

  IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>(a1, &v13);
  if (*(unsigned __int8 *)(a2 + 16) == v14)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v5 = v13;
      *(_QWORD *)&v13 = 0;
      v6 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v5;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
      v9 = *((_QWORD *)&v13 + 1);
      *((_QWORD *)&v13 + 1) = 0;
      v10 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v4);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    v7 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v11 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v4);
      else
        *(_DWORD *)v11 -= 2;
    }
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    v8 = v13;
    v13 = 0uLL;
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v4);
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PasteboardItemInfo>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::decode(a2, a2, a1);
  if (!*(_BYTE *)(a1 + 120))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;

  v3 = WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  v8 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v8;
  result = *(__n128 *)(v3 + 56);
  v10 = *(_OWORD *)(v3 + 72);
  *(_WORD *)(v4 + 88) = *(_WORD *)(v3 + 88);
  *(_OWORD *)(v4 + 72) = v10;
  *(__n128 *)(v4 + 56) = result;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  v11 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v4 + 96) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 104);
  *(_DWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v4 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 108);
  *(_DWORD *)(v3 + 108) = 0;
  *(_DWORD *)(v4 + 108) = v11;
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(v3 + 112);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x19763B61CLL);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (void *)(*(_QWORD *)result + 120 * *(unsigned int *)(result + 12));
    v5 = 120 * a2;
    v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  void *v16;

  if ((void *)result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v8 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 40);
      *(_DWORD *)(v5 + 40) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 44);
      *(_DWORD *)(v5 + 44) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      v9 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(a3 + 48) = v9;
      v10 = *(_OWORD *)(v5 + 56);
      v11 = *(_OWORD *)(v5 + 72);
      *(_WORD *)(a3 + 88) = *(_WORD *)(v5 + 88);
      *(_OWORD *)(a3 + 72) = v11;
      *(_OWORD *)(a3 + 56) = v10;
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 104) = 0;
      v12 = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(a3 + 96) = v12;
      LODWORD(v12) = *(_DWORD *)(v5 + 104);
      *(_DWORD *)(v5 + 104) = 0;
      *(_DWORD *)(a3 + 104) = v12;
      LODWORD(v12) = *(_DWORD *)(v5 + 108);
      *(_DWORD *)(v5 + 108) = 0;
      *(_DWORD *)(a3 + 108) = v12;
      *(_BYTE *)(a3 + 112) = *(_BYTE *)(v5 + 112);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 96, a2);
      v14 = *(WTF::StringImpl **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 32, v13);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 16, v15);
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v16);
      v5 += 120;
      a3 += 120;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0850;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0850;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *result;
  uint64_t v14;
  _DWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  _DWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)&v14);
  if (!v24)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v2);
  if (v23)
  {
    if (v23 == 1)
    {
      v3 = v14;
      v4 = v15;
      if (v15)
        *v15 += 2;
      LOBYTE(v25) = v3;
      v26 = v4;
      v34 = 1;
      goto LABEL_13;
    }
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v5);
  }
  v25 = v14;
  v26 = v15;
  v27 = v16;
  v6 = v17;
  v15 = 0;
  v17 = 0;
  v28 = v6;
  v7 = v18;
  v18 = 0;
  v29 = v7;
  v8 = v19;
  v19 = 0;
  v30 = v8;
  v9 = v20;
  v20 = 0;
  v31 = v9;
  v10 = v21;
  v21 = 0;
  v32 = v10;
  v11 = v22;
  v22 = 0;
  v33 = v11;
  v34 = 0;
LABEL_13:
  v12 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v25);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v34 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34F0878[v34])(&v35, &v25);
  if (v24)
  {
    if (v23 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E34F0868[v23])(&v25, &v14);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  _OWORD v3[5];
  int v4;
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v5[0] = 0;
  v5[1] = 0;
  v6 = 0u;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v13 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F0878[v13])(&v14, v5);
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_((uint64_t)v5, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0898;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0898;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  char v8[8];
  _DWORD *v9;
  int v10;
  char v11;
  char v12[8];
  _DWORD *v13;
  int v14;
  char v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v2);
  if (v10)
  {
    if (v10 == 1)
    {
      v3 = v8[0];
      v4 = v9;
      if (v9)
        *v9 += 2;
      v12[0] = v3;
      v13 = v4;
      v14 = 1;
      goto LABEL_13;
    }
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  v14 = 0;
LABEL_13:
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v14 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E34F08C0[v14])(&v15, v12);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34F08B0[v10])(v12, v8);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34F08C0[v4])(&v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F08E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F08E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *result;
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v5);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v2);
  result = WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(v2, (uint64_t)v5);
  if (v8)
  {
    if (v7 != -1)
      return (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E34F08F8[v7])(&v4, &v6);
  }
  return result;
}

_QWORD *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  char v2;
  _BYTE v3[8];
  _BYTE v4[88];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[80] = 0;
  v5 = 0;
  result = WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34F08F8[v5])(&v2, v4);
  return result;
}

_QWORD *WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[8];
  _DWORD *v13;
  char v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_BYTE *)(a2 + 8);
      v5 = *(_DWORD **)(a2 + 16);
      if (v5)
        *v5 += 2;
      v12[0] = v4;
      v13 = v5;
      v15 = 1;
      v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v15 != -1)
        return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34F0908[v15])(&v10, v12);
    }
    else
    {
      v9 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(v9);
    }
  }
  else
  {
    v12[0] = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)v12, a2 + 8);
      v14 = 1;
    }
    v15 = 0;
    v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v11);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34F0908[v15])(&v10, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0928;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0928;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  char v8[8];
  _DWORD *v9;
  int v10;
  char v11;
  char v12[8];
  _DWORD *v13;
  int v14;
  char v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v2);
  if (v10)
  {
    if (v10 == 1)
    {
      v3 = v8[0];
      v4 = v9;
      if (v9)
        *v9 += 2;
      v12[0] = v3;
      v13 = v4;
      v14 = 1;
      goto LABEL_13;
    }
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  v14 = 0;
LABEL_13:
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v14 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E34F0950[v14])(&v15, v12);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34F0940[v10])(v12, v8);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34F0950[v4])(&v5, v3);
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1918;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1890;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebRemoteFrameClient::changeLocation(WebCore::FrameLoadRequest &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34F0970;
  MEMORY[0x19AEAF10C](a1 + 2);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebRemoteFrameClient::changeLocation(WebCore::FrameLoadRequest &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34F0970;
  MEMORY[0x19AEAF10C]((char *)a1 + 16);
  v3 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0998;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6[0];
    v6[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(uint64_t *a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[5];

  v5[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v5);
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadObserver::WebResourceLoadObserver(WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34F09E8;
  v4 = v2;
  WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0A38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0A38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  _QWORD v5[2];

  if (a1)
    v3 = *(unsigned int *)(a1 - 4);
  else
    v3 = 0;
  v5[0] = a2;
  v5[1] = a1 + 16 * v3;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
  return v5[0];
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::ASCIICaseInsensitiveHash *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v12 = v9;
  v13 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v14 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = v6;
    do
    {
      if (*(_QWORD *)v16 != -1)
      {
        if (WTF::equal(*(WTF **)v16, 0, v11))
        {
          v17 = *(WTF::StringImpl ***)(v16 + 8);
          if (v17)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v10);
          v18 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          v19 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v16);
          v20 = *(WTF::StringImpl ***)(v19 + 8);
          if (v20)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v10);
          v21 = *(WTF::StringImpl **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *(WTF::ASCIICaseInsensitiveHash **)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v19 = v22;
          *(_QWORD *)(v19 + 8) = 0;
          v23 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v19 + 8) = v23;
          v24 = *(WTF::StringImpl ***)(v16 + 8);
          if (v24)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v10);
          v25 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v10);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v16 == a3)
            v14 = v19;
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  WebKit::WebProcess *v5;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0xC4u, *(_QWORD *)(*((_QWORD *)this + 6) + 40));
  v4 = *((_QWORD *)this + 7);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  *((_QWORD *)this + 4) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v3);
  WebCore::ScreenOrientationManager::~ScreenOrientationManager(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this)
{
  WebKit::WebScreenOrientationManager::~WebScreenOrientationManager((WebKit::WebScreenOrientationManager *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebScreenOrientationManager::~WebScreenOrientationManager((WebKit::WebScreenOrientationManager *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

_QWORD *WebKit::WebScreenOrientationManager::currentOrientation(WebKit::WebScreenOrientationManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  unsigned __int16 v9;
  void *v10;
  int v11;
  uint64_t *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  char v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  int v23;
  uint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;
  char v28;

  if (*((_BYTE *)this + 73))
  {
    LOBYTE(v2) = *((_BYTE *)this + 72);
    return (_QWORD *)v2;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = v3[4];
  v3 += 4;
  v5 = (*(uint64_t (**)(_QWORD *))(v4 + 56))(v3);
  v6 = (*(uint64_t (**)(_QWORD *))(*v3 + 48))(v3);
  if (!v6)
  {
    LOBYTE(v21) = 3;
    v8 = 1;
    v23 = 1;
    if (PAL::deviceHasIPadCapability(0))
      LOBYTE(v2) = 2;
    else
      LOBYTE(v2) = 0;
LABEL_24:
    if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 7))
      *((_WORD *)this + 36) = v2 | 0x100;
    ((void (*)(uint64_t **, uint64_t **))off_1E34F0D78[v8])(&v24, &v21);
    return (_QWORD *)v2;
  }
  v2 = v6;
  v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3735, v5, &v27, (uint64_t *)&v26);
  IPC::Connection::sendSyncMessage(v2, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  v7 = v25;
  if (v25)
  {
    if (v25 == 1)
    {
      LOBYTE(v21) = (_BYTE)v24;
LABEL_15:
      v23 = v7;
      v11 = v7;
LABEL_16:
      ((void (*)(char *, uint64_t **))off_1E34F0DA8[v11])(&v28, &v24);
LABEL_17:
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v10);
        v13 = (IPC::Encoder *)WTF::fastFree(v14, v15);
      }
      if (PAL::deviceHasIPadCapability(v13))
        v16 = 2;
      else
        v16 = 0;
      v17 = v7 == 0;
      v8 = v7 != 0;
      if (!v17)
        LOBYTE(v2) = v16;
      goto LABEL_24;
    }
  }
  else
  {
    v9 = IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>(v24);
    if (v9 < 0x100u)
    {
      LOBYTE(v21) = 13;
      v7 = 1;
      v23 = 1;
      v11 = v25;
      if (v25 == -1)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (!v25)
    {
      LOBYTE(v2) = v9;
      v12 = v24;
      v24 = 0;
      v21 = v12;
      v22 = v9;
      goto LABEL_15;
    }
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebScreenOrientationManager::orientationDidChange(v19, v20);
}

_QWORD *WebKit::WebScreenOrientationManager::orientationDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(a1 + 72) = a2 | 0x100;
  v4 = a1 + 56;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 56), &v14);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

char *WebKit::WebScreenOrientationManager::lock(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  char *result;
  WTF *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  _QWORD v26[2];
  IPC::Encoder *v27;

  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2770;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v27 = (IPC::Encoder *)v9;
  v10 = *(_QWORD *)(v9 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v9 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v25 = *(void **)(v9 + 528);
    if (v25 != (void *)(v9 + 16))
      munmap(v25, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v13;
    *(_QWORD *)(v9 + 552) = v24;
    v14 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v13 = *(char **)(v9 + 528);
    v14 = *(_QWORD *)(v9 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v9 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
  *(_QWORD *)(v9 + 536) = v15 + 1;
  *v15 = a2;
  v16 = *a3;
  *a3 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34F0DC8;
  v17[1] = v16;
  v26[0] = v17;
  v26[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v27, v26, 0);
  v19 = v26[0];
  v26[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = (char *)v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    return (char *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebScreenOrientationManager::unlock(WebKit::WebScreenOrientationManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 6);
  v2 = v1[4];
  v1 += 4;
  v3 = (*(uint64_t (**)(_QWORD *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2772;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v1 + 32))(v1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned int *WebKit::WebScreenOrientationManager::addObserver(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *v5;
  _BOOL4 isEmptyIgnoringNullReferences;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  unsigned int *result;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  WTF *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  size_t v49;
  void *v50;
  IPC::Encoder *v51[3];
  WTF *v52;

  v4 = (uint64_t *)(a1 + 56);
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 56));
  v7 = *(_DWORD *)(a1 + 68);
  v8 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v8;
  if (v8 > v7)
  {
    v9 = *v4;
    if (*v4)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (!v10)
        goto LABEL_25;
      v11 = 0;
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 8 * --v10);
          if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
            break;
          if (!v10)
            goto LABEL_14;
        }
        *(_QWORD *)(v9 + 8 * v10) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v5);
        }
        *(_QWORD *)(v9 + 8 * v10) = -1;
        ++v11;
      }
      while (v10);
LABEL_14:
      v9 = *v4;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        v15 = *v4;
        if (*v4)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v11;
        v9 = *v4;
      }
      if (v9)
      {
        v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          v9 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = 0;
          if (!v9)
          {
            v19 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 64) = 0;
LABEL_28:
        v19 = *(_DWORD *)(v9 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 68) = 2 * v20;
          goto LABEL_31;
        }
LABEL_29:
        v20 = v19;
        goto LABEL_30;
      }
    }
    v19 = 0;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v21 = *(_QWORD *)(a2 + 8);
  if (!v21)
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = a2;
    v23 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v21;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      v21 = *(_QWORD *)(a2 + 8);
    }
  }
  do
    v26 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v26 + 1, (unsigned int *)v21));
  do
    v27 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v27 + 1, (unsigned int *)v21));
  v52 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v52, (uint64_t)v51);
  result = (unsigned int *)v52;
  v52 = 0;
  if (result)
  {
    do
    {
      v46 = __ldaxr(result);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, result));
    if (!v47)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v28);
    }
  }
  if (!v21)
    goto LABEL_43;
  do
  {
    v30 = __ldaxr((unsigned int *)v21);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v21));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v21);
    result = (unsigned int *)WTF::fastFree((WTF *)v21, v28);
    if (!isEmptyIgnoringNullReferences)
      return result;
  }
  else
  {
LABEL_43:
    if (!isEmptyIgnoringNullReferences)
      return result;
  }
  v32 = *(_QWORD *)(a1 + 48);
  v34 = *(_QWORD *)(v32 + 32);
  v33 = v32 + 32;
  v35 = (*(uint64_t (**)(uint64_t))(v34 + 56))(v33);
  v36 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v36 = 2771;
  *(_QWORD *)(v36 + 8) = v35;
  *(_QWORD *)(v36 + 528) = v36 + 16;
  *(_QWORD *)(v36 + 536) = v36 + 16;
  *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v36 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
  v51[0] = (IPC::Encoder *)v36;
  v37 = *(_QWORD *)(v36 + 544);
  v38 = v37 + 1;
  v39 = *(_QWORD *)(v36 + 552);
  if (v39 < v37 + 1)
  {
    v48 = (2 * v39 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v49 = v48;
      v48 *= 2;
    }
    while (v49 < v38);
    result = (unsigned int *)mmap(0, v49, 3, 4098, -1, 0);
    if (result == (unsigned int *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v40 = result;
    memcpy(result, *(const void **)(v36 + 528), *(_QWORD *)(v36 + 544));
    v50 = *(void **)(v36 + 528);
    if (v50 != (void *)(v36 + 16))
      munmap(v50, *(_QWORD *)(v36 + 552));
    *(_QWORD *)(v36 + 528) = v40;
    *(_QWORD *)(v36 + 552) = v49;
    v41 = *(_QWORD *)(v36 + 544);
  }
  else
  {
    v40 = *(unsigned int **)(v36 + 528);
    v41 = *(_QWORD *)(v36 + 544);
  }
  bzero((char *)v40 + v41, v37 - v41);
  *(_QWORD *)(v36 + 544) = v38;
  v42 = (_BYTE *)(*(_QWORD *)(v36 + 528) + v37);
  *(_QWORD *)(v36 + 536) = v42 + 1;
  *v42 = 1;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v33 + 32))(v33, v51, 0);
  result = (unsigned int *)v51[0];
  v51[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v43);
    return (unsigned int *)WTF::fastFree(v44, v45);
  }
  return result;
}

uint64_t WebKit::WebScreenOrientationManager::removeObserver(uint64_t a1, IPC::Encoder **a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  IPC::Encoder *v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  void *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  size_t v38;
  void *v39;
  IPC::Encoder *v40;

  v4 = (uint64_t *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 68);
  v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (*v4)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 8 * --v8);
          if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v13 = *v4;
        if (*v4)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v9;
        v7 = *v4;
      }
      if (v7)
      {
        v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          v7 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = 0;
          if (!v7)
          {
            v17 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 64) = 0;
LABEL_28:
        v17 = *(_DWORD *)(v7 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 68) = 2 * v18;
          goto LABEL_31;
        }
LABEL_29:
        v18 = v17;
        goto LABEL_30;
      }
    }
    v17 = 0;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v19 = a2[1];
  if (v19 && *((_QWORD *)v19 + 1))
  {
    v40 = a2[1];
    v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v40);
    if (*v4)
    {
      v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20)
        goto LABEL_40;
    }
    else
    {
      if (!v20)
        goto LABEL_40;
      v21 = 0;
    }
    if ((unsigned int **)v21 != v20)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
  }
LABEL_40:
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v4);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 73))
      *(_BYTE *)(a1 + 73) = 0;
    v23 = *(_QWORD *)(a1 + 48);
    v25 = *(_QWORD *)(v23 + 32);
    v24 = v23 + 32;
    v26 = (*(uint64_t (**)(uint64_t))(v25 + 56))(v24);
    v27 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v27 = 2771;
    *(_QWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 528) = v27 + 16;
    *(_QWORD *)(v27 + 536) = v27 + 16;
    *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v27 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
    v40 = (IPC::Encoder *)v27;
    v28 = *(_QWORD *)(v27 + 544);
    v29 = v28 + 1;
    v30 = *(_QWORD *)(v27 + 552);
    if (v30 < v28 + 1)
    {
      v37 = (2 * v30 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v38 = v37;
        v37 *= 2;
      }
      while (v38 < v29);
      result = (uint64_t)mmap(0, v38, 3, 4098, -1, 0);
      if (result == -1)
      {
        __break(0xC471u);
        return result;
      }
      v31 = result;
      memcpy((void *)result, *(const void **)(v27 + 528), *(_QWORD *)(v27 + 544));
      v39 = *(void **)(v27 + 528);
      if (v39 != (void *)(v27 + 16))
        munmap(v39, *(_QWORD *)(v27 + 552));
      *(_QWORD *)(v27 + 528) = v31;
      *(_QWORD *)(v27 + 552) = v38;
      v32 = *(_QWORD *)(v27 + 544);
    }
    else
    {
      v31 = *(_QWORD *)(v27 + 528);
      v32 = *(_QWORD *)(v27 + 544);
    }
    bzero((void *)(v31 + v32), v28 - v32);
    *(_QWORD *)(v27 + 544) = v29;
    v33 = (_BYTE *)(*(_QWORD *)(v27 + 528) + v28);
    *(_QWORD *)(v27 + 536) = v33 + 1;
    *v33 = 0;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v24 + 32))(v24, &v40, 0);
    result = (uint64_t)v40;
    v40 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v34);
      return WTF::fastFree(v35, v36);
    }
  }
  return result;
}

uint64_t WebKit::WebSearchPopupMenu::popupMenu(WebKit::WebSearchPopupMenu *this)
{
  return *((_QWORD *)this + 2);
}

void WebKit::WebSearchPopupMenu::saveRecentSearches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebProcess *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::WebProcess *v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          CFRetain(*(CFTypeRef *)(v4 - 8));
          {
            v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v7 = WebKit::WebProcess::WebProcess(v22);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
          }
          v8 = (unsigned __int8 **)*((_QWORD *)v7 + 4);
          if (!v8)
          {
            v23 = a2;
            v24 = a3;
            IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>(0, (uint64_t)&v23, *(_QWORD *)(v4 + 24));
            goto LABEL_31;
          }
          v9 = *v8;
          if (__ldaxr(*v8))
          {
            __clrex();
          }
          else if (!__stxr(1u, v9))
          {
            goto LABEL_12;
          }
          MEMORY[0x19AEABB3C](v9);
LABEL_12:
          ++*((_QWORD *)v9 + 1);
          v11 = __ldxr(v9);
          if (v11 == 1)
          {
            if (!__stlxr(0, v9))
            {
LABEL_17:
              v23 = a2;
              v24 = a3;
              IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>((uint64_t)v8, (uint64_t)&v23, *(_QWORD *)(v4 + 24));
              v12 = *v8;
              if (__ldaxr(*v8))
              {
                __clrex();
              }
              else if (!__stxr(1u, v12))
              {
                goto LABEL_21;
              }
              MEMORY[0x19AEABB3C](v12);
LABEL_21:
              v14 = *((_QWORD *)v12 + 1);
              v15 = v14 - 1;
              *((_QWORD *)v12 + 1) = v14 - 1;
              if (v14 == 1)
              {
                v21 = *((_QWORD *)v12 + 2);
                v17 = *((_QWORD *)v12 + 3);
                *((_QWORD *)v12 + 3) = 0;
                v16 = v21 == 0;
              }
              else
              {
                v16 = 0;
                v17 = 0;
              }
              v18 = __ldxr(v12);
              if (v18 == 1)
              {
                if (!__stlxr(0, v12))
                {
                  if (!v15)
                  {
LABEL_29:
                    v19 = WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v19 = off_1E34ACA48;
                    *(_QWORD *)(v19 + 8) = v12;
                    *(_QWORD *)(v19 + 16) = v17;
                    *(_BYTE *)(v19 + 24) = v16;
                    v23 = v19;
                    WTF::ensureOnMainRunLoop();
                    v20 = v23;
                    v23 = 0;
                    if (v20)
                      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                  }
LABEL_31:
                  CFRelease(*(CFTypeRef *)(v4 - 8));
                  return;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v12);
              if (!v15)
                goto LABEL_29;
              goto LABEL_31;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          goto LABEL_17;
        }
      }
    }
  }
}

void WebKit::WebSearchPopupMenu::loadRecentSearches(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebProcess *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WebKit::WebProcess *v28;
  uint64_t *v29[2];
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  if (!*a2)
    return;
  if (!*(_DWORD *)(*a2 + 4))
    return;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  CFRetain(*(CFTypeRef *)(v4 - 8));
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v28);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = (unsigned __int8 **)*((_QWORD *)v7 + 4);
  if (!v8)
  {
    v29[0] = a2;
    IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>((uint64_t)v30, 0, v29, *(_QWORD *)(v4 + 24));
    goto LABEL_31;
  }
  v9 = *v8;
  if (__ldaxr(*v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_12:
  ++*((_QWORD *)v9 + 1);
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v9))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v29[0] = a2;
  IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>((uint64_t)v30, (uint64_t)v8, v29, *(_QWORD *)(v4 + 24));
  v13 = *v8;
  if (__ldaxr(*v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEABB3C](v13);
LABEL_21:
  v15 = *((_QWORD *)v13 + 1);
  v16 = v15 - 1;
  *((_QWORD *)v13 + 1) = v15 - 1;
  if (v15 == 1)
  {
    v27 = *((_QWORD *)v13 + 2);
    v18 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v13 + 3) = 0;
    v17 = v27 == 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = __ldxr(v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (!v16)
      goto LABEL_29;
    goto LABEL_31;
  }
  if (__stlxr(0, v13))
    goto LABEL_28;
  if (!v16)
  {
LABEL_29:
    v20 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v20 = off_1E34ACA48;
    *(_QWORD *)(v20 + 8) = v13;
    *(_QWORD *)(v20 + 16) = v18;
    *(_BYTE *)(v20 + 24) = v17;
    v29[0] = (uint64_t *)v20;
    WTF::ensureOnMainRunLoop();
    v21 = v29[0];
    v29[0] = 0;
    if (v21)
      (*(void (**)(uint64_t *))(*v21 + 8))(v21);
  }
LABEL_31:
  v22 = v33;
  if (v33 != -1)
  {
    if (!v33)
    {
      v23 = v31;
      v24 = v32;
      v31 = 0;
      v32 = 0;
      v25 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 16 * v25));
      v26 = *(WTF **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        WTF::fastFree(v26, v12);
      }
      v29[0] = 0;
      v29[1] = 0;
      *(_QWORD *)a3 = v23;
      *(_QWORD *)(a3 + 8) = v24;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v12);
    }
    ((void (*)(uint64_t **, _BYTE *))off_1E34F0D88[v22])(v29, v30);
  }
  CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::WebSearchPopupMenu::enabled(WebKit::WebSearchPopupMenu *this)
{
  return 1;
}

uint64_t WebKit::WebSpeechRecognitionConnection::WebSpeechRecognitionConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  WebKit::WebProcess *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  IPC::Encoder *v17[3];
  _QWORD v18[2];

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = &unk_1E34F0B90;
  v3 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E34F0BC8;
  v4 = a1 + 32;
  *(_QWORD *)(a1 + 40) = a2;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)a1 = off_1E34F0B28;
  *(_QWORD *)(a1 + 48) = 0;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a1 + 16;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v14);
    v3 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    a2 = *v5;
  }
  v18[0] = 203;
  v18[1] = a2;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v6 + 6, (unsigned __int8 *)v18, v3, (unsigned int **)v17);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2546;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17[0] = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v5);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, v17, 0);
  v9 = v17[0];
  v17[0] = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  WebKit::WebProcess::ensureSpeechRecognitionRealtimeMediaSourceManager(v12);
  return a1;
}

void WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *v5;
  WTF *v6;
  void *v7;
  WebKit::WebProcess *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WebKit::WebProcess *v17;
  IPC::Encoder *v18;

  v2 = (uint64_t *)((char *)this + 40);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2547;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v18 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 4) + 32))((char *)this + 32, &v18, 0);
  v5 = v18;
  v18 = 0;
  if (v5)
  {
    IPC::Encoder::~Encoder(v5, v4);
    WTF::fastFree(v6, v7);
  }
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v8 + 40), (WebKit::WebSpeechRecognitionConnection *)((char *)this + 16));
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)(v10 + 16 * i) != -1)
        {
          v13 = v10 + 16 * i;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v9);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v9);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 16));
}

{
  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

void WebKit::WebSpeechRecognitionConnection::registerClient(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v4 = (uint64_t *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = a2[1];
  if (v3
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(a1 + 48)),
        (v3 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v3 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = v5;
    v15 = a2[2];
    if (v15)
      goto LABEL_37;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = a2;
    v16 = (unsigned int *)a2[2];
    a2[2] = v15;
    if (!v16)
      goto LABEL_37;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
    v15 = a2[2];
    if (v15)
    {
LABEL_37:
      do
        v19 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v19 + 1, (unsigned int *)v15));
    }
    v20 = (unsigned int *)v11[1];
    v11[1] = v15;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
    v23 = *v4;
    if (*v4)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v4;
    if (*v4)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        return;
    }
    else if (3 * v28 > 4 * v27)
    {
      return;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v4);
    return;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != v5)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (_QWORD *)(v3 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
}

void WebKit::WebSpeechRecognitionConnection::unregisterClient(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (uint64_t *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, *(_QWORD *)(a2 + 8));
  if (v3)
  {
    v5 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v5 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v5 = 0;
  }
  if (v5 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v2, v4);
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::start(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  uint64_t v23[2];
  IPC::Encoder *v24;

  v23[0] = a9;
  v23[1] = a10;
  v16 = a1 + 32;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1457;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (IPC::Encoder *)v18;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a4;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a6;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v18, a7);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v18, v23);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v16 + 32))(v16, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::stop(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1458;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::abort(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1455;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t *WebKit::WebSpeechRecognitionConnection::didReceiveUpdate(uint64_t *result, WebCore::SpeechRecognitionUpdate *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  IPC::Encoder *v32;
  WTF::StringImpl *v33;

  v2 = result + 6;
  v3 = result[6];
  if (!v3)
    return result;
  v4 = result;
  v5 = *(_QWORD *)this;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *(_QWORD *)this + ~(*(_QWORD *)this << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v3 + 16 * v10);
  if (v11 != *(_QWORD *)this)
  {
    v15 = 1;
    v16 = *(_QWORD *)(v3 + 16 * v10);
    v17 = v10;
    while (v16)
    {
      v17 = (v17 + v15) & v6;
      v16 = *(_QWORD *)(v3 + 16 * v17);
      ++v15;
      if (v16 == v5)
      {
        if (v11 == v5)
          goto LABEL_3;
        v18 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v18) & v6;
          v11 = *(_QWORD *)(v3 + 16 * v10);
          ++v18;
          if (v11 == v5)
            goto LABEL_3;
        }
        v12 = 0;
        v19 = 1;
        goto LABEL_17;
      }
    }
    return result;
  }
LABEL_3:
  v12 = *(_QWORD *)(v3 + 16 * v10 + 8);
  if (!v12)
  {
    v21 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result[6], *(_QWORD *)this);
    v19 = 1;
    goto LABEL_18;
  }
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  v14 = *(_QWORD *)(v12 + 8);
  if (v14)
  {
    switch(*((_BYTE *)this + 8))
    {
      case 0:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 16))(*(_QWORD *)(v12 + 8));
        break;
      case 1:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 24))(*(_QWORD *)(v12 + 8));
        break;
      case 2:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 32))(*(_QWORD *)(v12 + 8));
        break;
      case 3:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 40))(*(_QWORD *)(v12 + 8));
        break;
      case 4:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 48))(*(_QWORD *)(v12 + 8));
        break;
      case 5:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 56))(*(_QWORD *)(v12 + 8));
        break;
      case 6:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 64))(*(_QWORD *)(v12 + 8));
        break;
      case 7:
        WebCore::SpeechRecognitionUpdate::result(this);
        (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v14 + 80))(v14, &v32);
        result = (uint64_t *)WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v29);
        break;
      case 8:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 72))(*(_QWORD *)(v12 + 8));
        break;
      case 9:
        WebCore::SpeechRecognitionUpdate::error(this);
        (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v14 + 88))(v14, &v32);
        result = (uint64_t *)v33;
        v33 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
          else
            *(_DWORD *)result -= 2;
        }
        break;
      case 0xA:
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 96))(*(_QWORD *)(v12 + 8));
        break;
      default:
        goto LABEL_41;
    }
    do
    {
LABEL_41:
      v30 = __ldaxr((unsigned int *)v12);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v12));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v12);
      return (uint64_t *)WTF::fastFree((WTF *)v12, this);
    }
    return result;
  }
  v19 = 0;
  v3 = *v2;
LABEL_17:
  v20 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, v5);
  v21 = (_QWORD *)v20;
  if (v3)
  {
LABEL_18:
    v22 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v22 == v21)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (!v20)
    goto LABEL_24;
  v22 = 0;
LABEL_22:
  if (v22 != v21)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v2, v21);
LABEL_24:
  v24 = v4[4];
  v23 = v4 + 4;
  v25 = (*(uint64_t (**)(uint64_t *))(v24 + 56))(v23);
  v26 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v26 = 1456;
  *(_QWORD *)(v26 + 8) = v25;
  *(_QWORD *)(v26 + 528) = v26 + 16;
  *(_QWORD *)(v26 + 536) = v26 + 16;
  *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v26 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
  v32 = (IPC::Encoder *)v26;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v26, 8uLL, 8) = v5;
  (*(void (**)(uint64_t *, IPC::Encoder **, _QWORD))(*v23 + 32))(v23, &v32, 0);
  result = (uint64_t *)v32;
  v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, this);
    result = (uint64_t *)WTF::fastFree(v27, v28);
  }
  if ((v19 & 1) == 0)
    goto LABEL_41;
  return result;
}

uint64_t WebKit::WebSpeechRecognitionConnection::messageSenderConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((_QWORD *)v1 + 4);
}

uint64_t `non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::messageSenderConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((_QWORD *)v1 + 4);
}

uint64_t WebKit::WebSpeechRecognitionConnection::messageSenderDestinationID(WebKit::WebSpeechRecognitionConnection *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t `non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::messageSenderDestinationID(WebKit::WebSpeechRecognitionConnection *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::WebSpeechSynthesisClient::voiceList(WebKit::WebSpeechSynthesisClient *this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  IPC::Decoder *v29;
  WTF *v30;
  void *v31;
  int v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  _QWORD *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  WTF::StringImpl ****v49;
  uint64_t v50;
  WTF::StringImpl ***v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF *v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  int v72;
  IPC::Encoder *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v5 = v4[4];
  v4 += 4;
  v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v4);
  v8 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4);
  if (!v8)
  {
    v2 = 0;
    LODWORD(v1) = 0;
    LOBYTE(v78) = 3;
    v81 = 1;
LABEL_41:
    v43 = &v75;
    goto LABEL_43;
  }
  v74 = 0;
  IPC::Connection::createSyncMessageEncoder(3687, v6, &v74, (uint64_t *)&v73);
  IPC::Connection::sendSyncMessage((uint64_t)v8, v74, (uint64_t *)&v73, 0, (uint64_t)&v71, INFINITY);
  if (!v72)
  {
    v8 = v71;
    v12 = v71[1];
    v13 = *v71;
    v14 = ((v71[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v71;
    if (v12 < v14 || v12 - v14 <= 7)
    {
      v61 = 0;
      v62 = 0;
      *v71 = 0;
      v8[1] = 0;
      v63 = v8[3];
      if (!v63)
        goto LABEL_64;
      goto LABEL_78;
    }
    v16 = (unint64_t *)(v13 + v14);
    v71[2] = (uint64_t)(v16 + 1);
    if (!v13)
    {
      v61 = v12;
      v62 = 0;
      goto LABEL_64;
    }
    v17 = *v16;
    v68 = 0;
    v69 = 0;
    if (v17 >= 0x8000)
    {
      do
      {
        IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>((uint64_t)&v78, v8);
        if (!v82)
          goto LABEL_31;
        v32 = HIDWORD(v69);
        if (HIDWORD(v69) == (_DWORD)v69)
        {
          WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>((unsigned int *)&v68, (unint64_t)&v78);
        }
        else
        {
          v33 = (char *)v68 + 32 * HIDWORD(v69);
          v34 = v78;
          v78 = 0;
          *(_QWORD *)v33 = v34;
          v35 = v79;
          v79 = 0;
          *((_QWORD *)v33 + 1) = v35;
          v36 = v80;
          v80 = 0;
          *((_QWORD *)v33 + 2) = v36;
          *((_WORD *)v33 + 12) = v81;
          HIDWORD(v69) = v32 + 1;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, v18);
        --v17;
      }
      while (v17);
      v2 = v69;
      v1 = HIDWORD(v69);
      v8 = (uint64_t *)v68;
      if (v69 > HIDWORD(v69))
      {
        v65 = v68;
        if (HIDWORD(v69))
        {
          if (HIDWORD(v69) >> 27)
            goto LABEL_83;
          v66 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v69)));
          v2 = v1;
          v65 = (WTF *)v8;
          if ((uint64_t *)v66 != v8)
          {
            v67 = (WTF *)v66;
            WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move((WTF::StringImpl *)v8, (WTF::StringImpl *)&v8[4 * v1], v66);
            v2 = v1;
            v65 = v67;
          }
        }
        if (v8)
        {
          if (v65 == (WTF *)v8)
          {
            v2 = 0;
            v65 = 0;
            v68 = 0;
            LODWORD(v69) = 0;
          }
          WTF::fastFree((WTF *)v8, v9);
        }
        v8 = (uint64_t *)v65;
      }
    }
    else
    {
      if (v17)
      {
        LODWORD(v69) = v17;
        v68 = (WTF *)WTF::fastMalloc((WTF *)(32 * v17));
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>((uint64_t)&v78, v8);
          if (!v82)
            break;
          v19 = HIDWORD(v69);
          if (HIDWORD(v69) == (_DWORD)v69)
          {
            WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>((unsigned int *)&v68, (unint64_t)&v78);
          }
          else
          {
            v20 = (char *)v68 + 32 * HIDWORD(v69);
            v21 = v78;
            v78 = 0;
            *(_QWORD *)v20 = v21;
            v22 = v79;
            v79 = 0;
            *((_QWORD *)v20 + 1) = v22;
            v23 = v80;
            v80 = 0;
            *((_QWORD *)v20 + 2) = v23;
            *((_WORD *)v20 + 12) = v81;
            HIDWORD(v69) = v19 + 1;
          }
          std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, v18);
          if (!--v17)
          {
            v8 = (uint64_t *)v68;
            v2 = v69;
            LODWORD(v1) = HIDWORD(v69);
            goto LABEL_22;
          }
        }
LABEL_31:
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, v18);
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v37);
        goto LABEL_32;
      }
      LODWORD(v1) = 0;
      v2 = 0;
      v8 = 0;
    }
LABEL_22:
    v68 = 0;
    v69 = 0;
    LOBYTE(v85) = 1;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v9);
    v83 = 0;
    v84 = 0;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v24);
    v77 = 1;
    v75 = 0;
    v76 = 0;
    v70 = 1;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v25);
    if (!v72)
    {
      v27 = v71;
      v71 = 0;
      v68 = 0;
      v69 = 0;
      v83 = 0;
      v84 = 0;
      v78 = v27;
      v79 = v8;
      v85 = 0;
      v80 = __PAIR64__(v1, v2);
      v81 = 0;
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v26);
      v29 = (IPC::Decoder *)v83;
      v83 = 0;
      if (v29)
      {
        IPC::Decoder::~Decoder(v29);
        WTF::fastFree(v30, v31);
      }
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v28);
      v10 = 0;
LABEL_35:
      v11 = v72;
      if (v72 == -1)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_77:
    v63 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_78:
    if (v12)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v63 + 16))(v63, v13, v12);
      v62 = *v8;
      v61 = v8[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
    }
LABEL_64:
    *v8 = 0;
    v8[1] = 0;
    v64 = v8[3];
    if (v64 && v61)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62);
LABEL_32:
    v7 = (void *)*v8;
    v38 = v8[1];
    *v8 = 0;
    v8[1] = 0;
    v39 = v8[3];
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v39 + 16))(v39, v7);
      v7 = (void *)*v8;
      v59 = v8[1];
      v60 = v8[3];
      *v8 = 0;
      v8[1] = 0;
      if (v60 && v59)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v60 + 16))(v60, v7);
    }
    else
    {
      *v8 = 0;
      v8[1] = 0;
    }
    LOBYTE(v78) = 13;
    v10 = 1;
    v81 = 1;
    goto LABEL_35;
  }
  if (v72 != 1)
    goto LABEL_77;
  LOBYTE(v78) = (_BYTE)v71;
  v10 = 1;
  v81 = 1;
  v11 = 1;
LABEL_36:
  ((void (*)(uint64_t **, uint64_t **))off_1E34F0DA8[v11])(&v83, &v71);
LABEL_37:
  v40 = v73;
  v73 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v7);
    WTF::fastFree(v41, v42);
  }
  v75 = 0;
  v76 = 0;
  if (v10)
  {
    v8 = 0;
    v2 = 0;
    LODWORD(v1) = 0;
    goto LABEL_41;
  }
  v43 = &v79;
LABEL_43:
  *v43 = 0;
  v43[1] = 0;
  v83 = v8;
  v84 = __PAIR64__(v1, v2);
  WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v7);
  v75 = 0;
  v76 = 0;
  if (!(_DWORD)v1)
  {
    LODWORD(v46) = 0;
    goto LABEL_49;
  }
  if (v1 >> 29)
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x19763EBF0);
  }
  v45 = WTF::fastMalloc((WTF *)(8 * v1));
  v46 = 0;
  LODWORD(v76) = v1;
  v75 = v45;
  v47 = (unsigned __int8 *)(v8 + 2);
  do
  {
    v48 = v46;
    WebCore::PlatformSpeechSynthesisVoice::create((WebCore::PlatformSpeechSynthesisVoice *)(v47 - 16), (const WTF::String *)(v47 - 8), (const WTF::String *)v47, (const WTF::String *)v47[8]);
    ++v46;
    *(_QWORD *)(v45 + 8 * v48) = v68;
    v47 += 32;
  }
  while (v46 < HIDWORD(v84));
LABEL_49:
  v49 = (WTF::StringImpl ****)((char *)this + 32);
  v50 = *((unsigned int *)this + 11);
  if ((_DWORD)v50)
  {
    v51 = *v49;
    v52 = 8 * v50;
    do
    {
      v53 = *v51;
      *v51 = 0;
      if (v53)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v53, v44);
      ++v51;
      v52 -= 8;
    }
    while (v52);
  }
  v54 = (WTF *)*v49;
  if (*v49)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v54, v44);
  }
  *((_QWORD *)this + 4) = v75;
  v55 = v76;
  v75 = 0;
  v76 = 0;
  *((_DWORD *)this + 10) = v55;
  *((_DWORD *)this + 11) = v46;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v44);
  v57 = WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v56);
  if (v81 != -1)
    ((void (*)(uint64_t, uint64_t **))off_1E34F0D98[v81])(v57, &v78);
  return (uint64_t)this + 32;
}

uint64_t WebKit::WebSpeechSynthesisClient::corePageObserver(WebKit::WebSpeechSynthesisClient *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 272);
  if (!v3)
    return 0;
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v3 + 24))(&v16);
  v5 = (unsigned int *)v16;
  if (!v16)
    return 0;
  v6 = *((_QWORD *)v16 + 1);
  v16 = 0;
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (v8)
  {
    if (!v6)
      return 0;
  }
  else
  {
    atomic_store(1u, v5);
    v14 = v6;
    WTF::fastFree((WTF *)v5, v4);
    if (!v14)
      return 0;
  }
  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 272) + 24))(&v16);
  v10 = (unsigned int *)v16;
  if (!v16)
    return 0;
  v11 = *((_QWORD *)v16 + 1);
  v16 = 0;
  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  return v11;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::resetState(WebKit::WebSpeechSynthesisClient *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = v1[4];
  v1 += 4;
  v3 = (*(uint64_t (**)(_QWORD *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2069;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v1 + 32))(v1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSpeechSynthesisClient::speak(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *result;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  IPC::Encoder *v55;

  v4 = (unsigned int *)(a1 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F0DF0;
  v7[1] = a1;
  v7[2] = v5;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, a1);
  v8 = *(unsigned int **)(a1 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34F0E18;
  v10[1] = a1;
  v10[2] = v8;
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  v12 = (WTF::StringImpl **)(v11 + 8);
  v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if (!v11)
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v14 = *v12;
  if (v14)
    *(_DWORD *)v14 += 2;
  v52 = v14;
  v15 = (WTF::StringImpl **)(v11 + 16);
  if (!v11)
    v15 = v13;
  v16 = *v15;
  if (v16)
    *(_DWORD *)v16 += 2;
  v51 = v16;
  if (v11)
    v13 = (WTF::StringImpl **)(v11 + 24);
  v17 = *v13;
  if (v17)
    *(_DWORD *)v17 += 2;
  v50 = v17;
  if (v11)
  {
    v18 = *(_BYTE *)(v11 + 32) != 0;
    v19 = *(_BYTE *)(v11 + 33) != 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v20 = *(_QWORD **)(a1 + 16);
  v21 = v20[4];
  v20 += 4;
  v22 = (*(uint64_t (**)(_QWORD *))(v21 + 56))(v20);
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2071;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v55 = (IPC::Encoder *)v23;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = &off_1E34F0E40;
  v24[1] = v10;
  v53 = v24;
  v54 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD **, _QWORD))(*v20 + 40))(v20, &v55, &v53, 0);
  v26 = v53;
  v53 = 0;
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  v27 = v55;
  v55 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v25);
    WTF::fastFree(v28, v29);
  }
  v30 = *(_QWORD **)(a1 + 16);
  v31 = (uint64_t *)(*(_QWORD *)a2 + 16);
  v32 = (uint64_t *)(*(_QWORD *)a2 + 24);
  v33 = *(_DWORD *)(*(_QWORD *)a2 + 40);
  v34 = *(_DWORD *)(*(_QWORD *)a2 + 44);
  v35 = *(_DWORD *)(*(_QWORD *)a2 + 48);
  v36 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  v37 = v30[4];
  v30 += 4;
  v38 = (*(uint64_t (**)(_QWORD *))(v37 + 56))(v30);
  v39 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v39 = 2072;
  *(_QWORD *)(v39 + 8) = v38;
  *(_QWORD *)(v39 + 528) = v39 + 16;
  *(_QWORD *)(v39 + 536) = v39 + 16;
  *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v39 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
  v55 = (IPC::Encoder *)v39;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, v31);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, v32);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 4uLL, 4) = v33;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 4uLL, 4) = v34;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 4uLL, 4) = v35;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 8uLL, 8) = v36;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, (uint64_t *)&v52);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, (uint64_t *)&v51);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, (uint64_t *)&v50);
  *IPC::Encoder::grow((IPC::Encoder *)v39, 1uLL, 1) = v18;
  *IPC::Encoder::grow((IPC::Encoder *)v39, 1uLL, 1) = v19;
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v40 = &off_1E34F0E68;
  v40[1] = v7;
  v41 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v53 = v40;
  v54 = v41;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD **, _QWORD))(*v30 + 40))(v30, &v55, &v53, 0);
  v43 = v53;
  v53 = 0;
  if (v43)
    (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  v44 = v55;
  v55 = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v42);
    WTF::fastFree(v45, v46);
  }
  v47 = v50;
  v50 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v51;
  v51 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)v48 -= 2;
  }
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::cancel(WebKit::WebSpeechSynthesisClient *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = v1[4];
  v1 += 4;
  v3 = (*(uint64_t (**)(_QWORD *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2067;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v1 + 32))(v1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::pause(WebKit::WebSpeechSynthesisClient *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34F0E90;
  v4[1] = this;
  v4[2] = v2;
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  v6 = v5[4];
  v5 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2068;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0EB8;
  v9[1] = v4;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v5 + 40))(v5, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::resume(WebKit::WebSpeechSynthesisClient *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34F0EE0;
  v4[1] = this;
  v4[2] = v2;
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  v6 = v5[4];
  v5 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2070;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0F08;
  v9[1] = v4;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v5 + 40))(v5, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

unsigned __int8 ***WebKit::WebStorageConnection::getPersisted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v18;
  os_unfair_lock_s *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v19, *(unsigned __int8 ***)(v6 + 24));
  v7 = v19;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0F30;
  v9[1] = v8;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 570;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v11, a2);
  v20[0] = (uint64_t)v9;
  v20[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v21, v20, 0, 0);
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
}

unsigned __int8 ***WebKit::WebStorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v18;
  os_unfair_lock_s *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v19, *(unsigned __int8 ***)(v6 + 24));
  v7 = v19;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0F58;
  v9[1] = v8;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 569;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v11, a2);
  v20[0] = (uint64_t)v9;
  v20[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v21, v20, 0, 0);
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
}

unsigned __int8 ***WebKit::WebStorageConnection::getEstimate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v18;
  os_unfair_lock_s *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v19, *(unsigned __int8 ***)(v6 + 24));
  v7 = v19;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0F80;
  v9[1] = v8;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 551;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v11, a2);
  v20[0] = (uint64_t)v9;
  v20[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v21, v20, 0, 0);
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
}

unsigned __int8 ***WebKit::WebStorageConnection::fileSystemGetDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v18;
  os_unfair_lock_s *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v19, *(unsigned __int8 ***)(v6 + 24));
  v7 = v19;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F0FB8;
  v9[1] = v8;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 552;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v11, a2);
  v20[0] = (uint64_t)v9;
  v20[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v21, v20, 0, 0);
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
}

uint64_t WebKit::WebUserMediaClient::pageDestroyed(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 56))(this);
  return this;
}

void WebKit::WebUserMediaClient::requestUserMediaAccess(WebKit::WebUserMediaClient *this, WebCore::UserMediaRequest *a2)
{
  WebKit::UserMediaPermissionRequestManager::startUserMediaRequest(*(WebKit::UserMediaPermissionRequestManager **)(*((_QWORD *)this + 1) + 656), a2);
}

_QWORD *WebKit::WebUserMediaClient::cancelUserMediaAccessRequest(WebKit::WebUserMediaClient *this, WebCore::UserMediaRequest *a2)
{
  return WebKit::UserMediaPermissionRequestManager::cancelUserMediaRequest(*(WebKit::UserMediaPermissionRequestManager **)(*((_QWORD *)this + 1) + 656), a2);
}

void WebKit::WebUserMediaClient::enumerateMediaDevices(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  WebKit::UserMediaPermissionRequestManager::enumerateMediaDevices(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 656), a2, a3);
}

uint64_t WebKit::WebUserMediaClient::addDeviceChangeObserver(uint64_t a1, uint64_t *a2)
{
  return WebKit::UserMediaPermissionRequestManager::addDeviceChangeObserver(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 656), a2);
}

uint64_t *WebKit::WebUserMediaClient::removeDeviceChangeObserver(uint64_t a1, uint64_t a2)
{
  return WebKit::UserMediaPermissionRequestManager::removeDeviceChangeObserver(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 656), a2);
}

uint64_t WebKit::GPUProcessWebWorkerClient::createNestedWorkerClient@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)result = off_1E34F0D08;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *a3 = result;
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(WebKit::GPUProcessWebWorkerClient *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    WebKit::RemoteRenderingBackendProxy::create(*((_QWORD *)this + 1), &v6);
    v3 = v6;
    v6 = 0;
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v6;
      v6 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return *((_QWORD *)this + 3);
  }
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::sinkIntoImageBuffer@<X0>(WebKit::GPUProcessWebWorkerClient *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  if (*a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v7 = *a2;
    if ((_DWORD)v6)
    {
      *a2 = 0;
      v11 = v7;
      v8 = WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(a1);
      result = (uint64_t)WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(&v11, v8, a3);
      if (!v7)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    v7 = 0;
  }
  *a2 = 0;
  v10 = v7;
  result = WebKit::WebWorkerClient::sinkIntoImageBuffer(v6, &v10);
  v7 = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebKit::WebWorkerClient::sinkIntoImageBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  WebCore::SerializedImageBuffer::sinkIntoImageBuffer();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void WebKit::GPUProcessWebWorkerClient::createImageBuffer(WebKit::GPUProcessWebWorkerClient *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, const void **a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  WebKit::WebProcess *v15;
  unsigned int *v16;
  WebKit::WebProcess *v17;
  WebKit::GPUProcessWebWorkerClient *v18;

  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = a1;
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v17);
    a1 = v18;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  if ((a3 - 2) >= 5)
  {
    if (a3 == 1)
    {
      if (*((_BYTE *)v15 + 760))
        goto LABEL_5;
    }
    else if (a3 == 8 && *((_BYTE *)v15 + 762))
    {
      goto LABEL_5;
    }
  }
  else if (*((_BYTE *)v15 + 761))
  {
LABEL_5:
    v16 = (unsigned int *)WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(a1);
    WebKit::RemoteRenderingBackendProxy::createImageBuffer(v16, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  *a7 = 0;
}

uint64_t WebKit::GPUProcessWebWorkerClient::createGraphicsContextGL@<X0>(WebKit::GPUProcessWebWorkerClient *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  WebKit::WebProcess *v10;
  uint64_t v11;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  if (!*((_BYTE *)v6 + 763))
    return WebCore::createWebProcessGraphicsContextGL();
  v7 = WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(this);
  result = WebKit::RemoteGraphicsContextGLProxy::create(a2, v7, *((_QWORD *)this + 1), &v11);
  if (v11)
    v9 = v11 + 16;
  else
    v9 = 0;
  *a3 = v9;
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::createGPUForWebGPU@<X0>(WebKit::GPUProcessWebWorkerClient *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E4F00;
  v4[1] = 1;
  v5 = WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(this);
  result = WebKit::RemoteGPUProxy::create((uint64_t)v4, v5, *((_QWORD *)this + 1), &v7);
  *a2 = v7;
  if (*((_DWORD *)v4 + 2) == 1)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  --*((_DWORD *)v4 + 2);
  return result;
}

uint64_t WebKit::WebWorkerClient::displayID(WebKit::WebWorkerClient *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebKit::WebCaptionPreferencesDelegate::setDisplayMode(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v11;
  IPC::Encoder *v12;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2562;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v8, v9);
  }
  return WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode();
}

IPC::Encoder *WebKit::WebCaptionPreferencesDelegate::setPreferredLanguage(WebKit::WebCaptionPreferencesDelegate *this, const WTF::String *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2563;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebSearchPopupMenu::~WebSearchPopupMenu(WebKit::WebSearchPopupMenu *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E34F0AE8;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebKit::WebSearchPopupMenu::~WebSearchPopupMenu(WebKit::WebSearchPopupMenu *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34F0AE8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

void WebKit::WebSpeechSynthesisClient::~WebSpeechSynthesisClient(WebKit::WebSpeechSynthesisClient *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebSpeechSynthesisClient::~WebSpeechSynthesisClient(this, a2);
  WTF::fastFree(v2, v3);
}

{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E34F0C68;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

unsigned int **WebKit::WebSpeechSynthesisClient::setObserver(uint64_t a1, unsigned int **a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 24), a2);
}

uint64_t WebKit::WebSpeechSynthesisClient::observer@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(this + 24);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *a2 = v2;
  return this;
}

void WebKit::GPUProcessWebWorkerClient::~GPUProcessWebWorkerClient(WebKit::GPUProcessWebWorkerClient *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::GPUProcessWebWorkerClient::~GPUProcessWebWorkerClient(WebKit::GPUProcessWebWorkerClient *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy18LoadRecentSearchesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0DC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0DC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;
  char v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(v2);
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(v2);
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (!v13)
      goto LABEL_22;
    if (v5)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
      v11 = 0;
      v14 = *a2;
      v15 = a2[1];
      v16 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v12 = 0;
      if (!v16 || !v15)
        goto LABEL_22;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v15);
      goto LABEL_21;
    }
    v11 = 0;
    v12 = 0;
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v12);
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v23)
        {
          if (v22)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
        }
      }
    }
    return IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(v2);
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v11 = v5;
    v12 = v4;
    goto LABEL_22;
  }
  if (!v7)
  {
    v24[0] = 0;
    v26 = 0;
    goto LABEL_9;
  }
  IPC::ArgumentCoder<WebCore::Exception,void>::decode(a2, (uint64_t)v28);
  if (!v30)
  {
LABEL_21:
    v12 = *a2;
    v11 = a2[1];
    goto LABEL_22;
  }
  v24[0] = v28[0];
  v25 = v29;
  v26 = 1;
LABEL_9:
  v27 = 1;
  v8 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v24);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v27)
  {
    if (v26)
    {
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _BYTE v4[8];
  WTF::StringImpl *v5;
  char v6;

  v4[0] = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

char *IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  char *result;
  WTF *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2024;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v25 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *(uint64_t **)a2);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned int *)(v7 + 12);
  v9 = *(_QWORD *)(v6 + 544);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v6 + 552);
  if (v12 < v10 + 8)
  {
    v22 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v11);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v24 = *(void **)(v6 + 528);
    if (v24 != (void *)(v6 + 16))
      munmap(v24, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v13;
    *(_QWORD *)(v6 + 552) = v23;
    v9 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v13 = *(char **)(v6 + 528);
  }
  bzero(&v13[v9], v10 - v9);
  *(_QWORD *)(v6 + 544) = v11;
  v14 = (_QWORD *)(*(_QWORD *)(v6 + 528) + v10);
  *(_QWORD *)(v6 + 536) = v14 + 1;
  *v14 = v8;
  v15 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)v7;
    v17 = 16 * v15;
    do
    {
      IPC::ArgumentCoder<WebCore::RecentSearch,void>::encode((IPC::Encoder *)v6, v16);
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v25, 0, 0);
  result = (char *)v25;
  v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    return (char *)WTF::fastFree(v20, v21);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  int v8;
  uint64_t *v9;
  void *v10;
  IPC::Decoder *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Decoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  IPC::Encoder *result;
  WTF *v27;
  void *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  int v36;
  IPC::Encoder *v37;
  uint64_t v38;
  _QWORD v39[2];
  char v40;
  IPC::Decoder *v41;
  uint64_t v42;
  uint64_t v43;

  v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3674, a4, &v38, (uint64_t *)&v37);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v37, *a3);
  IPC::Connection::sendSyncMessage(a2, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
  if (!v36)
  {
    v9 = v35;
    IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v35, v7, (uint64_t)&v41);
    if ((_BYTE)v43)
    {
      v11 = v41;
      v41 = 0;
      v39[0] = v11;
      v12 = v42;
      v42 = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v10);
      v40 = 1;
      v13 = v39[0];
      v39[0] = 0;
      v32 = v13;
      v39[1] = 0;
      v33 = v12;
      v34 = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v14);
      if (v36)
        goto LABEL_21;
      v16 = v35;
      v35 = 0;
      v17 = v32;
      v32 = 0;
      v41 = 0;
      v42 = 0;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      v43 = 0;
      v18 = v33;
      v33 = 0;
      *(_QWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v15);
      v20 = v41;
      v41 = 0;
      if (v20)
      {
        IPC::Decoder::~Decoder(v20);
        WTF::fastFree(v21, v22);
      }
      if (v34)
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v19);
    }
    else
    {
      v19 = (void *)*v9;
      v23 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v24 = v9[3];
      if (v24)
        v25 = v23 == 0;
      else
        v25 = 1;
      if (!v25)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v24 + 16))(v24, v19);
      *(_BYTE *)a1 = 13;
      *(_DWORD *)(a1 + 24) = 1;
    }
    v8 = v36;
    if (v36 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v36 != 1)
  {
LABEL_21:
    v29 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v29, v30, v31);
  }
  *(_BYTE *)a1 = (_BYTE)v35;
  v8 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_17:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F0DA8[v8])(&v41, &v35);
LABEL_18:
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_38;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v27 = 0;
    v28 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::RecentSearch>(a1, (uint64_t)&v24);
        if (!v26)
          break;
        if (HIDWORD(v28) == (_DWORD)v28)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v27, (unint64_t)&v24);
        }
        else
        {
          v16 = (WTF::StringImpl **)(v27 + 16 * HIDWORD(v28));
          v17 = v24;
          v24 = 0;
          *v16 = v17;
          v16[1] = v25;
          ++HIDWORD(v28);
        }
        if (v26)
        {
          v18 = v24;
          v24 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        if (!--v10)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v27, HIDWORD(v28));
          *(_QWORD *)a3 = v27;
          v23 = v28;
          v27 = 0;
          v28 = 0;
          *(_QWORD *)(a3 + 8) = v23;
          goto LABEL_23;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v14 = 0;
        v15 = 0;
LABEL_22:
        v27 = 0;
        v28 = 0;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
LABEL_23:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, a2);
      }
      LODWORD(v28) = v10;
      v27 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::RecentSearch>(a1, (uint64_t)&v24);
        if (!v26)
          break;
        if (HIDWORD(v28) == (_DWORD)v28)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v27, (unint64_t)&v24);
        }
        else
        {
          v11 = (WTF::StringImpl **)(v27 + 16 * HIDWORD(v28));
          v12 = v24;
          v24 = 0;
          *v11 = v12;
          v11[1] = v25;
          ++HIDWORD(v28);
        }
        if (v26)
        {
          v13 = v24;
          v24 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        if (!--v10)
        {
          v14 = v27;
          v15 = v28;
          goto LABEL_22;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, a2);
  }
  v20 = v5;
  v21 = 0;
LABEL_38:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v20)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RecentSearch>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RecentSearch,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::SpeechRecognitionConnectionClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v10 >> 1);
  }
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ****)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * a1[3];
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  *(_WORD *)(v4 + 24) = *(_WORD *)(result + 24);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197640F94);
    }
    v3 = result;
    v4 = *(WTF::StringImpl **)result;
    v5 = (WTF::StringImpl *)(*(_QWORD *)result + 32 * *((unsigned int *)result + 3));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_WORD *)(a3 + 24) = *((_WORD *)v5 + 12);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34F0DF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34F0DF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34F0E18;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34F0E18;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0E40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0E40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0E68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0E68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34F0E90;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34F0E90;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0EB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0EB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34F0EE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34F0EE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0F08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0F08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0F30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0F30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0F58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0F58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0F80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0F80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE v28[15];
  int v29;
  char v30;
  _BYTE v31[15];
  int v32;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
        v11 = 0;
        v24 = *a2;
        v25 = a2[1];
        v26 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v12 = 0;
        if (v26 && v25)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v25);
          v12 = *a2;
          v11 = a2[1];
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v11 = v5;
    v12 = v4;
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
LABEL_18:
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v19)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
      v21 = *a2;
      v22 = a2[1];
      v23 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v23 && v22)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(v2);
  }
  if (v7)
  {
    IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode(a2, (uint64_t)&v30);
    if ((_BYTE)v32
      || (v15 = *a2, v16 = a2[1], *a2 = 0, a2[1] = 0, (v17 = a2[3]) != 0)
      && v16
      && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15), (_BYTE)v32))
    {
      *(_QWORD *)v28 = *(_QWORD *)v31;
      *(_QWORD *)&v28[7] = *(_QWORD *)&v31[7];
      v27 = v30;
      v29 = 0;
      v8 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, &v27);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v29 != -1)
        return ((uint64_t (*)(char *, char *))off_1E34F0F98[v29])(&v30, &v27);
      return result;
    }
    goto LABEL_18;
  }
  v30 = 33;
  *(_QWORD *)&v31[7] = 0;
  v32 = 1;
  v10 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 16))(v10, &v30);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v32 != -1)
    return ((uint64_t (*)(char *, char *))off_1E34F0F98[v32])(&v27, &v30);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3[8];
  uint64_t v4;
  int v5;
  char v6;

  v3[0] = 33;
  v4 = 0;
  v5 = 1;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5 != -1)
    return ((uint64_t (*)(char *, char *))off_1E34F0F98[v5])(&v6, v3);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F0FB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F0FB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 v5;
  char v6;
  __int128 v7;

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    v7 = v5;
    v3 = (uint64_t *)&v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    v3 = (uint64_t *)&v5;
  }
  return WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ClientOrigin &&::RefPtr<WebCore::FileSystemStorageConnection,WebCore::ClientOrigin &&::RawPtrTraits<WebCore::ClientOrigin &&::RefPtr>,WebCore::ClientOrigin &&::DefaultRefDerefTraits<WebCore::ClientOrigin &&::RefPtr>>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,WebKit::FileSystemStorageError>>(v2, v3);
}

WTF::StringImpl *WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ClientOrigin &&::RefPtr<WebCore::FileSystemStorageConnection,WebCore::ClientOrigin &&::RawPtrTraits<WebCore::ClientOrigin &&::RefPtr>,WebCore::ClientOrigin &&::DefaultRefDerefTraits<WebCore::ClientOrigin &&::RefPtr>>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v4;
  char v5;
  char *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char *v16;
  WebKit::WebProcess *v17;
  char v18[8];
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v4 = *((_DWORD *)a2 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 8;
          goto LABEL_22;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 6;
          goto LABEL_22;
        case 2:
          v5 = 5;
          goto LABEL_20;
        case 3:
          v5 = 10;
          goto LABEL_20;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 33;
          goto LABEL_22;
        case 5:
          v5 = 8;
          goto LABEL_20;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = 13;
LABEL_22:
          v18[0] = v5;
          break;
        default:
          v5 = 24;
LABEL_20:
          v18[0] = v5;
          v19 = 0;
          break;
      }
      v13 = v19;
      v19 = 0;
      LOBYTE(v20) = v5;
      v21 = (uint64_t)v13;
      v22 = 1;
      v14 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (v22 != -1)
        ((void (*)(char *, uint64_t *))off_1E34F0FD0[v22])(&v23, &v20);
      v22 = -1;
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v2 = *a2;
    if ((unint64_t)(*a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v20) = 24;
      v22 = 1;
      goto LABEL_12;
    }
    v6 = &_MergedGlobals_106;
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      goto LABEL_8;
    }
  }
  v16 = v6;
  v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
  v7 = WebKit::WebProcess::WebProcess(v17);
  WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  v16[2488] = 1;
LABEL_8:
  v8 = WebKit::WebProcess::fileSystemStorageConnection(v7);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v20 = v2;
  v21 = v8;
  v22 = 0;
LABEL_12:
  v11 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v20);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v22 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34F0FD0[v22])(v18, &v20);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebValidationMessageClient::~WebValidationMessageClient(WebKit::WebValidationMessageClient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      WebKit::WebValidationMessageClient::hideValidationMessage(this, (const WebCore::Element *)v4);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 4), a2);
        WTF::fastFree((WTF *)v5, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebValidationMessageClient::~WebValidationMessageClient(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebValidationMessageClient::hideValidationMessage(WebKit::WebValidationMessageClient *this, const WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v4 = *((_QWORD *)this + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = *((_QWORD *)this + 2);
  if (!v8 || *(const WebCore::Element **)(v8 + 8) != a2)
  {
    if ((v7 & 1) != 0)
      return;
    goto LABEL_8;
  }
  if ((v7 & 1) == 0)
  {
    WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 2, 0);
    *(_OWORD *)((char *)this + 24) = 0u;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 56))(v6 + 32);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 1956;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v15 = (IPC::Encoder *)v10;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v6 + 32) + 32))(v6 + 32, &v15, 0);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
LABEL_8:
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::WebValidationMessageClient::showValidationMessage(WebKit::WebValidationMessageClient *this, const WebCore::Element *a2, const WTF::String *a3)
{
  uint64_t v6;
  const WebCore::Element *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  void *v25;
  IPC::Encoder *v26;

  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(const WebCore::Element **)(v6 + 8);
    if (v7)
      WebKit::WebValidationMessageClient::hideValidationMessage(this, v7);
  }
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)a2 + 2, (uint64_t)a2);
  v9 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v11 + 4), v8);
      WTF::fastFree((WTF *)v11, v25);
    }
  }
  *((_QWORD *)this + 3) = WebCore::Element::boundingBoxInRootViewCoordinates(a2);
  *((_QWORD *)this + 4) = v14;
  v15 = (uint64_t *)((char *)this + 24);
  v16 = *(v15 - 2);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      v18 = v17 - 16;
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  CFRetain(*(CFTypeRef *)(v18 + 8));
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 32) + 56))(v18 + 32);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 2065;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v26 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v20, v15);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, (uint64_t *)a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v18 + 32) + 32))(v18 + 32, &v26, 0);
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v23, v24);
  }
  CFRelease(*(CFTypeRef *)(v18 + 8));
}

BOOL WebKit::WebValidationMessageClient::isValidationMessageVisible(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  return v2 == a2;
}

void WebKit::WebValidationMessageClient::hideAnyValidationMessage(WebKit::WebValidationMessageClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;

  v2 = *((_QWORD *)this + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = v3 - 16;
    CFRetain(*(CFTypeRef *)(v3 - 8));
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  v6 = *((_QWORD *)this + 2);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    if ((v5 & 1) != 0)
      return;
    goto LABEL_7;
  }
  if ((v5 & 1) == 0)
  {
    WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 2, 0);
    *(_OWORD *)((char *)this + 24) = 0u;
    v14 = v4;
    v7 = v4 + 32;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 56))(v4 + 32);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1956;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v15 = (IPC::Encoder *)v9;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v15, 0);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    v4 = v14;
LABEL_7:
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebPreviewLoaderClient::~WebPreviewLoaderClient(WebKit::WebPreviewLoaderClient *this, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPreviewLoaderClient::~WebPreviewLoaderClient(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPreviewLoaderClient::didReceiveData(uint64_t **this, const WebCore::SharedBuffer *a2)
{
  WebKit::WebProcess *v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t *v9[2];

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v9[0] = this[4];
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v3 + 14, v9);
  if (result)
  {
    v5 = this[5];
    if (!v5 || !v5[6])
    {
      v9[0] = (uint64_t *)(this + 2);
      v9[1] = (uint64_t *)(this + 3);
      v6 = result + 32;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 32) + 56))(result + 32);
      IPC::MessageSender::send<Messages::WebPageProxy::DidStartLoadForQuickLookDocumentInMainFrame>(v6, v9, v7, 0);
    }
    WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(this + 5));
    return WebCore::FragmentedSharedBuffer::append();
  }
  return result;
}

unsigned int *WebKit::WebPreviewLoaderClient::didFinishLoading(WebKit::WebPreviewLoaderClient *this)
{
  WebKit::WebProcess *v2;
  unsigned int *result;
  WebKit::WebPage *v4;
  void *v5;
  WebKit::WebProcess *v6;
  WebCore::FragmentedSharedBuffer *v7;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v7 = (WebCore::FragmentedSharedBuffer *)*((_QWORD *)this + 4);
  result = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v2 + 14, &v7);
  if (result)
  {
    v4 = (WebKit::WebPage *)result;
    WebCore::SharedBufferBuilder::take((WebKit::WebPreviewLoaderClient *)((char *)this + 40));
    WebKit::WebPage::didFinishLoadForQuickLookDocumentInMainFrame(v4, v7);
    result = (unsigned int *)v7;
    v7 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

unsigned int *WebKit::WebPreviewLoaderClient::didFail(WebKit::WebPreviewLoaderClient *this, void *a2)
{
  unsigned int *result;

  result = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

WTF::StringImpl *WebKit::WebPreviewLoaderClient::didRequestPassword(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WebKit::WebProcess *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v13 = *(WTF::StringImpl **)(a1 + 32);
  v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v4 + 14, &v13);
  if (v5)
  {
    v6 = *a2;
    *a2 = 0;
    v12 = (WTF::StringImpl *)v6;
    v13 = (WTF::StringImpl *)(a1 + 16);
    v7 = v5 + 32;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 56))(v5 + 32);
    IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v7, (uint64_t **)&v13, (uint64_t *)&v12, v8, 0);
    result = v12;
    v12 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)*a2 + 16))(*a2, &v13);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::DrawingArea::DrawingArea(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WebKit::WebProcess *v9;

  *(_QWORD *)a1 = off_1E34F1088;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1E34F1260;
  *(_BYTE *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  v6 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  v7 = *(unsigned int **)(a4 + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 63) = 0;
  v9 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v9, 5u, *(_QWORD *)(a1 + 32), a1);
  return a1;
}

void WebKit::DrawingArea::~DrawingArea(WebKit::DrawingArea *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F1088;
  *((_QWORD *)this + 2) = &unk_1E34F1260;
  WebKit::DrawingArea::removeMessageReceiverIfNeeded((unsigned __int8 *)this);
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

unsigned __int8 *WebKit::DrawingArea::removeMessageReceiverIfNeeded(unsigned __int8 *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v2;
  unsigned __int8 *v3;

  if (!this[66])
  {
    this[66] = 1;
    {
      v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v3 = this;
      v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v1 = WebKit::WebProcess::WebProcess(v2);
      this = v3;
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
    }
    return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v1 + 40, 5u, *((_QWORD *)this + 4));
  }
  return this;
}

uint64_t WebKit::DrawingArea::delegatedScrollingMode(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::dispatchAfterEnsuringUpdatedScrollPosition(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t WebKit::DrawingArea::tryMarkLayersVolatile(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::DrawingArea::createDisplayRefreshMonitor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebKit::DrawingArea::createDisplayRefreshMonitor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::EventDispatcher::~EventDispatcher(WebKit::EventDispatcher *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::EventDispatcher::~EventDispatcher(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::EventDispatcher::internalWheelEvent(WTF::RunLoop *a1, uint64_t a2, __int128 *a3, uint64_t a4, char a5)
{
  _QWORD *v9;
  _QWORD *v11;

  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34F1338;
  v9[1] = a2;
  v11 = v9;
  WTF::ensureOnMainRunLoop();
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return WebKit::EventDispatcher::dispatchWheelEventViaMainThread(a1, a2, a3, 10, a5);
}

uint64_t WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::RunLoop *a1, uint64_t a2, __int128 *a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  WTF::RunLoop::main(a1);
  v16 = a3[4];
  v17 = a3[5];
  v18 = a3[6];
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v10 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v10 = off_1E34F1388;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_OWORD *)(v10 + 96) = v16;
  *(_OWORD *)(v10 + 112) = v17;
  *(_OWORD *)(v10 + 128) = v18;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 48) = v13;
  *(_OWORD *)(v10 + 64) = v14;
  *(_OWORD *)(v10 + 80) = v15;
  *(_BYTE *)(v10 + 144) = a5;
  *(_BYTE *)(v10 + 145) = a4 & 0xFE;
  v19 = v10;
  WTF::RunLoop::dispatch();
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

WTF *WebKit::EventDispatcher::touchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t *v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  WTF *v61;
  __int128 v62;
  uint64_t v63;
  WTF *result;
  int v65;
  _QWORD *v66;
  _BOOL4 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  WTF *v71;
  int v72;
  int v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v12 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 32);
LABEL_5:
  v15 = (uint64_t *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    v67 = *(_DWORD *)(v14 - 12) == 0;
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
  }
  else
  {
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 40), 0);
    v14 = *v15;
    v67 = 1;
    if (!*v15)
    {
      v16 = 0;
      goto LABEL_9;
    }
  }
  v16 = *(_DWORD *)(v14 - 8);
LABEL_9:
  v17 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v14 + 144 * v20);
  v22 = *v21;
  if (!*v21)
    goto LABEL_17;
  v23 = 0;
  v24 = 1;
  while (v22 != a2)
  {
    if (v22 == -1)
      v23 = v21;
    v20 = (v20 + v24) & v16;
    v21 = (uint64_t *)(v14 + 144 * v20);
    v22 = *v21;
    ++v24;
    if (!*v21)
    {
      if (v23)
      {
        *v23 = 0;
        v23[2] = (uint64_t)(v23 + 4);
        v23[3] = 1;
        --*(_DWORD *)(*v15 - 16);
        v21 = v23;
      }
LABEL_17:
      *v21 = a2;
      v25 = *((_DWORD *)v21 + 7);
      if (v25)
        WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct((WTF *)v21[2], (WTF *)(v21[2] + 112 * v25));
      WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::adopt((uint64_t)(v21 + 2), &v68);
      v27 = *v15;
      if (*v15)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v49 = *v15;
      if (*v15)
        v50 = *(_DWORD *)(v49 - 12);
      else
        v50 = 0;
      v51 = (*(_DWORD *)(v49 - 16) + v50);
      v52 = *(unsigned int *)(v49 - 4);
      if (v52 > 0x400)
      {
        if (v52 <= 2 * v51)
LABEL_37:
          v21 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 40), v21);
      }
      else if (3 * v52 <= 4 * v51)
      {
        goto LABEL_37;
      }
      WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v26);
      *(_QWORD *)&v68 = a3;
      *((_QWORD *)&v68 + 1) = a4;
      v53 = *((_OWORD *)a5 + 1);
      v69 = *(_OWORD *)a5;
      v70 = v53;
      WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v71, a5 + 4);
      v75 = *((_DWORD *)a5 + 16);
      v74 = *((_OWORD *)a5 + 3);
      v54 = *a6;
      *a6 = 0;
      v76 = v54;
      v55 = *((_DWORD *)v21 + 7);
      if (v55 == *((_DWORD *)v21 + 6))
      {
        v56 = (unsigned int *)(v21 + 2);
        goto LABEL_43;
      }
LABEL_45:
      v59 = v21[2] + 112 * v55;
      *(_OWORD *)v59 = v68;
      v60 = v70;
      *(_OWORD *)(v59 + 16) = v69;
      *(_OWORD *)(v59 + 32) = v60;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      v61 = v71;
      v71 = 0;
      *(_QWORD *)(v59 + 48) = v61;
      LODWORD(v61) = v72;
      v72 = 0;
      *(_DWORD *)(v59 + 56) = (_DWORD)v61;
      LODWORD(v61) = v73;
      v73 = 0;
      *(_DWORD *)(v59 + 60) = (_DWORD)v61;
      v62 = v74;
      *(_DWORD *)(v59 + 80) = v75;
      *(_OWORD *)(v59 + 64) = v62;
      v63 = v76;
      v76 = 0;
      *(_QWORD *)(v59 + 96) = v63;
      ++*((_DWORD *)v21 + 7);
      goto LABEL_46;
    }
  }
  WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, (void *)a2);
  v29 = *((_DWORD *)v21 + 7);
  if (!v29)
    goto LABEL_61;
  v30 = v21 + 2;
  if (*(_BYTE *)a5 == 12 && *(_BYTE *)(*v30 + 112 * v29 - 96) == 12)
  {
    *(_QWORD *)&v68 = a3;
    *((_QWORD *)&v68 + 1) = a4;
    v31 = *((_OWORD *)a5 + 1);
    v69 = *(_OWORD *)a5;
    v70 = v31;
    WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v71, a5 + 4);
    v75 = *((_DWORD *)a5 + 16);
    v74 = *((_OWORD *)a5 + 3);
    v33 = *a6;
    *a6 = 0;
    v76 = v33;
    v34 = *((unsigned int *)v21 + 7);
    if ((_DWORD)v34)
    {
      v35 = v34 - 1;
      v36 = *v30;
      v37 = *v30 + 112 * (v34 - 1);
      *(_OWORD *)v37 = v68;
      v38 = v70;
      *(_OWORD *)(v37 + 16) = v69;
      *(_OWORD *)(v37 + 32) = v38;
      v41 = *(WTF **)(v37 + 48);
      v40 = v37 + 48;
      v39 = v41;
      if (v41)
      {
        *(_QWORD *)v40 = 0;
        *(_DWORD *)(v40 + 8) = 0;
        WTF::fastFree(v39, v32);
      }
      v42 = v71;
      v71 = 0;
      *(_QWORD *)v40 = v42;
      LODWORD(v42) = v72;
      v72 = 0;
      *(_DWORD *)(v40 + 8) = (_DWORD)v42;
      LODWORD(v42) = v73;
      v73 = 0;
      *(_DWORD *)(v40 + 12) = (_DWORD)v42;
      v43 = v36 + 112 * v35;
      v44 = v74;
      *(_DWORD *)(v43 + 80) = v75;
      *(_OWORD *)(v43 + 64) = v44;
      v45 = v76;
      v76 = 0;
      v46 = *(_QWORD *)(v43 + 96);
      *(_QWORD *)(v43 + 96) = v45;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      v47 = v76;
      v76 = 0;
      v48 = v67;
      if (!v47)
        goto LABEL_48;
LABEL_47:
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      goto LABEL_48;
    }
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x19764321CLL);
  }
  *(_QWORD *)&v68 = a3;
  *((_QWORD *)&v68 + 1) = a4;
  v57 = *((_OWORD *)a5 + 1);
  v69 = *(_OWORD *)a5;
  v70 = v57;
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v71, a5 + 4);
  v75 = *((_DWORD *)a5 + 16);
  v74 = *((_OWORD *)a5 + 3);
  v58 = *a6;
  *a6 = 0;
  v76 = v58;
  v55 = *((_DWORD *)v21 + 7);
  if (v55 != *((_DWORD *)v21 + 6))
    goto LABEL_45;
  v56 = (unsigned int *)(v21 + 2);
LABEL_43:
  WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::EventDispatcher::TouchEventData>(v56, (unint64_t)&v68);
LABEL_46:
  v48 = v67;
  v47 = v76;
  v76 = 0;
  if (v47)
    goto LABEL_47;
LABEL_48:
  result = v71;
  if (v71)
  {
    v71 = 0;
    v72 = 0;
    result = (WTF *)WTF::fastFree(result, v32);
  }
  v65 = __ldxr(v12);
  if (v65 != 1)
  {
    __clrex();
LABEL_55:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (!v48)
      return result;
    goto LABEL_56;
  }
  if (__stlxr(0, v12))
    goto LABEL_55;
  if (!v48)
    return result;
LABEL_56:
  WTF::RunLoop::main(result);
  v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v66 = off_1E34F1360;
  v66[1] = a1;
  *(_QWORD *)&v68 = v66;
  WTF::RunLoop::dispatch();
  result = (WTF *)v68;
  *(_QWORD *)&v68 = 0;
  if (result)
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::FindController::~FindController(WebKit::FindController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v4 + 8));
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::FindController::~FindController(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::FindController::countStringMatches(uint64_t a1, WebCore::LocalFrame *a2, unint64_t a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  WebKit::WebPage *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int Matches;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (WebKit::WebPage *)(v11 - 16);
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = WebKit::WebPage::mainFramePlugIn(v12, a2);
  if (v13)
  {
    v14 = (_DWORD *)v13;
    ++*(_DWORD *)(v13 + 8);
    if (a4 == -1)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = a4 + 1;
    Matches = WebKit::PluginView::countFindMatches(v13, (uint64_t)a2, a3 & 0x1F | (((a3 >> 10) & 1) << 7) | (a3 >> 2) & 0x200, v15);
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  else
  {
    Matches = WebCore::Page::countFindMatches();
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v21)
      v22 = v21 - 16;
    else
      v22 = 0;
    WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v22 + 48));
  }
  if (a4 >= 0xFFFFFFFE)
    v17 = -2;
  else
    v17 = a4;
  if (Matches > v17)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = Matches;
  v19 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
}

uint64_t WebKit::FindController::replaceMatches(uint64_t a1, unsigned int **a2, WTF::String *a3)
{
  unsigned int v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    v22 = 0;
    if (v4 >= 0x3E8)
      v6 = 1000;
    else
      v6 = v4;
    LODWORD(v22) = v6;
    v21 = WTF::fastMalloc((WTF *)(32 * v6));
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *a2;
      v10 = 4 * v7;
      do
      {
        v11 = *v9;
        if (*(_DWORD *)(a1 + 60) > v11)
        {
          v12 = *(_QWORD *)(a1 + 48) + 32 * v11;
          if (v8 == v22)
          {
            WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>((uint64_t)&v21, v12);
            v8 = HIDWORD(v22);
          }
          else
          {
            v13 = v21 + 32 * v8++;
            v14 = *(_QWORD *)v12;
            *(_DWORD *)(v14 + 24) = *(_DWORD *)(*(_QWORD *)v12 + 24) + 2;
            *(_QWORD *)v13 = v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
            v15 = *(_QWORD *)(v12 + 16);
            *(_DWORD *)(v15 + 24) += 2;
            *(_QWORD *)(v13 + 16) = v15;
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v12 + 24);
            HIDWORD(v22) = v8;
          }
          if (v8 >= 0x3E8)
            break;
        }
        ++v9;
        v10 -= 4;
      }
      while (v10);
    }
    v16 = WebCore::Page::replaceRangesWithText();
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v17);
    return v16;
  }
  else
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v19)
      v20 = v19 - 16;
    else
      v20 = 0;
    return WebCore::Page::replaceSelectionWithText(*(WebCore::Page **)(v20 + 48), a3);
  }
}

void WebKit::FindController::frameWithSelection(WebCore::Page *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = *((_QWORD *)a1 + 20);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v4)
  {
    while (*(_BYTE *)(v4 + 144) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 153) != 2)
    {
      v7 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v4 + 48), 0);
      if (!v7)
      {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
        goto LABEL_14;
      }
      v8 = v7;
      v9 = (unsigned int *)(v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      v4 = v8;
    }
    v11 = (unsigned int *)(v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    *a2 = v4;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
LABEL_14:
    *a2 = 0;
  }
}

unsigned int *WebKit::FindController::updateFindUIAfterPageScroll(uint64_t a1, int a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, __int128 *a7, uint64_t *a8)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::LocalFrame *v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebPage *v21;
  uint64_t v22;
  WebKit::PluginView *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t Matches;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::VisibleSelection *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  BOOL v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::PageOverlay *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)();
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned int *result;
  int v59;
  unsigned int v60;
  WTF *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  char v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;

  v15 = (unsigned __int16)a4;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v16)
    v17 = v16 - 16;
  else
    v17 = 0;
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v17 + 48), &v70);
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
      v21 = (WebKit::WebPage *)(v20 - 16);
    else
      v21 = 0;
  }
  else
  {
    v21 = 0;
  }
  v22 = WebKit::WebPage::mainFramePlugIn(v21, v18);
  v23 = (WebKit::PluginView *)v22;
  if (v22)
  {
    ++*(_DWORD *)(v22 + 8);
    v68 = 0;
    v69 = 0;
    if ((a2 & 1) != 0)
    {
      v60 = a6;
      v24 = (v15 >> 5) & 1;
      if ((v15 & 0x100) != 0)
      {
        Matches = WebKit::PluginView::countFindMatches(v22, a3, a4 & 0x1F | (((a4 >> 10) & 1) << 7) | (a4 >> 2) & 0x200, a5 + 1);
        if ((v15 & 0xA0) == 0)
        {
          v28 = (v15 >> 11) & 1;
          goto LABEL_53;
        }
        if (a5 >= 0xFFFFFFFE)
          v25 = -2;
        else
          v25 = a5;
      }
      else
      {
        if ((v15 & 0xA0) == 0)
        {
          Matches = 1;
          v28 = (v15 >> 11) & 1;
          goto LABEL_54;
        }
        if (a5 >= 0xFFFFFFFE)
          v25 = -2;
        else
          v25 = a5;
        if (a5 == -1)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = a5 + 1;
        Matches = WebKit::PluginView::countFindMatches(v22, a3, a4 & 0x1F | (((a4 >> 10) & 1) << 7) | (a4 >> 2) & 0x200, v26);
      }
      v28 = (v15 >> 11) & 1;
      v59 = WebKit::PluginView::drawsFindOverlay(v23) ^ 1;
      goto LABEL_24;
    }
LABEL_38:
    v28 = (v15 >> 11) & 1;
    if (v70 && ((v15 >> 11) & 1) == 0)
      WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(_QWORD *)(v70 + 296) + 3064));
    WebKit::FindController::hideFindIndicator(a1);
    Matches = 0;
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_70;
  }
  v68 = 0;
  v69 = 0;
  if ((a2 & 1) == 0)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v29)
      v30 = v29 - 16;
    else
      v30 = 0;
    WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v30 + 48));
    goto LABEL_38;
  }
  v59 = (v15 >> 5) & 1;
  v60 = a6;
  if ((v15 & 0x100) != 0)
  {
    v31 = WebCore::Page::countFindMatches();
    if ((v15 & 0xA0) == 0)
    {
      Matches = v31;
      v28 = (v15 >> 11) & 1;
      goto LABEL_52;
    }
    if (a5 >= 0xFFFFFFFE)
      v25 = -2;
    else
      v25 = a5;
  }
  else
  {
    if ((v15 & 0xA0) == 0)
    {
      Matches = 1;
      v28 = (v15 >> 11) & 1;
      LOBYTE(v24) = (v15 & 0x20) != 0;
      goto LABEL_54;
    }
    if (a5 >= 0xFFFFFFFE)
      v25 = -2;
    else
      v25 = a5;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v32)
    v33 = v32 - 16;
  else
    v33 = 0;
  WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v33 + 48));
  Matches = WebCore::Page::markAllMatchesForText();
  v28 = (v15 >> 11) & 1;
LABEL_24:
  if (Matches <= v25)
  {
LABEL_52:
    LOBYTE(v24) = v59;
LABEL_53:
    if ((_DWORD)Matches == -1)
      goto LABEL_60;
LABEL_54:
    v34 = *(_DWORD *)(a1 + 64);
    v35 = (Matches & (v34 >> 31)) + v34;
    if (v34 < 0 || v35 >= (int)Matches)
    {
      if (v35 < (int)Matches)
        v36 = 0;
      else
        v36 = Matches;
      *(_DWORD *)(a1 + 64) = v35 - v36;
    }
    goto LABEL_61;
  }
  LOBYTE(v24) = 0;
LABEL_60:
  Matches = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = -1;
LABEL_61:
  if (*((_BYTE *)a7 + 16))
  {
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v37)
      v38 = v37 - 16;
    else
      v38 = 0;
    v39 = (WebCore::VisibleSelection *)WebCore::Page::selection(*(WebCore::Page **)(v38 + 48));
    WebCore::VisibleSelection::firstRange(v39);
    if (v67)
    {
      WebCore::RenderObject::absoluteTextRects();
      v68 = v62;
      v69 = v63;
      v40 = *(unsigned int *)(a1 + 60);
      if ((_DWORD)v40 == *(_DWORD *)(a1 + 56))
      {
        WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>(a1 + 48, (unint64_t)&v64);
      }
      else
      {
        v45 = v40 + 1;
        v46 = *(_QWORD *)(a1 + 48) + 32 * v40;
        v47 = v64;
        *(_DWORD *)(v64 + 24) += 2;
        *(_QWORD *)v46 = v47;
        *(_DWORD *)(v46 + 8) = DWORD2(v64);
        v48 = v65;
        *(_DWORD *)(v65 + 24) += 2;
        *(_QWORD *)(v46 + 16) = v48;
        *(_DWORD *)(v46 + 24) = v66;
        *(_DWORD *)(a1 + 60) = v45;
      }
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64);
    if ((v24 & 1) != 0)
      goto LABEL_76;
  }
  else if ((v24 & 1) != 0)
  {
LABEL_76:
    v49 = *(WebCore::PageOverlay **)(a1 + 16);
    a6 = v60;
    if (!v49)
    {
      WebCore::PageOverlay::create();
      *(_QWORD *)(a1 + 16) = v64;
      if (v23 && (WebKit::PluginView::drawsFindOverlay(v23) & 1) == 0)
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 120) = 1;
      WebCore::PageOverlayController::installPageOverlay();
      v50 = v64;
      *(_QWORD *)&v64 = 0;
      if (v50)
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v50 + 8));
      v49 = *(WebCore::PageOverlay **)(a1 + 16);
    }
    WebCore::PageOverlay::setNeedsDisplay(v49);
    v43 = 1;
    goto LABEL_84;
  }
  a6 = v60;
LABEL_70:
  v41 = *(_QWORD *)(a1 + 16);
  if (v41)
  {
    v42 = (_DWORD *)(v41 + 8);
    ++*(_DWORD *)(v41 + 8);
    WebCore::PageOverlayController::uninstallPageOverlay();
    WTF::RefCounted<WebCore::PageOverlay>::deref(v42);
  }
  v43 = 0;
  if (!a2)
  {
    v44 = 1;
    goto LABEL_85;
  }
LABEL_84:
  v44 = (v15 & 0x40) == 0;
LABEL_85:
  v51 = v70;
  if (v70)
    v52 = WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::unspecifiedBoolTypeInstance;
  else
    v52 = 0;
  if (v23)
  {
    v53 = WebKit::PluginView::drawsFindOverlay(v23) ^ 1;
    if ((v28 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v53 = 0;
    if ((v28 & 1) != 0)
      goto LABEL_100;
  }
  if (v52)
    v53 = 1;
  if (v53)
    v54 = v44;
  else
    v54 = 1;
  if ((v54 & 1) != 0 || !WebKit::FindController::updateFindIndicator((WebKit::FindController *)a1, v43, 1))
    WebKit::FindController::hideFindIndicator(a1);
LABEL_100:
  v64 = *a7;
  v65 = *((_QWORD *)a7 + 2);
  v55 = *(unsigned int *)(a1 + 64);
  v56 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, __int128 *, WTF **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, &v64, &v68, Matches, v55, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  result = (unsigned int *)v68;
  if (v68)
  {
    v68 = 0;
    LODWORD(v69) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
  }
  if (!v23)
  {
LABEL_105:
    if (!v51)
      return result;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v51 + 8));
  }
  if (*((_DWORD *)v23 + 2) != 1)
  {
    --*((_DWORD *)v23 + 2);
    goto LABEL_105;
  }
  result = (unsigned int *)(*(uint64_t (**)(WebKit::PluginView *))(*(_QWORD *)v23 + 8))(v23);
  if (v51)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v51 + 8));
  return result;
}

uint64_t WebKit::FindController::findStringIncludingImages(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  _QWORD *v13;

  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v8 = a3 | (unint64_t)(a4 << 32);
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v10 = &off_1E34F13B0;
  v10[1] = v5;
  if (v7)
    *(_DWORD *)v7 += 2;
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v13 = v10;
  WebCore::Page::analyzeImagesForFindInPage();
  result = (uint64_t)v13;
  if (v13)
    result = (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v11);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

void WebKit::FindController::findString(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  WebKit::WebPage *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char String;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  _BOOL4 v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (WebKit::WebPage *)(v10 - 16);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  v12 = a3;
  v13 = WebKit::WebPage::mainFramePlugIn(v11, a2);
  v14 = v13;
  if (v13)
    ++*(_DWORD *)(v13 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v15)
    v16 = v15 - 16;
  else
    v16 = 0;
  WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v16, (WebKit::WebPage *)1);
  v50 = a4;
  v49 = (uint64_t *)a5;
  if (!v14)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v24)
      v25 = v24 - 16;
    else
      v25 = 0;
    WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v25 + 48), &v55);
    v26 = v55;
    if (v55)
    {
      WebCore::FrameSelection::selectionBounds();
      v29 = v28 <= 0.0 || v27 <= 0.0;
      if (v29)
      {
        WebCore::Page::findTextMatches();
        v31 = *(unsigned int *)(a1 + 60);
        if ((_DWORD)v31)
          WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v31));
        v32 = *(WTF **)(a1 + 48);
        if (v32)
        {
          *(_QWORD *)(a1 + 48) = 0;
          *(_DWORD *)(a1 + 56) = 0;
          WTF::fastFree(v32, v30);
        }
        *(_QWORD *)(a1 + 48) = v52;
        v33 = v53;
        v52 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 56) = v33;
        *(_DWORD *)(a1 + 64) = v54;
        WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v30);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v26 + 8));
    }
    else
    {
      LOBYTE(v29) = 0;
    }
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
    WebCore::Page::findString();
    LOBYTE(v21) = v52;
    a5 = v52 >> 8;
    v23 = v54;
    v48 = v53;
    if (!(_BYTE)v54)
    {
      LOBYTE(v22) = 0;
      goto LABEL_49;
    }
    if ((v12 & 0x800) != 0)
      goto LABEL_46;
    WebKit::FindController::didFindString((WebKit::FindController *)a1);
    if (v29)
      goto LABEL_46;
    goto LABEL_41;
  }
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
  String = WebKit::PluginView::findString(v14, (uint64_t)a2, v12 & 0x1F | (((v12 >> 10) & 1) << 7) | (v12 >> 2) & 0x200 | 0x40, a4);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 64) + 40) + 8) + 528);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    v20 = v19 ? String : 0;
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(v19 + 32);
      v48 = *(_QWORD *)(v19 + 40);
      a5 = v21 >> 8;
      LOBYTE(v22) = 1;
      v23 = 1;
      if ((v12 & 0x800) != 0)
        goto LABEL_49;
LABEL_35:
      WebKit::FindController::didFindString((WebKit::FindController *)a1);
      v23 = v22;
LABEL_41:
      if ((v12 & 8) != 0)
      {
        v22 = -1;
      }
      else
      {
        v22 = 1;
        if ((v12 & 0x200) != 0)
          goto LABEL_49;
      }
      *(_DWORD *)(a1 + 64) += v22;
LABEL_46:
      LOBYTE(v22) = 1;
      goto LABEL_49;
    }
  }
  if ((String & 1) != 0)
  {
    LOBYTE(v21) = 0;
    if ((v12 & 0x800) != 0)
    {
      LOBYTE(v22) = 1;
      v23 = 0;
      goto LABEL_49;
    }
    LOBYTE(v22) = 0;
    goto LABEL_35;
  }
  LOBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  v23 = 0;
LABEL_49:
  v34 = *(_QWORD *)(a1 + 8);
  if (v34 && (v35 = *(_QWORD *)(v34 + 8)) != 0)
  {
    v51 = v35 - 16;
    CFRetain(*(CFTypeRef *)(v35 - 8));
    v36 = *(_QWORD *)(a1 + 8);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 8);
      if (v37)
        v38 = v37 - 16;
      else
        v38 = 0;
      v39 = *(_QWORD *)(v38 + 72);
    }
    else
    {
      v39 = MEMORY[0x48];
    }
    v40 = v12;
    CFRetain(*(CFTypeRef *)(v35 - 8));
    v41 = 0;
  }
  else
  {
    v40 = v12;
    v51 = 0;
    v39 = MEMORY[0x48];
    v41 = 1;
  }
  v42 = *(WTF::StringImpl **)a2;
  if (v42)
    *(_DWORD *)v42 += 2;
  v43 = v21 | (a5 << 8);
  v44 = *v49;
  *v49 = 0;
  v45 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v45 = &off_1E34F13D8;
  *(_QWORD *)(v45 + 8) = v51;
  *(_BYTE *)(v45 + 16) = v22;
  if (v42)
    *(_DWORD *)v42 += 2;
  *(_QWORD *)(v45 + 24) = v42;
  *(_WORD *)(v45 + 32) = v40;
  *(_DWORD *)(v45 + 36) = v50;
  *(_BYTE *)(v45 + 40) = 0;
  *(_DWORD *)(v45 + 41) = v55;
  *(_DWORD *)(v45 + 44) = *(_DWORD *)((char *)&v55 + 3);
  *(_QWORD *)(v45 + 48) = v43;
  *(_QWORD *)(v45 + 56) = v48;
  *(_BYTE *)(v45 + 64) = v23;
  *(_QWORD *)(v45 + 72) = v44;
  v52 = v45;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v39 + 312))(v39, &v52);
  v47 = v52;
  v52 = 0;
  if (v47)
    (*(void (**)(unint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (!v42)
  {
LABEL_67:
    if ((v41 & 1) != 0)
      goto LABEL_69;
    goto LABEL_68;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    goto LABEL_67;
  }
  WTF::StringImpl::destroy(v42, v46);
  if ((v41 & 1) == 0)
LABEL_68:
    CFRelease(*(CFTypeRef *)(v51 + 8));
LABEL_69:
  if (v14)
  {
    if (*(_DWORD *)(v14 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    else
      --*(_DWORD *)(v14 + 8);
  }
}

uint64_t WebKit::FindController::findStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  void *v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  WTF::StringImpl *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD v56[2];
  uint64_t v57;
  int v58;
  int v59;

  WebCore::Page::findTextMatches();
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v11));
  v12 = *(WTF **)(a1 + 48);
  if (v12)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v12, v10);
  }
  *(_QWORD *)(a1 + 48) = v53;
  v13 = v54;
  v14 = HIDWORD(v54);
  v53 = 0;
  v54 = 0;
  *(_DWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 60) = v14;
  v51 = 0;
  v52 = 0;
  if (!(_DWORD)v14)
    goto LABEL_20;
  if (v14 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x19764452CLL);
  }
  v15 = WTF::fastMalloc((WTF *)(16 * v14));
  LODWORD(v52) = v14;
  v51 = v15;
  if (*(_DWORD *)(a1 + 60))
  {
    v16 = v15;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      WebCore::RenderObject::absoluteTextRects();
      v20 = (char *)v18 + v16;
      *(_QWORD *)v20 = v57;
      *((_DWORD *)v20 + 2) = v58;
      *((_DWORD *)v20 + 3) = v59;
      ++v19;
      v18 = (WTF *)((char *)v18 + 16);
      v17 += 32;
    }
    while (v19 < *(unsigned int *)(a1 + 60));
    HIDWORD(v52) = v19;
    v50 = 0;
    if ((_DWORD)v19)
    {
      v48 = a4;
      if (v19 >> 28)
      {
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x197644524);
      }
      v21 = WTF::fastMalloc(v18);
      LODWORD(v50) = v19;
      v49 = v21;
      v22 = (char *)v18 + v16;
      v23 = v21;
      do
      {
        v24 = *(unsigned int *)(v16 + 12);
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 12) = v24;
        if ((_DWORD)v24)
        {
          if (v24 >> 28)
            goto LABEL_44;
          v25 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v24));
          *(_DWORD *)(v23 + 8) = v24;
          *(_QWORD *)v23 = v25;
          v26 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v26)
          {
            v27 = *(__int128 **)v16;
            v28 = 16 * v26;
            do
            {
              v29 = *v27++;
              *v25++ = v29;
              v28 -= 16;
            }
            while (v28);
          }
        }
        v23 += 16;
        v16 += 16;
      }
      while (v22 != (char *)v16);
      a4 = v48;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
LABEL_20:
    LODWORD(v19) = 0;
    v21 = 0;
    v50 = 0;
  }
  v30 = v55;
  v31 = *a5;
  *a5 = 0;
  v49 = 0;
  v50 = 0;
  v56[0] = 0;
  v56[1] = 0;
  v57 = v21;
  v58 = v19;
  v59 = v19;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v31 + 16))(v31, &v57, v30);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v32);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v34);
  if ((a3 & 0x60) != 0)
  {
    v36 = *(_DWORD *)(a1 + 60) != 0;
    v37 = *(_QWORD *)(a1 + 8);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      v39 = v38 - 16;
      if (v38)
        v40 = v38 - 16;
      else
        v40 = 0;
      v41 = *(_QWORD *)(v40 + 72);
      if (v38)
        CFRetain(*(CFTypeRef *)(v38 - 8));
      else
        v39 = 0;
    }
    else
    {
      v39 = 0;
      v41 = MEMORY[0x48];
    }
    v42 = *a2;
    if (v42)
      *(_DWORD *)v42 += 2;
    v43 = a3 | (unint64_t)(a4 << 32);
    v44 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v44 = &off_1E34F1400;
    *(_QWORD *)(v44 + 8) = v39;
    *(_BYTE *)(v44 + 16) = v36;
    if (v42)
      *(_DWORD *)v42 += 2;
    *(_QWORD *)(v44 + 24) = v42;
    *(_QWORD *)(v44 + 32) = v43;
    v57 = v44;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 312))(v41, &v57);
    v45 = v57;
    v57 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v35);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v35);
  return WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v46);
}

WTF *WebKit::FindController::findRectsForStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  void *v10;
  uint64_t v11;
  WTF *result;
  int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  int v45;
  _QWORD v46[2];
  _QWORD v47[2];

  WebCore::Page::findTextMatches();
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v11));
  result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, v10);
  }
  *(_QWORD *)(a1 + 48) = v42;
  v13 = v43;
  v14 = HIDWORD(v43);
  v42 = 0;
  v43 = 0;
  *(_DWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 60) = v14;
  v40 = 0;
  v41 = 0;
  if ((_DWORD)v14)
  {
    if (v14 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v15 = (WTF *)WTF::fastMalloc((WTF *)(16 * v14));
    LODWORD(v41) = v14;
    v40 = v15;
    if (*(_DWORD *)(a1 + 60))
    {
      v16 = 0;
      v17 = 0;
      v18 = (_DWORD *)((char *)v15 + 8);
      do
      {
        v19 = *(_QWORD *)(a1 + 48) + v16;
        WebCore::RenderObject::absoluteTextRects();
        v46[0] = WebCore::unionRect();
        v46[1] = v20;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v47, (const WebCore::IntRect *)v46);
        v22 = v44;
        if (v44)
        {
          v44 = 0;
          v45 = 0;
          WTF::fastFree(v22, v21);
        }
        WebCore::ScrollView::contentsToRootView(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 40) + 8) + 528)+ 8)+ 288), (const WebCore::FloatRect *)v47);
        *(v18 - 2) = v23;
        *(v18 - 1) = v24;
        *v18 = v25;
        v18[1] = v26;
        v18 += 4;
        ++v17;
        v16 += 32;
      }
      while (v17 < *(unsigned int *)(a1 + 60));
      HIDWORD(v41) = v17;
    }
  }
  v27 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v27 + 16))(v27, &v40);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if ((a3 & 0x60) != 0)
  {
    v29 = *(_DWORD *)(a1 + 60) != 0;
    v30 = *(_QWORD *)(a1 + 8);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      v32 = v31 - 16;
      if (v31)
        v33 = v31 - 16;
      else
        v33 = 0;
      v34 = *(_QWORD *)(v33 + 72);
      if (v31)
        CFRetain(*(CFTypeRef *)(v31 - 8));
      else
        v32 = 0;
    }
    else
    {
      v32 = 0;
      v34 = MEMORY[0x48];
    }
    v35 = *a2;
    if (v35)
      *(_DWORD *)v35 += 2;
    v36 = a3 | (unint64_t)(a4 << 32);
    v37 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v37 = &off_1E34F1450;
    *(_QWORD *)(v37 + 8) = v32;
    *(_BYTE *)(v37 + 16) = v29;
    if (v35)
      *(_DWORD *)v35 += 2;
    *(_QWORD *)(v37 + 24) = v35;
    *(_QWORD *)(v37 + 32) = v36;
    v47[0] = v37;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v34 + 312))(v34, v47);
    v38 = v47[0];
    v47[0] = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v28);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v39 = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v39, v28);
  }
  return (WTF *)WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v28);
}

unsigned int *WebKit::FindController::getImageForFindMatch(unsigned int *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::WebFrame *v15;
  WebKit *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  WebKit *v30;
  WebKit::WebFrame *v31[8];
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  __int16 v51;
  char v52;
  IPC::Encoder *v53;

  if (this[15] > a2)
  {
    v3 = (uint64_t)this;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 32 * a2) + 40) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
        v9 = *(_QWORD *)(v8 + 56);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
        v33 = v9;
        v34 = *(_DWORD *)(v8 + 64);
        v35 = *(_BYTE *)(v8 + 68);
        v10 = *(_QWORD *)(v8 + 72);
        if (v10)
          *(_DWORD *)(v10 + 24) += 2;
        v36 = v10;
        v37 = *(_DWORD *)(v8 + 80);
        v38 = *(_BYTE *)(v8 + 84);
        v11 = *(_QWORD *)(v8 + 88);
        if (v11)
          *(_DWORD *)(v11 + 24) += 2;
        v39 = v11;
        v40 = *(_DWORD *)(v8 + 96);
        v41 = *(_BYTE *)(v8 + 100);
        v12 = *(_QWORD *)(v8 + 104);
        if (v12)
          *(_DWORD *)(v12 + 24) += 2;
        v42 = v12;
        v43 = *(_DWORD *)(v8 + 112);
        v44 = *(_BYTE *)(v8 + 116);
        v13 = *(_QWORD *)(v8 + 120);
        if (v13)
          *(_DWORD *)(v13 + 24) += 2;
        v45 = v13;
        v46 = *(_DWORD *)(v8 + 128);
        v47 = *(_BYTE *)(v8 + 132);
        v14 = *(_QWORD *)(v8 + 136);
        if (v14)
          *(_DWORD *)(v14 + 24) += 2;
        v48 = v14;
        v49 = *(_DWORD *)(v8 + 144);
        v50 = *(_BYTE *)(v8 + 148);
        v51 = *(_WORD *)(v8 + 152);
        v52 = *(_BYTE *)(v8 + 154);
        if (this[15] <= a2)
        {
          __break(0xC471u);
          return this;
        }
        WebCore::VisibleSelection::VisibleSelection();
        WebCore::FrameSelection::setSelection();
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v31);
        WebKit::WebFrame::fromCoreFrame(v5, v31);
        v15 = v31[0];
        WebKit::WebFrame::createSelectionSnapshot(v31[0], &v30);
        if (v15)
          CFRelease(*((CFTypeRef *)v15 + 1));
        WebCore::FrameSelection::setSelection();
        v16 = v30;
        if (!v30)
          goto LABEL_34;
        WebKit::WebImage::createHandle((uint64_t)v30, 1, v31);
        if (v32 && (v17 = *((_QWORD *)v16 + 2)) != 0)
        {
          v18 = (_DWORD *)(v17 + 16);
          v19 = *(_QWORD *)(v3 + 8);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
              v21 = v20 - 16;
            else
              v21 = 0;
          }
          else
          {
            v21 = 0;
          }
          v23 = *(_QWORD *)(v21 + 32);
          v22 = v21 + 32;
          v24 = (*(uint64_t (**)(uint64_t))(v23 + 56))(v22);
          v25 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v25 = 1894;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(v25 + 528) = v25 + 16;
          *(_QWORD *)(v25 + 536) = v25 + 16;
          *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v25 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
          v53 = (IPC::Encoder *)v25;
          IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode((IPC::Encoder *)v25, v18);
          IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode((IPC::Encoder *)v25, (unint64_t)v31);
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 4uLL, 4) = a2;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v22 + 32))(v22, &v53, 0);
          v27 = v53;
          v53 = 0;
          if (v27)
          {
            IPC::Encoder::~Encoder(v27, v26);
            WTF::fastFree(v28, v29);
          }
          v16 = v30;
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v31);
          if (!v16)
            goto LABEL_34;
        }
        else
        {
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v31);
        }
        CFRelease(*((CFTypeRef *)v16 + 1));
LABEL_34:
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
      }
    }
  }
  return this;
}

unsigned int *WebKit::FindController::selectFindMatch(unsigned int *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[104];

  if (this[15] > a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 32 * a2) + 40) + 8) + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        if (this[15] <= a2)
        {
          __break(0xC471u);
        }
        else
        {
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v6);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
        }
      }
    }
  }
  return this;
}

void WebKit::FindController::indicateFindMatch(WebKit::FindController *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v5, (WebKit::WebPage *)1);
  WebKit::FindController::selectFindMatch((unsigned int *)this, a2);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v7 + 48), &v8);
  if (v8)
  {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    WebKit::FindController::didFindString(this);
    WebKit::FindController::updateFindIndicator(this, *((_QWORD *)this + 2) != 0, 1);
  }
}

uint64_t WebKit::FindController::willMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
    *(_QWORD *)(result + 16) = 0;
  return result;
}

WTF *WebKit::FindController::drawRect(WebKit::FindController *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, int8x16_t *a4)
{
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebPage *v10;
  uint64_t v11;
  WebCore::ScrollView *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::ScrollView *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  const FloatRect *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  WTF *result;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  FloatRect *v61;
  WTF *v62;
  uint64_t v63;
  WebCore::ScrollView *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  WTF *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  int64x2_t v76;
  uint64_t v77;
  char v78;
  int v79;
  WTF *v80;
  uint64_t v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  unsigned int v89;

  v7.i64[0] = 0xFFFFFFFF00000000;
  v7.i64[1] = 0xFFFFFFFF00000000;
  v76 = vaddq_s64((int64x2_t)vbslq_s8(v7, *a4, (int8x16_t)vaddq_s64(*(int64x2_t *)a4, (int64x2_t)xmmword_1978D0E60)), (int64x2_t)xmmword_1978D0E70);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebKit::WebPage *)(v9 - 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = WebKit::WebPage::mainFramePlugIn(v10, a2);
  if (v11)
  {
    v12 = (WebCore::ScrollView *)v11;
    ++*(_DWORD *)(v11 + 8);
    WebKit::PluginView::rectsForTextMatchesInRect((unsigned __int8 *)v11, (const WebCore::IntRect *)&v76, &v80);
LABEL_7:
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v12 + 8))(v12);
    else
      --*((_DWORD *)v12 + 2);
    goto LABEL_10;
  }
  v80 = 0;
  v81 = 0;
  v52 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v52)
    v53 = v52 - 16;
  else
    v53 = 0;
  v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v53 + 48) + 160) + 56))(*(_QWORD *)(*(_QWORD *)(v53 + 48) + 160));
  v12 = (WebCore::ScrollView *)v54;
  if (v54)
    ++*(_DWORD *)(v54 + 8);
  v55 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v55)
    v56 = v55 - 16;
  else
    v56 = 0;
  v57 = *(_QWORD *)(*(_QWORD *)(v56 + 48) + 160);
  v58 = (unsigned int *)(v57 + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 + 1, v58));
  if (v57)
  {
    while (1)
    {
      if (!*(_BYTE *)(v57 + 144))
      {
        v60 = *(_QWORD *)(v57 + 296);
        if (v60)
        {
          *(_DWORD *)(v60 + 24) += 2;
          if (!*(_QWORD *)(v60 + 1496))
            WebCore::Document::ensureMarkers((WebCore::Document *)v60);
          WebCore::DocumentMarkerController::renderedRectsForMarkers();
          v62 = (WTF *)v87;
          if (v89)
          {
            v63 = 16 * v89;
            do
            {
              v86 = *(_OWORD *)v62;
              if (*(_QWORD *)(*(_QWORD *)(v57 + 128) + 8) != v57)
              {
                v64 = *(WebCore::ScrollView **)(v57 + 288);
                v82[0] = WebCore::enclosingIntRect((WebCore *)&v86, v61);
                v82[1] = v65;
                v83[0] = WebCore::ScrollView::contentsToWindow(v64, (const WebCore::IntRect *)v82);
                v83[1] = v66;
                v84[0] = WebCore::ScrollView::windowToContents(v12, (const WebCore::IntRect *)v83);
                v84[1] = v67;
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v85, (const WebCore::IntRect *)v84);
                v86 = v85;
              }
              if (*((float *)&v86 + 2) > 0.0 && *((float *)&v86 + 3) > 0.0)
              {
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v85, (const WebCore::IntRect *)&v76);
                if ((WebCore::FloatRect::intersects((WebCore::FloatRect *)&v86, (const WebCore::FloatRect *)&v85) & 1) != 0)
                {
                  v68 = HIDWORD(v81);
                  if (HIDWORD(v81) == (_DWORD)v81)
                  {
                    v69 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v80, HIDWORD(v81) + 1, (unint64_t)&v86);
                    v68 = HIDWORD(v81);
                    v70 = v80;
                    v71 = *v69;
                  }
                  else
                  {
                    v70 = v80;
                    v71 = v86;
                  }
                  *((_OWORD *)v70 + v68) = v71;
                  ++HIDWORD(v81);
                }
              }
              v62 = (WTF *)((char *)v62 + 16);
              v63 -= 16;
            }
            while (v63);
            v62 = (WTF *)v87;
          }
          if (v62)
          {
            v87 = 0;
            v88 = 0;
            WTF::fastFree(v62, v61);
          }
          if (*(_DWORD *)(v60 + 24) == 2)
          {
            if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v60);
          }
          else
          {
            *(_DWORD *)(v60 + 24) -= 2;
          }
        }
      }
      v72 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v57 + 48), 0);
      if (!v72)
        break;
      v73 = v72;
      v74 = (unsigned int *)(v72 + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 + 1, v74));
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v57 + 8));
      v57 = v73;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v57 + 8));
  }
  if (v12)
    goto LABEL_7;
LABEL_10:
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v76, (const WebCore::IntRect *)a4);
  v87 = 0x110400001A1A1A40;
  (*(void (**)(WebCore::GraphicsContext *, int64x2_t *, uint64_t *))(*(_QWORD *)a3 + 224))(a3, &v76, &v87);
  if ((v87 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v13);
    }
  }
  WebCore::PathUtilities::pathsWithShrinkWrappedRects();
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v76.i64[0] = 0;
  v76.i32[2] = 1065353216;
  v77 = 0x1104000000000080;
  v78 = 0;
  v79 = 1065353216;
  WebCore::GraphicsContext::setDropShadow((uint64_t)a3, (uint64_t)&v76);
  if ((v77 & 0x8000000000000) != 0)
  {
    v46 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v14);
    }
  }
  v76.i64[0] = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)&v76);
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if ((v76.i64[0] & 0x8000000000000) != 0)
  {
    v49 = (unsigned int *)(v76.i64[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v15);
    }
  }
  if (*((float *)a3 + 47) != 2.0)
  {
    *((_DWORD *)a3 + 46) |= 8u;
    *((_DWORD *)a3 + 47) = 0x40000000;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if (v89)
  {
    v16 = v87;
    v17 = 72 * v89;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 184))(a3, v16);
      v16 += 72;
      v17 -= 72;
    }
    while (v17);
  }
  WebCore::GraphicsContext::clearDropShadow(a3);
  if (*((_BYTE *)a3 + 194))
    v18 = 0;
  else
    v18 = *((_BYTE *)a3 + 195) == 1;
  if (!v18)
  {
    *((_WORD *)a3 + 97) = 256;
    *((_DWORD *)a3 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if (v89)
  {
    v19 = v87;
    v20 = 72 * v89;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 176))(a3, v19);
      v19 += 72;
      v20 -= 72;
    }
    while (v20);
  }
  if (*((_BYTE *)this + 24))
  {
    v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v22 = v21 ? v21 - 16 : 0;
    WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v22 + 48), (uint64_t *)&v85);
    v23 = v85;
    if ((_QWORD)v85)
    {
      v24 = *(WebCore::ScrollView **)(v85 + 288);
      WebCore::FrameSelection::selectionBounds();
      *(_QWORD *)&v86 = __PAIR64__(v26, v25);
      *((_QWORD *)&v86 + 1) = __PAIR64__(v28, v27);
      v76.i64[0] = WebCore::enclosingIntRect((WebCore *)&v86, v29);
      v76.i64[1] = v30;
      v31 = WebCore::ScrollView::contentsToRootView(v24, (const WebCore::IntRect *)&v76);
      v34 = *((_DWORD *)this + 7) == (_DWORD)v31 && *((_DWORD *)this + 8) == HIDWORD(v31);
      if (v34 && (*((_DWORD *)this + 9) == v32 ? (v35 = *((_DWORD *)this + 10) == v33) : (v35 = 0), v35))
      {
        *(_QWORD *)&v85 = 0;
      }
      else
      {
        v36 = (unsigned int *)*((_QWORD *)this + 1);
        if (v36)
        {
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
        }
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v38 = &off_1E34F1478;
        v38[1] = v36;
        v76.i64[0] = (uint64_t)v38;
        WTF::callOnMainRunLoop();
        v39 = v76.i64[0];
        v76.i64[0] = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v23 = v85;
        *(_QWORD *)&v85 = 0;
        if (!v23)
          goto LABEL_48;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
    }
  }
LABEL_48:
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v40);
  result = v80;
  if (v80)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    return (WTF *)WTF::fastFree(result, v41);
  }
  return result;
}

uint64_t WebCore::GraphicsContext::setDropShadow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;
  int v8;
  _QWORD v9[2];
  char v10;

  v4 = a1 + 8;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  WebCore::Color::Color((WebCore::Color *)v9, (const Color *)(a2 + 16));
  v9[1] = *(_QWORD *)(a2 + 24);
  v10 = 1;
  WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>(v4, 64, 192, &v7);
  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v4);
}

uint64_t WebCore::GraphicsContext::clearDropShadow(WebCore::GraphicsContext *this)
{
  char *v2;
  void *v3;
  uint64_t v5[4];
  char v6;

  v2 = (char *)this + 8;
  LOBYTE(v5[0]) = 0;
  v6 = 0;
  WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>((uint64_t)this + 8, 64, 192, v5);
  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, v2);
}

uint64_t WebKit::FindController::mouseEvent(WebKit::FindController *a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 8) == 6)
    WebKit::FindController::hideFindUI(a1);
  return 0;
}

uint64_t WebKit::WebPreviewLoaderClient::supportsPasswordEntry(WebKit::WebPreviewLoaderClient *this)
{
  return 1;
}

uint64_t WebKit::DrawingArea::layerTreeStateIsFrozen(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::supportsAsyncScrolling(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::usesDelegatedPageScaling(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::shouldUseTiledBackingForFrameView()
{
  return 0;
}

uint64_t WebKit::DrawingArea::graphicsLayerFactory(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::scheduleRenderingUpdate(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::activityStateDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::DrawingArea::addMilestonesToDispatch()
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
        v4 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 144;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = a1 + a3;
  result = std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(a1 + a3, (uint64_t)a4);
  if ((result & 1) == 0)
  {
    result = std::__optional_storage_base<WebCore::GraphicsDropShadow,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::GraphicsDropShadow,false> const&>(v7, a4);
    *(_DWORD *)(a1 + 176) |= a2;
  }
  return result;
}

BOOL std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;

  if (*(_BYTE *)(a1 + 32))
    v2 = *(_BYTE *)(a2 + 32) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v4 = *(float *)a1 == *(float *)a2 && *(float *)(a1 + 4) == *(float *)(a2 + 4);
  if (!v4 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x8000000000000) == 0)
    return (v6 & 0x8000000000000) == 0 && v5 == v6;
  if ((v6 & 0x8000000000000) == 0)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
  v13 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
  v14 = v10;
  do
  {
    if (*((float *)&v14 + v9) != *((float *)&v13 + v9))
      break;
    v8 = v9++ > 2;
  }
  while (v9 != 4);
  v11 = HIBYTE(v6);
  v12 = BYTE6(v5) == BYTE6(v6);
  if (HIBYTE(v5) != (_DWORD)v11)
    v12 = 0;
  return v8 && v12;
}

uint64_t std::__optional_storage_base<WebCore::GraphicsDropShadow,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::GraphicsDropShadow,false> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      v4 = *a2;
      *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = v4;
      result = WebCore::Color::operator=();
      *(_QWORD *)(v3 + 24) = a2[3];
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    return std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    v5 = *a2;
    *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)result = v5;
    result = WebCore::Color::Color((WebCore::Color *)(result + 16), (const Color *)a2 + 2);
    *(_QWORD *)(v3 + 24) = a2[3];
    *(_BYTE *)(v3 + 32) = 1;
  }
  return result;
}

unsigned int *WebCore::GraphicsContextState::setStrokeColor(WebCore::GraphicsContextState *this, const WebCore::Color *a2)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  WebCore::SourceBrush::SourceBrush();
  result = (unsigned int *)WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>((uint64_t)this, 4, 88, &v10);
  if (v12 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E34F1310[v12])(&v7, &v11);
  v12 = -1;
  if ((v10 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  if (v9 != -1)
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E34F1310[v9])(&v7, &v8);
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::EventDispatcher::internalWheelEvent(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebWheelEvent const&,WebCore::RectEdges<BOOL>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::KeyboardScrollingAnimator *v6;
  uint64_t v7;
  uint64_t v8;

  {
    v1 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = a1;
    v1 = (uint64_t *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess((WebKit::WebProcess *)v1);
    a1 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v1 + 14, &v8);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 1760);
      if (v5)
      {
        v6 = *(WebCore::KeyboardScrollingAnimator **)(v5 + 8);
        if (v6)
          WebCore::KeyboardScrollingAnimator::stopScrollingImmediately(v6);
      }
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];
  uint64_t v11;

  v6 = *a1;
  if (*a1)
    v6 += 144 * *(unsigned int *)(v6 - 4);
  if ((_QWORD *)v6 == a2)
  {
    v10[0] = &v11;
    v10[1] = 1;
    WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::VectorBuffer(a3, (uint64_t)v10);
    return (uint64_t *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v9);
  }
  result = (uint64_t *)WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::VectorBuffer(a3, (uint64_t)(a2 + 2));
  if (*a1)
  {
    v8 = *a1 + 144 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v8 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v8 = 0;
  }
  if ((_QWORD *)v8 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  result = (uint64_t *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 2), a2 + 2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(144 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = v8 + 48;
    do
    {
      *(_QWORD *)(v11 - 32) = 0;
      *(_QWORD *)(v11 - 16) = v11;
      *(_QWORD *)(v11 - 8) = 1;
      v11 += 144;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(v5 + 144 * v12);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 144 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 144 * v23 + 16, v9);
          *v24 = *v14;
          WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::VectorBuffer(v25, v5 + 144 * v12 + 16);
          WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 144 * v12 + 16, v26);
          if (v14 == a3)
            v13 = v24;
        }
        else
        {
          WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 144 * v12 + 16, v9);
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  result = (uint64_t *)(v2 + 144 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 144 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 144 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

WTF *WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  uint64_t v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 12);
      *((_QWORD *)v3 + 12) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      result = (WTF *)*((_QWORD *)v3 + 6);
      if (result)
      {
        *((_QWORD *)v3 + 6) = 0;
        *((_DWORD *)v3 + 14) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 112);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

__n128 WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::EventDispatcher::TouchEventData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;

  v3 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 112 * a1[3];
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v6 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v6;
  result = *(__n128 *)(v3 + 64);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(v3 + 80);
  *(__n128 *)(v4 + 64) = result;
  v8 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v4 + 96) = v8;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 112 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  WTF *v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *((_DWORD *)result + 3);
    if (a2 < 2)
    {
      v6 = (uint64_t)result + 16;
      *(_QWORD *)result = (char *)result + 16;
      *((_DWORD *)result + 2) = 1;
    }
    else
    {
      if (a2 >= 0x2492493)
      {
        __break(0xC471u);
        return result;
      }
      v5 = 112 * a2;
      v6 = WTF::fastMalloc((WTF *)(112 * a2));
      *((_DWORD *)v2 + 2) = (613566757 * (unint64_t)(v5 >> 4)) >> 32;
      *(_QWORD *)v2 = v6;
    }
    result = WTF::VectorMover<false,WebKit::EventDispatcher::TouchEventData>::move(v3, (WTF *)((char *)v3 + 112 * v4), v6);
    if ((WTF *)((char *)v2 + 16) != v3 && v3 != 0)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::EventDispatcher::touchEvent(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebTouchEvent const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::WebProcess *v16;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 8);
  kdebug_trace();
  v3 = (unsigned __int8 *)(v1 + 32);
  if (__ldaxr((unsigned __int8 *)(v1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v1 + 32);
LABEL_5:
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 32));
    if (v5)
      goto LABEL_8;
LABEL_17:
    v9 = 0;
    LODWORD(v7) = 0;
    goto LABEL_19;
  }
  if (__stlxr(0, v3))
    goto LABEL_16;
  if (!v5)
    goto LABEL_17;
LABEL_8:
  v7 = *(unsigned int *)(v5 - 4);
  v8 = v5 + 144 * v7;
  if (*(_DWORD *)(v5 - 12))
  {
    v9 = v5;
    if ((_DWORD)v7)
    {
      v10 = 144 * v7;
      v9 = v5;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 144;
        v10 -= 144;
        if (!v10)
        {
          v9 = v8;
          goto LABEL_14;
        }
      }
    }
    goto LABEL_14;
  }
  v9 = v5 + 144 * v7;
LABEL_19:
  v8 = v5 + 144 * v7;
  if (v5)
  {
LABEL_14:
    v11 = v5 + 144 * *(unsigned int *)(v5 - 4);
    goto LABEL_21;
  }
  v11 = 0;
LABEL_21:
  while (v9 != v11)
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v16);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    v18 = *(_QWORD *)v9;
    v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v12 + 14, &v18);
    if (v13)
    {
      v14 = v13;
      CFRetain(*(CFTypeRef *)(v13 + 8));
      WebKit::WebPage::dispatchAsynchronousTouchEvents(v14, (unsigned int *)(v9 + 16));
      CFRelease(*(CFTypeRef *)(v14 + 8));
    }
    v15 = v9 + 144;
    v9 = v8;
    if (v15 != v8)
    {
      v9 = v15;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 144;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v2);
  return kdebug_trace();
}

void WTF::Detail::CallableWrapper<WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  char v20;
  WebKit::WebProcess *v21;
  unsigned __int8 v22[24];
  int v23;
  __int128 v24;
  IPC::Encoder *v25;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 145);
  v4 = *(unsigned __int8 *)(a1 + 144);
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  *(_QWORD *)v22 = v2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v5 + 14, v22);
  if (v6)
  {
    v7 = v6;
    v8 = (char *)(a1 + 32);
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v9 = *(_QWORD *)(v7 + 48);
    if (v9)
    {
      v9 = *(_QWORD *)(v9 + 160);
      if (v9)
      {
        v24 = *(_OWORD *)(v9 + 32);
        WebKit::WebPage::wheelEvent(v7, (uint64_t *)&v24, (uint64_t)v8, (uint64_t)v22);
        if (v23)
          v10 = 1;
        else
          v10 = v22[0] == 0;
        LOBYTE(v9) = !v10;
      }
    }
    if (!v4 && (v3 & 2) != 0)
    {
      v11 = *v8;
      {
        v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v20 = v9;
        v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v12 = WebKit::WebProcess::WebProcess(v21);
        LOBYTE(v9) = v20;
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
      }
      v13 = *((_QWORD *)v12 + 4);
      v22[0] = 0;
      LOBYTE(v23) = 0;
      LOBYTE(v24) = v11;
      BYTE1(v24) = v9;
      *((_QWORD *)&v24 + 1) = v22;
      v14 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v14 = 1907;
      *(_QWORD *)(v14 + 8) = v2;
      *(_QWORD *)(v14 + 528) = v14 + 16;
      *(_QWORD *)(v14 + 536) = v14 + 16;
      *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v14 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
      v25 = (IPC::Encoder *)v14;
      IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v14, (uint64_t)&v24);
      IPC::Connection::sendMessageImpl(v13, (uint64_t *)&v25, 0, 0);
      v16 = v25;
      v25 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v17, v18);
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

char *IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData> const&>(a1, *(_QWORD *)(a2 + 8));
}

unint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 32 * v4;
  v7 = *(_QWORD *)result;
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(*(_QWORD *)result + 24) + 2;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  *(_DWORD *)(v8 + 24) += 2;
  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197646568);
    }
    v3 = result;
    v4 = (uint64_t *)*result;
    v5 = (uint64_t *)(*result + 32 * *((unsigned int *)result + 3));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *v3 = v6;
    result = WTF::VectorMover<false,WebCore::SimpleRange>::move(v4, v5, v6);
    if (v4)
    {
      if ((uint64_t *)*v3 == v4)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WebCore::SimpleRange>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
      v7 = v5[2];
      v5[2] = 0;
      *(_QWORD *)(a3 + 16) = v7;
      *(_DWORD *)(a3 + 24) = *((_DWORD *)v5 + 6);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v5 + 2);
      result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v5);
      v5 += 4;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34F13B0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34F13B0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  _BYTE v8[24];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    WebKit::FindController::findString(*(_QWORD *)(v2 + 432), (WebCore::LocalFrame *)(a1 + 16), *(_WORD *)(a1 + 24), *(unsigned int *)(a1 + 28), a1 + 32);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v8[0] = 0;
    v8[16] = 0;
    (*(void (**)(uint64_t, _BYTE *, WTF **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, v8, &v6, 0, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = v6;
    if (v6)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      WTF::fastFree(v5, v4);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34F13D8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F13D8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 448);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 64);
  return WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, a1 + 24, v3, v4, v5, &v7, (uint64_t *)(a1 + 72));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34F1400;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F1400;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  __int128 v9;
  char v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 448);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = a1 + 24;
  v4 = *(unsigned __int16 *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  LOBYTE(v9) = 0;
  v10 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34F1428;
  v8 = v6;
  WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, v3, v4, v5, 0, &v9, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34F1450;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F1450;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  __int128 v9;
  char v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 448);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = a1 + 24;
  v4 = *(unsigned __int16 *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  LOBYTE(v9) = 0;
  v10 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34F1428;
  v8 = v6;
  WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, v3, v4, v5, 0, &v9, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34F1478;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F1478;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::call(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return WebKit::FindController::updateFindIndicator(*(WebKit::FindController **)(v2 + 432), 1, 0);
  }
  return result;
}

unsigned int *WebKit::VisitedLinkTableController::getOrCreate@<X0>(WebKit *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  _QWORD v17[3];
  WebKit *v18;

  v18 = a1;
  WebKit::visitedLinkTableControllers(a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&qword_1ECE72FB0, (uint64_t *)&v18, (uint64_t)v17);
  v3 = v17[0];
  v4 = *(_QWORD *)(v17[0] + 8);
  if (v4 && (v13 = *(_QWORD *)(v4 + 8)) != 0)
  {
    result = (unsigned int *)(v13 - 32);
    v14 = *(_DWORD *)(v13 - 24);
    *(_DWORD *)(v13 - 24) = v14 + 2;
    *a2 = (uint64_t *)(v13 - 32);
    v15 = __CFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    else
      *(_DWORD *)(v13 - 24) = v16;
  }
  else
  {
    v5 = (uint64_t *)WTF::fastMalloc((WTF *)0x50);
    v6 = WebKit::VisitedLinkTableController::VisitedLinkTableController(v5, (uint64_t)v18);
    *a2 = v6;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6 + 10, (uint64_t)(v5 + 4));
    v8 = (unsigned int *)v5[5];
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    result = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v8;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  return result;
}

uint64_t *WebKit::VisitedLinkTableController::VisitedLinkTableController(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  WebKit::WebProcess *Only;
  WebKit::WebProcess *v7;

  v4 = (_QWORD *)WebCore::VisitedLinkStore::VisitedLinkStore((WebCore::VisitedLinkStore *)a1);
  *v4 = off_1E34F14A0;
  v4[4] = &unk_1E34F14D8;
  v5 = (uint64_t)(v4 + 4);
  v4[5] = 0;
  v4[6] = a2;
  Only = (WebKit::WebProcess *)WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly(v4 + 7);
  v7 = WebKit::WebProcess::singleton(Only);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v7, 0x98u, a1[6], v5);
  return a1;
}

void WebKit::VisitedLinkTableController::~VisitedLinkTableController(WebKit::VisitedLinkTableController *this)
{
  WebKit::WebProcess *v2;
  unsigned __int8 *v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v20;
  WebKit::WebProcess *v21;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0x98u, *((_QWORD *)this + 6));
  WebKit::visitedLinkTableControllers((WebKit *)v3);
  if (qword_1ECE72FB0)
  {
    v5 = *((_QWORD *)this + 6);
    v6 = *(_DWORD *)(qword_1ECE72FB0 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(qword_1ECE72FB0 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(qword_1ECE72FB0 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_10;
      }
      v10 = *(unsigned int *)(qword_1ECE72FB0 - 4);
    }
LABEL_10:
    if (v10 != *(_DWORD *)(qword_1ECE72FB0 - 4))
    {
      v13 = (_QWORD *)(qword_1ECE72FB0 + 16 * v10);
      v14 = (unsigned int *)v13[1];
      *v13 = -1;
      v13[1] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v4);
        }
      }
      ++*(_DWORD *)(qword_1ECE72FB0 - 16);
      if (qword_1ECE72FB0)
        v17 = *(_DWORD *)(qword_1ECE72FB0 - 12) - 1;
      else
        v17 = -1;
      *(_DWORD *)(qword_1ECE72FB0 - 12) = v17;
      if (qword_1ECE72FB0)
      {
        v18 = *(_DWORD *)(qword_1ECE72FB0 - 4);
        if (6 * *(_DWORD *)(qword_1ECE72FB0 - 12) < v18 && v18 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&qword_1ECE72FB0, v18 >> 1, 0);
      }
    }
  }
  v20 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v20);
  *((_QWORD *)this + 4) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v4);
  WebCore::VisitedLinkStore::~VisitedLinkStore(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::VisitedLinkTableController::~VisitedLinkTableController(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::VisitedLinkTableController::~VisitedLinkTableController(WebKit::VisitedLinkTableController *this)
{
  WebKit::VisitedLinkTableController::~VisitedLinkTableController((WebKit::VisitedLinkTableController *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebKit::VisitedLinkTableController::~VisitedLinkTableController((WebKit::VisitedLinkTableController *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::VisitedLinkTableController::setVisitedLinkTable(WebCore::VisitedLinkStore *a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int *v4;

  result = (unsigned int *)WebCore::SharedMemory::map();
  if (v4)
  {
    v3 = v4;
    v4 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)a1 + 56, &v3);
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    WebCore::VisitedLinkStore::invalidateStylesForAllLinks(a1);
    result = v4;
    v4 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::VisitedLinkTableController::removeAllVisitedLinks(WebKit::VisitedLinkTableController *this)
{
  unsigned int *v3;

  v3 = 0;
  WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)this + 56, &v3);
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  return WebCore::VisitedLinkStore::invalidateStylesForAllLinks(this);
}

_DWORD *WebKit::WebBackForwardListProxy::addItemFromUIProcess(uint64_t a1, _QWORD *a2, _DWORD **a3, uint64_t a4, char a5)
{
  _DWORD *result;
  uint64_t v9;
  _DWORD *v10;

  if ((a5 & 1) != 0)
    goto LABEL_5;
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  result = (_DWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::idToHistoryItemMap(void)::map, a2);
  if ((result & 1) == 0)
  {
LABEL_5:
    {
      WebKit::idToHistoryItemMap(void)::map = 0;
    }
    v10 = *a3;
    result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::HistoryItem*>(&WebKit::idToHistoryItemMap(void)::map, a2, &v10, (uint64_t)&v9);
    if (*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

WebCore::BackForwardCache *WebKit::WebBackForwardListProxy::removeItem(_QWORD *a1)
{
  uint64_t *v1;
  WebCore::BackForwardCache *result;
  WebCore::BackForwardCache *v3;
  WebCore::HistoryItem *v4;
  WebCore::HistoryItem *v5;

  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  v1 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::idToHistoryItemMap(void)::map, a1);
  result = (WebCore::BackForwardCache *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::take(&WebKit::idToHistoryItemMap(void)::map, (uint64_t)v1, &v5);
  if (v5)
  {
    v3 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(result);
    WebCore::BackForwardCache::remove(v3, v5);
    WebCore::Page::clearPreviousItemFromAllPages(v5, v4);
    result = v5;
    v5 = 0;
    if (result)
      return (WebCore::BackForwardCache *)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebBackForwardListProxy::addItem(WTF::StringImpl *result, uint64_t a2, uint64_t a3, WebKit **a4)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit *v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  WebKit::ViewSnapshot *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[2];
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int *v41;
  WebKit::ViewSnapshot *v42;
  uint64_t v43[2];
  WebCore::SerializedScriptValue *v44;

  v43[0] = a2;
  v43[1] = a3;
  v4 = *((_QWORD *)result + 2);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return result;
  v6 = result;
  {
    v7 = WebKit::idToHistoryItemMap(void)::map;
    v8 = *a4;
    v9 = (_QWORD *)((char *)*a4 + 352);
    if (WebKit::idToHistoryItemMap(void)::map)
    {
LABEL_5:
      v10 = *(_DWORD *)(v7 - 8);
      goto LABEL_6;
    }
  }
  else
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
    v8 = *a4;
    v9 = (_QWORD *)((char *)*a4 + 352);
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&WebKit::idToHistoryItemMap(void)::map, 0);
  v7 = WebKit::idToHistoryItemMap(void)::map;
  if (WebKit::idToHistoryItemMap(void)::map)
    goto LABEL_5;
  v10 = 0;
LABEL_6:
  LODWORD(v38[0]) = -1640531527;
  WORD2(v38[0]) = 0;
  BYTE6(v38[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v38, v9);
  v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v38) & v10;
  v12 = (_QWORD *)(v7 + 24 * v11);
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != *v9 || v13 != v9[1])
    {
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v10;
      v12 = (_QWORD *)(v7 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
      if (*(_OWORD *)v12 == 0)
      {
        if (v15)
        {
          v15[1] = 0;
          v15[2] = 0;
          *v15 = 0;
          --*(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 16);
          v12 = v15;
        }
        goto LABEL_15;
      }
    }
    goto LABEL_25;
  }
LABEL_15:
  *(_OWORD *)v12 = *(_OWORD *)v9;
  if (v8)
    ++*(_DWORD *)v8;
  v17 = (_DWORD *)v12[2];
  v12[2] = v8;
  if (v17)
    WTF::RefCounted<WebCore::HistoryItem>::deref(v17);
  if (WebKit::idToHistoryItemMap(void)::map)
    v18 = *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12) = v18;
  if (WebKit::idToHistoryItemMap(void)::map)
    v19 = *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 16) + v19);
  v21 = *(unsigned int *)(WebKit::idToHistoryItemMap(void)::map - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_25;
LABEL_45:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&WebKit::idToHistoryItemMap(void)::map, (uint64_t)v12);
    goto LABEL_25;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_45;
LABEL_25:
  if (*((_BYTE *)v6 + 32))
    *((_BYTE *)v6 + 32) = 0;
  v22 = *((_QWORD *)v6 + 2);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
      v24 = v23 - 16;
    else
      v24 = 0;
  }
  else
  {
    v24 = 0;
  }
  WebKit::toBackForwardListItemState(*a4, (uint64_t)v38);
  v26 = *(_QWORD *)(v24 + 32);
  v25 = v24 + 32;
  v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 1836;
  *(_QWORD *)(v28 + 8) = v27;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v44 = (WebCore::SerializedScriptValue *)v28;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v28, v43);
  IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode((IPC::Encoder *)v28, v38);
  (*(void (**)(uint64_t, WebCore::SerializedScriptValue **, _QWORD))(*(_QWORD *)v25 + 32))(v25, &v44, 0);
  v30 = v44;
  v44 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  v33 = v42;
  v42 = 0;
  if (v33)
    WTF::RefCounted<WebKit::ViewSnapshot>::deref(v33);
  v34 = v41;
  v41 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      v44 = (WebCore::SerializedScriptValue *)v34;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v44);
    }
  }
  WebKit::FrameState::~FrameState(&v40);
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebBackForwardListProxy::goToItem(uint64_t this, WebCore::HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  int v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WebKit::WebBackForwardListProxy *v20;
  int v21;
  _QWORD v22[2];
  int v23;
  unint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;
  char v28;

  v2 = *(_QWORD *)(this + 16);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v5 = this;
  v7 = *(_QWORD *)(v3 + 16);
  v6 = v3 + 16;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  if (v9)
  {
    v10 = v9;
    v27 = 0;
    IPC::Connection::createSyncMessageEncoder(3650, v8, &v27, (uint64_t *)&v26);
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v26, (uint64_t *)a2 + 44);
    IPC::Connection::sendSyncMessage(v10, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
    v11 = v25;
    if (v25)
    {
      if (v25 == 1)
      {
        LOBYTE(v22[0]) = (_BYTE)v24;
LABEL_11:
        v23 = v11;
        v16 = v11;
LABEL_12:
        ((void (*)(char *, unint64_t **))off_1E34F16D0[v16])(&v28, &v24);
LABEL_13:
        v17 = v26;
        v26 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v14);
          WTF::fastFree(v18, v19);
        }
        if (v11)
          v12 = 0;
        else
          v12 = v10;
        goto LABEL_18;
      }
    }
    else
    {
      v13 = IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(v24);
      if (!(_BYTE)v14)
      {
        LOBYTE(v22[0]) = 13;
        v11 = 1;
        v23 = 1;
        v16 = v25;
        if (v25 == -1)
          goto LABEL_13;
        goto LABEL_12;
      }
      if (!v25)
      {
        v10 = v13;
        v15 = v24;
        v24 = 0;
        v22[0] = v15;
        v22[1] = v13;
        goto LABEL_11;
      }
    }
    v20 = (WebKit::WebBackForwardListProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebBackForwardListProxy::itemAtIndex(v20, v21);
  }
  v12 = 0;
  LOBYTE(v22[0]) = 3;
  v11 = 1;
  v23 = 1;
LABEL_18:
  if (!*(_BYTE *)(v5 + 32))
    *(_BYTE *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 24) = v12;
  return ((uint64_t (*)(unint64_t **, _QWORD *))off_1E34F1618[v11])(&v24, v22);
}

_QWORD *WebKit::WebBackForwardListProxy::itemAtIndex@<X0>(_QWORD *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int v18;
  char v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  _DWORD *v27;
  char *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  _QWORD *v32;
  WebKit::WebProcess *v33;
  _BYTE v34[32];
  int v35;
  void **v36;
  int v37;
  IPC::Encoder *v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = this[2];
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    *a3 = 0;
    return this;
  }
  LODWORD(v6) = a2;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = this;
    v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v33);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    v5 = *(_QWORD *)(v32[2] + 8);
  }
  v8 = *((_QWORD *)v7 + 4);
  if (v5)
    v9 = v5 - 16;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v9 + 40);
  v39 = 0;
  IPC::Connection::createSyncMessageEncoder(3651, v10, &v39, (uint64_t *)&v38);
  v11 = v38;
  v12 = *((_QWORD *)v38 + 68);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *((_QWORD *)v38 + 69);
  if (v15 >= v13 + 4)
  {
    v16 = (_QWORD *)*((_QWORD *)v38 + 66);
    goto LABEL_10;
  }
  v29 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v30 = v29;
    v29 *= 2;
  }
  while (v30 < v14);
  this = mmap(0, v30, 3, 4098, -1, 0);
  if (this != (_QWORD *)-1)
  {
    v16 = this;
    memcpy(this, *((const void **)v11 + 66), *((_QWORD *)v11 + 68));
    v31 = (char *)*((_QWORD *)v11 + 66);
    if (v31 != (char *)v11 + 16)
      munmap(v31, *((_QWORD *)v11 + 69));
    *((_QWORD *)v11 + 66) = v16;
    *((_QWORD *)v11 + 69) = v30;
    v12 = *((_QWORD *)v11 + 68);
LABEL_10:
    bzero((char *)v16 + v12, v13 - v12);
    *((_QWORD *)v11 + 68) = v14;
    v17 = (_DWORD *)(*((_QWORD *)v11 + 66) + v13);
    *((_QWORD *)v11 + 67) = v17 + 1;
    *v17 = (_DWORD)v6;
    IPC::Connection::sendSyncMessage(v8, v39, (uint64_t *)&v38, 0, (uint64_t)&v36, INFINITY);
    if (v37)
    {
      if (v37 == 1)
      {
        v34[0] = (_BYTE)v36;
        LODWORD(v6) = 1;
        v35 = 1;
        v18 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v6 = v36;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)v36, (uint64_t)v34);
      if (!v34[24])
      {
        v21 = *v6;
        v22 = (uint64_t)v6[1];
        *v6 = 0;
        v6[1] = 0;
        v23 = (uint64_t)v6[3];
        if (v23 && v22)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v23 + 16))(v23, v21);
        v34[0] = 13;
        LODWORD(v6) = 1;
        v35 = 1;
        v18 = v37;
        if (v37 == -1)
        {
LABEL_20:
          v24 = v38;
          v38 = 0;
          if (v24)
          {
            IPC::Encoder::~Encoder(v24, v21);
            WTF::fastFree(v25, v26);
          }
          if ((_DWORD)v6 || (*(_OWORD *)v40 = *(_OWORD *)&v34[8], *(_QWORD *)&v40[16] = *(_QWORD *)&v34[24], !v34[24]))
          {
            v27 = 0;
LABEL_28:
            *a3 = v27;
            return (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E34F1628[v6])(v40, v34);
          }
          v28 = &_MergedGlobals_106;
          {
LABEL_26:
            v27 = (_DWORD *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::idToHistoryItemMap(void)::map, v40);
            if (v27)
              ++*v27;
            goto LABEL_28;
          }
LABEL_39:
          WebKit::idToHistoryItemMap(void)::map = 0;
          v28[2816] = 1;
          goto LABEL_26;
        }
LABEL_19:
        ((void (*)(_BYTE *, void ***))off_1E34F16D0[v18])(v40, &v36);
        goto LABEL_20;
      }
      v19 = v34[0];
      *(_OWORD *)v40 = *(_OWORD *)&v34[1];
      *(_QWORD *)&v40[15] = *(_QWORD *)&v34[16];
      v18 = v37;
      if (!v37)
      {
        LODWORD(v6) = 0;
        v20 = (uint64_t *)v36;
        v36 = 0;
        *(_OWORD *)&v34[9] = *(_OWORD *)v40;
        *(_QWORD *)&v34[24] = *(_QWORD *)&v40[15];
        *(_QWORD *)v34 = v20;
        v34[8] = v19;
        v35 = 0;
        goto LABEL_19;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_39;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebBackForwardListProxy::backListCount(WebKit::WebBackForwardListProxy *this)
{
  return *(unsigned int *)WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(this);
}

char **WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(WebKit::WebBackForwardListProxy *this)
{
  char **v1;
  char *v4;
  char *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  int v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  _QWORD v18[2];
  int v19;
  unint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v1 = (char **)((char *)this + 24);
  if (*((_BYTE *)this + 32))
    return v1;
  v4 = (char *)*((_QWORD *)this + 2);
  if (!v4)
    goto LABEL_22;
  v4 = (char *)*((_QWORD *)v4 + 1);
  if (!v4)
    goto LABEL_22;
  v5 = &_MergedGlobals_106;
    goto LABEL_29;
  v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v5 = (char *)*((_QWORD *)v6 + 4);
    v7 = v4 ? (uint64_t)(v4 - 16) : 0;
    v8 = *(_QWORD *)(v7 + 40);
    v23 = 0;
    IPC::Connection::createSyncMessageEncoder(3653, v8, &v23, (uint64_t *)&v22);
    IPC::Connection::sendSyncMessage((uint64_t)v5, v23, (uint64_t *)&v22, 0, (uint64_t)&v20, INFINITY);
    v9 = v21;
    if (!v21)
      break;
    if (v21 == 1)
    {
      LOBYTE(v18[0]) = (_BYTE)v20;
LABEL_14:
      v19 = v9;
      v13 = v9;
LABEL_15:
      ((void (*)(char *, unint64_t **))off_1E34F16D0[v13])(&v24, &v20);
      goto LABEL_16;
    }
LABEL_28:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    v5[2488] = 1;
    v4 = *(char **)(*((_QWORD *)this + 2) + 8);
  }
  v10 = IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(v20);
  if ((_BYTE)v11)
  {
    if (!v21)
    {
      v5 = (char *)v10;
      v12 = v20;
      v20 = 0;
      v18[0] = v12;
      v18[1] = v10;
      goto LABEL_14;
    }
    goto LABEL_28;
  }
  LOBYTE(v18[0]) = 13;
  v9 = 1;
  v19 = 1;
  v13 = v21;
  if (v21 != -1)
    goto LABEL_15;
LABEL_16:
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v15, v16);
  }
  ((void (*)(unint64_t **, _QWORD *))off_1E34F1648[v9])(&v20, v18);
  if (v9)
    v4 = 0;
  else
    v4 = v5;
  if (!*((_BYTE *)this + 32))
LABEL_22:
    *((_BYTE *)this + 32) = 1;
  *v1 = v4;
  return v1;
}

uint64_t WebKit::WebBackForwardListProxy::forwardListCount(WebKit::WebBackForwardListProxy *this)
{
  return *((unsigned int *)WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(this) + 1);
}

uint64_t WebKit::WebBackForwardListProxy::containsItem(WebKit::WebBackForwardListProxy *this, const WebCore::HistoryItem *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  void *v12;
  int v13;
  uint64_t *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  BOOL v18;
  WebKit::WebBackForwardListProxy *v20;
  uint64_t *v21;
  char v22;
  int v23;
  uint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;
  char v28;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 48))(v4 + 32);
  if (v6)
  {
    v7 = v6;
    v27 = 0;
    IPC::Connection::createSyncMessageEncoder(3652, v5, &v27, (uint64_t *)&v26);
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v26, (uint64_t *)a2 + 44);
    IPC::Connection::sendSyncMessage(v7, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
    v8 = v25;
    if (v25)
    {
      if (v25 == 1)
      {
        v9 = 0;
        LOBYTE(v21) = (_BYTE)v24;
LABEL_14:
        v23 = v8;
        v13 = v8;
        goto LABEL_15;
      }
    }
    else
    {
      v11 = IPC::Decoder::decode<std::tuple<BOOL>>(v24);
      if (v11 < 0x100u)
      {
        v9 = 0;
        v10 = 0;
        LOBYTE(v21) = 13;
        v8 = 1;
        v23 = 1;
        v13 = v25;
        if (v25 == -1)
        {
LABEL_16:
          v15 = v26;
          v26 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v12);
            WTF::fastFree(v16, v17);
          }
          goto LABEL_18;
        }
LABEL_15:
        ((void (*)(char *, uint64_t **))off_1E34F16D0[v13])(&v28, &v24);
        v10 = v9;
        goto LABEL_16;
      }
      if (!v25)
      {
        v9 = v11;
        v14 = v24;
        v24 = 0;
        v21 = v14;
        v22 = v11;
        goto LABEL_14;
      }
    }
    v20 = (WebKit::WebBackForwardListProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebBackForwardListProxy::close(v20);
  }
  v10 = 0;
  LOBYTE(v21) = 3;
  v8 = 1;
  v23 = 1;
LABEL_18:
  ((void (*)(uint64_t **, uint64_t **))off_1E34F1638[v8])(&v24, &v21);
  if (v8)
    v18 = 1;
  else
    v18 = v10 == 0;
  return !v18;
}

unsigned int *WebKit::WebBackForwardListProxy::close(WebKit::WebBackForwardListProxy *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  if (!*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  return result;
}

IPC::Encoder *WebKit::WebBackForwardListProxy::clear(WebKit::WebBackForwardListProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (!*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(v3 + 32);
  v4 = v3 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1837;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::WebCookieJar::addChangeListener(uint64_t a1, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  uint64_t result;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v56;
  int v57;
  WebKit::WebProcess *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  WTF *v62;
  void *v63;
  WebKit::WebProcess *v64;
  _BYTE v65[24];
  WTF *v66;

  v5 = (uint64_t *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 80);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 80), 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 24 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v10 = (_QWORD *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *a2, (const WTF::StringImpl *)a3) & 1) != 0)
      goto LABEL_27;
LABEL_13:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    v13 = (uint64_t)v10;
  }
  WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)a2);
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v16)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v16, v15);
  *(_QWORD *)(v13 + 16) = 0;
  v17 = *v5;
  if (*v5)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v5;
  if (*v5)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
LABEL_26:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_26;
  }
LABEL_27:
  v23 = (uint64_t *)(v13 + 8);
  v24 = *(_DWORD *)(v13 + 20);
  v25 = *(_DWORD *)(v13 + 16) + 1;
  *(_DWORD *)(v13 + 16) = v25;
  if (v25 <= v24)
    goto LABEL_58;
  v26 = *v23;
  if (!*v23)
    goto LABEL_53;
  v27 = *(_DWORD *)(v26 - 4);
  if (!v27)
  {
LABEL_52:
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_55;
  }
  v28 = 0;
  do
  {
    while (1)
    {
      v29 = *(_QWORD *)(v26 + 8 * --v27);
      if ((unint64_t)(v29 + 1) >= 2 && !*(_QWORD *)(v29 + 8))
        break;
      if (!v27)
        goto LABEL_40;
    }
    *(_QWORD *)(v26 + 8 * v27) = 0;
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      WTF::fastFree((WTF *)v29, v15);
    }
    *(_QWORD *)(v26 + 8 * v27) = -1;
    ++v28;
  }
  while (v27);
LABEL_40:
  v26 = *v23;
  if (v28)
  {
    *(_DWORD *)(v26 - 16) += v28;
    v32 = *v23;
    if (*v23)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    *(_DWORD *)(v32 - 12) = v33 - v28;
    v26 = *v23;
  }
  if (!v26)
  {
LABEL_53:
    v36 = 0;
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_56;
  }
  v34 = *(_DWORD *)(v26 - 4);
  if (v34 < 9 || 6 * *(_DWORD *)(v26 - 12) >= v34)
    goto LABEL_52;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v13 + 8));
  v26 = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(v13 + 16) = 0;
  if (v26)
  {
LABEL_55:
    v36 = *(_DWORD *)(v26 - 12);
    v37 = 0x7FFFFFFF;
    if (v36 < 0x7FFFFFFF)
      goto LABEL_56;
  }
  else
  {
    v36 = 0;
LABEL_56:
    v37 = v36;
  }
  *(_DWORD *)(v13 + 20) = 2 * v37;
LABEL_58:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a3 + 2, (uint64_t)a3);
  v38 = (unsigned int *)*((_QWORD *)a3 + 1);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 + 1, v38));
  v66 = (WTF *)v38;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(v13 + 8), &v66, (uint64_t)v65);
  result = (uint64_t)v66;
  v66 = 0;
  if (result)
  {
    do
    {
      v50 = __ldaxr((unsigned int *)result);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, (unsigned int *)result));
    if (!v51)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v41);
    }
  }
  if (v38)
  {
    do
    {
      v43 = __ldaxr(v38);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v38));
    if (!v44)
    {
      atomic_store(1u, v38);
      result = WTF::fastFree((WTF *)v38, v41);
    }
  }
  v45 = *v23;
  if (!*v23)
    goto LABEL_94;
  v46 = *(_DWORD *)(v45 - 4);
  if (!v46)
  {
LABEL_93:
    *(_DWORD *)(v13 + 16) = 0;
LABEL_97:
    v56 = *(_DWORD *)(v45 - 12);
    if (v56 >= 0x7FFFFFFF)
      v57 = -2;
    else
      v57 = 2 * v56;
    *(_DWORD *)(v13 + 20) = v57;
    if (*(_DWORD *)(v45 - 12) <= 1u)
      goto LABEL_101;
    return result;
  }
  v47 = 0;
  do
  {
    while (1)
    {
      result = *(_QWORD *)(v45 + 8 * --v46);
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!v46)
        goto LABEL_82;
    }
    *(_QWORD *)(v45 + 8 * v46) = 0;
    do
    {
      v48 = __ldaxr((unsigned int *)result);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)result));
    if (!v49)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v41);
    }
    *(_QWORD *)(v45 + 8 * v46) = -1;
    ++v47;
  }
  while (v46);
LABEL_82:
  v45 = *v23;
  if (v47)
  {
    *(_DWORD *)(v45 - 16) += v47;
    v52 = *v23;
    if (*v23)
      v53 = *(_DWORD *)(v52 - 12);
    else
      v53 = 0;
    *(_DWORD *)(v52 - 12) = v53 - v47;
    v45 = *v23;
  }
  if (!v45)
  {
LABEL_94:
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_95;
  }
  v54 = *(_DWORD *)(v45 - 4);
  if (v54 < 9 || 6 * *(_DWORD *)(v45 - 12) >= v54)
    goto LABEL_93;
  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v13 + 8));
  v45 = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(v13 + 16) = 0;
  if (v45)
    goto LABEL_97;
LABEL_95:
  *(_DWORD *)(v13 + 20) = 0;
LABEL_101:
  if (v65[16])
  {
    {
      v58 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v64 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v58 = WebKit::WebProcess::WebProcess(v64);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v58;
    }
    v59 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v58) + 24);
    v60 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v60 = 274;
    *(_QWORD *)(v60 + 8) = 0;
    *(_QWORD *)(v60 + 528) = v60 + 16;
    *(_QWORD *)(v60 + 536) = v60 + 16;
    *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v60 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
    v66 = (WTF *)v60;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v60, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v59, (uint64_t *)&v66, 1, 0);
    result = (uint64_t)v66;
    v66 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v61);
      return WTF::fastFree(v62, v63);
    }
  }
  return result;
}

uint64_t WebKit::WebCookieCache::cookiesAdded(uint64_t result, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v3;
  WebKit::WebCookieCache *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = (WebKit::WebCookieCache *)result;
    v7 = *(_DWORD *)(v3 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      result = *(_QWORD *)(v3 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result)
          return result;
        result = WTF::equal((WTF *)result, *a2, (const WTF::StringImpl *)a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = a3[3];
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)a3;
      v14 = 136 * v12;
      do
      {
        WebKit::WebCookieCache::inMemoryStorageSession(v6);
        result = WebCore::NetworkStorageSession::setCookie();
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t WebKit::WebCookieCache::cookiesDeleted(uint64_t result, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v3;
  WebKit::WebCookieCache *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = (WebKit::WebCookieCache *)result;
    v7 = *(_DWORD *)(v3 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      result = *(_QWORD *)(v3 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result)
          return result;
        result = WTF::equal((WTF *)result, *a2, (const WTF::StringImpl *)a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = a3[3];
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)a3;
      v14 = 136 * v12;
      do
      {
        WebKit::WebCookieCache::inMemoryStorageSession(v6);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = off_1E34F16F0;
        v16 = v15;
        WebCore::NetworkStorageSession::deleteCookie();
        result = (uint64_t)v16;
        if (v16)
          result = (*(uint64_t (**)(_QWORD *))(*v16 + 8))(v16);
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  return result;
}

void WebKit::WebCookieCache::clear(WebKit::WebCookieCache *this)
{
  WTF::StringImpl ***v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WebKit::WebProcess *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;

  v2 = (WTF::StringImpl ***)((char *)this + 16);
  v4 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
  v5 = (WTF::StringImpl **)v3;
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v6)
    v7 = &v6[*((unsigned int *)v6 - 1)];
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      {
        v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v8 = WebKit::WebProcess::WebProcess(v9);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
      }
      WebKit::WebCookieJar::removeChangeListener(*((_QWORD *)v8 + 51), v4, this);
      while (++v4 != v5)
      {
        if ((unint64_t)*v4 + 1 > 1)
          goto LABEL_11;
      }
      v4 = v5;
LABEL_11:
      ;
    }
    while (v4 != v7);
    v6 = *v2;
  }
  if (v6)
  {
    *v2 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v3);
  }
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    WebCore::NetworkStorageSession::operator delete(v10, 0x128uLL);
}

uint64_t WebKit::WebCookieJar::removeChangeListener(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WebKit::WebProcess *v13;
  WTF::StringImpl **v14;

  v6 = (uint64_t *)(a1 + 80);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  v8 = (uint64_t *)result;
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    v9 += 24 * *(unsigned int *)(v9 - 4);
  if (v9 != result)
  {
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(result + 8, a3);
    result = WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v8 + 1);
    if ((_DWORD)result)
    {
      if (*v6)
      {
        v10 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
        if ((uint64_t *)v10 == v8)
          goto LABEL_12;
      }
      else
      {
        if (!v8)
        {
LABEL_12:
          {
            v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v11 = WebKit::WebProcess::WebProcess(v13);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
          }
          v12 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v11) + 24);
          v14 = a2;
          return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::UnsubscribeFromCookieChangeNotifications>(v12, (uint64_t **)&v14, 0, 1, 0);
        }
        v10 = 0;
      }
      if ((uint64_t *)v10 != v8)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6, (WTF::StringImpl *)v8);
      goto LABEL_12;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebCookieCache::clearForHost(WebKit::WebCookieCache *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  _QWORD *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit::WebProcess *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12[2];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[2];

  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(&v13, (uint64_t *)this + 2, a2);
  v4 = v13;
  if (v13)
  {
    WebKit::WebCookieCache::inMemoryStorageSession(this);
    *(_DWORD *)v4 += 2;
    v14[0] = v4;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12, (_DWORD **)v14, 1uLL);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34F1718;
    v11 = v5;
    WebCore::NetworkStorageSession::deleteCookiesForHostnames();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
    v8 = v14[0];
    v14[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        v8 = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = WebKit::WebProcess::singleton(v8);
    WebKit::WebCookieJar::removeChangeListener(*((_QWORD *)v9 + 51), &v13, this);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(WTF::StringImpl **a1, uint64_t *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **result;
  uint64_t v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a2, a3, (const WTF::StringImpl *)a3);
  v6 = *a2;
  if (*a2)
    v6 += 8 * *(unsigned int *)(v6 - 4);
  if ((WTF::StringImpl **)v6 == result)
  {
    v7 = 0;
  }
  else
  {
    v7 = *result;
    *result = 0;
    result = (WTF::StringImpl **)WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(a2, result);
  }
  *a1 = v7;
  return result;
}

BOOL WebKit::shouldRelaxThirdPartyCookieBlocking(WebKit *this, const WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  if (!this)
    return 0;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *, const WebKit::WebFrame *))(*v6 + 1368))(v6, a2) & 1) != 0)
    return 0;
  v7 = *(_QWORD *)(v6[2] + 8);
  if (!v7)
    return 0;
  CFRetain(*(CFTypeRef *)(v7 - 8));
  v8 = *(_QWORD *)(v7 + 32);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + 1683) != 0;
  else
    v9 = 0;
  CFRelease(*(CFTypeRef *)(v7 - 8));
  return v9;
}

void WebKit::WebCookieJar::setCookies(WebKit::WebCookieJar *this, WebCore::Document *a2, const WTF::URL *a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebKit::WebFrame *v17;
  IPC::Encoder *v18;
  IPC::Encoder *v19;
  _QWORD *v20;
  const WTF::URL *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WebKit::WebFrame *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebKit::WebProcess *v29;
  uint64_t v30;
  char v31;
  const WebKit::WebFrame *v32;
  char shouldRelaxThirdPartyCookieBlocking;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  int v39;
  int i;
  int v41;
  uint64_t *v42;
  WebKit::WebProcess *v43;
  WebKit::WebCookieCache *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48[2];
  char v49;
  __int16 v50;
  char v51;
  uint64_t v52;
  IPC::Encoder *v53[2];
  char v54;

  v4 = *((_QWORD *)a2 + 66);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      WebKit::WebFrame::fromCoreFrame(v6, &v52);
      v10 = v52;
      if (v52)
      {
        v11 = *(_QWORD *)(v52 + 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16);
                if (((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0)
                {
                  if (*(_QWORD *)(v15[2] + 8))
                  {
                    v16 = WebCore::CookieJar::sameSiteInfo();
                    v50 = v16;
                    v51 = BYTE2(v16);
                    v49 = 0;
                    v17 = (WebCore::Document *)((char *)a2 + 1008);
                    if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v10, (WebCore::Document *)((char *)a2 + 1008), a3, &v49))
                    {
                      WebKit::WebCookieJar::setCookiesInPartitionedCookieStorage((uint64_t)this, a2, a3, &v50, (uint64_t)a4);
                    }
                    else
                    {
                      v18 = *(IPC::Encoder **)(v10 + 80);
                      v19 = *(IPC::Encoder **)(v10 + 88);
                      v48[0] = (uint64_t)v18;
                      v48[1] = (uint64_t)v19;
                      v20 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8)
                                                                           + 24)
                                                               + 8)
                                                   + 48)
                                       + 16);
                      (*(void (**)(_QWORD *))(*v20 + 1368))(v20);
                      v22 = *(_QWORD *)(v20[2] + 8);
                      if (v22)
                        v23 = v22 - 16;
                      else
                        v23 = 0;
                      v24 = *(_QWORD *)(v23 + 40);
                      if (WebKit::WebCookieJar::isEligibleForCache((WebKit::WebCookieJar *)v10, v17, a3, v21))
                      {
                        WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v25);
                        v26 = WTF::URL::host(a3);
                        v28 = *((_QWORD *)this + 6);
                        if (v28)
                        {
                          v44 = (WebKit::WebCookieJar *)((char *)this + 32);
                          v47 = *(_DWORD *)(v28 - 8);
                          v45 = (unsigned __int8 *)v26;
                          v46 = v27;
                          v39 = WTF::StringViewHashTranslator::hash(v26, v27);
                          for (i = 0; ; v39 = i + v41)
                          {
                            v41 = v39 & v47;
                            v42 = (uint64_t *)(v28 + 8 * (v39 & v47));
                            if (*v42 != -1)
                            {
                              if (!*v42)
                                goto LABEL_17;
                              if (WTF::StringViewHashTranslator::equal(v42, v45, v46))
                                break;
                            }
                            ++i;
                          }
                          WebKit::WebCookieCache::inMemoryStorageSession(v44);
                          v53[0] = v18;
                          v53[1] = v19;
                          v54 = 1;
                          WebCore::NetworkStorageSession::setCookiesFromDOM();
                        }
                      }
LABEL_17:
                      {
                        v29 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
                      }
                      else
                      {
                        v43 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                        v29 = WebKit::WebProcess::WebProcess(v43);
                        WebKit::WebProcess::singleton(void)::process = (uint64_t)v29;
                      }
                      v30 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v29) + 24);
                      v31 = v49;
                      shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v32);
                      v34 = WTF::fastMalloc((WTF *)0x240);
                      *(_WORD *)v34 = 269;
                      *(_QWORD *)(v34 + 8) = 0;
                      *(_QWORD *)(v34 + 528) = v34 + 16;
                      *(_QWORD *)(v34 + 536) = v34 + 16;
                      *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
                      *(_OWORD *)(v34 + 560) = 0u;
                      IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
                      v53[0] = (IPC::Encoder *)v34;
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)v17);
                      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v34, (char *)&v50);
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)a3);
                      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v34, v48);
                      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v34, 8uLL, 8) = v24;
                      *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = v31;
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)a4);
                      *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = shouldRelaxThirdPartyCookieBlocking;
                      IPC::Connection::sendMessageImpl(v30, (uint64_t *)v53, 0, 0);
                      v36 = v53[0];
                      v53[0] = 0;
                      if (v36)
                      {
                        IPC::Encoder::~Encoder(v36, v35);
                        WTF::fastFree(v37, v38);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
    }
  }
}

uint64_t WebKit::WebCookieJar::cookiesAdded(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
    v7 += 24 * *(unsigned int *)(v7 - 4);
  if (v7 != result)
  {
    v8 = (uint64_t *)(result + 8);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = off_1E34F1740;
    v9[1] = a2;
    v9[2] = a3;
    v10 = v9;
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v10);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebCookieJar::cookiesDeleted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
    v7 += 24 * *(unsigned int *)(v7 - 4);
  if (v7 != result)
  {
    v8 = (uint64_t *)(result + 8);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = off_1E34F1768;
    v9[1] = a2;
    v9[2] = a3;
    v10 = v9;
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v10);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebKit::WebCookieJar::clearCache(WebKit::WebCookieJar *this)
{
  WebKit::WebCookieCache::clear((WebKit::WebCookieJar *)((char *)this + 32));
}

WTF::StringImpl *WebKit::WebCookieJar::clearCacheForHost(WebKit::WebCookieJar *this, WTF::StringImpl **a2)
{
  return WebKit::WebCookieCache::clearForHost((WebKit::WebCookieJar *)((char *)this + 32), a2);
}

uint64_t WebKit::WebCookieJar::cookiesEnabled(WebKit::WebCookieJar *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl **v11;
  _BOOL8 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  WebKit::WebProcess *v35;
  uint64_t v36;
  const WebKit::WebFrame *v37;
  BOOL shouldRelaxThirdPartyCookieBlocking;
  int v39;
  int v40;
  unsigned __int16 v41;
  void *v42;
  int v43;
  int v44;
  uint64_t *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  BOOL v49;
  WebKit::WebProcess *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t *v54[4];
  BOOL v55;
  uint64_t *v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  IPC::Encoder *v69;
  uint64_t v70;
  char v71;

  v2 = *((_QWORD *)a2 + 66);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  WebKit::WebFrame::fromCoreFrame(v3, &v53);
  v5 = (CFTypeRef *)v53;
  if (!v53)
    return 0;
  v6 = *(_QWORD *)(v53 + 24);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || (v8 = *(_QWORD *)(v7 + 24)) == 0
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || (v10 = *(_QWORD **)(*(_QWORD *)(v9 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v10 + 1368))(v10) & 1) != 0)
    || !*(_QWORD *)(v10[2] + 8))
  {
    v12 = 0;
    goto LABEL_36;
  }
  v52 = 0;
  v11 = (WTF::StringImpl **)((char *)a2 + 968);
  v12 = 0;
  if ((WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v5, (WebCore::Document *)((char *)a2 + 1008), (WebCore::Document *)((char *)a2 + 968), &v52) & 1) != 0)
  {
LABEL_36:
    CFRelease(v5[1]);
    return v12;
  }
  if (!v52)
  {
    v12 = 1;
    goto LABEL_36;
  }
  v13 = *((unsigned __int16 *)a2 + 1744);
  if (v13 > 0xFF)
  {
LABEL_70:
    v12 = v13 != 0;
    goto LABEL_36;
  }
  v14 = *((_QWORD *)a2 + 66);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0 || (WebKit::WebFrame::fromCoreFrame(v15, &v66), (v16 = v66) == 0))
  {
    LOWORD(v13) = 0;
LABEL_69:
    *((_WORD *)a2 + 1744) = v13 | 0x100;
    goto LABEL_70;
  }
  v17 = *(_QWORD *)(v66 + 24);
  if (!v17
    || (v18 = *(_QWORD *)(v17 + 8)) == 0
    || (v19 = *(_QWORD *)(v18 + 24)) == 0
    || (v20 = *(_QWORD *)(v19 + 8)) == 0
    || (v21 = *(_QWORD **)(*(_QWORD *)(v20 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v21 + 1368))(v21) & 1) != 0)
    || !*(_QWORD *)(v21[2] + 8)
    || (v23 = *v11) == 0)
  {
    LOWORD(v13) = 0;
LABEL_68:
    CFRelease(*(CFTypeRef *)(v16 + 8));
    goto LABEL_69;
  }
  v24 = *(_DWORD *)v23;
  *(_DWORD *)v23 += 2;
  v63 = v23;
  v25 = *((_OWORD *)a2 + 62);
  v64 = *((_OWORD *)a2 + 61);
  v65 = v25;
  if (!*((_DWORD *)v23 + 1))
  {
    LOWORD(v13) = 0;
    v63 = 0;
LABEL_65:
    if (v24)
      *(_DWORD *)v23 = v24;
    else
      WTF::StringImpl::destroy(v23, v22);
    goto LABEL_68;
  }
  v61 = *(_OWORD *)(v16 + 80);
  v62 = 1;
  v26 = *(_QWORD *)(v16 + 24);
  if (v26
    && (v27 = *(_QWORD *)(v26 + 8)) != 0
    && (v28 = *(_QWORD *)(v27 + 24)) != 0
    && (v29 = *(_QWORD *)(v28 + 8)) != 0
    && (v30 = *(_QWORD **)(*(_QWORD *)(v29 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v30 + 1368))(v30) & 1) == 0)
    && *(_QWORD *)(v30[2] + 8))
  {
    v31 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8) + 24) + 8) + 48)
                     + 16);
    (*(void (**)(_QWORD *))(*v31 + 1368))(v31);
    v32 = *(_QWORD *)(v31[2] + 8);
    if (v32)
      v33 = v32 - 16;
    else
      v33 = 0;
    v59 = *(_QWORD *)(v33 + 40);
    v60 = 1;
  }
  else
  {
    LOBYTE(v59) = 0;
    LOBYTE(v60) = 0;
  }
  {
    v35 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v50 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v35 = WebKit::WebProcess::WebProcess(v50);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
  }
  v36 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v35) + 24);
  shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v16, v37);
  v54[0] = (uint64_t *)((char *)a2 + 1008);
  v54[1] = (uint64_t *)&v63;
  v54[2] = (uint64_t *)&v61;
  v54[3] = &v59;
  v55 = shouldRelaxThirdPartyCookieBlocking;
  v70 = 0;
  IPC::Connection::createSyncMessageEncoder(3519, 0, &v70, (uint64_t *)&v69);
  IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>(v69, v54);
  IPC::Connection::sendSyncMessage(v36, v70, (uint64_t *)&v69, 0, (uint64_t)&v67, INFINITY);
  v39 = v68;
  if (v68)
  {
    if (v68 == 1)
    {
      v40 = 0;
      LOBYTE(v56) = (_BYTE)v67;
LABEL_53:
      v58 = v39;
      v44 = v39;
LABEL_54:
      ((void (*)(char *, uint64_t **))off_1E34F16D0[v44])(&v71, &v67);
      v43 = v40;
LABEL_55:
      v46 = v69;
      v69 = 0;
      if (v46)
      {
        IPC::Encoder::~Encoder(v46, v42);
        WTF::fastFree(v47, v48);
      }
      if (v43)
        v49 = v39 == 0;
      else
        v49 = 0;
      LOWORD(v13) = v49;
      ((void (*)(uint64_t **, uint64_t **))off_1E34F16A0[v39])(v54, &v56);
      v23 = v63;
      v63 = 0;
      if (!v23)
        goto LABEL_68;
      v24 = *(_DWORD *)v23 - 2;
      goto LABEL_65;
    }
  }
  else
  {
    v41 = IPC::Decoder::decode<std::tuple<BOOL>>(v67);
    if (v41 < 0x100u)
    {
      v40 = 0;
      v43 = 0;
      LOBYTE(v56) = 13;
      v39 = 1;
      v58 = 1;
      v44 = v68;
      if (v68 == -1)
        goto LABEL_55;
      goto LABEL_54;
    }
    if (!v68)
    {
      v40 = v41;
      v45 = v67;
      v67 = 0;
      v56 = v45;
      v57 = v41;
      goto LABEL_53;
    }
  }
  v51 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebCookieJar::remoteCookiesEnabled(v51);
}

void WebKit::WebCookieJar::remoteCookiesEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebFrame *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  __int128 v10;
  WebKit::WebProcess *v11;
  WebKit::WebProcess *v12;
  os_unfair_lock_s *v13;
  const WebKit::WebFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20[4];
  BOOL shouldRelaxThirdPartyCookieBlocking;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  WebKit::WebFrame *v29;

  v4 = *(_QWORD *)(a2 + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v6 = 0;
    goto LABEL_4;
  }
  WebKit::WebFrame::fromCoreFrame(v5, &v29);
  v6 = v29;
  if (!v29 || !WebKit::WebFrame::page(v29))
  {
LABEL_4:
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (!v6)
      return;
    goto LABEL_5;
  }
  v9 = *(WTF::StringImpl **)(a2 + 968);
  if (v9)
  {
    *(_DWORD *)v9 += 2;
    v26 = v9;
    v10 = *(_OWORD *)(a2 + 992);
    v27 = *(_OWORD *)(a2 + 976);
    v28 = v10;
    if (*((_DWORD *)v9 + 1))
    {
      v24 = *((_OWORD *)v6 + 5);
      v25 = 1;
      v11 = (WebKit::WebProcess *)WebKit::WebFrame::page(v6);
      if (v11)
      {
        v11 = (WebKit::WebProcess *)WebKit::WebFrame::page(v6);
        v22 = *((_QWORD *)v11 + 5);
        v23 = 1;
      }
      else
      {
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
      }
      v12 = WebKit::WebProcess::singleton(v11);
      v13 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v12) + 24);
      v20[0] = (uint64_t *)(a2 + 1008);
      v20[1] = (uint64_t *)&v26;
      v20[2] = (uint64_t *)&v24;
      v20[3] = &v22;
      shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking(v6, v14);
      IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(v13, v20, a3);
      v16 = v26;
      goto LABEL_14;
    }
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 992);
    v27 = *(_OWORD *)(a2 + 976);
    v28 = v17;
  }
  v18 = *a3;
  *a3 = 0;
  v19 = v9;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v16 = v19;
LABEL_14:
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_5:
  CFRelease(*((CFTypeRef *)v6 + 1));
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34F1790;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 220;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v8, a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebCookieJar::cookieRequestHeaderFieldValue(const WTF::URL *a1@<X1>, char *a2@<X2>, const WTF::URL *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t a8@<X8>)
{
  CFTypeRef *v8;
  uint64_t v10;
  WebKit::WebProcess *v15;
  uint64_t v16;
  char v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const WebKit::WebFrame *v21;
  char shouldRelaxThirdPartyCookieBlocking;
  IPC::Encoder *v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  int v32;
  int v33;
  WebKit::WebProcess *v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  char v41;
  int v42;
  unsigned __int8 v43;
  uint64_t v44[2];
  WTF::StringImpl *v45;
  char v46;
  char v47;
  uint64_t *v48;
  int v49;
  IPC::Encoder *v50;
  uint64_t v51;

  v10 = a4;
  v44[0] = a5;
  v44[1] = a6;
  v43 = 0;
  if (*(_BYTE *)(a4 + 16))
  {
    {
      v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v15 = WebKit::WebProcess::WebProcess(v34);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
      if (!*(_BYTE *)(v10 + 16))
      {
        __break(1u);
        goto LABEL_36;
      }
    }
    v16 = WebKit::WebProcess::webFrame((uint64_t)v15, *(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    v8 = (CFTypeRef *)v16;
    if (v16)
    {
      CFRetain(*(CFTypeRef *)(v16 + 8));
      v17 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = 0;
  }
  v17 = 1;
LABEL_8:
  if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v8, a1, a3, &v43))
  {
    *(_BYTE *)(a8 + 8) = 0;
    *(_QWORD *)a8 = 0;
    goto LABEL_30;
  }
  v37 = v17;
  v38 = a8;
  LOBYTE(a8) = a7;
  {
    v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    goto LABEL_12;
  }
LABEL_36:
  v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
  v18 = WebKit::WebProcess::WebProcess(v35);
  WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
LABEL_12:
  v19 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v18) + 24);
  v20 = (WTF::StringImpl *)v43;
  shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v8, v21);
  v51 = 0;
  IPC::Connection::createSyncMessageEncoder(3518, 0, &v51, (uint64_t *)&v50);
  v23 = v50;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v50, (uint64_t *)a1);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v23, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v23, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(v23, (uint64_t *)v10);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v23, v44);
  *IPC::Encoder::grow(v23, 1uLL, 1) = a8;
  *IPC::Encoder::grow(v23, 1uLL, 1) = (char)v20;
  *IPC::Encoder::grow(v23, 1uLL, 1) = shouldRelaxThirdPartyCookieBlocking;
  IPC::Connection::sendSyncMessage(v19, v51, (uint64_t *)&v50, 0, (uint64_t)&v48, INFINITY);
  if (!v49)
  {
    LOBYTE(v45) = 0;
    v47 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(v48, (uint64_t)&v45);
    if (!v47)
    {
      LOBYTE(v39) = 13;
      v24 = 1;
      v42 = 1;
      v25 = v49;
      v26 = v38;
      if (v49 == -1)
        goto LABEL_20;
      goto LABEL_19;
    }
    v25 = v49;
    v26 = v38;
    if (!v49)
    {
      v24 = 0;
      v28 = v48;
      v48 = 0;
      v20 = v45;
      LOBYTE(v10) = v46;
      v39 = v28;
      v40 = v45;
      v41 = v46;
      v42 = 0;
      goto LABEL_19;
    }
LABEL_37:
    v36 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::WebCookieJar::getRawCookies(v36);
    return;
  }
  if (v49 != 1)
    goto LABEL_37;
  LOBYTE(v39) = (_BYTE)v48;
  v24 = 1;
  v42 = 1;
  v25 = 1;
  v26 = v38;
LABEL_19:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F16D0[v25])(&v45, &v48);
LABEL_20:
  v29 = v50;
  v50 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v27);
    WTF::fastFree(v30, v31);
  }
  if (v24)
  {
    *(_BYTE *)(v26 + 8) = 0;
    *(_QWORD *)v26 = 0;
    v32 = 1;
LABEL_28:
    ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F16B0[v32])(&v45, &v39);
    goto LABEL_29;
  }
  v40 = 0;
  if (!v20)
  {
    v32 = 0;
    *(_QWORD *)v26 = 0;
    *(_BYTE *)(v26 + 8) = v10;
    goto LABEL_28;
  }
  v33 = *(_DWORD *)v20;
  *(_DWORD *)v20 += 2;
  *(_QWORD *)v26 = v20;
  *(_BYTE *)(v26 + 8) = v10;
  if (v33)
  {
    v32 = 0;
    *(_DWORD *)v20 = v33;
    goto LABEL_28;
  }
  WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v27);
  v32 = v42;
  if (v42 != -1)
    goto LABEL_28;
LABEL_29:
  v17 = v37;
LABEL_30:
  if ((v17 & 1) == 0)
    CFRelease(v8[1]);
}

uint64_t WebKit::WebCookieJar::getRawCookies(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const WebKit::WebFrame *v24;
  _BOOL8 shouldRelaxThirdPartyCookieBlocking;
  IPC::Encoder *v26;
  int v27;
  int v28;
  void *v29;
  uint64_t *v30;
  IPC::Decoder *v31;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WebCore::Cookie *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WebKit::WebProcess *v43;
  WebKit::WebCookieJar *v44;
  const WebCore::Document *v45;
  const WebCore::Cookie *v46;
  __int16 v47;
  char v48;
  uint64_t *v49;
  _BOOL8 v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  char v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  int v63;
  IPC::Encoder *v64;
  uint64_t v65;
  IPC::Decoder *v66;
  _QWORD v67[3];

  v7 = *(_QWORD *)(a2 + 528);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    WebKit::WebFrame::fromCoreFrame(v8, &v58);
    v9 = v58;
  }
  else
  {
    v9 = 0;
    v58 = 0;
  }
  v57 = 0;
  v10 = (uint64_t *)(a2 + 1008);
  v11 = 0;
  if ((WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v9, (const WTF::URL *)(a2 + 1008), (const WTF::URL *)a3, &v57) & 1) == 0)
  {
    if (v9)
    {
      v55 = *(_OWORD *)(v9 + 80);
      v56 = 1;
      v12 = *(_QWORD *)(v9 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) == 0)
              {
                if (*(_QWORD *)(v16[2] + 8))
                {
                  v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 24)
                                                           + 8)
                                               + 48)
                                   + 16);
                  (*(void (**)(_QWORD *))(*v17 + 1368))(v17);
                  v18 = *(_QWORD *)(v17[2] + 8);
                  if (v18)
                    v19 = v18 - 16;
                  else
                    v19 = 0;
                  v53 = *(_QWORD *)(v19 + 40);
                  v54 = 1;
LABEL_19:
                  {
                    v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
                  }
                  else
                  {
                    v43 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                    v20 = WebKit::WebProcess::WebProcess(v43);
                    WebKit::WebProcess::singleton(void)::process = (uint64_t)v20;
                  }
                  v21 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v20) + 24);
                  v22 = WebCore::CookieJar::sameSiteInfo();
                  v47 = v22;
                  v48 = BYTE2(v22);
                  v23 = v57;
                  shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v9, v24);
                  v65 = 0;
                  IPC::Connection::createSyncMessageEncoder(3524, 0, &v65, (uint64_t *)&v64);
                  v26 = v64;
                  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v64, v10);
                  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v26, (char *)&v47);
                  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v26, a3);
                  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(v26, (uint64_t *)&v55);
                  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v26, &v53);
                  *IPC::Encoder::grow(v26, 1uLL, 1) = v23;
                  *IPC::Encoder::grow(v26, 1uLL, 1) = shouldRelaxThirdPartyCookieBlocking;
                  IPC::Connection::sendSyncMessage(v21, v65, (uint64_t *)&v64, 0, (uint64_t)&v62, INFINITY);
                  if (v63)
                  {
                    if (v63 == 1)
                    {
                      LOBYTE(v49) = (_BYTE)v62;
                      v27 = 1;
                      v52 = 1;
                      v28 = 1;
                      goto LABEL_33;
                    }
LABEL_48:
                    v44 = (WebKit::WebCookieJar *)std::__throw_bad_variant_access[abi:sn180100]();
                    return WebKit::WebCookieJar::setRawCookie(v44, v45, v46);
                  }
                  LOBYTE(v59) = 0;
                  v61 = 0;
                  IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v62, &v59);
                  if (v61)
                  {
                    if (v63)
                      goto LABEL_48;
                    v30 = v62;
                    v62 = 0;
                    shouldRelaxThirdPartyCookieBlocking = v59;
                    v59 = 0;
                    LODWORD(v10) = v60;
                    LODWORD(a3) = HIDWORD(v60);
                    v60 = 0;
                    v66 = 0;
                    v67[0] = 0;
                    v49 = v30;
                    v50 = shouldRelaxThirdPartyCookieBlocking;
                    v67[1] = 0;
                    v51 = __PAIR64__(a3, v10);
                    v52 = 0;
                    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v29);
                    v31 = v66;
                    v66 = 0;
                    if (v31)
                    {
                      IPC::Decoder::~Decoder(v31);
                      WTF::fastFree(v32, v33);
                    }
                    if (v61)
                      WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v29);
                    v27 = 0;
                  }
                  else
                  {
                    LOBYTE(v49) = 13;
                    v27 = 1;
                    v52 = 1;
                  }
                  v28 = v63;
                  if (v63 == -1)
                  {
LABEL_34:
                    v34 = v64;
                    v64 = 0;
                    if (v34)
                    {
                      IPC::Encoder::~Encoder(v34, v29);
                      WTF::fastFree(v35, v36);
                    }
                    v11 = v27 == 0;
                    if (!v27)
                    {
                      v50 = 0;
                      v51 = 0;
                      v37 = *(unsigned int *)(a4 + 12);
                      if ((_DWORD)v37)
                      {
                        v38 = *(WebCore::Cookie **)a4;
                        v39 = 136 * v37;
                        do
                        {
                          WebCore::Cookie::~Cookie(v38, v29);
                          v38 = (WebCore::Cookie *)(v40 + 136);
                          v39 -= 136;
                        }
                        while (v39);
                      }
                      v41 = *(WTF **)a4;
                      if (*(_QWORD *)a4)
                      {
                        *(_QWORD *)a4 = 0;
                        *(_DWORD *)(a4 + 8) = 0;
                        WTF::fastFree(v41, v29);
                      }
                      v66 = 0;
                      *(_QWORD *)a4 = shouldRelaxThirdPartyCookieBlocking;
                      v67[0] = 0;
                      *(_DWORD *)(a4 + 8) = (_DWORD)v10;
                      *(_DWORD *)(a4 + 12) = (_DWORD)a3;
                      WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v29);
                    }
                    ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F16C0[v27])(&v66, &v49);
                    goto LABEL_44;
                  }
LABEL_33:
                  ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F16D0[v28])(&v66, &v62);
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      LOBYTE(v55) = 0;
      v56 = 0;
    }
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    goto LABEL_19;
  }
LABEL_44:
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return v11;
}

IPC::Encoder *WebKit::WebCookieJar::setRawCookie(WebKit::WebCookieJar *this, const WebCore::Document *a2, const WebCore::Cookie *a3)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  WebKit::WebProcess *v11;
  IPC::Encoder *v12;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 270;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)v6, (uint64_t *)a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebCookieJar::deleteCookie(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  WebKit::WebProcess *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v8) + 24);
  v10 = *a5;
  *a5 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34F17B8;
  v11[1] = v10;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 225;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v21 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a4);
  v20[0] = (uint64_t)v11;
  v20[1] = v12;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v21, v20, 0, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

unsigned int *WebKit::WebCookieJar::getCookiesAsync(uint64_t a1, uint64_t *a2, const WebCore::Document *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v11;
  unsigned int v12;
  WebCore::DeprecatedGlobalSettings *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const WTF::URL *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::WebProcess *v22;
  char v23;
  const WebKit::WebFrame *v24;
  char shouldRelaxThirdPartyCookieBlocking;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unsigned int *result;
  uint64_t v36;
  void *v37;
  WebKit::WebProcess *v38;
  os_unfair_lock_s *v39;
  char shouldIncludeSecureCookies;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  WebCore::DeprecatedGlobalSettings *v46;
  __int128 v47;
  char v48;
  uint64_t v49[2];
  IPC::Encoder *v50;

  v6 = a2[66];
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v11 = (unsigned int *)(v7 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    WebKit::WebFrame::fromCoreFrame(v7, &v46);
    v45 = 0;
    v13 = v46;
    v14 = a2 + 126;
    if (WebKit::shouldBlockCookies(v46, (const WTF::URL *)(a2 + 126), a3, &v45))
    {
      LOBYTE(v47) = 0;
      v48 = 0;
      v15 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 16))(v15, &v47);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v48)
        WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v16);
    }
    else
    {
      v17 = WebCore::CookieJar::sameSiteInfo();
      v43 = v17;
      v44 = BYTE2(v17);
      shouldIncludeSecureCookies = WebCore::CookieJar::shouldIncludeSecureCookies((WebCore::CookieJar *)a2, a3, v18);
      if (v13)
      {
        v47 = *((_OWORD *)v13 + 5);
        v48 = 1;
        v19 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 3) + 8) + 24) + 8)
                                     + 48)
                         + 16);
        (*(void (**)(_QWORD *))(*v19 + 1368))(v19);
        v20 = *(_QWORD *)(v19[2] + 8);
        if (v20)
          v21 = v20 - 16;
        else
          v21 = 0;
        v41 = *(_QWORD *)(v21 + 40);
        v42 = 1;
      }
      else
      {
        LOBYTE(v47) = 0;
        v48 = 0;
        LOBYTE(v41) = 0;
        LOBYTE(v42) = 0;
      }
      {
        v22 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v22 = WebKit::WebProcess::WebProcess(v38);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v22;
      }
      v39 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v22) + 24);
      v23 = v45;
      shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking(v13, v24);
      v26 = *a5;
      *a5 = 0;
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = &off_1E34F17E0;
      v27[1] = v26;
      v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v29 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v29 = 221;
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v29 + 528) = v29 + 16;
      *(_QWORD *)(v29 + 536) = v29 + 16;
      *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v29 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
      v50 = (IPC::Encoder *)v29;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, v14);
      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v29, (char *)&v43);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a3);
      IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v29, (uint64_t *)&v47);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v29, &v41);
      *IPC::Encoder::grow((IPC::Encoder *)v29, 1uLL, 1) = shouldIncludeSecureCookies;
      *IPC::Encoder::grow((IPC::Encoder *)v29, 1uLL, 1) = v23;
      *IPC::Encoder::grow((IPC::Encoder *)v29, 1uLL, 1) = shouldRelaxThirdPartyCookieBlocking;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, a4);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, a4 + 1);
      v49[0] = (uint64_t)v27;
      v49[1] = v28;
      IPC::Connection::sendMessageWithAsyncReply(v39, &v50, v49, 0, 0);
      v31 = v49[0];
      v49[0] = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v32 = v50;
      v50 = 0;
      if (v32)
      {
        IPC::Encoder::~Encoder(v32, v30);
        WTF::fastFree(v33, v34);
      }
    }
    if (v13)
      CFRelease(*((CFTypeRef *)v13 + 1));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
    LOBYTE(v47) = 0;
    v48 = 0;
    v36 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v36 + 16))(v36, &v47);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (v48)
      return (unsigned int *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v37);
  }
  return result;
}

unsigned int *WebKit::WebCookieJar::setCookieAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int *v12;
  unsigned int v13;
  WebCore::DeprecatedGlobalSettings *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  const WTF::URL *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  __int128 v32;
  uint64_t v33;
  WebKit::WebProcess *v34;
  char v35;
  const WebKit::WebFrame *v36;
  char shouldRelaxThirdPartyCookieBlocking;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v48;
  WebKit::WebProcess *v49;
  os_unfair_lock_s *v50;
  uint64_t v51[2];
  char v52;
  uint64_t v53;
  WebCore::DeprecatedGlobalSettings *v54;
  __int16 v55;
  char v56;
  _DWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  char v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _OWORD v68[2];
  _DWORD *v69;
  _DWORD *v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[24];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  __int16 v79;
  char v80;
  char v81;
  WebCore::DeprecatedGlobalSettings *v82;
  IPC::Encoder *v83;
  uint64_t v84[35];

  v6 = *(_QWORD *)(a2 + 528);
  if (v6 && (v8 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v12 = (unsigned int *)(v8 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WebKit::WebFrame::fromCoreFrame(v8, &v82);
    v81 = 0;
    v14 = v82;
    v15 = (uint64_t *)(a2 + 1008);
    if (WebKit::shouldBlockCookies(v82, (const WTF::URL *)(a2 + 1008), (const WTF::URL *)a3, &v81))
    {
      v16 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    else
    {
      v17 = WebCore::CookieJar::sameSiteInfo();
      v79 = v17;
      v80 = BYTE2(v17);
      if (v14)
      {
        v77 = *((_OWORD *)v14 + 5);
        v78 = 1;
        v18 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 3) + 8) + 24) + 8)
                                     + 48)
                         + 16);
        (*(void (**)(_QWORD *))(*v18 + 1368))(v18);
        v20 = *(_QWORD *)(v18[2] + 8);
        if (v20)
          v21 = v20 - 16;
        else
          v21 = 0;
        v75 = *(_QWORD *)(v21 + 40);
        v76 = 1;
        if (WebKit::WebCookieJar::isEligibleForCache(v14, (WebKit::WebFrame *)(a2 + 1008), (const WTF::URL *)a3, v19))
        {
          v22 = *(_QWORD *)(a1 + 72);
          if (v22 && (v23 = *(_QWORD **)v22, ++*(_QWORD *)(v22 + 8), v23) && *v23)
          {
            v24 = 1;
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v23 + 16))(*v23, 1);
          }
          else
          {
            v24 = 1;
          }
        }
        else
        {
          v24 = 0;
          v22 = 0;
        }
      }
      else
      {
        v24 = 0;
        v22 = 0;
        LOBYTE(v77) = 0;
        v78 = 0;
        LOBYTE(v75) = 0;
        LOBYTE(v76) = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      v51[0] = a1;
      v51[1] = v22;
      v52 = v24;
      *(_DWORD *)(a2 + 24) += 2;
      v53 = a2;
      if (v14)
        CFRetain(*((CFTypeRef *)v14 + 1));
      v54 = v14;
      v55 = v79;
      v56 = v80;
      v25 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v25 += 2;
      v57 = v25;
      v58 = *(_OWORD *)(a3 + 8);
      v59 = *(_OWORD *)(a3 + 24);
      v60 = v77;
      v61 = v78;
      v62 = v75;
      v63 = v76;
      v26 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
        *v26 += 2;
      v64 = v26;
      v27 = *(_DWORD **)(a4 + 8);
      if (v27)
        *v27 += 2;
      v65 = v27;
      v28 = *(_DWORD **)(a4 + 16);
      if (v28)
        *v28 += 2;
      v66 = v28;
      v29 = *(_DWORD **)(a4 + 24);
      if (v29)
        *v29 += 2;
      v67 = v29;
      v68[0] = *(_OWORD *)(a4 + 32);
      *(_OWORD *)((char *)v68 + 11) = *(_OWORD *)(a4 + 43);
      v30 = *(_DWORD **)(a4 + 64);
      if (v30)
        *v30 += 2;
      v69 = v30;
      v31 = *(_DWORD **)(a4 + 72);
      if (v31)
        *v31 += 2;
      v70 = v31;
      v32 = *(_OWORD *)(a4 + 96);
      v71 = *(_OWORD *)(a4 + 80);
      v72 = v32;
      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v73, a4 + 112);
      v73[16] = *(_BYTE *)(a4 + 128);
      v33 = *a5;
      *a5 = 0;
      v74 = v33;
      {
        v34 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v34 = WebKit::WebProcess::WebProcess(v49);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v34;
      }
      v50 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v34) + 24);
      v35 = v81;
      shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking(v14, v36);
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0((uint64_t)v84, v51);
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x118);
      *v38 = off_1E34F1808;
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0((uint64_t)(v38 + 1), v84);
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)v84, v39);
      v40 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v41 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v41 = 268;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 528) = v41 + 16;
      *(_QWORD *)(v41 + 536) = v41 + 16;
      *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v41 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
      v83 = (IPC::Encoder *)v41;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, v15);
      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v41, (char *)&v79);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)a3);
      IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v41, (uint64_t *)&v77);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v41, &v75);
      *IPC::Encoder::grow((IPC::Encoder *)v41, 1uLL, 1) = v35;
      IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)v41, (uint64_t *)a4);
      *IPC::Encoder::grow((IPC::Encoder *)v41, 1uLL, 1) = shouldRelaxThirdPartyCookieBlocking;
      v84[0] = (uint64_t)v38;
      v84[1] = v40;
      IPC::Connection::sendMessageWithAsyncReply(v50, &v83, v84, 0, 0);
      v43 = v84[0];
      v84[0] = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v44 = v83;
      v83 = 0;
      if (v44)
      {
        IPC::Encoder::~Encoder(v44, v42);
        WTF::fastFree(v45, v46);
      }
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)v51, v42);
    }
    if (v14)
      CFRelease(*((CFTypeRef *)v14 + 1));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  else
  {
    v48 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
}

uint64_t WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _DWORD *v12;

  v3 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 128), a2);
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    v8 = *(uint64_t **)v7;
    v9 = *(_QWORD *)(v7 + 8) - 1;
    *(_QWORD *)(v7 + 8) = v9;
    if (v8)
    {
      v10 = *v8;
      if (!*v8)
        goto LABEL_16;
      v11 = *(_BYTE *)(v7 + 16);
      *(_BYTE *)(v7 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
      *(_BYTE *)(v7 + 16) = v11;
      if (*(_QWORD *)v7)
        goto LABEL_16;
      v9 = *(_QWORD *)(v7 + 8);
    }
    if (!v9)
      MEMORY[0x19AEB936C](v7, 0x1020C40545B2139);
  }
LABEL_16:
  v12 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 120))(v12);
    else
      --v12[2];
  }
  return a1;
}

BOOL WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  if (!*a1 || !*(_DWORD *)(*a1 - 12))
    return 1;
  v12 = a1;
  v13 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1);
  v14 = v2;
  v3 = *v12;
  if (*v12)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 8 * v4);
    v15 = v5;
    v16 = v5;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
    v5 = 0;
    v4 = 0;
  }
  v7 = a1;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  return v13 == v8;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::UnsubscribeFromCookieChangeNotifications>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 278;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void WebKit::WebBackForwardListProxy::~WebBackForwardListProxy(WebKit::WebBackForwardListProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F1510;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F1510;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebKit::WebCookieCache::~WebCookieCache(WebKit::WebCookieCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  *(_QWORD *)this = off_1E34F15F8;
  v3 = *((_QWORD *)this + 5);
  *(_QWORD *)v3 = 0;
  if (!*(_BYTE *)(v3 + 16) && !*(_QWORD *)(v3 + 8))
    MEMORY[0x19AEB936C]();
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    WebCore::NetworkStorageSession::operator delete(v5, 0x128uLL);
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  *(_QWORD *)this = off_1E34F15F8;
  v3 = *((_QWORD *)this + 5);
  *(_QWORD *)v3 = 0;
  if (!*(_BYTE *)(v3 + 16) && !*(_QWORD *)(v3 + 8))
    MEMORY[0x19AEB936C]();
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    WebCore::NetworkStorageSession::operator delete(v5, 0x128uLL);
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebCookieJar::~WebCookieJar(WebKit::WebCookieJar *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebCookieJar::~WebCookieJar(this, a2);
  WTF::fastFree(v2, v3);
}

{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;

  v3 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = *((_QWORD *)this + 10);
      do
      {
        v7 = *(WTF::StringImpl **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          if (*(_QWORD *)(v6 + 8))
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(_QWORD *)(v6 + 8), a2);
            v7 = *(WTF::StringImpl **)v6;
          }
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *((_QWORD *)this + 4) = off_1E34F15F8;
  v8 = *((_QWORD *)this + 9);
  *(_QWORD *)v8 = 0;
  if (!*(_BYTE *)(v8 + 16) && !*(_QWORD *)(v8 + 8))
    MEMORY[0x19AEB936C]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    WebCore::NetworkStorageSession::operator delete(v10, 0x128uLL);
  v11 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, (WTF::StringImpl *)a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, a2);
  WebCore::CookieJar::~CookieJar(this);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19BackForwardGoToItemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy22BackForwardItemAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy27BackForwardListContainsItemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21BackForwardListCountsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WebKit::WebStorageSessionProvider::storageSession(WebKit::WebStorageSessionProvider *this)
{
  return 0;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

BOOL WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v17;
  __int16 v18;
  char v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v17 = -1640531527;
  v18 = 0;
  v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v17, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  v6 = a2[1];
  v7 = v5 & v4;
  v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
  v9 = *v8;
  v10 = v8[1];
  if (*v8 == *a2 && v10 == v6)
    return 1;
  v13 = 1;
  do
  {
    v14 = v9 | v10;
    result = v14 != 0;
    if (!v14)
      break;
    v7 = (v7 + v13) & v4;
    v15 = (uint64_t *)(v2 + 24 * v7);
    v9 = *v15;
    v10 = v15[1];
    ++v13;
  }
  while (v9 != *a2 || v10 != v6);
  return result;
}

_DWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::HistoryItem*>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _DWORD *v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, a2);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  v13 = *v11;
  v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_12:
    *(_OWORD *)v11 = *(_OWORD *)a2;
    v16 = *a3;
    if (*a3)
      ++*v16;
    result = (_DWORD *)v11[2];
    v11[2] = v16;
    if (result)
      result = WTF::RefCounted<WebCore::HistoryItem>::deref(result);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_22;
    }
    else if (3 * v23 > 4 * v22)
    {
LABEL_22:
      *(_QWORD *)a4 = v11;
      *(_QWORD *)(a4 + 8) = v20 + 24 * v23;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (uint64_t)v11);
    v11 = result;
    v20 = *a1;
    if (*a1)
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    else
      LODWORD(v23) = 0;
    goto LABEL_22;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != *a2 || v12 != a2[1])
  {
    if (v12 == -1)
      v14 = v11;
    v10 = (v10 + v15) & v9;
    v11 = (_QWORD *)(v8 + 24 * v10);
    v13 = *v11;
    v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = v14;
      }
      goto LABEL_12;
    }
  }
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v24 + 24 * v25;
  *(_BYTE *)(a4 + 16) = 0;
  v26 = *a3;
  if (*a3)
    ++*v26;
  result = (_DWORD *)v11[2];
  v11[2] = v26;
  if (result)
    return WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _OWORD *result;
  unsigned int v31;
  __int16 v32;
  char v33;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 24 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v14 = v5 + 24 * v10;
          v15 = *(_DWORD **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
            WTF::RefCounted<WebCore::HistoryItem>::deref(v15);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v31, (_QWORD *)(v5 + 24 * v10));
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v21 = (_OWORD *)(v16 + 24 * (v18 & v17));
            v18 = ++v19 + (v18 & v17);
          }
          while (*v21 != 0);
          v22 = v16 + 24 * v20;
          v25 = *(_DWORD **)(v22 + 16);
          v24 = (_QWORD *)(v22 + 16);
          v23 = v25;
          *v24 = 0;
          if (v25)
            WTF::RefCounted<WebCore::HistoryItem>::deref(v23);
          *v21 = *(_OWORD *)v13;
          v26 = v5 + 24 * v10;
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          *v24 = v27;
          v28 = *(_DWORD **)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          if (v28)
            WTF::RefCounted<WebCore::HistoryItem>::deref(v28);
          if (v13 == a3)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::hash(a2);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
      return *(_QWORD *)(v2 + 24 * v7 + 16);
    v12 = 1;
    while (v9 | v10)
    {
      v7 = (v7 + v12) & v4;
      v13 = (uint64_t *)(v2 + 24 * v7);
      v9 = *v13;
      v10 = v13[1];
      ++v12;
      if (v9 == *a2 && v10 == v6)
        return *(_QWORD *)(v2 + 24 * v7 + 16);
    }
  }
  return 0;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
    v3 += 24 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = *(_DWORD **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (result)
    result = WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(unint64_t *a1)
{
  unint64_t result;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!v3)
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
    result = 0;
    v9 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v8)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v10 + 16))(a1[3], v9);
      return 0;
    }
  }
  return result;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  char v12;
  unsigned __int8 v13;

  IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>(a1, &v11);
  if (*(unsigned __int8 *)(a2 + 16) == v13)
  {
    if (!*(_BYTE *)(a2 + 16))
      return a1;
    v5 = v11;
    v11 = 0;
    v6 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    *(_BYTE *)(a2 + 8) = v12;
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    v8 = v11;
    v11 = 0;
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 16) = 1;
  }
  if (v13)
  {
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieJar::cookiesAdded(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::CookieChangeListener &>::call(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieJar::cookiesDeleted(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::CookieChangeListener &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

char *IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2[2]);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, v2[3]);
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F1790;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F1790;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F17B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F17B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F17E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F17E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;
  char v30;
  _QWORD v31[2];
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v4, v5);
        v15 = 0;
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v16 = 0;
        if (v27 && v26)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v26);
          v16 = *a2;
          v15 = a2[1];
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v15 = v5;
    v16 = v4;
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    goto LABEL_15;
  }
  if (!v7)
  {
    LOBYTE(v28[0]) = 0;
    v29 = 0;
    v30 = 1;
LABEL_10:
    v13 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v28);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v30)
    {
      if (v29)
        return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v14);
    }
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v34);
  if (v36)
  {
    v9 = v34;
    v34 = 0;
    v32 = 1;
    v10 = v35;
    v35 = 0;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v8);
    v33 = 1;
    v31[0] = 0;
    v28[0] = v9;
    v31[1] = 0;
    v28[1] = v10;
    v29 = 1;
    v30 = 1;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v11);
    goto LABEL_10;
  }
LABEL_15:
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v20)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
    v22 = *a2;
    v23 = a2[1];
    v24 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v24 && v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  _BYTE v4[16];
  char v5;

  v4[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5)
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  return result;
}

uint64_t WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v7;
  LOWORD(v7) = *((_WORD *)a2 + 20);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_WORD *)(a1 + 40) = v7;
  v8 = (_DWORD *)a2[6];
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 11);
  v11 = *(_OWORD *)(a2 + 13);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  v12 = (_DWORD *)a2[16];
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a1 + 128) = v12;
  v13 = (_DWORD *)a2[17];
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a1 + 136) = v13;
  v14 = (_DWORD *)a2[18];
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a1 + 144) = v14;
  v15 = (_DWORD *)a2[19];
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a1 + 152) = v15;
  v16 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 171) = *(_OWORD *)((char *)a2 + 171);
  *(_OWORD *)(a1 + 160) = v16;
  v17 = (_DWORD *)a2[24];
  if (v17)
    *v17 += 2;
  *(_QWORD *)(a1 + 192) = v17;
  v18 = (_DWORD *)a2[25];
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 200) = v18;
  v19 = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  *(_OWORD *)(a1 + 224) = v19;
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 240, (uint64_t)(a2 + 30));
  *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
  v20 = a2[33];
  a2[33] = 0;
  *(_QWORD *)(a1 + 264) = v20;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34F1808;
  WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F1808;
  WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const WebKit::WebFrame *v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BOOL8 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int i;
  int v26;
  uint64_t *v27;
  WebKit::WebCookieCache *v28;
  unsigned int v29;

  v3 = a1 + 8;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v3);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v3);
  v5 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if ((unsigned __int16)v5 < 0x100u)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v3);
  v8 = v5;
  if (!(_BYTE)v5 || !*(_BYTE *)(a1 + 24))
    goto LABEL_17;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!*(_BYTE *)(a1 + 112) || !*(_BYTE *)(a1 + 128))
  {
    __break(1u);
LABEL_26:
    v28 = (WebKit::WebCookieCache *)(v10 + 32);
    v29 = *(_DWORD *)(v2 - 8);
    v22 = (unsigned __int8 *)v5;
    v23 = (uint64_t)v6;
    v24 = WTF::StringViewHashTranslator::hash(v5, (uint64_t)v6);
    for (i = 0; ; v24 = i + v26)
    {
      v26 = v24 & v29;
      v27 = (uint64_t *)(v2 + 8 * (v24 & v29));
      if (*v27 != -1)
      {
        if (!*v27)
          goto LABEL_10;
        if (WTF::StringViewHashTranslator::equal(v27, v22, v23))
          break;
      }
      ++i;
    }
    WebKit::WebCookieCache::inMemoryStorageSession(v28);
    WebCore::NetworkStorageSession::setCookieFromDOM();
    goto LABEL_10;
  }
  WebKit::shouldRelaxThirdPartyCookieBlocking(*(WebKit **)(a1 + 40), v6);
  v5 = WTF::URL::host((WTF::URL *)(a1 + 56));
  v2 = *(_QWORD *)(v10 + 48);
  if (v2)
    goto LABEL_26;
LABEL_10:
  if (!v9)
    goto LABEL_17;
  v11 = *(uint64_t **)v9;
  v12 = *(_QWORD *)(v9 + 8) - 1;
  *(_QWORD *)(v9 + 8) = v12;
  if (v11)
  {
    v13 = *v11;
    if (!*v11)
      goto LABEL_17;
    v14 = *(_BYTE *)(v9 + 16);
    *(_BYTE *)(v9 + 16) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    *(_BYTE *)(v9 + 16) = v14;
    if (*(_QWORD *)v9)
      goto LABEL_17;
    v12 = *(_QWORD *)(v9 + 8);
  }
  if (!v12)
    MEMORY[0x19AEB936C](v9, 0x1020C40545B2139);
LABEL_17:
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v15)
  {
    v16 = *(uint64_t **)v15;
    v17 = *(_QWORD *)(v15 + 8) - 1;
    *(_QWORD *)(v15 + 8) = v17;
    if (v16)
    {
      v18 = *v16;
      if (!*v16)
        goto LABEL_24;
      v19 = *(_BYTE *)(v15 + 16);
      *(_BYTE *)(v15 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
      *(_BYTE *)(v15 + 16) = v19;
      if (*(_QWORD *)v15)
        goto LABEL_24;
      v17 = *(_QWORD *)(v15 + 8);
    }
    if (!v17)
      MEMORY[0x19AEB936C](v15, 0x1020C40545B2139);
  }
LABEL_24:
  v20 = v8 != 0;
  v21 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v21 + 16))(v21, v20);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *(uint64_t **)v2;
    v4 = *(_QWORD *)(v2 + 8) - 1;
    *(_QWORD *)(v2 + 8) = v4;
    if (v3)
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_8;
      v6 = *(_BYTE *)(v2 + 16);
      *(_BYTE *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
      *(_BYTE *)(v2 + 16) = v6;
      if (*(_QWORD *)v2)
        goto LABEL_8;
      v4 = *(_QWORD *)(v2 + 8);
    }
    if (!v4)
      MEMORY[0x19AEB936C](v2, 0x1020C40545B2139);
  }
LABEL_8:
  v7 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v15 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v15);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v22 = (WTF::StringImpl **)(v16 + 24 * (v19 & v17));
            v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          v23 = v16 + 24 * v21;
          v26 = *(_QWORD *)(v23 + 8);
          v25 = (_QWORD *)(v23 + 8);
          v24 = v26;
          if (v26)
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v8);
            v32 = *v22;
            *v22 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
          else
          {
            *v22 = 0;
          }
          v27 = *v14;
          *v14 = 0;
          *v22 = v27;
          v28 = v4 + 24 * v11;
          *v25 = 0;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *v25 = v29;
          *(_QWORD *)(v16 + 24 * v21 + 16) = *(_QWORD *)(v28 + 16);
          v30 = *(_QWORD *)(v28 + 8);
          if (v30)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v30, v8);
          v31 = *v14;
          *v14 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (v14 == a3)
            v12 = v16 + 24 * v21;
        }
        else
        {
          if (*(_QWORD *)(v4 + 24 * v11 + 8))
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(_QWORD *)(v4 + 24 * v11 + 8), v8);
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t result;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, v3);
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::findTextRangesForStringMatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int i;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  void *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  void *v59;
  uint64_t v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  int v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  WTF::StringImpl *v75;
  uint64_t v76;

  WebCore::Page::findTextMatches();
  v7 = v72;
  v69 = v72;
  v8 = v73;
  v9 = HIDWORD(v73);
  v72 = 0;
  v73 = 0;
  v70 = v8;
  v71 = v9;
  if ((_DWORD)v9)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v11 = (uint64_t *)(a1 + 56);
    v10 = v12;
    if (v12)
    {
      *v11 = 0;
      WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v10, v6);
    }
    v13 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v14 = &v7[4 * v9];
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*v7 + 40) + 8);
      *(_DWORD *)(v15 + 24) += 2;
      v65 = v15;
      v16 = *(_QWORD *)(v15 + 1272);
      if (v16)
        break;
LABEL_79:
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v65);
      v7 += 4;
      if (v7 == v14)
        goto LABEL_86;
    }
    *(_DWORD *)(v16 + 24) += 2;
    v17 = *(_QWORD *)(v15 + 528);
    if (v17)
      v17 = *(_QWORD *)(v17 + 8);
    WebCore::FrameTree::uniqueName((WebCore::FrameTree *)(v17 + 48));
    if (v68 != v64)
    {
      WTF::String::operator=(&v68, (WTF::StringImpl *)&v64);
      ++v13;
    }
    *(_DWORD *)(v16 + 24) += 2;
    *(_QWORD *)&v74 = 0;
    v62 = v16;
    v63 = 0;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v74);
    WebCore::SimpleRange::SimpleRange();
    v18 = WebCore::characterCount();
    v19 = WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v75);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v74);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v62);
    *(_QWORD *)&v74 = v18;
    *((_QWORD *)&v74 + 1) = v19;
    v21 = v68;
    if (v68 && *((_DWORD *)v68 + 1) || (v21 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) != 0)
      *(_DWORD *)v21 += 2;
    v75 = v21;
    v76 = v13;
    v22 = *v11;
    if (*v11
      || (WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11, 0), (v22 = *v11) != 0))
    {
      v23 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      v23 = 0;
    }
    v24 = 0;
    v25 = (0xD7862706ELL * (unint64_t)(277951225 * v74 + 95187966 * DWORD2(v74))) >> 4;
    for (i = 1; ; ++i)
    {
      v27 = v25 & v23;
      v28 = v22 + 72 * v27;
      v29 = *(WTF::StringImpl **)(v28 + 16);
      v30 = *(_QWORD *)v28;
      if (v29 != (WTF::StringImpl *)-1 && v30 == 0)
      {
        v20 = *(WTF::StringImpl **)(v28 + 8);
        if (!v29 && v20 == 0)
        {
          v20 = *(WTF::StringImpl **)(v28 + 24);
          if (!v20)
            break;
        }
      }
      if (v29 == (WTF::StringImpl *)-1 || (WTF::StringImpl *)((char *)v75 + 1) == 0)
      {
        if (v29 == (WTF::StringImpl *)-1 && (WTF::StringImpl *)((char *)v75 + 1) == 0)
          goto LABEL_62;
      }
      else if (v30 == (_QWORD)v74)
      {
        v35 = v29 == v75 && *(_QWORD *)(v28 + 8) == *((_QWORD *)&v74 + 1);
        if (v35 && *(_QWORD *)(v28 + 24) == v76)
          goto LABEL_62;
      }
      if (v29 == (WTF::StringImpl *)-1)
        v24 = v22 + 72 * v27;
      LODWORD(v25) = i + v27;
    }
    if (v24)
    {
      *(_BYTE *)(v24 + 64) = 0;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_BYTE *)(v24 + 32) = 0;
      --*(_DWORD *)(*v11 - 16);
      v28 = v24;
    }
    *(_OWORD *)v28 = v74;
    WTF::String::operator=((WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)&v75);
    *(_QWORD *)(v28 + 24) = v76;
    std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>(v28 + 32, v7);
    v36 = *v11;
    if (*v11)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v38 = *v11;
    if (*v11)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        goto LABEL_62;
    }
    else if (3 * v41 > 4 * v40)
    {
LABEL_62:
      v42 = HIDWORD(v67);
      if (HIDWORD(v67) == (_DWORD)v67)
      {
        v43 = WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, (unint64_t)&v74);
        v44 = HIDWORD(v67);
        v45 = v66;
        *(_OWORD *)(v66 + 32 * HIDWORD(v67)) = *(_OWORD *)v43;
        v46 = *(_DWORD **)(v43 + 16);
        if (v46)
          *v46 += 2;
        v47 = v45 + 32 * v44;
        *(_QWORD *)(v47 + 16) = v46;
        v48 = (uint64_t *)(v47 + 24);
        v49 = (uint64_t *)(v43 + 24);
      }
      else
      {
        v50 = v66;
        *(_OWORD *)(v66 + 32 * HIDWORD(v67)) = v74;
        v51 = v75;
        if (v75)
          *(_DWORD *)v75 += 2;
        v52 = v50 + 32 * v42;
        *(_QWORD *)(v52 + 16) = v51;
        v48 = (uint64_t *)(v52 + 24);
        v49 = &v76;
      }
      *v48 = *v49;
      ++HIDWORD(v67);
      v53 = v75;
      v75 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v20);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = v64;
      v64 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v20);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      goto LABEL_79;
    }
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11, (_QWORD *)v28);
    goto LABEL_62;
  }
  v67 = 0;
  v68 = 0;
  v66 = 0;
LABEL_86:
  v55 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v55 + 16))(v55, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v56);
  v58 = v68;
  v68 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v57);
    else
      *(_DWORD *)v58 -= 2;
  }
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v57);
  return WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v59);
}

uint64_t WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2, const WTF::String *a3)
{
  StringImpl *m_ptr;
  unint64_t var3;
  WTF::StringImpl *v7;
  StringImpl *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _BYTE v16[112];
  _BYTE v17[128];
  uint64_t v18[13];
  WebFoundTextRange v19;
  _BYTE v20[32];
  char v21;

  *(_OWORD *)&v19.var0 = *(_OWORD *)&a2->var0;
  m_ptr = a2->var2.var0.m_impl.m_ptr;
  if (m_ptr)
    *(_DWORD *)m_ptr += 2;
  var3 = a2->var3;
  v19.var2.var0.m_impl.m_ptr = m_ptr;
  v19.var3 = var3;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v19, (uint64_t)v20);
  v8 = v19.var2.var0.m_impl.m_ptr;
  v19.var2.var0.m_impl.m_ptr = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (!v21)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  result = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (!result)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  v10 = result;
  v11 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v11 + 2;
  v12 = *(_QWORD *)(result + 528);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0)
  {
LABEL_17:
    if (v11)
    {
      *(_DWORD *)(v10 + 24) = v11;
    }
    else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  }
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (v21)
  {
    WebCore::VisibleSelection::VisibleSelection();
    std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>((uint64_t)v16, v18);
    WebCore::TemporarySelectionChange::TemporarySelectionChange();
    if (v16[104])
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v16);
    WebCore::Document::editor(*(WebCore::Document **)(v13 + 296));
    WebCore::Editor::replaceSelectionWithText();
    MEMORY[0x19AEB2B98](v17);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v18);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
    v11 = *(_DWORD *)(v10 + 24) - 2;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange@<X0>(WebKit::WebFoundTextRangeController *this@<X0>, WebFoundTextRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  uint64_t result;
  uint64_t found;
  Node *v18;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  WebCore *v43;

  v5 = (uint64_t *)((char *)this + 56);
  v6 = *((_QWORD *)this + 7);
  v31 = (uint64_t *)((char *)this + 56);
  if (v6
    || (WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand((uint64_t *)this + 7, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = (0xD7862706ELL * (unint64_t)(277951225 * LODWORD(a2->var0) + 95187966 * LODWORD(a2->var1))) >> 4;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v7;
    v12 = v6 + 72 * (v9 & v7);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13 != -1 && *(_QWORD *)v12 == 0)
    {
      v15 = !v13 && *(_QWORD *)(v12 + 8) == 0;
      if (v15 && !*(_QWORD *)(v12 + 24))
        break;
    }
    result = WebKit::WebFoundTextRange::operator==((_QWORD *)(v6 + 72 * v11), a2);
    if ((result & 1) != 0)
      goto LABEL_35;
    if (v13 == -1)
      v8 = v6 + 72 * v11;
    LODWORD(v9) = i + v11;
  }
  if (v8)
  {
    *(_BYTE *)(v8 + 64) = 0;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_BYTE *)(v8 + 32) = 0;
    --*(_DWORD *)(*v31 - 16);
    v12 = v8;
  }
  *(_OWORD *)v12 = *(_OWORD *)&a2->var0;
  WTF::String::operator=((WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)&a2->var2);
  *(_QWORD *)(v12 + 24) = a2->var3;
  found = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (found)
  {
    v19 = found;
    *(_DWORD *)(found + 24) += 2;
    v20 = *(WebCore **)(found + 1272);
    *((_DWORD *)v20 + 6) += 2;
    v43 = v20;
    WebCore::makeRangeSelectingNodeContents(v20, v18);
    WebCore::resolveCharacterRange();
    v32 = v39;
    v33 = v40;
    v21 = v41;
    v39 = 0;
    v41 = 0;
    v34 = v21;
    v35 = v42;
    v36 = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v41);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v39);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v38);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v43);
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    v36 = 0;
  }
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)(v12 + 32), (uint64_t)&v32);
  result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
  v22 = *v31;
  if (*v31)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v31;
  if (*v31)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (v27 <= 2 * v26)
  {
LABEL_34:
    result = (uint64_t)WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v31, (_QWORD *)v12);
    v12 = result;
  }
LABEL_35:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (*(_BYTE *)(v12 + 64))
  {
    v28 = *(_QWORD *)(v12 + 32);
    *(_DWORD *)(v28 + 24) += 2;
    *(_QWORD *)a3 = v28;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 40);
    v29 = *(_QWORD *)(v12 + 48);
    *(_DWORD *)(v29 + 24) += 2;
    *(_QWORD *)(a3 + 16) = v29;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v12 + 56);
    *(_BYTE *)(a3 + 32) = 1;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::documentForFoundTextRange(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  StringImpl *m_ptr;
  uint64_t v9;
  WTF::StringImpl *v10;
  StringImpl *v11;
  AtomString v12;

  result = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
  {
    m_ptr = a2->var2.var0.m_impl.m_ptr;
    if (!m_ptr || !*((_DWORD *)m_ptr + 1))
      return *(_QWORD *)(v6 + 296);
    *(_DWORD *)m_ptr += 2;
    v12.var0.m_impl.m_ptr = m_ptr;
    v9 = WebCore::FrameTree::findByUniqueName((WebCore::FrameTree *)(v6 + 48), &v12, (WebCore::Frame *)v6);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 144))
        v6 = 0;
      else
        v6 = v9;
    }
    else
    {
      v6 = 0;
    }
    v11 = v12.var0.m_impl.m_ptr;
    v12.var0.m_impl.m_ptr = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v11, v10);
        if (v6)
          return *(_QWORD *)(v6 + 296);
        return 0;
      }
      *(_DWORD *)v11 -= 2;
    }
    if (v6)
      return *(_QWORD *)(v6 + 296);
    return 0;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::decorateTextRangeWithStyle(WebKit::WebFoundTextRangeController *this, uint64_t a2, int a3)
{
  StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  StringImpl *m_ptr;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int i;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebKit::WebPage *v43;
  __int128 v44;
  __int128 v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  WTF *v56;
  _DWORD *v57;
  WebCore::PageOverlay *v58;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  WebKit::WebFoundTextRangeController *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebFoundTextRange v68;
  _QWORD v69[4];
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[3];
  WTF *v74;
  int v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v68.var0 = *(_OWORD *)a2;
  v7 = (WTF::StringImpl *)(a2 + 16);
  v6 = *(StringImpl **)(a2 + 16);
  if (v6)
    *(_DWORD *)v6 += 2;
  v8 = *(_QWORD *)(a2 + 24);
  v68.var2.var0.m_impl.m_ptr = v6;
  v68.var3 = v8;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v68, (uint64_t)v69);
  m_ptr = v68.var2.var0.m_impl.m_ptr;
  v68.var2.var0.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v9);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  if (!v70)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69);
  v11 = (uint64_t *)((char *)this + 64);
  v12 = *((_QWORD *)this + 8);
  if (!v12)
  {
    if (!a3)
      return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69);
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand((uint64_t *)this + 8);
    v12 = *v11;
    LODWORD(v20) = 0;
    if (*v11)
      v13 = *(_DWORD *)(v12 - 8);
    else
      v13 = 0;
LABEL_31:
    v63 = v20;
    v64 = a3;
    v65 = this;
    v67 = v7;
    v21 = 0;
    v22 = (0xD7862706ELL * (unint64_t)(277951225 * *(_DWORD *)a2 + 95187966 * *(_DWORD *)(a2 + 8))) >> 4;
    for (i = 1; ; ++i)
    {
      v24 = v22 & v13;
      v25 = v12 + 40 * (v22 & v13);
      v26 = *(_QWORD *)(v25 + 16);
      if (v26 != -1 && *(_QWORD *)v25 == 0)
      {
        v28 = !v26 && *(_QWORD *)(v25 + 8) == 0;
        if (v28 && !*(_QWORD *)(v25 + 24))
          break;
      }
      if (WebKit::WebFoundTextRange::operator==((_QWORD *)(v12 + 40 * v24), (_QWORD *)a2))
      {
        v30 = v12 + 40 * v24;
        v32 = v63;
        v31 = v64;
        *(_BYTE *)(v30 + 32) = v64;
        v33 = (uint64_t)v65;
        goto LABEL_48;
      }
      if (v26 == -1)
        v21 = v12 + 40 * v24;
      LODWORD(v22) = i + v24;
    }
    if (v21)
    {
      *(_BYTE *)(v21 + 32) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      --*(_DWORD *)(*v11 - 16);
      v25 = v21;
    }
    *(_OWORD *)v25 = *(_OWORD *)a2;
    WTF::String::operator=((WTF::StringImpl **)(v25 + 16), v67);
    *(_QWORD *)(v25 + 24) = *(_QWORD *)(a2 + 24);
    v31 = v64;
    *(_BYTE *)(v25 + 32) = v64;
    v36 = *v11;
    v33 = (uint64_t)v65;
    if (*v11)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    v32 = v63;
    *(_DWORD *)(v36 - 12) = v37;
    v50 = *v11;
    if (*v11)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        goto LABEL_48;
    }
    else if (3 * v53 > 4 * v52)
    {
LABEL_48:
      if (v32 == 2 && WebKit::WebFoundTextRange::operator==((_QWORD *)a2, (_QWORD *)(v33 + 24)))
      {
        v34 = *(_DWORD **)(v33 + 72);
        *(_QWORD *)(v33 + 72) = 0;
        if (v34)
          WTF::RefCounted<WebCore::TextIndicator>::deref(v34);
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0;
        v35 = *(WTF::StringImpl **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v29);
          else
            *(_DWORD *)v35 -= 2;
        }
        *(_QWORD *)(v33 + 48) = 0;
      }
      if (v31 == 2)
      {
        *(_OWORD *)(v33 + 24) = *(_OWORD *)a2;
        WTF::String::operator=((WTF::StringImpl **)(v33 + 40), v67);
        *(_QWORD *)(v33 + 48) = *(_QWORD *)(a2 + 24);
        v38 = v70;
        if (*(_QWORD *)(v33 + 16))
        {
          if (v70)
          {
            WebKit::WebFoundTextRangeController::setTextIndicatorWithRange(v33);
            goto LABEL_114;
          }
        }
        else if (v70)
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v69[0] + 40) + 8);
          *(_DWORD *)(v39 + 24) += 2;
          v72 = v39;
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v73);
          WebKit::WebFoundTextRangeController::createTextIndicatorForRange(v33);
          v40 = v71;
          if (!v71)
          {
LABEL_113:
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v72);
LABEL_114:
            v58 = *(WebCore::PageOverlay **)(v33 + 16);
            if (v58)
              WebCore::PageOverlay::setNeedsDisplay(v58);
            return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69);
          }
          v41 = *(_QWORD *)(v33 + 8);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 8);
            if (v42)
              v43 = (WebKit::WebPage *)(v42 - 16);
            else
              v43 = 0;
          }
          else
          {
            v43 = 0;
          }
          v44 = *(_OWORD *)(v71 + 8);
          v45 = *(_OWORD *)(v71 + 40);
          v73[1] = *(_OWORD *)(v71 + 24);
          v73[2] = v45;
          v73[0] = v44;
          WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v74, v71 + 56);
          v76 = *(_DWORD *)(v40 + 72);
          v46 = *(_DWORD **)(v40 + 80);
          if (v46)
            ++v46[2];
          v77 = v46;
          v47 = *(_DWORD **)(v40 + 88);
          if (v47)
            ++v47[2];
          v78 = v47;
          v48 = *(_DWORD **)(v40 + 96);
          if (v48)
            ++v48[2];
          v79 = v48;
          WebCore::Color::Color((WebCore::Color *)&v80, (const Color *)(v40 + 104));
          v81 = *(_DWORD *)(v40 + 112);
          WebKit::WebPage::setTextIndicator(v43, (const WebCore::TextIndicatorData *)v73);
          v38 = v80;
          if ((v80 & 0x8000000000000) == 0)
          {
LABEL_90:
            v49 = v79;
            v79 = 0;
            if (v49)
            {
              if (v49[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
              else
                --v49[2];
            }
            v54 = v78;
            v78 = 0;
            if (v54)
            {
              if (v54[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
              else
                --v54[2];
            }
            v55 = v77;
            v77 = 0;
            if (v55)
            {
              if (v55[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
              else
                --v55[2];
            }
            v56 = v74;
            if (v74)
            {
              v74 = 0;
              v75 = 0;
              WTF::fastFree(v56, v29);
            }
            v57 = (_DWORD *)v71;
            v71 = 0;
            if (v57)
              WTF::RefCounted<WebCore::TextIndicator>::deref(v57);
            goto LABEL_113;
          }
LABEL_120:
          v60 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          v33 = (uint64_t)v65;
          if (!v62)
          {
            atomic_store(1u, v60);
            WTF::fastFree((WTF *)v60, v29);
          }
          goto LABEL_90;
        }
      }
      else if (v31 == 1)
      {
        v38 = v70;
        if (v70)
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69[0] + 40) + 8) + 1496)
            || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(*(_QWORD *)(v69[0] + 40) + 8)),
                (v38 = v70) != 0))
          {
            *(_QWORD *)&v73[0] = 0;
            v76 = 0;
            WebCore::DocumentMarkerController::addMarker();
            if (v76 != -1)
              ((void (*)(uint64_t *, _OWORD *))off_1E34F19C8[v76])(&v72, v73);
            goto LABEL_114;
          }
        }
      }
      else
      {
        if (v31)
          goto LABEL_114;
        v38 = v70;
        if (v70)
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69[0] + 40) + 8) + 1496)
            || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(*(_QWORD *)(v69[0] + 40) + 8)),
                (v38 = v70) != 0))
          {
            WebCore::DocumentMarkerController::removeMarkers();
            goto LABEL_114;
          }
        }
      }
      __break(1u);
      goto LABEL_120;
    }
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11);
    goto LABEL_48;
  }
  v13 = *(_DWORD *)(v12 - 8);
  v14 = v13 & ((0xD7862706ELL
              * (unint64_t)(277951225 * *(_DWORD *)a2 + 95187966 * *(_DWORD *)(a2 + 8))) >> 4);
  v15 = (_QWORD *)(v12 + 40 * v14);
  if (WebKit::WebFoundTextRange::operator==(v15, (_QWORD *)a2))
  {
LABEL_24:
    LODWORD(v20) = *(unsigned __int8 *)(v12 + 40 * v14 + 32);
  }
  else
  {
    v66 = v7;
    v16 = 1;
    while (1)
    {
      v17 = v15[2];
      if (v17 != -1 && *v15 == 0 && !v17 && v15[1] == 0)
      {
        v20 = v15[3];
        if (!v20)
          break;
      }
      v14 = (v14 + v16) & v13;
      v15 = (_QWORD *)(v12 + 40 * v14);
      ++v16;
      if (WebKit::WebFoundTextRange::operator==(v15, (_QWORD *)a2))
      {
        v7 = v66;
        goto LABEL_24;
      }
    }
    v7 = v66;
  }
  if ((_DWORD)v20 != a3)
    goto LABEL_31;
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69);
}

_DWORD *WebKit::WebFoundTextRangeController::setTextIndicatorWithRange(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;

  WebKit::WebFoundTextRangeController::createTextIndicatorForRange(a1);
  result = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  if (result)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(result);
    return 0;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::scrollTextRangeToVisible(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2)
{
  StringImpl *m_ptr;
  unint64_t var3;
  WTF::StringImpl *v6;
  StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[112];
  _BYTE v11[128];
  uint64_t v12[13];
  WebFoundTextRange v13;
  _BYTE v14[32];
  char v15;

  *(_OWORD *)&v13.var0 = *(_OWORD *)&a2->var0;
  m_ptr = a2->var2.var0.m_impl.m_ptr;
  if (m_ptr)
    *(_DWORD *)m_ptr += 2;
  var3 = a2->var3;
  v13.var2.var0.m_impl.m_ptr = m_ptr;
  v13.var3 = var3;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v13, (uint64_t)v14);
  v7 = v13.var2.var0.m_impl.m_ptr;
  v13.var2.var0.m_impl.m_ptr = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (!v15)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  result = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (!result)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  v9 = result;
  *(_DWORD *)(result + 24) += 2;
  if (v15)
  {
    WebCore::VisibleSelection::VisibleSelection();
    WebCore::Document::isTopDocument((WebCore::Document *)v9);
    std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>((uint64_t)v10, v12);
    WebCore::TemporarySelectionChange::TemporarySelectionChange();
    if (v10[104])
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v10);
    MEMORY[0x19AEB2B98](v11);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  __break(1u);
  return result;
}

WebCore::PageOverlay *WebKit::WebFoundTextRangeController::clearAllDecoratedFoundText(WebKit::WebFoundTextRangeController *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WebCore::PageOverlay *result;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v3, a2);
  }
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v4, a2);
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v6 + 48));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_QWORD *)this + 6) = 0;
  v9 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v9);
  result = (WebCore::PageOverlay *)*((_QWORD *)this + 2);
  if (result)
    return (WebCore::PageOverlay *)WebCore::PageOverlay::setNeedsDisplay(result);
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::didBeginTextSearchOperation(WebKit::WebFoundTextRangeController *this)
{
  WebCore::PageOverlay *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (WebCore::PageOverlay *)*((_QWORD *)this + 2);
  if (v2)
  {
    WebCore::PageOverlay::stopFadeOutAnimation(v2);
  }
  else
  {
    WebCore::PageOverlay::create();
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v5;
    if (v3)
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v3 + 8));
    WebCore::PageOverlayController::installPageOverlay();
  }
  return WebCore::PageOverlay::setNeedsDisplay(*((WebCore::PageOverlay **)this + 2));
}

uint64_t WebKit::WebFoundTextRangeController::addLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  WebCore::PageOverlay *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(WebCore::PageOverlay **)(a1 + 16);
  if (!v4)
  {
    WebCore::PageOverlay::create();
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v5 + 8));
    WebCore::PageOverlayController::installPageOverlay();
    v6 = WebCore::PageOverlay::layer(*(WebCore::PageOverlay **)(a1 + 16));
    (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 280))(v6, 0.0);
    v4 = *(WebCore::PageOverlay **)(a1 + 16);
  }
  v7 = WebCore::PageOverlay::layer(v4);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v9 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WebCore::PageOverlay::setNeedsDisplay(*(WebCore::PageOverlay **)(a1 + 16));
}

uint64_t WebKit::WebFoundTextRangeController::removeLayerForFindOverlay(uint64_t this)
{
  if (*(_QWORD *)(this + 16))
    return WebCore::PageOverlayController::uninstallPageOverlay();
  return this;
}

uint64_t WebKit::WebFoundTextRangeController::requestRectForFoundTextRange(WebKit::WebFoundTextRangeController *a1, uint64_t a2, WebCore::ScrollView **a3)
{
  StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  StringImpl *m_ptr;
  WebCore::ScrollView *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  WebCore::ScrollView *v15;
  void *v16;
  WTF *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _DWORD v21[4];
  WebFoundTextRange v22;
  _QWORD v23[4];
  char v24;

  *(_OWORD *)&v22.var0 = *(_OWORD *)a2;
  v4 = *(StringImpl **)(a2 + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
  v5 = *(_QWORD *)(a2 + 24);
  v22.var2.var0.m_impl.m_ptr = v4;
  v22.var3 = v5;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(a1, &v22, (uint64_t)v23);
  m_ptr = v22.var2.var0.m_impl.m_ptr;
  v22.var2.var0.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v6);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  if (!v24)
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(WebCore::ScrollView *, float, float, float, float))(*(_QWORD *)v8 + 16))(v8, 0.0, 0.0, 0.0, 0.0);
    goto LABEL_16;
  }
  v8 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23[0] + 40) + 8) + 528) + 8)
                               + 288);
  if (v8)
    ++*((_DWORD *)v8 + 2);
  WebCore::RenderObject::absoluteTextRects();
  v19[0] = WebCore::unionRect();
  v19[1] = v9;
  v20[0] = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v19);
  v20[1] = v10;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v21, (const WebCore::IntRect *)v20);
  v11 = *(float *)v21;
  v12 = *(float *)&v21[1];
  v13 = *(float *)&v21[2];
  v14 = *(float *)&v21[3];
  v15 = *a3;
  *a3 = 0;
  (*(void (**)(WebCore::ScrollView *, float, float, float, float))(*(_QWORD *)v15 + 16))(v15, v11, v12, v13, v14);
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
  if (v18)
    WTF::fastFree(v18, v16);
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) != 1)
    {
      --*((_DWORD *)v8 + 2);
      return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23);
    }
LABEL_16:
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23);
}

_DWORD *WebKit::WebFoundTextRangeController::willMoveToPage(_DWORD *this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  uint64_t v3;

  if (!a3)
  {
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      return WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v3 + 8));
  }
  return this;
}

uint64_t WebKit::WebFoundTextRangeController::mouseEvent()
{
  return 0;
}

WTF *WebKit::WebFoundTextRangeController::drawRect(WebKit::WebFoundTextRangeController *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, int8x16_t *a4)
{
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::ScrollView *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  FloatRect *v21;
  WTF *v22;
  uint64_t v23;
  WebCore::ScrollView *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  WTF *v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  _DWORD *v42;
  uint64_t v43;
  float32x2_t v44;
  WTF *result;
  int v46;
  WTF *v47;
  int v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  WTF *v59;
  WTF *v60;
  void *v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  int64x2_t v75;
  uint64_t v76;
  char v77;
  int v78;
  WTF *v79;
  uint64_t v80;
  _QWORD v81[2];
  _QWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  WTF *v85[2];
  WTF *v86[2];
  uint64_t v87;
  int v88;
  unsigned int v89;

  v7 = *((_QWORD *)this + 1);
  v8.i64[0] = 0xFFFFFFFF00000000;
  v8.i64[1] = 0xFFFFFFFF00000000;
  v75 = vaddq_s64((int64x2_t)vbslq_s8(v8, *a4, (int8x16_t)vaddq_s64(*(int64x2_t *)a4, (int64x2_t)xmmword_1978D0E60)), (int64x2_t)xmmword_1978D0E70);
  v79 = 0;
  v80 = 0;
  v9 = *(_QWORD *)(v7 + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 160);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = (*(uint64_t (**)(uint64_t, WebCore::PageOverlay *))(*(_QWORD *)v11 + 56))(v11, a2);
  v15 = (WebCore::ScrollView *)v14;
  if (v14)
    ++*(_DWORD *)(v14 + 8);
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 + 1, v12));
  while (1)
  {
    if (!*(_BYTE *)(v11 + 144))
    {
      v20 = *(_QWORD *)(v11 + 296);
      if (v20)
      {
        *(_DWORD *)(v20 + 24) += 2;
        if (!*(_QWORD *)(v20 + 1496))
          WebCore::Document::ensureMarkers((WebCore::Document *)v20);
        WebCore::DocumentMarkerController::renderedRectsForMarkers();
        v22 = (WTF *)v87;
        if (v89)
        {
          v23 = 16 * v89;
          do
          {
            *(_OWORD *)v86 = *(_OWORD *)v22;
            if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) != v11)
            {
              v24 = *(WebCore::ScrollView **)(v11 + 288);
              v81[0] = WebCore::enclosingIntRect((WebCore *)v86, v21);
              v81[1] = v25;
              v82[0] = WebCore::ScrollView::contentsToWindow(v24, (const WebCore::IntRect *)v81);
              v82[1] = v26;
              v83 = WebCore::ScrollView::windowToContents(v15, (const WebCore::IntRect *)v82);
              v84 = v27;
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v85, (const WebCore::IntRect *)&v83);
              *(_OWORD *)v86 = *(_OWORD *)v85;
            }
            if (*(float *)&v86[1] > 0.0 && *((float *)&v86[1] + 1) > 0.0)
            {
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v85, (const WebCore::IntRect *)&v75);
              if ((WebCore::FloatRect::intersects((WebCore::FloatRect *)v86, (const WebCore::FloatRect *)v85) & 1) != 0)
              {
                v28 = HIDWORD(v80);
                if (HIDWORD(v80) == (_DWORD)v80)
                {
                  v29 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, HIDWORD(v80) + 1, (unint64_t)v86);
                  v28 = HIDWORD(v80);
                  v30 = v79;
                  v31 = *v29;
                }
                else
                {
                  v30 = v79;
                  v31 = *(_OWORD *)v86;
                }
                *((_OWORD *)v30 + v28) = v31;
                ++HIDWORD(v80);
              }
            }
            v22 = (WTF *)((char *)v22 + 16);
            v23 -= 16;
          }
          while (v23);
          v22 = (WTF *)v87;
        }
        if (v22)
        {
          v87 = 0;
          v88 = 0;
          WTF::fastFree(v22, v21);
        }
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
    }
    v32 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v11 + 48), 0);
    if (!v32)
      break;
    v17 = v32;
    v18 = (unsigned int *)(v32 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
    v11 = v17;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v75, (const WebCore::IntRect *)a4);
  v87 = 0x110400001A1A1A40;
  (*(void (**)(WebCore::GraphicsContext *, int64x2_t *, uint64_t *))(*(_QWORD *)a3 + 224))(a3, &v75, &v87);
  if ((v87 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v33);
    }
  }
  WebCore::PathUtilities::pathsWithShrinkWrappedRects();
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v75.i64[0] = 0;
  v75.i32[2] = 1065353216;
  v76 = 0x1104000000000080;
  v77 = 0;
  v78 = 1065353216;
  WebCore::GraphicsContext::setDropShadow((uint64_t)a3, (uint64_t)&v75);
  if ((v76 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, v34);
    }
  }
  v75.i64[0] = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)&v75);
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if ((v75.i64[0] & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v75.i64[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v69);
      WTF::fastFree((WTF *)v69, v35);
    }
  }
  if (*((float *)a3 + 47) != 2.0)
  {
    *((_DWORD *)a3 + 46) |= 8u;
    *((_DWORD *)a3 + 47) = 0x40000000;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if (v89)
  {
    v36 = v87;
    v37 = 72 * v89;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 184))(a3, v36);
      v36 += 72;
      v37 -= 72;
    }
    while (v37);
  }
  WebCore::GraphicsContext::clearDropShadow(a3);
  if (*((_BYTE *)a3 + 194))
    v38 = 0;
  else
    v38 = *((_BYTE *)a3 + 195) == 1;
  if (!v38)
  {
    *((_WORD *)a3 + 97) = 256;
    *((_DWORD *)a3 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  if (v89)
  {
    v39 = v87;
    v40 = 72 * v89;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 176))(a3, v39);
      v39 += 72;
      v40 -= 72;
    }
    while (v40);
  }
  v41 = (float32x2_t *)*((_QWORD *)this + 9);
  if (v41)
  {
    if (v41[2].f32[0] > 0.0 && v41[2].f32[1] > 0.0)
    {
      v42 = (_DWORD *)v41[12];
      if (v42)
      {
        ++v42[2];
        v44 = v41[3];
        v43 = (uint64_t)v41[4];
        *(float32x2_t *)v75.i8 = v44;
        v75.i64[1] = v43;
        result = (WTF *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v86, (uint64_t)&v41[7]);
        v85[0] = 0;
        v85[1] = 0;
        v46 = HIDWORD(v86[1]);
        if (HIDWORD(v86[1]))
        {
          if (HIDWORD(v86[1]) >> 28)
          {
            __break(0xC471u);
            return result;
          }
          v47 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v86[1])));
          LODWORD(v85[1]) = v46;
          v85[0] = v47;
          v48 = HIDWORD(v86[1]);
          if (HIDWORD(v86[1]))
          {
            v49 = (_QWORD *)((char *)v47 + 8);
            v50 = (uint64_t *)((char *)v86[0] + 8);
            v51 = HIDWORD(v86[1]);
            do
            {
              v52 = *v50;
              *(v49 - 1) = vadd_f32(v44, (float32x2_t)*(v50 - 1));
              *v49 = v52;
              v49 += 2;
              v50 += 2;
              --v51;
            }
            while (v51);
            HIDWORD(v85[1]) = v48;
          }
        }
        WebCore::PathUtilities::pathsWithShrinkWrappedRects();
        if (*((_BYTE *)a3 + 194) != 2 || *((_BYTE *)a3 + 195) != 1)
        {
          *((_WORD *)a3 + 97) = 258;
          *((_DWORD *)a3 + 46) |= 0x20u;
        }
        (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
        v82[0] = 0x11040000FFE438FFLL;
        WebCore::GraphicsContextState::setFillColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)v82);
        (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
        if ((v82[0] & 0x8000000000000) != 0)
        {
          v72 = (unsigned int *)(v82[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            atomic_store(1u, v72);
            WTF::fastFree((WTF *)v72, v54);
          }
        }
        if (HIDWORD(v84))
        {
          v55 = v83;
          v56 = 72 * HIDWORD(v84);
          do
          {
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 176))(a3, v55);
            v55 += 72;
            v56 -= 72;
          }
          while (v56);
        }
        WebCore::GraphicsContext::drawImage();
        WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v57);
        v59 = v85[0];
        if (v85[0])
        {
          v85[0] = 0;
          LODWORD(v85[1]) = 0;
          WTF::fastFree(v59, v58);
        }
        v60 = v86[0];
        if (v86[0])
        {
          v86[0] = 0;
          LODWORD(v86[1]) = 0;
          WTF::fastFree(v60, v58);
        }
        if (v42[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
        else
          --v42[2];
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v61);
  result = v79;
  if (v79)
  {
    v79 = 0;
    LODWORD(v80) = 0;
    return (WTF *)WTF::fastFree(result, v62);
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::createTextIndicatorForRange(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  WebCore::FocusController *v9;

  WebCore::ImageOverlay::isInsideOverlay();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(v3 + 48));
  v4 = WebCore::FocusController::focusedOrMainFrame(v9);
  v5 = v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v9;
  }
  if (v4)
  {
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 256) |= 0x100u;
    WebCore::FrameSelection::updateAppearance(*(WebCore::FrameSelection **)(*(_QWORD *)(v4 + 296) + 3064));
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 256) &= ~0x100u;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return WebCore::TextIndicator::createWithRange();
}

uint64_t WebKit::WebFrame::initWithCoreMainFrame(WebKit::WebFrame *this, WebKit::WebPage *a2, WebCore::Frame *a3)
{
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 4, (uint64_t)a3);
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
    v6 = *((_QWORD *)this + 3);
  }
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  result = WebCore::FrameTree::setSpecifiedName((WebCore::FrameTree *)(v6 + 48), MEMORY[0x1E0CBF2F8]);
  if (!*((_BYTE *)a3 + 144))
    return WebCore::LocalFrame::init(a3);
  return result;
}

uint64_t WebKit::WebFrame::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = API::Object::newObject(0x78uLL, 134);
  result = WebKit::WebFrame::WebFrame(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

unsigned int *WebKit::WebFrame::createRemoteSubframe@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::AtomStringImpl **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::FrameTree *v20;
  WTF::StringImpl *v21;
  unsigned int *result;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  WebKit::WebFrame::create(a1, a3, a4, a6);
  if (!*(_QWORD *)(a1 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x19764E6CCLL);
  }
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10 || !*(_QWORD *)(v10 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x19764E6ACLL);
  }
  v11 = *a6;
  CFRetain(*(CFTypeRef *)(*a6 + 8));
  v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = &off_1E34F1A68;
  *((_QWORD *)v12 + 1) = v11;
  v24 = v12;
  WebCore::RemoteFrame::createSubframe();
  v13 = v24;
  v24 = 0;
  if (v13)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v25 + 16), v25);
  v15 = *(unsigned int **)(v25 + 16);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *(unsigned int **)(*a6 + 24);
  *(_QWORD *)(*a6 + 24) = v15;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v14);
    }
  }
  v20 = (WebCore::FrameTree *)(v25 + 48);
  WTF::AtomString::AtomString((WTF::AtomString *)&v24, a5);
  WebCore::FrameTree::setSpecifiedName(v20, (const AtomString *)&v24);
  result = (unsigned int *)v24;
  v24 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    else
      *result -= 2;
  }
  v23 = v25;
  v25 = 0;
  if (v23)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
  return result;
}

uint64_t WebKit::WebFrame::WebFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  WebKit::WebProcess *v10;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34F1890;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
    a3 = *(_QWORD *)(a1 + 80);
    a4 = *(_QWORD *)(a1 + 88);
  }
  v15[0] = a3;
  v15[1] = a4;
  v14 = a1;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebFrame*&>((uint64_t *)v10 + 33, v15, &v14, (uint64_t)&v13);
  return a1;
}

uint64_t WebKit::WebFrame::localFrameLoaderClient(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 1072))(v4))
    return 0;
  else
    return v4;
}

uint64_t WebKit::WebFrame::frameLoaderClient(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 144))
    return *(_QWORD *)(v2 + 264) + 8;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1072))(v4);
  if (v5)
    v6 = 0;
  else
    v6 = v4;
  v7 = v6 + 8;
  if (v5)
    return 0;
  else
    return v7;
}

void WebKit::WebFrame::~WebFrame(WebKit::WebFrame *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = &off_1E34F1890;
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebFrame::~WebFrame(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebFrame::protectedPage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(this + 24);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16),
        this = (*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7),
        (this & 1) == 0)
    && (v8 = *(_QWORD *)(v7[2] + 8)) != 0)
  {
    v9 = v8 - 16;
    this = (uint64_t)CFRetain(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
  return this;
}

void WebKit::WebFrame::frameTreeData(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  WebKit::WebFrame *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WebKit::WebFrame *v30;
  char v31;
  uint64_t v32;
  uint64_t v33[5];
  uint64_t v34[6];
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  CFTypeRef cf;
  _BYTE v53[24];
  int v54;
  WTF::StringImpl *v55;
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::info(this, a2);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = WebCore::FrameTree::childCount((WebCore::FrameTree *)(v5 + 48));
      if (v6)
      {
        if (v6 >= 0xD20D21)
        {
          __break(0xC471u);
          return;
        }
        v7 = 312 * v6;
        v8 = WTF::fastMalloc((WTF *)(312 * v6));
        *(_DWORD *)(a2 + 304) = v7 / 0x138;
        *(_QWORD *)(a2 + 296) = v8;
      }
      for (i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 88); i; i = *(_QWORD *)(i + 72))
      {
        WebKit::WebFrame::fromCoreFrame(i, &v30);
        v10 = v30;
        if (v30)
        {
          WebKit::WebFrame::frameTreeData(&v32, v30);
          v11 = *(_DWORD *)(a2 + 308);
          if (v11 == *(_DWORD *)(a2 + 304))
          {
            WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(a2 + 296, (unint64_t)&v32);
          }
          else
          {
            v13 = *(_QWORD *)(a2 + 296) + 312 * v11;
            *(_WORD *)v13 = v32;
            WTF::URL::URL(v13 + 8, v33);
            WTF::URL::URL(v13 + 48, v34);
            *(_QWORD *)(v13 + 88) = v34[5];
            v14 = v35;
            v35 = 0;
            *(_QWORD *)(v13 + 104) = 0;
            *(_QWORD *)(v13 + 112) = 0;
            *(_QWORD *)(v13 + 96) = v14;
            v15 = v36;
            v36 = 0;
            *(_QWORD *)(v13 + 104) = v15;
            LODWORD(v15) = v37;
            v37 = 0;
            *(_DWORD *)(v13 + 112) = v15;
            LODWORD(v15) = v38;
            v38 = 0;
            *(_DWORD *)(v13 + 116) = v15;
            *(_QWORD *)(v13 + 120) = 0;
            *(_QWORD *)(v13 + 128) = 0;
            v16 = v39;
            v39 = 0;
            *(_QWORD *)(v13 + 120) = v16;
            LODWORD(v16) = v40;
            v40 = 0;
            *(_DWORD *)(v13 + 128) = v16;
            LODWORD(v16) = v41;
            v41 = 0;
            *(_DWORD *)(v13 + 132) = v16;
            *(_QWORD *)(v13 + 136) = 0;
            *(_QWORD *)(v13 + 144) = 0;
            v17 = v42;
            v42 = 0;
            *(_QWORD *)(v13 + 136) = v17;
            LODWORD(v17) = v43;
            v43 = 0;
            *(_DWORD *)(v13 + 144) = v17;
            LODWORD(v17) = v44;
            v44 = 0;
            *(_DWORD *)(v13 + 148) = v17;
            LODWORD(v17) = v45;
            *(_BYTE *)(v13 + 156) = v46;
            *(_DWORD *)(v13 + 152) = v17;
            v18 = v47;
            v47 = 0;
            *(_QWORD *)(v13 + 160) = v18;
            v19 = v48;
            v48 = 0;
            *(_QWORD *)(v13 + 168) = v19;
            v20 = v49;
            v49 = 0;
            *(_QWORD *)(v13 + 176) = v20;
            v21 = v50;
            *(_BYTE *)(v13 + 192) = v51;
            *(_QWORD *)(v13 + 184) = v21;
            v22 = cf;
            cf = 0;
            *(_BYTE *)(v13 + 208) = 0;
            v13 += 208;
            *(_QWORD *)(v13 - 8) = v22;
            *(_DWORD *)(v13 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v13, (uint64_t)v53);
            v23 = v55;
            v55 = 0;
            *(_QWORD *)(v13 + 32) = v23;
            v24 = v56;
            v25 = v57[0];
            *(_OWORD *)(v13 + 70) = *(_OWORD *)((char *)v57 + 14);
            *(_OWORD *)(v13 + 56) = v25;
            *(_OWORD *)(v13 + 40) = v24;
            *(_QWORD *)(v13 + 88) = 0;
            *(_QWORD *)(v13 + 96) = 0;
            v26 = v58;
            v58 = 0;
            *(_QWORD *)(v13 + 88) = v26;
            LODWORD(v26) = v59;
            v59 = 0;
            *(_DWORD *)(v13 + 96) = v26;
            LODWORD(v26) = v60;
            v60 = 0;
            *(_DWORD *)(v13 + 100) = v26;
            ++*(_DWORD *)(a2 + 308);
          }
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v12);
          v28 = v55;
          v55 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v27);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v54 != -1)
            ((void (*)(char *, _BYTE *))off_1E34F1A00[v54])(&v31, v53);
          v54 = -1;
          v29 = cf;
          cf = 0;
          if (v29)
            CFRelease(v29);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v33);
          CFRelease(*((CFTypeRef *)v10 + 1));
        }
      }
    }
  }
}

unsigned int *WebKit::WebFrame::invalidate(WebKit::WebFrame *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  WebKit::WebProcess *v10;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)this + 4);
  if (v3 && (v3 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v3 = *(_QWORD *)(v3 + 2104);
    v5 = v3 & 0xFFFFFFFFFFFFFF00;
    v3 = v3;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  WebKit::WebProcess::removeWebFrame(v2, *((_QWORD *)this + 10), *((_QWORD *)this + 11), v5 | v3, v4);
  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t WebKit::WebFrame::setUpPolicyListener(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v3 = WebKit::generateListenerID(void)::uniqueListenerID++;
  v10 = v3;
  v8[0] = a3;
  v4 = *a2;
  *a2 = 0;
  v9 = v4;
  WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::add<WebKit::WebFrame::PolicyCheck>((uint64_t *)(a1 + 48), &v10, (uint64_t)v8, (uint64_t)&v7);
  v5 = v9;
  v9 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v10;
}

unsigned int *WebKit::WebFrame::loadDidCommitInAnotherProcess(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Frame **v21;
  int v22;
  uint64_t v23;
  WebCore::Frame **v24;
  uint64_t v25;
  WebCore::Frame **v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::Frame *v30;
  void *v31;
  WebCore::Frame **v32;
  uint64_t v33;
  WebCore::Frame *v34;
  uint64_t v35;
  WebCore::Frame **v36;
  WebCore::Frame *v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WebCore::Frame *v45;
  char v46;
  char v47;
  WebCore::Frame **v48;
  unsigned int v49;
  WebCore::Frame *v50;

  v1 = *((_QWORD *)result + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v3 = result;
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v2 + 24);
        if (!v6)
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        v7 = *(_QWORD *)(v6 + 8);
        if (!v7)
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        v8 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 48));
        v9 = v8;
        if (v8)
        {
          v10 = (unsigned int *)(v8 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        v12 = *(_QWORD *)(v2 + 120);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            v14 = 0;
            *(_DWORD *)(v13 + 24) += 2;
LABEL_14:
            v15 = *((_QWORD *)v3 + 3);
            if (!v15
              || (v16 = *(_QWORD *)(v15 + 8)) == 0
              || *(_BYTE *)(v16 + 144)
              || (v17 = *(_QWORD *)(*(_QWORD *)(v16 + 280) + 16),
                  ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1072))(v17) & 1) != 0))
            {
LABEL_63:
              if ((v14 & 1) == 0)
              {
                if (*(_DWORD *)(v13 + 24) == 2)
                {
                  if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v13);
                }
                else
                {
                  *(_DWORD *)(v13 + 24) -= 2;
                }
              }
              if (v9)
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
              return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
            }
            v47 = v14;
            v18 = *(_QWORD *)(v17 + 24);
            *(_QWORD *)(v17 + 24) = 0;
            v46 = *(_BYTE *)(v17 + 32);
            *(_BYTE *)(v17 + 32) = 0;
            v19 = WebCore::Frame::ownerRenderer((WebCore::Frame *)v2);
            WebCore::LocalFrame::setView();
            v48 = 0;
            if (v9)
            {
              WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v9 + 48), (WebCore::Frame *)v2);
              if (!v13)
              {
                CFRetain(*((CFTypeRef *)v3 + 1));
                v20 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v20 = &off_1E34F1AB8;
                *(_QWORD *)(v20 + 8) = v3;
                *(_QWORD *)(v20 + 16) = v18;
                *(_BYTE *)(v20 + 24) = v46;
                v48 = (WebCore::Frame **)v20;
                WebCore::RemoteFrame::createSubframe();
                v21 = v48;
                v48 = 0;
                if (v21)
                  (*((void (**)(WebCore::Frame **))*v21 + 1))(v21);
                v22 = 0;
LABEL_37:
                WebCore::Frame::takeWindowProxyFrom(v50, (WebCore::Frame *)v2);
                v29 = *(_QWORD *)(v2 + 160);
                if (v29)
                  v30 = *(WebCore::Frame **)(v29 + 8);
                else
                  v30 = 0;
                WebCore::Frame::setOpener(v50, v30);
                WebCore::Frame::openedFrames((WebCore::Frame *)v2);
                if (v49)
                {
                  v32 = v48;
                  v33 = 8 * v49;
                  do
                  {
                    v34 = *v32++;
                    WebCore::Frame::setOpener(v34, v50);
                    v33 -= 8;
                  }
                  while (v33);
                }
                WTF::Vector<WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v31);
                WebCore::FrameTree::setSpecifiedName((WebCore::Frame *)((char *)v50 + 48), (const AtomString *)(v2 + 64));
                v14 = v47;
                if (v19)
                {
                  v35 = *((_QWORD *)v50 + 32);
                  if (v35)
                    ++*(_DWORD *)(v35 + 8);
                  v48 = (WebCore::Frame **)v35;
                  WebCore::RenderWidget::setWidget();
                  v36 = v48;
                  v48 = 0;
                  if (v36)
                  {
                    if (*((_DWORD *)v36 + 2) == 1)
                      (*((void (**)(WebCore::Frame **))*v36 + 1))(v36);
                    else
                      --*((_DWORD *)v36 + 2);
                  }
                }
                v37 = v50;
                WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v50 + 4, (uint64_t)v50);
                v39 = (unsigned int *)*((_QWORD *)v37 + 2);
                if (v39)
                {
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 + 1, v39));
                }
                v41 = (unsigned int *)*((_QWORD *)v3 + 3);
                *((_QWORD *)v3 + 3) = v39;
                if (v41)
                {
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    atomic_store(1u, v41);
                    WTF::fastFree((WTF *)v41, v38);
                  }
                }
                v44 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16);
                if (v44)
                  v44 = *(_QWORD *)(v44 + 8);
                if (v44 == v2)
                  WebCore::FocusController::setFocusedFrame();
                WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v2 + 280));
                if (v22)
                  WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition((WebCore::HTMLFrameOwnerElement *)v13);
                v45 = v50;
                v50 = 0;
                if (v45)
                  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v45 + 2);
                goto LABEL_63;
              }
            }
            else if (!v13)
            {
              CFRetain(*((CFTypeRef *)v3 + 1));
              v25 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v25 = &off_1E34F1AB8;
              *(_QWORD *)(v25 + 8) = v3;
              *(_QWORD *)(v25 + 16) = v18;
              *(_BYTE *)(v25 + 24) = v46;
              v48 = (WebCore::Frame **)v25;
              WebCore::RemoteFrame::createMainFrame();
              v26 = v48;
              v48 = 0;
              if (v26)
                (*((void (**)(WebCore::Frame **))*v26 + 1))(v26);
              v22 = 0;
LABEL_33:
              v27 = (unsigned int *)((char *)v50 + 8);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
              WebCore::Page::setMainFrame();
              v48 = 0;
              if (v50)
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v50 + 2);
              goto LABEL_37;
            }
            WebCore::Frame::disconnectOwnerElement((WebCore::Frame *)v2);
            CFRetain(*((CFTypeRef *)v3 + 1));
            v23 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v23 = &off_1E34F1AB8;
            *(_QWORD *)(v23 + 8) = v3;
            *(_QWORD *)(v23 + 16) = v18;
            *(_BYTE *)(v23 + 24) = v46;
            v48 = (WebCore::Frame **)v23;
            WebCore::RemoteFrame::createSubframeWithContentsInAnotherProcess();
            v24 = v48;
            v48 = 0;
            if (v24)
              (*((void (**)(WebCore::Frame **))*v24 + 1))(v24);
            v22 = 1;
            if (v9)
              goto LABEL_37;
            goto LABEL_33;
          }
        }
        else
        {
          v13 = 0;
        }
        v14 = 1;
        goto LABEL_14;
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::createProvisionalFrame(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;

  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 144))
      {
        v5 = result;
        v6 = (unsigned int *)(v3 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(v3 + 24);
        if (v8 && *(_QWORD *)(v8 + 8))
        {
          v9 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v3 + 48));
          v10 = v9;
          if (v9)
          {
            v11 = (unsigned int *)(v9 + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
            CFRetain(*((CFTypeRef *)v5 + 1));
            v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v13 = &off_1E34F1AE0;
            v13[1] = v5;
            v13[2] = v5;
            v18 = v13;
            WebCore::LocalFrame::createProvisionalSubframe();
          }
          else
          {
            CFRetain(*((CFTypeRef *)v5 + 1));
            v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v17 = &off_1E34F1AE0;
            v17[1] = v5;
            v17[2] = v5;
            v18 = v17;
            WebCore::LocalFrame::createMainFrame();
          }
          if (v18)
            (*(void (**)(_QWORD *))(*v18 + 8))(v18);
          if (v19)
          {
            v14 = v19 + 2;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
          }
          v16 = *((_QWORD *)v5 + 5);
          *((_QWORD *)v5 + 5) = v19;
          if (v16)
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 8));
          WebCore::LocalFrame::init((WebCore::LocalFrame *)v19);
          if (*(_BYTE *)(a2 + 8))
            *((_QWORD *)v5 + 14) = *(_QWORD *)a2;
          if (v19)
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19 + 2);
          if (v10)
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::destroyProvisionalFrame(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 280) + 16);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1072))(v2) & 1) == 0)
    {
      v3 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      *(_BYTE *)(v2 + 32) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    v4 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v1 + 48));
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v4 + 48), (WebCore::Frame *)v1);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    }
    WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v1 + 280));
    WebCore::LocalFrame::setView();
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  }
  return this;
}

unsigned int *WebKit::WebFrame::commitProvisionalFrame(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  WebCore::Frame *v28;
  void *v29;
  WebCore::Frame **v30;
  uint64_t v31;
  WebCore::Frame *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;

  v1 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v1)
  {
    v2 = this;
    v3 = *((_QWORD *)this + 3);
    if (!v3)
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4 || !*(_BYTE *)(v4 + 144))
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
    {
LABEL_47:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    }
    v9 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v4 + 48));
    v10 = v9;
    if (v9)
    {
      v11 = (unsigned int *)(v9 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = *(_QWORD *)(v4 + 120);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = 0;
        *(_DWORD *)(v14 + 24) += 2;
LABEL_15:
        v16 = WebCore::Frame::ownerRenderer((WebCore::Frame *)v4);
        if (v10)
          WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v10 + 48), (WebCore::Frame *)v4);
        WebCore::Frame::disconnectOwnerElement((WebCore::Frame *)v4);
        v17 = *(_QWORD *)(v4 + 264);
        v18 = *(_QWORD *)(v17 + 24);
        *(_QWORD *)(v17 + 24) = 0;
        *(_BYTE *)(v17 + 32) = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 16), v1);
        v20 = *(unsigned int **)(v1 + 16);
        if (v20)
        {
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = (unsigned int *)*((_QWORD *)v2 + 3);
        *((_QWORD *)v2 + 3) = v20;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v19);
          }
        }
        WebCore::RemoteFrame::setView();
        v36 = 0;
        WebCore::FrameTree::setSpecifiedName((WebCore::FrameTree *)(v1 + 48), (const AtomString *)(v4 + 64));
        if (v16)
        {
          v25 = *(_DWORD **)(v1 + 288);
          if (v25)
            ++v25[2];
          v36 = v25;
          WebCore::RenderWidget::setWidget();
          v26 = v36;
          v36 = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
        }
        WebCore::Frame::setOwnerElement((WebCore::Frame *)v1, (WebCore::HTMLFrameOwnerElement *)v14);
        if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
        {
          v34 = (unsigned int *)(v1 + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          WebCore::Page::setMainFrame();
          v36 = 0;
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
        }
        WebCore::Frame::takeWindowProxyFrom((WebCore::Frame *)v1, (WebCore::Frame *)v4);
        v27 = *(_QWORD *)(v4 + 160);
        if (v27)
          v28 = *(WebCore::Frame **)(v27 + 8);
        else
          v28 = 0;
        WebCore::Frame::setOpener((WebCore::Frame *)v1, v28);
        WebCore::Frame::openedFrames((WebCore::Frame *)v4);
        if (v37)
        {
          v30 = (WebCore::Frame **)v36;
          v31 = 8 * v37;
          do
          {
            v32 = *v30++;
            WebCore::Frame::setOpener(v32, (WebCore::Frame *)v1);
            v31 -= 8;
          }
          while (v31);
        }
        WTF::Vector<WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v29);
        v33 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 16);
        if (v33 && *(_QWORD *)(v33 + 8) == v4)
          WebCore::FocusController::setFocusedFrame();
        if (v14)
          WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition((WebCore::HTMLFrameOwnerElement *)v14);
        if ((v15 & 1) == 0)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        if (v10)
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
        goto LABEL_47;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = 1;
    goto LABEL_15;
  }
  return this;
}

unsigned int *WebKit::WebFrame::removeFromTree(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(unsigned int **)(v1 + 8);
    if (v2)
    {
      v3 = v2 + 2;
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = *((_QWORD *)this + 4);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          if (*(_QWORD *)(v6 + 32))
          {
            v7 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 12));
            if (v7)
            {
              v8 = (unsigned int *)(v7 + 8);
              do
                v9 = __ldaxr(v8);
              while (__stlxr(v9 + 1, v8));
              WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v7 + 48), (WebCore::Frame *)v2);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
            }
            (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 64))(v2);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2 + 2);
    }
  }
  return this;
}

void WebKit::WebFrame::didReceivePolicyDecision(CFTypeRef *this, uint64_t a2, __int16 *a3)
{
  WebKit::WebFrame *v5;
  _QWORD *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::DocumentLoader *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = (WebKit::WebFrame *)this;
  v6 = this[4];
  if (v6)
  {
    v7 = v6[1];
    if (v7)
    {
      v8 = *a3;
      CFRetain(this[1]);
      *((_WORD *)v5 + 52) = v8;
      *(_BYTE *)(v7 + 2234) = 1;
      CFRelease(*((CFTypeRef *)v5 + 1));
      if (*((_BYTE *)a3 + 184))
      {
        v46 = *((_QWORD *)v5 + 4);
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 8);
          if (v47)
            v48 = v47 - 16;
          else
            v48 = 0;
        }
        else
        {
          v48 = 0;
        }
        WebKit::WebPage::addConsoleMessage(v48, *((_QWORD *)v5 + 10), *((_QWORD *)v5 + 11));
      }
    }
  }
  v9 = *((_QWORD *)v5 + 3);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 8))
    {
      v10 = (uint64_t *)((char *)v5 + 48);
      v11 = *((_QWORD *)v5 + 6);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = (uint64_t *)(v11 + 24 * v16);
        v18 = *v17;
        if (*v17 != a2)
        {
          v45 = 1;
          while (v18)
          {
            v16 = (v16 + v45) & v12;
            v17 = (uint64_t *)(v11 + 24 * v16);
            v18 = *v17;
            ++v45;
            if (*v17 == a2)
              goto LABEL_8;
          }
          v17 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        }
LABEL_8:
        if ((uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4)) != v17)
        {
          v19 = 0;
          v20 = *((unsigned __int8 *)v17 + 8);
          v21 = v17[2];
          v17[2] = 0;
          if (!*v10 || (v19 = *v10 + 24 * *(unsigned int *)(*v10 - 4), (uint64_t *)v19 != v17))
          {
            if ((uint64_t *)v19 != v17)
            {
              *v17 = -1;
              v17[2] = 0;
              ++*(_DWORD *)(*v10 - 16);
              v22 = *v10;
              v23 = *v10 ? *(_DWORD *)(v22 - 12) - 1 : -1;
              *(_DWORD *)(v22 - 12) = v23;
              v24 = *v10;
              if (*v10)
              {
                v25 = 6 * *(_DWORD *)(v24 - 12);
                v26 = *(_DWORD *)(v24 - 4);
                if (v25 < v26 && v26 >= 9)
                  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v10, v26 >> 1, 0);
              }
            }
          }
          if (v21)
          {
            if (!v20)
              goto LABEL_49;
            v28 = *((_QWORD *)v5 + 3);
            if (!v28)
              goto LABEL_49;
            v29 = *(_QWORD *)(v28 + 8);
            if (!v29
              || *(_BYTE *)(v29 + 144)
              || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v29 + 280) + 16) + 1072))(*(_QWORD *)(*(_QWORD *)(v29 + 280) + 16)) & 1) != 0
              || !*((_BYTE *)a3 + 144))
            {
              goto LABEL_49;
            }
            v30 = *((_QWORD *)v5 + 3);
            if (!v30)
              goto LABEL_79;
            v31 = *(_QWORD *)(v30 + 8);
            if (!v31)
              goto LABEL_46;
            v32 = *(_QWORD *)(v31 + 24);
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 8);
              if (v33)
              {
                v34 = *(_QWORD **)(*(_QWORD *)(v33 + 48) + 16);
                if (((*(uint64_t (**)(_QWORD *))(*v34 + 1368))(v34) & 1) == 0 && *(_QWORD *)(v34[2] + 8))
                {
                  v35 = *((_QWORD *)v5 + 3);
                  if (v35)
                  {
                    v35 = *(_QWORD *)(v35 + 8);
                    if (v35)
                    {
                      v35 = *(_QWORD *)(v35 + 24);
                      if (v35)
                      {
                        v35 = *(_QWORD *)(v35 + 8);
                        if (v35)
                        {
                          v36 = *(_QWORD **)(*(_QWORD *)(v35 + 48) + 16);
                          if (((*(uint64_t (**)(_QWORD *))(*v36 + 1368))(v36) & 1) != 0)
                          {
                            v35 = 0;
                          }
                          else
                          {
                            v37 = *(_QWORD *)(v36[2] + 8);
                            if (v37)
                              v35 = v37 - 16;
                            else
                              v35 = 0;
                          }
                        }
                      }
                    }
                  }
                  if (!*((_BYTE *)a3 + 144))
                    goto LABEL_78;
                  *(_BYTE *)(v35 + 2248) = *((_BYTE *)a3 + 134);
                }
                v38 = *((_QWORD *)v5 + 3);
                if (!v38)
                  goto LABEL_46;
                v31 = *(_QWORD *)(v38 + 8);
                if (!v31)
                  goto LABEL_46;
              }
            }
            if (!*(_BYTE *)(v31 + 144))
            {
              v44 = *(_QWORD *)(*(_QWORD *)(v31 + 280) + 16);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 1072))(v44))
                v39 = 0;
              else
                v39 = v44;
            }
            else
            {
LABEL_46:
              v39 = 0;
            }
            if (!*((_BYTE *)a3 + 144))
              goto LABEL_78;
            while (1)
            {
              WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(v39, (uint64_t)(a3 + 16));
LABEL_49:
              v40 = *((_QWORD *)a3 + 2);
              *((_BYTE *)v5 + 64) = *((_BYTE *)a3 + 24);
              *((_QWORD *)v5 + 7) = v40;
              if (*((_QWORD *)a3 + 1))
              {
                v41 = *((_QWORD *)v5 + 3);
                if (v41)
                {
                  v42 = *(_QWORD *)(v41 + 8);
                  if (v42)
                  {
                    if (!*(_BYTE *)(v42 + 144))
                    {
                      v43 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v42 + 280) + 104);
                      if (v43)
                      {
                        ++*((_DWORD *)v43 + 6);
                        WebCore::DocumentLoader::setNavigationID(v43);
                        if (*((_DWORD *)v43 + 6) == 1)
                          (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v43 + 24))(v43);
                        else
                          --*((_DWORD *)v43 + 6);
                      }
                    }
                  }
                }
              }
              if (*((_BYTE *)a3 + 2))
                break;
              if (!*((_BYTE *)a3 + 160))
                break;
              v49 = WebKit::WebFrame::page(v5);
              if (!v49)
                break;
              v5 = (WebKit::WebFrame *)v49;
              v50 = *(_QWORD *)(v49 + 88);
              CFRetain(*(CFTypeRef *)(v50 + 8));
              if (*((_BYTE *)a3 + 160))
              {
                WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)v5 + 86, (const char ***)a3 + 19);
                CFRelease(*(CFTypeRef *)(v50 + 8));
                break;
              }
LABEL_78:
              __break(1u);
LABEL_79:
              v39 = 0;
            }
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, *((unsigned __int8 *)a3 + 2));
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebFrame::startDownload(uint64_t result, WebCore::ResourceRequest *a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  WebKit::WebProcess *v21;
  uint64_t v22[2];
  __int128 v23;
  char v24;
  __int16 v25;
  IPC::Encoder *v26;
  _BYTE v27[24];
  int v28;
  unsigned __int8 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 64))
    return result;
  v8 = (char *)result;
  v9 = *(_QWORD *)(result + 24);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 144))
  {
    v10 = 0;
    v11 = 1;
LABEL_6:
    v12 = 0;
    v27[0] = 0;
    goto LABEL_9;
  }
  result = *(_QWORD *)(v10 + 296);
  if (!result)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v13 = WebCore::Document::topOrigin((WebCore::Document *)result);
  v27[0] = 0;
  v28 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v13 + 8);
  v11 = 0;
  v12 = 1;
LABEL_9:
  v29 = v12;
  if (!v8[64])
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *((_QWORD *)v8 + 7);
  v8[64] = 0;
  v25 = *((_WORD *)v8 + 52);
  if ((v11 & 1) == 0)
  {
    v8 = &_MergedGlobals_106;
    {
      v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
LABEL_13:
      v15 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v14) + 24);
      v23 = *(_OWORD *)(v10 + 32);
      v24 = 1;
      v22[0] = WebCore::Frame::pageID((WebCore::Frame *)v10);
      v22[1] = v16;
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 272;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v26 = (IPC::Encoder *)v17;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v4;
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v17, a2);
      IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v17, (uint64_t)v27);
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v17, (char *)&v25);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a3);
      *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a4;
      IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v17, (uint64_t *)&v23);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v17, v22);
      IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v26, 0, 0);
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
        result = WTF::fastFree(v19, v20);
      }
      v12 = v29;
      goto LABEL_16;
    }
LABEL_22:
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
    v8[2488] = 1;
    goto LABEL_13;
  }
LABEL_16:
  if (v12)
  {
    if (v28 != -1)
      return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34F1A00[v28])(&v23, v27);
  }
  return result;
}

uint64_t WebKit::WebFrame::convertMainResourceLoadToDownload(uint64_t this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  WebCore::Document *v12;
  uint64_t v13;
  char *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  char *v22;
  WebKit::WebProcess *v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  IPC::Encoder *v27;
  _BYTE v28[24];
  int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 64))
    return this;
  v8 = this;
  v9 = *(_QWORD *)(this + 24);
  if (v9
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && !*(_BYTE *)(v10 + 144)
    && (v12 = *(WebCore::Document **)(v10 + 296)) != 0)
  {
    v13 = WebCore::Document::topOrigin(v12);
    v28[0] = 0;
    v29 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v28, v13 + 8);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v28[0] = 0;
  }
  v30 = v11;
  v14 = (char *)*(unsigned __int8 *)(v8 + 64);
  if (!*(_BYTE *)(v8 + 64))
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(v8 + 56);
  *(_BYTE *)(v8 + 64) = 0;
  a2 = (WebCore::DocumentLoader *)WebCore::DocumentLoader::mainResourceLoader(a2);
  v14 = &_MergedGlobals_106;
  {
LABEL_20:
    v22 = v14;
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
    v22[2488] = 1;
    goto LABEL_11;
  }
  v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
LABEL_11:
  LOBYTE(v25) = 0;
  v26 = 0;
  if (a2)
  {
    v16 = *((_QWORD *)a2 + 93);
    v26 = 1;
    v25 = v16;
  }
  v24 = *(_WORD *)(v8 + 104);
  v17 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v15) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 219;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v27 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v25);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v18, a3);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v18, (uint64_t)v28);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v18, a4);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v18, (char *)&v24);
  IPC::Connection::sendMessageImpl(v17, (uint64_t *)&v27, 0, 0);
  this = (uint64_t)v27;
  v27 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)this, v19);
    this = WTF::fastFree(v20, v21);
  }
  if (v30)
  {
    if (v29 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E34F1A00[v29])(&v25, v28);
  }
  return this;
}

uint64_t WebKit::WebFrame::addConsoleMessage(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        result = *(_QWORD *)(v2 + 296);
        if (result)
          return WebCore::Document::addConsoleMessage();
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::source@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *active;
  _DWORD *v9;
  void *v10;
  WebCore::SharedBuffer *v11;
  WebCore::FragmentedSharedBuffer *v12;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_QWORD *)(v4 + 296);
    if (v7)
    {
      *(_DWORD *)(v7 + 24) += 2;
      if (*(_QWORD *)(v7 + 1744)
        && (active = (_DWORD *)WebCore::FrameLoader::activeDocumentLoader(*(WebCore::FrameLoader **)(v4 + 280))) != 0)
      {
        v9 = active;
        ++active[6];
        WebCore::DocumentLoader::mainResourceData((WebCore::DocumentLoader *)active);
        if (v12)
        {
          WebCore::FragmentedSharedBuffer::makeContiguous(v12);
          WebCore::SharedBuffer::data(v11);
          PAL::TextEncoding::decode();
          if (v11)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v11, v10);
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v12, v10);
        }
        else
        {
          *a2 = 0;
        }
        if (v9[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
        else
          --v9[6];
      }
      else
      {
        *a2 = 0;
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::contentsAsString@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  WebKit::WebFrame *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebKit::WebFrame *v32;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v5 = this;
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (WebKit::WebFrame::isFrameSet(*((WebKit::WebFrame **)this + 3)))
    {
      LODWORD(v30) = 0;
      v28 = 0;
      v29 = 0;
      BYTE4(v30) = 1;
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 88);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        while (1)
        {
          v14 = v30;
          if ((_DWORD)v30)
          {
            LOBYTE(v32) = 32;
            if (v29 && (v30 < *(_DWORD *)(v29 + 4) ? (v15 = v28 == 0) : (v15 = 0), v15))
            {
              v16 = *(_DWORD *)(v29 + 16);
              v17 = *(_QWORD *)(v29 + 8);
              LODWORD(v30) = v30 + 1;
              if ((v16 & 4) != 0)
                *(_BYTE *)(v17 + v14) = 32;
              else
                *(_WORD *)(v17 + 2 * v14) = 32;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          WebKit::WebFrame::fromCoreFrame(v11, &v32);
          v18 = v32;
          if (v32)
          {
            WebKit::WebFrame::contentsAsString((uint64_t *)&v31, v32);
            if ((_DWORD)v30 || v29)
            {
              if (v31)
              {
                v25 = *((_QWORD *)v31 + 1);
                v26 = *((unsigned int *)v31 + 1) | ((unint64_t)((*((_DWORD *)v31 + 4) >> 2) & 1) << 32);
              }
              else
              {
                v25 = 0;
                v26 = 0x100000000;
              }
              WTF::StringBuilder::append((uint64_t)&v28, v25, v26);
              v20 = v31;
            }
            else
            {
              WTF::String::operator=(&v28, (WTF::StringImpl *)&v31);
              v20 = v31;
              if (v31)
                v21 = *((_DWORD *)v31 + 1);
              else
                v21 = 0;
              LODWORD(v30) = v21;
            }
            v31 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
            CFRelease(*((CFTypeRef *)v18 + 1));
          }
          v22 = *(_QWORD *)(v11 + 72);
          if (!v22)
            break;
          v23 = (unsigned int *)(v22 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
          v11 = v22;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
      }
      WTF::StringBuilder::toString((WTF::StringBuilder *)&v28, a2);
      WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v28, v27);
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 296);
      if (v9)
      {
        *(_DWORD *)(v9 + 24) += 2;
        v10 = *(_QWORD *)(v9 + 1272);
        if (v10)
        {
          *(_DWORD *)(v10 + 24) += 2;
          WebCore::makeRangeSelectingNodeContents((WebCore *)v10, v8);
          WebCore::plainText();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v30);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v28);
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        else
        {
          *a2 = 0;
        }
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::WebFrame::isFrameSet(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Node *v6;

  if (!this)
    return 0;
  v1 = *((_QWORD *)this + 1);
  if (!v1 || *(_BYTE *)(v1 + 144))
    return 0;
  v4 = (unsigned int *)(v1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::Node **)(v1 + 296);
  if (v6)
  {
    *((_DWORD *)v6 + 6) += 2;
    v2 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 392))(v6);
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  else
  {
    v2 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v2;
}

unsigned int *WebKit::WebFrame::selectionAsString@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::Editor *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
    WebCore::Editor::selectedText(v7);
    WebCore::LocalFrame::displayStringModifiedByEncoding((WebCore::LocalFrame *)v4, (const WTF::String *)&v10);
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebKit::WebFrame::name@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 3);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (WebCore::FrameTree::uniqueName((WebCore::FrameTree *)(v4 + 48)), (this = v7) != 0))
  {
    v6 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *a2 = v7;
    if (v6)
      *(_DWORD *)v7 = v6;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::certificateInfo@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  const void *v8;
  int v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 3);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0 || *(_BYTE *)(v3 + 144))
  {
    *a2 = 0;
    return this;
  }
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 88);
  if (!v6)
  {
    *a2 = 0;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  if (*(_BYTE *)(v6 + 1400))
  {
    v8 = *(const void **)(v6 + 1392);
    if (v8)
    {
      v11 = v6;
      CFRetain(v8);
      *a2 = v8;
      CFRetain(v8);
      CFRelease(v8);
      v6 = v11;
      v10 = *(_DWORD *)(v11 + 24);
      v7 = v10 - 1;
      if (v10 != 1)
        goto LABEL_11;
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
  }
  *a2 = 0;
  if (!v7)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(v6 + 24) = v7;
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
}

unsigned int *WebKit::WebFrame::innerText(unsigned int *this, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Element *v5;

  if (a2 && (v2 = *(_QWORD *)(a2 + 8)) != 0 && !*(_BYTE *)(v2 + 144))
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = *(WebCore::Element **)(*(_QWORD *)(v2 + 296) + 1272);
    if (v5)
      WebCore::Element::innerText(v5);
    else
      *(_QWORD *)this = 0;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t WebKit::WebFrame::childFrames@<X0>(WebKit::WebFrame *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return API::Array::create(a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return API::Array::create(a2);
  result = WebCore::FrameTree::childCount((WebCore::FrameTree *)(v4 + 48));
  if (!(_DWORD)result)
    return API::Array::create(a2);
  v22 = 0;
  if (result >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    LODWORD(v22) = result;
    v21 = WTF::fastMalloc((WTF *)(8 * result));
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 88);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      while (1)
      {
        WebKit::WebFrame::fromCoreFrame(v7, &v20);
        v12 = v20;
        if (v20)
        {
          v13 = HIDWORD(v22);
          if (HIDWORD(v22) == (_DWORD)v22)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)&v21, &v20);
          }
          else
          {
            v14 = v21;
            CFRetain(*(CFTypeRef *)(v20 + 8));
            *(_QWORD *)(v14 + 8 * v13) = v12;
            ++HIDWORD(v22);
          }
          v15 = v20;
          v20 = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
        }
        v16 = *(_QWORD *)(v7 + 72);
        if (!v16)
          break;
        v10 = (unsigned int *)(v16 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
        v7 = v16;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
    }
    v17 = (WebKit *)API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v17 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v17);
    *(_QWORD *)v17 = &off_1E34CC2F8;
    *((_QWORD *)v17 + 2) = v21;
    v18 = v22;
    v21 = 0;
    v22 = 0;
    *((_QWORD *)v17 + 3) = v18;
    *a2 = v17;
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v19);
  }
  return result;
}

unsigned int *WebKit::WebFrame::layerTreeAsText@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::RenderView *v7;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (this = *(unsigned int **)(v3 + 8)) != 0 && !*((_BYTE *)this + 144))
  {
    v5 = this + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (WebCore::RenderView *)WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)this);
    WebCore::RenderView::compositor(v7);
    WebCore::RenderLayerCompositor::layerTreeAsText();
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a2 = v4;
  }
  return this;
}

uint64_t WebKit::WebFrame::pendingUnloadCount(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WebCore::LocalDOMWindow::pendingUnloadEventListeners(*(WebCore::LocalDOMWindow **)(*(_QWORD *)(v2 + 296) + 696));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v6;
}

uint64_t WebKit::WebFrame::allowsFollowingLink(WebKit::WebFrame *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  WebCore::OriginAccessPatternsForWebProcess *v7;
  uint64_t canDisplay;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 144))
    return 1;
  v5 = (unsigned int *)(v3 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v3 + 296) + 192));
  WebCore::OriginAccessPatternsForWebProcess::singleton(v7);
  canDisplay = WebCore::SecurityOrigin::canDisplay();
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  return canDisplay;
}

uint64_t WebKit::WebFrame::jsContext(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::ScriptController *v6;
  WebCore::DOMWrapperWorld *v7;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::ScriptController **)(v2 + 304);
  v7 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(this);
  v3 = *(_QWORD *)(WebCore::ScriptController::jsWindowProxy(v6, v7) + 16);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v3;
}

uint64_t WebKit::WebFrame::jsContextForServiceWorkerWorld(WebKit::WebFrame *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;

  v2 = *((_QWORD *)this + 3);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (v4 = *(_QWORD *)(v3 + 24)) != 0
    && (v5 = *(WebCore::Page **)(v4 + 8)) != 0)
  {
    return WebCore::Page::serviceWorkerGlobalObject(v5, a2);
  }
  else
  {
    return 0;
  }
}

unsigned int *WebKit::WebFrame::setAccessibleName(unsigned int *this, const WTF::AtomString *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::AXObjectCache *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  void *v12;

  v2 = atomic_load(MEMORY[0x1E0DCF730]);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if (!*(_BYTE *)(v4 + 144))
        {
          v6 = (unsigned int *)(v4 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          v8 = *(_QWORD *)(v4 + 296);
          if (v8)
          {
            *(_DWORD *)(v8 + 24) += 2;
            v9 = (WebCore::AXObjectCache *)WebCore::Document::axObjectCache((WebCore::Document *)v8);
            v10 = WebCore::AXObjectCache::rootObject(v9);
            if (v10)
            {
              v11 = (unsigned __int8 **)v10;
              WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v10 + 8));
              (*((void (**)(unsigned __int8 **, const WTF::AtomString *))*v11 + 169))(v11, a2);
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v11[1], v12);
            }
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebFrame::contentBounds(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ScrollView *v3;
  WebCore::ScrollView *v4;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (WebCore::ScrollView *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      if (v3)
      {
        v4 = v3;
        ++*((_DWORD *)v3 + 2);
        WebCore::ScrollView::contentsSize(v3);
        WebCore::ScrollView::contentsSize(v4);
        if (*((_DWORD *)v4 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v4 + 8))(v4);
        else
          --*((_DWORD *)v4 + 2);
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::visibleContentBounds(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      if (v3)
      {
        v4 = (_DWORD *)v3;
        ++*(_DWORD *)(v3 + 8);
        WebCore::ScrollableArea::visibleContentRectIncludingScrollbars();
        if (v4[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        else
          --v4[2];
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::visibleContentBoundsExcludingScrollbars(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _DWORD *v5;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v3 = (unsigned int *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        v5 = *(_DWORD **)(v2 + 288);
        if (v5)
        {
          ++v5[2];
          WebCore::ScrollableArea::visibleContentRect();
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
      }
    }
  }
  return 0;
}

unint64_t WebKit::WebFrame::scrollOffset(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 3);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2)) != 0)
  {
    v4 = (_DWORD *)v3;
    ++*(_DWORD *)(v3 + 8);
    v5 = WebCore::ScrollableArea::visibleContentRect();
    v6 = v5;
    v7 = HIDWORD(v5);
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  else
  {
    v6 = 0;
    LODWORD(v7) = 0;
  }
  return v6 | ((unint64_t)v7 << 32);
}

BOOL WebKit::WebFrame::hasHorizontalScrollbar(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v2 + 288);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v6 + 8) = v7 + 1;
    v3 = *(_QWORD *)(v6 + 152) != 0;
    if (v7)
      *(_DWORD *)(v6 + 8) = v7;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v3 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v3;
}

BOOL WebKit::WebFrame::hasVerticalScrollbar(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 v5;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v4 + 1;
  v5 = *(_QWORD *)(v3 + 160) != 0;
  if (v4)
    *(_DWORD *)(v3 + 8) = v4;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v5;
}

unsigned int *WebKit::WebFrame::hitTest@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v7[136];
  WebKit *v8;

  v3 = *((_QWORD *)result + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    WebCore::EventHandler::hitTestResultAtPoint();
    WebKit::InjectedBundleHitTestResult::create((WebKit::InjectedBundleHitTestResult *)v7, &v8);
    *a2 = v8;
    MEMORY[0x19AEADBAC](v7);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::WebFrame::getDocumentBackgroundColor(WebKit::WebFrame *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v12;
  unsigned int v13;
  WebCore::LocalFrameView *v14;
  void *v15;
  int8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  float v25;
  float v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v5 = *((_QWORD *)this + 3);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || *(_BYTE *)(v6 + 144))
    return 0;
  v12 = (unsigned int *)(v6 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(WebCore::LocalFrameView **)(v6 + 288);
  if (v14)
  {
    ++*((_DWORD *)v14 + 2);
    WebCore::LocalFrameView::documentBackgroundColor(v14);
    v17 = v31;
    v18 = v31;
    if ((v31 & 0x4000000000000) != 0)
    {
      *(float *)v19.i32 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(&v31, (uint64_t)&v32, v16);
      v23 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(v19, v20, v21, v22);
      *a2 = *(float *)&v23;
      *a3 = v24;
      *a4 = v25;
      *a5 = v26;
      v18 = v31;
    }
    v7 = (v17 >> 50) & 1;
    if ((v18 & 0x8000000000000) != 0)
    {
      v28 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v15);
      }
    }
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
  }
  else
  {
    v7 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  return v7;
}

BOOL WebKit::WebFrame::containsAnyFormElements(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v2 + 296);
        if (!v6)
        {
          v3 = 0;
          goto LABEL_14;
        }
        v7 = *(_DWORD *)(v6 + 24);
        *(_DWORD *)(v6 + 24) = v7 + 2;
        v8 = *(_QWORD *)(v6 + 80);
        if (v8)
        {
          do
          {
            if ((*(_WORD *)(v8 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6008] + 24))
            {
              break;
            }
            v8 = *(_QWORD *)(v8 + 56);
          }
          while (v8);
          v3 = v8 != 0;
          if (v7)
            goto LABEL_13;
        }
        else
        {
          v3 = 0;
          if (v7)
          {
LABEL_13:
            *(_DWORD *)(v6 + 24) = v7;
LABEL_14:
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
            return v3;
          }
        }
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
        goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::containsAnyFormControls(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v2 + 296);
        if (v6)
        {
          v7 = *(_DWORD *)(v6 + 24);
          *(_DWORD *)(v6 + 24) = v7 + 2;
          v8 = *(_QWORD *)(v6 + 80);
          if (v8)
          {
            while ((*(_WORD *)(v8 + 28) & 8) == 0)
            {
              v8 = *(_QWORD *)(v8 + 56);
              if (!v8)
                goto LABEL_11;
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8) & 1) != 0)
              goto LABEL_16;
            v10 = MEMORY[0x1E0DD6218];
            v3 = 1;
            while (2)
            {
              if ((*(_WORD *)(v8 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(*(_QWORD *)v10 + 24))
              {
LABEL_16:
                v3 = 1;
              }
              else
              {
                do
                {
                  v8 = *(_QWORD *)(v8 + 56);
                  if (!v8)
                  {
                    v3 = 0;
                    goto LABEL_25;
                  }
                }
                while ((*(_WORD *)(v8 + 28) & 8) == 0);
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8))
                  continue;
              }
              break;
            }
LABEL_25:
            v7 = *(_DWORD *)(v6 + 24) - 2;
            if (*(_DWORD *)(v6 + 24) == 2)
              goto LABEL_26;
          }
          else
          {
LABEL_11:
            v3 = 0;
            if (!v7)
            {
LABEL_26:
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6);
              goto LABEL_13;
            }
          }
          *(_DWORD *)(v6 + 24) = v7;
        }
        else
        {
          v3 = 0;
        }
LABEL_13:
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
        return v3;
      }
    }
  }
  return 0;
}

unsigned int *WebKit::WebFrame::stopLoading(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v3 = (unsigned int *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v2 + 280));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebFrame::frameForContext@<X0>(WebKit::WebFrame *this@<X0>, const OpaqueJSContext *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  result = (unsigned int *)WebCore::LocalFrame::fromJSContext(this, a2);
  if (result)
  {
    v5 = result + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, a3);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unsigned int *WebKit::WebFrame::contentFrameForWindowOrFrameElement@<X0>(WebKit::WebFrame *this@<X0>, const OpaqueJSContext *a2@<X1>, const OpaqueJSValue *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  result = (unsigned int *)WebCore::LocalFrame::contentFrameFromWindowOrFrameElement(this, a2, a3);
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, a4);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::WebFrame::jsWrapperForWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE v11[8];

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 144))
    return 0;
  v7 = (unsigned int *)(v4 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24));
  JSC::JSLockHolder::JSLockHolder();
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v9 + 16))(*(_QWORD *)(a2 + 24));
    v5 = WebCore::toJS();
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    v5 = 2;
  }
  MEMORY[0x19AEAA9E4](v11);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t OutOfLineCachedWrapper;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v8 = (unsigned int *)(v4 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_QWORD *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24))+ 16);
        JSC::JSLockHolder::JSLockHolder();
        v11 = *(_QWORD *)(a2 + 48);
        if (!v11)
        {
          OutOfLineCachedWrapper = 2;
LABEL_14:
          MEMORY[0x19AEAA9E4](&v15);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
          return OutOfLineCachedWrapper;
        }
        v12 = *(_DWORD *)(v11 + 24) + 2;
        *(_DWORD *)(v11 + 24) = v12;
        if (*(_BYTE *)(v10 + 3328))
        {
          v13 = *(_QWORD *)(v11 + 8);
          if (!v13)
            goto LABEL_11;
          if ((*(_BYTE *)(v13 + 8) & 3) != 0)
            goto LABEL_11;
          OutOfLineCachedWrapper = *(_QWORD *)v13;
          if (!*(_QWORD *)v13)
            goto LABEL_11;
        }
        else
        {
          OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper();
          v12 = *(_DWORD *)(v11 + 24);
          if (!OutOfLineCachedWrapper)
          {
LABEL_11:
            *(_DWORD *)(v11 + 24) = v12 + 2;
            v16 = v11;
            OutOfLineCachedWrapper = WebCore::createWrapper();
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
            v12 = *(_DWORD *)(v11 + 24);
          }
        }
        v14 = v12 - 2;
        if (v14)
        {
          *(_DWORD *)(v11 + 24) = v14;
        }
        else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
        goto LABEL_14;
      }
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  _BYTE v12[8];

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 144))
    return 0;
  v7 = (unsigned int *)(v4 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24))+ 16);
  JSC::JSLockHolder::JSLockHolder();
  v10 = *(_DWORD **)(a2 + 24);
  ++v10[2];
  v5 = MEMORY[0x19AEB4914](v9, v9, v10);
  if (v10[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  else
    --v10[2];
  MEMORY[0x19AEAA9E4](v12);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  return v5;
}

uint64_t *WebKit::WebFrame::counterValue@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (*((unsigned __int8 *)this + 5) == 241)
  {
    v3 = this[3];
    *(_DWORD *)(v3 + 24) += 2;
    v4 = v3;
    WebCore::counterValueForElement();
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v4);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::provisionalURL@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_DWORD **)(*(_QWORD *)(v4 + 280) + 96);
    if (v7)
    {
      ++v7[6];
      v8 = *(_DWORD **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 218));
      if (v8)
        *v8 += 2;
      *a2 = v8;
      if (v7[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      else
        --v7[6];
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::suggestedFilenameForResourceWithURL@<X0>(unsigned int *this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  WTF **v10;
  const WTF::StringImpl *v11;
  _DWORD *v12;

  v4 = *((_QWORD *)this + 3);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && !*(_BYTE *)(v5 + 144))
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_DWORD **)(*(_QWORD *)(v5 + 280) + 88);
    if (v9)
    {
      ++v9[6];
      v10 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v9 + 218));
      if (WTF::equal(*v10, *(const WTF::StringImpl **)a2, v11))
      {
        WebCore::ResourceResponseBase::suggestedFilename((WebCore::ResourceResponseBase *)(v9 + 318));
      }
      else
      {
        WebCore::DocumentLoader::subresource((WebCore::DocumentLoader *)v9, a2);
        if (v12)
        {
          WebCore::ResourceResponseBase::suggestedFilename((WebCore::ResourceResponseBase *)(v12 + 14));
          if (v12[2] == 1)
            (*(void (**)())(*(_QWORD *)v12 + 8))();
          else
            --v12[2];
        }
        else
        {
          *a3 = 0;
        }
      }
      if (v9[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
      else
        --v9[6];
    }
    else
    {
      *a3 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::mimeTypeForResourceWithURL@<X0>(unsigned int *this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  WTF **v10;
  const WTF::StringImpl *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 3);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && !*(_BYTE *)(v5 + 144))
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_DWORD **)(*(_QWORD *)(v5 + 280) + 88);
    if (v9)
    {
      ++v9[6];
      v10 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v9 + 218));
      if (WTF::equal(*v10, *(const WTF::StringImpl **)a2, v11))
      {
        v12 = *(_DWORD **)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v9 + 318));
        if (v12)
          *v12 += 2;
        *a3 = v12;
      }
      else
      {
        WebCore::DocumentLoader::subresource((WebCore::DocumentLoader *)v9, a2);
        if (v14)
        {
          v13 = *(_DWORD **)(v14 + 320);
          if (v13)
            *v13 += 2;
          *a3 = v13;
          if (*(_DWORD *)(v14 + 8) == 1)
            (*(void (**)())(*(_QWORD *)v14 + 8))();
          else
            --*(_DWORD *)(v14 + 8);
        }
        else
        {
          *a3 = 0;
        }
      }
      if (v9[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
      else
        --v9[6];
    }
    else
    {
      *a3 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

IPC::Encoder *WebKit::WebFrame::updateRemoteFrameSize(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v12 = a2;
  v2 = *((_QWORD *)result + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (uint64_t *)((char *)result + 80);
      v6 = *(_QWORD *)(v3 + 16);
      v5 = v3 + 16;
      v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 2084;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v13 = (IPC::Encoder *)v8;
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, v4);
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, &v12);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v13, 0);
      result = v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v9);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::setTextDirection(unsigned int *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v5 = (unsigned int *)(v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        if ((MEMORY[0x19AEABBCC](*(_QWORD *)a2, "auto", 4) & 1) != 0
          || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "ltr", 3) & 1) != 0
          || MEMORY[0x19AEABBCC](*(_QWORD *)a2, "rtl", 3))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
          WebCore::Editor::setBaseWritingDirection();
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return this;
}

uint64_t *WebKit::WebFrame::webArchiveData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  WebCore::LegacyWebArchive *v13;
  uint64_t v14;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (*(_BYTE *)(v8 + 144))
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 296);
  *(_DWORD *)(v9 + 24) += 2;
  v14 = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34F1B08;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v12 = v10;
  WebCore::LegacyWebArchive::create();
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  if (v13)
  {
    WebCore::LegacyWebArchive::rawDataRepresentation(v13);
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v13 + 8))();
    else
      --*((_DWORD *)v13 + 2);
  }
  else
  {
    *a4 = 0;
  }
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
}

void WebKit::WebFrame::createSelectionSnapshot(WebKit::WebFrame *this@<X0>, WebKit **a2@<X8>)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  WebKit *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef cf;
  uint64_t v20;

  LOWORD(v18) = 136;
  BYTE2(v18) = 1;
  v3 = *(const void **)WebCore::DestinationColorSpace::SRGB(this);
  cf = v3;
  if (v3)
    CFRetain(v3);
  WebCore::snapshotSelection();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  v5 = v20;
  if (!v20)
  {
    *a2 = 0;
    return;
  }
  v20 = 0;
  v6 = (WebKit *)API::Object::newObject(0x18uLL, 12);
  v18 = 0;
  *(_QWORD *)v6 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v6);
  *(_QWORD *)v6 = off_1E34CB3D0;
  *((_QWORD *)v6 + 2) = v5;
  *a2 = v6;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v18, v7);
  v9 = v20;
  v20 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEABB3C](v10);
LABEL_12:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v17 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v17 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (v13)
          return;
LABEL_20:
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (!v15)
          WTF::fastFree((WTF *)v10, v8);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return;
    goto LABEL_20;
  }
}

WTF::StringImpl *WebKit::WebFrame::handleMouseEvent@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _OWORD v22[3];
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  __int16 v26;
  _BYTE v27[48];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 3);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 144) || !*(_QWORD *)(v5 + 288))
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return result;
  }
  v7 = result;
  WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent((uint64_t)v27, a2);
  v22[0] = v28;
  v22[1] = v29;
  v22[2] = v30;
  v23 = v31;
  v26 = v34;
  v24 = v32;
  v25 = v33;
  switch(v27[8])
  {
    case 5:
      v10 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) + 24) + 8) + 48)
                       + 16);
      (*(void (**)(_QWORD *))(*v10 + 1368))(v10);
      v11 = *(_QWORD *)(v10[2] + 8);
      if (v11)
        v12 = v11 - 16;
      else
        v12 = 0;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 72) + 26) & 1) != 0
        || *(unsigned __int8 *)(a2 + 32) != 254)
      {
        goto LABEL_29;
      }
      v9 = WebCore::EventHandler::passMouseMovedEventToScrollbars();
      goto LABEL_9;
    case 6:
      WebCore::EventHandler::handleMousePressEvent();
      if (LOBYTE(v22[0]) != 2)
        goto LABEL_12;
      v13 = *(_DWORD *)(a3 + 24);
      if (v13)
      {
        if (v13 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
          WebCore::EventHandler::mouseMoved();
        }
        goto LABEL_12;
      }
      v14 = *((_QWORD *)v7 + 3);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0 || *(_BYTE *)(v15 + 144))
      {
        v16 = 0;
LABEL_34:
        *(_BYTE *)a3 = v16;
        goto LABEL_12;
      }
      WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(v15 + 288), (const WebCore::IntPoint *)((char *)v22 + 4));
      WebCore::EventHandler::hitTestResultAtPoint();
      v17 = (unsigned int *)(v15 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if ((_QWORD)v30)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 8) + 528);
        if (v19)
          v15 = *(_QWORD *)(v19 + 8);
        else
          v15 = 0;
        v20 = (unsigned int *)(v15 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
      }
      v16 = WebCore::EventHandler::sendContextMenuEvent();
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
      MEMORY[0x19AEADBAC](v27);
      if (!*(_DWORD *)(a3 + 24))
        goto LABEL_34;
LABEL_12:
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    case 7:
      if (*(_BYTE *)(a2 + 104))
        WebCore::EventHandler::invalidateClick(*(WebCore::EventHandler **)(v5 + 640));
      WebCore::EventHandler::handleMouseReleaseEvent();
      goto LABEL_12;
    case 8:
    case 9:
    case 0xA:
      v9 = WebCore::EventHandler::handleMouseForceEvent();
LABEL_9:
      *(_BYTE *)a3 = v9;
      goto LABEL_11;
    default:
      *(_BYTE *)a3 = 0;
LABEL_11:
      *(_DWORD *)(a3 + 24) = 0;
      goto LABEL_12;
  }
}

uint64_t WebKit::WebFrame::handleKeyEvent(WebKit::WebFrame *this, const WebKit::WebKeyboardEvent *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v9;
  _DWORD *v10;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v14;
  _BYTE v15[120];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 8);
    if (v3)
    {
      if (!*((_BYTE *)v3 + 144))
      {
        v6 = v3 + 2;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        if (*(_BYTE *)a2 != 10 || *((_BYTE *)a2 + 87) == 0)
        {
          WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v3);
          WebKit::platform(a2, (uint64_t)v15);
          v4 = WebCore::EventHandler::keyEvent();
          WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v15, v9);
          v10 = v14;
          if (!v14)
          {
LABEL_18:
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
            return v4;
          }
          v11 = *v14;
          if (!*v14)
          {
            __break(0xC471u);
            JUMPOUT(0x197652660);
          }
        }
        else
        {
          WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v3);
          WebKit::platform(a2, (uint64_t)v15);
          v4 = WebCore::EventHandler::handleAccessKey();
          WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v15, v12);
          v10 = v14;
          if (!v14)
            goto LABEL_18;
          v11 = *v14;
          if (!*v14)
          {
            __break(0xC471u);
            JUMPOUT(0x197652700);
          }
        }
        *v10 = v11 - 1;
        goto LABEL_18;
      }
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebFrame::frameTextForTesting@<X0>(WTF::StringImpl *this@<X0>, char a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  WTF::StringView *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  char *v46;
  char *v47;
  WTF::StringView *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  WTF::StringView *v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  WTF::StringView *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t i;
  WTF::StringView *v67;
  uint64_t v68;
  _WORD *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WebKit::WebFrame *v75;
  __int128 v76;
  WTF::StringView *v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int v84;
  char v85;
  __int128 v86;
  IPC::Encoder *v87;
  uint64_t v88;
  WTF::StringImpl *v89[2];
  _DWORD v90[5];
  _WORD v91[46];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 3);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *a3 = 0;
    return this;
  }
  v6 = this;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 1;
  WebKit::WebFrame::innerText((unsigned int *)&v81, v5);
  if (!v81)
  {
    *a3 = 0;
LABEL_158:
    v72 = v83;
    v83 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v7);
      else
        *(_DWORD *)v72 -= 2;
    }
    this = v82;
    v82 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      else
        *(_DWORD *)this -= 2;
    }
    return this;
  }
  v8 = (WTF::StringImpl *)(*((unsigned int *)v81 + 1) | ((unint64_t)((*((_DWORD *)v81 + 4) >> 2) & 1) << 32));
  v89[0] = *((WTF::StringImpl **)v81 + 1);
  v89[1] = v8;
  LOWORD(v90[0]) = 10;
  BYTE2(v90[0]) = 1;
  v77 = (WTF::StringView *)v89;
  v78 = 0;
  v80 = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v77);
  v9 = (int)v89[1];
  while (1)
  {
    v7 = (WTF::StringImpl *)v78;
    if (v78 == v9)
    {
      if (v80)
        break;
    }
    *(_QWORD *)&v76 = WTF::StringView::substring((const char *)v77, v78, v79);
    *((_QWORD *)&v76 + 1) = v10;
    if (WTF::StringView::endsWith())
    {
      do
      {
        if (DWORD2(v76))
        {
          v11 = (DWORD2(v76) - 1);
          v12 = (const char *)v76;
          if (BYTE12(v76))
            v11 |= 0x100000000uLL;
        }
        else
        {
          v11 = 0x100000000;
          v12 = "";
        }
        *(_QWORD *)&v76 = v12;
        DWORD2(v76) = v11;
        BYTE12(v76) = BYTE4(v11);
      }
      while ((WTF::StringView::endsWith() & 1) != 0);
    }
    v13 = DWORD2(v76) + 1;
    if (DWORD2(v76) == -1)
      v13 = -1;
    if (__CFADD__(v13, v84))
      v14 = 0xFFFFFFFFLL;
    else
      v14 = (v13 + v84);
    v15 = v83;
    if (v83 || (v15 = v82) != 0)
    {
      if ((*((_QWORD *)&v76 + 1) & 0xFF00000000) != 0 && (*((_DWORD *)v15 + 4) & 4) != 0)
      {
LABEL_22:
        v16 = (char *)MEMORY[0x19AEAB398](&v82, v14);
        if (v16)
        {
          v17 = v16;
          v86 = v76;
          WTF::StringView::getCharacters<unsigned char>(&v86, v16);
          v17[DWORD2(v86)] = 10;
        }
        goto LABEL_28;
      }
    }
    else if ((*((_QWORD *)&v76 + 1) & 0xFF00000000) != 0)
    {
      goto LABEL_22;
    }
    v18 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
    if (v18)
    {
      v19 = v18;
      v86 = v76;
      WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v86, v18);
      *(_WORD *)&v19[2 * DWORD2(v86)] = 10;
    }
LABEL_28:
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  if ((a2 & 1) == 0 || (v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 88)) == 0)
  {
LABEL_149:
    v70 = v82;
    if (v82
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v82),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v82),
          (v70 = v82) != 0))
    {
      *(_DWORD *)v70 += 2;
    }
    *a3 = v70;
    v71 = v81;
    v81 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v7);
      else
        *(_DWORD *)v71 -= 2;
    }
    goto LABEL_158;
  }
  while (1)
  {
    WebKit::WebFrame::fromCoreFrame(v20, &v75);
    v21 = (uint64_t *)v75;
    if (v75)
      break;
LABEL_137:
    v20 = *(_QWORD *)(v20 + 72);
    if (!v20)
      goto LABEL_149;
  }
  this = WebKit::WebFrame::name(v75, &v73);
  v23 = v73;
  if (v73)
  {
    v24 = *((_DWORD *)v73 + 1);
    *(_DWORD *)v73 += 2;
    if (v24 < 0)
    {
LABEL_44:
      v74 = 0;
      goto LABEL_45;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = __OFADD__(v24, 11);
  v26 = v24 + 11;
  if (v25)
    goto LABEL_44;
  v27 = (v26 + 18);
  if (__OFADD__(v26, 18))
    goto LABEL_44;
  if (v23 && (*((_BYTE *)v23 + 16) & 4) == 0)
  {
    if (v27 < 0x40)
    {
      for (i = 0; i != 18; ++i)
        *((_WORD *)v89 + i) = aFrame_0[i];
      v77 = v23;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, (char *)v91);
      v67 = v77;
      if (v77)
        v67 = (WTF::StringView *)*((unsigned int *)v77 + 1);
      v68 = 0;
      v69 = &v91[(_QWORD)v67];
      do
      {
        v69[v68] = asc_19796A70C[v68];
        ++v68;
      }
      while (v68 != 11);
      this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
      goto LABEL_45;
    }
    v30 = 0;
  }
  else
  {
    if (v27 < 0x40)
    {
      LOWORD(v90[0]) = 10016;
      *(_OWORD *)v89 = *(_OWORD *)"\n--------\nFrame: '";
      v77 = v23;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, (char *)v90 + 2);
      v28 = v77;
      if (v77)
        v28 = (WTF::StringView *)*((unsigned int *)v77 + 1);
      v29 = (char *)v28 + (_QWORD)v90 + 2;
      *(_QWORD *)v29 = *(_QWORD *)"'\n--------\n";
      *(_DWORD *)(v29 + 7) = 170732845;
      this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
      goto LABEL_45;
    }
    v30 = 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v27, v30, (int8x16_t *)"\n--------\nFrame: '", 0x12u, (uint64_t)v23, (int8x16_t *)"'\n--------\n", 0xBu, v89);
  this = v89[0];
  if (!v89[0])
    goto LABEL_44;
  if ((*((_BYTE *)v89[0] + 16) & 0x10) != 0)
  {
    *(_DWORD *)v89[0] += 2;
    v74 = this;
    v89[0] = 0;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(v89[0], v22);
    this = v89[0];
    v89[0] = 0;
    if (!this)
      goto LABEL_45;
  }
  if (*(_DWORD *)this == 2)
    this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v22);
  else
    *(_DWORD *)this -= 2;
LABEL_45:
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
    if (!v74)
      goto LABEL_168;
    v73 = 0;
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  else
  {
    if (!v74)
      goto LABEL_168;
    v73 = 0;
  }
  if (!*(_BYTE *)(v20 + 144))
  {
    WebKit::WebFrame::innerText((unsigned int *)v89, v21[3]);
    v40 = v89[0];
    v89[0] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v7);
      else
        *(_DWORD *)v40 -= 2;
      WebKit::WebFrame::frameTextForTesting((uint64_t *)&v86, (WebKit::WebFrame *)v21, 1);
      v43 = v74;
      v44 = (WTF::StringImpl *)v86;
      v45 = v83;
      if ((v83 || (v45 = v82) != 0) && (*((_BYTE *)v45 + 16) & 4) == 0
        || v74 && (*((_BYTE *)v74 + 16) & 4) == 0
        || (_QWORD)v86 && (*(_BYTE *)(v86 + 16) & 4) == 0)
      {
        v46 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
        if (v46)
        {
          v47 = v46;
          v77 = v43;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, v46);
          v48 = v77;
          if (v77)
            v48 = (WTF::StringView *)*((unsigned int *)v77 + 1);
          v89[0] = v44;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v89, &v47[2 * (_QWORD)v48]);
        }
      }
      else
      {
        v59 = (char *)MEMORY[0x19AEAB398](&v82);
        if (v59)
        {
          v60 = v59;
          v77 = v43;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, v59);
          v61 = v77;
          if (v77)
            v61 = (WTF::StringView *)*((unsigned int *)v77 + 1);
          v89[0] = v44;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v89, (char *)v61 + (_QWORD)v60);
        }
      }
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v7);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    goto LABEL_131;
  }
  v31 = *((_QWORD *)v6 + 4);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
      v33 = v32 - 16;
    else
      v33 = 0;
  }
  else
  {
    v33 = 0;
  }
  v76 = *(_OWORD *)(v20 + 32);
  v35 = *(_QWORD *)(v33 + 32);
  v34 = v33 + 32;
  v36 = (*(uint64_t (**)(uint64_t))(v35 + 56))(v34);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
  if (!v37)
  {
    LOBYTE(v89[0]) = 3;
    v90[0] = 1;
    goto LABEL_89;
  }
  v38 = v37;
  v88 = 0;
  IPC::Connection::createSyncMessageEncoder(3665, v36, &v88, (uint64_t *)&v87);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v87, (uint64_t *)&v76);
  IPC::Connection::sendSyncMessage(v38, v88, (uint64_t *)&v87, 0, (uint64_t)&v77, INFINITY);
  if (v78)
  {
    if (v78 != 1)
      goto LABEL_167;
    LOBYTE(v89[0]) = (_BYTE)v77;
    v90[0] = 1;
    v39 = 1;
    goto LABEL_85;
  }
  LOBYTE(v86) = 0;
  BYTE8(v86) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v77, (WTF::StringImpl **)&v86);
  if (!BYTE8(v86))
  {
    LOBYTE(v89[0]) = 13;
    v90[0] = 1;
    v39 = v78;
    if (v78 == -1)
      goto LABEL_86;
    goto LABEL_85;
  }
  if (!v78)
  {
    v39 = 0;
    v42 = v77;
    v77 = 0;
    v89[0] = v42;
    v89[1] = (WTF::StringImpl *)v86;
    v90[0] = 0;
LABEL_85:
    ((void (*)(__int128 *, WTF::StringView **))off_1E34F1B20[v39])(&v86, &v77);
LABEL_86:
    v49 = v87;
    v87 = 0;
    if (v49)
    {
      IPC::Encoder::~Encoder(v49, v41);
      WTF::fastFree(v50, v51);
    }
    if (!v90[0])
    {
      v52 = v89[1];
      v89[1] = 0;
LABEL_91:
      v53 = v74;
      if (v52)
        v54 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      else
        v54 = 1;
      v55 = v83;
      if (!v83 && (v55 = v82) == 0 || (*((_BYTE *)v55 + 16) & 4) != 0)
      {
        if (v74)
        {
          if ((v54 & (*((unsigned __int8 *)v74 + 16) >> 2) & 1) != 0)
            goto LABEL_97;
        }
        else if (v54)
        {
LABEL_97:
          v56 = (char *)MEMORY[0x19AEAB398](&v82);
          if (v56)
          {
            v57 = v56;
            *(_QWORD *)&v86 = v53;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v86, v56);
            v58 = v86;
            if ((_QWORD)v86)
              v58 = *(unsigned int *)(v86 + 4);
            v77 = v52;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, &v57[v58]);
          }
LABEL_125:
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v7);
            else
              *(_DWORD *)v52 -= 2;
          }
          if (v90[0] != -1)
            ((void (*)(WTF::StringView **, WTF::StringImpl **))off_1E34F1A10[v90[0]])(&v77, v89);
LABEL_131:
          v65 = v74;
          v74 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v7);
            else
              *(_DWORD *)v65 -= 2;
          }
          if (v75)
            CFRelease(*((CFTypeRef *)v75 + 1));
          goto LABEL_137;
        }
      }
      v62 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
      if (v62)
      {
        v63 = v62;
        *(_QWORD *)&v86 = v53;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v86, v62);
        v64 = v86;
        if ((_QWORD)v86)
          v64 = *(unsigned int *)(v86 + 4);
        v77 = v52;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, &v63[2 * v64]);
      }
      goto LABEL_125;
    }
LABEL_89:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v52 = v77;
    goto LABEL_91;
  }
LABEL_167:
  this = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
  __break(0xC471u);
  return this;
}

unsigned int *WebKit::WebOpenPanelResultListener::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v8 = *(unsigned int **)(a1 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(v6 + 8) = v8;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 16) = v10;
  *a3 = v6;
  return result;
}

void WebKit::WebOpenPanelResultListener::~WebOpenPanelResultListener(WebKit::WebOpenPanelResultListener *this, void *a2)
{
  WebCore::FileChooser *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (WebCore::FileChooser *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::FileChooser>::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

void WebKit::WebPageGroupProxy::~WebPageGroupProxy(WebKit::WebPageGroupProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E34F18B8;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageGroupProxy::~WebPageGroupProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPageGroupProxy::corePageGroup(WebKit::WebPageGroupProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebKit::WebPageOverlay::create@<X0>(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  WebKit *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (WebKit *)API::Object::newObject(0x30uLL, 139);
  v5 = *a1;
  *a1 = 0;
  v7 = v5;
  *a2 = WebKit::WebPageOverlay::WebPageOverlay(v4, &v7);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

WebKit *WebKit::WebPageOverlay::WebPageOverlay(WebKit *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[3];
  WTF *v14;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = &off_1E34F18D8;
  *((_QWORD *)a1 + 3) = &unk_1E34F1940;
  WebCore::PageOverlay::create();
  *((_QWORD *)a1 + 4) = v13[0];
  v4 = *a2;
  *a2 = 0;
  *((_QWORD *)a1 + 5) = v4;
  {
    WebKit::overlayMap(void)::map = 0;
  }
  v5 = *((_QWORD *)a1 + 4);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
  v6 = *(unsigned int **)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v14 = (WTF *)v6;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>(&WebKit::overlayMap(void)::map, (uint64_t *)&v14, (uint64_t)a1, (uint64_t)v13);
  v9 = (unsigned int *)v14;
  v14 = 0;
  if (v9)
  {
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  return a1;
}

void WebKit::WebPageOverlay::~WebPageOverlay(WebKit::WebPageOverlay *this, void *a2)
{
  uint64_t v3;
  std::once_flag::_State_type *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  std::once_flag::_State_type v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  std::once_flag::_State_type v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)this = &off_1E34F18D8;
  *((_QWORD *)this + 3) = &unk_1E34F1940;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
    {
      v5 = WebKit::overlayMap(void)::map;
      if (WebKit::overlayMap(void)::map)
      {
        v6 = *(_DWORD *)(WebKit::overlayMap(void)::map - 8);
        v7 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        for (i = 1; ; ++i)
        {
          v12 = v10;
          v13 = *(_QWORD *)(WebKit::overlayMap(void)::map + 16 * v10);
          if (v13 != -1)
          {
            if (!v13)
              goto LABEL_28;
            if (*(_QWORD *)(v13 + 8) == v3)
              break;
          }
          v10 = (v10 + i) & v6;
        }
        if (v10 != *(_DWORD *)(WebKit::overlayMap(void)::map - 4))
        {
          v14 = (_QWORD *)(WebKit::overlayMap(void)::map + 16 * v10);
          *v14 = 0;
          do
          {
            v19 = __ldaxr((unsigned int *)v13);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, (unsigned int *)v13));
          if (!v20)
          {
            atomic_store(1u, (unsigned int *)v13);
            v35 = v5;
            v36 = v10;
            v34 = (_QWORD *)(v5 + 16 * v10);
            WTF::fastFree((WTF *)v13, a2);
            v14 = v34;
            v5 = v35;
            v12 = v36;
            v4 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
          }
          *v14 = -1;
          v15 = v5 + 16 * v12;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v21 = __ldaxr(v16);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v16));
            if (!v22)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, a2);
              v4 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
            }
          }
          ++*(_DWORD *)(v4[10] - 16);
          v17 = v4[10];
          if (v17)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          v23 = v4[10];
          if (v23)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::overlayMap(void)::map, v25 >> 1, 0);
          }
        }
      }
    }
    else
    {
      WebKit::overlayMap(void)::map = 0;
    }
LABEL_28:
    v27 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v27)
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v27 + 8));
  }
  v28 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v29)
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v29 + 8));
  v30 = *((_QWORD *)this + 2);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 0;
    v31 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebPageOverlay::~WebPageOverlay(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::WebPageOverlay::~WebPageOverlay(WebKit::WebPageOverlay *this, void *a2)
{
  WebKit::WebPageOverlay::~WebPageOverlay((WebKit::WebPageOverlay *)((char *)this - 24), a2);
}

{
  WebKit::WebPageOverlay::~WebPageOverlay((WebKit::WebPageOverlay *)((char *)this - 24), a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebPageOverlay::willMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (a3
    && (v4 = *(_QWORD **)(*(_QWORD *)(a3 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v4 + 1368))(v4) & 1) == 0)
    && (v5 = *(_QWORD *)(v4[2] + 8)) != 0)
  {
    v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a1, v6);
  if ((v7 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void `non-virtual thunk to'WebKit::WebPageOverlay::willMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebPageOverlay::willMoveToPage(a1 - 24, a2, a3);
}

void WebKit::WebPageOverlay::didMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (a3
    && (v4 = *(_QWORD **)(*(_QWORD *)(a3 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v4 + 1368))(v4) & 1) == 0)
    && (v5 = *(_QWORD *)(v4[2] + 8)) != 0)
  {
    v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a1, v6);
  if ((v7 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void `non-virtual thunk to'WebKit::WebPageOverlay::didMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebPageOverlay::didMoveToPage(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::drawRect(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a1);
}

uint64_t `non-virtual thunk to'WebKit::WebPageOverlay::drawRect(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a1 - 24);
}

uint64_t WebKit::WebPageOverlay::mouseEvent(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), a1);
}

uint64_t `non-virtual thunk to'WebKit::WebPageOverlay::mouseEvent(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a1 - 24);
}

void WebKit::WebPageOverlay::didScrollFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  WebKit::WebFrame::fromCoreFrame(a3, &v5);
  v4 = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), a1, v5);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void `non-virtual thunk to'WebKit::WebPageOverlay::didScrollFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebPageOverlay::didScrollFrame(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v10 = v5;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 56))(v4, a1, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  return WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v10 = v5;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 64))(v4, a1, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  return WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeNames(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40), a1);
}

uint64_t `non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeNames(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a1 - 24);
}

WebKit::WebPageTesting *WebKit::WebPageTesting::WebPageTesting(WebKit::WebPageTesting *this, WebKit::WebPage *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E34F19A0;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 2) = v5;
  v7 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v8)
    v9 = v8 - 16;
  else
    v9 = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v7, 0xB4u, *(_QWORD *)(v9 + 40), (uint64_t)this);
  return this;
}

void WebKit::WebPageTesting::~WebPageTesting(WebKit::WebPageTesting *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebKit::WebProcess *v9;

  *(_QWORD *)this = off_1E34F19A0;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0xB4u, *(_QWORD *)(v4 + 40));
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPageTesting::~WebPageTesting(this);
  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::WebPageTesting::setDefersLoading(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::Page *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(WebCore::Page **)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::setDefersLoading(v3);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return this;
}

uint64_t WebKit::WebPageTesting::isLayerTreeFrozen(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  v4 = *(_DWORD *)(v3 + 2104) != 0;
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v5 + 16))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebKit::WebPageTesting::setPermissionLevel(WebKit::WebPageTesting *this, WTF::StringImpl **a2, char a3)
{
  uint64_t v5;
  CFTypeRef *v6;
  WebKit::NotificationPermissionRequestManager *v7;
  WebKit::NotificationPermissionRequestManager *v8;
  void *v9;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  v7 = (WebKit::NotificationPermissionRequestManager *)WebKit::WebPage::notificationPermissionRequestManager((WebKit::WebPage *)v6);
  v8 = v7;
  if (v7)
    ++*(_DWORD *)v7;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  if (v8)
  {
    WebKit::NotificationPermissionRequestManager::setPermissionLevelForTesting(v8, a2, a3);
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v8, v9);
  }
}

unsigned int *WebKit::WebPageTesting::isEditingCommandEnabled(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::FocusController *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::LocalFrame *v16;
  uint64_t v17;
  WebKit::PluginView *v18;
  uint64_t isEditingCommandEnabled;
  uint64_t v20;
  uint64_t v21;
  unsigned int *result;
  uint64_t isEnabled;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Editor *v27;
  WebCore::FocusController *v28;
  WebCore::Node *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  v8 = *(WebCore::Page **)(v7 + 48);
  if (v8)
    ++*(_DWORD *)v8;
  WebCore::Page::checkedFocusController(v8);
  v9 = WebCore::FocusController::focusedOrMainFrame(v28);
  v10 = (unsigned int *)v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v28;
  v28 = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
      goto LABEL_42;
    --*(_DWORD *)v13;
  }
  if (!v9)
  {
    v21 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, 0);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v15 = v14 - 16;
  if (!v14)
    v15 = 0;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  v17 = WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)v10, v16);
  v18 = (WebKit::PluginView *)v17;
  if (v17)
    ++*(_DWORD *)(v17 + 8);
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 - 8));
  if (!v18)
  {
    WebCore::LocalFrame::checkedEditor((WebCore::LocalFrame *)v10);
    WebCore::Editor::command(v27, a2);
    if (!v27)
    {
LABEL_26:
      if (WebCore::Editor::Command::isSupported((WebCore::Editor::Command *)&v28))
        isEnabled = WebCore::Editor::Command::isEnabled();
      else
        isEnabled = 0;
      v24 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, isEnabled);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = v30;
      v30 = 0;
      if (v25)
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
      v26 = v29;
      v29 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      goto LABEL_35;
    }
    if (*(_DWORD *)v27)
    {
      --*(_DWORD *)v27;
      goto LABEL_26;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x197653EB8);
  }
  isEditingCommandEnabled = WebKit::PluginView::isEditingCommandEnabled(v18, a2);
  v20 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, isEditingCommandEnabled);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (*((_DWORD *)v18 + 2) == 1)
    (*(void (**)(WebKit::PluginView *))(*(_QWORD *)v18 + 8))(v18);
  else
    --*((_DWORD *)v18 + 2);
LABEL_35:
  result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10 + 2);
LABEL_36:
  if (v8)
    return WTF::RefCounted<WebCore::Page>::deref(v8);
  return result;
}

WebCore::SecurityOriginData *WebKit::WebPageTesting::clearNotificationPermissionState(WebKit::WebPageTesting *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *result;
  void *v9;
  _QWORD v10[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    v10[0] = WebCore::NotificationController::supplementName(this);
    v10[1] = v4;
    v6 = *((_QWORD *)WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 8), (WTF::ASCIILiteralHash *)v10)+ 1);
    v7 = *(WebCore::SecurityOriginData **)(v6 + 8);
    if (v7)
    {
      *(_QWORD *)(v6 + 8) = 0;
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, v5);
    }
    return (WebCore::SecurityOriginData *)WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v3);
  }
  else
  {
    WebCore::NotificationController::supplementName(this);
    result = *(WebCore::SecurityOriginData **)(MEMORY[8] + 8);
    if (result)
    {
      *(_QWORD *)(MEMORY[8] + 8) = 0;
      return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(result, v9);
    }
  }
  return result;
}

_DWORD *WebKit::WebPageTesting::clearWheelEventTestMonitor(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::Page *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(WebCore::Page **)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::clearWheelEventTestMonitor(v3);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return this;
}

void WebKit::WebURLSchemeHandlerProxy::startNewTask(WebKit::WebURLSchemeHandlerProxy *this, WebCore::ResourceLoader *a2, CFTypeRef *a3)
{
  uint64_t v6;
  WebKit::WebURLSchemeTaskProxy *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  WebKit::WebURLSchemeTaskProxy *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  WebKit::WebProcess *v28;
  uint64_t v29;
  uint64_t *v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  char v33[24];

  v6 = *((_QWORD *)a2 + 93);
  v7 = (WebKit::WebURLSchemeTaskProxy *)WTF::fastMalloc((WTF *)0x120);
  WebKit::WebURLSchemeTaskProxy::WebURLSchemeTaskProxy(v7, this, a2, a3);
  v11 = *((_QWORD *)this + 4);
  v10 = (uint64_t *)((char *)this + 32);
  v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v10, 0), (v9 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v9 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == v6)
      {
        WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, v8);
        goto LABEL_24;
      }
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (uint64_t *)(v9 + 16 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*v10 - 16);
      v17 = v19;
    }
  }
  v21 = (WebKit::WebURLSchemeTaskProxy *)v17[1];
  *v17 = v6;
  v17[1] = (uint64_t)v7;
  if (v21)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v21, v8);
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v27 <= 2 * v26)
LABEL_23:
    v17 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v10, v17);
LABEL_24:
  {
    v28 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v28 = WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v28;
  }
  v29 = v17[1];
  v30 = (uint64_t *)(*((_QWORD *)v28 + 40) + 56);
  v32 = *(_QWORD *)(v29 + 240);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeTaskProxy&>(v30, &v32, v29, (uint64_t)v33);
  WebKit::WebURLSchemeTaskProxy::startLoading((WebKit::WebURLSchemeTaskProxy *)v17[1]);
}

void WebKit::WebURLSchemeHandlerProxy::loadSynchronously(uint64_t a1, uint64_t a2, WebKit::WebFrame *this, WebCore::ResourceRequestBase::RequestData *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  __int128 v24;
  const void *v25;
  int v26;
  WTF::StringImpl *v27;
  const void *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const void *v34;
  CFTypeRef v35;
  WTF *v36;
  uint64_t v37;
  IPC::Decoder *v38;
  IPC::Decoder *v39;
  void *v40;
  IPC::Decoder *v41;
  WTF *v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  WTF::StringImpl *v47;
  CFTypeRef v48;
  CFTypeRef v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  CFTypeRef v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  CFTypeRef v64;
  const void *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  const void *v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  CFTypeRef v77;
  uint64_t v78;
  uint64_t v79;
  WebKit::WebURLSchemeTaskProxy *v80;
  IPC::Decoder *v81;
  _BYTE v82[9];
  const void *v83;
  char v84;
  _OWORD v85[3];
  WTF::StringImpl *v86;
  int v87;
  __int16 v88;
  const void *v89;
  char v90;
  WTF *v91;
  uint64_t v92;
  unsigned __int8 v93;
  int v94;
  _BYTE v95[240];
  CFTypeRef v96;
  char v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  __int16 v102;
  CFTypeRef v103;
  char v104;
  WTF *v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t *v108;
  int v109;
  IPC::Encoder *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  WTF::StringImpl *v115;
  int v116;
  __int16 v117;
  const void *v118;
  char v119;
  char v120;
  _QWORD v121[2];
  char v122;
  IPC::Decoder *v123;
  _BYTE v124[248];
  char v125;
  char v126[8];
  uint64_t v127;
  CFTypeRef v128;
  uint64_t v129;
  int v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  int v136;
  __int16 v137;
  CFTypeRef v138;
  char v139;
  CFTypeRef v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  __int16 v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  CFTypeRef cf;
  uint64_t v154;
  int v155;
  WTF::StringImpl *v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a7 + 12) = 0;
  v13 = *(_QWORD **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  WebKit::WebFrame::info(this, (uint64_t)v126);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)&v132, v12, a2, a4, (uint64_t)v126);
  v14 = v13[4];
  v13 += 4;
  v15 = (*(uint64_t (**)(_QWORD *))(v14 + 56))(v13);
  v16 = (*(uint64_t (**)(_QWORD *))(*v13 + 48))(v13);
  if (v16)
  {
    v18 = v16;
    v111 = 0;
    IPC::Connection::createSyncMessageEncoder(3675, v15, &v111, (uint64_t *)&v110);
    IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode(v110, (char *)&v132);
    IPC::Connection::sendSyncMessage(v18, v111, (uint64_t *)&v110, 0, (uint64_t)&v108, INFINITY);
    if (v109)
    {
      if (v109 == 1)
      {
        LOBYTE(v81) = (_BYTE)v108;
        v19 = 1;
        v94 = 1;
LABEL_49:
        ((void (*)(IPC::Decoder **, uint64_t **))off_1E34F1B20[v19])(&v123, &v108);
LABEL_50:
        v44 = v110;
        v110 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v17);
          WTF::fastFree(v45, v46);
        }
        goto LABEL_52;
      }
LABEL_118:
      v80 = (WebKit::WebURLSchemeTaskProxy *)std::__throw_bad_variant_access[abi:sn180100]();
      WebKit::WebURLSchemeHandlerProxy::stopAllTasks(v80);
      return;
    }
    v95[0] = 0;
    v107 = 0;
    v20 = v108;
    IPC::Decoder::decode<WebCore::ResourceResponse>(v108, &v123);
    if (v125)
    {
      IPC::Decoder::decode<WebCore::ResourceError>(v20, (uint64_t)&v112);
      if (v120)
      {
        IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v20, v121);
        v23 = v122;
        if (v122)
        {
          if (!v125 || !v120)
            __break(1u);
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v81, (uint64_t)&v123);
          v24 = v112;
          v112 = 0uLL;
          v85[0] = v24;
          v85[1] = v113;
          v85[2] = v114;
          LODWORD(v113) = v113 & 0xFFFFFFFE;
          v86 = v115;
          v87 = v116;
          v88 = v117;
          v25 = v118;
          v115 = 0;
          v118 = 0;
          v89 = v25;
          v90 = v119;
          v91 = (WTF *)v121[0];
          v23 = 1;
          v92 = v121[1];
        }
        else
        {
          LOBYTE(v81) = 0;
        }
        v93 = v23;
      }
      else
      {
        LOBYTE(v81) = 0;
        v93 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v112, v22);
    }
    else
    {
      LOBYTE(v81) = 0;
      v93 = 0;
    }
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v123, v21);
    if (v93)
    {
      v26 = 1;
    }
    else
    {
      v17 = (void *)*v20;
      v78 = v20[1];
      *v20 = 0;
      v20[1] = 0;
      v79 = v20[3];
      if (v79 && v78)
      {
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v79 + 16))(v79, v17);
        v26 = v93;
      }
      else
      {
        v26 = 0;
      }
    }
    if (v107 == v26)
    {
      if (!v107)
        goto LABEL_47;
      WebCore::ResourceResponseBase::operator=((uint64_t)v95, (uint64_t)&v81);
      v28 = v83;
      v83 = 0;
      v29 = v96;
      v96 = v28;
      if (v29)
        CFRelease(v29);
      v97 = v84;
      v30 = *(WTF::StringImpl **)&v85[0];
      *(_QWORD *)&v85[0] = 0;
      v31 = v98;
      v98 = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v27);
        else
          *(_DWORD *)v31 -= 2;
      }
      WTF::URL::operator=((uint64_t)&v99, (WTF::StringImpl *)((char *)v85 + 8));
      v32 = v86;
      v86 = 0;
      v33 = v100;
      v100 = v32;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v33 -= 2;
      }
      v101 = v87;
      v102 = v88;
      v34 = v89;
      v89 = 0;
      v35 = v103;
      v103 = v34;
      if (v35)
        CFRelease(v35);
      v104 = v90;
      v36 = v105;
      if (v105)
      {
        v105 = 0;
        LODWORD(v106) = 0;
        WTF::fastFree(v36, v17);
      }
      v105 = v91;
      v37 = v92;
      v91 = 0;
      v92 = 0;
      v106 = v37;
    }
    else if (v107)
    {
      WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v95, v17);
      v107 = 0;
    }
    else
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v95, (uint64_t)&v81);
      v107 = 1;
    }
    if (v93)
      WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)&v81, v17);
    if (v107)
    {
      if (v109)
        goto LABEL_118;
      v38 = (IPC::Decoder *)v108;
      v108 = 0;
      v123 = v38;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v124, (uint64_t)v95);
      v39 = v123;
      v123 = 0;
      v81 = v39;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v82, (uint64_t)v124);
      v94 = 0;
      WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v124, v40);
      v41 = v123;
      v123 = 0;
      if (v41)
      {
        IPC::Decoder::~Decoder(v41);
        WTF::fastFree(v42, v43);
      }
      if (v107)
        WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v95, v17);
LABEL_48:
      v19 = v109;
      if (v109 == -1)
        goto LABEL_50;
      goto LABEL_49;
    }
LABEL_47:
    LOBYTE(v81) = 13;
    v94 = 1;
    goto LABEL_48;
  }
  LOBYTE(v81) = 3;
  v94 = 1;
LABEL_52:
  v47 = v156;
  v156 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v47 -= 2;
  }
  if (v155 != -1)
    ((void (*)(IPC::Decoder **, uint64_t *))off_1E34F1A00[v155])(&v123, &v154);
  v155 = -1;
  v48 = cf;
  cf = 0;
  if (v48)
    CFRelease(v48);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v141);
  v49 = v140;
  v140 = 0;
  if (v49)
    CFRelease(v49);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v134);
  v51 = v131;
  v131 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v50);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (v130 != -1)
    ((void (*)(IPC::Decoder **, uint64_t *))off_1E34F1A00[v130])(&v123, &v129);
  v130 = -1;
  v52 = v128;
  v128 = 0;
  if (v52)
    CFRelease(v52);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v127);
  if (v94)
  {
    WebKit::failedCustomProtocolSyncLoad(a4, (uint64_t)&v132);
    v54 = v132;
    v132 = 0;
    v55 = *(WTF::StringImpl **)a6;
    *(_QWORD *)a6 = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v53);
      else
        *(_DWORD *)v55 -= 2;
    }
    WTF::URL::operator=(a6 + 8, (WTF::StringImpl *)&v133);
    v62 = v135;
    v135 = 0;
    v63 = *(WTF::StringImpl **)(a6 + 48);
    *(_QWORD *)(a6 + 48) = v62;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v61);
      else
        *(_DWORD *)v63 -= 2;
    }
    *(_DWORD *)(a6 + 56) = v136;
    *(_WORD *)(a6 + 60) = v137;
    v64 = v138;
    v138 = 0;
    v65 = *(const void **)(a6 + 64);
    *(_QWORD *)(a6 + 64) = v64;
    if (v65)
    {
      CFRelease(v65);
      v77 = v138;
      *(_BYTE *)(a6 + 72) = v139;
      v138 = 0;
      if (v77)
        CFRelease(v77);
    }
    else
    {
      *(_BYTE *)(a6 + 72) = v139;
      v138 = 0;
    }
    v66 = v135;
    v135 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v61);
      else
        *(_DWORD *)v66 -= 2;
    }
    v67 = v133;
    v133 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v61);
      else
        *(_DWORD *)v67 -= 2;
    }
    v68 = v132;
    v132 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v61);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)&v132, (uint64_t)v82);
    WebCore::ResourceResponseBase::operator=(a5, (uint64_t)&v132);
    v57 = v142;
    v142 = 0;
    v58 = *(const void **)(a5 + 240);
    *(_QWORD *)(a5 + 240) = v57;
    if (v58)
      CFRelease(v58);
    *(_BYTE *)(a5 + 248) = v143;
    v59 = v144;
    v144 = 0;
    v60 = *(WTF::StringImpl **)a6;
    *(_QWORD *)a6 = v59;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v56);
      else
        *(_DWORD *)v60 -= 2;
    }
    WTF::URL::operator=(a6 + 8, (WTF::StringImpl *)&v145);
    v70 = v146;
    v146 = 0;
    v71 = *(WTF::StringImpl **)(a6 + 48);
    *(_QWORD *)(a6 + 48) = v70;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v69);
      else
        *(_DWORD *)v71 -= 2;
    }
    *(_DWORD *)(a6 + 56) = v147;
    *(_WORD *)(a6 + 60) = v148;
    v72 = v149;
    v149 = 0;
    v73 = *(const void **)(a6 + 64);
    *(_QWORD *)(a6 + 64) = v72;
    if (v73)
      CFRelease(v73);
    *(_BYTE *)(a6 + 72) = v150;
    v74 = *(WTF **)a7;
    if (*(_QWORD *)a7)
    {
      *(_QWORD *)a7 = 0;
      *(_DWORD *)(a7 + 8) = 0;
      WTF::fastFree(v74, v69);
    }
    v75 = v151;
    v151 = 0;
    *(_QWORD *)a7 = v75;
    v76 = v152;
    v152 = 0;
    *(_QWORD *)(a7 + 8) = v76;
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)&v132, v69);
  }
  if (v94 != -1)
    ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1E34F1A20[v94])(&v132, &v81);
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::stopAllTasks(WebKit::WebURLSchemeTaskProxy *this)
{
  _QWORD *v1;
  _QWORD **v2;
  _QWORD *v3;

  v2 = (_QWORD **)((char *)this + 32);
  v1 = (_QWORD *)*((_QWORD *)this + 4);
  if (v1)
  {
    do
    {
      if (!*((_DWORD *)v1 - 3))
        break;
      v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
      this = WebKit::WebURLSchemeTaskProxy::stopLoading((WebKit::WebURLSchemeTaskProxy *)v3[1]);
      v1 = *v2;
    }
    while (*v2);
  }
  return this;
}

void WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v9);
  if (v8)
    WebKit::WebURLSchemeTaskProxy::didPerformRedirection(v8, a3, a4, a5);
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3)
{
  WebKit::WebURLSchemeTaskProxy *result;
  uint64_t v5;

  v5 = a2;
  result = (WebKit::WebURLSchemeTaskProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v5);
  if (result)
    return (WebKit::WebURLSchemeTaskProxy *)WebKit::WebURLSchemeTaskProxy::didReceiveResponse(result, a3);
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData(uint64_t a1, uint64_t a2, const WebCore::SharedBuffer **a3)
{
  WebKit::WebURLSchemeTaskProxy *result;
  uint64_t v5;

  v5 = a2;
  result = (WebKit::WebURLSchemeTaskProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v5);
  if (result)
    return (WebKit::WebURLSchemeTaskProxy *)WebKit::WebURLSchemeTaskProxy::didReceiveData(result, *a3);
  return result;
}

uint64_t *WebKit::WebURLSchemeHandlerProxy::taskDidComplete(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  uint64_t *result;
  WebKit::WebURLSchemeTaskProxy *v5;
  void *v6;
  WebKit::WebURLSchemeTaskProxy *v7;

  result = WebKit::WebURLSchemeHandlerProxy::removeTask(a1, a2, &v7);
  v5 = v7;
  if (v7)
  {
    WebKit::WebURLSchemeTaskProxy::didComplete(v7, a3);
    return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v6);
  }
  return result;
}

uint64_t *WebKit::WebURLSchemeHandlerProxy::removeTask@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebKit::WebURLSchemeTaskProxy **a3@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *result;
  WebKit::WebURLSchemeTaskProxy *v7;
  WebKit::WebProcess *v8;
  WebKit::WebURLSchemeTaskProxy *v9;
  WebKit::WebProcess *v10;
  WebKit::WebURLSchemeTaskProxy *v11;
  uint64_t v12;

  v12 = a2;
  v4 = (uint64_t *)(a1 + 32);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v12);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::take(v4, v5, &v11);
  v7 = v11;
  if (v11)
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v8 = WebKit::WebProcess::WebProcess(v10);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
      v7 = v11;
    }
    result = WebKit::WebLoaderStrategy::removeURLSchemeTaskProxy(*((WebKit::WebLoaderStrategy **)v8 + 40), v7);
    v9 = v11;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::taskDidStopLoading(WebKit::WebURLSchemeHandlerProxy *this, WebKit::WebURLSchemeTaskProxy *a2)
{
  void *v2;
  WebKit::WebURLSchemeTaskProxy *result;
  WebKit::WebURLSchemeTaskProxy *v4;

  WebKit::WebURLSchemeHandlerProxy::removeTask((uint64_t)this, *((_QWORD *)a2 + 30), &v4);
  result = v4;
  if (v4)
    return WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v4, v2);
  return result;
}

void WebKit::WebFoundTextRangeController::~WebFoundTextRangeController(WebKit::WebFoundTextRangeController *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebFoundTextRangeController::~WebFoundTextRangeController(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E34F1830;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v3);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v5, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v7 + 8));
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)134>::type()
{
  return 134;
}

uint64_t API::ObjectImpl<(API::Object::Type)139>::type()
{
  return 139;
}

uint64_t std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *a2;
  if (*a2)
    *(_DWORD *)(v2 + 24) += 2;
  *(_QWORD *)result = v2;
  v3 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(result + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  v4 = a2[2];
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  *(_QWORD *)(result + 16) = v4;
  v5 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(result + 28) = *((_BYTE *)a2 + 28);
  *(_DWORD *)(result + 24) = v5;
  v6 = a2[4];
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)(result + 32) = v6;
  v7 = *((_DWORD *)a2 + 10);
  *(_BYTE *)(result + 44) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(result + 40) = v7;
  v8 = a2[6];
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  *(_QWORD *)(result + 48) = v8;
  v9 = *((_DWORD *)a2 + 14);
  *(_BYTE *)(result + 60) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(result + 56) = v9;
  v10 = a2[8];
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)(result + 64) = v10;
  v11 = *((_DWORD *)a2 + 18);
  *(_BYTE *)(result + 76) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(result + 72) = v11;
  v12 = a2[10];
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  *(_QWORD *)(result + 80) = v12;
  v13 = *((_DWORD *)a2 + 22);
  *(_BYTE *)(result + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(result + 88) = v13;
  LOWORD(v13) = *((_WORD *)a2 + 48);
  *(_BYTE *)(result + 98) = *((_BYTE *)a2 + 98);
  *(_WORD *)(result + 96) = v13;
  *(_BYTE *)(result + 104) = 1;
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19FrameTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::WebURLSchemeTaskProxy **v4;
  WebKit::WebURLSchemeTaskProxy *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::WebURLSchemeTaskProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::WebURLSchemeTaskProxy *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)(a2 + 8), (void *)a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
      {
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v4);
        v5 = *(WTF::StringImpl **)(v4 - 16);
        *(_QWORD *)(v4 - 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 72;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v25;
  _BYTE *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *result;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = (_BYTE *)(v6 + 80);
    do
    {
      *v9 = 0;
      *((_OWORD *)v9 - 4) = 0uLL;
      *((_OWORD *)v9 - 3) = 0uLL;
      *(v9 - 32) = 0;
      v9 += 72;
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    while (1)
    {
      v13 = (_QWORD *)(v2 + 72 * v10);
      v14 = v13[2];
      if (v14 != -1)
      {
        if (*v13)
        {
          v15 = v13[1];
        }
        else
        {
          v15 = v13[1];
          if (v14)
            v16 = 0;
          else
            v16 = v15 == 0;
          if (v16)
          {
            if (!v13[3])
            {
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v2 + 72 * v10 + 32);
              v38 = (WTF::StringImpl *)v13[2];
              v13[2] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v7);
                else
                  *(_DWORD *)v38 -= 2;
              }
              goto LABEL_49;
            }
            LODWORD(v15) = 0;
          }
        }
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = v18 & ((0xD7862706ELL * (unint64_t)(277951225 * *v13 + 95187966 * (_DWORD)v15)) >> 4);
        for (i = 1; ; ++i)
        {
          v21 = v19;
          v22 = (_QWORD *)(v17 + 72 * v19);
          v23 = v22[2];
          if (v23 != -1 && *v22 == 0)
          {
            v25 = !v23 && v22[1] == 0;
            if (v25 && !v22[3])
              break;
          }
          v19 = (v21 + i) & v18;
        }
        v26 = (_BYTE *)(v17 + 72 * v21 + 32);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
        v28 = (WTF::StringImpl *)v22[2];
        v22[2] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v27);
          else
            *(_DWORD *)v28 -= 2;
        }
        *(_OWORD *)v22 = *(_OWORD *)v13;
        v29 = v13[2];
        v30 = v13[3];
        v13[2] = 0;
        v22[2] = v29;
        v22[3] = v30;
        *v26 = 0;
        v31 = v17 + 72 * v21;
        *(_BYTE *)(v31 + 64) = 0;
        v32 = (_BYTE *)(v31 + 64);
        if (*(_BYTE *)(v2 + 72 * v10 + 64))
        {
          v33 = v2 + 72 * v10;
          v34 = *(_QWORD *)(v33 + 32);
          *(_QWORD *)(v33 + 32) = 0;
          *(_QWORD *)v26 = v34;
          v35 = v17 + 72 * v21;
          *(_DWORD *)(v35 + 40) = *(_DWORD *)(v33 + 40);
          v36 = *(_QWORD *)(v33 + 48);
          *(_QWORD *)(v33 + 48) = 0;
          *(_QWORD *)(v35 + 48) = v36;
          *(_DWORD *)(v35 + 56) = *(_DWORD *)(v33 + 56);
          *v32 = 1;
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v2 + 72 * v10 + 32);
        v37 = (WTF::StringImpl *)v13[2];
        v13[2] = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v7);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (v13 == a2)
          v11 = v22;
      }
LABEL_49:
      if (++v10 == v12)
        goto LABEL_56;
    }
  }
  v11 = 0;
  result = 0;
  if (v2)
  {
LABEL_56:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int i;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = result + 16;
    do
    {
      *(_BYTE *)(v9 + 32) = 0;
      *(_OWORD *)v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      v9 += 40;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    while (1)
    {
      v12 = (_QWORD *)(v2 + 40 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        if (*v12)
        {
          v14 = v12[1];
          goto LABEL_21;
        }
        v14 = v12[1];
        if (v13)
          v15 = 0;
        else
          v15 = v14 == 0;
        if (!v15)
          goto LABEL_21;
        if (v12[3])
        {
          LODWORD(v14) = 0;
LABEL_21:
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = v17 & ((0xD7862706ELL * (unint64_t)(277951225 * *v12 + 95187966 * (_DWORD)v14)) >> 4);
          for (i = 1; ; ++i)
          {
            v20 = v18;
            v21 = (_QWORD *)(v16 + 40 * v18);
            v22 = v21[2];
            if (v22 != -1 && *v21 == 0)
            {
              v24 = !v22 && v21[1] == 0;
              if (v24 && !v21[3])
                break;
            }
            v18 = (v20 + i) & v17;
          }
          v21[2] = 0;
          *(_OWORD *)v21 = *(_OWORD *)v12;
          v25 = v12[2];
          v26 = v12[3];
          v12[2] = 0;
          v21[2] = v25;
          v21[3] = v26;
          *(_BYTE *)(v16 + 40 * v20 + 32) = *(_BYTE *)(v2 + 40 * v10 + 32);
          v27 = (WTF::StringImpl *)v12[2];
          v12[2] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v7);
            else
              *(_DWORD *)v27 -= 2;
          }
          goto LABEL_41;
        }
        v12[2] = 0;
      }
LABEL_41:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F1A40;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F1A40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;

  v5 = *(_QWORD *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34F1A90;
  v6[1] = v5;
  v7 = WTF::fastMalloc((WTF *)0x60);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  *(_BYTE *)(v7 + 32) = 1;
  *(_QWORD *)v7 = &off_1E34EF138;
  *(_QWORD *)(v7 + 8) = &unk_1E34EF630;
  *(_BYTE *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 45) = 0;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  v9 = *(unsigned int **)(a2 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(v7 + 88) = v9;
  *a3 = v7;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F1A68;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F1A68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34F1A90;
  v6[1] = v5;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)result = &off_1E34F04C0;
  *(_QWORD *)(result + 8) = &unk_1E34F0550;
  *a2 = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F1A90;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F1A90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebFrame::invalidate(*(WebKit::WebFrame **)(a1 + 8));
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = 1;
  do
  {
    v11 = v9;
    v12 = (_QWORD *)(a1 + 24 * v9);
    v9 = (v9 + v10++) & v5;
  }
  while (*v12);
  v13 = v11;
  v14 = a1 + 24 * v11;
  v17 = *(_QWORD *)(v14 + 16);
  v16 = (_QWORD *)(v14 + 16);
  v15 = v17;
  *v16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v4 = *a2;
  }
  *v12 = v4;
  *(_BYTE *)(a1 + 24 * v13 + 8) = *((_BYTE *)a2 + 8);
  v18 = a2[2];
  a2[2] = 0;
  *v16 = v18;
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::loadDidCommitInAnotherProcess(std::optional<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E34F1AB8;
  if (*(_BYTE *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::loadDidCommitInAnotherProcess(std::optional<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F1AB8;
  if (*((_BYTE *)this + 24))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::loadDidCommitInAnotherProcess(std::optional<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WTF::fastMalloc((WTF *)0x28);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(result + 24) = v6;
  LOBYTE(v6) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(result + 32) = v6;
  *(_QWORD *)result = &off_1E34F04C0;
  *(_QWORD *)(result + 8) = &unk_1E34F0550;
  *a2 = result;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F1AE0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F1AE0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  char v12;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34F1A90;
  v7[1] = v5;
  v11 = v7;
  v12 = 1;
  v8 = WTF::fastMalloc((WTF *)0x60);
  result = WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(v8, a2, v6, (uint64_t *)&v11);
  v10 = (uint64_t)v11;
  if (v12)
  {
    (*(void (**)(_QWORD *))(*v11 + 16))(v11);
LABEL_4:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_5;
  }
  if (v11)
    goto LABEL_4;
LABEL_5:
  *a3 = v8;
  return result;
}

float WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(unint64_t *a1, uint64_t a2, int8x8_t a3)
{
  unint64_t v3;
  double v4;
  int8x16_t v6;
  _QWORD v7[2];

  v3 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v6 = *(int8x16_t *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v7[0] = a2;
    v7[1] = &v6;
    *(float *)&v4 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v3), (uint64_t)v7, v6);
  }
  else
  {
    v4 = WebCore::mapColorComponents<WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)::{lambda(unsigned char)#1},WebCore::ColorComponents<unsigned char,4ul>>(a3, (uint64_t)v7, bswap32(v3));
  }
  return *(float *)&v4;
}

float _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2, int8x16_t a3)
{
  float result;
  uint64_t v4;
  int8x16_t v5;

  switch(a1)
  {
    case 0:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v5);
      break;
    case 1:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v5);
      break;
    case 2:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v5);
      break;
    case 3:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v5);
      break;
    case 4:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v5);
      break;
    case 5:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v5);
      break;
    case 6:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v5);
      break;
    case 7:
      v4 = *(_QWORD *)(a2 + 8);
      a3.i32[0] = *(_DWORD *)v4;
      result = WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(a3, *(float *)(v4 + 4), *(float *)(v4 + 8), *(float *)(v4 + 12));
      break;
    case 8:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();
      break;
    case 9:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();
      break;
    case 10:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert();
      break;
    case 11:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
      break;
    case 12:
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v5, *(int8x16_t *)*(_QWORD *)(a2 + 8));
      break;
    case 13:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert();
      break;
    case 14:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
      break;
    case 15:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v5);
      break;
    case 16:
      v5 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v5);
      break;
    case 18:
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v5, *(int8x16_t *)*(_QWORD *)(a2 + 8));
      break;
    case 19:
      result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)&v5, *(int8x16_t *)*(_QWORD *)(a2 + 8));
      break;
    default:
      result = **(float **)(a2 + 8);
      break;
  }
  return result;
}

double WebCore::mapColorComponents<WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)::{lambda(unsigned char)#1},WebCore::ColorComponents<unsigned char,4ul>>(int8x8_t a1, uint64_t a2, __int32 a3)
{
  double result;

  a1.i32[0] = a3;
  *(_QWORD *)&result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(a1, a1) & 0xFF00FF00FF00FFLL))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::webArchiveData(BOOL (*)(OpaqueWKBundleFrame const*,OpaqueWKBundleFrame const*,void *),void *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0,BOOL,WebCore::LocalFrame &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (!a1[2])
    return 1;
  v3 = a1[1];
  WebKit::WebFrame::fromCoreFrame(a2, &v9);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))a1[2];
  v6 = v9;
  if (!v9)
    return v5(v4, 0, a1[3]);
  v7 = v5(v4, *(_QWORD *)(v9 + 8), a1[3]);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  return v7;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34F1B40;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34F1B40;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 12) = 0;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::WebURLSchemeTaskProxy *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WebKit::WebURLSchemeTaskProxy *v27;
  uint64_t v28;
  uint64_t v29;
  WebKit::WebURLSchemeTaskProxy *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WebKit::WebURLSchemeTaskProxy *)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WebKit::WebURLSchemeTaskProxy **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebKit::WebURLSchemeTaskProxy **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1, a2);
  v4 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(v5 + 256) = v4;
  WTF::URL::URL(v5 + 264, (uint64_t *)(a2 + 264));
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 312);
  *(_WORD *)(a1 + 316) = *(_WORD *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v6;
  v7 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 320) = v7;
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v8 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a1 + 336) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a2 + 344) = 0;
  *(_DWORD *)(a1 + 344) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a2 + 348) = 0;
  *(_DWORD *)(a1 + 348) = v8;
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

WebKit::WebURLSchemeTaskProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  WebKit::WebURLSchemeTaskProxy *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WebKit::WebURLSchemeTaskProxy *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::WebURLSchemeTaskProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeTaskProxy::WebURLSchemeTaskProxy(WebKit::WebURLSchemeTaskProxy *this, WebKit::WebURLSchemeHandlerProxy *a2, WebCore::ResourceLoader *a3, CFTypeRef *a4)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  ++*((_DWORD *)a3 + 4);
  *((_QWORD *)this + 3) = a3;
  CFRetain(a4[1]);
  *((_QWORD *)this + 4) = a4;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)this + 5, (WebCore::ResourceLoader *)((char *)a3 + 336));
  *((_QWORD *)this + 30) = *((_QWORD *)a3 + 93);
  *((_BYTE *)this + 248) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  return this;
}

void WebKit::WebURLSchemeTaskProxy::startLoading(WebKit::WebURLSchemeTaskProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  IPC::Encoder *v25;
  _BYTE v26[8];
  uint64_t v27;
  CFTypeRef v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  CFTypeRef v40;
  uint64_t v41;
  CFTypeRef cf;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    if (v4)
    {
      v4 = (_QWORD *)v4[3];
      if (v4)
      {
        v4 = (_QWORD *)v4[1];
        if (v4)
        {
          v4 = (_QWORD *)v4[3];
          if (v4)
          {
            v4 = (_QWORD *)v4[1];
            if (v4)
            {
              v5 = *(_QWORD **)(v4[6] + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0)
              {
                v4 = 0;
              }
              else
              {
                v4 = *(_QWORD **)(v5[2] + 8);
                if (v4)
                  v4 = (_QWORD *)v4[3];
              }
            }
          }
        }
      }
      v6 = *((_QWORD *)this + 4);
      if (v6)
        v6 = *(_QWORD *)(v6 + 80);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 30);
    *(_DWORD *)buf = 134218752;
    v33 = v3;
    v34 = 2048;
    v35 = v4;
    v36 = 2048;
    v37 = v6;
    v38 = 2048;
    v39 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::startLoading", buf, 0x2Au);
  }
  v8 = *((_QWORD *)this + 2);
  v9 = *(_QWORD **)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 744);
  WebKit::WebFrame::info(*((WebKit::WebFrame **)this + 4), (uint64_t)v26);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)buf, v10, v11, (WebKit::WebURLSchemeTaskProxy *)((char *)this + 40), (uint64_t)v26);
  v12 = v9[4];
  v9 += 4;
  v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v9);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2075;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v25 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode((IPC::Encoder *)v14, (char *)buf);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v9 + 32))(v9, &v25, 0);
  v16 = v25;
  v25 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v17, v18);
  }
  v19 = v45;
  v45 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v44 != -1)
    ((void (*)(IPC::Encoder **, uint64_t *))off_1E34F2090[v44])(&v25, &v43);
  v44 = -1;
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v41);
  v21 = v40;
  v40 = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v35 + 2));
  v23 = v31;
  v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v30 != -1)
    ((void (*)(IPC::Encoder **, uint64_t *))off_1E34F2090[v30])(&v25, &v29);
  v30 = -1;
  v24 = v28;
  v28 = 0;
  if (v24)
    CFRelease(v24);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v27);
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeTaskProxy::stopLoading(WebKit::WebURLSchemeTaskProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE buf[12];
  __int16 v24;
  _QWORD *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    if (v4)
    {
      v4 = (_QWORD *)v4[3];
      if (v4)
      {
        v4 = (_QWORD *)v4[1];
        if (v4)
        {
          v4 = (_QWORD *)v4[3];
          if (v4)
          {
            v4 = (_QWORD *)v4[1];
            if (v4)
            {
              v5 = *(_QWORD **)(v4[6] + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0)
              {
                v4 = 0;
              }
              else
              {
                v4 = *(_QWORD **)(v5[2] + 8);
                if (v4)
                  v4 = (_QWORD *)v4[3];
              }
            }
          }
        }
      }
      v6 = *((_QWORD *)this + 4);
      if (v6)
        v6 = *(_QWORD *)(v6 + 80);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 30);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v3;
    v24 = 2048;
    v25 = v4;
    v26 = 2048;
    v27 = v6;
    v28 = 2048;
    v29 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::stopLoading", buf, 0x2Au);
  }
  v8 = *((_QWORD *)this + 2);
  v10 = *(_QWORD **)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 744);
  v22 = v9;
  v11 = v10[4];
  v10 += 4;
  v12 = (*(uint64_t (**)(_QWORD *))(v11 + 56))(v10);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 2077;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  *(_QWORD *)buf = v13;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v22);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v21);
  (*(void (**)(_QWORD *, _BYTE *, _QWORD))(*v10 + 32))(v10, buf, 0);
  v15 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[4];
  }
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
    CFRelease(*(CFTypeRef *)(v19 + 8));
  return WebKit::WebURLSchemeHandlerProxy::taskDidStopLoading(*((WebKit::WebURLSchemeHandlerProxy **)this + 2), this);
}

void WebKit::WebURLSchemeTaskProxy::didPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  CFTypeRef v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  CFTypeRef v81;
  WTF::StringImpl *v82;
  CFTypeRef v83;
  WebKit::WebURLSchemeTaskProxy *v84;
  uint64_t v85;
  _BYTE buf[22];
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[32];
  _BYTE v103[19];
  CFTypeRef v104;
  char v105;
  uint64_t v106[5];
  uint64_t v107[5];
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  CFTypeRef v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebURLSchemeTaskProxy::hasLoader((WebKit::WebURLSchemeTaskProxy *)a1))
  {
    if (*(_BYTE *)(a1 + 248))
    {
      v8 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        v10 = *(_QWORD **)(a1 + 32);
        if (v10)
        {
          v10 = (_QWORD *)v10[3];
          if (v10)
          {
            v10 = (_QWORD *)v10[1];
            if (v10)
            {
              v10 = (_QWORD *)v10[3];
              if (v10)
              {
                v10 = (_QWORD *)v10[1];
                if (v10)
                {
                  v11 = *(_QWORD **)(v10[6] + 16);
                  if (((*(uint64_t (**)(_QWORD *))(*v11 + 1368))(v11) & 1) != 0)
                  {
                    v10 = 0;
                  }
                  else
                  {
                    v10 = *(_QWORD **)(v11[2] + 8);
                    if (v10)
                      v10 = (_QWORD *)v10[3];
                  }
                }
              }
            }
          }
          v12 = *(_QWORD *)(a1 + 32);
          if (v12)
            v12 = *(_QWORD *)(v12 + 80);
        }
        else
        {
          v12 = 0;
        }
        v33 = *(_QWORD *)(a1 + 240);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v10;
        v87 = 2048;
        v88 = v12;
        v89 = 2048;
        v90 = v33;
        _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didPerformRedirection: Received redirect during previous redirect processing, queuing it.", buf, 0x2Au);
      }
      ++*(_DWORD *)a1;
      *(_QWORD *)buf = a1;
      *(_QWORD *)&buf[8] = a1;
      WTF::URL::URL((uint64_t)&buf[16], (uint64_t *)a2);
      v34 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 40) = 0;
      v91 = v34;
      *(_QWORD *)v92 = v35;
      v36 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)&v92[8] = v36;
      v37 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a2 + 72) = 0u;
      v93 = v37;
      *(_QWORD *)&v37 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)&v94 = v37;
      v38 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      *((_QWORD *)&v94 + 1) = v38;
      *(_QWORD *)&v37 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v95 = v37;
      v39 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      v96 = v39;
      LOBYTE(v97) = 0;
      LOBYTE(v98) = 0;
      if (*(_BYTE *)(a2 + 128))
      {
        v40 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a2 + 120) = 0;
        v97 = v40;
        LOBYTE(v98) = 1;
      }
      *(_OWORD *)v102 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)&v102[16] = *(_OWORD *)(a2 + 200);
      *(_OWORD *)v103 = *(_OWORD *)(a2 + 216);
      *(_DWORD *)&v103[15] = *(_DWORD *)(a2 + 231);
      v99 = *(_OWORD *)(a2 + 136);
      v100 = *(_OWORD *)(a2 + 152);
      v101 = *(_OWORD *)(a2 + 168);
      v41 = *(const void **)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      v104 = v41;
      v105 = *(_BYTE *)(a2 + 248);
      WTF::URL::URL((uint64_t)v106, (uint64_t *)a3);
      WTF::URL::URL((uint64_t)v107, (uint64_t *)(a3 + 40));
      v42 = *(_QWORD *)(a3 + 80);
      v43 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a3 + 88) = 0u;
      v109 = v43;
      *(_QWORD *)&v43 = *(_QWORD *)(a3 + 104);
      *(_QWORD *)(a3 + 104) = 0;
      v108 = v42;
      v110 = v43;
      v44 = *(_QWORD *)(a3 + 112);
      *(_QWORD *)(a3 + 112) = 0;
      v111 = v44;
      v45 = *(_QWORD *)(a3 + 120);
      *(_QWORD *)(a3 + 120) = 0;
      v112 = v45;
      v46 = *(_QWORD *)(a3 + 128);
      *(_QWORD *)(a3 + 128) = 0;
      v113 = v46;
      v47 = *(_QWORD *)(a3 + 136);
      *(_QWORD *)(a3 + 136) = 0;
      v114 = v47;
      LODWORD(v46) = *(_DWORD *)(a3 + 144);
      v116 = *(_BYTE *)(a3 + 148);
      v115 = v46;
      v48 = *(_OWORD *)(a3 + 152);
      *(_OWORD *)(a3 + 152) = 0u;
      v117 = v48;
      v120 = *(_BYTE *)(a3 + 184);
      v49 = *(_QWORD *)(a3 + 168);
      v50 = *(_QWORD *)(a3 + 176);
      *(_QWORD *)(a3 + 168) = 0;
      v118 = v49;
      v119 = v50;
      v51 = *(const void **)(a3 + 192);
      *(_QWORD *)(a3 + 192) = 0;
      v52 = *a4;
      *a4 = 0;
      v121 = v51;
      v122 = v52;
      v53 = WTF::fastMalloc((WTF *)0x1E8);
      *(_QWORD *)v53 = off_1E34F2148;
      *(_QWORD *)(v53 + 8) = *(_QWORD *)buf;
      v54 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)(v53 + 16) = v54;
      WTF::URL::URL(v53 + 24, (uint64_t *)&buf[16]);
      v55 = v91;
      v91 = 0;
      *(_QWORD *)(v53 + 64) = v55;
      *(_OWORD *)(v53 + 72) = *(_OWORD *)v92;
      v56 = *(_QWORD *)&v92[16];
      *(_OWORD *)&v92[8] = 0u;
      *(_QWORD *)(v53 + 88) = v56;
      *(_QWORD *)(v53 + 96) = v93;
      v57 = *((_QWORD *)&v93 + 1);
      v93 = 0u;
      *(_QWORD *)(v53 + 104) = v57;
      v58 = v94;
      *(_QWORD *)&v94 = 0;
      *(_QWORD *)(v53 + 112) = v58;
      v59 = *((_QWORD *)&v94 + 1);
      *((_QWORD *)&v94 + 1) = 0;
      *(_QWORD *)(v53 + 120) = v59;
      v60 = v95;
      v95 = 0;
      *(_QWORD *)(v53 + 128) = v60;
      v61 = v96;
      v96 = 0;
      *(_QWORD *)(v53 + 136) = v61;
      *(_BYTE *)(v53 + 144) = 0;
      *(_BYTE *)(v53 + 152) = 0;
      if ((_BYTE)v98)
      {
        v62 = v97;
        v97 = 0;
        *(_QWORD *)(v53 + 144) = v62;
        *(_BYTE *)(v53 + 152) = 1;
      }
      v63 = *(_OWORD *)v102;
      v64 = *(_OWORD *)&v102[16];
      v65 = *(_OWORD *)v103;
      *(_DWORD *)(v53 + 255) = *(_DWORD *)&v103[15];
      v66 = v100;
      v67 = v101;
      *(_OWORD *)(v53 + 160) = v99;
      *(_OWORD *)(v53 + 176) = v66;
      *(_OWORD *)(v53 + 224) = v64;
      *(_OWORD *)(v53 + 240) = v65;
      *(_OWORD *)(v53 + 192) = v67;
      *(_OWORD *)(v53 + 208) = v63;
      v68 = v104;
      v104 = 0;
      *(_QWORD *)(v53 + 264) = v68;
      *(_BYTE *)(v53 + 272) = v105;
      WTF::URL::URL(v53 + 280, v106);
      WTF::URL::URL(v53 + 320, v107);
      *(_QWORD *)(v53 + 360) = v108;
      *(_QWORD *)(v53 + 368) = v109;
      v69 = *((_QWORD *)&v109 + 1);
      v109 = 0u;
      *(_QWORD *)(v53 + 376) = v69;
      v70 = v110;
      v110 = 0;
      *(_QWORD *)(v53 + 384) = v70;
      v71 = v111;
      v111 = 0;
      *(_QWORD *)(v53 + 392) = v71;
      v72 = v112;
      v112 = 0;
      *(_QWORD *)(v53 + 400) = v72;
      v73 = v113;
      v113 = 0;
      *(_QWORD *)(v53 + 408) = v73;
      v74 = v114;
      v114 = 0;
      *(_QWORD *)(v53 + 416) = v74;
      LODWORD(v73) = v115;
      *(_BYTE *)(v53 + 428) = v116;
      *(_DWORD *)(v53 + 424) = v73;
      *(_QWORD *)(v53 + 432) = v117;
      v75 = *((_QWORD *)&v117 + 1);
      v117 = 0u;
      *(_QWORD *)(v53 + 440) = v75;
      *(_QWORD *)(v53 + 448) = v118;
      v76 = v119;
      *(_BYTE *)(v53 + 464) = v120;
      *(_QWORD *)(v53 + 456) = v76;
      v118 = 0;
      *(_QWORD *)(v53 + 472) = v121;
      v77 = v122;
      v121 = 0;
      v122 = 0;
      *(_QWORD *)(v53 + 480) = v77;
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 256);
      v78 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v78) = v53;
      if (v78 == *(unsigned int *)(a1 + 280) - 1)
        v79 = 0;
      else
        v79 = v78 + 1;
      *(_QWORD *)(a1 + 264) = v79;
      v80 = v122;
      v122 = 0;
      if (v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
      v81 = v121;
      v121 = 0;
      if (v81)
        CFRelease(v81);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v106);
      v83 = v104;
      v104 = 0;
      if (v83)
        CFRelease(v83);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&buf[16], v82);
    }
    else
    {
      *(_BYTE *)(a1 + 248) = 1;
      ++*(_DWORD *)a1;
      *(_QWORD *)buf = a1;
      *(_QWORD *)&buf[8] = a1;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[16], (const WebCore::ResourceRequest *)a3);
      v15 = *a4;
      *a4 = 0;
      *(_QWORD *)&v102[16] = v15;
      v16 = *(_QWORD *)(a1 + 24);
      v17 = WTF::fastMalloc((WTF *)0xE8);
      *(_QWORD *)v17 = off_1E34F2170;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)buf;
      v18 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)(v17 + 16) = v18;
      WTF::URL::URL(v17 + 24, (uint64_t *)&buf[16]);
      WTF::URL::URL(v17 + 64, &v91);
      *(_QWORD *)(v17 + 104) = *((_QWORD *)&v93 + 1);
      *(_QWORD *)(v17 + 112) = v94;
      v19 = *((_QWORD *)&v94 + 1);
      v94 = 0u;
      *(_QWORD *)(v17 + 120) = v19;
      v20 = v95;
      v95 = 0;
      *(_QWORD *)(v17 + 128) = v20;
      v21 = v96;
      v96 = 0;
      *(_QWORD *)(v17 + 136) = v21;
      v22 = v97;
      v97 = 0;
      *(_QWORD *)(v17 + 144) = v22;
      v23 = v98;
      v98 = 0;
      *(_QWORD *)(v17 + 152) = v23;
      v24 = v99;
      *(_QWORD *)&v99 = 0;
      *(_QWORD *)(v17 + 160) = v24;
      LODWORD(v23) = DWORD2(v99);
      *(_BYTE *)(v17 + 172) = BYTE12(v99);
      *(_DWORD *)(v17 + 168) = v23;
      *(_QWORD *)(v17 + 176) = v100;
      v25 = *((_QWORD *)&v100 + 1);
      v100 = 0u;
      *(_QWORD *)(v17 + 184) = v25;
      v26 = v101;
      *(_QWORD *)&v101 = 0;
      *(_QWORD *)(v17 + 192) = v26;
      v27 = *((_QWORD *)&v101 + 1);
      *(_BYTE *)(v17 + 208) = v102[0];
      *(_QWORD *)(v17 + 200) = v27;
      *(_QWORD *)(v17 + 216) = *(_QWORD *)&v102[8];
      v28 = *(_QWORD *)&v102[16];
      *(_OWORD *)&v102[8] = 0u;
      *(_QWORD *)(v17 + 224) = v28;
      v85 = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v16 + 192))(v16, a3, a2, &v85);
      v29 = v85;
      v85 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v30 = *(_QWORD *)&v102[16];
      *(_QWORD *)&v102[16] = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v31 = *(const void **)&v102[8];
      *(_QWORD *)&v102[8] = 0;
      if (v31)
        CFRelease(v31);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[16]);
    }
    v84 = *(WebKit::WebURLSchemeTaskProxy **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v84)
      WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v84, v32);
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
    v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = (const void *)*((_QWORD *)&v101 + 1);
    *((_QWORD *)&v101 + 1) = 0;
    if (v14)
      CFRelease(v14);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
}

BOOL WebKit::WebURLSchemeTaskProxy::hasLoader(WebKit::WebURLSchemeTaskProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *((_QWORD *)this + 3);
  if (v2 && *(_BYTE *)(v2 + 752))
  {
    *((_QWORD *)this + 3) = 0;
    if (*(_DWORD *)(v2 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    else
      --*(_DWORD *)(v2 + 16);
    v3 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  v4 = WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 3))
    v4 = 0;
  return v4 != 0;
}

uint64_t WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebKit::WebURLSchemeTaskProxy *this, const WebCore::ResourceResponse *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  void *v21;
  _BYTE v22[22];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  CFTypeRef cf;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 248))
  {
    v4 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
      v6 = (_QWORD *)*((_QWORD *)this + 4);
      if (v6)
      {
        v6 = (_QWORD *)v6[3];
        if (v6)
        {
          v6 = (_QWORD *)v6[1];
          if (v6)
          {
            v6 = (_QWORD *)v6[3];
            if (v6)
            {
              v6 = (_QWORD *)v6[1];
              if (v6)
              {
                v7 = *(_QWORD **)(v6[6] + 16);
                if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) != 0)
                {
                  v6 = 0;
                }
                else
                {
                  v6 = *(_QWORD **)(v7[2] + 8);
                  if (v6)
                    v6 = (_QWORD *)v6[3];
                }
              }
            }
          }
        }
        v8 = *((_QWORD *)this + 4);
        if (v8)
          v8 = *(_QWORD *)(v8 + 80);
      }
      else
      {
        v8 = 0;
      }
      v12 = *((_QWORD *)this + 30);
      *(_DWORD *)v22 = 134218752;
      *(_QWORD *)&v22[4] = v5;
      *(_WORD *)&v22[12] = 2048;
      *(_QWORD *)&v22[14] = v6;
      v23 = 2048;
      v24 = v8;
      v25 = 2048;
      v26 = v12;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didReceiveResponse: Received response during redirect processing, queuing it.", v22, 0x2Au);
    }
    ++*(_DWORD *)this;
    *(_QWORD *)v22 = this;
    *(_QWORD *)&v22[8] = this;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v22[16], a2);
    v13 = (const void *)*((_QWORD *)a2 + 30);
    cf = v13;
    if (v13)
      CFRetain(v13);
    v28 = *((_BYTE *)a2 + 248);
    v14 = WTF::fastMalloc((WTF *)0x118);
    *(_QWORD *)v14 = off_1E34F2198;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)v22;
    v15 = *(_QWORD *)&v22[8];
    *(_QWORD *)&v22[8] = 0;
    *(_QWORD *)(v14 + 16) = v15;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v14 + 24), (const WebCore::ResourceResponseBase *)&v22[16]);
    v16 = cf;
    *(_QWORD *)(v14 + 264) = cf;
    if (v16)
      CFRetain(v16);
    *(_BYTE *)(v14 + 272) = v28;
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
    v18 = *((_QWORD *)this + 33);
    *(_QWORD *)(*((_QWORD *)this + 34) + 8 * v18) = v14;
    if (v18 == *((unsigned int *)this + 70) - 1)
      v19 = 0;
    else
      v19 = v18 + 1;
    *((_QWORD *)this + 33) = v19;
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v22[16], v17);
    result = *(_QWORD *)&v22[8];
    *(_QWORD *)&v22[8] = 0;
    if (result)
      return (uint64_t)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref((WebKit::WebURLSchemeTaskProxy *)result, v21);
  }
  else
  {
    result = WebKit::WebURLSchemeTaskProxy::hasLoader(this);
    if ((_DWORD)result)
    {
      *((_BYTE *)this + 248) = 1;
      v10 = *((_QWORD *)this + 3);
      ++*(_DWORD *)this;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34F21C0;
      v11[1] = this;
      v11[2] = this;
      *(_QWORD *)v22 = v11;
      (*(void (**)(uint64_t, const WebCore::ResourceResponse *, _BYTE *))(*(_QWORD *)v10 + 208))(v10, a2, v22);
      result = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTaskProxy::didReceiveData(WebKit::WebURLSchemeTaskProxy *this, const WebCore::SharedBuffer *a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = WebKit::WebURLSchemeTaskProxy::hasLoader(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 248))
    {
      v5 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
        v7 = (_QWORD *)*((_QWORD *)this + 4);
        if (v7)
        {
          v7 = (_QWORD *)v7[3];
          if (v7)
          {
            v7 = (_QWORD *)v7[1];
            if (v7)
            {
              v7 = (_QWORD *)v7[3];
              if (v7)
              {
                v7 = (_QWORD *)v7[1];
                if (v7)
                {
                  v8 = *(_QWORD **)(v7[6] + 16);
                  if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) != 0)
                  {
                    v7 = 0;
                  }
                  else
                  {
                    v7 = *(_QWORD **)(v8[2] + 8);
                    if (v7)
                      v7 = (_QWORD *)v7[3];
                  }
                }
              }
            }
          }
          v9 = *((_QWORD *)this + 4);
          if (v9)
            v9 = *(_QWORD *)(v9 + 80);
        }
        else
        {
          v9 = 0;
        }
        v11 = *((_QWORD *)this + 30);
        v16 = 134218752;
        v17 = v6;
        v18 = 2048;
        v19 = v7;
        v20 = 2048;
        v21 = v9;
        v22 = 2048;
        v23 = v11;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didReceiveData: Received data during response processing, queuing it.", (uint8_t *)&v16, 0x2Au);
      }
      ++*(_DWORD *)this;
      do
        v12 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v12 + 1, (unsigned int *)a2));
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v13 = &off_1E34F21E8;
      v13[1] = this;
      v13[2] = this;
      v13[3] = a2;
      result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
      v14 = *((_QWORD *)this + 33);
      *(_QWORD *)(*((_QWORD *)this + 34) + 8 * v14) = v13;
      if (v14 == *((unsigned int *)this + 70) - 1)
        v15 = 0;
      else
        v15 = v14 + 1;
      *((_QWORD *)this + 33) = v15;
    }
    else
    {
      ++*(_DWORD *)this;
      (*(void (**)(_QWORD, const WebCore::SharedBuffer *, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 216))(*((_QWORD *)this + 3), a2, 0, 1);
      WebKit::WebURLSchemeTaskProxy::processNextPendingTask(this);
      return (uint64_t)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(this, v10);
    }
  }
  return result;
}

_QWORD *WebKit::WebURLSchemeTaskProxy::processNextPendingTask(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this[32];
  if (v1 != this[33])
  {
    v2 = this;
    v3 = this[34];
    v4 = *(_QWORD *)(v3 + 8 * v1);
    *(_QWORD *)(v3 + 8 * v1) = 0;
    v5 = this[34];
    v6 = *(_QWORD *)(v5 + 8 * v1);
    *(_QWORD *)(v5 + 8 * v1) = 0;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v1 = v2[32];
    }
    if (v1 == *((unsigned int *)v2 + 70) - 1)
      v7 = 0;
    else
      v7 = v1 + 1;
    v2[32] = v7;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return this;
}

void WebKit::WebURLSchemeTaskProxy::didComplete(WebKit::WebURLSchemeTaskProxy *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  const void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _BYTE buf[32];
  __int16 v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
    v6 = (_QWORD *)*((_QWORD *)this + 4);
    if (v6)
    {
      v6 = (_QWORD *)v6[3];
      if (v6)
      {
        v6 = (_QWORD *)v6[1];
        if (v6)
        {
          v6 = (_QWORD *)v6[3];
          if (v6)
          {
            v6 = (_QWORD *)v6[1];
            if (v6)
            {
              v7 = *(_QWORD **)(v6[6] + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) != 0)
              {
                v6 = 0;
              }
              else
              {
                v6 = *(_QWORD **)(v7[2] + 8);
                if (v6)
                  v6 = (_QWORD *)v6[3];
              }
            }
          }
        }
      }
      v8 = *((_QWORD *)this + 4);
      if (v8)
        v8 = *(_QWORD *)(v8 + 80);
    }
    else
    {
      v8 = 0;
    }
    v9 = *((_QWORD *)this + 30);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v8;
    v31 = 2048;
    v32 = v9;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didComplete", buf, 0x2Au);
  }
  if (WebKit::WebURLSchemeTaskProxy::hasLoader(this))
  {
    if (*((_BYTE *)this + 248))
    {
      ++*(_DWORD *)this;
      v10 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v10 += 2;
      v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (v11)
        *(_DWORD *)v11 += 2;
      v12 = *((_OWORD *)a2 + 2);
      *(_OWORD *)buf = *((_OWORD *)a2 + 1);
      *(_OWORD *)&buf[16] = v12;
      v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
      if (v13)
        *(_DWORD *)v13 += 2;
      v28 = *((_DWORD *)a2 + 14);
      v29 = *((_WORD *)a2 + 30);
      v14 = (const void *)*((_QWORD *)a2 + 8);
      if (v14)
        CFRetain(*((CFTypeRef *)a2 + 8));
      v15 = *((_BYTE *)a2 + 72);
      v16 = WTF::fastMalloc((WTF *)0x68);
      v17 = v16;
      *(_QWORD *)v16 = &off_1E34F2210;
      *(_QWORD *)(v16 + 8) = this;
      *(_QWORD *)(v16 + 16) = this;
      if (v10)
        *(_DWORD *)v10 += 2;
      *(_QWORD *)(v16 + 24) = v10;
      if (v11)
        *(_DWORD *)v11 += 2;
      *(_QWORD *)(v16 + 32) = v11;
      v18 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v16 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v16 + 56) = v18;
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)(v16 + 72) = v13;
      *(_DWORD *)(v16 + 80) = v28;
      *(_WORD *)(v16 + 84) = v29;
      *(_QWORD *)(v16 + 88) = v14;
      if (v14)
        CFRetain(v14);
      *(_BYTE *)(v17 + 96) = v15;
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
      v20 = *((_QWORD *)this + 33);
      *(_QWORD *)(*((_QWORD *)this + 34) + 8 * v20) = v17;
      if (v20 == *((unsigned int *)this + 70) - 1)
        v21 = 0;
      else
        v21 = v20 + 1;
      *((_QWORD *)this + 33) = v21;
      if (v14)
      {
        CFRelease(v14);
        if (!v13)
          goto LABEL_42;
      }
      else if (!v13)
      {
        goto LABEL_42;
      }
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v19);
      else
        *(_DWORD *)v13 -= 2;
LABEL_42:
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v19);
          if (!v10)
            return;
          goto LABEL_48;
        }
        *(_DWORD *)v11 -= 2;
      }
      if (!v10)
        return;
LABEL_48:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v19);
      else
        *(_DWORD *)v10 -= 2;
      return;
    }
    v22 = *((_QWORD *)this + 3);
    if (*((_BYTE *)a2 + 60))
    {
      (*(void (**)(_QWORD, const WebCore::ResourceError *))(*(_QWORD *)v22 + 240))(*((_QWORD *)this + 3), a2);
    }
    else
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 232))(v22, buf);
      v24 = v34;
      v34 = 0;
      if (v24)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v24);
      v25 = v33;
      v33 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v23);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    v26 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v26)
    {
      if (v26[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[4];
    }
    v27 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v27)
      CFRelease(*(CFTypeRef *)(v27 + 8));
  }
}

void WebKit::ViewGestureGeometryCollector::~ViewGestureGeometryCollector(WebKit::ViewGestureGeometryCollector *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  WebKit::WebProcess *v4;

  *(_QWORD *)this = off_1E34F1B90;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0x95u, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::ViewGestureGeometryCollector::~ViewGestureGeometryCollector(this);
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture(uint64_t a1, char a2, float a3, float a4, float a5, float a6, float a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  __int128 v25;
  int v26[4];
  int v27[2];
  IPC::Encoder *v28;

  *(float *)v27 = a3;
  *(float *)&v27[1] = a4;
  *(float *)v26 = a5;
  *(float *)&v26[1] = a6;
  *(float *)&v26[2] = a7;
  *(float *)&v26[3] = a8;
  v25 = a15;
  v18 = a1 + 32;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 1436;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v28 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v20, v27);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v20, v26);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v20, (int *)&v25);
  *IPC::Encoder::grow((IPC::Encoder *)v20, 1uLL, 1) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v20, 8uLL, 8) = a16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v20, 8uLL, 8) = a17;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v18 + 32))(v18, &v28, 0);
  result = v28;
  v28 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t WebKit::ViewGestureGeometryCollector::collectGeometryForSmartMagnificationGesture(WebKit::WebPage **a1, float a2, float a3)
{
  uint64_t result;
  WebCore::ScrollView *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  BOOL v32;
  _QWORD v33[9];
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;

  v38 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  result = WebKit::WebPage::localMainFrameView(a1[2]);
  if (result)
  {
    v7 = (WebCore::ScrollView *)result;
    ++*(_DWORD *)(result + 8);
    v33[0] = WebCore::ScrollView::unobscuredContentRect();
    v33[1] = v8;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v37, (const WebCore::IntRect *)v33);
    v35 = 0;
    v36 = 0;
    v9 = roundf(a2);
    v10 = 0x7FFFFFFFLL;
    v11 = 0x80000000;
    if (v9 > -2147500000.0)
      v11 = (int)v9;
    if (v9 < 2147500000.0)
      v10 = v11;
    v12 = roundf(a3);
    if (v12 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      v13 = 0x8000000000000000;
    }
    else
    {
      v13 = (unint64_t)(int)v12 << 32;
    }
    v33[0] = v13 | v10;
    v14 = WebCore::ScrollView::windowToContents(v7, (const WebCore::IntPoint *)v33);
    v15 = (int8x8_t)vcgt_s32((int32x2_t)v14, (int32x2_t)0xFE000000FE000000);
    *(int8x8_t *)v31.f32 = vorr_s8((int8x8_t)(*(_QWORD *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v14, 6uLL)), v15));
    WebCore::HitTestResult::HitTestResult();
    v22 = *((_QWORD *)a1[2] + 6);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 160);
      if (v23)
      {
        if (!*(_BYTE *)(v23 + 144))
        {
          v31.i32[0] = 259;
          v31.i8[4] = 1;
          WebCore::Document::hitTest();
        }
      }
    }
    v24 = v34;
    if (v34)
    {
      *((_DWORD *)v34 + 6) += 2;
      v32 = 0;
      v31 = 0uLL;
      WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(a1, v24, (float32x2_t *)&v38, &v31, &v32, (double *)&v36, (double *)&v35);
      WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture((uint64_t)a1[2], v32, *(float *)&v38, *((float *)&v38 + 1), v31.f32[0], v31.f32[1], v31.f32[2], v31.f32[3], v25, v26, v27, v28, v29, v30, v37, v36, v35);
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    else
    {
      WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture((uint64_t)a1[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, v16, v17, v18, v19, v20, v21, 0, 0, 0);
    }
    result = MEMORY[0x19AEADBAC](v33);
    if (*((_DWORD *)v7 + 2) == 1)
      return (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v7 + 8))(v7);
    else
      --*((_DWORD *)v7 + 2);
  }
  return result;
}

void WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(WebKit::WebPage **this, WebCore::Node *a2, float32x2_t *a3, float32x4_t *a4, BOOL *a5, double *a6, double *a7)
{
  int32x4_t v14;
  uint64_t v15;
  WebCore::ImageDocument *v16;
  WebCore::Node *v17;
  uint64_t v18;
  float32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;

  v14.i64[0] = WebCore::Node::absoluteBoundingRect(a2, a5);
  v14.i64[1] = v15;
  *a4 = vmulq_f32(vcvtq_f32_s32(v14), (float32x4_t)vdupq_n_s32(0x3C800000u));
  v16 = *(WebCore::ImageDocument **)(*((_QWORD *)a2 + 5) + 8);
  if ((*((_BYTE *)v16 + 3358) & 4) != 0)
  {
    v17 = (WebCore::Node *)WebCore::ImageDocument::imageElement(v16);
    if (v17)
    {
      if (v17 != a2)
      {
        v18 = WebCore::Node::absoluteBoundingRect(v17, a5);
        v19 = (float32x2_t)vdup_n_s32(0x3C800000u);
        v21 = vmul_f32(vcvt_f32_s32(v20), v19);
        *(float32x2_t *)v22.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)v18), v19);
        *(float32x2_t *)&v22.u32[2] = v21;
        *a4 = v22;
        *a3 = (float32x2_t)vbsl_s8(vorr_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v22.f32, *a3), (int8x8_t)vcgt_f32(*a3, vadd_f32(*(float32x2_t *)v22.f32, v21))), (int8x8_t)vadd_f32(*(float32x2_t *)v22.f32, vmul_f32(v21, (float32x2_t)0x3F0000003F000000)), (int8x8_t)*a3);
      }
      *a5 = 1;
    }
  }
  *a6 = WebKit::WebPage::minimumPageScaleFactor(this[2]);
  *a7 = WebKit::WebPage::maximumPageScaleFactor(this[2]);
}

void WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher(WebKit::ViewUpdateDispatcher *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

WTF *WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  WTF **v8;
  _BOOL4 v9;
  WTF *result;
  WTF *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  int v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;

  v36 = a2;
  v5 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 24);
LABEL_5:
  v8 = (WTF **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v9 = *(_DWORD *)(v7 - 12) == 0;
  else
    v9 = 1;
  result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v36);
  v11 = *v8;
  if (*v8)
    v11 = (WTF *)((char *)v11 + 16 * *((unsigned int *)v11 - 1));
  if (v11 == result)
  {
    v21 = *((_QWORD *)a3 + 18);
    v22 = WTF::fastMalloc((WTF *)0xB8);
    v23 = *a3;
    v24 = a3[2];
    *(_OWORD *)(v22 + 16) = a3[1];
    *(_OWORD *)(v22 + 32) = v24;
    *(_OWORD *)v22 = v23;
    v25 = a3[3];
    v26 = a3[4];
    v27 = a3[6];
    *(_OWORD *)(v22 + 80) = a3[5];
    *(_OWORD *)(v22 + 96) = v27;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 64) = v26;
    v28 = a3[7];
    v29 = a3[8];
    v30 = a3[10];
    *(_OWORD *)(v22 + 144) = a3[9];
    *(_OWORD *)(v22 + 160) = v30;
    *(_OWORD *)(v22 + 112) = v28;
    *(_OWORD *)(v22 + 128) = v29;
    *(_QWORD *)(v22 + 176) = v21;
    v35 = (WTF *)v22;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>((uint64_t *)(a1 + 32), &v36, (uint64_t *)&v35, (uint64_t)&v34);
    result = v35;
    v35 = 0;
    if (result)
      result = (WTF *)WTF::fastFree(result, v31);
  }
  else
  {
    v12 = (_OWORD *)*((_QWORD *)result + 1);
    v13 = *a3;
    v14 = a3[2];
    v12[1] = a3[1];
    v12[2] = v14;
    *v12 = v13;
    v15 = a3[3];
    v16 = a3[4];
    v17 = a3[6];
    v12[5] = a3[5];
    v12[6] = v17;
    v12[3] = v15;
    v12[4] = v16;
    v18 = a3[7];
    v19 = a3[8];
    v20 = a3[9];
    *(_OWORD *)((char *)v12 + 156) = *(__int128 *)((char *)a3 + 156);
    v12[8] = v19;
    v12[9] = v20;
    v12[7] = v18;
  }
  v32 = __ldxr(v5);
  if (v32 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (!v9)
        return result;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v9)
    return result;
LABEL_20:
  WTF::RunLoop::main(result);
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = off_1E34F2238;
  *((_QWORD *)v33 + 1) = a1;
  v34 = v33;
  WTF::RunLoop::dispatch();
  result = v34;
  v34 = 0;
  if (result)
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebRemoteObjectRegistry::~WebRemoteObjectRegistry(unsigned int **this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::WebRemoteObjectRegistry::close((WebKit::WebRemoteObjectRegistry *)this);
  v3 = this[4];
  this[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  WebKit::RemoteObjectRegistry::~RemoteObjectRegistry((WebKit::RemoteObjectRegistry *)this, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebRemoteObjectRegistry::~WebRemoteObjectRegistry(this);
  WTF::fastFree(v1, v2);
}

void WebKit::WebRemoteObjectRegistry::close(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebRemoteObjectRegistry *v4;
  WebKit::WebProcess *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebKit::WebProcess *v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  v4 = *(WebKit::WebRemoteObjectRegistry **)(v3 + 2112);
  if (v4)
    v4 = (WebKit::WebRemoteObjectRegistry *)*((_QWORD *)v4 + 1);
  if (v4 != this)
    goto LABEL_12;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v5 + 40, 0x69u, *(_QWORD *)(v3 + 40));
  v7 = *(unsigned int **)(v3 + 2112);
  *(_QWORD *)(v3 + 2112) = 0;
  if (!v7)
    goto LABEL_12;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
    if (v2)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (v2)
LABEL_13:
      CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::isOpaque(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 105) + 309);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::acceleratesDrawing(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 105) + 307);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::wantsDeepColorBackingStore(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 105) + 308);
}

uint64_t WebKit::StorageAreaImpl::StorageAreaImpl(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34F20B0;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34F1FE0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v4 = *(unsigned int **)(a2 + 8);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 24) = v4;
  ++*(_QWORD *)(a2 + 96);
  return a1;
}

void WebKit::StorageAreaImpl::~StorageAreaImpl(WebKit::StorageAreaImpl *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    *((_QWORD *)this + 3) = 0;
    return;
  }
  v3 = *(uint64_t **)(v2 + 8);
  if (v3 && (v4 = v3[12] - 1, (v3[12] = v4) == 0))
  {
    WebKit::StorageNamespaceImpl::destroyStorageAreaMap(v3[4], (WebKit::StorageAreaMap *)v3);
    v2 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v2)
      return;
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  do
  {
    v5 = __ldaxr((unsigned int *)v2);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v2));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)v2);
    WTF::fastFree((WTF *)v2, v3);
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::StorageAreaImpl::~StorageAreaImpl(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::StorageAreaImpl::length(WebKit::StorageAreaImpl *this)
{
  uint64_t v1;
  WebKit::StorageAreaMap *v2;
  WebCore::StorageMap *v3;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(WebKit::StorageAreaMap **)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(v2);
  return WebCore::StorageMap::length(v3);
}

WebKit::StorageAreaMap *WebKit::StorageAreaImpl::key@<X0>(WebKit::StorageAreaMap *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WebCore::StorageMap *v4;
  _DWORD *v5;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (this = *(WebKit::StorageAreaMap **)(v3 + 8)) != 0)
  {
    v4 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(this);
    return (WebKit::StorageAreaMap *)WebCore::StorageMap::key(v4);
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v5 += 2;
    *a2 = v5;
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaImpl::removeItem(WTF::StringImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v3;
  WebKit::StorageAreaImpl *v5;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v5 = this;
    this = *(WTF::StringImpl **)(v3 + 8);
    if (this)
      return WebKit::StorageAreaMap::removeItem(this, a2, v5, a3);
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaMap::removeItem(WebKit::StorageAreaMap *this, WebCore::LocalFrame *a2, WebKit::StorageAreaImpl *a3, const WTF::String *a4)
{
  WebCore::StorageMap *v8;
  WTF::StringImpl *result;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  WebKit::WebProcess *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t buf[8];
  uint64_t *v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26[3];
  WTF::StringImpl *v27;

  v8 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(this);
  v27 = 0;
  result = (WTF::StringImpl *)WebCore::StorageMap::removeItem(v8, a4, (WTF::String *)&v27);
  if (v27)
  {
    LODWORD(v26[0]) = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 9, (WTF::StringImpl **)a4, (const WTF::StringImpl *)v26, (uint64_t)buf);
    ++*(_DWORD *)(*(_QWORD *)buf + 8);
    if (*((_BYTE *)this + 64))
    {
      v10 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      v11 = (unsigned int *)*((_QWORD *)this + 1);
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      v13 = *((_QWORD *)this + 10);
      v26[0] = (uint64_t)v11;
      v26[1] = v13;
      v14 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
        *v14 += 2;
      v26[2] = (uint64_t)v14;
      v15 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v10);
      result = (WTF::StringImpl *)WebKit::WebProcess::ensureNetworkProcessConnection(v15);
      if (!*((_BYTE *)this + 64))
      {
        __break(1u);
        return result;
      }
      v16 = (os_unfair_lock_s *)*((_QWORD *)result + 3);
      v21 = *((_QWORD *)a3 + 2);
      *(_QWORD *)buf = (char *)this + 56;
      v17 = *((_QWORD *)a2 + 37) + 736;
      v23 = &v21;
      v24 = a4;
      v25 = v17;
      IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(v16, (uint64_t **)buf, v26);
      WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0::~$_0((uint64_t)v26, v18);
    }
    else
    {
      v20 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "StorageAreaMap::removeItem failed because storage map ID is invalid", buf, 2u);
      }
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::StorageAreaImpl::clear(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::StorageMap *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  NSObject *v26;
  WebKit::WebProcess *v27;
  uint64_t v28[3];
  IPC::Encoder *v29;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v6 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(*(WebKit::StorageAreaMap **)(v2 + 8));
      WebCore::StorageMap::clear(v6);
      v8 = *(WTF::StringImpl ***)(v3 + 72);
      if (v8)
      {
        *(_QWORD *)(v3 + 72) = 0;
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
      }
      ++*(_QWORD *)(v3 + 80);
      *(_BYTE *)(v3 + 104) = 1;
      if (*(_BYTE *)(v3 + 64))
      {
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
        v9 = *(unsigned int **)(v3 + 8);
        if (v9)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        v11 = *(_QWORD *)(v3 + 80);
          goto LABEL_19;
        v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        while (1)
        {
          v13 = WebKit::WebProcess::ensureNetworkProcessConnection(v12);
          if (*(_BYTE *)(v3 + 64))
            break;
          __break(1u);
LABEL_19:
          v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v12 = WebKit::WebProcess::WebProcess(v27);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
        }
        v14 = *(os_unfair_lock_s **)(v13 + 24);
        v15 = *((_QWORD *)this + 2);
        v16 = (uint64_t *)(*((_QWORD *)a2 + 37) + 736);
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v17 = &off_1E34F22B0;
        v17[1] = v9;
        v17[2] = v11;
        v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v19 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v19 = 532;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 528) = v19 + 16;
        *(_QWORD *)(v19 + 536) = v19 + 16;
        *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v19 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
        v29 = (IPC::Encoder *)v19;
        v20 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v19, 8uLL, 8) = v20;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v19, 8uLL, 8) = v15;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, v16);
        v28[0] = (uint64_t)v17;
        v28[1] = v18;
        IPC::Connection::sendMessageWithAsyncReply(v14, &v29, v28, 0, 0);
        v22 = v28[0];
        v28[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v21);
          WTF::fastFree(v24, v25);
        }
      }
      else
      {
        v26 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v28[0]) = 0;
          _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "StorageAreaMap::clear failed because storage map ID is invalid", (uint8_t *)v28, 2u);
        }
      }
    }
  }
}

uint64_t WebKit::StorageAreaImpl::contains(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  WebKit::StorageAreaMap *v3;
  WebCore::StorageMap *v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(WebKit::StorageAreaMap **)(v2 + 8);
  if (!v3)
    return 0;
  v5 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(v3);
  return WebCore::StorageMap::contains(v5, a2);
}

uint64_t WebKit::StorageAreaImpl::storageType(WebKit::StorageAreaImpl *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(unsigned __int8 *)(v2 + 92);
  else
    return 1;
}

uint64_t WebKit::StorageAreaImpl::memoryBytesUsedByCache(WebKit::StorageAreaImpl *this)
{
  return 0;
}

uint64_t WebKit::StorageAreaMap::StorageAreaMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *IdentifierInternal;
  uint64_t v7;
  WebKit::WebProcess *v8;

  *(_QWORD *)a1 = &off_1E34B0558;
  *(_QWORD *)(a1 + 8) = 0;
  IdentifierInternal = (WebKit::WebProcess *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34F2068;
  *(_QWORD *)(a1 + 16) = IdentifierInternal;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  v8 = WebKit::WebProcess::singleton(IdentifierInternal);
  WebKit::WebProcess::registerStorageAreaMap(v8, (WebKit::StorageAreaMap *)a1);
  return a1;
}

void WebKit::StorageAreaMap::~StorageAreaMap(unsigned int **this)
{
  WebKit::WebProcess *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl ****v5;
  uint64_t v6;
  WebKit::WebProcess *v7;

  WebKit::StorageAreaMap::disconnect((WebKit::StorageAreaMap *)this);
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::unregisterStorageAreaMap(v2, (WebKit::StorageAreaMap *)this);
  v4 = (WTF::StringImpl **)this[9];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  v5 = (WTF::StringImpl ****)this[6];
  this[6] = 0;
  if (v5)
    std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100]((_DWORD)this + 48, v5);
  v6 = (uint64_t)this[5];
  this[5] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, (WTF::StringImpl *)v5);
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v5);
}

{
  WTF *v1;
  void *v2;

  WebKit::StorageAreaMap::~StorageAreaMap(this);
  WTF::fastFree(v1, v2);
}

void *WebKit::StorageAreaMap::disconnect(WebKit::StorageAreaMap *this)
{
  int v2;
  char *v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WebKit::WebProcess *v21;
  __int128 v22;
  uint64_t *v23;
  IPC::Encoder *v24;
  IPC::Encoder *v25[3];
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)this + 64);
  v3 = &_MergedGlobals_106;
    goto LABEL_29;
  result = (void *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v3 = (char *)*((_QWORD *)result + 37);
    if (!v2)
      break;
    if (!v3)
      goto LABEL_25;
    ++*((_DWORD *)v3 + 4);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)v3 + 3);
    if (*((_BYTE *)this + 64))
    {
      v5 = v22;
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 549;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v25[0] = (IPC::Encoder *)v6;
      v7 = *((_QWORD *)this + 7);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)v25, 0, 0);
      v9 = v25[0];
      v25[0] = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v10, v11);
      }
      result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
      if (*((_DWORD *)v3 + 4) == 1)
        result = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
      else
        --*((_DWORD *)v3 + 4);
LABEL_25:
      *((_BYTE *)this + 56) = 0;
      *((_BYTE *)this + 64) = 0;
      *((_QWORD *)this + 3) = 0;
      return result;
    }
    __break(1u);
LABEL_29:
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
    v3[2488] = 1;
  }
  if (v3)
  {
    v12 = *((_DWORD *)v3 + 4);
    *((_DWORD *)v3 + 4) = v12 + 1;
    if (*((_BYTE *)this + 105))
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, (uint64_t **)v3 + 3);
      v13 = v23;
      v14 = *((unsigned __int8 *)this + 92);
      v15 = *((_QWORD *)this + 4);
      if ((v14 - 1) <= 1 && *(_QWORD *)(v15 + 32))
        LOBYTE(v14) = 2;
      v22 = *(_OWORD *)(v15 + 48);
      WebKit::StorageAreaMap::clientOrigin((WebKit::StorageAreaMap *)v25, (uint64_t)this);
      v16 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v16 = 531;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 528) = v16 + 16;
      *(_QWORD *)(v16 + 536) = v16 + 16;
      *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v16 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
      v24 = (IPC::Encoder *)v16;
      *IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1) = v14;
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>((IPC::Encoder *)v16, (uint64_t)&v22);
      IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v16, (uint64_t)v25);
      IPC::Connection::sendMessageImpl((uint64_t)v13, (uint64_t *)&v24, 0, 0);
      v18 = v24;
      v24 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v19, v20);
      }
      if (v28 != -1)
        ((void (*)(IPC::Encoder **, uint64_t *))off_1E34F2090[v28])(&v24, &v27);
      v28 = -1;
      if (v26 != -1)
        ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1E34F2090[v26])(&v24, v25);
      result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v23);
      v12 = *((_DWORD *)v3 + 4) - 1;
    }
    if (v12)
      *((_DWORD *)v3 + 4) = v12;
    else
      return (void *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  uint64_t v21[2];
  IPC::Encoder *v22;

  v5 = *a3;
  v6 = a3[1];
  *a3 = 0;
  v7 = (WTF::StringImpl *)a3[2];
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v10 = (uint64_t)v8;
  *v8 = &off_1E34F2288;
  v8[1] = v5;
  v8[2] = v6;
  if (v7)
  {
    v11 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    v8[3] = v7;
    if (v11)
      *(_DWORD *)v7 = v11;
    else
      WTF::StringImpl::destroy(v7, v9);
  }
  else
  {
    v8[3] = 0;
  }
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 573;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v22 = (IPC::Encoder *)v13;
  v14 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v14;
  v15 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v15;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2[3]);
  v21[0] = v10;
  v21[1] = v12;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v22, v21, 0, 0);
  v17 = v21[0];
  v21[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

void WebKit::StorageAreaMap::syncItems(uint64_t a1)
{
  WebCore::StorageMap *v2;
  uint64_t v3;
  WebCore::StorageMap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WebCore::StorageMap *v21;

  if (!*(_QWORD *)(a1 + 48) || *(_BYTE *)(a1 + 104))
    return;
  v2 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
  v3 = WebCore::StorageMap::StorageMap(v2);
  v4 = *(WebCore::StorageMap **)(a1 + 48);
  v21 = v4;
  *(_QWORD *)(a1 + 48) = v3;
  WebCore::StorageMap::importItems();
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 16 * v6;
    if (*(_DWORD *)(v5 - 12))
    {
      v8 = *(_QWORD *)(a1 + 72);
      if ((_DWORD)v6)
      {
        v9 = 16 * v6;
        v8 = *(_QWORD *)(a1 + 72);
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 += 16;
          v9 -= 16;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v8 = v5 + 16 * v6;
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = v5 + 16 * v6;
LABEL_13:
  if (v5)
    v10 = v5 + 16 * *(unsigned int *)(v5 - 4);
  else
    v10 = 0;
  while (v8 != v10)
  {
    v11 = *(WTF::StringImpl **)v8;
    if (*(_QWORD *)v8)
      *(_DWORD *)v11 += 2;
    v19 = v11;
    v20 = *(_DWORD *)(v8 + 8);
    WebCore::StorageMap::getItem(v4, (const WTF::String *)&v19);
    if (v18)
    {
      WebCore::StorageMap::setItemIgnoringQuota(*(WebCore::StorageMap **)(a1 + 48), (const WTF::String *)&v19, (const WTF::String *)&v18);
    }
    else
    {
      v17 = 0;
      WebCore::StorageMap::removeItem(*(WebCore::StorageMap **)(a1 + 48), (const WTF::String *)&v19, (WTF::String *)&v17);
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v8 + 16;
    v8 = v7;
    if (v16 != v7)
    {
      v8 = v16;
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 16;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  v21 = 0;
  if (v4)
    std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100]((int)&v21, (WTF::StringImpl ****)v4);
}

uint64_t WebKit::StorageAreaMap::applyChange(WebKit::StorageAreaMap *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  if (*a2)
    return WebKit::StorageAreaMap::syncOneItem((uint64_t)this, a2, a3);
  WebKit::StorageAreaMap::syncItems((uint64_t)this);
  return 0;
}

uint64_t WebKit::StorageAreaMap::syncOneItem(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_QWORD *)(this + 48))
  {
    v5 = this;
    this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 72), a2, a3);
    if ((this & 1) == 0)
    {
      if (*(_QWORD *)a3)
      {
        return WebCore::StorageMap::setItemIgnoringQuota(*(WebCore::StorageMap **)(v5 + 48), (const WTF::String *)a2, a3);
      }
      else
      {
        v7 = 0;
        WebCore::StorageMap::removeItem(*(WebCore::StorageMap **)(v5 + 48), (const WTF::String *)a2, (WTF::String *)&v7);
        this = (uint64_t)v7;
        v7 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

void WebKit::StorageAreaMap::dispatchStorageEvent(WebKit::StorageAreaMap *this, uint64_t a2, WTF::StringImpl **a3, int a4, WTF::String *a5, uint64_t a6, unint64_t a7)
{
  if (*((_QWORD *)this + 3) <= a7)
  {
    *((_QWORD *)this + 3) = a7;
    if (!*(_BYTE *)(a2 + 8))
      WebKit::StorageAreaMap::applyChange(this, a3, a5);
    if (*((_BYTE *)this + 92))
      WebKit::StorageAreaMap::dispatchLocalStorageEvent((uint64_t)this, a2);
    else
      WebKit::StorageAreaMap::dispatchSessionStorageEvent((uint64_t)this, a2);
  }
}

void WebKit::StorageAreaMap::dispatchSessionStorageEvent(uint64_t a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  __int128 v11;
  uint64_t v12;

    goto LABEL_11;
  v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v5 + 24))
      break;
    __break(1u);
LABEL_11:
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  *(_QWORD *)&v11 = *(_QWORD *)(v5 + 16);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v4 + 14, &v11);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    if (*(_QWORD *)(v7 + 48))
    {
      *(_QWORD *)&v11 = *(_QWORD *)a2;
      BYTE8(v11) = *(_BYTE *)(a2 + 8);
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v8 = off_1E34F22D8;
      *(_OWORD *)(v8 + 8) = v11;
      v12 = v8;
      WebCore::StorageEventDispatcher::dispatchSessionStorageEvents();
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t WebKit::StorageAreaMap::dispatchLocalStorageEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)&v4 = *(_QWORD *)a2;
  BYTE8(v4) = *(_BYTE *)(a2 + 8);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E34F2300;
  *(_OWORD *)(v2 + 8) = v4;
  v5 = v2;
  WebCore::StorageEventDispatcher::dispatchLocalStorageEvents();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WebKit::StorageAreaMap::clearCache(uint64_t this, unint64_t a2)
{
  if (*(_QWORD *)(this + 24) <= a2)
  {
    *(_QWORD *)(this + 24) = a2;
    WebKit::StorageAreaMap::syncItems(this);
    return 0;
  }
  return this;
}

uint64_t WebKit::StorageAreaMap::didConnect(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  WebCore::StorageMap *v5;
  uint64_t v6;
  WTF::StringImpl ****v7;
  uint64_t *v8;
  WTF::StringImpl ****v9;

  *(_BYTE *)(result + 105) = 0;
  if (*(_QWORD *)(result + 24) <= a4)
  {
    v4 = result;
    *(_QWORD *)(result + 24) = a4;
    if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!*(_BYTE *)(result + 64))
        *(_BYTE *)(result + 64) = 1;
      *(_QWORD *)(result + 56) = a2;
      v5 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
      v6 = WebCore::StorageMap::StorageMap(v5);
      v9 = *(WTF::StringImpl *****)(v4 + 48);
      v8 = (uint64_t *)(v4 + 48);
      v7 = v9;
      *v8 = v6;
      if (v9)
        std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100]((int)v8, v7);
      return WebCore::StorageMap::importItems();
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(os_unfair_lock_s *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  __int128 v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v13 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34F2338;
  *(_OWORD *)(v5 + 8) = v13;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 537;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v7, a2);
  v14[0] = v5;
  v14[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::fastFree(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100](int a1, WTF::StringImpl ****this)
{
  WTF::StringImpl ***v3;

  if (this)
  {
    v3 = *this;
    *this = 0;
    if (v3)
      WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, (WTF::StringImpl *)this);
    WTF::fastFree((WTF *)this, this);
  }
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  v3 = (WTF::StringImpl **)*((_QWORD *)a2 + 2);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;
  void *v6;
  WebKit::WebURLSchemeTaskProxy *v7;

  *a1 = off_1E34F2148;
  v2 = a1[60];
  a1[60] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[59];
  a1[59] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 35));
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), v4);
  v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;
  void *v6;
  WebKit::WebURLSchemeTaskProxy *v7;

  *a1 = off_1E34F2148;
  v2 = a1[60];
  a1[60] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[59];
  a1[59] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 35));
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), v4);
  v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, v6);
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebURLSchemeTaskProxy::didPerformRedirection(*(_QWORD *)(a1 + 8), a1 + 24, a1 + 280, (uint64_t *)(a1 + 480));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  WebKit::WebURLSchemeTaskProxy *v5;

  *a1 = off_1E34F2170;
  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  v5 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  WebKit::WebURLSchemeTaskProxy *v5;

  *a1 = off_1E34F2170;
  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  v5 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v4);
  return WTF::fastFree((WTF *)a1, v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 248) = 0;
  v2 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return WebKit::WebURLSchemeTaskProxy::processNextPendingTask((_QWORD *)v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  WebKit::WebURLSchemeTaskProxy *v6;

  *a1 = off_1E34F2198;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 3);
  v4 = (const void *)a1[33];
  a1[33] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v6, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  WebKit::WebURLSchemeTaskProxy *v6;

  *a1 = off_1E34F2198;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 3);
  v4 = (const void *)a1[33];
  a1[33] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v6, v5);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebURLSchemeTaskProxy::didReceiveResponse(*(WebKit::WebURLSchemeTaskProxy **)(a1 + 8), (const WebCore::ResourceResponse *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebKit::WebURLSchemeTaskProxy *v3;

  *a1 = &off_1E34F21C0;
  v3 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebURLSchemeTaskProxy *v3;

  *(_QWORD *)this = &off_1E34F21C0;
  v3 = (WebKit::WebURLSchemeTaskProxy *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 248) = 0;
  return WebKit::WebURLSchemeTaskProxy::processNextPendingTask((_QWORD *)v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  WebKit::WebURLSchemeTaskProxy *v4;

  *a1 = &off_1E34F21E8;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  WebKit::WebURLSchemeTaskProxy *v4;

  *(_QWORD *)this = &off_1E34F21E8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (WebKit::WebURLSchemeTaskProxy *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebURLSchemeTaskProxy::didReceiveData(*(WebKit::WebURLSchemeTaskProxy **)(a1 + 8), *(const WebCore::SharedBuffer **)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebKit::WebURLSchemeTaskProxy *v7;

  *a1 = &off_1E34F2210;
  v3 = (const void *)a1[11];
  a1[11] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebKit::WebURLSchemeTaskProxy *v7;

  *(_QWORD *)this = &off_1E34F2210;
  v3 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebKit::WebURLSchemeTaskProxy *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebURLSchemeTaskProxy::didComplete(*(WebKit::WebURLSchemeTaskProxy **)(a1 + 8), (const WebCore::ResourceError *)(a1 + 24));
}

WTF *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  WTF *result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a3;
    *a3 = 0;
    result = (WTF *)v16[1];
    v16[1] = v20;
    if (result)
      result = (WTF *)WTF::fastFree(result, a2);
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
        v16 = (uint64_t *)result;
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = *a3;
  *a3 = 0;
  result = (WTF *)v16[1];
  v16[1] = v29;
  if (result)
    return (WTF *)WTF::fastFree(result, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = (WTF *)v25[1];
          v25[1] = 0;
          if (v26)
            WTF::fastFree(v26, v9);
          *v25 = *v12;
          v27 = v4 + 16 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v29 = *(WTF **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            WTF::fastFree(v29, v9);
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
            WTF::fastFree(v15, v9);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::VisibleContentRectUpdateInfo const&)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  WebKit::WebProcess *v12;
  uint64_t *v13;
  WebKit::WebProcess *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(result + 8);
  v3 = (unsigned __int8 *)(v2 + 24);
  if (__ldaxr((unsigned __int8 *)(v2 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](v2 + 24);
LABEL_5:
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
LABEL_16:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
    if (v5)
      goto LABEL_8;
LABEL_17:
    v9 = 0;
    v7 = 0;
    goto LABEL_19;
  }
  if (__stlxr(0, v3))
    goto LABEL_16;
  if (!v5)
    goto LABEL_17;
LABEL_8:
  v7 = *(unsigned int *)(v5 - 4);
  v8 = (uint64_t *)(v5 + 16 * v7);
  if (*(_DWORD *)(v5 - 12))
  {
    v9 = (uint64_t *)v5;
    if ((_DWORD)v7)
    {
      v10 = 16 * v7;
      v9 = (uint64_t *)v5;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        v10 -= 16;
        if (!v10)
        {
          v9 = v8;
          goto LABEL_14;
        }
      }
    }
    goto LABEL_14;
  }
  v9 = (uint64_t *)(v5 + 16 * v7);
LABEL_19:
  v8 = (uint64_t *)(v5 + 16 * v7);
  if (v5)
  {
LABEL_14:
    v11 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_21;
  }
  v11 = 0;
LABEL_21:
  while (v9 != v11)
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v14);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    v15 = *v9;
    result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v12 + 14, &v15);
    if (result)
      result = WebKit::WebPage::updateVisibleContentRects(result, v9[1], *(double *)(v9[1] + 176));
    v13 = v9 + 2;
    v9 = v8;
    if (v13 != v8)
    {
      v9 = v13;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  if (v5)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34F2260;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34F2260;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  _BYTE v6[8];
  WTF::StringImpl **v7;
  char v8;

  v2 = a1 + 8;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v6, a2), v8))
  {
    if (!*(_QWORD *)v2
      || (v5 = *(_QWORD *)(*(_QWORD *)v2 + 8)) == 0
      || (WebKit::StorageAreaMap::didSetItem(v5, *(_QWORD *)(a1 + 16), (WTF::StringImpl **)(a1 + 24), v6[0] != 0), v8))
    {
      if (v7)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)result)
  {
    v1 = result;
    result = *(_QWORD *)(*(_QWORD *)result + 8);
    if (result)
    {
      WebKit::StorageAreaMap::didSetItem(result, *(_QWORD *)(v1 + 8), (WTF::StringImpl **)(v1 + 16), 0);
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34F2288;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34F2288;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  _BYTE v6[8];
  WTF::StringImpl **v7;
  char v8;

  v2 = a1 + 8;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v6, a2), v8))
  {
    if (!*(_QWORD *)v2
      || (v5 = *(_QWORD *)(*(_QWORD *)v2 + 8)) == 0
      || (WebKit::StorageAreaMap::didSetItem(v5, *(_QWORD *)(a1 + 16), (WTF::StringImpl **)(a1 + 24), v6[0] != 0), v8))
    {
      if (v7)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(v2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34F22B0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F22B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 80) == *(_QWORD *)(result + 16))
        *(_BYTE *)(v2 + 104) = 0;
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaMap::dispatchSessionStorageEvent(std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) && *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) == *(_QWORD *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaMap::dispatchLocalStorageEvent(std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) && *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) == *(_QWORD *)(a1 + 8);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = **(_BYTE **)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 16));
  return IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(_QWORD *)(a2 + 24));
}

char *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

WTF::StringImpl **IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(_BYTE *a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl **)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t))*result + 2))(result, v5);
  }
  return result;
}

WTF::StringImpl **IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  uint64_t v5;
  uint64_t v6[2];

  result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = (uint64_t)result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v6);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

WTF::StringImpl **IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t *a3)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  char v9;

  result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v8);
  if (v9)
  {
    result = (WTF::StringImpl **)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t)a1, a2, a3, (uint64_t *)&v8);
    if (v9)
    {
      result = v8;
      if (v8)
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
    }
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v8)
  {
    v11 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a3 + 8) && *((_BYTE *)a4 + 8))
  {
    v9 = *a3;
    v10 = *a4;
    *a4 = 0;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = result;
    v11 = 1;
LABEL_5:
    *(_BYTE *)(a1 + 24) = v11;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34F2338;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34F2338;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF::StringImpl **result, uint64_t *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  unint64_t v9;
  char v10;
  WTF::StringImpl **v11;

  v2 = result;
  if (a2
    && *a2
    && (result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(&v7, a2), v10))
  {
    v3 = v7;
    result = v8;
    v11 = v8;
    v4 = v2[2];
    if (v4 && *((_QWORD *)v4 + 1))
    {
      WebKit::StorageAreaMap::didConnect((uint64_t)v2[1], (uint64_t)v7, (uint64_t)&v11, v9);
      result = v11;
    }
    if (result)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  else
  {
    v5 = v2[2];
    if (v5)
    {
      if (*((_QWORD *)v5 + 1))
      {
        v6 = v2[1];
        *((_BYTE *)v6 + 105) = 0;
        if (!*((_QWORD *)v6 + 3))
          *((_QWORD *)v6 + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t WebKit::StorageNamespaceImpl::sessionID(WebKit::StorageNamespaceImpl *this)
{
  char *v1;
  WebKit::WebProcess *v2;
  char *v4;
  WebKit::WebProcess *v5;

  v1 = &_MergedGlobals_106;
    goto LABEL_6;
  v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v1 = (char *)*((unsigned __int8 *)v2 + 672);
    if (*((_BYTE *)v2 + 672))
      break;
    __break(1u);
LABEL_6:
    v4 = v1;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    v4[2488] = 1;
  }
  return *((_QWORD *)v2 + 83);
}

uint64_t WebKit::StorageNamespaceImpl::destroyStorageAreaMap(uint64_t this, WebKit::StorageAreaMap *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v18;
  __int16 v19;
  char v20;
  char v21;

  v2 = (uint64_t *)(this + 64);
  v3 = *(_QWORD *)(this + 64);
  if (!v3)
    return this;
  v4 = *((_QWORD *)a2 + 5) + 8;
  v5 = *(_DWORD *)(v3 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v18, v4);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18) & v5;
  v7 = v3 + 40 * v6;
  this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7);
  if ((this & 1) != 0)
  {
LABEL_7:
    v10 = *v2;
    if (!*v2)
      return this;
    v7 = v10 + 40 * *(unsigned int *)(v10 - 4);
LABEL_9:
    v10 += 40 * *(unsigned int *)(v10 - 4);
    if (v10 == v7)
      return this;
    goto LABEL_10;
  }
  v8 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v7);
    if ((v9 & 1) == 0)
    {
      this = WebCore::operator==();
      if ((this & 1) != 0)
        break;
    }
    v6 = (v6 + v8) & v5;
    v7 = v3 + 40 * v6;
    this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7);
    ++v8;
    if ((_DWORD)this)
      goto LABEL_7;
  }
  v10 = *v2;
  if (*v2)
    goto LABEL_9;
LABEL_10:
  if (v10 != v7)
  {
    v11 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v11])(&v21, v7);
    *(_QWORD *)v7 = -1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 0;
    this = (uint64_t)std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(v7 + 32), 0);
    ++*(_DWORD *)(*v2 - 16);
    v12 = *v2;
    if (*v2)
      v13 = *(_DWORD *)(v12 - 12) - 1;
    else
      v13 = -1;
    *(_DWORD *)(v12 - 12) = v13;
    v14 = *v2;
    if (*v2)
    {
      v15 = 6 * *(_DWORD *)(v14 - 12);
      v16 = *(_DWORD *)(v14 - 4);
      if (v15 < v16 && v16 >= 9)
        return (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v2, v16 >> 1, 0);
    }
  }
  return this;
}

void WebKit::StorageNamespaceImpl::copy(WebKit::StorageNamespaceImpl *this@<X0>, WebCore::Page *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v5 = *(_QWORD **)(*((_QWORD *)a2 + 6) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0 || (v6 = *(_QWORD *)(v5[2] + 8)) == 0)
  {
    v7 = 0;
  }
  else
  {
    v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
  }
  v8 = WTF::fastMalloc((WTF *)0x48);
  v9 = *((_BYTE *)this + 12);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = (unsigned int *)*((_QWORD *)this + 4);
  v12 = *((_DWORD *)this + 10);
  v13 = *(_QWORD *)(v7 + 2120);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E34F2360;
  *(_BYTE *)(v8 + 12) = v9;
  *(_QWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = 1;
  if (v11)
  {
    do
      v14 = __ldaxr(v11);
    while (__stlxr(v14 + 1, v11));
  }
  *(_QWORD *)(v8 + 32) = v11;
  *(_DWORD *)(v8 + 40) = v12;
  *(_QWORD *)(v8 + 48) = v13;
  *(_QWORD *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = 0;
  *a3 = v8;
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

WebCore::SecurityOriginData *WebKit::WebStorageNamespaceProvider::incrementUseCount(WebCore::SecurityOriginData *result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  int v4;
  WebCore::SecurityOriginData *v5;
  _QWORD v6[3];
  WebCore::SecurityOriginData *v7;

  v7 = result;
  {
    if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
    {
      v1 = *(_QWORD *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
      if (v1)
      {
        v4 = 0;
        v5 = 0;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::add<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>((uint64_t *)(v1 + 48), (uint64_t *)&v7, (uint64_t)&v4, (uint64_t)v6);
        result = v5;
        v3 = v6[0];
        if (v5)
          result = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v2);
        ++*(_DWORD *)(v3 + 8);
      }
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::add<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  void *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v12 = result & v9;
  v13 = (uint64_t *)(v8 + 24 * (result & v9));
  v14 = *v13;
  v15 = *a2;
  if (*v13)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v14 == v15)
      {
        v27 = *a1;
        if (*a1)
          v28 = *(_DWORD *)(v27 - 4);
        else
          v28 = 0;
        v24 = 0;
        v23 = v27 + 24 * v28;
        goto LABEL_14;
      }
      if (v14 == -1)
        v25 = v13;
      v12 = (v12 + v26) & v9;
      v13 = (uint64_t *)(v8 + 24 * v12);
      v14 = *v13;
      ++v26;
    }
    while (*v13);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *a2;
      v13 = v25;
    }
  }
  *v13 = v15;
  *((_DWORD *)v13 + 2) = *(_DWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  result = v13[2];
  v13[2] = v16;
  if (result)
    result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)result, v11);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_13;
LABEL_26:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v13);
    v13 = (uint64_t *)result;
    v19 = *a1;
    if (*a1)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_26;
LABEL_13:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_14:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t *WebKit::WebStorageNamespaceProvider::decrementUseCount(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  v6 = result;
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
    return result;
  }
  if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
  {
    v1 = *(_QWORD *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
    if (v1)
    {
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v1 + 48), &v6);
      v2 = *((_DWORD *)result + 2) - 1;
      *((_DWORD *)result + 2) = v2;
      if (!v2)
      {
        if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
          v3 = *(_QWORD *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
        else
          v3 = 0;
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v3 + 48), &v6);
        v4 = *(_QWORD *)(v3 + 48);
        if (v4)
        {
          v5 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
          if (v5 == result)
            return result;
        }
        else
        {
          if (!result)
            return result;
          v5 = 0;
        }
        if (v5 != result)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v3 + 48), result);
      }
    }
  }
  return result;
}

void WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SecurityOriginData **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::SecurityOriginData **)(v3 + 16);
      do
      {
        if (*(v5 - 2) != (WebCore::SecurityOriginData *)-1 && *v5)
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(*v5, a2);
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebStorageNamespaceProvider::sessionStorageNamespace(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  char v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  WebCore::SecurityOriginData *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  WebCore::SecurityOriginData *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;

  v9 = *(_QWORD **)(*(_QWORD *)(a3 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v9 + 1368))(v9) & 1) != 0 || (v10 = *(_QWORD *)(v9[2] + 8)) == 0)
  {
    *a5 = 0;
    return;
  }
  CFRetain(*(CFTypeRef *)(v10 - 8));
  v11 = (uint64_t *)(a1 + 48);
  v70 = *(_QWORD *)(v10 + 2104);
  v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v70);
  v14 = v12;
  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
    v16 = (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4));
  else
    v16 = 0;
  if (v16 == v12)
  {
    if (!a4)
      goto LABEL_51;
    v41 = *(_QWORD *)(v10 + 2104);
    if (v15
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 48), 0), (v15 = *v11) != 0))
    {
      v42 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = (v41 + ~(v41 << 32)) ^ ((unint64_t)(v41 + ~(v41 << 32)) >> 22);
    v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
    v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
    v46 = v42 & ((v45 >> 31) ^ v45);
    v14 = (uint64_t *)(v15 + 24 * v46);
    v47 = *v14;
    if (!*v14)
    {
LABEL_47:
      *v14 = v41;
      *((_DWORD *)v14 + 2) = 0;
      v50 = (WebCore::SecurityOriginData *)v14[2];
      v14[2] = 0;
      if (v50)
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v50, v13);
      v51 = *v11;
      if (*v11)
        v52 = *(_DWORD *)(v51 - 12) + 1;
      else
        v52 = 1;
      *(_DWORD *)(v51 - 12) = v52;
      v63 = *v11;
      if (*v11)
        v64 = *(_DWORD *)(v63 - 12);
      else
        v64 = 0;
      v65 = (*(_DWORD *)(v63 - 16) + v64);
      v66 = *(unsigned int *)(v63 - 4);
      if (v66 > 0x400)
      {
        if (v66 > 2 * v65)
          goto LABEL_8;
      }
      else if (3 * v66 > 4 * v65)
      {
        goto LABEL_8;
      }
      v14 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 48), v14);
      goto LABEL_8;
    }
    v48 = 0;
    v49 = 1;
    while (v47 != v41)
    {
      if (v47 == -1)
        v48 = v14;
      v46 = (v46 + v49) & v42;
      v14 = (uint64_t *)(v15 + 24 * v46);
      v47 = *v14;
      ++v49;
      if (!*v14)
      {
        if (v48)
        {
          *v48 = 0;
          v48[1] = 0;
          v48[2] = 0;
          --*(_DWORD *)(*v11 - 16);
          v14 = v48;
        }
        goto LABEL_47;
      }
    }
    *((_DWORD *)v14 + 2) = 0;
    v60 = (WebCore::SecurityOriginData *)v14[2];
    v14[2] = 0;
    if (v60)
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v60, v13);
  }
LABEL_8:
  v19 = v14[2];
  v17 = v14 + 2;
  v18 = v19;
  v20 = (uint64_t)(a2 + 2);
  v69 = v10;
  if (!v19)
    goto LABEL_18;
  v67 = a1;
  v21 = a5;
  v22 = *(_DWORD *)(v18 - 8);
  LODWORD(v70) = -1640531527;
  WORD2(v70) = 0;
  BYTE6(v70) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v70, (uint64_t)(a2 + 2));
  v23 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v70) & v22;
  v24 = (unsigned int *)(v18 + 40 * v23);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24) & 1) != 0)
  {
LABEL_14:
    v27 = *v17;
    a5 = v21;
    a1 = v67;
    v10 = v69;
    if (!*v17)
      goto LABEL_18;
    v24 = (unsigned int *)(v27 + 40 * *(unsigned int *)(v27 - 4));
    goto LABEL_16;
  }
  v25 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v24);
    if ((v26 & 1) == 0 && (WebCore::operator==() & 1) != 0)
      break;
    v23 = (v23 + v25) & v22;
    v24 = (unsigned int *)(v18 + 40 * v23);
    ++v25;
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24))
      goto LABEL_14;
  }
  v27 = *v17;
  if (*v17)
  {
    a5 = v21;
    a1 = v67;
    v10 = v69;
LABEL_16:
    v27 += 40 * *(unsigned int *)(v27 - 4);
    goto LABEL_17;
  }
  a5 = v21;
  a1 = v67;
  v10 = v69;
LABEL_17:
  if ((unsigned int *)v27 != v24)
    goto LABEL_80;
LABEL_18:
  if (a4)
  {
    v28 = *(_QWORD *)(v10 + 2104);
    v29 = *(_QWORD *)(v10 + 24);
    v30 = *(_DWORD *)(a1 + 32);
    v31 = WTF::fastMalloc((WTF *)0x48);
    v32 = v31;
    *(_DWORD *)(v31 + 8) = 1;
    *(_QWORD *)v31 = off_1E34F2360;
    *(_BYTE *)(v31 + 12) = 0;
    *(_QWORD *)(v31 + 16) = v29;
    *(_BYTE *)(v31 + 24) = 1;
    do
      v33 = __ldaxr(a2);
    while (__stlxr(v33 + 1, a2));
    *(_QWORD *)(v31 + 32) = a2;
    *(_DWORD *)(v31 + 40) = v30;
    *(_QWORD *)(v31 + 48) = v28;
    *(_QWORD *)(v31 + 56) = 1;
    *(_QWORD *)(v31 + 64) = 0;
    v34 = *v17;
    if (*v17
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v17, 0), (v34 = *v17) != 0))
    {
      v35 = *(_DWORD *)(v34 - 8);
    }
    else
    {
      v35 = 0;
    }
    LODWORD(v70) = -1640531527;
    WORD2(v70) = 0;
    BYTE6(v70) = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v70, v20);
    v36 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v70) & v35;
    v24 = (unsigned int *)(v34 + 40 * v36);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24) & 1) == 0)
    {
      v68 = a5;
      v37 = 0;
      v38 = 1;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v24);
        if ((v39 & 1) != 0)
        {
          v37 = v24;
        }
        else if (WebCore::operator==())
        {
          v61 = v34 + 40 * v36;
          v62 = *(_DWORD **)(v61 + 32);
          *(_QWORD *)(v61 + 32) = v32;
          if (v62)
          {
            a5 = v68;
            v10 = v69;
            if (v62[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
            else
              --v62[2];
          }
          else
          {
            a5 = v68;
            v10 = v69;
          }
          goto LABEL_80;
        }
        v36 = ((_DWORD)v36 + v38) & v35;
        v24 = (unsigned int *)(v34 + 40 * v36);
        ++v38;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24));
      a5 = v68;
      if (v37)
      {
        *((_QWORD *)v37 + 4) = 0;
        *(_OWORD *)v37 = 0u;
        *((_OWORD *)v37 + 1) = 0u;
        --*(_DWORD *)(*v17 - 16);
        v24 = v37;
      }
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v24, v20);
    v40 = (_DWORD *)*((_QWORD *)v24 + 4);
    *((_QWORD *)v24 + 4) = v32;
    v10 = v69;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
    v54 = *v17;
    if (*v17)
      v55 = *(_DWORD *)(v54 - 12) + 1;
    else
      v55 = 1;
    *(_DWORD *)(v54 - 12) = v55;
    v56 = *v17;
    if (*v17)
      v57 = *(_DWORD *)(v56 - 12);
    else
      v57 = 0;
    v58 = (*(_DWORD *)(v56 - 16) + v57);
    v59 = *(unsigned int *)(v56 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58)
      {
LABEL_80:
        v53 = *((_QWORD *)v24 + 4);
        if (v53)
          ++*(_DWORD *)(v53 + 8);
        goto LABEL_82;
      }
    }
    else if (3 * v59 > 4 * v58)
    {
      goto LABEL_80;
    }
    v24 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v17, v24);
    goto LABEL_80;
  }
LABEL_51:
  v53 = 0;
LABEL_82:
  *a5 = v53;
  CFRelease(*(CFTypeRef *)(v10 - 8));
}

void WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager(WebKit::RemoteCaptureSampleManager *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int ***v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E34F23F0;
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v3);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v7 + 312));
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (unsigned int ***)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (unsigned int **)-1)
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100](v10, 0);
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v11 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    v12 = *v11;
    if (__ldaxr(*v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEABB3C](v12);
LABEL_23:
    v14 = *((_QWORD *)v12 + 1);
    v15 = v14 - 1;
    *((_QWORD *)v12 + 1) = v14 - 1;
    if (v14 == 1)
    {
      v21 = *((_QWORD *)v12 + 2);
      v17 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v12 + 3) = 0;
      v16 = v21 == 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = __ldxr(v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, v12))
      {
        if (v15)
          goto LABEL_33;
LABEL_31:
        v19 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v19 = off_1E34ACA48;
        *(_QWORD *)(v19 + 8) = v12;
        *(_QWORD *)(v19 + 16) = v17;
        *(_BYTE *)(v19 + 24) = v16;
        v22 = v19;
        WTF::ensureOnMainRunLoop();
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_33:
  v20 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::RemoteCaptureSampleManager::stopListeningForIPC(WebKit::RemoteCaptureSampleManager *this)
{
  WebKit::WebProcess *v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  unsigned __int8 **v15;
  uint64_t v16;

  if (*((_BYTE *)this + 24))
  {
    {
      v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v2 = WebKit::WebProcess::WebProcess(v14);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    }
    IPC::Connection::removeWorkQueueMessageReceiver(*((_QWORD *)v2 + 4), 0x45u, 0);
  }
  v15 = 0;
  WebKit::RemoteCaptureSampleManager::setConnection((uint64_t)this, (uint64_t *)&v15);
  v3 = v15;
  v15 = 0;
  if (v3)
  {
    v4 = *v3;
    if (__ldaxr(*v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEABB3C](v4);
LABEL_10:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *((_QWORD *)v4 + 2);
      v9 = *((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v8 = v13 == 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
        if (v7)
          return;
LABEL_18:
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v11 = off_1E34ACA48;
        *(_QWORD *)(v11 + 8) = v4;
        *(_QWORD *)(v11 + 16) = v9;
        *(_BYTE *)(v11 + 24) = v8;
        v16 = v11;
        WTF::ensureOnMainRunLoop();
        v12 = v16;
        v16 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      return;
    goto LABEL_18;
  }
}

void WebKit::RemoteCaptureSampleManager::setConnection(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebKit::WebProcess *v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 40) != *a2)
  {
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v30);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    v5 = (unsigned __int8 **)*((_QWORD *)v4 + 4);
    if (!v5)
    {
LABEL_14:
      v9 = *a2;
      if ((unsigned __int8 **)*a2 == v5)
      {
        if (*(_BYTE *)(a1 + 24))
          goto LABEL_38;
        *(_BYTE *)(a1 + 24) = 1;
        v13 = *(_QWORD *)(a1 + 32);
        v9 = (uint64_t)v5;
        goto LABEL_37;
      }
      if (*(_QWORD *)(a1 + 40))
      {
        IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(a1 + 40), 0x45u, 0);
        v9 = *a2;
      }
      *a2 = 0;
      v10 = *(unsigned __int8 ***)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      if (!v10)
      {
LABEL_35:
        if (!v9)
          goto LABEL_38;
        v13 = *(_QWORD *)(a1 + 32);
LABEL_37:
        IPC::Connection::addWorkQueueMessageReceiver(v9, 0x45u, v13, a1, 0);
LABEL_38:
        if (!v5)
          return;
        v20 = *v5;
        if (__ldaxr(*v5))
        {
          __clrex();
        }
        else if (!__stxr(1u, v20))
        {
          goto LABEL_43;
        }
        MEMORY[0x19AEABB3C](v20);
LABEL_43:
        v22 = *((_QWORD *)v20 + 1);
        v23 = v22 - 1;
        *((_QWORD *)v20 + 1) = v22 - 1;
        if (v22 == 1)
        {
          v28 = *((_QWORD *)v20 + 2);
          v25 = *((_QWORD *)v20 + 3);
          *((_QWORD *)v20 + 3) = 0;
          v24 = v28 == 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        v26 = __ldxr(v20);
        if (v26 == 1)
        {
          if (!__stlxr(0, v20))
          {
            if (v23)
              return;
LABEL_51:
            v27 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v27 = off_1E34ACA48;
            *(_QWORD *)(v27 + 8) = v20;
            *(_QWORD *)(v27 + 16) = v25;
            *(_BYTE *)(v27 + 24) = v24;
            v32 = v27;
            WTF::ensureOnMainRunLoop();
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        if (v23)
          return;
        goto LABEL_51;
      }
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_24;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_24:
      v14 = *((_QWORD *)v11 + 1);
      v15 = v14 - 1;
      *((_QWORD *)v11 + 1) = v14 - 1;
      if (v14 == 1)
      {
        v29 = *((_QWORD *)v11 + 2);
        v17 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v16 = v29 == 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v18 = __ldxr(v11);
      if (v18 == 1)
      {
        if (!__stlxr(0, v11))
        {
          if (!v15)
          {
LABEL_32:
            v19 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v19 = off_1E34ACA48;
            *(_QWORD *)(v19 + 8) = v11;
            *(_QWORD *)(v19 + 16) = v17;
            *(_BYTE *)(v19 + 24) = v16;
            v31 = v19;
            WTF::ensureOnMainRunLoop();
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          }
LABEL_34:
          v9 = *(_QWORD *)(a1 + 40);
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (!v15)
        goto LABEL_32;
      goto LABEL_34;
    }
    v6 = *v5;
    if (__ldaxr(*v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_9:
    ++*((_QWORD *)v6 + 1);
    v8 = __ldxr(v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_14;
  }
}

unsigned __int8 **WebKit::RemoteCaptureSampleManager::addSource(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **result;
  unsigned __int8 **v9;
  unsigned __int8 **v10;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(unsigned __int8 ***)(*a2 + 328));
  v4 = v9;
  v9 = 0;
  v10 = v4;
  WebKit::RemoteCaptureSampleManager::setConnection(a1, (uint64_t *)&v10);
  if (v10)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
  v5 = *(_QWORD *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v6 = *a2;
  *a2 = 0;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E34F2A30;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v6;
  v10 = (unsigned __int8 **)v7;
  (*(void (**)(uint64_t, unsigned __int8 ***))(*(_QWORD *)v5 + 32))(v5, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **result;
  unsigned __int8 **v9;
  unsigned __int8 **v10;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(unsigned __int8 ***)(*a2 + 328));
  v4 = v9;
  v9 = 0;
  v10 = v4;
  WebKit::RemoteCaptureSampleManager::setConnection(a1, (uint64_t *)&v10);
  if (v10)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
  v5 = *(_QWORD *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v6 = *a2;
  *a2 = 0;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E34F2A58;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v6;
  v10 = (unsigned __int8 **)v7;
  (*(void (**)(uint64_t, unsigned __int8 ***))(*(_QWORD *)v5 + 32))(v5, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

unsigned int *WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int *result;
  int v8;

  v4 = (unsigned __int8 *)(a1 + 64);
  if (__ldaxr((unsigned __int8 *)(a1 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 64);
LABEL_5:
  v6 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  if (result)
    result = WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(result);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebKit::RemoteCaptureSampleManager::audioStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, IPC::Semaphore *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WebCore::CARingBuffer *v17;
  uint64_t v18;
  WebCore::CARingBuffer *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int *v35;
  _BYTE buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 48);
  v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v12, a2);
  if (v12)
    v14 = v12 + 16 * *(unsigned int *)(v12 - 4);
  else
    v14 = 0;
  if (v14 == v13)
  {
    v23 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Unable to find source %llu for storageChanged", buf, 0xCu);
    }
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 8);
    WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread((unsigned int **)v15);
    v16 = *(WTF **)(v15 + 96);
    *(_QWORD *)(v15 + 96) = 0;
    if (v16)
      std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](v15 + 96, v16);
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a4, (WebCore::CARingBuffer **)buf);
    v17 = *(WebCore::CARingBuffer **)(v15 + 104);
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)(v15 + 104) = v18;
    if (v17)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v15 + 104, v17);
      v19 = *(WebCore::CARingBuffer **)buf;
      *(_QWORD *)buf = 0;
      if (v19)
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)buf, v19);
      v18 = *(_QWORD *)(v15 + 104);
    }
    if (v18)
    {
      IPC::Semaphore::operator=((IPC::Semaphore *)(v15 + 144), a5);
      if (*(_BYTE *)(v15 + 88))
      {
        v20 = *(_OWORD *)(a4 + 8);
        v21 = *(_OWORD *)(a4 + 24);
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(a4 + 40);
        *(_OWORD *)(v15 + 16) = v20;
        *(_OWORD *)(v15 + 32) = v21;
        v22 = *(_OWORD *)(a4 + 48);
        *(_QWORD *)(v15 + 72) = *(_QWORD *)(a4 + 64);
        *(_OWORD *)(v15 + 56) = v22;
        *(_DWORD *)(v15 + 80) = *(_DWORD *)(a4 + 72);
      }
      else
      {
        *(_QWORD *)(v15 + 8) = MEMORY[0x1E0DD8FD8] + 16;
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(a4 + 8);
        v24 = *(_OWORD *)(a4 + 24);
        v25 = *(_OWORD *)(a4 + 40);
        v26 = *(_OWORD *)(a4 + 56);
        *(_DWORD *)(v15 + 80) = *(_DWORD *)(a4 + 72);
        *(_OWORD *)(v15 + 48) = v25;
        *(_OWORD *)(v15 + 64) = v26;
        *(_OWORD *)(v15 + 32) = v24;
        *(_BYTE *)(v15 + 88) = 1;
      }
      v27 = *a6;
      *(_QWORD *)(v15 + 125) = *(uint64_t *)((char *)a6 + 5);
      *(_QWORD *)(v15 + 120) = v27;
      *(_QWORD *)(v15 + 136) = a7;
      WTF::fastMalloc((WTF *)0x48);
      v28 = WebCore::WebAudioBufferList::WebAudioBufferList();
      v29 = *(WTF **)(v15 + 96);
      *(_QWORD *)(v15 + 96) = v28;
      if (v29)
        std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](v15 + 96, v29);
      atomic_store(0, (unsigned __int8 *)(v15 + 160));
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v30 = off_1E34F2AA8;
      v30[1] = v15;
      v34 = v30;
      WTF::Thread::create();
      WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>((unsigned int **)(v15 + 152), &v35);
      v31 = v35;
      v35 = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          *(_QWORD *)buf = v31;
          WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF::Thread **)buf);
        }
      }
      if (v34)
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    }
  }
}

void WebKit::RemoteCaptureSampleManager::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 *)(a1 + 64);
  if (__ldaxr((unsigned __int8 *)(a1 + 64)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 64);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)buf, *(unsigned __int8 ***)(a1 + 40));
  v8 = *(unsigned __int8 ***)buf;
  v9 = *(unsigned int **)(a1 + 72);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = WTF::fastMalloc((WTF *)0x88);
  WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v11, v8, v9, a3);
  WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v9);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  v12 = __ldxr(v6);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v13, a2);
  if (v13)
    v15 = v13 + 16 * *(unsigned int *)(v13 - 4);
  else
    v15 = 0;
  if (v15 == v14)
  {
    v16 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "Unable to find source %llu for videoFrameAvailable", buf, 0xCu);
    }
  }
  else
  {
    WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(*(_QWORD *)(v14 + 8), (_OWORD *)v11);
  }
  v17 = (unsigned int *)(v11 + 8);
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(uint64_t a1, _OWORD *a2)
{
  double v4;
  double v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  IntSize v29;
  __int128 v30;

  v30 = a2[1];
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v30);
  v5 = v4;
  v6 = (unint64_t *)(a1 + 2856);
  v7 = *(_QWORD *)(a1 + 2856);
  v8 = *(_QWORD *)(a1 + 2864);
  if (!v7)
  {
    v9 = *(unsigned int *)(a1 + 2880);
    if (v8)
    {
      if (v8 != v9 - 1)
      {
        v7 = 0;
        goto LABEL_10;
      }
    }
    else if ((_DWORD)v9)
    {
      v7 = 0;
      v8 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v8 + 1 == v7)
  {
LABEL_9:
    WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)(a1 + 2856));
    v8 = *(_QWORD *)(a1 + 2864);
    v7 = *(_QWORD *)(a1 + 2856);
  }
LABEL_10:
  v10 = *(_QWORD *)(a1 + 2872);
  *(double *)(v10 + 8 * v8) = v5;
  v11 = *(unsigned int *)(a1 + 2880);
  if (v8 == v11 - 1)
    v12 = 0;
  else
    v12 = v8 + 1;
  *(_QWORD *)(a1 + 2864) = v12;
  if (v7 <= v12)
    v13 = 0;
  else
    v13 = v11;
  v14 = v13 + v12;
  v15 = v14 - v7;
  if (v14 != v7)
  {
    v16 = v5 + -2.0;
    while (1)
    {
      v17 = *v6;
      if (*v6 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19765C730);
      }
      v18 = *(double *)(v10 + 8 * v17);
      if (v17 == v11 - 1)
        v19 = 0;
      else
        v19 = v17 + 1;
      *v6 = v19;
      if (v16 >= v18)
        goto LABEL_36;
      if (v19)
        break;
      if (v12)
      {
        if (v12 != v11 - 1)
          goto LABEL_32;
LABEL_31:
        WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)(a1 + 2856));
        v12 = *(_QWORD *)(a1 + 2864);
        v10 = *(_QWORD *)(a1 + 2872);
        v11 = *(unsigned int *)(a1 + 2880);
        goto LABEL_32;
      }
      if (!v11)
        goto LABEL_31;
      v12 = 0;
LABEL_32:
      *(double *)(v10 + 8 * v12) = v18;
      if (v12 == v11 - 1)
        v12 = 0;
      else
        ++v12;
      *(_QWORD *)(a1 + 2864) = v12;
LABEL_36:
      if (!--v15)
      {
        v7 = *v6;
        goto LABEL_38;
      }
    }
    if (v12 + 1 != v19)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_38:
  if (v7 == v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19765C750);
  }
  if (v12)
    v20 = v12;
  else
    v20 = v11;
  v21 = *(double *)(v10 + 8 * v20 - 8) - *(double *)(v10 + 8 * v7);
  if (v21 > 1.0)
  {
    if (v7 <= v12)
      v11 = 0;
    *(double *)(a1 + 2888) = (double)(v12 + v11 - v7) / v21;
  }
  v22 = ceilf((*(float (**)(_OWORD *))(*(_QWORD *)a2 + 16))(a2));
  v24 = 0x7FFFFFFFLL;
  v25 = 0x80000000;
  if (v22 > -2147500000.0)
    v25 = (int)v22;
  if (v22 < 2147500000.0)
    v24 = v25;
  v26 = ceilf(v23);
  if (v26 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF00000000;
  }
  else if (v26 <= -2147500000.0)
  {
    v27 = 0x8000000000000000;
  }
  else
  {
    v27 = (unint64_t)(int)v26 << 32;
  }
  v29 = (IntSize)(v27 | v24);
  WebCore::RealtimeMediaSource::setIntrinsicSize((WebCore::RealtimeMediaSource *)a1, &v29);
  return WebCore::RealtimeMediaSource::videoFrameAvailable();
}

void WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 56);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, a2);
  v5 = v4;
  if (v3)
    v6 = v3 + 16 * *(unsigned int *)(v3 - 4);
  else
    v6 = 0;
  if (v6 == v4)
  {
    v10 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v13 = a2;
      _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "Unable to find source %llu for videoFrameAvailableCV", buf, 0xCu);
    }
  }
  else
  {
    buf[0] = 0;
    BYTE4(v13) = 0;
    WebCore::VideoFrameCV::create();
    WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(*(_QWORD *)(v5 + 8), (_OWORD *)v11);
    if (v11)
    {
      v7 = (unsigned int *)(v11 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v11 + 8));
        (*(void (**)())(*(_QWORD *)v11 + 8))();
      }
    }
  }
}

void WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio(unsigned int **this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::CARingBuffer *v5;
  WTF *v6;
  unsigned int *v7;
  WTF::Thread *v8;

  WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread(this);
  v2 = this[19];
  this[19] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v8 = (WTF::Thread *)v2;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
    }
  }
  IPC::Semaphore::destroy((IPC::Semaphore *)(this + 18));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 18));
  v5 = (WebCore::CARingBuffer *)this[13];
  this[13] = 0;
  if (v5)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 104, v5);
  v6 = (WTF *)this[12];
  this[12] = 0;
  if (v6)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 96, v6);
  if (*((_BYTE *)this + 88))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)(this + 1));
  v7 = *this;
  *this = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*((unsigned __int8 **)v7 + 39));
}

unsigned int **WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread(unsigned int **this)
{
  unsigned int **v1;
  unsigned int **v2;

  v1 = this + 19;
  if (this[19])
  {
    v2 = this;
    atomic_store(1u, (unsigned __int8 *)this + 160);
    MEMORY[0x19AEBA1A0](*((unsigned int *)this + 37));
    WTF::Thread::waitForCompletion((WTF::Thread *)v2[19]);
    return WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=(v1);
  }
  return this;
}

_QWORD *WebKit::RemoteRealtimeAudioSource::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;

  v12 = WTF::fastMalloc((WTF *)0xB28);
  v13 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(v12, v13, a1, a2, a3, a4, a5);
  *(_QWORD *)v12 = off_1E34F2428;
  *(_QWORD *)(v12 + 304) = &unk_1E34F25E0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 312));
  v15 = v12;
  WebKit::UserMediaCaptureManager::addSource(a4, &v15);
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 312));
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 312));
  v15 = v12;
  WebKit::RemoteCaptureSampleManager::addSource(a4 + 144, &v15);
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 312));
  result = WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((unsigned __int8 **)v12);
  *a6 = v12;
  return result;
}

_QWORD *WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(unsigned __int8 **this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  char v5;
  os_unfair_lock_s *v6;
  _QWORD *result;
  _QWORD *v8;
  unsigned __int8 *v9;
  _QWORD v10[4];
  char v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;

  v2 = WebCore::RealtimeMediaSource::deviceIDHashSalts((WebCore::RealtimeMediaSource *)this);
  v3 = this[9];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 39);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34F2AD0;
  v4[1] = this;
  v4[2] = this;
  v8 = v4;
  v5 = *((_BYTE *)this + 376);
  if (v5)
    v5 = this[178][224] != 0;
  v13 = v3;
  v6 = (os_unfair_lock_s *)this[41];
  v9 = this[40];
  v10[0] = &v9;
  v10[1] = this + 42;
  v10[2] = v2;
  v10[3] = this + 48;
  v11 = v5;
  v12 = &v13;
  IPC::Connection::sendWithAsyncReply<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(v6, (uint64_t)v10, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;

  *(_QWORD *)(WebCore::RealtimeMediaSource::RealtimeMediaSource() + 304) = off_1E34E6488;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v13 = 0;
  *(_OWORD *)(v13 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v13 + 24) = a1;
  *(_QWORD *)a1 = off_1E34F2620;
  *(_QWORD *)(a1 + 304) = &unk_1E34F27D8;
  *(_QWORD *)(a1 + 312) = v13;
  WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy(a1 + 320, a2, a3, a7, a4);
  *(_QWORD *)(a1 + 1424) = a6;
  *(_BYTE *)(a1 + 1432) = 0;
  *(_BYTE *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_BYTE *)(a1 + 2504) = 0;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_QWORD *)(a1 + 2590) = 0;
  *(_BYTE *)(a1 + 2600) = 0;
  *(_BYTE *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2757) = 0;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_QWORD *)(a1 + 2776) = 0;
  *(_QWORD *)(a1 + 2768) = 0;
  *(_BYTE *)(a1 + 2784) = 0;
  *(_QWORD *)(a1 + 2808) = 0;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_WORD *)(a1 + 2816) = 4;
  *(_BYTE *)(a1 + 2818) = 0;
  *(_QWORD *)(a1 + 2824) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2846) = 0;
  *(_QWORD *)(a1 + 2832) = 0;
  *(_QWORD *)(a1 + 2840) = 0;
  return a1;
}

void WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(WebKit::RemoteRealtimeMediaSource *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E34F2620;
  *((_QWORD *)this + 38) = &unk_1E34F27D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*((_BYTE *)this + 2744))
  {
    if (*((_BYTE *)this + 2736))
    {
      v6 = (WTF *)*((_QWORD *)this + 340);
      if (v6)
      {
        *((_QWORD *)this + 340) = 0;
        *((_DWORD *)this + 682) = 0;
        WTF::fastFree(v6, a2);
      }
    }
  }
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebKit::RemoteRealtimeMediaSource *)((char *)this + 2408), a2);
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1432, v7);
  WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy((unsigned __int8 ***)this + 40);
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteRealtimeAudioSource::~RemoteRealtimeAudioSource(WebKit::RemoteRealtimeAudioSource *this, WTF::StringImpl *a2)
{
  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeAudioSource *)((char *)this - 304), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeAudioSource *)((char *)this - 304), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::RemoteRealtimeAudioSource::~RemoteRealtimeAudioSource(WebKit::RemoteRealtimeAudioSource *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteRealtimeAudioSource::setIsInBackground(WebKit::RemoteRealtimeAudioSource *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v3 = *((_QWORD *)this + 41);
  v9 = *((_QWORD *)this + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1470;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

__n128 WebKit::RemoteRealtimeMediaSource::setCapabilities(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;

  v4 = a1 + 2408;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 2424) = a2[1];
  *(_OWORD *)(a1 + 2440) = v6;
  *(_OWORD *)(a1 + 2408) = v5;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 2456), (uint64_t)(a2 + 3));
  v7 = *((_BYTE *)a2 + 96);
  v8 = a2[5];
  *(_OWORD *)(v4 + 64) = a2[4];
  *(_OWORD *)(v4 + 80) = v8;
  *(_BYTE *)(a1 + 2504) = v7;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2512), (WTF::StringImpl *)((char *)a2 + 104));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2520), (WTF::StringImpl *)(a2 + 7));
  *(_OWORD *)(a1 + 2528) = *(__int128 *)((char *)a2 + 120);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 2544), (uint64_t)a2 + 136);
  v9 = *(_QWORD *)((char *)a2 + 182);
  result = *(__n128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 2560) = *(__int128 *)((char *)a2 + 152);
  *(__n128 *)(a1 + 2576) = result;
  *(_QWORD *)(v4 + 182) = v9;
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::setSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v4 = a1 + 2752;
  WebCore::RealtimeMediaSourceSettings::difference();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2752) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 2768) = v6;
  *(_BYTE *)(a1 + 2784) = v5;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2792), (WTF::StringImpl *)(a2 + 40));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2800), (WTF::StringImpl *)(a2 + 48));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2808), (WTF::StringImpl *)(a2 + 56));
  v7 = *(_QWORD *)(a2 + 94);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 2832) = v8;
  *(_QWORD *)(v4 + 94) = v7;
  return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers();
}

uint64_t *WebKit::RemoteRealtimeMediaSource::takePhoto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  IPC::Encoder *v24;
  __int128 v25;
  __int128 v26;

  v5 = *(os_unfair_lock_s **)(a1 + 328);
  v19 = *(_QWORD *)(a1 + 320);
  v24 = 0;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v26 = 0;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v21, 0, (WTF::Logger::LogSiteIdentifier *)&v24);
  v6 = v21;
  if (v21)
  {
    v7 = (unsigned int *)(v21 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v21;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v21 = 0;
  v25 = v22;
  v26 = v23;
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = off_1E34F2B98;
  *(_QWORD *)(v10 + 8) = v9;
  v24 = 0;
  v11 = v26;
  *(_OWORD *)(v10 + 16) = v25;
  *(_OWORD *)(v10 + 32) = v11;
  v20[0] = v10;
  v20[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v24);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1474;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v24 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v19);
  IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode((IPC::Encoder *)v12, a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v5, &v24, v20, 0, 0);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v15, v16);
  }
  v17 = v20[0];
  v20[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v21);
}

uint64_t *WebKit::RemoteRealtimeMediaSource::getPhotoCapabilities@<X0>(WebKit::RemoteRealtimeMediaSource *this@<X0>, WTF **a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  _BYTE *v30;
  int v31;
  WTF *v32;
  unsigned int *v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  WTF *v47;
  __int128 v48;
  __int128 v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _BYTE buf[24];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = (os_unfair_lock_s *)*((_QWORD *)this + 41);
  v44 = *((_QWORD *)this + 40);
  v45 = 0uLL;
  *(_QWORD *)&v46 = "sendWithPromisedReply";
  *((_QWORD *)&v46 + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34F2BE8;
  v5 = v46;
  *(_OWORD *)(v4 + 16) = v45;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  v6 = (unsigned __int8 *)(v4 + 48);
  *(_DWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 224) = v4 + 240;
  *(_QWORD *)(v4 + 232) = 1;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_WORD *)(v4 + 264) = 0;
  v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v51, "creating ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v50);
      *(_QWORD *)buf = v51;
      v47 = v50;
      result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v47, &v52);
      if (!v52)
      {
        __break(0xC471u);
        return result;
      }
      v11 = v50;
      v50 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v51;
      v51 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *((_QWORD *)v8 + 4);
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v14)
      {
        WTF::String::utf8();
        v16 = v47 ? (char *)v47 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v14 = (uint64_t)v47;
        v47 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            v14 = WTF::fastFree((WTF *)v14, v15);
          else
            --*(_DWORD *)v14;
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v18 = *v17;
          if ((v18 & 1) != 0)
            break;
          v19 = __ldaxr(v17);
          if (v19 == v18)
          {
            if (!__stxr(v18 | 1, v17))
            {
              v20 = WTF::Logger::observers((WTF::Logger *)v14);
              v21 = *(unsigned int *)(v20 + 12);
              if ((_DWORD)v21)
              {
                v22 = *(uint64_t **)v20;
                v23 = *(_QWORD *)v20 + 8 * v21;
                do
                {
                  v24 = *v22;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v54);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v47, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, v8, 4, &v47);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v25);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v27 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2)
                        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v27 -= 2;
                    }
                  }
                  ++v22;
                }
                while (v22 != (uint64_t *)v23);
              }
              v28 = __ldxr(v17);
              if (v28 == 1)
              {
                if (!__stlxr(0, v17))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v7 = (unsigned __int8 *)v52;
      v52 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v47 = (WTF *)v4;
  v48 = v45;
  v49 = v46;
  if (__ldaxr(v6))
  {
    __clrex();
LABEL_49:
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v6);
    goto LABEL_50;
  }
  if (__stxr(1u, v6))
    goto LABEL_49;
LABEL_50:
  v30 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v30 && v30[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v30, (WTF::Logger::LogSiteIdentifier *)&v45, " runSynchronouslyOnTarget ", v4);
  atomic_store(0, (unsigned __int8 *)(v4 + 265));
  v31 = __ldxr(v6);
  if (v31 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_58:
  v32 = v47;
  if (v47)
  {
    v33 = (unsigned int *)((char *)v47 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = v47;
  }
  else
  {
    v35 = 0;
  }
  *a2 = v32;
  v47 = 0;
  *(_OWORD *)&buf[8] = v48;
  v54 = v49;
  v36 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v36 = off_1E34F2C38;
  *(_QWORD *)(v36 + 8) = v35;
  *(_QWORD *)buf = 0;
  v37 = v54;
  *(_OWORD *)(v36 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v36 + 32) = v37;
  *(_QWORD *)&v45 = v36;
  *((_QWORD *)&v45 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)buf);
  v38 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v38 = 1467;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 528) = v38 + 16;
  *(_QWORD *)(v38 + 536) = v38 + 16;
  *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v38 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
  *(_QWORD *)buf = v38;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v38, &v44);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)buf, (uint64_t *)&v45, 0, 0);
  v40 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v39);
    WTF::fastFree(v41, v42);
  }
  v43 = v45;
  *(_QWORD *)&v45 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  return WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v47);
}

uint64_t *WebKit::RemoteRealtimeMediaSource::getPhotoSettings@<X0>(WebKit::RemoteRealtimeMediaSource *this@<X0>, WTF **a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  _BYTE *v30;
  int v31;
  WTF *v32;
  unsigned int *v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  WTF *v47;
  __int128 v48;
  __int128 v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _BYTE buf[24];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = (os_unfair_lock_s *)*((_QWORD *)this + 41);
  v44 = *((_QWORD *)this + 40);
  v45 = 0uLL;
  *(_QWORD *)&v46 = "sendWithPromisedReply";
  *((_QWORD *)&v46 + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34F2CC0;
  v5 = v46;
  *(_OWORD *)(v4 + 16) = v45;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  v6 = (unsigned __int8 *)(v4 + 48);
  *(_DWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = v4 + 144;
  *(_QWORD *)(v4 + 136) = 1;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_WORD *)(v4 + 168) = 0;
  v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v51, "creating ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v50);
      *(_QWORD *)buf = v51;
      v47 = v50;
      result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v47, &v52);
      if (!v52)
      {
        __break(0xC471u);
        return result;
      }
      v11 = v50;
      v50 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v51;
      v51 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *((_QWORD *)v8 + 4);
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v14)
      {
        WTF::String::utf8();
        v16 = v47 ? (char *)v47 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v14 = (uint64_t)v47;
        v47 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            v14 = WTF::fastFree((WTF *)v14, v15);
          else
            --*(_DWORD *)v14;
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v18 = *v17;
          if ((v18 & 1) != 0)
            break;
          v19 = __ldaxr(v17);
          if (v19 == v18)
          {
            if (!__stxr(v18 | 1, v17))
            {
              v20 = WTF::Logger::observers((WTF::Logger *)v14);
              v21 = *(unsigned int *)(v20 + 12);
              if ((_DWORD)v21)
              {
                v22 = *(uint64_t **)v20;
                v23 = *(_QWORD *)v20 + 8 * v21;
                do
                {
                  v24 = *v22;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v54);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v47, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, v8, 4, &v47);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v25);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v27 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2)
                        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v27 -= 2;
                    }
                  }
                  ++v22;
                }
                while (v22 != (uint64_t *)v23);
              }
              v28 = __ldxr(v17);
              if (v28 == 1)
              {
                if (!__stlxr(0, v17))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v7 = (unsigned __int8 *)v52;
      v52 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v47 = (WTF *)v4;
  v48 = v45;
  v49 = v46;
  if (__ldaxr(v6))
  {
    __clrex();
LABEL_49:
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v6);
    goto LABEL_50;
  }
  if (__stxr(1u, v6))
    goto LABEL_49;
LABEL_50:
  v30 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v30 && v30[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v30, (WTF::Logger::LogSiteIdentifier *)&v45, " runSynchronouslyOnTarget ", v4);
  atomic_store(0, (unsigned __int8 *)(v4 + 169));
  v31 = __ldxr(v6);
  if (v31 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_58:
  v32 = v47;
  if (v47)
  {
    v33 = (unsigned int *)((char *)v47 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = v47;
  }
  else
  {
    v35 = 0;
  }
  *a2 = v32;
  v47 = 0;
  *(_OWORD *)&buf[8] = v48;
  v54 = v49;
  v36 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v36 = off_1E34F2D10;
  *(_QWORD *)(v36 + 8) = v35;
  *(_QWORD *)buf = 0;
  v37 = v54;
  *(_OWORD *)(v36 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v36 + 32) = v37;
  *(_QWORD *)&v45 = v36;
  *((_QWORD *)&v45 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)buf);
  v38 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v38 = 1468;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 528) = v38 + 16;
  *(_QWORD *)(v38 + 536) = v38 + 16;
  *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v38 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
  *(_QWORD *)buf = v38;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v38, &v44);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)buf, (uint64_t *)&v45, 0, 0);
  v40 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v39);
    WTF::fastFree(v41, v42);
  }
  v43 = v45;
  *(_QWORD *)&v45 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  return WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v47);
}

uint64_t WebKit::RemoteRealtimeMediaSource::configurationChanged(WTF::StringImpl **a1, const WTF::String *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WebCore::RealtimeMediaSource::setPersistentId((WebCore::RealtimeMediaSource *)a1, a2);
  WebKit::RemoteRealtimeMediaSource::setSettings((uint64_t)a1, a3);
  WebKit::RemoteRealtimeMediaSource::setCapabilities((uint64_t)a1, a4);
  WTF::String::operator=(a1 + 15, (WTF::StringImpl *)(a1 + 351));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34F2AF8;
  v9 = v7;
  WebCore::RealtimeMediaSource::forEachObserver();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsSucceeded(WebKit::RemoteRealtimeMediaSourceProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _DWORD *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t result;
  _BYTE v29[8];
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  char v33;
  _OWORD v34[2];
  unsigned __int8 v35;
  char v36;
  _OWORD v37[2];
  unsigned __int8 v38;
  char v39;
  _OWORD v40[2];
  unsigned __int8 v41;
  char v42;
  _OWORD v43[2];
  unsigned __int8 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  unsigned __int8 v49;
  char v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  unsigned __int8 v54;
  char v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  unsigned __int8 v59;
  char v60;
  int v61;
  unsigned __int8 v62;
  char v63;
  int v64;
  unsigned __int8 v65;
  char v66;
  int v67;
  unsigned __int8 v68;
  _BYTE v69[56];
  _BYTE v70[56];
  _BYTE v71[56];
  _BYTE v72[64];
  char v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  unsigned __int8 v77;
  char v78;
  int v79;
  unsigned __int8 v80;
  char v81;
  int v82;
  unsigned __int8 v83;
  char v84;
  int v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;

  v1 = *((_QWORD *)this + 129);
  if (v1 == *((_QWORD *)this + 130))
  {
    __break(0xC471u);
    goto LABEL_104;
  }
  std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)&v32, (uint64_t *)(*((_QWORD *)this + 131) + 976 * v1));
  v3 = *((_QWORD *)this + 129);
  if (v3 == *((_QWORD *)this + 130))
  {
    __break(0xC471u);
LABEL_104:
    JUMPOUT(0x19765E430);
  }
  WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(*((_QWORD *)this + 131) + 976 * v3, (uint64_t *)(*((_QWORD *)this + 131) + 976 * v3 + 976));
  v4 = *((_QWORD *)this + 129);
  if (v4 == *((unsigned int *)this + 264) - 1)
    v5 = 0;
  else
    v5 = v4 + 1;
  *((_QWORD *)this + 129) = v5;
  if (*((unsigned __int8 *)this + 112) == v35)
  {
    if (*((_BYTE *)this + 112))
    {
      *((_BYTE *)this + 72) = v33;
      *(_OWORD *)((char *)this + 76) = v34[0];
      *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v34 + 13);
    }
  }
  else if (*((_BYTE *)this + 112))
  {
    *((_BYTE *)this + 112) = 0;
  }
  else
  {
    *((_BYTE *)this + 72) = v33;
    *(_OWORD *)((char *)this + 76) = v34[0];
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v34 + 13);
    *((_QWORD *)this + 8) = &off_1E34ADA60;
    *((_BYTE *)this + 112) = 1;
  }
  if (*((unsigned __int8 *)this + 168) == v38)
  {
    if (*((_BYTE *)this + 168))
    {
      *((_BYTE *)this + 128) = v36;
      *(_OWORD *)((char *)this + 132) = v37[0];
      *(_OWORD *)((char *)this + 145) = *(_OWORD *)((char *)v37 + 13);
    }
  }
  else if (*((_BYTE *)this + 168))
  {
    *((_BYTE *)this + 168) = 0;
  }
  else
  {
    *((_BYTE *)this + 128) = v36;
    *(_OWORD *)((char *)this + 132) = v37[0];
    *(_OWORD *)((char *)this + 145) = *(_OWORD *)((char *)v37 + 13);
    *((_QWORD *)this + 15) = &off_1E34ADA60;
    *((_BYTE *)this + 168) = 1;
  }
  if (*((unsigned __int8 *)this + 224) == v41)
  {
    if (*((_BYTE *)this + 224))
    {
      *((_BYTE *)this + 184) = v39;
      *(_OWORD *)((char *)this + 188) = v40[0];
      *(_OWORD *)((char *)this + 201) = *(_OWORD *)((char *)v40 + 13);
    }
  }
  else if (*((_BYTE *)this + 224))
  {
    *((_BYTE *)this + 224) = 0;
  }
  else
  {
    *((_BYTE *)this + 184) = v39;
    *(_OWORD *)((char *)this + 188) = v40[0];
    *(_OWORD *)((char *)this + 201) = *(_OWORD *)((char *)v40 + 13);
    *((_QWORD *)this + 22) = &off_1E34ADA60;
    *((_BYTE *)this + 224) = 1;
  }
  if (*((unsigned __int8 *)this + 280) == v44)
  {
    if (*((_BYTE *)this + 280))
    {
      *((_BYTE *)this + 240) = v42;
      *(_OWORD *)((char *)this + 244) = v43[0];
      *(_OWORD *)((char *)this + 257) = *(_OWORD *)((char *)v43 + 13);
    }
  }
  else if (*((_BYTE *)this + 280))
  {
    *((_BYTE *)this + 280) = 0;
  }
  else
  {
    *((_BYTE *)this + 240) = v42;
    *(_OWORD *)((char *)this + 244) = v43[0];
    *(_OWORD *)((char *)this + 257) = *(_OWORD *)((char *)v43 + 13);
    *((_QWORD *)this + 29) = &off_1E34ADA60;
    *((_BYTE *)this + 280) = 1;
  }
  if (*((unsigned __int8 *)this + 368) == v49)
  {
    if (*((_BYTE *)this + 368))
    {
      *((_BYTE *)this + 296) = v45;
      v6 = v47;
      v7 = v48[0];
      *((_OWORD *)this + 19) = v46;
      *((_OWORD *)this + 20) = v6;
      *((_OWORD *)this + 21) = v7;
      *(_OWORD *)((char *)this + 345) = *(_OWORD *)((char *)v48 + 9);
    }
  }
  else if (*((_BYTE *)this + 368))
  {
    *((_BYTE *)this + 368) = 0;
  }
  else
  {
    v8 = v47;
    v9 = v48[0];
    *((_OWORD *)this + 19) = v46;
    *((_OWORD *)this + 20) = v8;
    *((_BYTE *)this + 296) = v45;
    *((_OWORD *)this + 21) = v9;
    *(_OWORD *)((char *)this + 345) = *(_OWORD *)((char *)v48 + 9);
    *((_QWORD *)this + 36) = &off_1E34ADAB0;
    *((_BYTE *)this + 368) = 1;
  }
  if (*((unsigned __int8 *)this + 456) == v54)
  {
    if (*((_BYTE *)this + 456))
    {
      *((_BYTE *)this + 384) = v50;
      v10 = v52;
      *(_OWORD *)((char *)this + 392) = v51;
      *(_OWORD *)((char *)this + 408) = v10;
      *(_OWORD *)((char *)this + 424) = v53[0];
      *(_OWORD *)((char *)this + 433) = *(_OWORD *)((char *)v53 + 9);
    }
  }
  else if (*((_BYTE *)this + 456))
  {
    *((_BYTE *)this + 456) = 0;
  }
  else
  {
    *((_BYTE *)this + 384) = v50;
    v11 = v52;
    *(_OWORD *)((char *)this + 392) = v51;
    *(_OWORD *)((char *)this + 408) = v11;
    *(_OWORD *)((char *)this + 424) = v53[0];
    *(_OWORD *)((char *)this + 433) = *(_OWORD *)((char *)v53 + 9);
    *((_QWORD *)this + 47) = &off_1E34ADAB0;
    *((_BYTE *)this + 456) = 1;
  }
  if (*((unsigned __int8 *)this + 544) == v59)
  {
    if (*((_BYTE *)this + 544))
    {
      *((_BYTE *)this + 472) = v55;
      v12 = v57;
      *((_OWORD *)this + 30) = v56;
      *((_OWORD *)this + 31) = v12;
      *((_OWORD *)this + 32) = v58[0];
      *(_OWORD *)((char *)this + 521) = *(_OWORD *)((char *)v58 + 9);
    }
  }
  else if (*((_BYTE *)this + 544))
  {
    *((_BYTE *)this + 544) = 0;
  }
  else
  {
    *((_BYTE *)this + 472) = v55;
    v13 = v57;
    *((_OWORD *)this + 30) = v56;
    *((_OWORD *)this + 31) = v13;
    *((_OWORD *)this + 32) = v58[0];
    *(_OWORD *)((char *)this + 521) = *(_OWORD *)((char *)v58 + 9);
    *((_QWORD *)this + 58) = &off_1E34ADAB0;
    *((_BYTE *)this + 544) = 1;
  }
  v14 = (_DWORD *)((char *)this + 561);
  if (*((unsigned __int8 *)this + 568) == v62)
  {
    if (*((_BYTE *)this + 568))
    {
      *((_BYTE *)this + 560) = v60;
      *v14 = v61;
    }
  }
  else if (*((_BYTE *)this + 568))
  {
    *((_BYTE *)this + 568) = 0;
  }
  else
  {
    *((_BYTE *)this + 560) = v60;
    *((_QWORD *)this + 69) = &off_1E34ADB00;
    *v14 = v61;
    *((_BYTE *)this + 568) = 1;
  }
  if (*((unsigned __int8 *)this + 592) == v65)
  {
    if (*((_BYTE *)this + 592))
    {
      *((_BYTE *)this + 584) = v63;
      *(_DWORD *)((char *)this + 585) = v64;
    }
  }
  else if (*((_BYTE *)this + 592))
  {
    *((_BYTE *)this + 592) = 0;
  }
  else
  {
    *((_BYTE *)this + 584) = v63;
    *((_QWORD *)this + 72) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 585) = v64;
    *((_BYTE *)this + 592) = 1;
  }
  if (*((unsigned __int8 *)this + 616) == v68)
  {
    if (*((_BYTE *)this + 616))
    {
      *((_BYTE *)this + 608) = v66;
      *(_DWORD *)((char *)this + 609) = v67;
    }
  }
  else if (*((_BYTE *)this + 616))
  {
    *((_BYTE *)this + 616) = 0;
  }
  else
  {
    *((_BYTE *)this + 608) = v66;
    *((_QWORD *)this + 75) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 609) = v67;
    *((_BYTE *)this + 616) = 1;
  }
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WebKit::RemoteRealtimeMediaSourceProxy *)((char *)this + 624), (uint64_t)v69);
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WebKit::RemoteRealtimeMediaSourceProxy *)((char *)this + 680), (uint64_t)v70);
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WebKit::RemoteRealtimeMediaSourceProxy *)((char *)this + 736), (uint64_t)v71);
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WebKit::RemoteRealtimeMediaSourceProxy *)((char *)this + 792), (uint64_t)v72);
  if (*((unsigned __int8 *)this + 928) == v77)
  {
    if (*((_BYTE *)this + 928))
    {
      *((_BYTE *)this + 856) = v73;
      v16 = v75;
      *((_OWORD *)this + 54) = v74;
      *((_OWORD *)this + 55) = v16;
      *((_OWORD *)this + 56) = v76[0];
      *(_OWORD *)((char *)this + 905) = *(_OWORD *)((char *)v76 + 9);
    }
  }
  else if (*((_BYTE *)this + 928))
  {
    *((_BYTE *)this + 928) = 0;
  }
  else
  {
    *((_BYTE *)this + 856) = v73;
    v17 = v75;
    *((_OWORD *)this + 54) = v74;
    *((_OWORD *)this + 55) = v17;
    *((_OWORD *)this + 56) = v76[0];
    *(_OWORD *)((char *)this + 905) = *(_OWORD *)((char *)v76 + 9);
    *((_QWORD *)this + 106) = &off_1E34ADAB0;
    *((_BYTE *)this + 928) = 1;
  }
  if (*((unsigned __int8 *)this + 952) == v80)
  {
    if (*((_BYTE *)this + 952))
    {
      *((_BYTE *)this + 944) = v78;
      *(_DWORD *)((char *)this + 945) = v79;
    }
  }
  else if (*((_BYTE *)this + 952))
  {
    *((_BYTE *)this + 952) = 0;
  }
  else
  {
    *((_BYTE *)this + 944) = v78;
    *((_QWORD *)this + 117) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 945) = v79;
    *((_BYTE *)this + 952) = 1;
  }
  if (*((unsigned __int8 *)this + 976) == v83)
  {
    if (*((_BYTE *)this + 976))
    {
      *((_BYTE *)this + 968) = v81;
      *(_DWORD *)((char *)this + 969) = v82;
    }
  }
  else if (*((_BYTE *)this + 976))
  {
    *((_BYTE *)this + 976) = 0;
  }
  else
  {
    *((_BYTE *)this + 968) = v81;
    *((_QWORD *)this + 120) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 969) = v82;
    *((_BYTE *)this + 976) = 1;
  }
  if (*((unsigned __int8 *)this + 1000) == v86)
  {
    if (*((_BYTE *)this + 1000))
    {
      *((_BYTE *)this + 992) = v84;
      *(_DWORD *)((char *)this + 993) = v85;
    }
  }
  else if (*((_BYTE *)this + 1000))
  {
    *((_BYTE *)this + 1000) = 0;
  }
  else
  {
    *((_BYTE *)this + 992) = v84;
    *((_QWORD *)this + 123) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 993) = v85;
    *((_BYTE *)this + 1000) = 1;
  }
  v18 = *((_DWORD *)this + 255);
  if (v18)
    WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*((_QWORD *)this + 126), (char *)(*((_QWORD *)this + 126) + 944 * v18));
  v19 = (WTF *)*((_QWORD *)this + 126);
  if (v19)
  {
    *((_QWORD *)this + 126) = 0;
    *((_DWORD *)this + 254) = 0;
    WTF::fastFree(v19, v15);
  }
  v20 = v32;
  *((_QWORD *)this + 126) = v87;
  *((_BYTE *)this + 1024) = v89;
  v21 = v88;
  v88 = 0;
  *((_QWORD *)this + 127) = v21;
  v29[0] = 0;
  v31 = 0;
  v87 = 0;
  v32 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v31)
  {
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v22);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v72, v24);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v71, v25);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v70, v26);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v27);
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::didEnd(IPC::Encoder *this)
{
  IPC::Encoder *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  IPC::Encoder *v14;

  if (!*((_BYTE *)this + 1417))
  {
    v1 = this;
    v2 = (uint64_t *)((char *)this + 320);
    *((_BYTE *)this + 1417) = 1;
    v3 = *((_QWORD *)this + 41);
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1469;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v14 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, v2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v14, 0, 0);
    v6 = v14;
    v14 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    WebKit::UserMediaCaptureManager::removeSource(*((_QWORD *)v1 + 178), *((_QWORD *)v1 + 40));
    v9 = *((_QWORD *)v1 + 178);
    v10 = v9 + 144;
    v11 = *((_QWORD *)v1 + 40);
    v12 = *(_QWORD *)(v9 + 176);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v9 + 160));
    v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E34F2A80;
    *((_QWORD *)v13 + 1) = v10;
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = v11;
    v14 = v13;
    (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v12 + 32))(v12, &v14);
    this = v14;
    v14 = 0;
    if (this)
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::applyConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2, IPC::Encoder **a3)
{
  std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>((WebCore::MediaTrackConstraintSetMap *)(a1 + 1432), a2);
  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints(a1 + 320, a2, a3);
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2, IPC::Encoder **a3)
{
  IPC::Encoder *v5;
  IPC::Encoder *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  IPC::Encoder *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  void *v32;
  IPC::Encoder *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v5 = *a3;
  *a3 = 0;
  v33 = v5;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)&v34, a2);
  result = (IPC::Encoder *)WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v39, (uint64_t)a2 + 944);
  v39[16] = *((_BYTE *)a2 + 960);
  v7 = *(_QWORD *)(a1 + 1032);
  v8 = *(_QWORD *)(a1 + 1040);
  if (!v7)
  {
    v9 = *(unsigned int *)(a1 + 1056);
    if (v8)
    {
      if (v8 != v9 - 1)
        goto LABEL_20;
    }
    else if ((_DWORD)v9)
    {
      v8 = 0;
      goto LABEL_20;
    }
LABEL_9:
    v10 = v9;
    v11 = ((unint64_t)v9 >> 2) + v9;
    if (v11 <= 0xF)
      v11 = 15;
    if (v11 >= 0x4325C5)
    {
      __break(0xC471u);
      return result;
    }
    v12 = *(WTF **)(a1 + 1048);
    v13 = 976 * v11 + 976;
    v14 = WTF::fastMalloc((WTF *)(976 * v11 + 976));
    *(_DWORD *)(a1 + 1056) = (v13 & 0xFFFFFFF0) / 0x3D0;
    *(_QWORD *)(a1 + 1048) = v14;
    v15 = *(_QWORD *)(a1 + 1032);
    v16 = *(_QWORD *)(a1 + 1040);
    if (v15 <= v16)
    {
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12 + 976 * v15, (uint64_t)v12 + 976 * v16, v14 + 976 * v15);
      if (!v12)
      {
LABEL_19:
        v8 = *(_QWORD *)(a1 + 1040);
        goto LABEL_20;
      }
    }
    else
    {
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12, (uint64_t)v12 + 976 * v16, v14);
      v17 = *(_QWORD *)(a1 + 1032);
      v18 = v17 - v10 + *(unsigned int *)(a1 + 1056);
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12 + 976 * v17, (uint64_t)v12 + 976 * v10, *(_QWORD *)(a1 + 1048) + 976 * v18);
      *(_QWORD *)(a1 + 1032) = v18;
      if (!v12)
        goto LABEL_19;
    }
    if (*(WTF **)(a1 + 1048) == v12)
    {
      *(_QWORD *)(a1 + 1048) = 0;
      *(_DWORD *)(a1 + 1056) = 0;
    }
    WTF::fastFree(v12, v19);
    goto LABEL_19;
  }
  if (v8 + 1 == v7)
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 1056);
    goto LABEL_9;
  }
LABEL_20:
  std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](*(_QWORD *)(a1 + 1048) + 976 * v8, (uint64_t *)&v33);
  v21 = *(_QWORD *)(a1 + 1040);
  if (v21 == *(unsigned int *)(a1 + 1056) - 1)
    v22 = 0;
  else
    v22 = v21 + 1;
  *(_QWORD *)(a1 + 1040) = v22;
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v20);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v23);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v24);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v25);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v26);
  v27 = v33;
  v33 = 0;
  if (v27)
    (*(void (**)(IPC::Encoder *))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a1 + 8);
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 1463;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v33 = (IPC::Encoder *)v29;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v29, (uint64_t *)a1);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode((IPC::Encoder *)v29, a2);
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v30);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(IPC::Encoder *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t *v15[2];
  unsigned __int8 **v16;

  if (*((_BYTE *)this + 294))
    return this;
  v2 = (uint64_t)this;
  WebKit::getSourceConnection(&v16, *((unsigned __int8 *)this + 376));
  v3 = v16;
  v16 = 0;
  v4 = *(uint64_t **)(v2 + 328);
  *(_QWORD *)(v2 + 328) = v3;
  v15[0] = v4;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v15);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
  v5 = *(_QWORD *)(v2 + 1424) + 144;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, *(unsigned __int8 ***)(v2 + 328));
  v6 = (uint64_t *)v16;
  v7 = *v16;
  if (__ldaxr(*v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v7);
LABEL_6:
  ++*((_QWORD *)v7 + 1);
  v9 = __ldxr(v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_11:
  v15[0] = v6;
  WebKit::RemoteCaptureSampleManager::setConnection(v5, (uint64_t *)v15);
  if (v15[0])
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v15[0]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
  *(_BYTE *)(v2 + 1384) = 0;
  WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((unsigned __int8 **)v2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (WTF::StringImpl *)v15[0];
  v16 = (unsigned __int8 **)v15[0];
  WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks((WebKit::RemoteRealtimeMediaSourceProxy *)(v2 + 320), (WTF::StringImpl **)&v16);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(_BYTE *)(v2 + 2400))
  {
    v12 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v12 = (uint64_t)off_1E34F2B20;
    v15[0] = v12;
    WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints(v2 + 320, (const WebCore::MediaTrackConstraintSetMap *)(v2 + 1432), (IPC::Encoder **)v15);
    if (v15[0])
      (*(void (**)(uint64_t *))(*v15[0] + 8))(v15[0]);
  }
  this = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if ((_DWORD)this)
  {
    v13 = *(unsigned __int8 ***)(v2 + 72);
    *(_BYTE *)(v2 + 1416) = 0;
    v14 = *(_QWORD *)(v2 + 328);
    v15[0] = (uint64_t *)(v2 + 320);
    v15[1] = (uint64_t *)&v16;
    v16 = v13;
    return IPC::Connection::send<Messages::UserMediaCaptureManagerProxy::StartProducingData>(v14, v15);
  }
  return this;
}

uint64_t WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks(WebKit::RemoteRealtimeMediaSourceProxy *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  char v21;
  _QWORD v22[71];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)this + 129);
  v3 = *((_QWORD *)this + 130);
  *(_OWORD *)((char *)this + 1032) = 0u;
  v4 = (WTF *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  v5 = *((unsigned int *)this + 264);
  *((_DWORD *)this + 264) = 0;
  if (v2 != v3)
  {
    v6 = v5 - 1;
    do
    {
      std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)v22, (uint64_t *)v4 + 122 * v2);
      WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct((uint64_t)v4 + 976 * v2, (uint64_t *)v4 + 122 * v2 + 122);
      if (v2 == v6)
        v2 = 0;
      else
        ++v2;
      v7 = *a2;
      if (*a2)
        *(_DWORD *)v7 += 2;
      v19[0] = 0;
      v20 = v7;
      v21 = 1;
      v8 = v22[0];
      v22[0] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v21)
      {
        v10 = v20;
        v20 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v9);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v11);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v12);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v13);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v14);
      v15 = v22[0];
      v22[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    while (v2 != v3);
    v2 = v3;
  }
  result = WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct((uint64_t)v4 + 976 * v2, (uint64_t *)v4 + 122 * v3);
  if (v4)
    return WTF::fastFree(v4, v17);
  return result;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::startProducingData(WebKit::RemoteRealtimeMediaSource *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v4[2];
  uint64_t v5;

  v1 = (uint64_t *)((char *)this + 320);
  v5 = *((_QWORD *)this + 9);
  *((_BYTE *)this + 1416) = 0;
  v2 = *((_QWORD *)this + 41);
  v4[0] = v1;
  v4[1] = &v5;
  return IPC::Connection::send<Messages::UserMediaCaptureManagerProxy::StartProducingData>(v2, v4);
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(WebKit::RemoteRealtimeMediaSource *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose((WebKit::RemoteRealtimeMediaSource *)((char *)this - 304), a2);
}

uint64_t WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  char v6;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  v6 = a4;
  *(_QWORD *)a1 = a2;
  WebKit::getSourceConnection((unsigned __int8 ***)(a1 + 8), a4);
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a3 + 8);
  v10 = *(_DWORD **)(a3 + 16);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_DWORD **)(a3 + 24);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_WORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_WORD *)(a1 + 1088) = 0;
  if (a5)
  {
    WebCore::MediaTrackConstraintSetMap::operator=(a1 + 64, a5);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 1008, a5 + 944);
    *(_BYTE *)(a1 + 1024) = *(_BYTE *)(a5 + 960);
  }
  return a1;
}

unsigned __int8 ***WebKit::getSourceConnection(unsigned __int8 ***this, int a2)
{
  WebKit::WebProcess *v3;
  unsigned __int8 ***v4;
  WebKit::WebProcess *v5;

  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v4 = (unsigned __int8 ***)((char *)v3 + 32);
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(this, *v4);
  }
  v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v4 = (unsigned __int8 ***)(WebKit::WebProcess::ensureGPUProcessConnection(v3) + 24);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(this, *v4);
}

void WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy(unsigned __int8 ***this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  WTF *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v23;
  v22 = v23;
  WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks((WebKit::RemoteRealtimeMediaSourceProxy *)this, &v22);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  v4 = (WTF::StringImpl *)this[135];
  this[135] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = this[134];
  this[134] = 0;
  if (v5)
    (*((void (**)(unsigned __int8 **))*v5 + 1))(v5);
  v6 = this[129];
  v7 = this[130];
  v8 = (uint64_t)this[131];
  if (v6 <= v7)
  {
    v11 = (uint64_t *)(v8 + 976 * (_QWORD)v7);
    v10 = v8 + 976 * (_QWORD)v6;
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(v8, (uint64_t *)(v8 + 976 * (_QWORD)v7));
    v9 = this[131];
    v10 = (uint64_t)&v9[122 * (_QWORD)this[129]];
    v11 = (uint64_t *)&v9[122 * *((unsigned int *)this + 264)];
  }
  WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(v10, v11);
  v13 = (WTF *)this[131];
  if (v13)
  {
    this[131] = 0;
    *((_DWORD *)this + 264) = 0;
    WTF::fastFree(v13, v12);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 126), v12);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 99), v14);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 92), v15);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 85), v16);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 78), v17);
  v19 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)this[4];
  this[4] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 1);
}

IPC::Encoder *IPC::Connection::send<Messages::UserMediaCaptureManagerProxy::StartProducingData>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1472;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *a2);
  v5 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34F2B48;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1465;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts const&,WebCore::MediaConstraints const&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts const&,WebCore::MediaConstraints const&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v12, a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v14)
    return 0;
  else
    return v11;
}

WTF::StringImpl *WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsFailed(uint64_t a1, char a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 1032);
  if (v3 == *(_QWORD *)(a1 + 1040))
  {
    __break(0xC471u);
    goto LABEL_16;
  }
  std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)&v20, (uint64_t *)(*(_QWORD *)(a1 + 1048) + 976 * v3));
  v7 = *(_QWORD *)(a1 + 1032);
  if (v7 == *(_QWORD *)(a1 + 1040))
  {
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x19765F2D8);
  }
  WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(*(_QWORD *)(a1 + 1048) + 976 * v7, (uint64_t *)(*(_QWORD *)(a1 + 1048) + 976 * v7 + 976));
  v9 = *(_QWORD *)(a1 + 1032);
  if (v9 == *(unsigned int *)(a1 + 1056) - 1)
    v10 = 0;
  else
    v10 = v9 + 1;
  *(_QWORD *)(a1 + 1032) = v10;
  v11 = v20;
  v20 = 0;
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v8);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v12);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v13);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v14);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v15);
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *a3;
  *a3 = 0;
  LOBYTE(v20) = a2;
  v21 = v17;
  v22 = 1;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v20);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebKit::RemoteRealtimeVideoSource::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;

  v12 = WTF::fastMalloc((WTF *)0xB50);
  v13 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(v12, v13, a1, a2, a3, a4, a5);
  *(_QWORD *)v12 = off_1E34F2818;
  *(_QWORD *)(v12 + 304) = &unk_1E34F29D0;
  *(_OWORD *)(v12 + 2856) = 0u;
  *(_OWORD *)(v12 + 2872) = 0u;
  *(_QWORD *)(v12 + 2888) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 312));
  v15 = v12;
  WebKit::UserMediaCaptureManager::addSource(a4, &v15);
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 312));
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 312));
  v15 = v12;
  WebKit::RemoteCaptureSampleManager::addSource(a4 + 144, &v15);
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 312));
  result = WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((unsigned __int8 **)v12);
  *a6 = v12;
  return result;
}

void WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(WebKit::RemoteRealtimeVideoSource *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 359);
  if (v3)
  {
    *((_QWORD *)this + 359) = 0;
    *((_DWORD *)this + 720) = 0;
    WTF::fastFree(v3, a2);
  }
  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, (WTF::StringImpl *)a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(WebKit::RemoteRealtimeVideoSource *this, void *a2)
{
  WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource((WebKit::RemoteRealtimeVideoSource *)((char *)this - 304), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource((WebKit::RemoteRealtimeVideoSource *)((char *)this - 304), a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteRealtimeVideoSource::endProducingData(WebKit::RemoteRealtimeVideoSource *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (uint64_t *)((char *)this + 320);
  v2 = *((_QWORD *)this + 41);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1466;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v1);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::RemoteRealtimeVideoSource::setShouldApplyRotation(WebKit::RemoteRealtimeVideoSource *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  uint64_t v10;
  IPC::Encoder *v11;

  v3 = *((_QWORD *)this + 41);
  v10 = *((_QWORD *)this + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1471;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v10);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  return 1;
}

uint64_t WebKit::RemoteRealtimeVideoSource::clone@<X0>(WebKit::RemoteRealtimeVideoSource *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34F2DD0;
  v4[1] = this;
  v4[2] = &v7;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  result = v6;
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *a2 = v7;
  return result;
}

void WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(WebKit::StorageNamespaceImpl *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int ***v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (unsigned int ***)(v3 + 32);
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v5 - 4));
        if ((v6 & 1) == 0)
        {
          std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100](v5, 0);
          v7 = *((unsigned int *)v5 - 2);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, unsigned int ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v7])(&v9, v5 - 4);
          *((_DWORD *)v5 - 2) = -1;
        }
        v5 += 5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, (WTF::StringImpl *)a2);
}

uint64_t WebKit::StorageNamespaceImpl::topLevelOrigin(WebKit::StorageNamespaceImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebKit::StorageNamespaceImpl::storageAreaMapCountForTesting(WebKit::StorageNamespaceImpl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

void WebCore::StorageNamespaceProvider::cloneSessionStorageNamespaceForPage()
{
  __break(0xC471u);
}

WTF::StringImpl *WebKit::RemoteRealtimeMediaSource::whenReady(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int16 v14;

  if (*(_BYTE *)(a1 + 1384))
  {
    v4 = *(WTF::StringImpl **)(a1 + 1400);
    if (v4)
      *(_DWORD *)v4 += 2;
    v13 = v4;
    v14 = *(_WORD *)(a1 + 1408);
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 1392);
    if (v8)
    {
      *(_QWORD *)(a1 + 1392) = 0;
      v9 = *a2;
      *a2 = 0;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = &off_1E34F2D98;
      v10[1] = v8;
      v10[2] = v9;
      v11 = *a2;
      *a2 = (uint64_t)v10;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = *a2;
    *a2 = 0;
    result = *(WTF::StringImpl **)(a1 + 1392);
    *(_QWORD *)(a1 + 1392) = v12;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::interrupted(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 1416);
}

uint64_t WebKit::RemoteRealtimeMediaSource::capabilities(WebKit::RemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 2408;
}

uint64_t WebKit::RemoteRealtimeMediaSource::settings(WebKit::RemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 2752;
}

unsigned __int8 **WebKit::RemoteRealtimeMediaSource::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 39);
}

unsigned __int8 *WebKit::RemoteRealtimeMediaSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[39]);
}

uint64_t WebKit::RemoteRealtimeMediaSource::controlBlock(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((_QWORD *)this + 39);
}

uint64_t WebKit::RemoteRealtimeMediaSource::isCaptureSource(WebKit::RemoteRealtimeMediaSource *this)
{
  return 1;
}

uint64_t WebKit::RemoteRealtimeMediaSource::deviceType(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 344);
}

uint64_t WebKit::RemoteRealtimeMediaSource::isPowerEfficient(WebKit::RemoteRealtimeMediaSource *this)
{
  uint64_t v1;
  double v2;
  double v3;
  int v4;
  int v5;
  unsigned __int16 v6;
  void *v7;
  int v8;
  int v9;
  uint64_t *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WebKit::RemoteRealtimeMediaSource *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  int v20;
  uint64_t *v21;
  int v22;
  IPC::Encoder *v23;
  uint64_t v24;
  char v25;

  v1 = *((_QWORD *)this + 41);
  v17 = *((_QWORD *)this + 40);
  WTF::ApproximateTime::now(this);
  v3 = v2 + 3.0;
  v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3647, 0, &v24, (uint64_t *)&v23);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v23, &v17);
  IPC::Connection::sendSyncMessage(v1, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, v3);
  v4 = v22;
  if (!v22)
  {
    v6 = IPC::Decoder::decode<std::tuple<BOOL>>(v21);
    if (v6 < 0x100u)
    {
      v5 = 0;
      v8 = 0;
      LOBYTE(v18) = 13;
      v4 = 1;
      v20 = 1;
      v9 = v22;
      if (v22 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v22)
    {
      v5 = v6;
      v10 = v21;
      v21 = 0;
      v18 = v10;
      v19 = v6;
      goto LABEL_9;
    }
LABEL_19:
    v16 = (WebKit::RemoteRealtimeMediaSource *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::RemoteRealtimeMediaSource::stopProducingData(v16);
  }
  if (v22 != 1)
    goto LABEL_19;
  v5 = 0;
  LOBYTE(v18) = (_BYTE)v21;
LABEL_9:
  v20 = v4;
  v9 = v4;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34F2DB0[v9])(&v25, &v21);
  v8 = v5;
LABEL_11:
  v11 = v23;
  v23 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v7);
    WTF::fastFree(v12, v13);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34F2A10[v4])(&v21, &v18);
  return v8 && v4 == 0;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::stopProducingData(WebKit::RemoteRealtimeMediaSource *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (uint64_t *)((char *)this + 320);
  *((_BYTE *)this + 1416) = 0;
  v2 = *((_QWORD *)this + 41);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1473;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v1);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(WebKit::RemoteRealtimeMediaSource *this, WTF::StringImpl *a2)
{
  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeMediaSource *)((char *)this - 304), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeMediaSource *)((char *)this - 304), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 **`non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[1]);
}

uint64_t `non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::controlBlock(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((_QWORD *)this + 1);
}

double WebKit::RemoteRealtimeVideoSource::observedFrameRate(WebKit::RemoteRealtimeVideoSource *this)
{
  return *((double *)this + 361);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(WebCore::SecurityOriginData *this, void *a2)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v4;
  __n128 v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  char v10;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = this;
    do
    {
      v5.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue(v4);
      if ((v6 & 1) == 0)
      {
        v7 = (_DWORD *)*((_QWORD *)v4 + 4);
        *((_QWORD *)v4 + 4) = 0;
        if (v7)
        {
          if (v7[2] == 1)
            (*(void (**)(_DWORD *, double))(*(_QWORD *)v7 + 8))(v7, v5.n128_f64[0]);
          else
            --v7[2];
        }
        v8 = *((unsigned int *)v4 + 6);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, WebCore::SecurityOriginData *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v8])(&v10, v4, v5);
        *((_DWORD *)v4 + 6) = -1;
      }
      v4 = (WebCore::SecurityOriginData *)((char *)v4 + 40);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

unsigned int **std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100](unsigned int ***a1, unsigned int **a2)
{
  unsigned int **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio(result);
    return (unsigned int **)WTF::fastFree(v4, v5);
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2;
  char v4;

  std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(a1 + 32), 0);
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

unsigned int **std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100](unsigned int ***a1, unsigned int **a2)
{
  unsigned int **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::StorageAreaMap::~StorageAreaMap(result);
    return (unsigned int **)WTF::fastFree(v4, v5);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34F2DF8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  int isNull;
  unsigned int ***v10;
  uint64_t v11;
  unsigned int **v12;
  char v14;
  int v15;
  __int16 v16;
  char v17;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v8 = (unsigned int *)(a1 + 40 * (v5 & v4));
    isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v8);
    v5 = ++v6 + v7;
  }
  while (!isNull);
  v10 = (unsigned int ***)(a1 + 40 * v7 + 32);
  std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100](v10, 0);
  v11 = v8[6];
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v11])(&v14, v8);
  *(_BYTE *)v8 = 0;
  v8[6] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, a2);
  v12 = *(unsigned int ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *v10 = v12;
  return v8;
}

unsigned int **WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WebCore::SecurityOriginData const&,WebKit::StorageNamespaceImpl::storageArea(WebCore::SecurityOrigin const&)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int **v6;

  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  std::make_unique[abi:sn180100]<WebKit::StorageAreaMap,WebKit::StorageNamespaceImpl &,WebCore::SecurityOrigin const&>((uint64_t *)&v6, *(_QWORD *)a3, *(unsigned int **)(a3 + 8));
  return std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(a1 + 32), v6);
}

WTF *std::make_unique[abi:sn180100]<WebKit::StorageAreaMap,WebKit::StorageNamespaceImpl &,WebCore::SecurityOrigin const&>(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF *result;
  WTF *v10;

  v6 = WTF::fastMalloc((WTF *)0x70);
  do
    v7 = __ldaxr(a3);
  while (__stlxr(v7 + 1, a3));
  v10 = (WTF *)a3;
  *a1 = WebKit::StorageAreaMap::StorageAreaMap(v6, a2, (uint64_t *)&v10);
  result = v10;
  if (v10)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v8);
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t *v16;
  WebCore::SecurityOriginData *v17;
  _QWORD *v18;
  WebCore::SecurityOriginData *v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v18 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v16);
          v19 = (WebCore::SecurityOriginData *)v16[2];
          if (v19)
            WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v19, v10);
          if (v16 == a3)
            v13 = v18;
        }
        else
        {
          v17 = (WebCore::SecurityOriginData *)v16[2];
          if (v17)
            WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v10);
        }
      }
      v16 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::SecurityOriginData *v15;
  _QWORD *v16;
  WebCore::SecurityOriginData *v17;
  uint64_t v18;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = 1;
  do
  {
    v11 = v9;
    v12 = (_QWORD *)(a1 + 24 * v9);
    v9 = (v9 + v10++) & v5;
  }
  while (*v12);
  v13 = v11;
  v14 = a1 + 24 * v11;
  v17 = *(WebCore::SecurityOriginData **)(v14 + 16);
  v16 = (_QWORD *)(v14 + 16);
  v15 = v17;
  if (v17)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v15, a2);
    v4 = *a2;
  }
  *v12 = v4;
  *(_DWORD *)(a1 + 24 * v13 + 8) = *((_DWORD *)a2 + 2);
  *v16 = 0;
  v18 = a2[2];
  a2[2] = 0;
  *v16 = v18;
  return v12;
}

WebCore::SecurityOriginData *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  WebCore::SecurityOriginData *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  result = (WebCore::SecurityOriginData *)a2[2];
  if (result)
    result = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebCore::SecurityOriginData *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  int isNull;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  char v39;
  char v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 40 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!v3)
  {
    v11 = 0;
    if (!v2)
      return v11;
    goto LABEL_40;
  }
  v10 = 0;
  v11 = 0;
  v12 = v3;
  v36 = v3;
  do
  {
    v13 = (unsigned int *)(v2 + 40 * v10);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
    if ((v14 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10)))
      {
        v15 = v2 + 40 * v10;
        v16 = *(_DWORD **)(v15 + 32);
        *(_QWORD *)(v15 + 32) = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        v29 = v13[6];
        if ((_DWORD)v29 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v29])(&v39, v2 + 40 * v10);
        v13[6] = -1;
      }
      else
      {
        v17 = *a1;
        v18 = v11;
        if (*a1)
          v19 = *(_DWORD *)(v17 - 8);
        else
          v19 = 0;
        v42 = -1640531527;
        v43 = 0;
        v44 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v2 + 40 * v10);
        v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
        v21 = 0;
        do
        {
          v22 = v20 & v19;
          v23 = (unsigned int *)(v17 + 40 * (v20 & v19));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
          v20 = ++v21 + v22;
        }
        while (!isNull);
        v25 = v17 + 40 * v22;
        v28 = *(_DWORD **)(v25 + 32);
        v27 = (_QWORD *)(v25 + 32);
        v26 = v28;
        *v27 = 0;
        v11 = v18;
        v12 = v36;
        if (v28)
        {
          if (v26[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
          else
            --v26[2];
        }
        v30 = v23[6];
        if ((_DWORD)v30 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v30])(&v40, v23);
        *(_BYTE *)v23 = 0;
        v23[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, v2 + 40 * v10);
        v31 = v2 + 40 * v10;
        v32 = *(_QWORD *)(v31 + 32);
        *(_QWORD *)(v31 + 32) = 0;
        *v27 = v32;
        v33 = *(_DWORD **)(v31 + 32);
        *(_QWORD *)(v31 + 32) = 0;
        if (v33)
        {
          if (v33[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
          else
            --v33[2];
        }
        v34 = v13[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v34])(&v41, v2 + 40 * v10);
        v13[6] = -1;
        if (v13 == a2)
          v11 = v23;
      }
    }
    ++v10;
  }
  while (v10 != v12);
  if (v2)
LABEL_40:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34F2A30;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 312));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F2A30;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 312));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

unsigned int **WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned int **result;
  uint64_t v19;
  int v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 320);
  v4 = WTF::fastMalloc((WTF *)0xA8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)v4 = v5;
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_DWORD *)(v4 + 128) = 10000000;
  *(_BYTE *)(v4 + 132) = 1;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)(v4 + 148), 0, 0);
  *(_QWORD *)(v4 + 152) = 0;
  *(_BYTE *)(v4 + 160) = 0;
  v8 = *(_QWORD *)(v2 + 48);
  v7 = (uint64_t *)(v2 + 48);
  v6 = v8;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7),
        (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v3)
      {
        WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio((unsigned int **)v4);
        return (unsigned int **)WTF::fastFree(v21, v22);
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (_QWORD *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v7 - 16);
      v14 = v16;
    }
  }
  *v14 = v3;
  result = std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((unsigned int ***)v14 + 1, (unsigned int **)v4);
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v23 = *v7;
  if (*v7)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 <= 0x400)
  {
    if (3 * v26 > 4 * v25)
      return result;
    return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7);
  }
  if (v26 <= 2 * v25)
    return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((unsigned int ***)(v21 + 8), 0);
          *(_QWORD *)v21 = *v10;
          v22 = v4 + 16 * i;
          v23 = *(_QWORD *)(v22 + 8);
          v22 += 8;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((unsigned int ***)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((unsigned int ***)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34F2A58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 312));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F2A58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 312));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 24) + 320);
  v6 = *(_QWORD *)(v2 + 56);
  v5 = (uint64_t *)(v2 + 56);
  v4 = v6;
  if (v6
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5),
        (v4 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = v3;
    v16 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    v17 = v12[1];
    v12[1] = v16;
    if (v17)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v17 + 312));
    v18 = *v5;
    if (*v5)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v5;
    if (*v5)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        return result;
    }
    else if (3 * v23 > 4 * v22)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5);
  }
  v14 = 0;
  v15 = 1;
  while (v13 != v3)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (_QWORD *)(v4 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v24 + 312));
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v13 + 312));
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34F2A80;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F2A80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (uint64_t *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(a1 + 24);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, v4);
  if (v3)
  {
    v6 = v3 + 16 * *(unsigned int *)(v3 - 4);
    if (v6 == result)
      goto LABEL_9;
LABEL_6:
    if (v6 != result)
    {
      *(_QWORD *)result = -1;
      result = (uint64_t)std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((unsigned int ***)(result + 8), 0);
      ++*(_DWORD *)(*v2 - 16);
      v7 = *v2;
      v8 = *v2 ? *(_DWORD *)(v7 - 12) - 1 : -1;
      *(_DWORD *)(v7 - 12) = v8;
      v13 = *v2;
      if (*v2)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v15 >> 1);
      }
    }
    return result;
  }
  if (result)
  {
    v6 = 0;
    goto LABEL_6;
  }
LABEL_9:
  v11 = *(_QWORD *)(v1 + 56);
  v9 = (uint64_t *)(v1 + 56);
  v10 = v11;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v11, v4);
  if (v11)
  {
    v12 = v10 + 16 * *(unsigned int *)(v10 - 4);
    if (v12 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v12 = 0;
  }
  if (v12 != result)
  {
    v17 = *(_QWORD *)(result + 8);
    *(_QWORD *)result = -1;
    *(_QWORD *)(result + 8) = 0;
    if (v17)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v17 + 312));
    ++*(_DWORD *)(*v9 - 16);
    v18 = *v9;
    if (*v9)
      v19 = *(_DWORD *)(v18 - 12) - 1;
    else
      v19 = -1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v9;
    if (*v9)
    {
      v21 = 6 * *(_DWORD *)(v20 - 12);
      v22 = *(_DWORD *)(v20 - 4);
      if (v21 < v22 && v22 >= 9)
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v9, v22 >> 1);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::RemoteAudio::startThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v1 + 112) = 0;
  do
  {
    result = MEMORY[0x19AEBA1B8](*(unsigned int *)(v1 + 148));
    if ((_DWORD)result)
      break;
    v3 = atomic_load((unsigned __int8 *)(v1 + 160));
    if ((v3 & 1) != 0)
      break;
    if (!*(_BYTE *)(v1 + 88)
      || (WebCore::CAAudioStreamDescription::sampleRate((WebCore::CAAudioStreamDescription *)(v1 + 8)),
          WTF::MediaTime::operator+(),
          result = WebCore::CARingBuffer::fetch(),
          *(_QWORD *)(v1 + 112) += *(_QWORD *)(v1 + 136),
          !*(_BYTE *)(v1 + 88)))
    {
      __break(1u);
      return result;
    }
    result = WebCore::RealtimeMediaSource::audioSamplesAvailable();
    v4 = atomic_load((unsigned __int8 *)(v1 + 160));
  }
  while ((v4 & 1) == 0);
  return result;
}

uint64_t WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 119), a2);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 92), v4);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 85), v5);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 78), v6);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 71), v7);
      result = *v3;
      *v3 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v3 += 122;
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F2AD0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 312));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F2AD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 312));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl *result;
  __int16 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  WebKit::WebProcess *v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    *(_BYTE *)(v4 + 1384) = 1;
    v6 = (WTF::StringImpl **)(v4 + 1400);
    result = (WTF::StringImpl *)WTF::String::operator=((WTF::StringImpl **)(v4 + 1400), a2);
    v8 = *((_WORD *)a2 + 4);
    *(_WORD *)(v4 + 1408) = v8;
    v9 = *(_QWORD *)(v4 + 1392);
    if (v9)
    {
      v10 = *v6;
      if (*v6)
      {
        *(_DWORD *)v10 += 2;
        v8 = *(_WORD *)(v4 + 1408);
      }
      v18 = v10;
      LOWORD(v19) = v8;
      *(_QWORD *)(v4 + 1392) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    WebKit::RemoteRealtimeMediaSource::setSettings(*(_QWORD *)(a1 + 8), a3);
    WebKit::RemoteRealtimeMediaSource::setCapabilities(v4, a4);
    result = (WTF::StringImpl *)WTF::String::operator=((WTF::StringImpl **)(v4 + 120), (WTF::StringImpl *)(v4 + 2808));
    *(_BYTE *)(v4 + 1384) = 1;
    v13 = *(_QWORD *)(v4 + 1392);
    if (v13)
    {
      v18 = 0;
      v19 = 0;
      *(_QWORD *)(v4 + 1392) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (*(_BYTE *)(v4 + 376))
    {
      {
        v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v15 = WebKit::WebProcess::WebProcess(v17);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
      }
      v16 = WebKit::WebProcess::ensureGPUProcessConnection(v15);
      return (WTF::StringImpl *)WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v16 + 176, v4 + 304);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::configurationChanged(WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WTF::String &&::RealtimeMediaSourceCapabilities &&)::$_0,void,WTF::String &&::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F2B48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F2B48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int16 v21;
  _OWORD v22[2];
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[22];
  _OWORD v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _DWORD *v33;
  _DWORD *v34;
  __int128 v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  _BYTE v40[22];
  char v41;
  WTF::StringImpl *v42;
  __int16 v43;
  char v44;
  _OWORD v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[22];
  char v51;
  _OWORD v52[3];
  const void *v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  char v57;
  _DWORD *v58;
  _DWORD *v59;
  __int128 v60;
  const void *v61;
  unsigned int v62;
  __int128 v63;
  _BYTE v64[22];
  char v65;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_((uint64_t *)(a1 + 8));
  IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::decode(a2, (uint64_t)&v42);
  if (!v44)
  {
    v4 = (void *)*a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v5 = (WTF *)a2[3];
    if (!v5)
    {
LABEL_27:
      LOBYTE(v20) = 0;
      v41 = 0;
      goto LABEL_28;
    }
LABEL_31:
    if (v6)
      (*(void (**)(WTF *, void *))(*(_QWORD *)v5 + 16))(v5, v4);
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>(a2, (uint64_t)v45);
  if (v51)
  {
    v5 = IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((unint64_t *)a2, v52);
    if (v65)
    {
      if (v51)
      {
        v7 = v42;
        v42 = 0;
        v20 = v7;
        v21 = v43;
        v22[0] = v45[0];
        v22[1] = v45[1];
        v23 = v46;
        v8 = v47;
        v47 = 0u;
        v24 = v8;
        v9 = v48;
        v48 = 0;
        v25 = v9;
        *(_QWORD *)&v27[14] = *(_QWORD *)&v50[14];
        v26 = v49;
        *(_OWORD *)v27 = *(_OWORD *)v50;
        v28[0] = v52[0];
        v28[1] = v52[1];
        v28[2] = v52[2];
        v29 = 0u;
        HIDWORD(v29) = v54;
        if (v54)
        {
          DWORD2(v29) = v54;
          *(_QWORD *)&v29 = WTF::fastMalloc((WTF *)v54);
          memcpy((void *)v29, v53, v54);
        }
        v30 = v55;
        v31 = v56;
        v32 = v57;
        v10 = v58;
        if (v58)
          *v58 += 2;
        v33 = v10;
        v11 = v59;
        if (v59)
          *v59 += 2;
        v34 = v11;
        v35 = v60;
        v36 = 0;
        v37 = 0;
        v38 = v62;
        if (v62)
        {
          v37 = v62;
          v36 = (void *)WTF::fastMalloc((WTF *)v62);
          memcpy(v36, v61, v62);
        }
        *(_QWORD *)&v40[14] = *(_QWORD *)&v64[14];
        v39 = v63;
        *(_OWORD *)v40 = *(_OWORD *)v64;
        v12 = 1;
        v41 = 1;
        if (v65)
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v52, v4);
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_31;
    }
  }
  v12 = 0;
  LOBYTE(v20) = 0;
  v41 = 0;
LABEL_19:
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45, (WTF::StringImpl *)v4);
  if (!v42)
    goto LABEL_22;
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
LABEL_22:
    if (!v12)
      goto LABEL_28;
LABEL_25:
    v15 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, _OWORD *, _OWORD *))(*(_QWORD *)v15 + 16))(v15, &v20, v22, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v16);
  }
  WTF::StringImpl::destroy(v42, v14);
  if (v12)
    goto LABEL_25;
LABEL_28:
  v17 = (void *)*a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19)
  {
    if (v18)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v19 + 16))(v19, v17);
  }
  std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v17);
  return _ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_(v2);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 104))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 312))
  {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(a1 + 120), a2);
    v4 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  _OWORD v8[12];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[22];
  __int16 v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  v12 = 4;
  v10 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  v15 = 0;
  v13 = 0x3FF0000000000000;
  memset(v14, 0, sizeof(v14));
  memset(v8, 0, sizeof(v8));
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *, _OWORD *, _OWORD *))(*(_QWORD *)v1 + 16))(v1, v16, v9, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v8, v2);
  v4 = (WTF::StringImpl *)*((_QWORD *)&v11 + 1);
  *((_QWORD *)&v11 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)v11;
  *(_QWORD *)&v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)&v10 + 1);
  *((_QWORD *)&v10 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (WTF::StringImpl *)v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts const&,WebCore::MediaConstraints const&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts const&,WebCore::MediaConstraints const&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(a1, *(_QWORD *)(a2 + 8));
  v4 = *(uint64_t **)(a2 + 16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v4 + 1);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(a1, *(_BYTE **)(a2 + 24));
  LOBYTE(v4) = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v4;
  v5 = **(_QWORD **)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](a3 + v6, (uint64_t *)(v5 + v6));
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 952, v7);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 736, v8);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 680, v9);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 624, v10);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 568, v11);
      result = *(_QWORD *)(v5 + v6);
      *(_QWORD *)(v5 + v6) = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v6 += 976;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 8, (uint64_t)(a2 + 1));
  *(_OWORD *)(v5 + 944) = 0u;
  v6 = a2[119];
  a2[119] = 0;
  *(_QWORD *)(v5 + 944) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 240);
  *((_DWORD *)a2 + 240) = 0;
  *(_DWORD *)(a1 + 960) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 241);
  *((_DWORD *)a2 + 241) = 0;
  *(_DWORD *)(a1 + 964) = v6;
  *(_BYTE *)(a1 + 968) = *((_BYTE *)a2 + 968);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34F2B98;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34F2B98;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t isSettled;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v9;
  WTF::Lock *result;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];
  WTF::Lock *v15;
  char v16;
  char v17;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34F2BC0;
  v4[1] = v3;
  v14[0] = 0;
  v14[1] = 0;
  v14[2] = "operator()";
  v14[3] = 0;
  isSettled = *(_QWORD *)(a1 + 8);
  if (!isSettled)
  {
    v6 = 0;
LABEL_6:
    v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v9 && v9[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v9, 4u, (WTF::Logger::LogSiteIdentifier *)v14, " ignored already resolved or rejected ", v6);
    return (WTF::Lock *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  }
  isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
  v6 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)isSettled)
    goto LABEL_6;
  v7 = (unsigned __int8 *)(v6 + 48);
  v15 = (WTF::Lock *)(v6 + 48);
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
LABEL_11:
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_12;
  }
  if (__stxr(1u, v7))
    goto LABEL_11;
LABEL_12:
  v11 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v11 && v11[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v11, 4u, (WTF::Logger::LogSiteIdentifier *)v14, " settling ", v6);
  v12 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_1E34F2B60[v12])(&v17, v6 + 56);
  *(_QWORD *)(v6 + 56) = v4;
  *(_DWORD *)(v6 + 88) = 2;
  result = (WTF::Lock *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll((_QWORD *)v6, (unsigned __int8 **)&v15);
  if (v16)
  {
    result = v15;
    v13 = __ldxr((unsigned __int8 *)v15);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F2BC0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34F2BC0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _BYTE v30[24];
  int v31;
  char v32;
  _QWORD v33[3];
  int v34;
  char v35;
  uint64_t v36;
  unsigned __int8 v37;
  WTF *v38;
  uint64_t v39;
  char v40;

  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    goto LABEL_29;
  v4 = *v3;
  if (!*v3)
    goto LABEL_29;
  v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    v22 = 0;
    v23 = 0;
    *v3 = 0;
    v3[1] = 0;
    v8 = (_QWORD *)v3[3];
    if (!v8)
      goto LABEL_37;
    goto LABEL_43;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v22 = v5;
    v23 = v4;
    goto LABEL_37;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(v3, &v38);
    if ((_BYTE)v39)
    {
      v33[0] = v38;
      v34 = 1;
      goto LABEL_12;
    }
LABEL_22:
    v15 = *v3;
    v16 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v17 = v3[3];
    if (v17)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    v30[0] = 0;
    v32 = 0;
LABEL_28:
    v19 = *v3;
    v20 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v21 = v3[3];
    if (v21)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
        if (v32)
          goto LABEL_15;
      }
    }
LABEL_29:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, &v38);
  if (!v40)
  {
LABEL_21:
    v12 = *v3;
    v13 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v14 = v3[3];
    if (v14 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_22;
  }
  v8 = IPC::Decoder::decode<WTF::String>(v3, &v36);
  v5 = v37;
  if (!v37)
  {
    if (v40)
    {
      v11 = v38;
      if (v38)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree(v11, v9);
      }
    }
    goto LABEL_21;
  }
  if (!v40)
  {
    __break(1u);
LABEL_43:
    if (!v5
      || (((*(void (**)(_QWORD *))(*v8 + 16))(v8),
           v26 = *v3,
           v27 = v3[1],
           v28 = v3[3],
           *v3 = 0,
           v3[1] = 0,
           v28)
        ? (v29 = v27 == 0)
        : (v29 = 1),
          v29))
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
      v23 = *v3;
      v22 = v3[1];
    }
LABEL_37:
    *v3 = 0;
    v3[1] = 0;
    v24 = v3[3];
    if (v24)
      v25 = v22 == 0;
    else
      v25 = 1;
    if (!v25)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v23, v22);
    goto LABEL_22;
  }
  v33[0] = v38;
  v33[1] = v39;
  v33[2] = v36;
  v34 = 0;
LABEL_12:
  v35 = 1;
  v30[0] = 0;
  v31 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)v33);
  v32 = 1;
  if (v35)
  {
    if (v34 != -1)
    {
      ((void (*)(WTF **, _QWORD *))off_1E34F2B78[v34])(&v38, v33);
      if (!v32)
        goto LABEL_28;
    }
  }
LABEL_15:
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v30);
  if (v32)
  {
    if (v31 != -1)
      return ((uint64_t (*)(_QWORD *, _BYTE *))off_1E34F2B78[v31])(v33, v30);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 260);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 248);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 62), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 56), v27);
  v28 = a1[54];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34F2C00[v28])(buf, a1 + 14);
  a1[54] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2C18[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 152) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34F2C38;
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34F2C38;
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34F2C98;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 216);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, &v68);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, v76);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, &v67);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, v76);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 216);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34F2C00[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 216) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int *v33;
  _OWORD v34[2];

  v33 = (unsigned int *)v34 + 2;
  *(_QWORD *)&v34[0] = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 224);
  if (v4 == (void *)(a1 + 240))
  {
    v5 = *(unsigned int *)(a1 + 236);
    memcpy(&v28, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 224) = a1 + 240;
    v26 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 236);
    LODWORD(v27) = *(_DWORD *)(a1 + 232);
  }
  HIDWORD(v27) = v5;
  DWORD1(v34[0]) = 0;
  *(_QWORD *)(a1 + 232) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v4);
  v6 = *(_QWORD *)(a1 + 248);
  v23 = v6;
  v7 = *(_DWORD *)(a1 + 260);
  v24 = *(_DWORD *)(a1 + 256);
  v25 = v7;
  v33 = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)&v34[0] = 0;
  *(_QWORD *)(a1 + 256) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v8);
  if (HIDWORD(v27))
  {
    v10 = v26;
    v11 = 8 * HIDWORD(v27);
    do
    {
      v12 = *v10++;
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    v13 = v6 + 40 * v7;
    v14 = a1 + 56;
    do
    {
      v15 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v33 = v15;
      v16 = *(_OWORD *)(v6 + 24);
      v34[0] = *(_OWORD *)(v6 + 8);
      v34[1] = v16;
      if (v15)
      {
        v17 = v15 + 2;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
      }
      WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v33);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v21);
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 216);
  v11 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34F2C00[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 216) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34F2C50[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2C00[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 160) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  char v13;
  _BYTE v14[8];
  _BYTE v15[144];
  unsigned int v16;
  _WORD v17[72];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 160);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34F2C00[v5])(v14, v4);
LABEL_8:
    *(_BYTE *)(v4 + 8) = 0;
    v10 = v4 + 8;
    *(_DWORD *)(v10 + 152) = -1;
    *(_DWORD *)(v10 + 144) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v10, a3 + 8);
    *(_DWORD *)(v10 + 152) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3 + 8);
  v8 = (_BYTE *)(a2 + 8);
  if (v16 != -1)
  {
    v9 = *(_DWORD *)(a2 + 152);
    if (v9 != -1 && v9 == v16)
    {
      result = ((uint64_t (*)(_WORD *, _BYTE *, uint64_t))off_1E34F2C68[v16])(v17, v15, a2 + 8);
      goto LABEL_22;
    }
    v17[0] = 0;
    if (!*((_BYTE *)v17 + v16) || (v17[0] = 0, v9 == -1))
    {
      v12 = v15;
LABEL_20:
      LOBYTE(v17[0]) = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v8);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>((uint64_t)v8, (uint64_t)v12);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>((uint64_t)v12, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _WORD *))off_1E34F2C18[v18])(&v13, v17);
      goto LABEL_22;
    }
LABEL_13:
    v11 = *((unsigned __int8 *)v17 + v9);
    if (v11)
      v12 = v15;
    else
      v12 = (_BYTE *)(a2 + 8);
    if (!v11)
      v8 = v15;
    goto LABEL_20;
  }
  v9 = *(_DWORD *)(a2 + 152);
  if (v9 != -1)
  {
    v17[0] = 0;
    goto LABEL_13;
  }
LABEL_22:
  if (v16 != -1)
    return ((uint64_t (*)(_WORD *, _BYTE *))off_1E34F2C18[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2C00[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 160) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 144);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2C18[v4])(&v7, result);
  *(_DWORD *)(v3 + 144) = -1;
  v5 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34F2C78[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __int128 *a2, __int128 *a3)
{
  WTF *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  WTF *result;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  WTF *v21[2];
  char v22;

  v17 = a2[4];
  v18 = a2[5];
  v19 = a2[6];
  v20 = *((_BYTE *)a2 + 112);
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a2[3];
  LOBYTE(v21[0]) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v21[0] = *((WTF **)a2 + 15);
    v4 = (WTF *)*((_QWORD *)a2 + 16);
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 16) = 0;
    v21[1] = v4;
    v22 = 1;
  }
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[3];
  a2[2] = a3[2];
  a2[3] = v7;
  *a2 = v5;
  a2[1] = v6;
  v8 = a3[4];
  v9 = a3[5];
  v10 = a3[6];
  *((_BYTE *)a2 + 112) = *((_BYTE *)a3 + 112);
  a2[5] = v9;
  a2[6] = v10;
  a2[4] = v8;
  std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a2 + 120, (uint64_t *)a3 + 15);
  a3[4] = v17;
  a3[5] = v18;
  a3[6] = v19;
  *((_BYTE *)a3 + 112) = v20;
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  result = (WTF *)std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a3 + 120, (uint64_t *)v21);
  if (v22)
  {
    result = v21[0];
    if (v21[0])
      return (WTF *)WTF::fastFree(v21[0], v12);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      result = *(_QWORD *)result;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v4 = *a2;
      *a2 = 0;
      *(_QWORD *)v3 = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v4;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v5;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F2C98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34F2C98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _OWORD v30[7];
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  _BYTE v37[144];
  int v38;
  char v39;
  _BYTE v40[8];
  _OWORD v41[7];
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    goto LABEL_25;
  v4 = *v3;
  if (!*v3)
    goto LABEL_25;
  v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    v9 = 0;
    v10 = 0;
    *v3 = 0;
    v3[1] = 0;
    v11 = v3[3];
    if (v11)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11),
             v26 = *v3,
             v27 = v3[1],
             v28 = v3[3],
             *v3 = 0,
             v3[1] = 0,
             v28)
          ? (v29 = v27 == 0)
          : (v29 = 1),
            v29))
      {
        v9 = 0;
        v10 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
        v10 = *v3;
        v9 = v3[1];
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v9 = v5;
    v10 = v4;
LABEL_13:
    *v3 = 0;
    v3[1] = 0;
    v12 = v3[3];
    if (v12)
      v13 = v9 == 0;
    else
      v13 = 1;
    if (!v13)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
    goto LABEL_18;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(v3, v30);
    v8 = BYTE8(v30[0]);
    if (BYTE8(v30[0]))
    {
      *(_QWORD *)&v41[0] = *(_QWORD *)&v30[0];
      v8 = 1;
      v46 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::decode(v3, (uint64_t)v30);
  if (!v35)
  {
    v22 = *v3;
    v23 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v24 = v3[3];
    if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22), !v35))
    {
      v8 = 0;
LABEL_28:
      v40[0] = 0;
      goto LABEL_29;
    }
  }
  v41[4] = v30[4];
  v41[5] = v30[5];
  v41[6] = v30[6];
  v41[0] = v30[0];
  v41[1] = v30[1];
  v41[2] = v30[2];
  v42 = v31;
  v41[3] = v30[3];
  LOBYTE(v43) = 0;
  v45 = 0;
  if (v34)
  {
    v43 = v32;
    v44 = v33;
    v8 = 1;
    v45 = 1;
    v46 = 0;
  }
  else
  {
    v46 = 0;
    v8 = 1;
  }
LABEL_29:
  v47 = v8;
  if (!v8)
  {
LABEL_18:
    v14 = *v3;
    v15 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v16 = v3[3];
    if (v16)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (!v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    v36 = 0;
    v39 = 0;
LABEL_24:
    v18 = *v3;
    v19 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v20 = v3[3];
    if (v20)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
        if (v39)
          goto LABEL_33;
      }
    }
LABEL_25:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 152) = 1;
    return result;
  }
  v37[0] = 0;
  v38 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)v41);
  v39 = 1;
  if (v47)
  {
    if (v46 != -1)
    {
      ((void (*)(_OWORD *, _OWORD *))off_1E34F2C18[v46])(v30, v41);
      if (!v39)
        goto LABEL_24;
    }
  }
LABEL_33:
  *(_BYTE *)(a2 + 8) = 0;
  v25 = a2 + 8;
  *(_DWORD *)(v25 + 144) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v25, (uint64_t)v37);
  if (v39)
  {
    if (v38 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34F2C18[v38])(v40, v37);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 164);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 152);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 38), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 32), v27);
  v28 = a1[30];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34F2CD8[v28])(buf, a1 + 14);
  a1[30] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2CF0[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 56) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34F2D10;
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34F2D10;
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34F2D70;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 120);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, &v68);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, v76);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, &v67);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v9, v76);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 120);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34F2CD8[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 120) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int *v33;
  _OWORD v34[2];

  v33 = (unsigned int *)v34 + 2;
  *(_QWORD *)&v34[0] = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 128);
  if (v4 == (void *)(a1 + 144))
  {
    v5 = *(unsigned int *)(a1 + 140);
    memcpy(&v28, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = a1 + 144;
    v26 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 140);
    LODWORD(v27) = *(_DWORD *)(a1 + 136);
  }
  HIDWORD(v27) = v5;
  DWORD1(v34[0]) = 0;
  *(_QWORD *)(a1 + 136) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v4);
  v6 = *(_QWORD *)(a1 + 152);
  v23 = v6;
  v7 = *(_DWORD *)(a1 + 164);
  v24 = *(_DWORD *)(a1 + 160);
  v25 = v7;
  v33 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)&v34[0] = 0;
  *(_QWORD *)(a1 + 160) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v8);
  if (HIDWORD(v27))
  {
    v10 = v26;
    v11 = 8 * HIDWORD(v27);
    do
    {
      v12 = *v10++;
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    v13 = v6 + 40 * v7;
    v14 = a1 + 56;
    do
    {
      v15 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v33 = v15;
      v16 = *(_OWORD *)(v6 + 24);
      v34[0] = *(_OWORD *)(v6 + 8);
      v34[1] = v16;
      if (v15)
      {
        v17 = v15 + 2;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
      }
      WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v33);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v21);
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 120);
  v11 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34F2CD8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 120) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34F2D28[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2CD8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BYTE *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  _BYTE v18[8];
  _BYTE v19[48];
  unsigned int v20;
  _BYTE v21[48];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34F2CD8[v5])(v18, v4);
LABEL_13:
    *(_BYTE *)(v4 + 8) = 0;
    v12 = v4 + 8;
    *(_DWORD *)(v12 + 56) = -1;
    *(_DWORD *)(v12 + 48) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v12, a3 + 8);
    *(_DWORD *)(v12 + 56) = 1;
    return result;
  }
  v19[0] = 0;
  v20 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, a3 + 8);
  v8 = *(unsigned int *)(a2 + 56);
  if (v20 != -1 || (_DWORD)v8 != -1)
  {
    v9 = (_BYTE *)(a2 + 8);
    v10 = v20 == -1;
    if (v20 == -1)
      v11 = -1;
    else
      v11 = v20;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E34F2D40[v11])(v21, v19, v9);
    }
    else
    {
      v14 = v20 - 1 < 0xFFFFFFFE || (v8 + 1) < 2;
      if (v14)
        v15 = v19;
      else
        v15 = (_BYTE *)(a2 + 8);
      if (v14)
        v16 = v9;
      else
        v16 = v19;
      v21[0] = 0;
      v22 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v21, (uint64_t)v16);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>((uint64_t)v16, (uint64_t)v15);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>((uint64_t)v15, (uint64_t)v21);
      if (v22 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34F2CF0[v22])(&v17, v21);
    }
  }
  if (v20 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34F2CF0[v20])(v21, v19);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2CD8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F2CF0[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34F2D50[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _BYTE v7[32];

  v3 = *a2;
  *(_OWORD *)v7 = a2[1];
  *(_OWORD *)&v7[16] = a2[2];
  v4 = *(__int128 *)((char *)a3 + 26);
  v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  *(__int128 *)((char *)a2 + 26) = v4;
  *a3 = v3;
  a3[1] = *(_OWORD *)v7;
  result = *(__n128 *)&v7[10];
  *(__int128 *)((char *)a3 + 26) = *(_OWORD *)&v7[10];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F2D70;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34F2D70;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _OWORD v27[3];
  unsigned __int8 v28;
  char v29;
  _BYTE v30[48];
  int v31;
  char v32;
  _BYTE v33[8];
  _OWORD v34[3];
  int v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    goto LABEL_31;
  v4 = *v3;
  if (!*v3)
    goto LABEL_31;
  v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *v3 = 0;
    v3[1] = 0;
    v13 = v3[3];
    if (v13)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13),
             v23 = *v3,
             v24 = v3[1],
             v25 = v3[3],
             *v3 = 0,
             v3[1] = 0,
             v25)
          ? (v26 = v24 == 0)
          : (v26 = 1),
            v26))
      {
        v11 = 0;
        v12 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        v12 = *v3;
        v11 = v3[1];
      }
    }
    goto LABEL_19;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v11 = v5;
    v12 = v4;
LABEL_19:
    *v3 = 0;
    v3[1] = 0;
    v14 = v3[3];
    if (v14)
      v15 = v11 == 0;
    else
      v15 = 1;
    if (!v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
    goto LABEL_24;
  }
  if (v7)
  {
    IPC::Decoder::decode<WebCore::PhotoSettings>(v3, (uint64_t)v27);
    v8 = v28;
    if (v28)
    {
      v34[0] = v27[0];
      v34[1] = v27[1];
      v34[2] = v27[2];
      v35 = 0;
      v8 = 1;
      goto LABEL_11;
    }
  }
  else
  {
    IPC::Decoder::decode<WTF::String>(v3, v27);
    v8 = BYTE8(v27[0]);
    if (BYTE8(v27[0]))
    {
      *(_QWORD *)&v34[0] = *(_QWORD *)&v27[0];
      v8 = 1;
      v35 = 1;
      goto LABEL_11;
    }
  }
  v33[0] = 0;
LABEL_11:
  v36 = v8;
  if (!v8)
  {
LABEL_24:
    v16 = *v3;
    v17 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v18 = v3[3];
    if (v18)
      v19 = v17 == 0;
    else
      v19 = 1;
    if (!v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    v29 = 0;
    v32 = 0;
LABEL_30:
    v20 = *v3;
    v21 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v22 = v3[3];
    if (v22)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
        if (v32)
          goto LABEL_15;
      }
    }
LABEL_31:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 56) = 1;
    return result;
  }
  v30[0] = 0;
  v31 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)v34);
  v32 = 1;
  if (v36)
  {
    if (v35 != -1)
    {
      ((void (*)(_OWORD *, _OWORD *))off_1E34F2CF0[v35])(v27, v34);
      if (!v32)
        goto LABEL_30;
    }
  }
LABEL_15:
  *(_BYTE *)(a2 + 8) = 0;
  v9 = a2 + 8;
  *(_DWORD *)(v9 + 48) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v30);
  if (v32)
  {
    if (v31 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34F2CF0[v31])(v33, v30);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PhotoSettings>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PhotoSettings,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F2D98;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F2D98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  __int16 v11;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  v11 = *(_WORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeVideoSource::clone(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  __int128 v40;
  WTF *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF *v46;
  void *v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  WebKit::UserMediaCaptureManager *v63;
  _BYTE v64[32];
  WTF::StringImpl *v65[2];
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 v68;
  _BYTE v69[22];
  _DWORD *v70;
  _DWORD *v71;
  __int128 v72;
  void *v73;
  int v74;
  int v75;
  __int128 v76;
  _OWORD v77[52];
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  char v84;
  __int128 v85;
  __int16 v86;
  __int16 v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 294) || *(_BYTE *)(v2 + 1417))
  {
    v3 = *(uint64_t **)(a1 + 16);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 312));
    v4 = *v3;
    *v3 = v2;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 312));
    return;
  }
  v5 = WTF::fastMalloc((WTF *)0xB50);
  v6 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy((uint64_t)v64, v6, v2 + 336, *(unsigned __int8 *)(v2 + 376), v2 + 384);
  v7 = WebCore::RealtimeMediaSource::deviceIDHashSalts((WebCore::RealtimeMediaSource *)v2);
  v8 = *(WTF::StringImpl **)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)v8 += 2;
  v88 = v8;
  v9 = *(WTF::StringImpl **)(v7 + 8);
  if (v9)
    *(_DWORD *)v9 += 2;
  v89 = v9;
  v10 = *(_QWORD *)(v2 + 1424);
  WebCore::RealtimeMediaSource::RealtimeMediaSource();
  *(_QWORD *)(v5 + 304) = off_1E34E6488;
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v11 + 24) = v5;
  *(_QWORD *)v5 = off_1E34F2620;
  *(_QWORD *)(v5 + 304) = &unk_1E34F27D8;
  *(_QWORD *)(v5 + 312) = v11;
  *(_QWORD *)(v5 + 320) = *(_QWORD *)v64;
  v12 = *(_OWORD *)&v64[8];
  *(_OWORD *)&v64[8] = 0u;
  *(_OWORD *)(v5 + 328) = v12;
  *(_BYTE *)(v5 + 344) = v64[24];
  v13 = *(_OWORD *)v65;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)(v5 + 352) = v13;
  *(_DWORD *)(v5 + 368) = (_DWORD)v66;
  *(_BYTE *)(v5 + 376) = (_BYTE)v67;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v5 + 384, (uint64_t)&v68);
  v15 = v78;
  v78 = 0;
  *(_QWORD *)(v5 + 1328) = v15;
  v16 = v79;
  v79 = 0;
  *(_QWORD *)(v5 + 1336) = v16;
  *(_BYTE *)(v5 + 1344) = v80;
  *(_QWORD *)(v5 + 1376) = 0;
  *(_OWORD *)(v5 + 1352) = v81;
  v81 = 0u;
  *(_QWORD *)(v5 + 1368) = v82;
  v82 = 0;
  *(_DWORD *)(v5 + 1376) = v83;
  v83 = 0;
  *(_BYTE *)(v5 + 1384) = v84;
  v17 = v85;
  v85 = 0u;
  *(_OWORD *)(v5 + 1392) = v17;
  *(_WORD *)(v5 + 1408) = v86;
  *(_WORD *)(v5 + 1416) = v87;
  *(_QWORD *)(v5 + 1424) = v10;
  *(_BYTE *)(v5 + 1432) = 0;
  *(_BYTE *)(v5 + 2400) = 0;
  *(_BYTE *)(v5 + 2504) = 0;
  *(_OWORD *)(v5 + 2472) = 0u;
  *(_OWORD *)(v5 + 2488) = 0u;
  *(_OWORD *)(v5 + 2440) = 0u;
  *(_OWORD *)(v5 + 2456) = 0u;
  *(_OWORD *)(v5 + 2408) = 0u;
  *(_OWORD *)(v5 + 2424) = 0u;
  *(_QWORD *)(v5 + 2590) = 0;
  *(_OWORD *)(v5 + 2576) = 0u;
  *(_OWORD *)(v5 + 2560) = 0u;
  *(_OWORD *)(v5 + 2544) = 0u;
  *(_OWORD *)(v5 + 2528) = 0u;
  *(_OWORD *)(v5 + 2512) = 0u;
  *(_BYTE *)(v5 + 2600) = 0;
  *(_BYTE *)(v5 + 2744) = 0;
  *(_QWORD *)(v5 + 2757) = 0;
  *(_QWORD *)(v5 + 2752) = 0;
  *(_BYTE *)(v5 + 2784) = 0;
  *(_OWORD *)(v5 + 2768) = 0u;
  *(_QWORD *)(v5 + 2808) = 0;
  *(_OWORD *)(v5 + 2792) = 0u;
  *(_WORD *)(v5 + 2816) = 4;
  *(_BYTE *)(v5 + 2818) = 0;
  *(_QWORD *)(v5 + 2824) = 0x3FF0000000000000;
  *(_QWORD *)(v5 + 2846) = 0;
  *(_OWORD *)(v5 + 2832) = 0u;
  *(_QWORD *)v5 = off_1E34F2818;
  *(_QWORD *)(v5 + 304) = &unk_1E34F29D0;
  *(_QWORD *)(v5 + 2888) = 0;
  *(_OWORD *)(v5 + 2856) = 0u;
  *(_OWORD *)(v5 + 2872) = 0u;
  v18 = *(uint64_t **)(a1 + 16);
  v19 = *v18;
  *v18 = v5;
  if (v19)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v19 + 312));
  v20 = v89;
  v89 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v88;
  v88 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy((unsigned __int8 ***)v64);
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (_BYTE *)(v22 + 8);
  v24 = *(_QWORD *)(v2 + 32);
  if (v24)
  {
    if (v24 == v2 + 8)
    {
      *(_QWORD *)&v64[24] = v64;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v2 + 8) + 24))(v2 + 8, v64);
    }
    else
    {
      *(_QWORD *)&v64[24] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    }
  }
  else
  {
    *(_QWORD *)&v64[24] = 0;
  }
  if (v64 != v23)
  {
    v25 = *(_QWORD *)&v64[24];
    v26 = *(_BYTE **)(v22 + 32);
    if (*(_BYTE **)&v64[24] == v64)
    {
      if (v26 == v23)
      {
        (*(void (**)(_BYTE *, WTF::StringImpl **))(*(_QWORD *)v64 + 24))(v64, &v88);
        (*(void (**)(_QWORD))(**(_QWORD **)&v64[24] + 32))(*(_QWORD *)&v64[24]);
        *(_QWORD *)&v64[24] = 0;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v22 + 32) + 24))(*(_QWORD *)(v22 + 32), v64);
        (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 32) + 32))(*(_QWORD *)(v22 + 32));
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)&v64[24] = v64;
        (*((void (**)(WTF::StringImpl **, _BYTE *))v88 + 3))(&v88, v23);
        (*((void (**)(WTF::StringImpl **))v88 + 4))(&v88);
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v64 + 24))(v64, v23);
        (*(void (**)(_QWORD))(**(_QWORD **)&v64[24] + 32))(*(_QWORD *)&v64[24]);
        *(_QWORD *)&v64[24] = *(_QWORD *)(v22 + 32);
      }
      *(_QWORD *)(v22 + 32) = v23;
    }
    else if (v26 == v23)
    {
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v22 + 8) + 24))(v23, v64);
      (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 32) + 32))(*(_QWORD *)(v22 + 32));
      *(_QWORD *)(v22 + 32) = *(_QWORD *)&v64[24];
      *(_QWORD *)&v64[24] = v64;
    }
    else
    {
      *(_QWORD *)&v64[24] = *(_QWORD *)(v22 + 32);
      *(_QWORD *)(v22 + 32) = v25;
    }
  }
  v27 = *(_QWORD **)&v64[24];
  if (*(_BYTE **)&v64[24] == v64)
  {
    v28 = 4;
    v27 = v64;
    goto LABEL_37;
  }
  if (*(_QWORD *)&v64[24])
  {
    v28 = 5;
LABEL_37:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  v29 = **(_QWORD **)(a1 + 16);
  v30 = *(_OWORD *)(v2 + 2768);
  *(_OWORD *)v64 = *(_OWORD *)(v2 + 2752);
  *(_OWORD *)&v64[16] = v30;
  LOBYTE(v65[0]) = *(_BYTE *)(v2 + 2784);
  v31 = *(WTF::StringImpl **)(v2 + 2792);
  if (v31)
    *(_DWORD *)v31 += 2;
  v65[1] = v31;
  v32 = *(WTF::StringImpl **)(v2 + 2800);
  if (v32)
    *(_DWORD *)v32 += 2;
  v66 = v32;
  v33 = *(WTF::StringImpl **)(v2 + 2808);
  if (v33)
    *(_DWORD *)v33 += 2;
  v67 = v33;
  v34 = *(_OWORD *)(v2 + 2832);
  v68 = *(_OWORD *)(v2 + 2816);
  *(_OWORD *)v69 = v34;
  *(_QWORD *)&v69[14] = *(_QWORD *)(v2 + 2846);
  WebKit::RemoteRealtimeMediaSource::setSettings(v29, (uint64_t)v64);
  v36 = v67;
  v67 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v66;
  v66 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v65[1];
  v65[1] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v35);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = **(_QWORD **)(a1 + 16);
  v40 = *(_OWORD *)(v2 + 2424);
  *(_OWORD *)v64 = *(_OWORD *)(v2 + 2408);
  *(_OWORD *)&v64[16] = v40;
  *(_OWORD *)v65 = *(_OWORD *)(v2 + 2440);
  v41 = (WTF *)*(unsigned int *)(v2 + 2468);
  v66 = 0;
  LODWORD(v67) = 0;
  HIDWORD(v67) = (_DWORD)v41;
  if ((_DWORD)v41)
  {
    v42 = (WTF::StringImpl *)WTF::fastMalloc(v41);
    LODWORD(v67) = (_DWORD)v41;
    v66 = v42;
    memcpy(v42, *(const void **)(v2 + 2456), *(unsigned int *)(v2 + 2468));
  }
  v69[16] = *(_BYTE *)(v2 + 2504);
  v43 = *(_OWORD *)(v2 + 2488);
  v68 = *(_OWORD *)(v2 + 2472);
  *(_OWORD *)v69 = v43;
  v44 = *(_DWORD **)(v2 + 2512);
  if (v44)
    *v44 += 2;
  v70 = v44;
  v45 = *(_DWORD **)(v2 + 2520);
  if (v45)
    *v45 += 2;
  v71 = v45;
  v72 = *(_OWORD *)(v2 + 2528);
  v46 = (WTF *)*(unsigned int *)(v2 + 2556);
  v73 = 0;
  v74 = 0;
  v75 = (int)v46;
  if ((_DWORD)v46)
  {
    v47 = (void *)WTF::fastMalloc(v46);
    v74 = (int)v46;
    v73 = v47;
    memcpy(v47, *(const void **)(v2 + 2544), *(unsigned int *)(v2 + 2556));
  }
  v48 = (uint64_t *)(v2 + 320);
  v76 = *(_OWORD *)(v2 + 2560);
  v77[0] = *(_OWORD *)(v2 + 2576);
  *(_QWORD *)((char *)v77 + 14) = *(_QWORD *)(v2 + 2590);
  WebKit::RemoteRealtimeMediaSource::setCapabilities(v39, (__int128 *)v64);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v64, v49);
  v50 = *(_QWORD *)(v2 + 1424);
  v51 = **(_QWORD **)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v51 + 312));
  *(_QWORD *)v64 = v51;
  WebKit::UserMediaCaptureManager::addSource(v50, (uint64_t *)v64);
  if (*(_QWORD *)v64)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(*(_QWORD *)v64 + 312));
  v52 = *(_QWORD *)(v2 + 1424) + 144;
  v53 = **(_QWORD **)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v53 + 312));
  *(_QWORD *)v64 = v53;
  WebKit::RemoteCaptureSampleManager::addSource(v52, (uint64_t *)v64);
  if (*(_QWORD *)v64)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(*(_QWORD *)v64 + 312));
  v54 = *(_QWORD *)(v2 + 72);
  v88 = *(WTF::StringImpl **)(**(_QWORD **)(a1 + 16) + 320);
  v55 = *(_QWORD *)(v2 + 328);
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 1464;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  *(_QWORD *)v64 = v56;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v56, v48);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v56, (uint64_t *)&v88);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v56, 8uLL, 8) = v54;
  IPC::Connection::sendMessageImpl(v55, (uint64_t *)v64, 0, 0);
  v58 = *(IPC::Encoder **)v64;
  *(_QWORD *)v64 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v57);
    WTF::fastFree(v59, v60);
  }
  v61 = **(_QWORD **)(a1 + 16);
  v64[0] = 1;
  v62 = *(_QWORD *)(v61 + 32);
  if (v62)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
  }
  else
  {
    v63 = (WebKit::UserMediaCaptureManager *)std::__throw_bad_function_call[abi:sn180100]();
    WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(v63);
  }
}

void WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this)
{
  WebCore::RealtimeMediaSourceCenter *v2;
  WebCore::RealtimeMediaSourceCenter *v3;
  WebKit::WebProcess *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebProcess *v13;
  char v14;

  *(_QWORD *)this = off_1E34F2E20;
  *((_QWORD *)this + 1) = &unk_1E34F2E60;
  WebCore::RealtimeMediaSourceCenter::singleton(this);
  v2 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::unsetAudioCaptureFactory();
  WebCore::RealtimeMediaSourceCenter::singleton(v2);
  v3 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::unsetDisplayCaptureFactory();
  WebCore::RealtimeMediaSourceCenter::singleton(v3);
  WebCore::RealtimeMediaSourceCenter::unsetVideoCaptureFactory();
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)v4 + 5, 0x90u);
  WebKit::RemoteCaptureSampleManager::stopListeningForIPC((WebKit::UserMediaCaptureManager *)((char *)this + 144));
  WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager((WebKit::UserMediaCaptureManager *)((char *)this + 144), v5);
  *((_QWORD *)this + 7) = &off_1E34F2EF8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v6);
  *((_QWORD *)this + 4) = &off_1E34F2F38;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v7);
  WebCore::CaptureDeviceManager::~CaptureDeviceManager((WebKit::UserMediaCaptureManager *)((char *)this + 32));
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = v9 + 8;
      do
      {
        if (*(_QWORD *)(v11 - 8) != -1)
        {
          v12 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v14, v11);
          *(_DWORD *)(v11 + 8) = -1;
        }
        v11 += 24;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v8);
}

{
  WTF *v1;
  void *v2;

  WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(this);
  WTF::fastFree(v1, v2);
}

void WebKit::UserMediaCaptureManager::AudioFactory::~AudioFactory(WebKit::UserMediaCaptureManager::AudioFactory *this, void *a2)
{
  *(_QWORD *)this = &off_1E34F2EF8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
}

{
  *(_QWORD *)this = &off_1E34F2EF8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager::~NoOpCaptureDeviceManager(WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager *this, void *a2)
{
  *(_QWORD *)this = &off_1E34F2F38;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
  WebCore::CaptureDeviceManager::~CaptureDeviceManager(this);
}

{
  *(_QWORD *)this = &off_1E34F2F38;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
  WebCore::CaptureDeviceManager::~CaptureDeviceManager(this);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this)
{
  WebKit::UserMediaCaptureManager::~UserMediaCaptureManager((WebKit::UserMediaCaptureManager *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::UserMediaCaptureManager::~UserMediaCaptureManager((WebKit::UserMediaCaptureManager *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::UserMediaCaptureManager::addSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *result;
  _BYTE v4[24];
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *a2;
  v7 = *(_QWORD *)(*a2 + 320);
  *a2 = 0;
  v5 = v2;
  v6 = 1;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>((uint64_t *)(a1 + 24), &v7, (uint64_t)&v5, (uint64_t)v4);
  if (v6 != -1)
    return (uint64_t *)((uint64_t (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v6])(v4, &v5);
  return result;
}

{
  uint64_t v2;
  uint64_t *result;
  _BYTE v4[24];
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *a2;
  v7 = *(_QWORD *)(*a2 + 320);
  *a2 = 0;
  v5 = v2;
  v6 = 2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>((uint64_t *)(a1 + 24), &v7, (uint64_t)&v5, (uint64_t)v4);
  if (v6 != -1)
    return (uint64_t *)((uint64_t (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v6])(v4, &v5);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(_DWORD *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 24 * v22;
        goto LABEL_34;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      *((_DWORD *)v18 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *((unsigned int *)v16 + 4);
  v21 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 == -1)
      goto LABEL_19;
  }
  else if ((_DWORD)v21 == -1)
  {
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(&v32, v16 + 1);
    *((_DWORD *)v16 + 4) = -1;
    goto LABEL_19;
  }
  v31 = v16 + 1;
  result = (uint64_t *)((uint64_t (*)(uint64_t **))off_1E34F2F98[v21])(&v31);
LABEL_19:
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v25 = *v6;
      if (*v6)
        LODWORD(v28) = *(_DWORD *)(v25 - 4);
      else
        LODWORD(v28) = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  v30 = v25 + 24 * v28;
  v29 = 1;
LABEL_34:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::removeSource(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 24);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v7);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (uint64_t)result);
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceStopped(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *result;
  uint64_t *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 *v12;

  v10 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v10);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v6 += 3 * *((unsigned int *)v6 - 1);
  if (v6 != result)
  {
    if (a3)
      v7 = 256;
    else
      v7 = 0;
    v11 = v7 | a3;
    v8 = *((unsigned int *)result + 4);
    if ((_DWORD)v8 == -1)
    {
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::sourceMutedChanged(v9);
    }
    else
    {
      v12 = &v11;
      return (uint64_t *)((uint64_t (*)(__int16 **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager13sourceStoppedENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbE3__0JZNS9_13sourceStoppedESF_bE3__1ZNS9_13sourceStoppedESF_bE3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsISN_EENS6_21DefaultRefDerefTraitsISN_EEEENSM_INS8_25RemoteRealtimeVideoSourceENSO_IST_EENSQ_IST_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, result + 1);
    }
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceMutedChanged(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;

  v12 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v12);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v8 += 3 * *((unsigned int *)v8 - 1);
  if (v8 != result)
  {
    if (a4)
      v9 = 256;
    else
      v9 = 0;
    v13 = v9 | a3 | ((v9 | a3) << 16);
    v10 = *((unsigned int *)result + 4);
    if ((_DWORD)v10 == -1)
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::sourceSettingsChanged(v11);
    }
    else
    {
      v14 = &v13;
      return (uint64_t *)((uint64_t (*)(int **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager18sourceMutedChangedENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbE3__0JZNS9_18sourceMutedChangedESF_bbE3__1ZNS9_18sourceMutedChangedESF_bbE3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsISN_EENS6_21DefaultRefDerefTraitsISN_EEEENSM_INS8_25RemoteRealtimeVideoSourceENSO_IST_EENSQ_IST_EEEEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v14, result + 1);
    }
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceSettingsChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD *v11;

  v9 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v9);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v6 += 3 * *((unsigned int *)v6 - 1);
  if (v6 != result)
  {
    v10[0] = a3;
    v10[1] = a3;
    v7 = *((unsigned int *)result + 4);
    if ((_DWORD)v7 == -1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::sourceConfigurationChanged(v8);
    }
    else
    {
      v11 = v10;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager21sourceSettingsChangedENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSB_27RealtimeMediaSourceSettingsEE3__0JZNS9_21sourceSettingsChangedESF_SH_E3__1ZNS9_21sourceSettingsChangedESF_SH_E3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSO_INS8_25RemoteRealtimeVideoSourceENSQ_ISV_EENSS_ISV_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v11, result + 1);
    }
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceConfigurationChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD *v15;

  v13 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v13);
  v10 = *(uint64_t **)(a1 + 24);
  if (v10)
    v10 += 3 * *((unsigned int *)v10 - 1);
  if (v10 != result)
  {
    v14[0] = a3;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a3;
    v14[4] = a4;
    v14[5] = a5;
    v11 = *((unsigned int *)result + 4);
    if ((_DWORD)v11 == -1)
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(v12);
    }
    else
    {
      v15 = v14;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager26sourceConfigurationChangedENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS6_6StringEONSB_27RealtimeMediaSourceSettingsEONSB_31RealtimeMediaSourceCapabilitiesEE3__0JZNS9_26sourceConfigurationChangedESF_SH_SJ_SL_E3__1ZNS9_26sourceConfigurationChangedESF_SH_SJ_SL_E3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIST_EENS6_21DefaultRefDerefTraitsIST_EEEENSS_INS8_25RemoteRealtimeVideoSourceENSU_ISZ_EENSW_ISZ_EEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v15, result + 1);
    }
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD *v11;

  v9 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v9);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v6 += 3 * *((unsigned int *)v6 - 1);
  if (v6 != result)
  {
    v10[0] = a3;
    v10[1] = a3;
    v7 = *((unsigned int *)result + 4);
    if ((_DWORD)v7 == -1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::applyConstraintsFailed(v8);
    }
    else
    {
      v11 = v10;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager25applyConstraintsSucceededENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSB_27RealtimeMediaSourceSettingsEE3__0JZNS9_25applyConstraintsSucceededESF_SH_E3__1ZNS9_25applyConstraintsSucceededESF_SH_E3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSO_INS8_25RemoteRealtimeVideoSourceENSQ_ISV_EENSS_ISV_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v11, result + 1);
    }
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::applyConstraintsFailed(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD *v13;

  v11 = a2;
  v10 = a3;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v11);
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    v7 += 3 * *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    v12[0] = &v10;
    v12[1] = a4;
    v12[2] = &v10;
    v12[3] = a4;
    v8 = *((unsigned int *)result + 4);
    if ((_DWORD)v8 == -1)
    {
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebKit::UserMediaCaptureManager::AudioFactory::createAudioCaptureSource(v9);
    }
    else
    {
      v13 = v12;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit23UserMediaCaptureManager22applyConstraintsFailedENS6_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSB_19MediaConstraintTypeEONS6_6StringEE3__0JZNS9_22applyConstraintsFailedESF_SG_SI_E3__1ZNS9_22applyConstraintsFailedESF_SG_SI_E3__2EEEEEJRNS0_6__implIJDnNS6_3RefINS8_25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsISQ_EENS6_21DefaultRefDerefTraitsISQ_EEEENSP_INS8_25RemoteRealtimeVideoSourceENSR_ISW_EENST_ISW_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v13, result + 1);
    }
  }
  return result;
}

_QWORD *WebKit::UserMediaCaptureManager::AudioFactory::createAudioCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BOOL4 v10;
  _QWORD *result;

  if (*(_BYTE *)(a1 + 16))
  {
    WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
    v10 = *(_BYTE *)(a1 + 16) != 0;
  }
  else
  {
    v10 = 0;
  }
  result = WebKit::RemoteRealtimeAudioSource::create(a2, a4, a3, *(_QWORD *)(a1 + 8), v10, (uint64_t *)a5);
  *(_QWORD *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

_QWORD *WebKit::UserMediaCaptureManager::VideoFactory::createVideoCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WebKit::WebProcess *v11;
  WebKit::GPUProcessConnection *v12;
  unsigned int *v13;
  unsigned int v14;
  _BOOL4 v15;
  _QWORD *result;
  WebKit::WebProcess *v17;
  unsigned int *v18;

  if (*(_BYTE *)(a1 + 16))
  {
    v10 = *(_QWORD *)(a1 + 8) + 144;
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v17);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v11);
    v13 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v12);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v18 = v13;
    WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(v10, (uint64_t *)&v18);
    if (v18)
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v18);
    v15 = *(_BYTE *)(a1 + 16) != 0;
  }
  else
  {
    v15 = 0;
  }
  result = WebKit::RemoteRealtimeVideoSource::create(a2, a4, a3, *(_QWORD *)(a1 + 8), v15, (uint64_t *)a5);
  *(_QWORD *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

_QWORD *WebKit::UserMediaCaptureManager::DisplayFactory::createDisplayCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WebKit::WebProcess *v10;
  WebKit::GPUProcessConnection *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _BOOL4 v15;
  _QWORD *result;
  WebKit::WebProcess *v17;
  unsigned int *v18;

  if (*(_BYTE *)(a1 + 16))
  {
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v10 = WebKit::WebProcess::WebProcess(v17);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
    }
    v11 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v10);
    v12 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v11);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = *(_QWORD *)(a1 + 8) + 144;
    v18 = v12;
    WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(v14, (uint64_t *)&v18);
    if (v18)
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v18);
    v15 = *(_BYTE *)(a1 + 16) != 0;
  }
  else
  {
    v15 = 0;
  }
  result = WebKit::RemoteRealtimeVideoSource::create(a2, a4, a3, *(_QWORD *)(a1 + 8), v15, (uint64_t *)a5);
  *(_QWORD *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

void WebKit::UserMediaCaptureManager::VideoFactory::~VideoFactory(WebKit::UserMediaCaptureManager::VideoFactory *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::UserMediaCaptureManager::VideoFactory::videoCaptureDeviceManager(WebKit::UserMediaCaptureManager::VideoFactory *this)
{
  return *((_QWORD *)this + 1) + 32;
}

void WebKit::UserMediaCaptureManager::DisplayFactory::~DisplayFactory(WebKit::UserMediaCaptureManager::DisplayFactory *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::UserMediaCaptureManager::DisplayFactory::displayCaptureDeviceManager(WebKit::UserMediaCaptureManager::DisplayFactory *this)
{
  return *((_QWORD *)this + 1) + 32;
}

uint64_t WebKit::UserMediaCaptureManager::AudioFactory::audioCaptureDeviceManager(WebKit::UserMediaCaptureManager::AudioFactory *this)
{
  return *((_QWORD *)this + 1) + 32;
}

uint64_t WebKit::UserMediaCaptureManager::AudioFactory::speakerDevices(WebKit::UserMediaCaptureManager::AudioFactory *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebCore::AudioCaptureFactory::computeSpeakerDevices(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager::captureDevices(WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::DisplayCaptureManager::requiresCaptureDevicesEnumeration(WebCore::DisplayCaptureManager *this)
{
  return 0;
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 312));
  return result;
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 312));
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *result;
  uint64_t *v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 16;
    do
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v43 = v12;
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (uint64_t *)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = v20 + 24 * v27;
          v33 = *(_DWORD *)(v30 + 16);
          v32 = (_DWORD *)(v30 + 16);
          v31 = v33;
          if (v33 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v45, v20 + 24 * v27 + 8);
          *v32 = -1;
          *v28 = *v14;
          v34 = v20 + 24 * v29;
          *(_BYTE *)(v34 + 8) = 0;
          v35 = v34 + 8;
          v36 = v4 + 24 * v11;
          *(_DWORD *)(v35 + 8) = -1;
          v37 = *(unsigned int *)(v36 + 16);
          if ((_DWORD)v37 != -1)
          {
            v38 = v36 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1E34F2F80[v37])(&v47, v35, v36 + 8);
            *(_DWORD *)(v35 + 8) = v37;
            v39 = *(unsigned int *)(v4 + 24 * v11 + 16);
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(&v46, v38);
          }
          *(_DWORD *)(v4 + 24 * v11 + 16) = -1;
          v12 = v43;
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v19 = *(_DWORD *)(v16 + 16);
          v18 = (_DWORD *)(v16 + 16);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v17])(&v44, v4 + 24 * v11 + 8);
          *v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned __int8 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned __int8 *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v7 + 312));
  return result;
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned __int8 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned __int8 *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v7 + 312));
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  v3 = result;
  *(_QWORD *)a2 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_25RemoteRealtimeVideoSourceENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v4])(&v11, a2 + 8);
  v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v5 = *(_DWORD *)(v6 - 12) - 1;
  *(_DWORD *)(v6 - 12) = v5;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_1,WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebKit::RemoteRealtimeVideoSource,WebKit::RemoteRealtimeAudioSource<WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(_BYTE **a1, WebCore::RealtimeMediaSource **a2)
{
  _BYTE *v2;
  WebCore::RealtimeMediaSource *v3;

  v2 = *a1;
  v3 = *a2;
  if (*v2)
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)v3 + 240))(v3);
  else
    return WebCore::RealtimeMediaSource::end(v3, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_1,WebKit::UserMediaCaptureManager::sourceStopped(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebKit::RemoteRealtimeVideoSource,WebKit::RemoteRealtimeAudioSource<WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t *a1, WebCore::RealtimeMediaSource **a2)
{
  uint64_t v2;
  WebCore::RealtimeMediaSource *v3;

  v2 = *a1;
  v3 = *a2;
  if (*(_BYTE *)(v2 + 1))
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)v3 + 240))(v3);
  else
    return WebCore::RealtimeMediaSource::end(v3, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_0,WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1,WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebKit::RemoteRealtimeVideoSource,WebKit::RemoteRealtimeAudioSource<WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t *a1, WebCore::RealtimeMediaSource **a2)
{
  uint64_t v2;
  WebCore::RealtimeMediaSource *v3;

  v2 = *a1;
  v3 = *a2;
  *((_BYTE *)v3 + 1416) = *(_BYTE *)(v2 + 1);
  return WebCore::RealtimeMediaSource::notifyMutedChange(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_0,WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1,WebKit::UserMediaCaptureManager::sourceMutedChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebKit::RemoteRealtimeVideoSource,WebKit::RemoteRealtimeAudioSource<WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t *a1, WebCore::RealtimeMediaSource **a2)
{
  uint64_t v2;
  WebCore::RealtimeMediaSource *v3;

  v2 = *a1;
  v3 = *a2;
  *((_BYTE *)v3 + 1416) = *(_BYTE *)(v2 + 3);
  return WebCore::RealtimeMediaSource::notifyMutedChange(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &&)::$_0,WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_1,WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(uint64_t **a1, uint64_t *a2)
{
  return WebKit::RemoteRealtimeMediaSource::setSettings(*a2, **a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &&)::$_0,WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_1,WebKit::UserMediaCaptureManager::sourceSettingsChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(uint64_t a1, uint64_t *a2)
{
  return WebKit::RemoteRealtimeMediaSource::setSettings(*a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>,WTF::DefaultRefDerefTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>,std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &<WebKit::RemoteRealtimeVideoSource,std::__variant_detail::__base<WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>,WTF::Ref<WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>>> &>(const WTF::String ***a1, WTF::StringImpl ***a2)
{
  return WebKit::RemoteRealtimeMediaSource::configurationChanged(*a2, **a1, (uint64_t)(*a1)[1], (__int128 *)(*a1)[2]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>,WTF::DefaultRefDerefTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>,std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &<WebKit::RemoteRealtimeVideoSource,std::__variant_detail::__base<WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>,WTF::Ref<WTF::RawPtrTraits<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_1,WebKit::UserMediaCaptureManager::sourceConfigurationChanged(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings &&)::$_2>> &&>>>> &>(uint64_t a1, WTF::StringImpl ***a2)
{
  return WebKit::RemoteRealtimeMediaSource::configurationChanged(*a2, *(const WTF::String **)(*(_QWORD *)a1 + 24), *(_QWORD *)(*(_QWORD *)a1 + 32), *(__int128 **)(*(_QWORD *)a1 + 40));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &&)::$_0,WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_1,WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  WebKit::RemoteRealtimeMediaSource::setSettings(*a2, **a1);
  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsSucceeded((WebKit::RemoteRealtimeMediaSourceProxy *)(v2 + 320));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &&)::$_0,WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_1,WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  WebKit::RemoteRealtimeMediaSource::setSettings(*a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsSucceeded((WebKit::RemoteRealtimeMediaSourceProxy *)(v2 + 320));
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &&)::$_0,WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &)::$_1,WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(char ***a1, _QWORD *a2)
{
  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsFailed(*a2 + 320, ***a1, (WTF::StringImpl **)(*a1)[1]);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &&)::$_0,WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &)::$_1,WebKit::UserMediaCaptureManager::applyConstraintsFailed(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraintType,WTF::String &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<WebKit::RemoteRealtimeVideoSource,WTF::Ref<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &>(uint64_t a1, _QWORD *a2)
{
  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraintsFailed(*a2 + 320, **(_BYTE **)(*(_QWORD *)a1 + 16), *(WTF::StringImpl ***)(*(_QWORD *)a1 + 24));
}

uint64_t *WebKit::UserMediaCaptureManager::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int16 v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _OWORD v53[2];
  char v54;
  WTF::StringImpl *v55[2];
  WTF::StringImpl *v56;
  __int128 v57;
  _BYTE v58[22];
  _OWORD v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  _DWORD *v64;
  _DWORD *v65;
  __int128 v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  _BYTE v71[22];
  char v72;
  WTF::StringImpl *v73;
  unsigned __int8 v74;
  _OWORD v75[2];
  char v76;
  __int128 v77;
  WTF::StringImpl *v78;
  __int128 v79;
  _BYTE v80[22];
  unsigned __int8 v81;
  _OWORD v82[3];
  const void *v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  char v87;
  _DWORD *v88;
  _DWORD *v89;
  __int128 v90;
  const void *v91;
  unsigned int v92;
  __int128 v93;
  _BYTE v94[22];
  char v95;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5C3:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_49;
      v7 = v5;
      v8 = IPC::Decoder::decode<WebCore::MediaConstraintType>((uint64_t *)a3);
      if (v8 < 0x100u)
        goto LABEL_49;
      v9 = v8;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v82);
      if (!BYTE8(v82[0]))
        goto LABEL_49;
      v51 = v7;
      LOBYTE(v52) = v9;
      *(_QWORD *)&v53[0] = *(_QWORD *)&v82[0];
      BYTE8(v53[0]) = 1;
      this = WebKit::UserMediaCaptureManager::applyConstraintsFailed(v4, v7, v9, (uint64_t)v53);
      if (BYTE8(v53[0]))
      {
        this = *(uint64_t **)&v53[0];
        *(_QWORD *)&v53[0] = 0;
        if (this)
          goto LABEL_62;
      }
      return this;
    case 0x5C4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>>((uint64_t)&v51, (uint64_t *)a3);
      if (v58[16])
        WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(v4, v51, (uint64_t)&v52);
      return (uint64_t *)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v11);
    case 0x5C5:
      v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v13)
        goto LABEL_49;
      v14 = v12;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v73);
      if (!v74)
        goto LABEL_49;
      IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>((uint64_t *)a3, (uint64_t)v75);
      if (v81
        && (v16 = IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((unint64_t *)a3, v82), v95))
      {
        v18 = v74;
        if (!v74 || (v18 = v81) == 0)
        {
          __break(1u);
          goto LABEL_77;
        }
        v19 = v73;
        v73 = 0;
        v51 = v14;
        v52 = v19;
        v53[0] = v75[0];
        v53[1] = v75[1];
        v54 = v76;
        v20 = v77;
        v77 = 0u;
        *(_OWORD *)v55 = v20;
        v21 = v78;
        v78 = 0;
        v56 = v21;
        *(_QWORD *)&v58[14] = *(_QWORD *)&v80[14];
        *(_OWORD *)v58 = *(_OWORD *)v80;
        v57 = v79;
        v59[2] = v82[2];
        v59[1] = v82[1];
        v59[0] = v82[0];
        v60 = 0u;
        HIDWORD(v60) = v84;
        if (v84)
        {
          DWORD2(v60) = v84;
          *(_QWORD *)&v60 = WTF::fastMalloc((WTF *)v84);
          memcpy((void *)v60, v83, v84);
        }
        v61 = v85;
        v62 = v86;
        v63 = v87;
        v22 = v88;
        if (v88)
          *v88 += 2;
        v64 = v22;
        v23 = v89;
        if (v89)
          *v89 += 2;
        v65 = v23;
        v66 = v90;
        v67 = 0;
        v68 = 0;
        v69 = v92;
        if (v92)
        {
          v68 = v92;
          v67 = (void *)WTF::fastMalloc((WTF *)v92);
          memcpy(v67, v91, v92);
        }
        *(_QWORD *)&v71[14] = *(_QWORD *)&v94[14];
        v70 = v93;
        *(_OWORD *)v71 = *(_OWORD *)v94;
        v24 = 1;
        v72 = 1;
        if (v95)
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v82, v15);
      }
      else
      {
        v24 = 0;
        LOBYTE(v51) = 0;
        v72 = 0;
      }
      std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75, (WTF::StringImpl *)v15);
      if (v74)
      {
        v34 = v73;
        v73 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      if (v24)
      {
        this = WebKit::UserMediaCaptureManager::sourceConfigurationChanged(v4, v51, (uint64_t)&v52, (uint64_t)v53, (uint64_t)v59);
        if (v72)
        {
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v59, v35);
          v36 = v56;
          v56 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v10);
            else
              *(_DWORD *)v36 -= 2;
          }
          v39 = v55[1];
          v55[1] = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v10);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = v55[0];
          v55[0] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v10);
            else
              *(_DWORD *)v40 -= 2;
          }
          this = (uint64_t *)v52;
          v52 = 0;
          if (this)
          {
LABEL_62:
            if (*(_DWORD *)this == 2)
              return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
            else
              *(_DWORD *)this -= 2;
          }
        }
        return this;
      }
LABEL_49:
      v37 = *(_QWORD *)a3;
      v38 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (uint64_t *)*((_QWORD *)a3 + 3);
      if (!this || !v38)
        return this;
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v37);
    case 0x5C6:
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_72;
      v27 = *((_QWORD *)a3 + 1);
      v28 = *(_QWORD *)a3;
      v29 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v27 <= v29)
      {
        v18 = 0;
        v17 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v41 = *((_QWORD *)a3 + 3);
        if (v41)
        {
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v17 = *(_QWORD *)a3;
            v18 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v18 = 0;
            v17 = 0;
          }
        }
LABEL_66:
        v27 = 0;
        v28 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v16 = (WTF *)*((_QWORD *)a3 + 3);
        if (v16)
        {
LABEL_77:
          if (v18)
          {
            (*(void (**)(WTF *, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v17, v18);
            v28 = *(_QWORD *)a3;
            v27 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v27 = 0;
            v28 = 0;
          }
        }
        goto LABEL_67;
      }
      v30 = (unsigned __int8 *)(v28 + v29);
      *((_QWORD *)a3 + 2) = v30 + 1;
      if (!v28)
      {
        v18 = v27;
        v17 = 0;
        goto LABEL_66;
      }
      v31 = *v30;
      if (v31 >= 2)
      {
LABEL_67:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v42 = *((_QWORD *)a3 + 3);
        if (v42 && v27)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v28);
        goto LABEL_72;
      }
      if (v27 <= (unint64_t)&v30[-v28 + 1])
      {
        v43 = 0;
        v44 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v45 = *((_QWORD *)a3 + 3);
        if (v45)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          v43 = 0;
          v48 = *(_QWORD *)a3;
          v49 = *((_QWORD *)a3 + 1);
          v50 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v44 = 0;
          if (v50)
          {
            if (v49)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
              v44 = *(_QWORD *)a3;
              v43 = *((_QWORD *)a3 + 1);
            }
          }
        }
      }
      else
      {
        *((_QWORD *)a3 + 2) = v30 + 2;
        v32 = v30[1];
        if (v32 < 2)
          return WebKit::UserMediaCaptureManager::sourceMutedChanged(v4, v25, v31 != 0, v32 != 0);
        v43 = v27;
        v44 = v28;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v46 = *((_QWORD *)a3 + 3);
      if (v46 && v43)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
LABEL_72:
      v37 = *(_QWORD *)a3;
      v47 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (uint64_t *)*((_QWORD *)a3 + 3);
      if (this && v47)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v37);
      return this;
    case 0x5C7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>>((uint64_t)&v51, (uint64_t *)a3);
      if (v58[16])
        WebKit::UserMediaCaptureManager::sourceSettingsChanged(v4, v51, (uint64_t)&v52);
      return (uint64_t *)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v11);
    case 0x5C8:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v51);
      if (LOBYTE(v53[0]))
        return WebKit::UserMediaCaptureManager::sourceStopped(v4, v51, v52);
      return this;
    default:
      return this;
  }
}

uint64_t *`non-virtual thunk to'WebKit::UserMediaCaptureManager::didReceiveMessage(WebKit::UserMediaCaptureManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::UserMediaCaptureManager::didReceiveMessage((uint64_t *)this - 1, a2, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _OWORD v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = v4;
    IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>(a2, (uint64_t)v15);
    if (v21)
    {
      *(_QWORD *)(a1 + 102) = *(_QWORD *)&v20[14];
      v8 = v15[1];
      *(_OWORD *)(a1 + 8) = v15[0];
      *(_OWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 48) = v17;
      v9 = v19;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)v20;
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 40) = v16;
      v17 = 0uLL;
      v10 = v18;
      v18 = 0;
      *(_QWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 72) = v9;
      *(_BYTE *)(a1 + 112) = 1;
      return std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 112) = 0;
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 112) = 0;
  }
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

void WebKit::UserMediaCaptureManagerProxy::didReceiveMessage(WebKit::UserMediaCaptureManagerProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  unint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  _QWORD *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113[2];
  WTF::StringImpl *v114[2];
  _BYTE v115[24];
  _BYTE v116[504];
  uint64_t v117;
  _BYTE v118[56];
  _BYTE v119[56];
  _BYTE v120[56];
  uint64_t v121;
  _QWORD v122[2];
  char v123;
  char v124;
  _QWORD v125[2];
  char v126;
  BOOL v127;
  uint64_t v128;
  char v129;
  WTF::StringImpl *v130;
  char v131;
  __int128 v132;
  int v133;
  char v134;
  __int128 v135;
  char v136;
  _OWORD v137[3];
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;

  v3 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5B7:
      v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v7)
      {
        v8 = v6;
        IPC::Decoder::decode<WebCore::MediaConstraints>(v3, (uint64_t)v137);
        v10 = v142;
        if (v142)
        {
          v112 = v8;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v113, (uint64_t)v137);
          v11 = v139;
          v139 = 0;
          v122[0] = v11;
          v12 = v140;
          v140 = 0;
          v122[1] = v12;
          v123 = v141;
          v10 = 1;
        }
        else
        {
          LOBYTE(v112) = 0;
        }
        v124 = v10;
        std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v137, v9);
        if (v124)
          goto LABEL_58;
      }
      else
      {
        LOBYTE(v112) = 0;
        v124 = 0;
      }
      v90 = *v3;
      v91 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v92 = v3[3];
      if (v92)
      {
        if (v91)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v90);
          if (v124)
          {
LABEL_58:
            WebKit::UserMediaCaptureManagerProxy::applyConstraints((uint64_t)this, v112, (uint64_t)v113);
            if (v124)
            {
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v122, v82);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120, v83);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v84);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v85);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v117, v86);
            }
            return;
          }
        }
      }
      return;
    case 0x5B8:
      v56 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v57)
        goto LABEL_37;
      v58 = v56;
      v59 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v60)
        goto LABEL_37;
      v61 = v59;
      v62 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v63)
        goto LABEL_37;
      WebKit::UserMediaCaptureManagerProxy::clone((uint64_t)this, v58, v61, v62);
      return;
    case 0x5B9:
      v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v34)
      {
        LOBYTE(v112) = 0;
        v129 = 0;
        goto LABEL_62;
      }
      v35 = v33;
      IPC::Decoder::decode<WebCore::CaptureDevice>(v3, (uint64_t)&v130);
      if (!v134)
      {
        LOBYTE(v112) = 0;
        v129 = 0;
        goto LABEL_78;
      }
      IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>(v3, (uint64_t)&v135);
      if (!v136)
      {
        LOBYTE(v112) = 0;
        v129 = 0;
        goto LABEL_77;
      }
      IPC::Decoder::decode<WebCore::MediaConstraints>(v3, (uint64_t)v137);
      v39 = v142;
      if (!v142)
        goto LABEL_75;
      v40 = v3[1];
      v38 = (char *)*v3;
      v41 = v3[2] - *v3;
      if (v40 <= v41)
      {
        v93 = 0;
        v94 = 0;
        *v3 = 0;
        v3[1] = 0;
        v95 = v3[3];
        if (v95)
        {
          if (v40)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
            v94 = *v3;
            v93 = v3[1];
          }
          else
          {
            v93 = 0;
            v94 = 0;
          }
        }
        goto LABEL_72;
      }
      v42 = &v38[v41];
      v3[2] = (uint64_t)(v42 + 1);
      if (!v38)
      {
        v93 = v40;
        v94 = 0;
LABEL_72:
        v40 = 0;
        v38 = 0;
        *v3 = 0;
        v3[1] = 0;
        v96 = v3[3];
        if (v96)
        {
          if (v93)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94, v93);
            v38 = (char *)*v3;
            v40 = v3[1];
          }
          else
          {
            v40 = 0;
            v38 = 0;
          }
        }
LABEL_73:
        *v3 = 0;
        v3[1] = 0;
        v45 = v3[3];
        if (v45)
          goto LABEL_106;
        goto LABEL_74;
      }
      v43 = *v42;
      if (v43 >= 2)
        goto LABEL_73;
      v44 = v43 != 0;
      v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v38)
        goto LABEL_74;
      if (!v134 || !v136 || !v142)
        goto LABEL_105;
      v46 = v45;
      v47 = v130;
      v130 = 0;
      v112 = v35;
      v113[0] = v47;
      LOBYTE(v113[1]) = v131;
      v48 = v132;
      v132 = 0u;
      *(_OWORD *)v114 = v48;
      *(_DWORD *)v115 = v133;
      v49 = v135;
      v135 = 0u;
      *(_OWORD *)&v115[8] = v49;
      WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v116, (uint64_t)v137);
      v50 = v139;
      v139 = 0;
      v125[0] = v50;
      v51 = v140;
      v140 = 0;
      v125[1] = v51;
      v126 = v141;
      v127 = v44;
      v39 = 1;
      v128 = v46;
      while (1)
      {
        v129 = v39;
        std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v137, v38);
LABEL_77:
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v135, v37);
LABEL_78:
        std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v130, v36);
        if (!v129)
        {
LABEL_62:
          v87 = *v3;
          v88 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v89 = v3[3];
          if (!v89)
            return;
          if (!v88)
            return;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v87);
          if (!v129)
            return;
        }
        v97 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (!(_BYTE)v98)
          break;
        *(_QWORD *)&v137[0] = v97;
        v3 = (uint64_t *)v137 + 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v137 + 1, a2);
        v99 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v99 = off_1E34F3050;
        *((_QWORD *)v99 + 1) = *(_QWORD *)&v137[0];
        v100 = *((_QWORD *)&v137[0] + 1);
        *((_QWORD *)&v137[0] + 1) = 0;
        *((_QWORD *)v99 + 2) = v100;
        v130 = v99;
        v45 = (unint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v137 + 1);
        if (v129)
        {
          WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints((uint64_t)this, v112, (uint64_t)v113, (uint64_t)&v115[8], (uint64_t)v116, v127, v128, (uint64_t *)&v130);
          v101 = (uint64_t)v130;
          v130 = 0;
          if (v101)
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
          break;
        }
LABEL_105:
        __break(1u);
LABEL_106:
        if (v40)
          (*(void (**)(unint64_t, char *))(*(_QWORD *)v45 + 16))(v45, v38);
LABEL_74:
        v39 = 0;
LABEL_75:
        LOBYTE(v112) = 0;
      }
      if (v129)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v125, v98);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v121, v102);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120, v103);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v104);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v105);
        v107 = *(WTF::StringImpl **)&v115[16];
        *(_QWORD *)&v115[16] = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v106);
          else
            *(_DWORD *)v107 -= 2;
        }
        v108 = *(WTF::StringImpl **)&v115[8];
        *(_QWORD *)&v115[8] = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
            WTF::StringImpl::destroy(v108, v106);
          else
            *(_DWORD *)v108 -= 2;
        }
        v109 = v114[1];
        v114[1] = 0;
        if (v109)
        {
          if (*(_DWORD *)v109 == 2)
            WTF::StringImpl::destroy(v109, v106);
          else
            *(_DWORD *)v109 -= 2;
        }
        v110 = v114[0];
        v114[0] = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
            WTF::StringImpl::destroy(v110, v106);
          else
            *(_DWORD *)v110 -= 2;
        }
        v111 = v113[0];
        v113[0] = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, v106);
          else
            *(_DWORD *)v111 -= 2;
        }
      }
      return;
    case 0x5BA:
      v52 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v53)
        WebKit::UserMediaCaptureManagerProxy::endProducingData((uint64_t)this, v52);
      return;
    case 0x5BB:
      v21 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v22)
      {
        v23 = v21;
        v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (v25)
        {
          v112 = v24;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v113, a2);
          v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v26 = off_1E34F30A0;
          v26[1] = v112;
          v27 = v113[0];
          v113[0] = 0;
          v26[2] = v27;
          *(_QWORD *)&v137[0] = v26;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v113);
          WebKit::UserMediaCaptureManagerProxy::getPhotoCapabilities((uint64_t)this, v23, (uint64_t *)v137);
          goto LABEL_43;
        }
      }
      return;
    case 0x5BC:
      v67 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v68)
      {
        v69 = v67;
        v70 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (v71)
        {
          v112 = v70;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v113, a2);
          v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v72 = off_1E34F30C8;
          v72[1] = v112;
          v73 = v113[0];
          v113[0] = 0;
          v72[2] = v73;
          *(_QWORD *)&v137[0] = v72;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v113);
          WebKit::UserMediaCaptureManagerProxy::getPhotoSettings((uint64_t)this, v69, (uint64_t *)v137);
LABEL_43:
          v20 = *(_QWORD *)&v137[0];
          *(_QWORD *)&v137[0] = 0;
          if (v20)
            goto LABEL_44;
        }
      }
      return;
    case 0x5BD:
      v74 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v75)
        WebKit::UserMediaCaptureManagerProxy::removeSource((uint64_t)this, v74);
      return;
    case 0x5BE:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v112);
      if (LOBYTE(v113[1]))
      {
        v54 = LOBYTE(v113[0]);
        *(_QWORD *)&v137[0] = v112;
        v55 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 2, v137);
        if (v55)
          (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v55 + 64) + 304))(*(_QWORD *)(v55 + 64), v54 != 0);
      }
      return;
    case 0x5BF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v112);
      if (LOBYTE(v113[1]))
      {
        *(_QWORD *)&v137[0] = v112;
        v78 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 2, v137);
        if (v78)
          *(_BYTE *)(v78 + 184) = 1;
      }
      return;
    case 0x5C0:
      v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v29
        && (v30 = v28,
            v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3),
            v32))
      {
        WebKit::UserMediaCaptureManagerProxy::startProducingData((uint64_t)this, v30, v31);
      }
      else
      {
LABEL_37:
        v64 = *v3;
        v65 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v66 = v3[3];
        if (v66 && v65)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v64);
      }
      return;
    case 0x5C1:
      v76 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v77)
        WebKit::UserMediaCaptureManagerProxy::stopProducingData((uint64_t)this, v76);
      return;
    case 0x5C2:
      v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v14 && (v15 = v13, IPC::Decoder::decode<WebCore::PhotoSettings>(v3, (uint64_t)v137), v138))
      {
        v112 = v15;
        *(_OWORD *)v113 = v137[0];
        *(_OWORD *)v114 = v137[1];
        *(_OWORD *)v115 = v137[2];
        v115[16] = 1;
        v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (v17)
        {
          *(_QWORD *)&v137[0] = v16;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v137 + 1, a2);
          v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v18 = off_1E34F3078;
          *((_QWORD *)v18 + 1) = *(_QWORD *)&v137[0];
          v19 = *((_QWORD *)&v137[0] + 1);
          *((_QWORD *)&v137[0] + 1) = 0;
          *((_QWORD *)v18 + 2) = v19;
          v130 = v18;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v137 + 1);
          WebKit::UserMediaCaptureManagerProxy::takePhoto((uint64_t)this, v15, (__int128 *)v113, (uint64_t *)&v130);
          v20 = (uint64_t)v130;
          v130 = 0;
          if (v20)
LABEL_44:
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
      }
      else
      {
        v79 = *v3;
        v80 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v81 = v3[3];
        if (v81 && v80)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v79);
      }
      return;
    default:
      return;
  }
}

uint64_t WebKit::UserMediaCaptureManagerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unint64_t v7;
  char v8;
  uint64_t v9;
  IPC::Encoder *v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  if (*(_WORD *)(a3 + 50) != 3647)
    return 0;
  v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
  if (!v8)
    return 0;
  v9 = v7;
  v10 = *a4;
  *a4 = 0;
  v15 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a2);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = off_1E34F30F0;
  v11[1] = v15;
  v12 = v16[0];
  v16[0] = 0;
  v11[2] = v12;
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  WebKit::UserMediaCaptureManagerProxy::isPowerEfficient(a1, v9, (uint64_t *)&v17);
  v13 = (uint64_t)v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SU_SX_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3050;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SU_SX_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3050;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SU_SX_EE4callESR_SU_SX_(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3132;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationOptions,void>::encode((IPC::Encoder *)v9, a2);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode((IPC::Encoder *)v9, a3);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode((IPC::Encoder *)v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESR_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3078;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESR_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3078;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESR_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3135;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 24);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 24) != 1)
      goto LABEL_9;
  }
  else
  {
    *v7 = 1;
    if (*(_DWORD *)(a2 + 24))
    {
LABEL_9:
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v12);
    }
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    a2 += 16;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F30A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F30A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3133;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 152);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 152) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_6;
    }
LABEL_9:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v12);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 152))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::encode((IPC::Encoder *)v5, (char *)(a2 + 8));
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F30C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F30C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3134;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 56);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 56) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_6;
    }
LABEL_9:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v12);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 56))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode((IPC::Encoder *)v5, a2 + 8);
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F30F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34F30F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

void WebKit::VideoPresentationManager::didReceiveMessage(WebKit::VideoPresentationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t *v4;
  WTF::String *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF::String *v9;
  unint64_t v10;
  char v11;
  WTF::String *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  WTF::String *v29;
  unint64_t v30;
  unsigned __int8 **v31;
  unint64_t v32;
  uint64_t v33;
  WTF::String *v34;
  _QWORD *v35;
  IntPoint m_location;
  IntPoint v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF::String *v49;
  IntRect v50;
  unsigned int v51;
  char v52;
  _BYTE v53[4];
  char v54;
  IntRect v55;
  char v56;

  ++*((_DWORD *)this + 4);
  v4 = (unint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5DA:
      v5 = (WTF::String *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::didCleanupFullscreen((uint64_t)this, v5);
      goto LABEL_66;
    case 0x5DB:
      v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v22)
        goto LABEL_65;
      v23 = v21;
      v24 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>(v4);
      if ((v25 & 0xFF00000000) == 0)
        goto LABEL_65;
      WebKit::VideoPresentationManager::didEnterFullscreen(this, v23, v24, v25);
      goto LABEL_66;
    case 0x5DC:
      v9 = (WTF::String *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::didExitFullscreen((uint64_t)this, v9);
      goto LABEL_66;
    case 0x5DD:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>>((uint64_t *)a3, &v49);
      if (LOBYTE(v50.m_size.m_width))
        WebKit::VideoPresentationManager::ensureUpdatedVideoDimensions(this, (uint64_t)v49, *(float *)&v50.m_location.m_x, *(float *)&v50.m_location.m_y);
      goto LABEL_66;
    case 0x5DE:
      v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::failedToEnterFullscreen((uint64_t)this, v7);
      goto LABEL_66;
    case 0x5DF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v49);
      if (LOBYTE(v50.m_size.m_width))
        WebKit::VideoPresentationManager::fullscreenMayReturnToInline((unsigned __int8 *)this, (uint64_t)v49, v50.m_location.m_x);
      goto LABEL_66;
    case 0x5E0:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v49);
      if (LOBYTE(v50.m_size.m_width))
        WebKit::VideoPresentationManager::fullscreenModeChanged(this, (uint64_t)v49, v50.m_location.m_x);
      goto LABEL_66;
    case 0x5E1:
      v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v14)
        goto LABEL_65;
      v15 = v4[1];
      v16 = *v4;
      v17 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
      if (v15 < v17 || v15 - v17 <= 3)
      {
        v42 = 0;
        v43 = 0;
        *v4 = 0;
        v4[1] = 0;
        v44 = v4[3];
        if (v44)
        {
          if (!v15)
            goto LABEL_80;
LABEL_78:
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
          v43 = *v4;
          v42 = v4[1];
        }
LABEL_64:
        *v4 = 0;
        v4[1] = 0;
        v46 = v4[3];
        if (v46 && v42)
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v43, v42);
        goto LABEL_65;
      }
      v19 = v16 + v17;
      v20 = v16 + v17 + 4;
      v4[2] = v20;
      if (!v16)
        goto LABEL_79;
      if (v15 <= v20 - v16)
      {
        v42 = 0;
        v43 = 0;
        *v4 = 0;
        v4[1] = 0;
        v45 = v4[3];
        if (v45)
        {
          if (!v15)
          {
LABEL_80:
            v42 = 0;
            v43 = 0;
            goto LABEL_64;
          }
          (*(void (**)(unint64_t))(*(_QWORD *)v45 + 16))(v45);
          v42 = 0;
          v48 = v4[1];
          v44 = v4[3];
          *v4 = 0;
          v4[1] = 0;
          v43 = 0;
          if (v44)
          {
            if (v48)
              goto LABEL_78;
          }
        }
        goto LABEL_64;
      }
      v4[2] = v19 + 5;
      if (*(unsigned __int8 *)(v19 + 4) >= 2u)
      {
LABEL_79:
        v42 = v15;
        v43 = v16;
        goto LABEL_64;
      }
      WebKit::VideoPresentationManager::requestFullscreenMode(this, v13);
LABEL_66:
      if (*((_DWORD *)this + 4) == 1)
        (*(void (**)(WebKit::VideoPresentationManager *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
      else
        --*((_DWORD *)this + 4);
      return;
    case 0x5E2:
      v31 = (unsigned __int8 **)a2;
      v32 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v33 = v32;
        v34 = (WTF::String *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4);
        if ((_BYTE)a2)
        {
          v49 = v34;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v50, v31);
          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v35 = off_1E34F3118;
          v35[1] = v49;
          m_location = v50.m_location;
          v50.m_location = 0;
          v35[2] = m_location;
          v55.m_location = (IntPoint)v35;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
          WebKit::VideoPresentationManager::requestRouteSharingPolicyAndContextUID(this, v33);
          v37 = v55.m_location;
          v55.m_location = 0;
          if (v37)
            (*(void (**)(IntPoint))(**(_QWORD **)&v37 + 8))(v37);
        }
      }
      goto LABEL_66;
    case 0x5E3:
      v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::requestUpdateInlineRect((unsigned __int8 *)this, v8);
      goto LABEL_66;
    case 0x5E4:
      v30 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::requestVideoContentLayer((uint64_t)this, v30);
      goto LABEL_66;
    case 0x5E5:
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::returnVideoContentLayer((uint64_t)this, v6);
      goto LABEL_66;
    case 0x5E6:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v49);
      if (LOBYTE(v50.m_size.m_width))
        WebKit::VideoPresentationManager::setRequiresTextTrackRepresentation(this, (uint64_t)v49);
      goto LABEL_66;
    case 0x5E7:
      v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v28 && (v29 = (WTF::String *)v27, IPC::Decoder::decode<WebCore::IntRect>(v4, (uint64_t)&v55), v56))
      {
        v49 = v29;
        v50 = v55;
        LOBYTE(v51) = 1;
        WebKit::VideoPresentationManager::setTextTrackRepresentationBounds(this, (uint64_t)v29, &v50);
      }
      else
      {
LABEL_65:
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        v47 = v4[3];
        if (v47 && a3)
          (*(void (**)(unint64_t, IPC::Connection *))(*(_QWORD *)v47 + 16))(v47, a2);
      }
      goto LABEL_66;
    case 0x5E8:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>((uint64_t *)a3, &v49);
      if ((_BYTE)v51)
        WebKit::VideoPresentationManager::setVideoFullscreenFrame(this, v49, *(float *)&v50.m_location.m_x, *(float *)&v50.m_location.m_y, *(float *)&v50.m_size.m_width, *(float *)&v50.m_size.m_height);
      goto LABEL_66;
    case 0x5E9:
      v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v11)
        goto LABEL_56;
      v12 = (WTF::String *)v10;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(v4, (uint64_t)&v55);
      if (v56)
      {
        IPC::Decoder::takeLastAttachment((IPC::Decoder *)v4, v53);
        if (v54)
        {
          v49 = v12;
          v50 = v55;
          WTF::MachSendRight::MachSendRight();
          v52 = 1;
          if (v54)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v53);
          goto LABEL_23;
        }
      }
      else
      {
        v38 = *v4;
        v39 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        v40 = v4[3];
        if (v40 && v39)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
      }
LABEL_56:
      LOBYTE(v49) = 0;
      v52 = 0;
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *v4 = 0;
      v4[1] = 0;
      v41 = v4[3];
      if (!v41)
        goto LABEL_66;
      if (!a3)
        goto LABEL_66;
      (*(void (**)(unint64_t, IPC::Connection *))(*(_QWORD *)v41 + 16))(v41, a2);
      if (!v52)
        goto LABEL_66;
LABEL_23:
      WebKit::VideoPresentationManager::setVideoLayerFrameFenced(this, v49, &v51, *(float *)&v50.m_location.m_x, *(float *)&v50.m_location.m_y, *(float *)&v50.m_size.m_width, *(float *)&v50.m_size.m_height);
      if (v52)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v51);
      goto LABEL_66;
    case 0x5EA:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v49);
      if (LOBYTE(v50.m_size.m_width))
        WebKit::VideoPresentationManager::setVideoLayerGravityEnum(this, (uint64_t)v49, v50.m_location.m_x);
      goto LABEL_66;
    case 0x5EB:
      v26 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManager::willExitFullscreen((uint64_t)this, v26);
      goto LABEL_66;
    default:
      goto LABEL_66;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SH_EE4callESG_SH_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3137;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((unint64_t *)a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    v7 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
LABEL_12:
    result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
LABEL_10:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_4;
  }
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = result;
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

void WebKit::VideoPresentationManagerProxy::didReceiveMessage(WebKit::VideoPresentationManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 **v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int32 *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[20];
  __int128 v76;
  unsigned __int32 v77;
  unsigned int v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  char v82;
  char v83;
  _QWORD *v84;
  __int128 v85;
  char v86;
  char v87;

  ++*((_DWORD *)this + 4);
  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5C9:
      v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManagerProxy::cleanupFullscreen((unsigned __int8 *)this, v5);
      goto LABEL_106;
    case 0x5CA:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode((uint64_t)this, v74, *(unsigned int *)v75);
      goto LABEL_106;
    case 0x5CB:
      v19 = (unsigned __int8 **)a2;
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>((uint64_t *)a3, &v74);
      if (v75[16])
      {
        v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
        if ((_BYTE)a2)
        {
          *(_QWORD *)&v85 = v20;
          v4 = (uint64_t *)&v85 + 1;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v85 + 1, v19);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v21 = off_1E34F3140;
          v21[1] = v85;
          v22 = *((_QWORD *)&v85 + 1);
          *((_QWORD *)&v85 + 1) = 0;
          v21[2] = v22;
          v84 = v21;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v85 + 1);
          if (!v75[16])
          {
            __break(1u);
            goto LABEL_88;
          }
          WebKit::VideoPresentationManagerProxy::exitFullscreen(this, v74, (uint64_t *)&v84, *(float *)v75, *(float *)&v75[4], *(float *)&v75[8], *(float *)&v75[12]);
          v24 = (uint64_t)v84;
          v84 = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
      }
      goto LABEL_106;
    case 0x5CC:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode((uint64_t)this, v74, *(unsigned int *)v75);
      goto LABEL_106;
    case 0x5CD:
      v10 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::VideoPresentationManagerProxy::preparedToExitFullscreen((unsigned __int8 *)this, v10);
      goto LABEL_106;
    case 0x5CE:
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_105;
      v14 = v4[1];
      v15 = *v4;
      v27 = v4[2] - *v4;
      if (v14 <= v27)
        goto LABEL_76;
      v28 = (unsigned __int8 *)(v15 + v27);
      v4[2] = (uint64_t)(v28 + 1);
      if (!v15)
        goto LABEL_120;
      v29 = *v28;
      if (v29 >= 2)
        goto LABEL_93;
      v30 = v25;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v74);
      if (!v75[8])
        goto LABEL_92;
      WebKit::VideoPresentationManagerProxy::preparedToReturnToInline((unsigned __int8 *)this, v30, v29 != 0, *(float *)&v74, *((float *)&v74 + 1), *(float *)v75, *(float *)&v75[4]);
      goto LABEL_106;
    case 0x5CF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::setDocumentVisibility((unsigned __int8 *)this, v74);
      goto LABEL_106;
    case 0x5D0:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::setHasVideo((unsigned __int8 *)this, v74);
      goto LABEL_106;
    case 0x5D1:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::setHasVideoContentLayer((uint64_t)this, v74, v75[0]);
      goto LABEL_106;
    case 0x5D2:
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v12)
        goto LABEL_105;
      v13 = v11;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v85);
      if (!v86)
        goto LABEL_92;
      v14 = v4[1];
      v15 = *v4;
      v16 = v4[2] - *v4;
      if (v14 <= v16)
      {
LABEL_76:
        v59 = 0;
        *v4 = 0;
        v4[1] = 0;
        v60 = v4[3];
        if (v60)
        {
          if (v14)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
            v59 = v4[1];
          }
          else
          {
            v59 = 0;
          }
        }
      }
      else
      {
        v17 = (unsigned __int8 *)(v15 + v16);
        v4[2] = (uint64_t)(v17 + 1);
        if (v15)
        {
          v18 = *v17;
          if (v18 >= 2)
            goto LABEL_93;
          v74 = v13;
          *(_OWORD *)v75 = v85;
          v75[16] = v18 != 0;
          BYTE4(v76) = 1;
          WebKit::VideoPresentationManagerProxy::setInlineRect((unsigned __int8 *)this, v13, (const FloatRect *)v75);
          goto LABEL_106;
        }
LABEL_120:
        v59 = v14;
      }
      v14 = 0;
      v15 = 0;
      *v4 = 0;
      v4[1] = 0;
      v61 = v4[3];
      if (!v61)
        goto LABEL_93;
      if (v59)
      {
        v62 = *(void (**)(void))(*(_QWORD *)v61 + 16);
        goto LABEL_91;
      }
      goto LABEL_122;
    case 0x5D3:
      v55 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v56)
        goto LABEL_105;
      v57 = v55;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v4, &v74);
      if (!v75[8])
        goto LABEL_105;
      WebKit::VideoPresentationManagerProxy::setPlayerIdentifier((unsigned __int8 *)this, v57);
      goto LABEL_106;
    case 0x5D4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatSize>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::setVideoDimensions((uint64_t)this, v74, (float *)v75);
      goto LABEL_106;
    case 0x5D5:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(this, v74, *(unsigned int *)v75);
      goto LABEL_106;
    case 0x5D6:
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v32)
        goto LABEL_105;
      v23 = v4[1];
      v33 = *v4;
      v34 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
      if (v23 < v34 || v23 - v34 <= 3)
      {
LABEL_88:
        v14 = 0;
        v15 = 0;
        *v4 = 0;
        v4[1] = 0;
        v67 = v4[3];
        if (!v67)
          goto LABEL_93;
        if (v23)
        {
          v62 = *(void (**)(void))(*(_QWORD *)v67 + 16);
LABEL_91:
          v62();
          goto LABEL_92;
        }
LABEL_122:
        v14 = 0;
        v15 = 0;
LABEL_93:
        *v4 = 0;
        v4[1] = 0;
        v68 = v4[3];
        if (!v68)
          goto LABEL_105;
LABEL_94:
        if (v14)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v15);
        goto LABEL_105;
      }
      v36 = (unsigned int *)(v33 + v34);
      v4[2] = (uint64_t)(v36 + 1);
      if (!v33)
      {
        v14 = v23;
        v15 = 0;
        goto LABEL_93;
      }
      v37 = v31;
      v38 = *v36;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v85);
      if (!v86
        || (v39 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v4), !v40)
        || (v41 = v39,
            v42 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v4),
            !v44))
      {
LABEL_92:
        v15 = *v4;
        v14 = v4[1];
        goto LABEL_93;
      }
      v45 = v4[1];
      v46 = *v4;
      v47 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
      if (v45 < v47 || v45 - v47 <= 3)
      {
        v63 = 0;
        v64 = 0;
        *v4 = 0;
        v4[1] = 0;
        v69 = v4[3];
        if (!v69)
          goto LABEL_104;
        if (v45)
          goto LABEL_118;
      }
      else
      {
        v48 = (unsigned __int32 *)(v46 + v47);
        v4[2] = (uint64_t)(v48 + 1);
        if (!v46)
          goto LABEL_119;
        v49 = (((unint64_t)v48 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v46;
        if (v45 < v49 || v45 - v49 <= 3)
        {
          *v4 = 0;
          v4[1] = 0;
          v70 = v4[3];
          if (!v70)
            goto LABEL_105;
          if (!v45)
            goto LABEL_105;
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
          v15 = *v4;
          v14 = v4[1];
          v68 = v4[3];
          *v4 = 0;
          v4[1] = 0;
          if (!v68)
            goto LABEL_105;
          goto LABEL_94;
        }
        v43.n128_u32[0] = *v48;
        v50 = ((unint64_t)v48 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        v51 = *(_DWORD *)v50;
        v4[2] = v50 + 4;
        if (v45 > v49 + 4)
        {
          v4[2] = v50 + 5;
          v52 = *(unsigned __int8 *)(v50 + 4);
          if (v52 < 2)
          {
            if (v45 <= v50 + 5 - v46)
            {
LABEL_80:
              v63 = 0;
              v64 = 0;
              *v4 = 0;
              v4[1] = 0;
              v65 = v4[3];
              if (!v65)
                goto LABEL_104;
              goto LABEL_116;
            }
            v4[2] = v50 + 6;
            v53 = *(unsigned __int8 *)(v50 + 5);
            if (v53 < 2)
            {
              if (v45 > v50 + 6 - v46)
              {
                v4[2] = v50 + 7;
                v54 = *(unsigned __int8 *)(v50 + 6);
                if (v54 < 2)
                {
                  v74 = v37;
                  *(_DWORD *)v75 = v38;
                  *(_OWORD *)&v75[4] = v85;
                  *(_QWORD *)&v76 = v41;
                  *((_QWORD *)&v76 + 1) = v42;
                  v77 = v43.n128_u32[0];
                  v78 = v51;
                  v79 = v52 != 0;
                  v80 = v53 != 0;
                  v81 = v54 != 0;
                  v82 = 1;
                  WebKit::VideoPresentationManagerProxy::setupFullscreenWithID((uint64_t)this, v37, v38, (const FloatRect *)&v75[4], (const FloatSize *)&v76, (float *)&v76 + 2, v51, v52 != 0, v53 != 0, v54 != 0);
                  goto LABEL_106;
                }
                goto LABEL_119;
              }
              goto LABEL_80;
            }
          }
LABEL_119:
          v63 = v45;
          v64 = v46;
          goto LABEL_104;
        }
        v63 = 0;
        v64 = 0;
        *v4 = 0;
        v4[1] = 0;
        v65 = v4[3];
        if (!v65)
          goto LABEL_104;
        if (v45)
        {
LABEL_116:
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v65 + 16))(v65, v43);
          v63 = 0;
          v73 = v4[1];
          v69 = v4[3];
          *v4 = 0;
          v4[1] = 0;
          v64 = 0;
          if (!v69 || !v73)
            goto LABEL_104;
LABEL_118:
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
          v64 = *v4;
          v63 = v4[1];
          goto LABEL_104;
        }
      }
      v63 = 0;
      v64 = 0;
LABEL_104:
      *v4 = 0;
      v4[1] = 0;
      v71 = v4[3];
      if (v71 && v63)
        (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v71 + 16))(v71, v64, v63, v43);
LABEL_105:
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *v4 = 0;
      v4[1] = 0;
      v72 = v4[3];
      if (v72 && a3)
        (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v72 + 16))(v72, a2);
LABEL_106:
      if (*((_DWORD *)this + 4) == 1)
        (*(void (**)(WebKit::VideoPresentationManagerProxy *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
      else
        --*((_DWORD *)this + 4);
      return;
    case 0x5D7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetContentsScale(this, v74, *(float *)v75);
      goto LABEL_106;
    case 0x5D8:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v74);
      if (v75[8])
        WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetHidden(this, v74);
      goto LABEL_106;
    case 0x5D9:
      v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v7)
      {
        v8 = v6;
        IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)v4, &v85);
        v9 = v87;
        if (v87)
        {
          v74 = v8;
          WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v75, (uint64_t)&v85);
          v9 = 1;
        }
        else
        {
          LOBYTE(v74) = 0;
        }
        v83 = v9;
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v85);
        if (v83)
          goto LABEL_71;
      }
      else
      {
        LOBYTE(v74) = 0;
        v83 = 0;
      }
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *v4 = 0;
      v4[1] = 0;
      v66 = v4[3];
      if (!v66)
        goto LABEL_106;
      if (!a3)
        goto LABEL_106;
      (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v66 + 16))(v66, a2);
      if (!v83)
        goto LABEL_106;
LABEL_71:
      WebKit::VideoPresentationManagerProxy::textTrackRepresentationUpdate(this, v74);
      if (v83)
      {
        if (BYTE12(v76))
        {
          v58 = *(const void **)((char *)&v76 + 4);
          *(_QWORD *)((char *)&v76 + 4) = 0;
          if (v58)
            CFRelease(v58);
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v75);
      }
      goto LABEL_106;
    default:
      goto LABEL_106;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3136;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unint64_t WebKit::ViewGestureGeometryCollector::didReceiveMessage(unint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebPage **v3;
  char v4;

  if (*((_WORD *)a3 + 25) == 1516)
  {
    v3 = (WebKit::WebPage **)this;
    this = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
    if (v4)
      return WebKit::ViewGestureGeometryCollector::collectGeometryForSmartMagnificationGesture(v3, *(float *)&this, *((float *)&this + 1));
  }
  return this;
}

uint64_t WebKit::VirtualAuthenticatorManager::createAuthenticator@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  WTF::StringImpl **v9;
  void *v10;
  WTF *v12[2];
  _BYTE v13[24];

  WTF::createVersion4UUIDString((WTF *)a1);
  v6 = WTF::fastMalloc((WTF *)0x10);
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  *(_QWORD *)v6 = v7;
  v8 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(v6 + 8) = v8;
  v12[0] = (WTF *)v6;
  WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>(a1 + 107, a3, (const WTF::StringImpl *)v12, (uint64_t)v13);
  v9 = (WTF::StringImpl **)v12[0];
  v12[0] = 0;
  if (v9)
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v12, v9);
  v12[0] = 0;
  v12[1] = 0;
  WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 108, a3, (const WTF::StringImpl *)v12, (uint64_t)v13);
  return WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
}

uint64_t WebKit::VirtualAuthenticatorManager::removeAuthenticator(WebKit::VirtualAuthenticatorManager *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v4 = (uint64_t *)((char *)this + 856);
  v5 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 107, a2, a3);
  v6 = *((_QWORD *)this + 107);
  if (v6)
  {
    v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5)
      return 0;
  }
  else
  {
    if (!v5)
      return 0;
    v7 = 0;
  }
  if (v7 != v5)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, v5);
  return 1;
}

unsigned int *WebKit::VirtualAuthenticatorManager::addCredential(uint64_t a1, WTF::StringImpl **a2, unint64_t a3)
{
  unsigned int *result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 864), a2, (const WTF::StringImpl *)a3);
  v5 = result[5];
  if (v5 == result[4])
    return (unsigned int *)WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential>(result + 2, a3);
  v6 = *((_QWORD *)result + 1);
  v7 = v6 + 72 * v5;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v7 = v8;
  LODWORD(v8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v7 + 8) = v8;
  LODWORD(v8) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(v7 + 16) = v9;
  v10 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  v11 = v7 + 32;
  *(_DWORD *)(v11 - 20) = v8;
  *(_QWORD *)(v11 - 8) = v10;
  *(_BYTE *)(v11 + 16) = 0;
  v12 = (_BYTE *)(v11 + 16);
  if (*(_BYTE *)(a3 + 48))
  {
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    v13 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)v11 = v13;
    v14 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = 0;
    v15 = v6 + 72 * v5;
    *(_DWORD *)(v15 + 40) = v14;
    v16 = *(_DWORD *)(a3 + 44);
    *(_DWORD *)(a3 + 44) = 0;
    *(_DWORD *)(v15 + 44) = v16;
    *v12 = 1;
  }
  v17 = v6 + 72 * v5;
  v18 = *(_QWORD *)(a3 + 56);
  *(_WORD *)(v17 + 64) = *(_WORD *)(a3 + 64);
  *(_QWORD *)(v17 + 56) = v18;
  ++result[5];
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::credentialsMatchingList@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;

  *a5 = 0;
  a5[1] = 0;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 864), a2, a3);
  v10 = *(unsigned int *)(result + 20);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(result + 8);
    v12 = 72 * v10;
    do
    {
      result = WTF::equal(*(WTF **)(v11 + 16), *(const WTF::StringImpl **)a3, v9);
      if ((_DWORD)result)
      {
        if (!*(_DWORD *)(a4 + 12) && *(_BYTE *)(v11 + 64)
          || (v22 = (const void **)v11,
              result = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>((uint64_t *)a4, &v22), result != -1))
        {
          v13 = *((_DWORD *)a5 + 3);
          if (v13 == *((_DWORD *)a5 + 2))
          {
            result = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential&>((unsigned int *)a5, v11);
          }
          else
          {
            v14 = *a5;
            v15 = (WTF *)*(unsigned int *)(v11 + 12);
            v16 = *a5 + 72 * v13;
            *(_QWORD *)v16 = 0;
            *(_QWORD *)(v16 + 8) = 0;
            *(_DWORD *)(v16 + 12) = (_DWORD)v15;
            if ((_DWORD)v15)
            {
              v17 = (void *)WTF::fastMalloc(v15);
              *(_DWORD *)(v16 + 8) = (_DWORD)v15;
              *(_QWORD *)v16 = v17;
              memcpy(v17, *(const void **)v11, *(unsigned int *)(v11 + 12));
            }
            v18 = *(_DWORD **)(v11 + 16);
            if (v18)
              *v18 += 2;
            *(_QWORD *)(v14 + 72 * v13 + 16) = v18;
            v19 = *(_DWORD **)(v11 + 24);
            if (v19)
              *v19 += 2;
            v20 = v14 + 72 * v13;
            *(_QWORD *)(v20 + 24) = v19;
            result = std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](v20 + 32, v11 + 32);
            v21 = *(_QWORD *)(v11 + 56);
            *(_WORD *)(v20 + 64) = *(_WORD *)(v11 + 64);
            *(_QWORD *)(v20 + 56) = v21;
            ++*((_DWORD *)a5 + 3);
          }
        }
      }
      v11 += 72;
      v12 -= 72;
    }
    while (v12);
  }
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::createService@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  void *v34;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v39 = (int)a2;
  v44 = 0;
  v45 = 0;
  v5 = *(_QWORD *)(a1 + 856);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (WTF::StringImpl **)(v5 + 16 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      v8 = *(WTF::StringImpl ***)(a1 + 856);
      if ((_DWORD)v6)
      {
        v9 = 16 * v6;
        v8 = *(WTF::StringImpl ***)(a1 + 856);
        while ((unint64_t)*v8 + 1 <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v8 = (WTF::StringImpl **)(v5 + 16 * v6);
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = (WTF::StringImpl **)(v5 + 16 * v6);
  if (v5)
  {
LABEL_8:
    v10 = (WTF::StringImpl **)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_13;
  }
  v10 = 0;
LABEL_13:
  if (v10 != v8)
  {
    v38 = 0;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a1 + 856);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = *((_DWORD *)*v8 + 4);
        if (v14 >= 0x100)
          v15 = v14 >> 8;
        else
          v15 = WTF::StringImpl::hashSlowCase(*v8);
        for (i = 0; ; v15 = i + v17)
        {
          v17 = v15 & v13;
          v18 = *(WTF **)(v12 + 16 * v17);
          if (v18 != (WTF *)-1)
          {
            if (!v18)
              goto LABEL_24;
            if ((WTF::equal(v18, *v8, a3) & 1) != 0)
              break;
          }
          ++i;
        }
        v19 = *(_QWORD *)(v12 + 16 * v17 + 8);
      }
      else
      {
LABEL_24:
        v19 = 0;
      }
      v20 = (int *)(v19 + 8);
      if (*(unsigned __int8 *)(v19 + 8) == v39)
      {
        v21 = *v8;
        if (*v8)
          *(_DWORD *)v21 += 2;
        v40 = v21;
        v22 = *(WTF::StringImpl **)v19;
        if (v22)
          *(_DWORD *)v22 += 2;
        v41 = v22;
        v23 = *v20;
        v43 = *((_BYTE *)v20 + 4);
        v42 = v23;
        if (v11 == (_DWORD)v45)
        {
          v24 = WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v44, v11 + 1, (unint64_t)&v40);
          v25 = HIDWORD(v45);
          v38 = v44;
          v26 = v44 + 24 * HIDWORD(v45);
          v27 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)v26 = v27;
          v28 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v28;
          LOBYTE(v28) = *(_BYTE *)(v24 + 20);
          *(_DWORD *)(v26 + 16) = *(_DWORD *)(v24 + 16);
          *(_BYTE *)(v26 + 20) = v28;
        }
        else
        {
          v29 = v38 + 24 * v11;
          v40 = 0;
          *(_QWORD *)v29 = v21;
          v30 = v41;
          v41 = 0;
          *(_QWORD *)(v29 + 8) = v30;
          LODWORD(v30) = v42;
          *(_BYTE *)(v29 + 20) = v43;
          *(_DWORD *)(v29 + 16) = (_DWORD)v30;
          v25 = HIDWORD(v45);
        }
        v11 = v25 + 1;
        HIDWORD(v45) = v25 + 1;
        v31 = v41;
        v41 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, a2);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v40;
        v40 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, a2);
          else
            *(_DWORD *)v32 -= 2;
        }
      }
      v33 = v8 + 2;
      v8 = v7;
      if (v33 != v7)
      {
        v8 = v33;
        while ((unint64_t)*v8 + 1 <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
  }
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::VirtualService,WebKit::AuthenticatorTransportServiceObserver &,WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)a3, (uint64_t)&v44, a4);
  return WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v34);
}

WTF::ASCIILiteral *WebKit::VirtualAuthenticatorManager::runPanel(WebKit::VirtualAuthenticatorManager *this)
{
  WTF::ASCIILiteral *result;
  void *v3;
  uint64_t v4;

  WebKit::AuthenticatorManager::getTransports(this, &v4);
  if (v4 && *(_DWORD *)(v4 - 12))
    result = WebKit::AuthenticatorManager::startDiscovery((uint64_t)this, &v4);
  else
    result = (WTF::ASCIILiteral *)WebKit::AuthenticatorManager::cancel(this);
  if (v4)
    return (WTF::ASCIILiteral *)WTF::fastFree((WTF *)(v4 - 16), v3);
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*((_DWORD *)a2 + 3))
  {
    v4 = **a2;
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::VirtualAuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*((_DWORD *)a2 + 3))
  {
    v4 = **a2;
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t `non-virtual thunk to'WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::VirtualAuthenticatorManager::~VirtualAuthenticatorManager(WebKit::VirtualAuthenticatorManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 108);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 107);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *((_QWORD *)this + 108);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 107);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
  WTF::fastFree(v5, v6);
}

uint64_t WebKit::VirtualAuthenticatorManager::isVirtual(WebKit::VirtualAuthenticatorManager *this)
{
  return 1;
}

void `non-virtual thunk to'WebKit::VirtualAuthenticatorManager::~VirtualAuthenticatorManager(WebKit::VirtualAuthenticatorManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 106);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 105);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::VirtualAuthenticatorManager *)((char *)this - 16));
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *((_QWORD *)this + 106);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 105);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::VirtualAuthenticatorManager *)((char *)this - 16));
  WTF::fastFree(v5, v6);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

