void sub_1976D91C0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976D9244(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = (_BYTE *)(*(_QWORD *)a1 + 48 * v4);
  *v6 = 0;
  v6[8] = 0;
  if (*(_BYTE *)(v3 + 8))
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)v6 = v7;
    v6[8] = 1;
  }
  v8 = v5 + 48 * v4;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = v8 + 16;
  *(_BYTE *)(v9 + 8) = 0;
  if (*(_BYTE *)(v3 + 24))
  {
    v10 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v9 = v10;
    *(_BYTE *)(v9 + 8) = 1;
  }
  *(_OWORD *)(v5 + 48 * v4 + 32) = *(_OWORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1976D9458);
    }
    v3 = *(WTF **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (_BYTE *)(a3 + v6);
      v8 = (uint64_t *)(v5 + v6);
      *v7 = 0;
      v7[8] = 0;
      if (*(_BYTE *)(v5 + v6 + 8))
      {
        v9 = *v8;
        *v8 = 0;
        *(_QWORD *)v7 = v9;
        v7[8] = 1;
      }
      v7[16] = 0;
      v7[24] = 0;
      if (*((_BYTE *)v8 + 24))
      {
        v10 = *(_QWORD *)(v5 + v6 + 16);
        *(_QWORD *)(v5 + v6 + 16) = 0;
        *((_QWORD *)v7 + 2) = v10;
        v7[24] = 1;
      }
      *(_OWORD *)(a3 + v6 + 32) = *(_OWORD *)(v5 + v6 + 32);
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 16, a2);
      result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5 + v6, v11);
      v6 += 48;
    }
    while ((WTF::StringImpl *)(v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1, v3);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(*(_QWORD *)result + 48 * this, (WTF::StringImpl *)(*(_QWORD *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1976D9640);
      }
      v6 = (WTF *)(48 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move((uint64_t)v5, (WTF *)((char *)v5 + 48 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = result;
    do
    {
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3 + 16, a2);
      result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v4);
      v3 += 48;
    }
    while ((WTF::StringImpl *)v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(*(_QWORD *)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1976D970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34F5CD8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F5CD8[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34F5CE8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI((uint64_t *)a2, 0);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5D08;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5D08;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976D9A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5D30;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5D30;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976D9C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 120 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (uint64_t)result + 64;
    do
    {
      if (*(_BYTE *)(v3 + 40))
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 24, a2);
      if (*(_BYTE *)(v3 + 16))
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      result = *(WTF::StringImpl **)(v3 - 16);
      *(_QWORD *)(v3 - 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      if (*(_BYTE *)(v3 - 24))
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 40, a2);
      if (*(_BYTE *)(v3 - 48))
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 64, a2);
      v4 = (WTF::StringImpl *)(v3 + 56);
      v3 += 120;
    }
    while (v4 != a2);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 120 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode(a1, v7);
      v7 += 120;
      v8 -= 120;
    }
    while (v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5D58;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5D58;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976D9FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5D80;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5D80;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  int v27;
  char v28;
  _QWORD v29[2];
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v4, v5);
        v13 = 0;
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v14 = 0;
        if (v25 && v24)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v24);
          v14 = *a2;
          v13 = a2[1];
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_24;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v13 = v5;
    v14 = v4;
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    goto LABEL_25;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v32);
    v11 = v33;
    if ((_BYTE)v33)
    {
      v29[0] = v32;
      v11 = 1;
      v30 = 1;
    }
    else
    {
      LOBYTE(v29[0]) = 0;
    }
    v31 = v11;
    v12 = 1;
    if (!v11)
      goto LABEL_25;
LABEL_16:
    v26[0] = 0;
    v27 = -1;
    ((void (*)(uint64_t *, _BYTE *, _QWORD *))off_1E34F5DA8[v12])(&v32, v26, v29);
    v27 = v12;
    v28 = 1;
    if (!v31)
      goto LABEL_19;
    if (v30 == -1)
      goto LABEL_19;
    ((void (*)(uint64_t *, _QWORD *))off_1E34F5D98[v30])(&v32, v29);
    if (v28)
      goto LABEL_19;
    goto LABEL_27;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v32);
  v9 = v34;
  if (v34)
  {
    v29[0] = v32;
    v10 = v33;
    v32 = 0;
    v33 = 0;
    v29[1] = v10;
    v30 = 0;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v8);
    v9 = 1;
  }
  else
  {
    LOBYTE(v29[0]) = 0;
  }
  v12 = 0;
  v31 = v9;
  if (v9)
    goto LABEL_16;
LABEL_25:
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19 && v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  v26[0] = 0;
  v28 = 0;
LABEL_27:
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v22 = a2[3];
  if (!v22 || !v21 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20), !v28))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_19:
  WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v26);
  if (v28)
  {
    if (v27 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E34F5D98[v27])(v29, v26);
  }
}

void sub_1976DA38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, int a20,char a21)
{
  if (a13)
  {
    if (a11 != -1)
      ((void (*)(__int16 *, uint64_t *))off_1E34F5D98[a11])(&a15, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F5D98[v2])(&v3, v1);
}

void sub_1976DA478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F5D98[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1976DA4FC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  int v76;
  int v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  int v82;
  int v83;
  char v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v40 = 0;
    v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v6, v5);
        v41 = *a1;
        v40 = a1[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
    goto LABEL_28;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v91 = 0;
    v92 = 0;
    if (v10 >= 0x2222)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>(a1, (uint64_t)&v71);
        if (!v90)
          break;
        v44 = HIDWORD(v92);
        if (HIDWORD(v92) == (_DWORD)v92)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v91, (unint64_t)&v71);
        }
        else
        {
          v45 = v91;
          v46 = v91 + 120 * HIDWORD(v92);
          *(_BYTE *)v46 = 0;
          *(_BYTE *)(v46 + 16) = 0;
          if (v74)
          {
            *(_QWORD *)v46 = 0;
            *(_QWORD *)(v46 + 8) = 0;
            v47 = v71;
            v71 = 0;
            *(_QWORD *)v46 = v47;
            LODWORD(v47) = v72;
            v72 = 0;
            *(_DWORD *)(v46 + 8) = v47;
            LODWORD(v47) = v73;
            v73 = 0;
            *(_DWORD *)(v46 + 12) = v47;
            *(_BYTE *)(v46 + 16) = 1;
          }
          v48 = v45 + 120 * v44;
          *(_BYTE *)(v48 + 24) = 0;
          v49 = v48 + 24;
          *(_BYTE *)(v49 + 16) = 0;
          v50 = (_BYTE *)(v49 + 16);
          if (v78)
          {
            *(_QWORD *)v49 = 0;
            *(_QWORD *)(v49 + 8) = 0;
            v51 = v75;
            v75 = 0;
            *(_QWORD *)v49 = v51;
            v52 = v76;
            v76 = 0;
            v53 = v45 + 120 * v44;
            *(_DWORD *)(v53 + 32) = v52;
            v54 = v77;
            v77 = 0;
            *(_DWORD *)(v53 + 36) = v54;
            *v50 = 1;
          }
          v55 = v45 + 120 * v44;
          v56 = v79;
          v79 = 0;
          *(_QWORD *)(v55 + 48) = v56;
          LOWORD(v56) = v80;
          *(_BYTE *)(v55 + 80) = 0;
          v57 = (_BYTE *)(v55 + 80);
          *((_WORD *)v57 - 12) = v56;
          *(v57 - 16) = 0;
          v58 = v57 - 16;
          if (v84)
          {
            *v58 = 0;
            *((_QWORD *)v57 - 1) = 0;
            v59 = v81;
            v81 = 0;
            *v58 = v59;
            v60 = v82;
            v82 = 0;
            v61 = v45 + 120 * v44;
            *(_DWORD *)(v61 + 72) = v60;
            v62 = v83;
            v83 = 0;
            *(_DWORD *)(v61 + 76) = v62;
            *v57 = 1;
          }
          v63 = v45 + 120 * v44;
          *(_BYTE *)(v63 + 88) = 0;
          v64 = v63 + 88;
          *(_BYTE *)(v64 + 16) = 0;
          v65 = (_BYTE *)(v64 + 16);
          if (v88)
          {
            *(_QWORD *)v64 = 0;
            *(_QWORD *)(v64 + 8) = 0;
            v66 = v85;
            v85 = 0;
            *(_QWORD *)v64 = v66;
            v67 = v86;
            v86 = 0;
            v68 = v45 + 120 * v44;
            *(_DWORD *)(v68 + 96) = v67;
            v69 = v87;
            v87 = 0;
            *(_DWORD *)(v68 + 100) = v69;
            *v65 = 1;
          }
          *(_QWORD *)(v45 + 120 * v44 + 112) = v89;
          ++HIDWORD(v92);
        }
        std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v91, HIDWORD(v92));
          *(_QWORD *)a3 = v91;
          v70 = v92;
          v91 = 0;
          v92 = 0;
          *(_QWORD *)(a3 + 8) = v70;
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v38 = 0;
        v39 = 0;
LABEL_25:
        v91 = 0;
        v92 = 0;
        *(_QWORD *)a3 = v38;
        *(_QWORD *)(a3 + 8) = v39;
LABEL_26:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, a2);
      }
      LODWORD(v92) = 120 * (int)v10 / 0x78u;
      v91 = WTF::fastMalloc((WTF *)(120 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>(a1, (uint64_t)&v71);
        if (!v90)
          break;
        v12 = HIDWORD(v92);
        if (HIDWORD(v92) == (_DWORD)v92)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v91, (unint64_t)&v71);
        }
        else
        {
          v13 = v91;
          v14 = v91 + 120 * HIDWORD(v92);
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 16) = 0;
          if (v74)
          {
            *(_QWORD *)v14 = 0;
            *(_QWORD *)(v14 + 8) = 0;
            v15 = v71;
            v71 = 0;
            *(_QWORD *)v14 = v15;
            LODWORD(v15) = v72;
            v72 = 0;
            *(_DWORD *)(v14 + 8) = v15;
            LODWORD(v15) = v73;
            v73 = 0;
            *(_DWORD *)(v14 + 12) = v15;
            *(_BYTE *)(v14 + 16) = 1;
          }
          v16 = v13 + 120 * v12;
          *(_BYTE *)(v16 + 24) = 0;
          v17 = v16 + 24;
          *(_BYTE *)(v17 + 16) = 0;
          v18 = (_BYTE *)(v17 + 16);
          if (v78)
          {
            *(_QWORD *)v17 = 0;
            *(_QWORD *)(v17 + 8) = 0;
            v19 = v75;
            v75 = 0;
            *(_QWORD *)v17 = v19;
            v20 = v76;
            v76 = 0;
            v21 = v13 + 120 * v12;
            *(_DWORD *)(v21 + 32) = v20;
            v22 = v77;
            v77 = 0;
            *(_DWORD *)(v21 + 36) = v22;
            *v18 = 1;
          }
          v23 = v13 + 120 * v12;
          v24 = v79;
          v79 = 0;
          *(_QWORD *)(v23 + 48) = v24;
          LOWORD(v24) = v80;
          *(_BYTE *)(v23 + 80) = 0;
          v25 = (_BYTE *)(v23 + 80);
          *((_WORD *)v25 - 12) = v24;
          *(v25 - 16) = 0;
          v26 = v25 - 16;
          if (v84)
          {
            *v26 = 0;
            *((_QWORD *)v25 - 1) = 0;
            v27 = v81;
            v81 = 0;
            *v26 = v27;
            v28 = v82;
            v82 = 0;
            v29 = v13 + 120 * v12;
            *(_DWORD *)(v29 + 72) = v28;
            v30 = v83;
            v83 = 0;
            *(_DWORD *)(v29 + 76) = v30;
            *v25 = 1;
          }
          v31 = v13 + 120 * v12;
          *(_BYTE *)(v31 + 88) = 0;
          v32 = v31 + 88;
          *(_BYTE *)(v32 + 16) = 0;
          v33 = (_BYTE *)(v32 + 16);
          if (v88)
          {
            *(_QWORD *)v32 = 0;
            *(_QWORD *)(v32 + 8) = 0;
            v34 = v85;
            v85 = 0;
            *(_QWORD *)v32 = v34;
            v35 = v86;
            v86 = 0;
            v36 = v13 + 120 * v12;
            *(_DWORD *)(v36 + 96) = v35;
            v37 = v87;
            v87 = 0;
            *(_DWORD *)(v36 + 100) = v37;
            *v33 = 1;
          }
          *(_QWORD *)(v13 + 120 * v12 + 112) = v89;
          ++HIDWORD(v92);
        }
        std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
        if (!--v10)
        {
          v38 = v91;
          v39 = v92;
          goto LABEL_25;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
    return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, a2);
  }
  v40 = v5;
  v41 = 0;
LABEL_28:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v40)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v41);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void sub_1976DA9C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 120))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976DAA48(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  v3 = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 120 * v4;
  *(_BYTE *)v6 = 0;
  *(_BYTE *)(v6 + 16) = 0;
  if (*(_BYTE *)(v3 + 16))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)v6 = v7;
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v6 + 8) = v7;
    LODWORD(v7) = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 12) = 0;
    *(_DWORD *)(v6 + 12) = v7;
    *(_BYTE *)(v6 + 16) = 1;
  }
  v8 = v5 + 120 * v4;
  *(_BYTE *)(v8 + 24) = 0;
  v9 = v8 + 24;
  *(_BYTE *)(v9 + 16) = 0;
  v10 = (_BYTE *)(v9 + 16);
  if (*(_BYTE *)(v3 + 40))
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    v11 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)v9 = v11;
    v12 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 32) = 0;
    v13 = v5 + 120 * v4;
    *(_DWORD *)(v13 + 32) = v12;
    v14 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 36) = 0;
    *(_DWORD *)(v13 + 36) = v14;
    *v10 = 1;
  }
  v15 = v5 + 120 * v4;
  v16 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v15 + 48) = v16;
  LOWORD(v16) = *(_WORD *)(v3 + 56);
  *(_BYTE *)(v15 + 80) = 0;
  v17 = (_BYTE *)(v15 + 80);
  *((_WORD *)v17 - 12) = v16;
  *(v17 - 16) = 0;
  v18 = v17 - 16;
  if (*(_BYTE *)(v3 + 80))
  {
    *v18 = 0;
    *((_QWORD *)v17 - 1) = 0;
    v19 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v3 + 64) = 0;
    *v18 = v19;
    v20 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = 0;
    v21 = v5 + 120 * v4;
    *(_DWORD *)(v21 + 72) = v20;
    v22 = *(_DWORD *)(v3 + 76);
    *(_DWORD *)(v3 + 76) = 0;
    *(_DWORD *)(v21 + 76) = v22;
    *v17 = 1;
  }
  v23 = v5 + 120 * v4;
  *(_BYTE *)(v23 + 88) = 0;
  v24 = v23 + 88;
  *(_BYTE *)(v24 + 16) = 0;
  v25 = (_BYTE *)(v24 + 16);
  if (*(_BYTE *)(v3 + 104))
  {
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v26 = *(_QWORD *)(v3 + 88);
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)v24 = v26;
    v27 = *(_DWORD *)(v3 + 96);
    *(_DWORD *)(v3 + 96) = 0;
    v28 = v5 + 120 * v4;
    *(_DWORD *)(v28 + 96) = v27;
    v29 = *(_DWORD *)(v3 + 100);
    *(_DWORD *)(v3 + 100) = 0;
    *(_DWORD *)(v28 + 100) = v29;
    *v25 = 1;
  }
  *(_QWORD *)(v5 + 120 * v4 + 112) = *(_QWORD *)(v3 + 112);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x1976DAD58);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12));
    v5 = 120 * a2;
    v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (char *)v5 + v6;
      v8 = a3 + v6;
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 16) = 0;
      if (*((_BYTE *)v5 + v6 + 16))
      {
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)v8 = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 2);
        *((_DWORD *)v7 + 2) = 0;
        *(_DWORD *)(v8 + 8) = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 3);
        *((_DWORD *)v7 + 3) = 0;
        *(_DWORD *)(v8 + 12) = v9;
        *(_BYTE *)(v8 + 16) = 1;
      }
      *(_BYTE *)(v8 + 24) = 0;
      v10 = (_QWORD *)(v8 + 24);
      *(_BYTE *)(v8 + 40) = 0;
      if (v7[40])
      {
        v11 = (char *)v5 + v6;
        *v10 = 0;
        *(_QWORD *)(v8 + 32) = 0;
        v12 = *(_QWORD *)((char *)v5 + v6 + 24);
        *((_QWORD *)v11 + 3) = 0;
        *v10 = v12;
        v13 = *(_DWORD *)((char *)v5 + v6 + 32);
        *((_DWORD *)v11 + 8) = 0;
        v14 = a3 + v6;
        *(_DWORD *)(v14 + 32) = v13;
        v15 = *(_DWORD *)((char *)v5 + v6 + 36);
        *((_DWORD *)v11 + 9) = 0;
        *(_DWORD *)(v14 + 36) = v15;
        *(_BYTE *)(v8 + 40) = 1;
      }
      v16 = a3 + v6;
      v17 = (char *)v5 + v6;
      v18 = *(_QWORD *)((char *)v5 + v6 + 48);
      *(_QWORD *)((char *)v5 + v6 + 48) = 0;
      *(_QWORD *)(v16 + 48) = v18;
      *(_WORD *)(v16 + 56) = *(_WORD *)((char *)v5 + v6 + 56);
      *(_BYTE *)(a3 + v6 + 64) = 0;
      v19 = (_QWORD *)(a3 + v6 + 64);
      *(_BYTE *)(v16 + 80) = 0;
      if (*((_BYTE *)v5 + v6 + 80))
      {
        *v19 = 0;
        *(_QWORD *)(a3 + v6 + 72) = 0;
        v20 = *((_QWORD *)v17 + 8);
        *((_QWORD *)v17 + 8) = 0;
        *v19 = v20;
        v21 = *((_DWORD *)v17 + 18);
        *((_DWORD *)v17 + 18) = 0;
        *(_DWORD *)(v16 + 72) = v21;
        v22 = *((_DWORD *)v17 + 19);
        *((_DWORD *)v17 + 19) = 0;
        *(_DWORD *)(v16 + 76) = v22;
        *(_BYTE *)(v16 + 80) = 1;
      }
      *(_BYTE *)(v16 + 88) = 0;
      v23 = (_QWORD *)(v16 + 88);
      *(_BYTE *)(v16 + 104) = 0;
      if (v17[104])
      {
        v24 = (char *)v5 + v6;
        *v23 = 0;
        *(_QWORD *)(v16 + 96) = 0;
        v25 = *(_QWORD *)((char *)v5 + v6 + 88);
        *((_QWORD *)v24 + 11) = 0;
        *v23 = v25;
        v26 = *(_DWORD *)((char *)v5 + v6 + 96);
        *((_DWORD *)v24 + 24) = 0;
        v27 = a3 + v6;
        *(_DWORD *)(v27 + 96) = v26;
        v28 = *(_DWORD *)((char *)v5 + v6 + 100);
        *((_DWORD *)v24 + 25) = 0;
        *(_DWORD *)(v27 + 100) = v28;
        *(_BYTE *)(v16 + 104) = 1;
      }
      *(_QWORD *)(a3 + v6 + 112) = *(_QWORD *)((char *)v5 + v6 + 112);
      if (v17[104])
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 88, a2);
      if (v17[80])
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 64, a2);
      result = (WTF::StringImpl *)*((_QWORD *)v17 + 6);
      *((_QWORD *)v17 + 6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      if (v7[40])
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 24, a2);
      if (v7[16])
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6, a2);
      v6 += 120;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a1 + 104))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 88, a2);
    if (*(_BYTE *)(a1 + 80))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    v3 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 40))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    if (*(_BYTE *)(a1 + 16))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 120 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 120 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x2222223)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(120 * a2);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x78;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(v5, (WTF::StringImpl *)((char *)v5 + 120 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(a2);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

id WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(uint64_t a1)
{
  void *v1;
  CFTypeRef v2;
  CFTypeRef cf;

  WTF::createNSArray<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSArray * WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebKit::WebExtensionRegisteredScriptParameters const&)#1}>(a1, (id *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  return v1;
}

void sub_1976DB244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSArray * WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebKit::WebExtensionRegisteredScriptParameters const&)#1}>(uint64_t a1@<X0>, id *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  NSMutableArray *v10;
  objc_object *v11;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v5 = v4;
  *a2 = v4;
  if (v4)
    CFRetain(v4);

  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 120 * v6;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get(a2);
      v9 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::toWebAPI(v7);
      v10 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v9, v10, v11);

      v7 += 120;
      v8 -= 120;
    }
    while (v8);
  }
}

void sub_1976DB328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5DC8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5DC8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DB520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5DF0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5DF0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DB718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8) = v9;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1976DB7E4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::RetainPtr<NSData>::RetainPtr(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_1976DB840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(*(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _DWORD *v5;

  v4 = std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)a1, a2);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](v4 + 24, a2 + 24);
  v5 = *(_DWORD **)(a2 + 48);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 64), a2 + 64);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 88), a2 + 88);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

void sub_1976DB928(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(v2 + 80))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  v6 = *(WTF::StringImpl **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_BYTE *)(v2 + 40))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIStorageArea::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int j;
  unsigned int v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;
  uint64_t v14;
  uint64_t i;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  if ((_MergedGlobals_115 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    v19[0] = v18;
    WTF::AtomStringImpl::add();
    v19[1] = v18;
    WTF::AtomStringImpl::add();
    v19[2] = v18;
    WTF::AtomStringImpl::add();
    v19[3] = v18;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v17, (WTF::StringImpl *)v19, 4);
    v14 = v17;
    v17 = 0;
    qword_1ECE73140 = v14;
    for (i = 3; i != -1; --i)
    {
      v16 = (WTF::StringImpl *)v19[i];
      v19[i] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v5);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    _MergedGlobals_115 = 1;
  }
  if (*((_QWORD *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    v6 = (WTF::StringImpl *)v19[0];
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  if (qword_1ECE73140)
  {
    v7 = 0;
    for (j = *((_DWORD *)v6 + 4) >> 8; ; j = v7 + v9)
    {
      v9 = j & *(_DWORD *)(qword_1ECE73140 - 8);
      v10 = *(WTF::StringImpl **)(qword_1ECE73140 + 8 * v9);
      if (v10 != (WTF::StringImpl *)-1)
      {
        if (!v10)
          goto LABEL_11;
        if (v10 == v6)
          break;
      }
      ++v7;
    }
    v11 = 1;
    if (!v6)
      goto LABEL_16;
  }
  else
  {
LABEL_11:
    v11 = 0;
    if (!v6)
      goto LABEL_16;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v5);
    if ((v11 & 1) != 0)
      goto LABEL_17;
LABEL_19:
    if (*(_QWORD *)a2)
    {
      if (strcmp(*(const char **)a2, "setAccessLevel"))
        return 0;
    }
    else if ("setAccessLevel")
    {
      return 0;
    }
    v12 = 2;
    return *((unsigned __int8 *)this + 52) == v12;
  }
  *(_DWORD *)v6 -= 2;
LABEL_16:
  if ((v11 & 1) == 0)
    goto LABEL_19;
LABEL_17:
  v12 = 4;
  return *((unsigned __int8 *)this + 52) == v12;
}

void sub_1976DBBF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;

  v4 = 24;
  while (1)
  {
    v5 = *(WTF::StringImpl **)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v4 -= 8;
    if (v4 == -8)
      _Unwind_Resume(exception_object);
  }
}

void WebKit::WebExtensionAPIStorageArea::get(uint64_t a1, uint64_t a2, void *a3, WebKit::WebExtensionCallbackHandler **a4, _QWORD *a5)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  id v30;
  id v31;
  WebKit::WebProcess *v32;
  id v33;
  WebKit::WebExtensionCallbackHandler *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  void *v39;
  _DWORD *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  void *v44;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF **v51;
  WTF *v52;
  uint64_t v53;
  IPC::Encoder *v54;
  uint64_t v55;
  _DWORD *v56[3];

  v56[2] = *(_DWORD **)MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)MEMORY[0x1E0C99E40];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v55 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v55, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "orderedSetWithObjects:", v8, v9, v10, objc_opt_class(), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = WebKit::validateObject(v6, CFSTR("items"), v11, a5);

  if (v12)
  {
    v52 = 0;
    v53 = 0;
    objc_opt_class();
    WTF::dynamic_objc_cast<NSDictionary>(v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      if (!objc_msgSend(v13, "count"))
      {
        v30 = WebKit::WebExtensionCallbackHandler::call(*a4, MEMORY[0x1E0C9AA70]);
        goto LABEL_35;
      }
      objc_msgSend(v14, "allKeys");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::makeVector<WTF::String>(v15, (uint64_t)&v49);
      if (HIDWORD(v53))
        WTF::VectorDestructor<true,WTF::String>::destruct(v52, (WTF *)((char *)v52 + 8 * HIDWORD(v53)));
      v17 = v52;
      if (v52)
      {
        v52 = 0;
        LODWORD(v53) = 0;
        WTF::fastFree(v17, v16);
      }
      v52 = v49;
      v18 = v50;
      v49 = 0;
      v50 = 0;
      v53 = v18;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v16);

    }
    objc_opt_class();
    WTF::dynamic_objc_cast<NSArray>(v6);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (!v19)
    {
LABEL_18:

      objc_opt_class();
      WTF::dynamic_objc_cast<NSString>(v6);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        MEMORY[0x19AEABCC8](v56, v24);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v49, v56, 1uLL);
        if (HIDWORD(v53))
          WTF::VectorDestructor<true,WTF::String>::destruct(v52, (WTF *)((char *)v52 + 8 * HIDWORD(v53)));
        v26 = v52;
        if (v52)
        {
          v52 = 0;
          LODWORD(v53) = 0;
          WTF::fastFree(v26, v25);
        }
        v52 = v49;
        v27 = v50;
        v49 = 0;
        v50 = 0;
        v53 = v27;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v25);
        v29 = (WTF::StringImpl *)v56[0];
        v56[0] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
      }

      {
        v32 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v32);
      }
      v48 = *(_QWORD *)(a2 + 2120);
      v49 = (WTF *)&v48;
      v50 = a1 + 52;
      v51 = &v52;
      v33 = v14;
      ++*(_DWORD *)(a1 + 48);
      v34 = *a4;
      *a4 = 0;
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v36 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v36 = 1660;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(v36 + 528) = v36 + 16;
      *(_QWORD *)(v36 + 536) = v36 + 16;
      *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v36 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
      v54 = (IPC::Encoder *)v36;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>((IPC::Encoder *)v36, (uint64_t)&v49);
      v37 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v37 = off_1E34F5E58;
      *(_QWORD *)(v37 + 8) = v33;
      *(_QWORD *)(v37 + 16) = a1;
      *(_QWORD *)(v37 + 24) = v34;
      v38 = (_DWORD *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v56[0] = (_DWORD *)v37;
      v56[1] = v38;
      (*(void (**)(_QWORD *, IPC::Encoder **, _DWORD **, _QWORD))(*((_QWORD *)v32 + 2) + 40))((_QWORD *)v32 + 2, &v54, v56, 0);
      v40 = v56[0];
      v56[0] = 0;
      if (v40)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      v41 = v54;
      v54 = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v39);
        WTF::fastFree(v42, v43);
      }
      goto LABEL_35;
    }
    if (objc_msgSend(v19, "count"))
    {
      WTF::makeVector<WTF::String>(v20, (uint64_t)&v49);
      if (HIDWORD(v53))
        WTF::VectorDestructor<true,WTF::String>::destruct(v52, (WTF *)((char *)v52 + 8 * HIDWORD(v53)));
      v22 = v52;
      if (v52)
      {
        v52 = 0;
        LODWORD(v53) = 0;
        WTF::fastFree(v22, v21);
      }
      v52 = v49;
      v23 = v50;
      v49 = 0;
      v50 = 0;
      v53 = v23;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v21);
      goto LABEL_18;
    }
    v31 = WebKit::WebExtensionCallbackHandler::call(*a4, MEMORY[0x1E0C9AA70]);

LABEL_35:
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v44);
  }

}

void sub_1976DC0F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,IPC::Encoder *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v26;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, v26);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::getBytesInUse(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  BOOL v13;
  void *v14;
  void *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF **v40;
  WTF *v41;
  uint64_t v42;
  IPC::Encoder *v43;
  uint64_t v44;
  WTF::StringImpl *v45[3];

  v45[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v8 = a3;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8)
      goto LABEL_4;
  }
  v9 = (void *)MEMORY[0x1E0C99E40];
  v10 = objc_opt_class();
  v44 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "orderedSetWithObjects:", v10, v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = WebKit::validateObject(v8, CFSTR("keys"), v12, a5);

  if (v13)
  {
LABEL_4:
    v41 = 0;
    v42 = 0;
    objc_opt_class();
    WTF::dynamic_objc_cast<NSArray>(v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      WTF::makeVector<WTF::String>(v14, (uint64_t)&v38);
      if (HIDWORD(v42))
        WTF::VectorDestructor<true,WTF::String>::destruct(v41, (WTF *)((char *)v41 + 8 * HIDWORD(v42)));
      v17 = v41;
      if (v41)
      {
        v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree(v17, v16);
      }
      v41 = v38;
      v18 = v39;
      v38 = 0;
      v39 = 0;
      v42 = v18;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v16);
    }
    else
    {
      objc_opt_class();
      WTF::dynamic_objc_cast<NSString>(v8);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        MEMORY[0x19AEABCC8](v45, v19);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v38, (_DWORD **)v45, 1uLL);
        if (HIDWORD(v42))
          WTF::VectorDestructor<true,WTF::String>::destruct(v41, (WTF *)((char *)v41 + 8 * HIDWORD(v42)));
        v21 = v41;
        if (v41)
        {
          v41 = 0;
          LODWORD(v42) = 0;
          WTF::fastFree(v21, v20);
        }
        v41 = v38;
        v22 = v39;
        v38 = 0;
        v39 = 0;
        v42 = v22;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v20);
        v24 = v45[0];
        v45[0] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }

    }
    {
      v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v25);
    }
    v37 = *(_QWORD *)(a2 + 2120);
    v38 = (WTF *)&v37;
    v39 = a1 + 52;
    v40 = &v41;
    ++*(_DWORD *)(a1 + 48);
    v26 = *a4;
    *a4 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v28 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v28 = 1661;
    *(_QWORD *)(v28 + 8) = v27;
    *(_QWORD *)(v28 + 528) = v28 + 16;
    *(_QWORD *)(v28 + 536) = v28 + 16;
    *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v28 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
    v43 = (IPC::Encoder *)v28;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>((IPC::Encoder *)v28, (uint64_t)&v38);
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v29 = &off_1E34F5ED0;
    *((_QWORD *)v29 + 1) = a1;
    *((_QWORD *)v29 + 2) = v26;
    v30 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v45[0] = v29;
    v45[1] = v30;
    (*(void (**)(_QWORD *, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v25 + 2) + 40))((_QWORD *)v25 + 2, &v43, v45, 0);
    v32 = v45[0];
    v45[0] = 0;
    if (v32)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
    v33 = v43;
    v43 = 0;
    if (v33)
    {
      IPC::Encoder::~Encoder(v33, v31);
      WTF::fastFree(v34, v35);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v31);
  }

}

void sub_1976DC63C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, IPC::Encoder *a20,uint64_t a21,WTF::StringImpl *a22)
{
  void *v22;
  void *v23;
  void *v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  v27 = a22;
  a22 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, v28);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::set(uint64_t a1, uint64_t a2, void *a3, JSObjectRef **a4, _QWORD *a5)
{
  id v9;
  void *v10;
  void *v11;
  id *v12;
  NSString *v13;
  NSString *v14;
  void *v15;
  id v16;
  int v17;
  NSString *v18;
  WebKit::WebProcess *v19;
  void *v20;
  JSObjectRef *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  id obj;
  _QWORD v35[5];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  _QWORD v42[2];
  IPC::Encoder *v43;

  v9 = a3;
  if (objc_msgSend(v9, "count"))
  {
    v36 = 0;
    v37 = &v36;
    v38 = 0x3032000000;
    v39 = __Block_byref_object_copy__11;
    v40 = __Block_byref_object_dispose__11;
    v41 = 0;
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = ___ZN6WebKit26WebExtensionAPIStorageArea3setERNS_7WebPageEP12NSDictionaryON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSString_block_invoke;
    v35[3] = &unk_1E34F5E28;
    v35[4] = &v36;
    WebKit::mapObjects<NSDictionary>(v9, v35);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = (id *)(v37 + 5);
    if (v37[5])
    {
      v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::toErrorString(0, v13, CFSTR("it is not JSON-serializable"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (*(_BYTE *)(a1 + 52) != 4
        || (obj = 0, v17 = WebKit::anyItemsExceedQuota(v10, 0x2000, &obj), objc_storeStrong(v12, obj), !v17))
      {
        {
          v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v19);
        }
        v33 = *(_QWORD *)(a2 + 2120);
        WebKit::encodeJSONString(v11, 0, 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19AEABCC8](&v32, v20);
        ++*(_DWORD *)(a1 + 48);
        v21 = *a4;
        *a4 = 0;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v23 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v23 = 1663;
        *(_QWORD *)(v23 + 8) = v22;
        *(_QWORD *)(v23 + 528) = v23 + 16;
        *(_QWORD *)(v23 + 536) = v23 + 16;
        *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v23 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
        v43 = (IPC::Encoder *)v23;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v23, &v33);
        LOBYTE(v22) = *(_BYTE *)(a1 + 52);
        *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v22;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, (uint64_t *)&v32);
        v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v24 = &off_1E34F5F18;
        v24[1] = a1;
        v24[2] = v21;
        v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v42[0] = v24;
        v42[1] = v25;
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v19 + 2) + 40))((_QWORD *)v19 + 2, &v43, v42, 0);
        v27 = v42[0];
        v42[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = v43;
        v43 = 0;
        if (v28)
        {
          IPC::Encoder::~Encoder(v28, v26);
          WTF::fastFree(v29, v30);
        }
        v31 = v32;
        v32 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
          else
            *(_DWORD *)v31 -= 2;
        }

        goto LABEL_20;
      }
      v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::toErrorString(0, v13, CFSTR("it exceeded maximum size for a single item"), v18);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
    }
    *a5 = v15;

LABEL_20:
    _Block_object_dispose(&v36, 8);

    goto LABEL_21;
  }
  v16 = WebKit::WebExtensionCallbackHandler::call(*a4);
LABEL_21:

}

void sub_1976DCB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

id ___ZN6WebKit26WebExtensionAPIStorageArea3setERNS_7WebPageEP12NSDictionaryON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSString_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;

  v6 = a2;
  v7 = a3;
  if ((objc_msgSend(v7, "isUndefined") & 1) != 0 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v8 = 0;
  }
  else
  {
    WebKit::encodeJSONString(v7, 1, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  }

  return v8;
}

void sub_1976DCD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::remove(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  _QWORD v29[2];
  IPC::Encoder *v30;
  WTF::StringImpl *v31[3];
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = (void *)MEMORY[0x1E0C99E40];
  v11 = objc_opt_class();
  v32[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "orderedSetWithObjects:", v11, v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a5) = WebKit::validateObject(v9, CFSTR("keys"), v13, a5);

  if ((a5 & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      WTF::makeVector<WTF::String>(v9, (uint64_t)v28);
    }
    else
    {
      MEMORY[0x19AEABCC8](v31, v9);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28, (_DWORD **)v31, 1uLL);
      v15 = v31[0];
      v31[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    {
      v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v16);
    }
    v27 = *(_QWORD *)(a2 + 2120);
    v31[0] = (WTF::StringImpl *)&v27;
    v31[1] = (WTF::StringImpl *)(a1 + 52);
    v31[2] = (WTF::StringImpl *)v28;
    ++*(_DWORD *)(a1 + 48);
    v17 = *a4;
    *a4 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1662;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v30 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>((IPC::Encoder *)v19, (uint64_t)v31);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E34F5F40;
    v20[1] = a1;
    v20[2] = v17;
    v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v29[0] = v20;
    v29[1] = v21;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v16 + 2) + 40))((_QWORD *)v16 + 2, &v30, v29, 0);
    v23 = v29[0];
    v29[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v22);
      WTF::fastFree(v25, v26);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v22);
  }

}

void sub_1976DCFD8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, IPC::Encoder *a17, WTF::StringImpl *a18)
{
  void *v18;

  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIStorageArea::clear(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  _QWORD v19[2];
  IPC::Encoder *v20;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v17 = WebKit::WebProcess::WebProcess(v5);
    a3 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
  }
  v18 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1659;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v18);
  LOBYTE(v7) = *(_BYTE *)(a1 + 52);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = v7;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34F5F68;
  v9[1] = a1;
  v9[2] = v6;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19[0] = v9;
  v19[1] = v10;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v5 + 2) + 40))((_QWORD *)v5 + 2, &v20, v19, 0);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_1976DD290(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1976DD364()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976DD32CLL);
  JUMPOUT(0x1976DD318);
}

void WebKit::WebExtensionAPIStorageArea::setAccessLevel(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  void *v11;
  NSString *v12;
  char v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];
  IPC::Encoder *v27;
  const __CFString *v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  if ((byte_1ECE73139 & 1) == 0)
  {
    v30[0] = CFSTR("accessLevel");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1);
    qword_1ECE73148 = objc_claimAutoreleasedReturnValue();
    byte_1ECE73139 = 1;
  }
  v28 = CFSTR("accessLevel");
  v29 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (WebKit::validateDictionary(v9, CFSTR("accessOptions"), (void *)qword_1ECE73148, v10, a5))
  {
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("accessLevel"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v11, "isEqualToString:", CFSTR("TRUSTED_CONTEXTS")) & 1) != 0
      || (objc_msgSend(v11, "isEqualToString:", CFSTR("TRUSTED_AND_UNTRUSTED_CONTEXTS")) & 1) != 0)
    {
      v13 = objc_msgSend(v11, "isEqualToString:", CFSTR("TRUSTED_CONTEXTS"));
      {
        v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
      }
      v25 = *(_QWORD *)(a2 + 2120);
      ++*(_DWORD *)(a1 + 48);
      v15 = *a4;
      *a4 = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 1664;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v27 = (IPC::Encoder *)v17;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, &v25);
      LOBYTE(v16) = *(_BYTE *)(a1 + 52);
      *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = v16;
      *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = v13 ^ 1;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v18 = &off_1E34F5F90;
      v18[1] = a1;
      v18[2] = v15;
      v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v26[0] = v18;
      v26[1] = v19;
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v14 + 2) + 40))((_QWORD *)v14 + 2, &v27, v26, 0);
      v21 = v26[0];
      v26[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = v27;
      v27 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v20);
        WTF::fastFree(v23, v24);
      }
    }
    else
    {
      WebKit::toErrorString(0, CFSTR("accessLevel"), CFSTR("it must specify either 'TRUSTED_CONTEXTS' or 'TRUSTED_AND_UNTRUSTED_CONTEXTS'"), v12);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
}

void sub_1976DD664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIStorageArea::onChanged(WebKit::WebExtensionAPIStorageArea *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 31;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorageArea &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorageArea &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976DD864(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add(a1, a2, (uint64_t)v7);
      a2 = (WTF::StringImpl *)((char *)a2 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1976DD940(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  if (*v2)
    WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WTF::StringImpl **v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v8;
    v13 = (WTF::StringImpl **)(v6 + 8 * v12);
    v14 = *v13;
    if (*v13 != (WTF::StringImpl *)-1)
      break;
    v9 = (WTF::StringImpl **)(v6 + 8 * v12);
LABEL_10:
    v10 = i + v12;
  }
  if (!v14)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v13 = v9;
    }
    result = (uint64_t *)WTF::String::operator=(v13, a2);
    v15 = *v4;
    if (*v4)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(v4, v13);
        v13 = (WTF::StringImpl **)result;
        v20 = *v4;
        if (*v4)
          v23 = *(unsigned int *)(v20 - 4);
        else
          v23 = 0;
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    v19 = v20 + 8 * v23;
    v18 = 1;
    goto LABEL_30;
  }
  if (v14 != *(WTF::StringImpl **)a2)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v17 = 0;
  else
    v17 = *(unsigned int *)(v6 - 4);
  v18 = 0;
  v19 = v6 + 8 * v17;
LABEL_30:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v18;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v19 = v18 & v16;
            v18 = ++v17 + v19;
          }
          while (*(_QWORD *)(v15 + 8 * v19));
          v20 = (WTF::StringImpl **)(v15 + 8 * v19);
          *v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *v20 = v21;
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v12 = v20;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  v4 = **(_BYTE **)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34F5E58;
  v2 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }

  return a1;
}

{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34F5E58;
  v2 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F5E70[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(a1 + 8);
  }
}

void sub_1976DDE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F5E70[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F5E70[v2])(&v3, &v1);
}

void sub_1976DDEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F5E70[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  WebKit::WebExtensionCallbackHandler *v4;
  __CFString *v5;
  __CFString *v6;
  WebKit *v7;
  NSDictionary *v8;
  objc_object *v9;
  uint64_t v10;
  id v11;
  _Unwind_Exception *v12;
  id v13;
  id v14;

  if (a3)
  {
    if (a3 != 1)
    {
      v12 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v12);
    }
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v14 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    WebKit::parseJSON(v6, 0, 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();

    WebKit::mapObjects<NSDictionary>(v14, &__block_literal_global_34);
    v7 = (WebKit *)objc_claimAutoreleasedReturnValue();
    v9 = (objc_object *)v7;
    if (*(_QWORD *)a1)
    {
      WebKit::mergeDictionaries(v7, *(NSDictionary **)a1, v8);
      v10 = objc_claimAutoreleasedReturnValue();

      v9 = (objc_object *)v10;
    }
    v11 = WebKit::WebExtensionCallbackHandler::call(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v9);

  }
}

id ___ZZN6WebKit26WebExtensionAPIStorageArea3getERNS_7WebPageEP11objc_objectON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSStringENK3__0clEONSt12experimental15fundamentals_v38expectedINS5_6StringESM_EE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  WebKit::parseJSON(a3, 1, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5ED0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5ED0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v14 = 0;
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v15 = 0;
        if (v27 && v26)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
          v15 = *a2;
          v14 = a2[1];
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_22;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v14 = v5;
    v15 = v4;
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
    goto LABEL_26;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v5 < v9 || v5 - v9 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      v18 = a2[3];
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v28 = *a2;
        v29 = a2[1];
        v30 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v30)
        {
          if (v29)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
        }
      }
      goto LABEL_26;
    }
    v11 = 0;
    v12 = (uint64_t *)(v4 + v9);
    v13 = *v12;
    a2[2] = (uint64_t)(v12 + 1);
    v34 = v13;
    v35 = 0;
    v36 = 1;
LABEL_15:
    v31[0] = 0;
    v32 = -1;
    ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E34F5EF8[v11])(&v37, v31, &v34);
    v32 = v11;
    v33 = 1;
    if (!v36)
      goto LABEL_18;
    if (v35 == -1)
      goto LABEL_18;
    ((void (*)(uint64_t *, uint64_t *))off_1E34F5EE8[v35])(&v37, &v34);
    if (v33)
      goto LABEL_18;
    goto LABEL_28;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v37);
  if (v38)
  {
    v34 = v37;
    v11 = 1;
    v35 = 1;
    v36 = 1;
    goto LABEL_15;
  }
LABEL_26:
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v20)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  v31[0] = 0;
  v33 = 0;
LABEL_28:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22), !v33))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_18:
  WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v31);
  if (v33)
  {
    if (v32 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34F5EE8[v32])(&v34, v31);
  }
}

void sub_1976DE3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1)
      ((void (*)(__int16 *, char *))off_1E34F5EE8[a12])(&a16, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)&v1);
  if (v2 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F5EE8[v2])(&v3, &v1);
}

void sub_1976DE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F5EE8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJmN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJmS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJmN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJmS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJmN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJmS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)a2);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5F18;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5F18;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DE794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5F40;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5F40;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DE98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5F68;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5F68;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DEB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5F90;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5F90;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976DED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIStorage::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  if (!*(_QWORD *)a2)
  {
    if (!"session")
      return *((_BYTE *)this[3] + 120) || *((_BYTE *)this + 8) == 0;
    return 0;
  }
  if (strcmp(*(const char **)a2, "session"))
    return 0;
  return *((_BYTE *)this[3] + 120) || *((_BYTE *)this + 8) == 0;
}

uint64_t WebKit::WebExtensionAPIStorage::local(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  char v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 1;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, char *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x40);
  result = WebKit::WebExtensionAPIStorageArea::WebExtensionAPIStorageArea(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976DEF34(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIStorage::session(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  char v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 2;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIStorage::sync(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  char v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 4;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIStorage::onChanged(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v6 = 31;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976DF170(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(WebCore *a1, _QWORD *a2, char a3, int a4)
{
  __CFString *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  char v12;

  v12 = a3;
  if (a4 != 1 || *((_QWORD *)a1 + 18))
  {
    if (*a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    WebKit::parseJSON(v6, 0, 0);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = off_1E34F6010;
    v7[1] = &v11;
    v7[2] = &v12;
    v10 = v7;
    v8 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a4);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v10, v8);
    v9 = v10;
    v10 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);

  }
}

void sub_1976DF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionAPIStorageArea::WebExtensionAPIStorageArea(WTF::StringImpl **a1, const WebKit::WebExtensionAPIObject *a2, char a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10[2];

  v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(_QWORD *)v6 = off_1E34F5FB8;
  *(_QWORD *)(v6 + 40) = &unk_1E34F5FE8;
  *(_BYTE *)(v6 + 52) = a3;
  *(_QWORD *)(v6 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10[0] = v10[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, (const WTF::String *)v10, a2);
  v8 = v10[0];
  v10[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

void sub_1976DF394(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::~WebExtensionAPIStorageArea(WebKit::WebExtensionAPIStorageArea *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E34F5FB8;
  *((_QWORD *)this + 5) = &unk_1E34F5FE8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34F5FB8;
  *((_QWORD *)this + 5) = &unk_1E34F5FE8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v4, v5);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIStorageArea::~WebExtensionAPIStorageArea(WebKit::WebExtensionAPIStorageArea *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;

  *(_QWORD *)this = &unk_1E34F5FE8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5FB8;
  v4 = (WebKit::WebExtensionAPIStorageArea *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
}

{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E34F5FE8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5FB8;
  v4 = (WebKit::WebExtensionAPIStorageArea *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
  WTF::fastFree(v5, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(WTF::String const&,WebKit::WebExtensionDataType,WebKit::WebExtensionContentWorldType)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, int a2, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIStorage *v5;
  WebKit::WebExtensionAPIEvent *v6;
  WebKit::WebExtensionAPIStorage *v7;
  int v8;
  WebKit::WebExtensionAPIStorageArea *v9;
  WebKit::WebExtensionAPIEvent *v10;

  v5 = (WebKit::WebExtensionAPIStorage *)WebKit::WebExtensionAPINamespace::storage(this);
  v6 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIStorage::onChanged(v5);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v6, **(objc_object ***)(a1 + 8));
  v7 = (WebKit::WebExtensionAPIStorage *)WebKit::WebExtensionAPINamespace::storage(this);
  v8 = **(unsigned __int8 **)(a1 + 16);
  if (v8 == 4)
  {
    v9 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::sync(v7);
  }
  else if (v8 == 2)
  {
    v9 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::session(v7);
  }
  else
  {
    v9 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::local(v7);
  }
  v10 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIStorageArea::onChanged(v9);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v10, **(objc_object ***)(a1 + 8));
}

void sub_1976DFAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITabs::parseTabUpdateOptions(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  NSString *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  id v17;
  void *v18;
  NSString *v19;
  long double v20;
  double v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id result;
  BOOL v36;
  WTF::StringImpl *v38;
  long double __y[5];
  _QWORD v40[7];
  _QWORD v41[8];

  v41[7] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = CFSTR("properties");
  if (byte_1ECE73151 == 1)
  {
    v9 = (void *)qword_1ECE73168;
  }
  else
  {
    v40[0] = CFSTR("active");
    v41[0] = objc_opt_class();
    v40[1] = CFSTR("highlighted");
    v41[1] = objc_opt_class();
    v40[2] = CFSTR("muted");
    v41[2] = objc_opt_class();
    v40[3] = CFSTR("openerTabId");
    v41[3] = objc_opt_class();
    v40[4] = CFSTR("pinned");
    v41[4] = objc_opt_class();
    v40[5] = CFSTR("selected");
    v41[5] = objc_opt_class();
    v40[6] = CFSTR("url");
    v41[6] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73168 = (uint64_t)v9;
    byte_1ECE73151 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("properties"), 0, v9, a4))
  {
    v15 = 0;
LABEL_36:

    return (id)v15;
  }
  WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("url"), 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
    goto LABEL_17;
  v11 = *(_QWORD *)(a1 + 24);
  MEMORY[0x19AEABCC8](&v38, v10);
  MEMORY[0x19AEABB24](__y, v11 + 40, &v38, 0);
  std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(a3 + 16, (WTF::StringImpl *)__y);
  v14 = *(WTF::StringImpl **)&__y[0];
  __y[0] = 0.0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = v38;
  v38 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_BYTE *)(a3 + 56))
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0)
    {
      WebKit::toErrorString(0, CFSTR("url"), CFSTR("'%@' is not a valid URL"), v13, v10, v38, *(_QWORD *)&__y[0]);
      v17 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
LABEL_17:

    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("openerTabId"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v18;
    if (!v18)
      goto LABEL_22;
    objc_msgSend(v18, "doubleValue");
    v21 = v20;
    if (v20 == -1.0)
    {
      v22 = -256;
      v23 = 1;
      LOBYTE(v24) = -2;
    }
    else
    {
      LOBYTE(v24) = 0;
      v23 = 0;
      v36 = v20 < 0.0 || ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      if (v36 && (unint64_t)(*(_QWORD *)&v20 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        if (v20 < 1.84467441e19)
        {
          if (modf(v20, __y) == 0.0)
          {
            v22 = (unint64_t)v21 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v24) = -2;
            if ((unint64_t)v21 - 1 >= 0xFFFFFFFFFFFFFFFELL)
              v22 = -256;
            else
              v24 = (unint64_t)v21;
            v23 = 1;
          }
          else
          {
            v23 = 0;
            LOBYTE(v24) = 0;
            v22 = 0;
          }
        }
      }
    }
    v25 = v22 & 0xFFFFFFFFFFFFFF00 | v24;
    *(_QWORD *)(a3 + 136) = v25;
    *(_BYTE *)(a3 + 144) = v23;
    if (v23)
    {
      if (v25 != -2)
      {
LABEL_22:

        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("active"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = v26;
        if (v26)
          *(_WORD *)(a3 + 152) = objc_msgSend(v26, "BOOLValue") | 0x100;

        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("pinned"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v28;
        if (v28)
          *(_WORD *)(a3 + 156) = objc_msgSend(v28, "BOOLValue") | 0x100;

        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("muted"));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v30;
        if (v30)
          *(_WORD *)(a3 + 160) = objc_msgSend(v30, "BOOLValue") | 0x100;

        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("selected"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = v32;
        if (v32)
          *(_WORD *)(a3 + 154) = objc_msgSend(v32, "BOOLValue") | 0x100;

        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("highlighted"));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v34;
        if (v34)
          *(_WORD *)(a3 + 154) = objc_msgSend(v34, "BOOLValue") | 0x100;
        v15 = 1;
        goto LABEL_35;
      }
    }
    WebKit::toErrorString(0, CFSTR("openerTabId"), CFSTR("'%@' is not a tab identifier"), v19, v10, v38, *(_QWORD *)&__y[0]);
    v17 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:
    v15 = 0;
    *a4 = v17;
LABEL_35:

    goto LABEL_36;
  }
  result = std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_1976E0094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::parseSendMessageOptions(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSString *v10;
  long double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  double v18;
  unint64_t v19;
  long double v21;
  const __CFString *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = CFSTR("options");
  if (byte_1ECE73155 == 1)
  {
    v7 = (void *)qword_1ECE73188;
  }
  else
  {
    v22 = CFSTR("frameId");
    v23[0] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73188 = (uint64_t)v7;
    byte_1ECE73155 = 1;
  }
  if (WebKit::validateDictionary(v5, CFSTR("options"), 0, v7, a3))
  {
    WebKit::objectForKey<NSNumber>(v5, (uint64_t)CFSTR("frameId"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (!v8)
    {
LABEL_29:
      v15 = 1;
LABEL_31:

      goto LABEL_32;
    }
    objc_msgSend(v8, "doubleValue");
    v12 = v11;
    if (v11 == 0.0)
    {
      v13 = -256;
      v14 = 254;
    }
    else if (v11 == -1.0)
    {
      v13 = -256;
      v14 = 253;
    }
    else
    {
      v17 = (v11 < 0.0 || ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v11 - 1) > 0xFFFFFFFFFFFFELL;
      if (v17 || v11 >= 1.84467441e19)
        goto LABEL_30;
      v18 = modf(v11, &v21);
      v13 = v18 == 0.0 ? (unint64_t)v12 & 0xFFFFFFFFFFFFFF00 : 0;
      v14 = v18 == 0.0 ? (unint64_t)v12 : 0;
      if (v18 != 0.0)
        goto LABEL_30;
    }
    v19 = v13 | v14;
    if (v19 != -3)
    {
      if (!*(_BYTE *)(a2 + 8))
        *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)a2 = v19;
      goto LABEL_29;
    }
LABEL_30:
    WebKit::toErrorString(0, CFSTR("frameId"), CFSTR("it is not a frame identifier"), v10);
    v15 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_31;
  }
  v15 = 0;
LABEL_32:

  return v15;
}

void sub_1976E03D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::parseScriptOptions(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  NSString *v10;
  id v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  NSString *v15;
  void *v16;
  void *v17;
  BOOL v18;
  NSString *v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSString *v27;
  long double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v33;
  double v34;
  WTF::StringImpl *v35;
  void *v36;
  WTF *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  WTF *v42;
  void *v43;
  void *v44;
  NSString *v46;
  WTF *v47;
  int v48;
  WTF::StringImpl *v49;
  _QWORD v50[5];
  _QWORD v51[6];

  v51[5] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (byte_1ECE73157 == 1)
  {
    v6 = (void *)qword_1ECE73198;
  }
  else
  {
    v50[0] = CFSTR("allFrames");
    v51[0] = objc_opt_class();
    v50[1] = CFSTR("code");
    v51[1] = objc_opt_class();
    v50[2] = CFSTR("tabId");
    v51[2] = objc_opt_class();
    v50[3] = CFSTR("file");
    v51[3] = objc_opt_class();
    v50[4] = CFSTR("frameId");
    v51[4] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73198 = (uint64_t)v6;
    byte_1ECE73157 = 1;
  }
  if (!WebKit::validateDictionary(v5, CFSTR("details"), 0, v6, a3))
    goto LABEL_56;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("file"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7
    || (objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("code")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = v8 == 0,
        v8,
        v7,
        v9))
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("file"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {

    }
    else
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("code"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13 == 0;

      if (v14)
      {
        WebKit::toErrorString(0, CFSTR("details"), CFSTR("it must specify either 'file' or 'code'"), v15);
        v11 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
    }
    WebKit::objectForKey<NSNumber>(v5, (uint64_t)CFSTR("allFrames"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v16, "BOOLValue") & 1) != 0)
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("frameId"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v17 == 0;

      if (!v18)
      {
        WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'allFrames' and 'frameId'"), v19);
        v11 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
    }
    else
    {

    }
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("file"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      MEMORY[0x19AEABCC8](&v49, v20);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v47, (_DWORD **)&v49, 1uLL);
      std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 32, &v47);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v21);
      v23 = v49;
      v49 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }

    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("code"));
    v47 = (WTF *)objc_claimAutoreleasedReturnValue();
    if (v47)
    {
      std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2 + 80, &v47);

    }
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("frameId"), v47);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if (!v25)
    {
LABEL_46:

      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("allFrames"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      WTF::dynamic_objc_cast<NSNumber>(v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v39 || (v40 = objc_msgSend(v39, "BOOLValue"), v39, (v40 & 1) == 0))
      {
        v49 = (WTF::StringImpl *)-2;
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v47, (uint64_t *)&v49, 1uLL);
        std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &v47);
        v42 = v47;
        if (v47)
        {
          v47 = 0;
          v48 = 0;
          WTF::fastFree(v42, v41);
        }
      }
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("cssOrigin"));
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = v43;
      if (v43)
      {
        if (!objc_msgSend(v43, "isEqualToString:", CFSTR("user")))
        {
          if (objc_msgSend(v44, "isEqualToString:", CFSTR("author")))
          {
            v24 = 1;
            *(_BYTE *)(a2 + 129) = 1;
          }
          else
          {
            WebKit::toErrorString(0, CFSTR("cssOrigin"), CFSTR("it must specify either 'author' or 'user'"), v46);
            v24 = 0;
            *a3 = (id)objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_54;
        }
        *(_BYTE *)(a2 + 129) = 0;
      }
      v24 = 1;
LABEL_54:

      goto LABEL_57;
    }
    objc_msgSend(v25, "doubleValue");
    v29 = v28;
    if (v28 == 0.0)
    {
      v30 = -256;
      v31 = 254;
    }
    else if (v28 == -1.0)
    {
      v30 = -256;
      v31 = 253;
    }
    else
    {
      v33 = (v28 < 0.0 || ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v28 - 1) > 0xFFFFFFFFFFFFELL;
      if (v33
        || v28 >= 1.84467441e19
        || ((v34 = modf(v28, (long double *)&v47), v34 != 0.0)
          ? (v30 = 0)
          : (v30 = (unint64_t)v29 & 0xFFFFFFFFFFFFFF00),
            v34 != 0.0 ? (v31 = 0) : (v31 = (unint64_t)v29),
            v34 != 0.0))
      {
LABEL_55:
        WebKit::toErrorString(0, CFSTR("frameId"), CFSTR("it is not a frame identifier"), v27);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_56:
        v24 = 0;
        goto LABEL_57;
      }
    }
    v35 = (WTF::StringImpl *)(v30 | v31);
    if (v35 != (WTF::StringImpl *)-3)
    {
      v49 = v35;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v47, (uint64_t *)&v49, 1uLL);
      std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &v47);
      v37 = v47;
      if (v47)
      {
        v47 = 0;
        v48 = 0;
        WTF::fastFree(v37, v36);
      }
      goto LABEL_46;
    }
    goto LABEL_55;
  }
  WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'file' and 'code'"), v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:
  v24 = 0;
  *a3 = v11;
LABEL_57:

  return v24;
}

void sub_1976E09BC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;

  if (a9)
    WTF::fastFree(a9, a2);

  _Unwind_Resume(a1);
}

BOOL WebKit::isValid(uint64_t a1, char a2, _QWORD *a3, NSString *a4)
{
  _BOOL8 v4;
  __CFString *v7;

  v4 = a1 != -2 && a2 != 0;
  if (!v4)
  {
    if (a2 && a1 == -2)
    {
      v7 = CFSTR("'tabs.TAB_ID_NONE' is not allowed");
    }
    else
    {
      if (a2)
      {
        WebKit::toErrorString(0, CFSTR("tabId"), CFSTR("'%llu' is not a tab identifier"), a4, a1);
LABEL_13:
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v4;
      }
      v7 = CFSTR("it is not a tab identifier");
    }
    WebKit::toErrorString(0, CFSTR("tabId"), &v7->isa, a4);
    goto LABEL_13;
  }
  return v4;
}

{
  _BOOL8 v4;
  __CFString *v7;

  v4 = a1 != -2 && a2 != 0;
  if (!v4)
  {
    if (a2 && a1 == -2)
    {
      v7 = CFSTR("'windows.WINDOW_ID_NONE' is not allowed");
    }
    else
    {
      if (a2)
      {
        WebKit::toErrorString(0, CFSTR("windowId"), CFSTR("'%llu' is not a window identifier"), a4, a1);
LABEL_13:
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v4;
      }
      v7 = CFSTR("it is not a window identifier");
    }
    WebKit::toErrorString(0, CFSTR("windowId"), &v7->isa, a4);
    goto LABEL_13;
  }
  return v4;
}

BOOL WebKit::WebExtensionAPITabs::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int j;
  unsigned int v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v13;
  uint64_t i;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  if ((byte_1ECE73158 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WTF::AtomStringImpl::add();
    v18[1] = v17;
    WTF::AtomStringImpl::add();
    v18[2] = v17;
    WTF::AtomStringImpl::add();
    v18[3] = v17;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v16, (WTF::StringImpl *)v18, 4);
    v13 = v16;
    v16 = 0;
    qword_1ECE731A0 = v13;
    for (i = 3; i != -1; --i)
    {
      v15 = (WTF::StringImpl *)v18[i];
      v18[i] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v5);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    byte_1ECE73158 = 1;
  }
  if (*((_QWORD *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    v6 = (WTF::StringImpl *)v18[0];
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  if (qword_1ECE731A0)
  {
    v7 = 0;
    for (j = *((_DWORD *)v6 + 4) >> 8; ; j = v7 + v9)
    {
      v9 = j & *(_DWORD *)(qword_1ECE731A0 - 8);
      v10 = *(WTF::StringImpl **)(qword_1ECE731A0 + 8 * v9);
      if (v10 != (WTF::StringImpl *)-1)
      {
        if (!v10)
          goto LABEL_11;
        if (v10 == v6)
          break;
      }
      ++v7;
    }
    v11 = 1;
    if (!v6)
      goto LABEL_16;
  }
  else
  {
LABEL_11:
    v11 = 0;
    if (!v6)
      goto LABEL_16;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v5);
    if (v11)
      return *((double *)this[3] + 14) < 3.0;
    return 0;
  }
  *(_DWORD *)v6 -= 2;
LABEL_16:
  if (v11)
    return *((double *)this[3] + 14) < 3.0;
  return 0;
}

void sub_1976E0D8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v14;
  WTF::StringImpl *v15;

  v14 = 24;
  while (1)
  {
    v15 = *(WTF::StringImpl **)(v12 + v14);
    *(_QWORD *)(v12 + v14) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    v14 -= 8;
    if (v14 == -8)
      _Unwind_Resume(exception_object);
  }
}

void WebKit::WebExtensionAPITabs::createTab(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  NSString *v14;
  long double v15;
  double v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  BOOL v38;
  _BYTE v40[16];
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  id __y;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v40[0] = 0;
  v40[8] = 0;
  LOBYTE(v41) = 0;
  v42 = 0;
  LOBYTE(v43) = 0;
  v44 = 0;
  LOBYTE(v45) = 0;
  v46 = 0;
  LOBYTE(v47) = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v9 = a3;
  v10 = CFSTR("properties");
  if ((WebKit::WebExtensionAPITabs::parseTabUpdateOptions(a1, v9, (uint64_t)v40, a5) & 1) == 0)
    goto LABEL_25;
  if (_MergedGlobals_116 == 1)
  {
    v11 = (void *)qword_1ECE73160;
  }
  else
  {
    v57 = CFSTR("index");
    v61 = objc_opt_class();
    v58 = CFSTR("openInReaderMode");
    v62 = objc_opt_class();
    v59 = CFSTR("title");
    v63 = objc_opt_class();
    v60 = CFSTR("windowId");
    v64 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v61, &v57, 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73160 = (uint64_t)v11;
    _MergedGlobals_116 = 1;
  }
  if (!WebKit::validateDictionary(v9, CFSTR("properties"), 0, v11, a5))
    goto LABEL_25;
  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("windowId"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "doubleValue");
    v16 = v15;
    if (v15 == -1.0)
    {
      v17 = -256;
      v18 = 1;
      LOBYTE(v19) = -2;
    }
    else if (v15 == -2.0)
    {
      v17 = -256;
      v18 = 1;
      LOBYTE(v19) = -3;
    }
    else
    {
      LOBYTE(v19) = 0;
      v18 = 0;
      v38 = v15 < 0.0 || ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      if (v38 && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        if (v15 < 1.84467441e19)
        {
          if (modf(v15, (long double *)&__y) == 0.0)
          {
            v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v19) = -2;
            if ((unint64_t)v16 - 1 >= 0xFFFFFFFFFFFFFFFELL)
              v17 = -256;
            else
              v19 = (unint64_t)v16;
            v18 = 1;
          }
          else
          {
            v18 = 0;
            LOBYTE(v19) = 0;
            v17 = 0;
          }
        }
      }
    }
    v20 = v17 & 0xFFFFFFFFFFFFFF00 | v19;
    v45 = v20;
    v46 = v18;
    if (!v18 || v20 == -2)
    {
      WebKit::toErrorString(0, CFSTR("windowId"), CFSTR("'%@' is not a window identifier"), v14, v13);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_25:
      goto LABEL_26;
    }
  }

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("index"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v21)
  {
    v47 = objc_msgSend(v21, "unsignedIntegerValue");
    v48 = 1;
  }

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("openInReaderMode"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23)
    v55 = objc_msgSend(v23, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("title"), 1);
  __y = (id)objc_claimAutoreleasedReturnValue();
  if (__y)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v43, &__y);

  }
  {
    v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v25);
  }
  v57 = *(const __CFString **)(a2 + 2120);
  LOBYTE(v58) = 1;
  ++*(_DWORD *)(a1 + 48);
  v26 = *a4;
  *a4 = 0;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 1667;
  *(_QWORD *)(v28 + 8) = v27;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  __y = (id)v28;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v28, (uint64_t *)&v57);
  IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v28, (uint64_t)v40);
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v29 = &off_1E34F6038;
  v29[1] = a1;
  v29[2] = v26;
  v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v61 = (uint64_t)v29;
  v62 = v30;
  (*(void (**)(_QWORD *, id *, uint64_t *, _QWORD))(*((_QWORD *)v25 + 2) + 40))((_QWORD *)v25 + 2, &__y, &v61, 0);
  v32 = v61;
  v61 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (IPC::Encoder *)__y;
  __y = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
LABEL_26:
  if (v44)
  {
    v36 = v43;
    v43 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (v42)
  {
    v37 = v41;
    v41 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v37 -= 2;
    }
  }

}

void sub_1976E1378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20)
{
  void *v20;
  void *v21;
  WTF::StringImpl *v23;

  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v23);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a18 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v23);
    else
      *(_DWORD *)a13 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::query(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  __CFString *v10;
  char *v11;
  void *v12;
  void *v13;
  NSString *v14;
  long double v15;
  double v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int16 v25;
  NSString *v26;
  void *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  void *v32;
  void *v33;
  const WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  NSString *v39;
  WebKit::WebExtensionMatchPattern *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  WebKit::WebProcess *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  __CFString *v72;
  WebKit::WebExtensionMatchPattern *v73;
  WTF::StringImpl *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  WebKit::WebExtensionMatchPattern *v79;
  unsigned int v80;
  char v81;
  WTF::StringImpl *v82;
  char v83;
  unint64_t v84;
  char v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  char v89;
  _QWORD v90[2];
  WebKit::WebExtensionMatchPattern *__y[2];
  WTF::StringImpl *v92;
  uint64_t v93;
  IPC::Encoder *v94[15];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  LOBYTE(v79) = 0;
  v81 = 0;
  LOBYTE(v82) = 0;
  v83 = 0;
  LOBYTE(v84) = 0;
  v85 = 0;
  LOBYTE(v88) = 0;
  v89 = 0;
  v86 = 0;
  v87 = 0;
  memset(v90, 0, 14);
  v9 = a3;
  v10 = CFSTR("info");
  v11 = &_MergedGlobals_106;
  if ((byte_1ECE73153 & 1) == 0)
  {
    v94[0] = (IPC::Encoder *)CFSTR("active");
    v95 = objc_opt_class();
    v94[1] = (IPC::Encoder *)CFSTR("audible");
    v96 = objc_opt_class();
    v94[2] = (IPC::Encoder *)CFSTR("currentWindow");
    v97 = objc_opt_class();
    v94[3] = (IPC::Encoder *)CFSTR("hidden");
    v98 = objc_opt_class();
    v94[4] = (IPC::Encoder *)CFSTR("highlighted");
    v99 = objc_opt_class();
    v94[5] = (IPC::Encoder *)CFSTR("index");
    v100 = objc_opt_class();
    v94[6] = (IPC::Encoder *)CFSTR("lastFocusedWindow");
    v101 = objc_opt_class();
    v94[7] = (IPC::Encoder *)CFSTR("muted");
    v102 = objc_opt_class();
    v94[8] = (IPC::Encoder *)CFSTR("pinned");
    v103 = objc_opt_class();
    v94[9] = (IPC::Encoder *)CFSTR("selected");
    v104 = objc_opt_class();
    v94[10] = (IPC::Encoder *)CFSTR("status");
    v105 = objc_opt_class();
    v94[11] = (IPC::Encoder *)CFSTR("title");
    v106 = objc_opt_class();
    v94[12] = (IPC::Encoder *)CFSTR("url");
    v75 = (void *)MEMORY[0x1E0C99E40];
    v76 = objc_opt_class();
    v93 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v93, 1);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "orderedSetWithObjects:", v76, v77, 0);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = v78;
    v94[13] = (IPC::Encoder *)CFSTR("windowId");
    v108 = objc_opt_class();
    v94[14] = (IPC::Encoder *)CFSTR("windowType");
    v109 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, v94, 15);
    qword_1ECE73178 = objc_claimAutoreleasedReturnValue();

    byte_1ECE73153 = 1;
    v11 = &_MergedGlobals_106;
  }
  if (!WebKit::validateDictionary(v9, CFSTR("info"), 0, *((void **)v11 + 47), a5))
    goto LABEL_84;
  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("windowId"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "doubleValue");
    v16 = v15;
    if (v15 == -1.0)
    {
      v17 = -256;
      v18 = 1;
      LOBYTE(v19) = -2;
    }
    else if (v15 == -2.0)
    {
      v17 = -256;
      v18 = 1;
      LOBYTE(v19) = -3;
    }
    else
    {
      LOBYTE(v19) = 0;
      v18 = 0;
      if ((v15 < 0.0 || ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        if (v15 < 1.84467441e19)
        {
          if (modf(v15, (long double *)__y) == 0.0)
          {
            v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v19) = -2;
            if ((unint64_t)v16 - 1 >= 0xFFFFFFFFFFFFFFFELL)
              v17 = -256;
            else
              v19 = (unint64_t)v16;
            v18 = 1;
          }
          else
          {
            v18 = 0;
            LOBYTE(v19) = 0;
            v17 = 0;
          }
        }
      }
    }
    v20 = v17 & 0xFFFFFFFFFFFFFF00 | v19;
    v84 = v20;
    v85 = v18;
    if (!v18 || v20 == -2)
    {
      WebKit::toErrorString(0, CFSTR("windowId"), CFSTR("'%@' is not a window identifier"), v14, v13);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_84;
    }
    if (v85 && v20 == -3)
    {
      v85 = 0;
      HIWORD(v86) = 257;
    }
  }

  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("windowType"), 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v21)
  {
    LOBYTE(__y[0]) = 0;
    if ((WebKit::WebExtensionAPIWindows::parseWindowTypeFilter(v21, __y, CFSTR("windowType"), a5) & 1) == 0)
    {

      goto LABEL_84;
    }
    BYTE1(v86) = 1;
    LOBYTE(v86) = __y[0];
  }

  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("status"), 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (!v23)
    goto LABEL_25;
  if ((objc_msgSend(v23, "isEqualToString:", CFSTR("loading")) & 1) == 0)
  {
    if ((objc_msgSend(v24, "isEqualToString:", CFSTR("complete")) & 1) != 0)
    {
      v25 = 256;
      goto LABEL_24;
    }
    WebKit::toErrorString(0, CFSTR("status"), CFSTR("it must specify either 'loading' or 'complete'"), v26);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_84:
    goto LABEL_85;
  }
  v25 = 257;
LABEL_24:
  HIWORD(v90[0]) = v25;
LABEL_25:

  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("url"), 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27)
  {
    MEMORY[0x19AEABCC8](&v92, v27);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)__y, (_DWORD **)&v92, 1uLL);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v79, __y);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v28);
    v30 = v92;
    v92 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  else
  {
    WebKit::objectForKey<NSArray>(v9, (uint64_t)CFSTR("url"), 1, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (v31)
    {
      WTF::makeVector<WTF::String>(v31, (uint64_t)__y);
      std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v79, __y);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v33);
    }

  }
  if (v81 && v80)
  {
    v37 = (WTF::StringImpl **)v79;
    v38 = 8 * v80;
    while (1)
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v37, v36, __y);
      if (!__y[0] || (WebKit::WebExtensionMatchPattern::isSupported(__y[0]) & 1) == 0)
        break;
      v40 = __y[0];
      __y[0] = 0;
      if (v40)
        CFRelease(*((CFTypeRef *)v40 + 1));
      ++v37;
      v38 -= 8;
      if (!v38)
        goto LABEL_51;
    }
    if (*v37)
      v72 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v72 = &stru_1E351F1B8;
    WebKit::toErrorString(0, CFSTR("url"), CFSTR("'%@' is not a valid pattern"), v39, v72);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    v73 = __y[0];
    __y[0] = 0;
    if (v73)
      CFRelease(*((CFTypeRef *)v73 + 1));
    goto LABEL_84;
  }
LABEL_51:
  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("title"), 1);
  __y[0] = (WebKit::WebExtensionMatchPattern *)objc_claimAutoreleasedReturnValue();
  if (__y[0])
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v82, __y);

  }
  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("currentWindow"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v41;
  if (v41)
    HIWORD(v86) = objc_msgSend(v41, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("lastFocusedWindow"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43;
  if (v43)
    v87 = objc_msgSend(v43, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("audible"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v45;
  if (v45)
    WORD1(v90[0]) = objc_msgSend(v45, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("hidden"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v47;
  if (v47)
    WORD2(v90[0]) = objc_msgSend(v47, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("index"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = v49;
  if (v49)
  {
    v88 = objc_msgSend(v49, "unsignedIntegerValue");
    v89 = 1;
  }

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("active"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = v51;
  if (v51)
    LOWORD(v90[0]) = objc_msgSend(v51, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("pinned"));
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = v53;
  if (v53)
    WORD1(v90[1]) = objc_msgSend(v53, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("selected"));
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = v55;
  if (v55)
    WORD2(v90[1]) = objc_msgSend(v55, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("highlighted"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = v57;
  if (v57)
    WORD2(v90[1]) = objc_msgSend(v57, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("muted"));
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = v59;
  if (v59)
    LOWORD(v90[1]) = objc_msgSend(v59, "BOOLValue") | 0x100;

  {
    v61 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v61);
  }
  __y[0] = *(WebKit::WebExtensionMatchPattern **)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v62 = *a4;
  *a4 = 0;
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v64 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v64 = 1677;
  *(_QWORD *)(v64 + 8) = v63;
  *(_QWORD *)(v64 + 528) = v64 + 16;
  *(_QWORD *)(v64 + 536) = v64 + 16;
  *(_OWORD *)(v64 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v64 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v64);
  v94[0] = (IPC::Encoder *)v64;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v64, (uint64_t *)__y);
  IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode((IPC::Encoder *)v64, (uint64_t)&v79);
  v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v65 = &off_1E34F6080;
  v65[1] = a1;
  v65[2] = v62;
  v66 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v95 = (uint64_t)v65;
  v96 = v66;
  (*(void (**)(_QWORD *, IPC::Encoder **, uint64_t *, _QWORD))(*((_QWORD *)v61 + 2) + 40))((_QWORD *)v61 + 2, v94, &v95, 0);
  v68 = v95;
  v95 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = v94[0];
  v94[0] = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v67);
    WTF::fastFree(v70, v71);
  }
LABEL_85:
  if (v83)
  {
    v74 = v82;
    v82 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v67);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (v81)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v67);

}

void sub_1976E2008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,IPC::Encoder *a27)
{
  void *v27;
  void *v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  if (a15)
  {
    v31 = a14;
    a14 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (a13)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v30);

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::get(uint64_t a1, uint64_t *a2, _QWORD *a3, NSString *a4, long double a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v14;
  IPC::Encoder *result;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  long double v23;
  WTF *v24;
  void *v25;
  void *v26;
  _Unwind_Exception *v27;
  long double v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  uint64_t v32[2];
  long double __y[2];
  IPC::Encoder *v34;

  if (a5 == -1.0)
  {
    v9 = -256;
    LOBYTE(v10) = -2;
LABEL_3:
    v11 = 1;
    goto LABEL_17;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    v10 = (unint64_t)a5;
    if ((unint64_t)a5 - 1 < 0xFFFFFFFFFFFFFFFELL)
    {
      v9 = (unint64_t)a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v10) = -2;
      v9 = -256;
    }
    goto LABEL_3;
  }
  v11 = 0;
  LOBYTE(v10) = 0;
  v9 = 0;
LABEL_17:
  v32[0] = v9 & 0xFFFFFFFFFFFFFF00 | v10;
  v32[1] = v11;
  result = (IPC::Encoder *)WebKit::isValid(v32[0], v11, a3, a4);
  if (!(_DWORD)result)
    return result;
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v16);
    if (v11)
      goto LABEL_20;
LABEL_29:
    v27 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    v28 = __y[0];
    __y[0] = 0.0;
    if (v28 != 0.0)
      (*(void (**)(long double))(**(_QWORD **)&v28 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v28));
    v29 = v34;
    v34 = 0;
    if (v29)
    {
      IPC::Encoder::~Encoder(v29, v26);
      WTF::fastFree(v30, v31);
    }
    _Unwind_Resume(v27);
  }
  v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  if (!v11)
    goto LABEL_29;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
  v17 = *a2;
  *a2 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v19 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v19 = 1671;
  *(_QWORD *)(v19 + 8) = v18;
  *(_QWORD *)(v19 + 528) = v19 + 16;
  *(_QWORD *)(v19 + 536) = v19 + 16;
  *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v19 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
  v34 = (IPC::Encoder *)v19;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v19, v32);
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v20 = &off_1E34F60C8;
  v20[1] = a1;
  v20[2] = v17;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v20;
  *(_QWORD *)&__y[1] = v21;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v16 + 2) + 40))((_QWORD *)v16 + 2, &v34, __y, 0);
  v23 = __y[0];
  __y[0] = 0.0;
  if (v23 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v23 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v23));
  result = v34;
  v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v22);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  return result;
}

void sub_1976E25CC()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976E2594);
  JUMPOUT(0x1976E2580);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::getCurrent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  _QWORD v19[2];
  IPC::Encoder *v20;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v17 = WebKit::WebProcess::WebProcess(v5);
    a3 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
  }
  v18 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1672;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v18);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34F60F0;
  v9[1] = a1;
  v9[2] = v6;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19[0] = v9;
  v19[1] = v10;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v5 + 2) + 40))((_QWORD *)v5 + 2, &v20, v19, 0);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_1976E2730(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1976E2804()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976E27CCLL);
  JUMPOUT(0x1976E27B8);
}

uint64_t WebKit::WebExtensionAPITabs::getSelected(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  uint64_t result;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  BOOL v23;
  uint64_t v24;
  long double __y[2];
  char v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  char v30;
  int v31;
  __int16 v32;
  char v33;
  char v34;
  _QWORD v35[2];
  _QWORD v36[2];
  uint64_t v37;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_5;
  }
  if (a5 == -2.0)
  {
    v10 = -3;
    goto LABEL_5;
  }
  v23 = (a5 < 0.0 || ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
     && (unint64_t)(*(_QWORD *)&a5 - 1) > 0xFFFFFFFFFFFFELL;
  v10 = -3;
  if (!v23 && a5 < 1.84467441e19 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_5:
    result = WebKit::isValid(v10, 1, a4, a4);
    if (!(_DWORD)result)
      return result;
  }
  LOBYTE(__y[0]) = 0;
  v26 = 0;
  LOBYTE(v27) = 0;
  v28 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)((char *)v35 + 6) = 0;
  v30 = 1;
  v29 = v10;
  v35[0] = 257;
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v12);
  }
  v24 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v13 = *a3;
  *a3 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 1677;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v37 = v15;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, &v24);
  IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode((IPC::Encoder *)v15, (uint64_t)__y);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E34F6118;
  v16[1] = a1;
  v16[2] = v13;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v36[0] = v16;
  v36[1] = v17;
  (*(void (**)(_QWORD *, uint64_t *, _QWORD *, _QWORD))(*((_QWORD *)v12 + 2) + 40))((_QWORD *)v12 + 2, &v37, v36, 0);
  v19 = v36[0];
  v36[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    result = WTF::fastFree(v20, v21);
  }
  if (v28)
  {
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v26)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v18);
  return result;
}

void sub_1976E2AA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;

  v24 = a22;
  a22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(IPC::Encoder **)(v22 - 88);
  *(_QWORD *)(v22 - 88) = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, a2);
    WTF::fastFree(v26, v27);
  }
  if (a14)
  {
    v28 = a13;
    a13 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (a12)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::duplicate(uint64_t a1, void *a2, uint64_t *a3, char *a4, long double a5)
{
  NSString *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  long double __y;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53[2];
  _QWORD v54[2];
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  if (a5 == -1.0)
  {
    v11 = -256;
    LOBYTE(v12) = -2;
LABEL_3:
    v13 = 1;
    goto LABEL_4;
  }
  v13 = 0;
  if ((a5 < 0.0 || ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v12) = 0;
    v11 = 0;
    goto LABEL_4;
  }
  LOBYTE(v12) = 0;
  v11 = 0;
  if (a5 < 1.84467441e19)
  {
    if (modf(a5, &__y) != 0.0)
    {
      v13 = 0;
      LOBYTE(v12) = 0;
      v11 = 0;
      goto LABEL_4;
    }
    v12 = (unint64_t)a5;
    if ((unint64_t)a5 - 1 < 0xFFFFFFFFFFFFFFFELL)
    {
      v11 = (unint64_t)a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v12) = -2;
      v11 = -256;
    }
    goto LABEL_3;
  }
LABEL_4:
  v53[0] = v11 & 0xFFFFFFFFFFFFFF00 | v12;
  v53[1] = v13;
  if (!WebKit::isValid(v53[0], v13, a4, v9))
    goto LABEL_41;
  LOBYTE(__y) = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v39 = 0;
  LOBYTE(v40) = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (!v10)
    goto LABEL_14;
  v14 = v10;
  v15 = CFSTR("properties");
  if (byte_1ECE73152 != 1)
    goto LABEL_48;
  v16 = (void *)qword_1ECE73170;
  while (1)
  {
    if (!WebKit::validateDictionary(v14, CFSTR("properties"), 0, v16, a4))
    {

      goto LABEL_31;
    }
    WebKit::objectForKey<NSNumber>(v14, (uint64_t)CFSTR("active"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17)
      LOWORD(v50) = objc_msgSend(v17, "BOOLValue") | 0x100;

    WebKit::objectForKey<NSNumber>(v14, (uint64_t)CFSTR("index"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      v44 = objc_msgSend(v19, "unsignedIntegerValue");
      v45 = 1;
    }

LABEL_14:
    a4 = &_MergedGlobals_106;
      break;
    v14 = (_QWORD *)WebKit::WebProcess::singleton(void)::process;
    if (v13)
      goto LABEL_16;
LABEL_47:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_48:
    v54[0] = CFSTR("active");
    v35 = objc_opt_class();
    v54[1] = CFSTR("index");
    v55 = (_QWORD *)v35;
    v56 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v55, v54, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73170 = (uint64_t)v16;
    byte_1ECE73152 = 1;
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x330);
  WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess((WebKit::WebProcess *)v14);
  if (!v13)
    goto LABEL_47;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
  v21 = *a3;
  *a3 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 1669;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v54[0] = v23;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v23, v53);
  IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v23, (uint64_t)&__y);
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = &off_1E34F6140;
  v24[1] = a1;
  v24[2] = v21;
  v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v55 = v24;
  v56 = v25;
  (*(void (**)(_QWORD *, _QWORD *, _QWORD **, _QWORD))(v14[2] + 40))(v14 + 2, v54, &v55, 0);
  v27 = v55;
  v55 = 0;
  if (v27)
    (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  v28 = (IPC::Encoder *)v54[0];
  v54[0] = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v26);
    WTF::fastFree(v29, v30);
  }
LABEL_31:
  if (v41)
  {
    v33 = v40;
    v40 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (v39)
  {
    v34 = v38;
    v38 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
LABEL_41:

}

void sub_1976E302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v23;

  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v23);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v23);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::update(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v16;
  void *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  long double __y;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  IPC::Encoder *v51;

  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
    goto LABEL_3;
  }
  v16 = (a6 >= 0.0 && ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
LABEL_3:
    v48 = v13;
    v49 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11))
      goto LABEL_35;
    goto LABEL_18;
  }
  v48 = 0;
  v49 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  v34 = 0;
  LOBYTE(v35) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if ((WebKit::WebExtensionAPITabs::parseTabUpdateOptions(a1, v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v30 = *(_QWORD *)(a2 + 2120);
    ++*(_DWORD *)(a1 + 48);
    v19 = *a4;
    *a4 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1684;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v51 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, &v30);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v21, &v48);
    IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v21, (uint64_t)&__y);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = &off_1E34F6168;
    v22[1] = a1;
    v22[2] = v19;
    v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v50[0] = v22;
    v50[1] = v23;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v18 + 2) + 40))((_QWORD *)v18 + 2, &v51, v50, 0);
    v24 = v50[0];
    v50[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v51;
    v51 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v26, v27);
    }
  }
  if (v36)
  {
    v28 = v35;
    v35 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v34)
  {
    v29 = v33;
    v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
LABEL_35:

}

void sub_1976E3494(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19)
{
  void *v19;
  uint64_t v20;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;

  v22 = *(_QWORD *)(v20 - 104);
  *(_QWORD *)(v20 - 104) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(IPC::Encoder **)(v20 - 88);
  *(_QWORD *)(v20 - 88) = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, a2);
    WTF::fastFree(v24, v25);
  }
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::remove(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSString *v14;
  long double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSString *v30;
  long double v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  WebKit::WebProcess *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  double v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  WTF *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  double __y;
  _BYTE v66[128];
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = (void *)MEMORY[0x1E0C99E40];
  v9 = objc_opt_class();
  v67[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v67, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "orderedSetWithObjects:", v9, v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v9) = WebKit::validateObject(v7, CFSTR("tabIDs"), v11, a4);

  if ((v9 & 1) == 0)
    goto LABEL_70;
  v61 = 0;
  v62 = 0;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSNumber>(v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "doubleValue");
    v16 = v15;
    if (v15 == -1.0)
    {
      v17 = -256;
      LOBYTE(v18) = -2;
LABEL_5:
      v19 = 1;
      goto LABEL_6;
    }
    v19 = 0;
    if ((v15 < 0.0 || ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
    {
      LOBYTE(v18) = 0;
      v17 = 0;
    }
    else
    {
      LOBYTE(v18) = 0;
      v17 = 0;
      if (v15 < 1.84467441e19)
      {
        if (modf(v15, &__y) == 0.0)
        {
          if ((unint64_t)v16 - 1 >= 0xFFFFFFFFFFFFFFFELL)
            LOBYTE(v18) = -2;
          else
            v18 = (unint64_t)v16;
          if ((unint64_t)v16 - 1 >= 0xFFFFFFFFFFFFFFFELL)
            v17 = -256;
          else
            v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00;
          goto LABEL_5;
        }
        v19 = 0;
        LOBYTE(v18) = 0;
        v17 = 0;
      }
    }
LABEL_6:
    v20 = v17 & 0xFFFFFFFFFFFFFF00 | v18;
    v63 = (_QWORD *)v20;
    v64 = v19;
    if (!v19 || v20 == -2)
    {
      WebKit::toErrorString(0, CFSTR("tabIDs"), CFSTR("'%@' is not a tab identifier"), v14, v13);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_67:

      goto LABEL_68;
    }
    v21 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, HIDWORD(v62) + 1, (unint64_t)&v63);
    *((_QWORD *)v61 + HIDWORD(v62)) = *v21;
    ++HIDWORD(v62);
LABEL_60:

    {
      v44 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v44 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v44);
    }
    ++*(_DWORD *)(a1 + 48);
    v45 = *a3;
    *a3 = 0;
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    *(double *)&v47 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x240));
    *(_WORD *)v47 = 1679;
    *(_QWORD *)(v47 + 8) = v46;
    *(_QWORD *)(v47 + 528) = v47 + 16;
    *(_QWORD *)(v47 + 536) = v47 + 16;
    *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v47 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
    __y = *(double *)&v47;
    IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v47, (uint64_t)&v61);
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v48 = &off_1E34F6190;
    v48[1] = a1;
    v48[2] = v45;
    v49 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v63 = v48;
    v64 = v49;
    (*(void (**)(_QWORD *, double *, _QWORD **, _QWORD))(*((_QWORD *)v44 + 2) + 40))((_QWORD *)v44 + 2, &__y, &v63, 0);
    v51 = v63;
    v63 = 0;
    if (v51)
      (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    v52 = __y;
    __y = 0.0;
    if (v52 != 0.0)
    {
      IPC::Encoder::~Encoder(*(IPC::Encoder **)&v52, v50);
      WTF::fastFree(v53, v54);
    }
LABEL_68:
    v55 = v61;
    if (v61)
    {
      v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree(v55, v50);
    }
LABEL_70:

    return;
  }
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v7);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (!v22)
  {
LABEL_48:

    goto LABEL_60;
  }
  v56 = v22;
  v24 = objc_msgSend(v22, "count");
  if (!v24)
  {
LABEL_13:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v25 = v23;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v58;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v58 != v27)
            objc_enumerationMutation(v25);
          v29 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v28);
          objc_msgSend(v29, "doubleValue");
          v32 = v31;
          if (v31 == -1.0)
          {
            v33 = -256;
            v34 = 1;
            LOBYTE(v35) = -2;
          }
          else
          {
            v38 = (v31 >= 0.0 && ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
                || (unint64_t)(*(_QWORD *)&v31 - 1) <= 0xFFFFFFFFFFFFELL)
               && v31 < 1.84467441e19;
            if (v38 && modf(v31, &__y) == 0.0)
            {
              if ((unint64_t)v32 - 1 >= 0xFFFFFFFFFFFFFFFELL)
                LOBYTE(v35) = -2;
              else
                v35 = (unint64_t)v32;
              v33 = -256;
              if ((unint64_t)v32 - 1 < 0xFFFFFFFFFFFFFFFELL)
                v33 = (unint64_t)v32 & 0xFFFFFFFFFFFFFF00;
              v34 = 1;
            }
            else
            {
              v34 = 0;
              LOBYTE(v35) = 0;
              v33 = 0;
            }
          }
          v39 = v33 & 0xFFFFFFFFFFFFFF00 | v35;
          v63 = (_QWORD *)v39;
          v64 = v34;
          if (!v34 || v39 == -2)
          {
            WebKit::toErrorString(0, CFSTR("tabIDs"), CFSTR("'%@' is not a tab identifier"), v30, v29);
            *a4 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_67;
          }
          if (HIDWORD(v62) == (_DWORD)v62)
          {
            v40 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, HIDWORD(v62) + 1, (unint64_t)&v63);
            *((_QWORD *)v61 + HIDWORD(v62)) = *v40;
          }
          else
          {
            *((_QWORD *)v61 + HIDWORD(v62)) = v39;
          }
          ++HIDWORD(v62);
          ++v28;
        }
        while (v26 != v28);
        v41 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
        v26 = v41;
      }
      while (v41);
    }

    v23 = v56;
    goto LABEL_48;
  }
  if (!(v24 >> 29))
  {
    LODWORD(v62) = v24;
    v61 = (WTF *)WTF::fastMalloc((WTF *)(8 * v24));
    goto LABEL_13;
  }
  __break(0xC471u);
}

void sub_1976E3BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,uint64_t a23,uint64_t a24,IPC::Encoder *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v29;

  if (a21)
    WTF::fastFree(a21, v29);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::reload(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v16;
  void *v17;
  char v18;
  WebKit::WebProcess *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  long double v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  long double __y[2];
  IPC::Encoder *v34;
  const __CFString *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
  }
  else
  {
    v16 = (a6 >= 0.0 && ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(_QWORD *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
       && a6 < 1.84467441e19;
    if (!v16 || modf(a6, __y) != 0.0)
    {
      v31 = 0;
      v32 = 0;
      goto LABEL_18;
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
  }
  v31 = v13;
  v32 = 1;
  if (!WebKit::isValid(v13, 1, a5, v11))
    goto LABEL_28;
LABEL_18:
  if ((byte_1ECE73159 & 1) != 0)
  {
    if (v12)
      goto LABEL_20;
  }
  else
  {
    v35 = CFSTR("bypassCache");
    v36[0] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
    qword_1ECE731A8 = objc_claimAutoreleasedReturnValue();
    byte_1ECE73159 = 1;
    if (v12)
    {
LABEL_20:
      if (!WebKit::validateDictionary(v12, CFSTR("properties"), 0, (void *)qword_1ECE731A8, a5))
        goto LABEL_28;
    }
  }
  WebKit::objectForKey<NSNumber>(v12, (uint64_t)CFSTR("bypassCache"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "BOOLValue");
  {
    v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v19);
  }
  v30 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v20 = *a4;
  *a4 = 0;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 1678;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v34 = (IPC::Encoder *)v22;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, &v30);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v22, &v31);
  *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = v18;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v23 = &off_1E34F61B8;
  v23[1] = a1;
  v23[2] = v20;
  v24 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v23;
  *(_QWORD *)&__y[1] = v24;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v19 + 2) + 40))((_QWORD *)v19 + 2, &v34, __y, 0);
  v26 = __y[0];
  __y[0] = 0.0;
  if (v26 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v26 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v26));
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v25);
    WTF::fastFree(v28, v29);
  }

LABEL_28:
}

void sub_1976E402C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  void *v15;
  void *v16;
  WTF *v18;
  void *v19;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a15)
  {
    IPC::Encoder::~Encoder(a15, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::goBack(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  IPC::Encoder *result;
  BOOL v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  long double v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long double __y[2];
  IPC::Encoder *v29;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_3;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_3:
    v26 = v10;
    v27 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
LABEL_18:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v25 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1674;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v29 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v25);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v26);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E34F61E0;
  v19[1] = a1;
  v19[2] = v16;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v19;
  *(_QWORD *)&__y[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v29, __y, 0);
  v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v22 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v22));
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1976E433C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::goForward(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  IPC::Encoder *result;
  BOOL v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  long double v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long double __y[2];
  IPC::Encoder *v29;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_3;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_3:
    v26 = v10;
    v27 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
LABEL_18:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v25 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1675;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v29 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v25);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v26);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E34F6208;
  v19[1] = a1;
  v19[2] = v16;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v19;
  *(_QWORD *)&__y[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v29, __y, 0);
  v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v22 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v22));
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1976E4630(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::getZoom(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  IPC::Encoder *result;
  BOOL v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  long double v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long double __y[2];
  IPC::Encoder *v29;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_3;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_3:
    v26 = v10;
    v27 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
LABEL_18:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v25 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1673;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v29 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v25);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v26);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E34F6230;
  v19[1] = a1;
  v19[2] = v16;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v19;
  *(_QWORD *)&__y[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v29, __y, 0);
  v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v22 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v22));
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1976E4924(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::setZoom(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5, double a6)
{
  uint64_t v12;
  IPC::Encoder *result;
  BOOL v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  long double v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long double __y[2];
  IPC::Encoder *v31;

  if (a5 == -1.0)
  {
    v12 = -2;
    goto LABEL_3;
  }
  v16 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v16 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v12 = -2;
    else
      v12 = (unint64_t)a5;
LABEL_3:
    v28 = v12;
    v29 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v12, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v28 = 0;
  v29 = 0;
LABEL_18:
  {
    v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
  }
  v27 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v18 = *a3;
  *a3 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 1682;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v31 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v20, &v27);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v20, &v28);
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v20, 8uLL, 8) = a6;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v21 = &off_1E34F6278;
  v21[1] = a1;
  v21[2] = v18;
  v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v21;
  *(_QWORD *)&__y[1] = v22;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v17 + 2) + 40))((_QWORD *)v17 + 2, &v31, __y, 0);
  v24 = __y[0];
  __y[0] = 0.0;
  if (v24 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v24 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v24));
  result = v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

void sub_1976E4C30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::detectLanguage(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  IPC::Encoder *result;
  BOOL v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  long double v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long double __y[2];
  IPC::Encoder *v29;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_3;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_3:
    v26 = v10;
    v27 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
LABEL_18:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v25 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1668;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v29 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v25);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v26);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E34F62A0;
  v19[1] = a1;
  v19[2] = v16;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v19;
  *(_QWORD *)&__y[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v29, __y, 0);
  v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v22 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v22));
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1976E4F24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::toggleReaderMode(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  uint64_t v10;
  IPC::Encoder *result;
  BOOL v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  long double v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long double __y[2];
  IPC::Encoder *v29;

  if (a5 == -1.0)
  {
    v10 = -2;
    goto LABEL_3;
  }
  v14 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
    else
      v10 = (unint64_t)a5;
LABEL_3:
    v26 = v10;
    v27 = 1;
    result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
LABEL_18:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
  }
  v25 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1683;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v29 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v25);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v18, &v26);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E34F62D8;
  v19[1] = a1;
  v19[2] = v16;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v19;
  *(_QWORD *)&__y[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v29, __y, 0);
  v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v22 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v22));
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1976E5218(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::captureVisibleTab(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v15;
  id v16;
  __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  NSString *v24;
  char v25;
  NSString *v26;
  WebKit::WebProcess *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  long double v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  IPC::Encoder *v41[2];
  uint64_t __y;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
  }
  else if (a6 == -2.0)
  {
    v13 = -3;
  }
  else
  {
    v15 = (a6 < 0.0 || ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
       && (unint64_t)(*(_QWORD *)&a6 - 1) > 0xFFFFFFFFFFFFELL;
    if (v15 || a6 >= 1.84467441e19 || modf(a6, (long double *)&__y) != 0.0)
    {
      v39 = 0;
      v40 = 0;
      goto LABEL_17;
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
  }
  v39 = v13;
  v40 = 1;
  if (!WebKit::isValid(v13, 1, a5, v11))
    goto LABEL_39;
LABEL_17:
  v16 = v12;
  v17 = CFSTR("options");
  if (byte_1ECE73154 == 1)
  {
    v18 = (void *)qword_1ECE73180;
  }
  else
  {
    v41[0] = (IPC::Encoder *)CFSTR("format");
    v41[1] = (IPC::Encoder *)CFSTR("quality");
    __y = objc_opt_class();
    v43 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__y, v41, 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73180 = (uint64_t)v18;
    byte_1ECE73154 = 1;
  }
  if (!WebKit::validateDictionary(v16, CFSTR("options"), 0, v18, a5))
    goto LABEL_38;
  WebKit::objectForKey<NSString>(v16, (uint64_t)CFSTR("format"), 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19;
  if (!v19 || (objc_msgSend(v19, "isEqualToString:", CFSTR("png")) & 1) != 0)
  {
    v21 = 0;
    goto LABEL_23;
  }
  if ((objc_msgSend(v20, "isEqualToString:", CFSTR("jpeg")) & 1) == 0)
  {
    WebKit::toErrorString(0, CFSTR("format"), CFSTR("it must specify either 'png' or 'jpeg'"), v26);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_38:
    goto LABEL_39;
  }
  v21 = 1;
LABEL_23:

  WebKit::objectForKey<NSNumber>(v16, (uint64_t)CFSTR("quality"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22)
  {
    if (objc_msgSend(v22, "integerValue") < 0 || objc_msgSend(v23, "integerValue") >= 101)
    {
      WebKit::toErrorString(0, CFSTR("quality"), CFSTR("it must specify a value between 0 and 100"), v24);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_39;
    }
    v25 = objc_msgSend(v23, "unsignedCharValue");
  }
  else
  {
    v25 = 92;
  }

  {
    v27 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v27);
  }
  v38 = *(_QWORD *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  v28 = *a4;
  *a4 = 0;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v30 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v30 = 1665;
  *(_QWORD *)(v30 + 8) = v29;
  *(_QWORD *)(v30 + 528) = v30 + 16;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v30 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
  v41[0] = (IPC::Encoder *)v30;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v30, &v38);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v30, &v39);
  *IPC::Encoder::grow((IPC::Encoder *)v30, 1uLL, 1) = v21;
  *IPC::Encoder::grow((IPC::Encoder *)v30, 1uLL, 1) = v25;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = &off_1E34F6300;
  v31[1] = a1;
  v31[2] = v28;
  v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  __y = (uint64_t)v31;
  v43 = v32;
  (*(void (**)(_QWORD *, IPC::Encoder **, uint64_t *, _QWORD))(*((_QWORD *)v27 + 2) + 40))((_QWORD *)v27 + 2, v41, &__y, 0);
  v34 = *(double *)&__y;
  __y = 0;
  if (v34 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v34 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v34));
  v35 = v41[0];
  v41[0] = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v33);
    WTF::fastFree(v36, v37);
  }
LABEL_39:

}

void sub_1976E5780(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  WTF *v16;
  void *v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v16, v17);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, uint64_t *a5, _QWORD *a6, long double a7)
{
  id v13;
  NSString *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSString *v19;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WebKit::WebFrame *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::WebProcess *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  double v52;
  WTF::StringImpl *v53;
  double __y;
  char v55;
  _BYTE v56[184];
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  IPC::Encoder *v67;

  v13 = a3;
  v15 = a4;
  if (a7 == -1.0)
  {
    v16 = -256;
    LOBYTE(v17) = -2;
LABEL_3:
    v18 = 1;
    goto LABEL_4;
  }
  v18 = 0;
  if ((a7 < 0.0 || ((*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a7 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v17) = 0;
    v16 = 0;
  }
  else
  {
    LOBYTE(v17) = 0;
    v16 = 0;
    if (a7 < 1.84467441e19)
    {
      if (modf(a7, &__y) == 0.0)
      {
        v17 = (unint64_t)a7;
        if ((unint64_t)a7 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v16 = (unint64_t)a7 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v17) = -2;
          v16 = -256;
        }
        goto LABEL_3;
      }
      v18 = 0;
      LOBYTE(v17) = 0;
      v16 = 0;
    }
  }
LABEL_4:
  v64 = v16 & 0xFFFFFFFFFFFFFF00 | v17;
  v65 = v18;
  if (!WebKit::isValid(v64, v18, a6, v14))
  {
LABEL_63:

    return;
  }
  if ((unint64_t)objc_msgSend(v13, "length") >= 0x4000001)
  {
    WebKit::toErrorString(0, CFSTR("message"), CFSTR("it exceeded the maximum allowed length"), v19);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_63;
  }
  LOBYTE(v62) = 0;
  v63 = 0;
  if ((WebKit::WebExtensionAPITabs::parseSendMessageOptions(v15, (uint64_t)&v62, a6) & 1) == 0)
    goto LABEL_63;
  v22 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 80);
  if (*(double *)&v22 != 0.0)
    *v22 += 2;
  __y = *(double *)&v22;
  v55 = 1;
  v56[0] = 0;
  v56[176] = 0;
  v23 = *((_QWORD *)a2 + 3);
  if (!v23)
    goto LABEL_32;
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
    if (v27 == v24)
      goto LABEL_39;
    v23 = *((_QWORD *)a2 + 3);
    if (!v23)
      goto LABEL_32;
  }
  v28 = *(_QWORD *)(v23 + 8);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 24);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v31 = *(_QWORD **)(*(_QWORD *)(v30 + 48) + 16);
        if (((*(uint64_t (**)(_QWORD *))(*v31 + 1368))(v31) & 1) == 0)
        {
          v32 = *(_QWORD *)(v31[2] + 8);
          if (v32)
          {
            CFRetain(*(CFTypeRef *)(v32 - 8));
            v33 = *(WebKit::WebFrame **)(v32 + 72);
            CFRelease(*(CFTypeRef *)(v32 - 8));
            if (v33 == a2)
            {
LABEL_39:
              v34 = -2;
              goto LABEL_40;
            }
          }
        }
      }
    }
  }
LABEL_32:
  v34 = *((_QWORD *)a2 + 10);
  if ((unint64_t)(v34 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    v34 = -3;
LABEL_40:
  v57 = v34;
  v58 = 1;
  v35 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v35 + 1368))(v35);
  v36 = *(_QWORD *)(v35[2] + 8);
  if (v36)
    v37 = v36 - 16;
  else
    v37 = 0;
  v59 = *(_QWORD *)(v37 + 2120);
  v60 = *(_BYTE *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v61);
  {
    v38 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v38);
  }
  if ((_BYTE)v65)
  {
    MEMORY[0x19AEABCC8](&v53, v13);
    ++*(_DWORD *)(a1 + 48);
    v39 = *a5;
    *a5 = 0;
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v41 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v41 = 1681;
    *(_QWORD *)(v41 + 8) = v40;
    *(_QWORD *)(v41 + 528) = v41 + 16;
    *(_QWORD *)(v41 + 536) = v41 + 16;
    *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v41 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
    v67 = (IPC::Encoder *)v41;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v41, (uint64_t *)&v64);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)&v53);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v41, &v62);
    IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode((IPC::Encoder *)v41, (uint64_t)&__y);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v42 = &off_1E34F6348;
    v42[1] = a1;
    v42[2] = v39;
    v43 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v66[0] = v42;
    v66[1] = v43;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v38 + 2) + 40))((_QWORD *)v38 + 2, &v67, v66, 0);
    v45 = v66[0];
    v66[0] = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v46 = v67;
    v67 = 0;
    if (v46)
    {
      IPC::Encoder::~Encoder(v46, v44);
      WTF::fastFree(v47, v48);
    }
    v49 = v53;
    v53 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v44);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v61;
    v61 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v44);
      else
        *(_DWORD *)v50 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v56, (WTF::StringImpl *)v44);
    if (v55)
    {
      v52 = __y;
      __y = 0.0;
      if (v52 != 0.0)
      {
        if (**(_DWORD **)&v52 == 2)
          WTF::StringImpl::destroy(*(WTF::StringImpl **)&v52, v51);
        else
          **(_DWORD **)&v52 -= 2;
      }
    }
    goto LABEL_63;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976E5D68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39)
{
  void *v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl *v43;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v41, a2);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v43);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>, long double a7@<D0>)
{
  NSString *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  __CFString *v19;
  void *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WebKit::WebFrame *v33;
  uint64_t v34;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebKit::WebProcess *v50;
  uint64_t v51;
  OpaqueJSContext *GlobalContext;
  OpaqueJSContext *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  char v68;
  WTF::StringImpl *v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  IPC::Encoder *v73;
  uint64_t __y;
  char v75;
  _BYTE v76[184];
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  WTF::StringImpl *v81;
  _QWORD v82[4];

  v82[2] = *MEMORY[0x1E0C80C00];
  v14 = a4;
  if (a7 == -1.0)
  {
    v15 = -256;
    LOBYTE(v16) = -2;
LABEL_3:
    v17 = 1;
    goto LABEL_4;
  }
  v17 = 0;
  if ((a7 < 0.0 || ((*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a7 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v16) = 0;
    v15 = 0;
  }
  else
  {
    LOBYTE(v16) = 0;
    v15 = 0;
    if (a7 < 1.84467441e19)
    {
      if (modf(a7, (long double *)&__y) == 0.0)
      {
        v16 = (unint64_t)a7;
        if ((unint64_t)a7 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v15 = (unint64_t)a7 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v16) = -2;
          v15 = -256;
        }
        goto LABEL_3;
      }
      v17 = 0;
      LOBYTE(v16) = 0;
      v15 = 0;
    }
  }
LABEL_4:
  v71 = v15 & 0xFFFFFFFFFFFFFF00 | v16;
  v72 = v17;
  if (!WebKit::isValid(v71, v17, a5, v13))
  {
    *a6 = 0;
LABEL_48:

    return;
  }
  LOBYTE(v69) = 0;
  v70 = 0;
  LOBYTE(v67) = 0;
  v68 = 0;
  v18 = v14;
  v19 = CFSTR("options");
  if ((WebKit::WebExtensionAPITabs::parseSendMessageOptions(v18, (uint64_t)&v67, a5) & 1) == 0
    || (byte_1ECE73156 != 1
      ? (void *)(v82[0] = CFSTR("name"),
                 __y = objc_opt_class(),
                 objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__y, v82, 1),
                 v20 = (void *)objc_claimAutoreleasedReturnValue(),
                 qword_1ECE73190 = (uint64_t)v20,
                 byte_1ECE73156 = 1)
      : (v20 = (void *)qword_1ECE73190),
        !WebKit::validateDictionary(v18, CFSTR("options"), 0, v20, a5)))
  {

    *a6 = 0;
LABEL_43:
    if (v70)
    {
      v38 = v69;
      v69 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    goto LABEL_48;
  }
  objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("name"));
  v73 = (IPC::Encoder *)objc_claimAutoreleasedReturnValue();
  if (v73)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v69, &v73);

  }
  if (v70)
  {
    v21 = v69;
    if (!v69)
      goto LABEL_14;
    goto LABEL_13;
  }
  v21 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_13:
    *(_DWORD *)v21 += 2;
LABEL_14:
  v66 = v21;
  v22 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 80);
  if (v22)
    *v22 += 2;
  __y = (uint64_t)v22;
  v75 = 1;
  v76[0] = 0;
  v76[176] = 0;
  v23 = *((_QWORD *)a2 + 3);
  if (!v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
    if (v27 == v24)
      goto LABEL_53;
    v23 = *((_QWORD *)a2 + 3);
    if (!v23)
      goto LABEL_28;
  }
  v28 = *(_QWORD *)(v23 + 8);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 24);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v31 = *(_QWORD **)(*(_QWORD *)(v30 + 48) + 16);
        if (((*(uint64_t (**)(_QWORD *))(*v31 + 1368))(v31) & 1) == 0)
        {
          v32 = *(_QWORD *)(v31[2] + 8);
          if (v32)
          {
            CFRetain(*(CFTypeRef *)(v32 - 8));
            v33 = *(WebKit::WebFrame **)(v32 + 72);
            CFRelease(*(CFTypeRef *)(v32 - 8));
            if (v33 == a2)
            {
LABEL_53:
              v34 = -2;
              goto LABEL_54;
            }
          }
        }
      }
    }
  }
LABEL_28:
  v34 = *((_QWORD *)a2 + 10);
  if ((unint64_t)(v34 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    v34 = -3;
LABEL_54:
  v77 = v34;
  v78 = 1;
  v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v39 + 1368))(v39);
  v40 = *(_QWORD *)(v39[2] + 8);
  if (v40)
    v41 = v40 - 16;
  else
    v41 = 0;
  v79 = *(_QWORD *)(v41 + 2120);
  v80 = *(_BYTE *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v81);
  v42 = *((_QWORD *)a2 + 3);
  if (v42
    && (v43 = *(_QWORD *)(v42 + 8)) != 0
    && (v44 = *(_QWORD *)(v43 + 24)) != 0
    && (v45 = *(_QWORD *)(v44 + 8)) != 0
    && (v46 = *(_QWORD **)(*(_QWORD *)(v45 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v46 + 1368))(v46) & 1) == 0))
  {
    v47 = *(_QWORD *)(v46[2] + 8);
    if (v47)
      v48 = v47 - 16;
    else
      v48 = 0;
  }
  else
  {
    v48 = 0;
  }
  v49 = WTF::fastMalloc((WTF *)0x198);
  WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v49, a1, v48, 1, (_DWORD **)&v66);
  {
    v50 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v50 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v50);
  }
  if ((_BYTE)v72)
  {
    v51 = *(_QWORD *)(v49 + 80);
    ++*(_DWORD *)(a1 + 48);
    GlobalContext = JSContextGetGlobalContext(a3);
    v53 = GlobalContext;
    if (GlobalContext)
      JSGlobalContextRetain(GlobalContext);
    ++*(_DWORD *)(v49 + 48);
    v54 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v55 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v55 = 1666;
    *(_QWORD *)(v55 + 8) = v54;
    *(_QWORD *)(v55 + 528) = v55 + 16;
    *(_QWORD *)(v55 + 536) = v55 + 16;
    *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v55 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
    v73 = (IPC::Encoder *)v55;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v55, (uint64_t *)&v71);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 8uLL, 8) = v51;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)&v66);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v55, &v67);
    IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode((IPC::Encoder *)v55, (uint64_t)&__y);
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v56 = &off_1E34F6370;
    v56[1] = a1;
    v56[2] = a1;
    v56[3] = v53;
    v56[4] = v49;
    v57 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v82[0] = v56;
    v82[1] = v57;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v50 + 2) + 40))((_QWORD *)v50 + 2, &v73, v82, 0);
    v59 = v82[0];
    v82[0] = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    v60 = v73;
    v73 = 0;
    if (v60)
    {
      IPC::Encoder::~Encoder(v60, v58);
      WTF::fastFree(v61, v62);
    }
    *a6 = v49;
    v63 = v81;
    v81 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v58);
      else
        *(_DWORD *)v63 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, (WTF::StringImpl *)v58);
    if (v75)
    {
      v64 = (WTF::StringImpl *)__y;
      __y = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v37);
        else
          *(_DWORD *)v64 -= 2;
      }
    }
    v65 = v66;
    v66 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v37);
      else
        *(_DWORD *)v65 -= 2;
    }
    goto LABEL_43;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976E65A0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46)
{
  void *v46;
  uint64_t v47;
  WTF::StringImpl *v49;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v47, a2);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v49);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v49);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v49);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::executeScript(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v16;
  void *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34[3];
  long double __y;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[16];
  char v40;
  WTF *v41;
  int v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  IPC::Encoder *v54;

  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
    goto LABEL_3;
  }
  v16 = (a6 >= 0.0 && ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
LABEL_3:
    v51 = v13;
    v52 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11))
      goto LABEL_49;
    goto LABEL_18;
  }
  v51 = 0;
  v52 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  v36 = 0;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39[0] = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  LOBYTE(v46) = 0;
  v47 = 0;
  LOBYTE(v48) = 0;
  v49 = 0;
  v50 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v33 = *(_QWORD *)(a2 + 2120);
    v34[0] = &v33;
    v34[1] = &v51;
    v34[2] = (uint64_t *)&__y;
    ++*(_DWORD *)(a1 + 48);
    v19 = *a4;
    *a4 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1670;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v54 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>((IPC::Encoder *)v21, v34);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = &off_1E34F6398;
    v22[1] = a1;
    v22[2] = v19;
    v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v53[0] = v22;
    v53[1] = v23;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v18 + 2) + 40))((_QWORD *)v18 + 2, &v54, v53, 0);
    v24 = v53[0];
    v53[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v54;
    v54 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v26, v27);
    }
  }
  if (v49)
  {
    v28 = v48;
    v48 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v47)
  {
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v45)
  {
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v43)
  {
    v31 = v41;
    if (v41)
    {
      v41 = 0;
      v42 = 0;
      WTF::fastFree(v31, v17);
    }
  }
  if (v40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v17);
  if (v38)
  {
    v32 = v37;
    v37 = 0;
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 + 8));
  }
LABEL_49:

}

void sub_1976E6B68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  void *v29;
  uint64_t v30;

  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a20)
    WTF::fastFree(a20, a2);
  if (a19)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  if (a16)
  {
    if (a15)
      CFRelease(*(CFTypeRef *)(a15 + 8));
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::insertCSS(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v16;
  void *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34[3];
  long double __y;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[16];
  char v40;
  WTF *v41;
  int v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  IPC::Encoder *v54;

  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
    goto LABEL_3;
  }
  v16 = (a6 >= 0.0 && ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
LABEL_3:
    v51 = v13;
    v52 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11))
      goto LABEL_49;
    goto LABEL_18;
  }
  v51 = 0;
  v52 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  v36 = 0;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39[0] = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  LOBYTE(v46) = 0;
  v47 = 0;
  LOBYTE(v48) = 0;
  v49 = 0;
  v50 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v33 = *(_QWORD *)(a2 + 2120);
    v34[0] = &v33;
    v34[1] = &v51;
    v34[2] = (uint64_t *)&__y;
    ++*(_DWORD *)(a1 + 48);
    v19 = *a4;
    *a4 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1676;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v54 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>((IPC::Encoder *)v21, v34);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = &off_1E34F63D0;
    v22[1] = a1;
    v22[2] = v19;
    v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v53[0] = v22;
    v53[1] = v23;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v18 + 2) + 40))((_QWORD *)v18 + 2, &v54, v53, 0);
    v24 = v53[0];
    v53[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v54;
    v54 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v26, v27);
    }
  }
  if (v49)
  {
    v28 = v48;
    v48 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v47)
  {
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v45)
  {
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v43)
  {
    v31 = v41;
    if (v41)
    {
      v41 = 0;
      v42 = 0;
      WTF::fastFree(v31, v17);
    }
  }
  if (v40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v17);
  if (v38)
  {
    v32 = v37;
    v37 = 0;
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 + 8));
  }
LABEL_49:

}

void sub_1976E708C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  void *v29;
  uint64_t v30;

  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a20)
    WTF::fastFree(a20, a2);
  if (a19)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  if (a16)
  {
    if (a15)
      CFRelease(*(CFTypeRef *)(a15 + 8));
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::removeCSS(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  uint64_t v13;
  BOOL v16;
  void *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34[3];
  long double __y;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[16];
  char v40;
  WTF *v41;
  int v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  IPC::Encoder *v54;

  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -2;
    goto LABEL_3;
  }
  v16 = (a6 >= 0.0 && ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = -2;
    else
      v13 = (unint64_t)a6;
LABEL_3:
    v51 = v13;
    v52 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11))
      goto LABEL_49;
    goto LABEL_18;
  }
  v51 = 0;
  v52 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  v36 = 0;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39[0] = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  LOBYTE(v46) = 0;
  v47 = 0;
  LOBYTE(v48) = 0;
  v49 = 0;
  v50 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v33 = *(_QWORD *)(a2 + 2120);
    v34[0] = &v33;
    v34[1] = &v51;
    v34[2] = (uint64_t *)&__y;
    ++*(_DWORD *)(a1 + 48);
    v19 = *a4;
    *a4 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1680;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v54 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>((IPC::Encoder *)v21, v34);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = &off_1E34F63F8;
    v22[1] = a1;
    v22[2] = v19;
    v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v53[0] = v22;
    v53[1] = v23;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v18 + 2) + 40))((_QWORD *)v18 + 2, &v54, v53, 0);
    v24 = v53[0];
    v53[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v54;
    v54 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v26, v27);
    }
  }
  if (v49)
  {
    v28 = v48;
    v48 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v47)
  {
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v45)
  {
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v43)
  {
    v31 = v41;
    if (v41)
    {
      v41 = 0;
      v42 = 0;
      WTF::fastFree(v31, v17);
    }
  }
  if (v40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v17);
  if (v38)
  {
    v32 = v37;
    v37 = 0;
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 + 8));
  }
LABEL_49:

}

void sub_1976E75B0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  void *v29;
  uint64_t v30;

  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a20)
    WTF::fastFree(a20, a2);
  if (a19)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  if (a16)
  {
    if (a15)
      CFRelease(*(CFTypeRef *)(a15 + 8));
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::onActivated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 32;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976E7860(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::onAttached(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 33;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onCreated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 34;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onDetached(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v6 = 35;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onHighlighted(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    v6 = 36;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 11);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onMoved(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    v6 = 37;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 12);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onRemoved(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v6 = 38;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 13);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 13);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onReplaced(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v6 = 39;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 14);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 14);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onUpdated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v6 = 40;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 15);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 15);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent(uint64_t a1, uint64_t a2)
{
  WebCore *v4;
  uint64_t result;
  WebCore *v6;

  v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34F6420;
  *((_QWORD *)v4 + 1) = a2;
  v6 = v4;
  WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976E7DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore *v6;
  uint64_t result;
  WebCore *v8;

  v6 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E34F6448;
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = a3;
  v8 = v6;
  WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976E7E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore *v4;
  uint64_t result;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  v4 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34F6470;
  *((_QWORD *)v4 + 1) = &v7;
  *((_QWORD *)v4 + 2) = &v8;
  v6 = v4;
  WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976E7F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  void *v15;
  void *v16;
  WebCore *v17;
  uint64_t v18;
  _QWORD v19[6];
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v8 = (uint64_t *)(a1 + 192);
  v9 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(*(_QWORD **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v20, v8, (uint64_t)v9, v10);
  v11 = *v8;
  if (*v8)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = v11 + 40 * v12;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v19, v8, v13, v11 + 40 * v12);
  while (v21 != v19[1])
  {
    if (*(_BYTE *)(v21 + 16) && *(_QWORD *)(v21 + 8) == a2)
    {
      if (*(_BYTE *)(v21 + 32))
        *(_BYTE *)(v21 + 32) = 0;
      break;
    }
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v20);
  }
  v23[0] = CFSTR("oldWindowId");
  v14 = (double)a3;
  if (a3 + 3 < 2)
    v14 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = CFSTR("oldPosition");
  v24[0] = v15;
  if (a4 == -1)
  {
    v16 = &unk_1E356FF08;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v24[1] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  v20 = (id)objc_claimAutoreleasedReturnValue();

  v17 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v17 = off_1E34F6498;
  *((_QWORD *)v17 + 1) = &v22;
  *((_QWORD *)v17 + 2) = &v20;
  v19[0] = v17;
  WebCore::mainThreadNormalWorld(v17);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v19);
  v18 = v19[0];
  v19[0] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);

}

void sub_1976E812C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8;
  void *v9;
  void *v10;
  void *v11;
  WebCore *v12;
  WebCore *v13;
  WebCore *v14;
  id v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v17[0] = CFSTR("windowId");
  v8 = (double)a3;
  if (a3 + 3 < 2)
    v8 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v9;
  v17[1] = CFSTR("fromIndex");
  if (a4 == -1)
  {
    v10 = &unk_1E356FF08;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v18[1] = v10;
  v17[2] = CFSTR("toIndex");
  if (a5 == -1)
  {
    v11 = &unk_1E356FF08;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v18[2] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  v12 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = off_1E34F64C0;
  *((_QWORD *)v12 + 1) = &v16;
  *((_QWORD *)v12 + 2) = &v15;
  v14 = v12;
  WebCore::mainThreadNormalWorld(v12);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  v13 = v14;
  v14 = 0;
  if (v13)
    (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);

}

void sub_1976E8310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void *v16;
  void *v17;
  WebCore *v18;
  uint64_t v19;
  _QWORD v20[6];
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v8 = (uint64_t *)(a1 + 192);
  v9 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(*(_QWORD **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v21, v8, (uint64_t)v9, v10);
  v11 = *v8;
  if (*v8)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = v11 + 40 * v12;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v20, v8, v13, v11 + 40 * v12);
  while (1)
  {
    v14 = v22;
    if (v22 == v20[1])
      break;
    if (*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 8) == a2)
    {
      if (!*(_BYTE *)(v22 + 32))
        *(_BYTE *)(v22 + 32) = 1;
      *(_QWORD *)(v14 + 24) = a3;
      break;
    }
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v21);
  }
  v24[0] = CFSTR("newWindowId");
  v15 = (double)a3;
  if (a3 + 3 < 2)
    v15 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v24[1] = CFSTR("newPosition");
  v25[0] = v16;
  if (a4 == -1)
  {
    v17 = &unk_1E356FF08;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v25[1] = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
  v21 = (id)objc_claimAutoreleasedReturnValue();

  v18 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v18 = off_1E34F64E8;
  *((_QWORD *)v18 + 1) = &v23;
  *((_QWORD *)v18 + 2) = &v21;
  v20[0] = v18;
  WebCore::mainThreadNormalWorld(v18);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v20);
  v19 = v20[0];
  v20[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);

}

void sub_1976E8560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  WebCore *v13;
  WebCore *v14;
  WebCore *v15;
  id v16;
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v17[0] = CFSTR("previousTabId");
  v7 = (double)a2;
  if (a2 == -2)
    v7 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v8;
  v17[1] = CFSTR("tabId");
  v9 = (double)a3;
  if (a3 == -2)
    v9 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v10;
  v17[2] = CFSTR("windowId");
  v11 = (double)a4;
  if (a4 + 3 < 2)
    v11 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18[2] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
  v16 = (id)objc_claimAutoreleasedReturnValue();

  v13 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = off_1E34F6510;
  *((_QWORD *)v13 + 1) = &v16;
  v15 = v13;
  WebCore::mainThreadNormalWorld(v13);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v15);
  v14 = v15;
  v15 = 0;
  if (v14)
    (*(void (**)(WebCore *))(*(_QWORD *)v14 + 8))(v14);

}

void sub_1976E8730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  WTF *v11;
  double v12;
  NSMutableArray *v13;
  objc_object *v14;
  void *v15;
  CFTypeRef v16;
  double v17;
  void *v18;
  WebCore *v19;
  WebCore *v20;
  WebCore *v21;
  CFTypeRef cf;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v7 = v6;
  cf = v6;
  if (v6)
    CFRetain(v6);

  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(unint64_t **)a2;
    v10 = 8 * v8;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v11 = (WTF *)objc_claimAutoreleasedReturnValue();
      v12 = (double)*v9;
      if (*v9 == -2)
        v12 = -1.0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12);
      v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v11, v13, v14);

      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  v23[0] = CFSTR("windowId");
  v17 = (double)a3;
  if (a3 + 3 < 2)
    v17 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = CFSTR("tabIds");
  v24[0] = v18;
  v24[1] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  cf = (CFTypeRef)objc_claimAutoreleasedReturnValue();

  v19 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v19 = off_1E34F6538;
  *((_QWORD *)v19 + 1) = &cf;
  v21 = v19;
  WebCore::mainThreadNormalWorld(v19);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v21);
  v20 = v21;
  v21 = 0;
  if (v20)
    (*(void (**)(WebCore *))(*(_QWORD *)v20 + 8))(v20);

}

void sub_1976E8988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  void *v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  double v6;
  void *v7;
  void *v8;
  WebCore *v9;
  WebCore *v10;
  WebCore *v11;
  id v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14[0] = CFSTR("windowId");
  v6 = (double)a3;
  if (a3 + 3 < 2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14[1] = CFSTR("isWindowClosing");
  v15[0] = v7;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  v9 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = off_1E34F6560;
  *((_QWORD *)v9 + 1) = &v13;
  *((_QWORD *)v9 + 2) = &v12;
  v11 = v9;
  WebCore::mainThreadNormalWorld(v9);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v11);
  v10 = v11;
  v11 = 0;
  if (v10)
    (*(void (**)(WebCore *))(*(_QWORD *)v10 + 8))(v10);

}

void sub_1976E8B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6038;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6038;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F6050[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976E8D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a38)
  {
    v40 = *(unsigned int *)(v38 + 192);
    if ((_DWORD)v40 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6050[v40])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[184];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[176] = 0;
  v4 = 0;
  WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6050[v4])(&v1, v3);
}

void sub_1976E8E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;

  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6050[a38])(&a13, v38);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  char v28;
  _QWORD v29[23];
  int v30;
  unsigned __int8 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_22;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v6;
    v16 = 0;
LABEL_22:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_23;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      result = IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(a2, &v25);
      v11 = v27;
      if (v27)
      {
        result = (uint64_t)std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v29, (uint64_t)&v25);
        v30 = 0;
        v11 = 1;
        v31 = 1;
        if (v27)
        {
          result = std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v12);
          v11 = v31;
        }
      }
      else
      {
        v28 = 0;
        v31 = 0;
      }
    }
    else
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, &v25);
      v11 = v26;
      if (v26)
      {
        v29[0] = v25;
        v11 = 1;
        v30 = 1;
      }
      else
      {
        v28 = 0;
      }
      v31 = v11;
    }
    if (v11)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v5);
  v28 = 0;
  v31 = 0;
LABEL_25:
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v22 = a2[3];
  if (!v22 || !v21 || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20), !v31))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 200) = 0;
LABEL_27:
    v23 = *a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v24)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23);
    }
    return result;
  }
LABEL_14:
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 192) = -1;
  v13 = v30;
  if (v30 == -1)
  {
    *(_BYTE *)(a1 + 200) = 1;
    return result;
  }
  result = ((uint64_t (*)(uint64_t *, uint64_t, _QWORD *))off_1E34F6060[v30])(&v25, a1 + 8, v29);
  *(_DWORD *)(a1 + 192) = v13;
  v14 = v31;
  *(_BYTE *)(a1 + 200) = 1;
  if (v14)
  {
    if (v30 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34F6050[v30])(&v25, v29);
      if (!*(_BYTE *)(a1 + 200))
        goto LABEL_27;
    }
  }
  return result;
}

void sub_1976E912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,char a60)
{
  if (a60)
  {
    if (a58 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F6050[a58])(&a9, &a35);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

id WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
    WebKit::toWebAPI(a1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6080;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6080;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[16];
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>((uint64_t)v3, a2);
    if (v5)
    {
      WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v3);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, _BYTE *))off_1E34F6098[v4])(&v6, v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976E94B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t, char *))off_1E34F6098[a12])(v14 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F6098[v2])(&v3, v1);
}

void sub_1976E953C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F6098[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  void *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_19;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v17 = v6;
    v18 = 0;
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v5);
    goto LABEL_21;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v30);
    v13 = v31;
    if ((_BYTE)v31)
    {
      v27[0] = v30;
      v13 = 1;
      v28 = 1;
    }
    else
    {
      LOBYTE(v27[0]) = 0;
    }
    v29 = v13;
    v14 = 1;
    if (!v13)
      goto LABEL_21;
LABEL_14:
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, _QWORD *))off_1E34F60A8[v14])(&v30, a1, v27);
    *(_DWORD *)(a1 + 16) = v14;
    v16 = v29;
    *(_BYTE *)(a1 + 24) = 1;
    if (!v16)
      return result;
    if (v28 == -1)
      return result;
    result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34F6098[v28])(&v30, v27);
    if (*(_BYTE *)(a1 + 24))
      return result;
    goto LABEL_23;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v30);
  v11 = v32;
  if (v32)
  {
    v27[0] = v30;
    v12 = v31;
    v30 = 0;
    v31 = 0;
    v27[1] = v12;
    v28 = 0;
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v10);
    v11 = 1;
  }
  else
  {
    LOBYTE(v27[0]) = 0;
  }
  v14 = 0;
  v29 = v11;
  if (v11)
    goto LABEL_14;
LABEL_21:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24 && v23)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_23:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

void sub_1976E97B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E34F6098[v15])(&a9, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  void *v2;
  int v5;
  __CFString *v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  NSMutableArray *v13;
  objc_object *v14;
  objc_object *v15;
  CFTypeRef v16;
  id v17;
  _Unwind_Exception *v18;
  objc_object *v19;
  CFTypeRef cf;

  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(_QWORD *)a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v8 = v7;
    cf = v7;
    if (v7)
      CFRetain(v7);

    v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 176 * v9;
      do
      {
        WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
        v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 176;
        v11 -= 176;
      }
      while (v11);
    }
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v16 = cf;
    v19 = v15;
    cf = 0;
    if (v16)
    {
      CFRelease(v16);
      v15 = v19;
    }
    v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F60C8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F60C8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F6050[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976E9C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a38)
  {
    v40 = *(unsigned int *)(v38 + 192);
    if ((_DWORD)v40 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6050[v40])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[184];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[176] = 0;
  v4 = 0;
  WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6050[v4])(&v1, v3);
}

void sub_1976E9D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;

  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6050[a38])(&a13, v38);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F60F0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F60F0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F6050[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976E9FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a38)
  {
    v40 = *(unsigned int *)(v38 + 192);
    if ((_DWORD)v40 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6050[v40])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[184];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[176] = 0;
  v4 = 0;
  WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6050[v4])(&v1, v3);
}

void sub_1976EA084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;

  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6050[a38])(&a13, v38);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6118;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6118;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v3[16];
  int v4;
  char v5;
  char v6;

  v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>((uint64_t)v3, a2);
    if (v5)
    {
      WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v3);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, _BYTE *))off_1E34F6098[v4])(&v6, v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(a1 + 8);
  }
}

void sub_1976EA2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t, char *))off_1E34F6098[a12])(v14 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F6098[v2])(&v3, v1);
}

void sub_1976EA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F6098[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  id v6;
  id v7;
  _Unwind_Exception *v8;
  id v9;
  objc_object *v10;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    if (v2 != 1)
    {
      v8 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v8);
    }
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v10 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    goto LABEL_8;
  }
  v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
  if (*(_DWORD *)(a2 + 12))
  {
    WebKit::toWebAPI(*(_QWORD *)a2);
    v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v6 = WebKit::WebExtensionCallbackHandler::call(v5, v10);
LABEL_8:

    return;
  }
  v7 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6140;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6140;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F6050[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976EA620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a38)
  {
    v40 = *(unsigned int *)(v38 + 192);
    if ((_DWORD)v40 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6050[v40])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[184];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[176] = 0;
  v4 = 0;
  WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6050[v4])(&v1, v3);
}

void sub_1976EA6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;

  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6050[a38])(&a13, v38);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6168;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6168;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F6050[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976EA998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a38)
  {
    v40 = *(unsigned int *)(v38 + 192);
    if ((_DWORD)v40 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6050[v40])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[184];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[176] = 0;
  v4 = 0;
  WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6050[v4])(&v1, v3);
}

void sub_1976EAA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;

  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6050[a38])(&a13, v38);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

char *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 8 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, v7++);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6190;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6190;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EAD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F61B8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F61B8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EAF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F61E0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F61E0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EB150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6208;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6208;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EB348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6230;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6230;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v14 = 0;
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v15 = 0;
        if (v27 && v26)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
          v15 = *a2;
          v14 = a2[1];
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_22;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v14 = v5;
    v15 = v4;
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
    goto LABEL_26;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v5 < v9 || v5 - v9 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      v18 = a2[3];
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v28 = *a2;
        v29 = a2[1];
        v30 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v30)
        {
          if (v29)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
        }
      }
      goto LABEL_26;
    }
    v11 = 0;
    v12 = (uint64_t *)(v4 + v9);
    v13 = *v12;
    a2[2] = (uint64_t)(v12 + 1);
    v34 = v13;
    v35 = 0;
    v36 = 1;
LABEL_15:
    v31[0] = 0;
    v32 = -1;
    ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E34F6258[v11])(&v37, v31, &v34);
    v32 = v11;
    v33 = 1;
    if (!v36)
      goto LABEL_18;
    if (v35 == -1)
      goto LABEL_18;
    ((void (*)(uint64_t *, uint64_t *))off_1E34F6248[v35])(&v37, &v34);
    if (v33)
      goto LABEL_18;
    goto LABEL_28;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v37);
  if (v38)
  {
    v34 = v37;
    v11 = 1;
    v35 = 1;
    v36 = 1;
    goto LABEL_15;
  }
LABEL_26:
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v20)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  v31[0] = 0;
  v33 = 0;
LABEL_28:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22), !v33))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_18:
  WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v31);
  if (v33)
  {
    if (v32 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34F6248[v32])(&v34, v31);
  }
}

void sub_1976EB71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1)
      ((void (*)(__int16 *, char *))off_1E34F6248[a12])(&a16, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)&v1);
  if (v2 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F6248[v2])(&v3, &v1);
}

void sub_1976EB808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6248[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a2);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6278;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6278;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EBADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F62A0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F62A0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F62B8[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(a1 + 8);
  }
}

void sub_1976EBC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F62B8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F62B8[v2])(&v3, &v1);
}

void sub_1976EBD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F62B8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  objc_object *v6;
  WebKit::WebExtensionCallbackHandler *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

  }
  else
  {
    if (a2 && *(_DWORD *)(a2 + 4))
    {
      v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      v6 = (objc_object *)WTF::StringImpl::operator NSString *();
      v7 = v5;
    }
    else
    {
      v7 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      v6 = (objc_object *)CFSTR("und");
    }
    v8 = WebKit::WebExtensionCallbackHandler::call(v7, v6);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F62D8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F62D8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976EBFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6300;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6300;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[5];
  int v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;

  v2 = a1 + 8;
  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(a1 + 8);
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
        v11 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v12 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v12 = *a2;
          v11 = a2[1];
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
  }
  else
  {
    v6 = (unsigned __int8 *)a2[2];
    a2[2] = (uint64_t)(v6 + 1);
    v7 = *v6;
    if (v7 < 2)
    {
      if (v7)
      {
        IPC::Decoder::decode<WTF::URL>(a2, &v32);
        v8 = v35;
        if (v35)
        {
          v9 = v32;
          v32 = 0;
          v27 = v9;
          v28 = v33;
          v29 = v34;
          v30 = 0;
          v8 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        IPC::Decoder::decode<WTF::String>(a2, &v32);
        v8 = v33;
        if ((_BYTE)v33)
        {
          v27 = v32;
          v8 = 1;
          v30 = 1;
          goto LABEL_12;
        }
      }
      LOBYTE(v27) = 0;
LABEL_12:
      v31 = v8;
      if (v8)
        goto LABEL_13;
      goto LABEL_26;
    }
    v11 = v5;
    v12 = v4;
  }
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14 && v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  LOBYTE(v27) = 0;
  v31 = 0;
LABEL_26:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (!v17 || !v16 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15), !v31))
  {
    LOBYTE(v24[0]) = 0;
    v26 = 0;
LABEL_28:
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20 || !v19 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18), !v26))
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
      return;
    }
    goto LABEL_19;
  }
LABEL_13:
  LOBYTE(v24[0]) = 0;
  v25 = -1;
  v10 = v30;
  if (v30 == -1)
  {
    v26 = 1;
    goto LABEL_19;
  }
  ((void (*)(uint64_t *, uint64_t *, uint64_t *))off_1E34F6328[v30])(&v32, v24, &v27);
  v25 = v10;
  v26 = 1;
  if (v31)
  {
    if (v30 != -1)
    {
      ((void (*)(uint64_t *, uint64_t *))off_1E34F6318[v30])(&v32, &v27);
      if (!v26)
        goto LABEL_28;
    }
  }
LABEL_19:
  WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v24[0], v25);
  if (v26)
  {
    if (v25 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F6318[v25])(&v27, v24);
  }
}

void sub_1976EC39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  if (a17)
  {
    if (a15 != -1)
      ((void (*)(__int16 *, char *))off_1E34F6318[a15])(&a19, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  uint64_t v2[5];
  int v3;
  char v4;

  WTF::URL::URL((WTF::URL *)v2);
  v3 = 0;
  WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, v2[0], 0);
  if (v3 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F6318[v3])(&v4, v2);
}

void sub_1976EC4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6318[a15])(v15 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  objc_object *v6;
  WebKit::WebExtensionCallbackHandler *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

  }
  else
  {
    if (a2 && *(_DWORD *)(a2 + 4))
    {
      v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      v6 = (objc_object *)WTF::StringImpl::operator NSString *();
      v7 = v5;
    }
    else
    {
      v7 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      v6 = (objc_object *)CFSTR("data:,");
    }
    v8 = WebKit::WebExtensionCallbackHandler::call(v7, v6);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6348;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6348;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F62B8[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976EC790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F62B8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F62B8[v2])(&v3, &v1);
}

void sub_1976EC820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F62B8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  void *v3;
  __CFString *v5;
  __CFString *v6;
  objc_object *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  OpaqueJSContext *v3;
  uint64_t v4;

  *a1 = &off_1E34F6370;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 8))(v2 + 40);
    else
      --*(_DWORD *)(v2 + 48);
  }
  v3 = (OpaqueJSContext *)a1[3];
  if (v3)
    JSGlobalContextRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  OpaqueJSContext *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F6370;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = (OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v4)
    JSGlobalContextRelease(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (unsigned int *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5), v7))
  {
    result = WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)&v5);
    if (v7)
    {
      if (v6)
      {
        result = (unsigned int *)v5;
        v5 = 0;
        if (result)
        {
          if (*result == 2)
            return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          else
            *result -= 2;
        }
      }
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    return WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)&v5);
  }
  return result;
}

void sub_1976ECAEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_BYTE *)(a2 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 3);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)result + 16))(*(_QWORD *)result);
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  v2 = v6;
  if (!*(_QWORD *)a2)
  {
LABEL_10:
    v7 = &stru_1E351F1B8;
    goto LABEL_5;
  }
  v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
LABEL_5:
  v8 = *((_QWORD *)v4 + 2);
  v11 = 0;
  WebKit::WebExtensionAPIRuntimeBase::reportError(v2, v7, v8, &v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v9);

  v10 = v11;
  v11 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*((unsigned int **)v4 + 3));
}

void sub_1976ECC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2[1]);
  return IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6398;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6398;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[16];
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(a2, v3);
    if (v5)
    {
      WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v3);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, _BYTE *))off_1E34F63B0[v4])(&v6, v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976ECDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t, char *))off_1E34F63B0[a12])(v14 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F63B0[v2])(&v3, v1);
}

void sub_1976ECE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F63B0[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI((uint64_t *)a2, (void *)1);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F63D0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F63D0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ED0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F63F8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F63F8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ED2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent(WebKit::WebExtensionTabParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  objc_object *v5;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onCreated(v3);
  WebKit::toWebAPI(*(_QWORD *)(a1 + 8));
  v5 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);

}

void sub_1976ED394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t *a1, WebKit::WebExtensionAPINamespace *this)
{
  void *v2;
  WebKit::WebExtensionAPITabs *v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebExtensionAPIEvent *v7;
  unint64_t v8;
  double v9;
  objc_object *v10;
  objc_object *v11;
  _Unwind_Exception *v12;
  id v13;
  objc_object *v14;

  v4 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v5 = WebKit::WebExtensionAPITabs::onUpdated(v4);
  v6 = a1[1];
  if (!*(_BYTE *)(v6 + 8))
  {
    v12 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

    _Unwind_Resume(v12);
  }
  v7 = (WebKit::WebExtensionAPIEvent *)v5;
  v8 = *(_QWORD *)v6;
  v9 = (double)v8;
  if (v8 == -2)
    v9 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v9);
  v14 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::toWebAPI(a1[2]);
  v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::toWebAPI(a1[1]);
  v11 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v7, v14, v10, v11);

}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  double v8;
  objc_object *v9;
  objc_object *v10;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onReplaced(v3);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (double)v5;
  if (v5 == -2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v7 = **(_QWORD **)(a1 + 16);
  v8 = (double)v7;
  if (v7 == -2)
    v8 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  v9 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v10, v9);

}

void sub_1976ED544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[5 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[5 * v1];
  if ((_DWORD)v1)
  {
    v3 = 40 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 5;
      v3 -= 40;
      if (!v3)
        return v2;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  unint64_t v5;
  double v6;
  objc_object *v7;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onDetached(v3);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (double)v5;
  if (v5 == -2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));

}

void sub_1976ED64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  unint64_t v5;
  double v6;
  objc_object *v7;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onMoved(v3);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (double)v5;
  if (v5 == -2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));

}

void sub_1976ED6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  unint64_t v5;
  double v6;
  objc_object *v7;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onAttached(v3);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (double)v5;
  if (v5 == -2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));

}

void sub_1976ED774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onActivated(v3);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, **(objc_object ***)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onHighlighted(v3);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, **(objc_object ***)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPITabs *v3;
  WebKit::WebExtensionAPIEvent *v4;
  unint64_t v5;
  double v6;
  objc_object *v7;

  v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onRemoved(v3);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (double)v5;
  if (v5 == -2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));

}

void sub_1976ED878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::notifyFail(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  NSString *v4;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28[4];
  WTF::StringImpl *v29;
  uint64_t v30;
  IPC::Encoder *v31;

  v4 = a3;
  WebKit::scriptLocation((WebKit *)&v29, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v28);
  v8 = v28[0];
  if (v28[0])
  {
    v9 = v28[0][3];
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD **)(*(_QWORD *)(v12 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
      && (v14 = *(_QWORD *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease((CFTypeRef)v8[1]);
      v15 = *(_QWORD *)(v14 + 616);
      if (v15)
      {
        v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
        }
        MEMORY[0x19AEABCC8](&v27, v4);
        LOBYTE(v28[0]) = 0;
        v28[1] = (uint64_t *)&v27;
        v28[2] = (uint64_t *)&v29;
        v28[3] = &v30;
        v18 = *(_QWORD *)(v15 + 24);
        v19 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v19 = 1700;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 528) = v19 + 16;
        *(_QWORD *)(v19 + 536) = v19 + 16;
        *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v19 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
        v31 = (IPC::Encoder *)v19;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v19, v28);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v17 + 2) + 32))((_QWORD *)v17 + 2, &v31, 0);
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v22, v23);
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v24 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      v25 = *(const void **)(v14 - 8);
    }
    else
    {
      v25 = (const void *)v8[1];
    }
    CFRelease(v25);
  }
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v7);
    else
      *(_DWORD *)v26 -= 2;
  }

}

void sub_1976EDAA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  unsigned int **v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v20);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

Inspector::ScriptCallStack *WebKit::scriptLocation(WebKit *this, const OpaqueJSContext *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  Inspector::ScriptCallStack *result;
  Inspector::ScriptCallStack *v13;
  WTF::StringImpl *v14;

  Inspector::createScriptCallStack();
  v3 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v13);
  v5 = v3;
  if (v3)
  {
    v6 = *(WTF::StringImpl **)(v3 + 8);
    if (v6)
    {
      v8 = *(_DWORD *)v6;
      v7 = *((_DWORD *)v6 + 1);
      v9 = *(_DWORD *)v6 + 2;
      *(_DWORD *)v6 = v9;
      if (v7)
      {
        v10 = *(_DWORD *)(v3 + 28);
        *(_DWORD *)v6 = v8 + 4;
        v11 = v6;
        goto LABEL_12;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v14;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v10 = *(_DWORD *)(v5 + 28);
    if (v14)
    {
      v9 = *(_DWORD *)v14;
      *(_DWORD *)v14 += 2;
LABEL_12:
      *(_QWORD *)this = v11;
      *((_DWORD *)this + 2) = v10;
      if (v9)
        *(_DWORD *)v11 = v9;
      else
        WTF::StringImpl::destroy(v11, v4);
      goto LABEL_15;
    }
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)this = v14;
    *((_DWORD *)this + 2) = 0;
  }
LABEL_15:
  result = v13;
  if (v13)
    return (Inspector::ScriptCallStack *)WTF::RefCounted<Inspector::ScriptCallStack>::deref(v13);
  return result;
}

void sub_1976EDC6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  WTF::StringImpl *v9;

  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (a9)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITest::notifyPass(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  NSString *v4;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28[4];
  WTF::StringImpl *v29;
  uint64_t v30;
  IPC::Encoder *v31;

  v4 = a3;
  WebKit::scriptLocation((WebKit *)&v29, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v28);
  v8 = v28[0];
  if (v28[0])
  {
    v9 = v28[0][3];
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD **)(*(_QWORD *)(v12 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
      && (v14 = *(_QWORD *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease((CFTypeRef)v8[1]);
      v15 = *(_QWORD *)(v14 + 616);
      if (v15)
      {
        v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
        }
        MEMORY[0x19AEABCC8](&v27, v4);
        LOBYTE(v28[0]) = 1;
        v28[1] = (uint64_t *)&v27;
        v28[2] = (uint64_t *)&v29;
        v28[3] = &v30;
        v18 = *(_QWORD *)(v15 + 24);
        v19 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v19 = 1700;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 528) = v19 + 16;
        *(_QWORD *)(v19 + 536) = v19 + 16;
        *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v19 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
        v31 = (IPC::Encoder *)v19;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v19, v28);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v17 + 2) + 32))((_QWORD *)v17 + 2, &v31, 0);
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v22, v23);
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v24 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      v25 = *(const void **)(v14 - 8);
    }
    else
    {
      v25 = (const void *)v8[1];
    }
    CFRelease(v25);
  }
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v7);
    else
      *(_DWORD *)v26 -= 2;
  }

}

void sub_1976EDED0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  unsigned int **v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v20);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::yield(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  NSString *v4;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[3];
  WTF::StringImpl *v29;
  uint64_t v30;
  IPC::Encoder *v31;

  v4 = a3;
  WebKit::scriptLocation((WebKit *)&v29, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v28);
  v8 = v28[0];
  if (v28[0])
  {
    v9 = *(_QWORD *)(v28[0] + 24);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD **)(*(_QWORD *)(v12 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
      && (v14 = *(_QWORD *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      v15 = *(_QWORD *)(v14 + 616);
      if (v15)
      {
        v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
        }
        MEMORY[0x19AEABCC8](&v27, v4);
        v28[0] = &v27;
        v28[1] = &v29;
        v28[2] = &v30;
        v18 = *(_QWORD *)(v15 + 24);
        v19 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v19 = 1703;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 528) = v19 + 16;
        *(_QWORD *)(v19 + 536) = v19 + 16;
        *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v19 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
        v31 = (IPC::Encoder *)v19;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(v19, (uint64_t)v28);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v17 + 2) + 32))((_QWORD *)v17 + 2, &v31, 0);
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v22, v23);
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v24 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      v25 = *(const void **)(v14 - 8);
    }
    else
    {
      v25 = *(const void **)(v8 + 8);
    }
    CFRelease(v25);
  }
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v7);
    else
      *(_DWORD *)v26 -= 2;
  }

}

void sub_1976EE18C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  unsigned int **v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v20);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::log(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3)
{
  JSValue *v4;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  JSValue *v15;
  uint64_t v16;
  unsigned int **v17;
  WebKit::WebProcess *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  const void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[3];
  WTF::StringImpl *v31;
  uint64_t v32;
  IPC::Encoder *v33;

  v4 = a3;
  WebKit::scriptLocation((WebKit *)&v31, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v30);
  v8 = v30[0];
  if (v30[0])
  {
    v9 = *(_QWORD *)(v30[0] + 24);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD **)(*(_QWORD *)(v12 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v13 + 1368))(v13) & 1) == 0)
      && (v14 = *(_QWORD *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      v16 = *(_QWORD *)(v14 + 616);
      if (v16)
      {
        v17 = (unsigned int **)(v16 + 16);
        ++*(_DWORD *)(v16 + 16);
        {
          v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
        }
        WebKit::debugString((WebKit *)v4, v15);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19AEABCC8](&v29, v19);
        v30[0] = &v29;
        v30[1] = &v31;
        v30[2] = &v32;
        v20 = *(_QWORD *)(v16 + 24);
        v21 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v21 = 1701;
        *(_QWORD *)(v21 + 8) = v20;
        *(_QWORD *)(v21 + 528) = v21 + 16;
        *(_QWORD *)(v21 + 536) = v21 + 16;
        *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v21 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
        v33 = (IPC::Encoder *)v21;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(v21, (uint64_t)v30);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v18 + 2) + 32))((_QWORD *)v18 + 2, &v33, 0);
        v23 = v33;
        v33 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v24, v25);
        }
        v26 = v29;
        v29 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v26 -= 2;
        }

        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
      }
      v27 = *(const void **)(v14 - 8);
    }
    else
    {
      v27 = *(const void **)(v8 + 8);
    }
    CFRelease(v27);
  }
  v28 = v31;
  v31 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v7);
    else
      *(_DWORD *)v28 -= 2;
  }

}

void sub_1976EE458(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  unsigned int **v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v19 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v21);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

__CFString *WebKit::debugString(WebKit *this, JSValue *a2)
{
  WebKit *v2;
  __CFString *v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;

  v2 = this;
  if ((-[WebKit _isRegularExpression](v2, "_isRegularExpression") & 1) != 0
    || -[WebKit _isFunction](v2, "_isFunction"))
  {
    -[WebKit toString](v2, "toString");
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[WebKit _toSortedJSONString](v2, "_toSortedJSONString");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    v6 = CFSTR("undefined");
    if (v4)
      v6 = (__CFString *)v4;
    v3 = v6;

  }
  return v3;
}

void sub_1976EE590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertTrue(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, char a3, NSString *a4)
{
  NSString *v6;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  WebKit::WebProcess *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  const void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t *v30[4];
  WTF::StringImpl *v31;
  uint64_t v32;
  IPC::Encoder *v33;

  v6 = a4;
  WebKit::scriptLocation((WebKit *)&v31, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v8, v30);
  v10 = v30[0];
  if (v30[0])
  {
    v11 = v30[0][3];
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0)
      && (v16 = *(_QWORD *)(v15[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v16 - 8));
      CFRelease((CFTypeRef)v10[1]);
      v17 = *(_QWORD *)(v16 + 616);
      if (v17)
      {
        v18 = (unsigned int **)(v17 + 16);
        ++*(_DWORD *)(v17 + 16);
        {
          v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v19);
        }
        MEMORY[0x19AEABCC8](&v29, v6);
        LOBYTE(v30[0]) = a3;
        v30[1] = (uint64_t *)&v29;
        v30[2] = (uint64_t *)&v31;
        v30[3] = &v32;
        v20 = *(_QWORD *)(v17 + 24);
        v21 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v21 = 1702;
        *(_QWORD *)(v21 + 8) = v20;
        *(_QWORD *)(v21 + 528) = v21 + 16;
        *(_QWORD *)(v21 + 536) = v21 + 16;
        *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v21 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
        v33 = (IPC::Encoder *)v21;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v21, v30);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v19 + 2) + 32))((_QWORD *)v19 + 2, &v33, 0);
        v23 = v33;
        v33 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v24, v25);
        }
        v26 = v29;
        v29 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v26 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v18);
      }
      v27 = *(const void **)(v16 - 8);
    }
    else
    {
      v27 = (const void *)v10[1];
    }
    CFRelease(v27);
  }
  v28 = v31;
  v31 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v9);
    else
      *(_DWORD *)v28 -= 2;
  }

}

void sub_1976EE7BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  unsigned int **v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v20);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertDeepEq(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  JSValue *v8;
  JSValue *v9;
  NSString *v10;
  JSValue *v11;
  void *v12;
  JSValue *v13;
  void *v14;
  char v15;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::WebProcess *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42[6];
  WTF::StringImpl *v43;
  uint64_t v44;
  IPC::Encoder *v45;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  WebKit::debugString((WebKit *)v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::debugString((WebKit *)v8, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[JSValue isEqualToObject:](v9, "isEqualToObject:", v8))
    v15 = 1;
  else
    v15 = objc_msgSend(v12, "isEqualToString:", v14);
  WebKit::scriptLocation((WebKit *)&v43, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v17, v42);
  v19 = v42[0];
  if (v42[0])
  {
    v20 = v42[0][3];
    if (v20
      && (v21 = *(_QWORD *)(v20 + 8)) != 0
      && (v22 = *(_QWORD *)(v21 + 24)) != 0
      && (v23 = *(_QWORD *)(v22 + 8)) != 0
      && (v24 = *(_QWORD **)(*(_QWORD *)(v23 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v24 + 1368))(v24) & 1) == 0)
      && (v25 = *(_QWORD *)(v24[2] + 8)) != 0)
    {
      v38 = v12;
      CFRetain(*(CFTypeRef *)(v25 - 8));
      CFRelease((CFTypeRef)v19[1]);
      v26 = *(_QWORD *)(v25 + 616);
      if (v26)
      {
        ++*(_DWORD *)(v26 + 16);
        {
          v27 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v27);
        }
        MEMORY[0x19AEABCC8](&v41, v12);
        MEMORY[0x19AEABCC8](&v40, v14);
        MEMORY[0x19AEABCC8](&v39, v10);
        LOBYTE(v42[0]) = v15;
        v42[1] = (uint64_t *)&v41;
        v42[2] = (uint64_t *)&v40;
        v42[3] = (uint64_t *)&v39;
        v42[4] = (uint64_t *)&v43;
        v42[5] = &v44;
        v28 = *(_QWORD *)(v26 + 24);
        v29 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v29 = 1699;
        *(_QWORD *)(v29 + 8) = v28;
        *(_QWORD *)(v29 + 528) = v29 + 16;
        *(_QWORD *)(v29 + 536) = v29 + 16;
        *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v29 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
        v45 = (IPC::Encoder *)v29;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v29, v42);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v27 + 2) + 32))((_QWORD *)v27 + 2, &v45, 0);
        v31 = v45;
        v45 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v30);
          WTF::fastFree(v32, v33);
        }
        v34 = v39;
        v39 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v40;
        v40 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v41;
        v41 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v36 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v26 + 16));
      }
      CFRelease(*(CFTypeRef *)(v25 - 8));
      v12 = v38;
    }
    else
    {
      CFRelease((CFTypeRef)v19[1]);
    }
  }
  v37 = v43;
  v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v18);
    else
      *(_DWORD *)v37 -= 2;
  }

}

void sub_1976EEB64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  void *v20;
  void *v21;
  void *v22;
  unsigned int **v23;
  uint64_t v24;
  WTF::StringImpl *v26;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v23);
  CFRelease(*(CFTypeRef *)(v24 - 8));
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v26);
    else
      *(_DWORD *)a20 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1976EEC8C()
{
  JUMPOUT(0x1976EEC6CLL);
}

void sub_1976EEC98()
{
  JUMPOUT(0x1976EEC74);
}

void WebKit::WebExtensionAPITest::assertEq(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  JSValue *v8;
  NSString *v9;
  JSValue *v10;
  void *v11;
  JSValue *v12;
  void *v13;
  NSString *v14;
  _BOOL8 v15;
  uint64_t v16;
  JSValue *v17;

  v17 = a3;
  v8 = a4;
  v9 = a5;
  WebKit::debugString((WebKit *)v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::debugString((WebKit *)v17, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[JSValue isEqualToObject:](v8, "isEqualToObject:", v17);
  if (!v15 && objc_msgSend(v11, "isEqualToString:", v13))
  {
    objc_msgSend(v13, "stringByAppendingString:", CFSTR(" (different)"));
    v16 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v16;
  }
  WebKit::assertEquals(a2, (const OpaqueJSContext *)v15, v11, (NSString *)v13, v9, v14);

}

void sub_1976EED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void WebKit::assertEquals(WebKit *this, const OpaqueJSContext *a2, void *a3, NSString *a4, NSString *a5, NSString *a6)
{
  char v8;
  id v10;
  NSString *v11;
  NSString *v12;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  const void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t *v40[6];
  WTF::StringImpl *v41;
  uint64_t v42;
  IPC::Encoder *v43;

  v8 = (char)a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WebKit::scriptLocation((WebKit *)&v41, this);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v14, v40);
  v16 = v40[0];
  if (v40[0])
  {
    v17 = v40[0][3];
    if (v17
      && (v18 = *(_QWORD *)(v17 + 8)) != 0
      && (v19 = *(_QWORD *)(v18 + 24)) != 0
      && (v20 = *(_QWORD *)(v19 + 8)) != 0
      && (v21 = *(_QWORD **)(*(_QWORD *)(v20 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v21 + 1368))(v21) & 1) == 0)
      && (v22 = *(_QWORD *)(v21[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v22 - 8));
      CFRelease((CFTypeRef)v16[1]);
      v23 = *(_QWORD *)(v22 + 616);
      if (v23)
      {
        v24 = (unsigned int **)(v23 + 16);
        ++*(_DWORD *)(v23 + 16);
        {
          v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v25);
        }
        MEMORY[0x19AEABCC8](&v39, v10);
        MEMORY[0x19AEABCC8](&v38, v11);
        MEMORY[0x19AEABCC8](&v37, v12);
        LOBYTE(v40[0]) = v8;
        v40[1] = (uint64_t *)&v39;
        v40[2] = (uint64_t *)&v38;
        v40[3] = (uint64_t *)&v37;
        v40[4] = (uint64_t *)&v41;
        v40[5] = &v42;
        v26 = *(_QWORD *)(v23 + 24);
        v27 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v27 = 1699;
        *(_QWORD *)(v27 + 8) = v26;
        *(_QWORD *)(v27 + 528) = v27 + 16;
        *(_QWORD *)(v27 + 536) = v27 + 16;
        *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v27 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
        v43 = (IPC::Encoder *)v27;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v27, v40);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v25 + 2) + 32))((_QWORD *)v25 + 2, &v43, 0);
        v29 = v43;
        v43 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v28);
          WTF::fastFree(v30, v31);
        }
        v32 = v37;
        v37 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v32 -= 2;
        }
        v34 = v38;
        v38 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v39;
        v39 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v35 -= 2;
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v24);
      }
      v33 = *(const void **)(v22 - 8);
    }
    else
    {
      v33 = (const void *)v16[1];
    }
    CFRelease(v33);
  }
  v36 = v41;
  v41 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v15);
    else
      *(_DWORD *)v36 -= 2;
  }

}

void sub_1976EF074(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, IPC::Encoder *a20)
{
  void *v20;
  void *v21;
  void *v22;
  unsigned int **v23;
  uint64_t v24;
  WTF::StringImpl *v26;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v23);
  CFRelease(*(CFTypeRef *)(v24 - 8));
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v26);
    else
      *(_DWORD *)a18 -= 2;
  }

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertRejects(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  JSValue *v8;
  JSValue *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  JSValue *v18;
  NSString *v19;
  _QWORD v21[4];
  JSValue *v22;
  NSString *v23;
  _QWORD *v24;
  const OpaqueJSContext *v25;
  _QWORD v26[5];
  _QWORD v27[5];
  id v28;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = __Block_byref_object_copy__12;
  v27[4] = __Block_byref_object_dispose__12;
  v28 = 0;
  v11 = (void *)MEMORY[0x1E0CBE108];
  -[JSValue context](v8, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke;
  v26[3] = &unk_1E34F6580;
  v26[4] = v27;
  objc_msgSend(v11, "valueWithNewPromiseInContext:fromExecutor:", v12, v26);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)MEMORY[0x1E0CBE108];
  -[JSValue context](v8, "context");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "valueWithNewPromiseResolvedWithResult:inContext:", v8, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v21[0] = v13;
  v21[1] = 3221225472;
  v21[2] = ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke_2;
  v21[3] = &unk_1E34F65A8;
  v25 = a2;
  v18 = v9;
  v22 = v18;
  v19 = v10;
  v23 = v19;
  v24 = v27;
  objc_msgSend(v17, "_awaitThenableResolutionWithCompletionHandler:", v21);

  _Block_object_dispose(v27, 8);
  return v14;
}

void sub_1976EF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  WebKit *v5;
  id v6;
  JSValue *v7;
  NSString *v8;
  void *v9;
  WebKit *v10;
  JSValue *v11;
  WebKit *v12;
  uint64_t v13;
  __CFString *v14;
  __CFString *v15;
  WebKit *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  WebKit *v21;
  const OpaqueJSContext *v22;
  JSValue *v23;
  void *v24;
  JSValue *v25;
  NSString *v26;
  NSString *v27;
  NSString *v28;
  NSString *v29;
  id v30;
  NSString *v31;
  NSString *v32;
  id v33;
  WebKit *v34;
  void *v35;
  NSString *v36;
  NSString *v37;
  NSString *v38;
  WebKit *v39;
  const OpaqueJSContext *v40;
  JSValue *v41;
  JSValue *v42;
  NSString *v43;
  NSString *v44;
  NSString *v45;
  id v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (!v5 && v6)
  {
    if (objc_msgSend(v6, "isObject") && objc_msgSend(v9, "hasProperty:", CFSTR("message")))
    {
      objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("message"));
      v10 = (WebKit *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = v9;
    }
    v16 = v10;
    v17 = *(void **)(a1 + 32);
    if (v17)
    {
      if (objc_msgSend(v17, "_isRegularExpression"))
      {
        v18 = *(void **)(a1 + 32);
        v47[0] = v16;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v47, 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "invokeMethod:withArguments:", CFSTR("test"), v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        v21 = *(WebKit **)(a1 + 56);
        v22 = (const OpaqueJSContext *)objc_msgSend(v20, "toBool");
        WebKit::debugString(*(WebKit **)(a1 + 32), v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::debugString(v16, v25);
        v26 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::combineMessages(*(WebKit **)(a1 + 40), CFSTR("Promise rejected with an error that didn't match the regular expression"), v27);
        v28 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::assertEquals(v21, v22, v24, v26, v28, v29);

        v30 = (id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "callWithArguments:", 0);
LABEL_23:

        goto LABEL_24;
      }
      v39 = *(WebKit **)(a1 + 56);
      v40 = (const OpaqueJSContext *)objc_msgSend(*(id *)(a1 + 32), "isEqualWithTypeCoercionToObject:", v16);
      WebKit::debugString(*(WebKit **)(a1 + 32), v41);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::debugString(v16, v42);
      v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages(*(WebKit **)(a1 + 40), CFSTR("Promise rejected with an error that didn't equal"), v43);
      v44 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(v39, v40, v35, v37, v44, v45);

    }
    else
    {
      v34 = *(WebKit **)(a1 + 56);
      WebKit::debugString(v16, v11);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages(*(WebKit **)(a1 + 40), CFSTR("Promise rejected with an error"), v36);
      v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(v34, (const OpaqueJSContext *)1, CFSTR("(any error)"), (NSString *)v35, v37, v38);
    }

    v46 = (id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "callWithArguments:", 0);
    goto LABEL_23;
  }
  v12 = *(WebKit **)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
  {
    v14 = CFSTR("(any error)");
    if (v5)
      goto LABEL_8;
LABEL_14:
    v15 = CFSTR("(no error)");
    goto LABEL_15;
  }
  WebKit::debugString(*(WebKit **)(a1 + 32), v7);
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_14;
LABEL_8:
  WebKit::debugString(v5, v7);
  v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_15:
  WebKit::combineMessages(*(WebKit **)(a1 + 40), CFSTR("Promise did not reject with an error"), v8);
  v31 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::assertEquals(v12, 0, v14, &v15->isa, v31, v32);

  if (v5)
  if (v13)

  v33 = (id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "callWithArguments:", 0);
LABEL_24:

}

void sub_1976EF6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

WebKit *WebKit::combineMessages(WebKit *this, NSString *a2, NSString *a3)
{
  WebKit *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;

  v4 = this;
  v5 = a2;
  if (-[WebKit length](v4, "length") && -[NSString length](v5, "length"))
  {
    -[WebKit stringByAppendingString:](v4, "stringByAppendingString:", CFSTR("\n"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", v5);
    v7 = objc_claimAutoreleasedReturnValue();

LABEL_7:
    v4 = (WebKit *)v7;
    goto LABEL_8;
  }
  if (!-[WebKit length](v4, "length") || -[NSString length](v5, "length"))
  {
    v7 = (uint64_t)v5;
    v5 = 0;
    goto LABEL_7;
  }
LABEL_8:

  return v4;
}

void sub_1976EF86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertResolves(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  JSValue *v7;
  NSString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSString *v16;
  _QWORD v18[4];
  NSString *v19;
  _QWORD *v20;
  WebKit::WebExtensionAPITest *v21;
  const OpaqueJSContext *v22;
  _QWORD v23[5];
  _QWORD v24[5];
  id v25;

  v7 = a3;
  v8 = a4;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3032000000;
  v24[3] = __Block_byref_object_copy__12;
  v24[4] = __Block_byref_object_dispose__12;
  v25 = 0;
  v9 = (void *)MEMORY[0x1E0CBE108];
  -[JSValue context](v7, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke;
  v23[3] = &unk_1E34F6580;
  v23[4] = v24;
  objc_msgSend(v9, "valueWithNewPromiseInContext:fromExecutor:", v10, v23);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)MEMORY[0x1E0CBE108];
  -[JSValue context](v7, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "valueWithNewPromiseResolvedWithResult:inContext:", v7, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v18[0] = v11;
  v18[1] = 3221225472;
  v18[2] = ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke_2;
  v18[3] = &unk_1E34F65D0;
  v21 = this;
  v22 = a2;
  v20 = v24;
  v16 = v8;
  v19 = v16;
  objc_msgSend(v15, "_awaitThenableResolutionWithCompletionHandler:", v18);

  _Block_object_dispose(v24, 8);
  return v12;
}

void sub_1976EFA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  WebKit *v8;
  JSValue *v9;
  WebKit *v10;
  const OpaqueJSContext *v11;
  WebKit *v12;
  void *v13;
  void *v14;
  NSString *v15;
  NSString *v16;
  WebKit::WebExtensionAPITest *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (objc_msgSend(v6, "isObject") && objc_msgSend(v7, "hasProperty:", CFSTR("message")))
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("message"));
      v8 = (WebKit *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = v7;
    }
    v10 = v8;
    v11 = *(const OpaqueJSContext **)(a1 + 56);
    v12 = *(WebKit **)(a1 + 32);
    v13 = (void *)MEMORY[0x1E0CB3940];
    WebKit::debugString(v8, v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "stringWithFormat:", CFSTR("Promise rejected with an error: %@"), v14);
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::combineMessages(v12, v15, v16);
    v17 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPITest::notifyFail(v17, v11, (NSString *)v17);

    v18 = (id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "callWithArguments:", 0);
  }
  else
  {
    WebKit::WebExtensionAPITest::assertTrue(0, *(const OpaqueJSContext **)(a1 + 56), 1, CFSTR("Promise resolved without an error"));
    v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v22[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (id)objc_msgSend(v19, "callWithArguments:", v20);

  }
}

void sub_1976EFC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertThrows(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  JSValue *v8;
  JSValue *v9;
  NSString *v10;
  id v11;
  void *v12;
  void *v13;
  JSValue *v14;
  NSString *v15;
  WebKit *v16;
  WebKit *v17;
  void *v18;
  JSValue *v19;
  void *v20;
  const OpaqueJSContext *v21;
  JSValue *v22;
  void *v23;
  JSValue *v24;
  NSString *v25;
  NSString *v26;
  NSString *v27;
  NSString *v28;
  __CFString *v29;
  void *v30;
  NSString *v31;
  NSString *v32;
  NSString *v33;
  const OpaqueJSContext *v34;
  JSValue *v35;
  JSValue *v36;
  NSString *v37;
  NSString *v38;
  NSString *v39;
  NSString *v40;
  NSString *v41;
  void *v42;
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = -[JSValue callWithArguments:](v8, "callWithArguments:", MEMORY[0x1E0C9AA60]);
  -[JSValue context](v8, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "exception");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    if (objc_msgSend(v13, "isObject")
      && objc_msgSend(v13, "hasProperty:", CFSTR("message")))
    {
      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("message"));
      v16 = (WebKit *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = v13;
    }
    v17 = v16;
    -[JSValue context](v8, "context");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setException:", 0);

    if (v9)
    {
      if (-[JSValue _isRegularExpression](v9, "_isRegularExpression"))
      {
        v43[0] = v17;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[JSValue invokeMethod:withArguments:](v9, "invokeMethod:withArguments:", CFSTR("test"), v20);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        v21 = (const OpaqueJSContext *)objc_msgSend(v42, "toBool");
        WebKit::debugString((WebKit *)v9, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::debugString(v17, v24);
        v25 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::combineMessages((WebKit *)v10, CFSTR("Function threw an exception that didn't match the regular expression"), v26);
        v27 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::assertEquals(a2, v21, v23, v25, v27, v28);

LABEL_14:
        goto LABEL_18;
      }
      v34 = (const OpaqueJSContext *)-[JSValue isEqualWithTypeCoercionToObject:](v9, "isEqualWithTypeCoercionToObject:", v17);
      WebKit::debugString((WebKit *)v9, v35);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::debugString(v17, v36);
      v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages((WebKit *)v10, CFSTR("Function threw an exception that didn't equal"), v37);
      v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(a2, v34, v30, v32, v38, v39);

    }
    else
    {
      WebKit::debugString(v17, v19);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages((WebKit *)v10, CFSTR("Function threw an exception"), v31);
      v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(a2, (const OpaqueJSContext *)1, CFSTR("(any exception)"), (NSString *)v30, v32, v33);
    }

    goto LABEL_14;
  }
  if (v9)
  {
    WebKit::debugString((WebKit *)v9, v14);
    v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v29 = CFSTR("(any exception)");
  }
  WebKit::combineMessages((WebKit *)v10, CFSTR("Function did not throw an exception"), v15);
  v40 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::assertEquals(a2, 0, v29, CFSTR("(no exception)"), v40, v41);

  if (v9)
LABEL_18:

}

void sub_1976EFFA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertSafe(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  JSValue *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  WebKit::WebExtensionAPITest *v11;
  void *v12;
  WebKit *v13;
  JSValue *v14;
  WebKit *v15;
  void *v16;
  void *v17;
  NSString *v18;
  NSString *v19;
  WebKit::WebExtensionAPITest *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v6 = a3;
  v7 = a4;
  -[JSValue callWithArguments:](v6, "callWithArguments:", MEMORY[0x1E0C9AA60]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[JSValue context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "exception");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[JSValue context](v6, "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setException:", 0);

    if (objc_msgSend(v10, "isObject")
      && objc_msgSend(v10, "hasProperty:", CFSTR("message")))
    {
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("message"));
      v13 = (WebKit *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = v10;
    }
    v15 = v13;
    v16 = (void *)MEMORY[0x1E0CB3940];
    WebKit::debugString(v13, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringWithFormat:", CFSTR("Function threw an exception: %@"), v17);
    v18 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::combineMessages((WebKit *)v7, v18, v19);
    v20 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPITest::notifyFail(v20, a2, (NSString *)v20);

    v21 = (void *)MEMORY[0x1E0CBE108];
    -[JSValue context](v6, "context");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "valueWithUndefinedInContext:", v22);
    v23 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v23;
  }
  else
  {
    WebKit::WebExtensionAPITest::assertTrue(v11, a2, 1, CFSTR("Function did not throw an exception"));
  }

  return v8;
}

void sub_1976F0234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

JSValue *WebKit::WebExtensionAPITest::assertSafeResolve(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  NSString *v7;
  JSValue *v8;
  uint64_t v9;

  v7 = a4;
  WebKit::WebExtensionAPITest::assertSafe((WebKit::WebExtensionAPITest *)v7, a2, a3, v7);
  v8 = (JSValue *)objc_claimAutoreleasedReturnValue();
  if (-[JSValue _isThenable](v8, "_isThenable"))
  {
    WebKit::WebExtensionAPITest::assertResolves(this, a2, v8, v7);
    v9 = objc_claimAutoreleasedReturnValue();

    v8 = (JSValue *)v9;
  }

  return v8;
}

void sub_1976F0328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *WTF::RefCounted<Inspector::ScriptCallStack>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB5E14]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t **a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[2]);
  v11 = *(_DWORD *)a2[3];
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 >= v13 + 4)
  {
    v16 = *(char **)(a1 + 528);
    goto LABEL_5;
  }
  v22 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v14);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1976F054CLL);
  }
  v16 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v16;
  *(_QWORD *)(a1 + 552) = v23;
  v12 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  v4 = **(_DWORD **)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    return;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v9 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v12;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

void IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(uint64_t a1, uint64_t **a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[4]);
  v11 = *(_DWORD *)a2[5];
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 >= v13 + 4)
  {
    v16 = *(char **)(a1 + 528);
    goto LABEL_5;
  }
  v22 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v14);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1976F0860);
  }
  v16 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v16;
  *(_QWORD *)(a1 + 552) = v23;
  v12 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

void WebKit::WebExtensionAPIWebNavigation::getAllFrames(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  NSString *v10;
  long double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  long double v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v29[2];
  long double __y[2];
  IPC::Encoder *v31;
  const __CFString *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((_MergedGlobals_117 & 1) == 0)
  {
    v34[0] = CFSTR("tabId");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 1);
    qword_1ECE731B8 = objc_claimAutoreleasedReturnValue();
    _MergedGlobals_117 = 1;
  }
  if (byte_1ECE731B1 == 1)
  {
    v8 = (void *)qword_1ECE731C0;
  }
  else
  {
    v32 = CFSTR("tabId");
    v33 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE731C0 = (uint64_t)v8;
    byte_1ECE731B1 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE731B8, v8, a4))
    goto LABEL_17;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("tabId"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValue");
  v12 = v11;
  if (v11 == -1.0)
  {
    v13 = -256;
    LOBYTE(v14) = -2;
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v15 = 0;
  if ((v11 < 0.0 || ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&v11 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v14) = 0;
    v13 = 0;
  }
  else
  {
    LOBYTE(v14) = 0;
    v13 = 0;
    if (v11 < 1.84467441e19)
    {
      if (modf(v11, __y) == 0.0)
      {
        v14 = (unint64_t)v12;
        if ((unint64_t)v12 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v13 = (unint64_t)v12 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v14) = -2;
          v13 = -256;
        }
        goto LABEL_8;
      }
      v15 = 0;
      LOBYTE(v14) = 0;
      v13 = 0;
    }
  }
LABEL_9:
  v29[0] = v13 & 0xFFFFFFFFFFFFFF00 | v14;
  v29[1] = v15;
  if (!WebKit::isValid(v29[0], v15, a4, v10))
  {
LABEL_16:

LABEL_17:
    return;
  }
  {
    v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    if (v15)
    {
LABEL_12:
      ++*(_DWORD *)(a1 + 48);
      v17 = *a3;
      *a3 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v19 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v19 = 1685;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v19 + 528) = v19 + 16;
      *(_QWORD *)(v19 + 536) = v19 + 16;
      *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v19 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
      v31 = (IPC::Encoder *)v19;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v19, v29);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v20 = &off_1E34F6600;
      v20[1] = a1;
      v20[2] = v17;
      v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      *(_QWORD *)&__y[0] = v20;
      *(_QWORD *)&__y[1] = v21;
      (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v16 + 2) + 40))((_QWORD *)v16 + 2, &v31, __y, 0);
      v23 = __y[0];
      __y[0] = 0.0;
      if (v23 != 0.0)
        (*(void (**)(long double))(**(_QWORD **)&v23 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v23));
      v24 = v31;
      v31 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v22);
        WTF::fastFree(v25, v26);
      }
      goto LABEL_16;
    }
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v16);
    if (v15)
      goto LABEL_12;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976F0BD4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;
  WTF *v17;
  void *v18;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigation::getFrame(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  NSString *v10;
  long double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  NSString *v17;
  long double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v24;
  uint64_t v25;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  long double v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  BOOL v38;
  double v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42[2];
  long double __y[2];
  IPC::Encoder *v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE731B2 & 1) == 0)
  {
    v47[0] = CFSTR("tabId");
    v47[1] = CFSTR("frameId");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v47, 2);
    qword_1ECE731C8 = objc_claimAutoreleasedReturnValue();
    byte_1ECE731B2 = 1;
  }
  if (byte_1ECE731B3 == 1)
  {
    v8 = (void *)qword_1ECE731D0;
  }
  else
  {
    v45[0] = CFSTR("tabId");
    v45[1] = CFSTR("frameId");
    v46[0] = objc_opt_class();
    v46[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE731D0 = (uint64_t)v8;
    byte_1ECE731B3 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE731C8, v8, a4))
    goto LABEL_54;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("tabId"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValue");
  v12 = v11;
  if (v11 == -1.0)
  {
    v13 = -256;
    LOBYTE(v14) = -2;
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v15 = 0;
  if ((v11 < 0.0 || ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&v11 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v14) = 0;
    v13 = 0;
  }
  else
  {
    LOBYTE(v14) = 0;
    v13 = 0;
    if (v11 < 1.84467441e19)
    {
      if (modf(v11, __y) == 0.0)
      {
        v14 = (unint64_t)v12;
        if ((unint64_t)v12 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v13 = (unint64_t)v12 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v14) = -2;
          v13 = -256;
        }
        goto LABEL_8;
      }
      v15 = 0;
      LOBYTE(v14) = 0;
      v13 = 0;
    }
  }
LABEL_9:
  v42[0] = v13 & 0xFFFFFFFFFFFFFF00 | v14;
  v42[1] = v15;
  if (!WebKit::isValid(v42[0], v15, a4, v10))
  {
LABEL_53:

LABEL_54:
    return;
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("frameId"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "doubleValue");
  v19 = v18;
  if (v18 == 0.0)
  {
    v20 = -256;
    v21 = 254;
LABEL_24:
    v24 = 1;
    goto LABEL_25;
  }
  if (v18 == -1.0)
  {
    v20 = -256;
    v21 = 253;
    goto LABEL_24;
  }
  v38 = (v18 < 0.0 || ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
     && (unint64_t)(*(_QWORD *)&v18 - 1) > 0xFFFFFFFFFFFFELL;
  if (v38 || v18 >= 1.84467441e19)
    goto LABEL_51;
  v39 = modf(v18, __y);
  v24 = v39 == 0.0;
  if (v39 == 0.0)
    v20 = (unint64_t)v19 & 0xFFFFFFFFFFFFFF00;
  else
    v20 = 0;
  if (v39 == 0.0)
    v21 = (unint64_t)v19;
  else
    v21 = 0;
LABEL_25:
  v25 = v20 | v21;
  v40 = v25;
  v41 = v24;
  if (!v24 || v25 == -3)
  {
LABEL_51:
    WebKit::toErrorString(0, CFSTR("frameId"), CFSTR("it is not a frame identifier"), v17, v40, v41);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_52:

    goto LABEL_53;
  }
  {
    v26 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    if (v15)
    {
LABEL_29:
      ++*(_DWORD *)(a1 + 48);
      v27 = *a3;
      *a3 = 0;
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v29 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v29 = 1686;
      *(_QWORD *)(v29 + 8) = v28;
      *(_QWORD *)(v29 + 528) = v29 + 16;
      *(_QWORD *)(v29 + 536) = v29 + 16;
      *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v29 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
      v44 = (IPC::Encoder *)v29;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v29, v42);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v29, &v40);
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v30 = &off_1E34F6648;
      v30[1] = a1;
      v30[2] = v27;
      v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      *(_QWORD *)&__y[0] = v30;
      *(_QWORD *)&__y[1] = v31;
      (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v26 + 2) + 40))((_QWORD *)v26 + 2, &v44, __y, 0);
      v33 = __y[0];
      __y[0] = 0.0;
      if (v33 != 0.0)
        (*(void (**)(long double))(**(_QWORD **)&v33 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v33));
      v34 = v44;
      v44 = 0;
      if (v34)
      {
        IPC::Encoder::~Encoder(v34, v32);
        WTF::fastFree(v35, v36);
      }
      goto LABEL_52;
    }
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v26);
    if (v15)
      goto LABEL_29;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976F116C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  void *v15;
  void *v16;
  void *v17;
  WTF *v19;
  void *v20;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a15)
  {
    IPC::Encoder::~Encoder(a15, a2);
    WTF::fastFree(v19, v20);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 41;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIWebNavigationEvent::WebExtensionAPIWebNavigationEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976F136C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onCommitted(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 42;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 44;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onCompleted(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v6 = 43;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    v6 = 45;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 11);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent(uint64_t a1, char a2, unint64_t a3, unint64_t a4, unint64_t a5, _QWORD *a6, double a7)
{
  __CFString *v13;
  double v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  void *v20;
  WebCore *v21;
  WebCore *v22;
  WebCore *v23;
  id v24;
  char v25;
  _QWORD v26[5];
  _QWORD v27[6];

  v27[5] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v26[0] = CFSTR("url");
  if (*a6)
    v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  v27[0] = v13;
  v26[1] = CFSTR("tabId");
  v14 = (double)a3;
  if (a3 == -2)
    v14 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[1] = v15;
  v26[2] = CFSTR("frameId");
  if (a4 == -3)
  {
    v16 = -1.0;
  }
  else
  {
    v16 = 0.0;
    if (a4 != -2)
      v16 = (double)a4;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27[2] = v17;
  v26[3] = CFSTR("parentFrameId");
  if (a5 == -3)
  {
    v18 = -1.0;
  }
  else
  {
    v18 = 0.0;
    if (a5 != -2)
      v18 = (double)a5;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v27[3] = v19;
  v26[4] = CFSTR("timeStamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", floor(a7 * 1000.0));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v27[4] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 5);
  v24 = (id)objc_claimAutoreleasedReturnValue();

  v21 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v21 = off_1E34F66E8;
  *((_QWORD *)v21 + 1) = &v25;
  *((_QWORD *)v21 + 2) = &v24;
  *((_QWORD *)v21 + 3) = a6;
  v23 = v21;
  WebCore::mainThreadNormalWorld(v21);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v23);
  v22 = v23;
  v23 = 0;
  if (v22)
    (*(void (**)(WebCore *))(*(_QWORD *)v22 + 8))(v22);

}

void sub_1976F182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6600;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6600;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2, __n128 a3)
{
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  __n128 v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  int v62;
  char v63;
  _QWORD v64[2];
  int v65;
  char v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  char v69;
  char v70;
  __n128 v71;
  char v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;

  if (!a2 || (v5 = (WTF::StringImpl *)*a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v6 = a2[1];
  if (v6 <= a2[2] - (uint64_t)v5)
  {
    v29 = 0;
    v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v29 = 0;
        v54 = *a2;
        v55 = a2[1];
        v56 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v30 = 0;
        if (v56 && v55)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
          v30 = *a2;
          v29 = a2[1];
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
    goto LABEL_49;
  }
  v7 = (unsigned __int8 *)a2[2];
  v8 = v7 + 1;
  a2[2] = (uint64_t)(v7 + 1);
  v9 = *v7;
  if (v9 >= 2)
  {
    v29 = v6;
    v30 = (uint64_t)v5;
LABEL_49:
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32 && v29)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v29);
    goto LABEL_50;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v67);
    if ((_BYTE)v68)
    {
      v64[0] = v67;
      v25 = 1;
      v65 = 1;
    }
    else
    {
      v25 = 0;
      LOBYTE(v64[0]) = 0;
    }
    v66 = v25;
    v28 = 1;
    if (!v25)
      goto LABEL_50;
    goto LABEL_41;
  }
  v10 = ((unint64_t)(v8 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v6 >= v10 && v6 - v10 > 7)
  {
    v12 = (unint64_t *)((char *)v5 + v10);
    v13 = *v12;
    a2[2] = (uint64_t)(v12 + 1);
    v74 = 0;
    v75 = 0;
    if (v13 >= 0x3333)
    {
      do
      {
        IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)&v67, a2, a3);
        v43 = v73;
        if (v73)
        {
          v44 = HIDWORD(v75);
          if (HIDWORD(v75) == (_DWORD)v75)
          {
            WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>((uint64_t)&v74, (unint64_t)&v67);
          }
          else
          {
            v45 = v74;
            v46 = (_BYTE *)(v74 + 80 * HIDWORD(v75));
            *v46 = v67;
            std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v46 + 8, (uint64_t)&v68);
            v47 = v45 + 80 * v44;
            v48 = v72;
            a3 = v71;
            *(__n128 *)(v47 + 56) = v71;
            *(_BYTE *)(v47 + 72) = v48;
            ++HIDWORD(v75);
          }
        }
        if (v73)
          v49 = v70 == 0;
        else
          v49 = 1;
        if (!v49)
        {
          v50 = v68;
          v68 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v5);
            else
              *(_DWORD *)v50 -= 2;
          }
        }
        if (!v43)
        {
LABEL_29:
          v69 = 0;
          WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v5);
          goto LABEL_55;
        }
        --v13;
      }
      while (v13);
      v69 = 0;
      v51 = HIDWORD(v75);
      v23 = (WTF *)v74;
      if (v75 > HIDWORD(v75))
      {
        v52 = (WTF *)v74;
        if (HIDWORD(v75))
        {
          if (HIDWORD(v75) >= 0x3333334)
          {
            __break(0xC471u);
            return;
          }
          v53 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v75)));
          LODWORD(v75) = 80 * v51 / 0x50;
          v74 = v53;
          v52 = v23;
          if ((WTF *)v53 != v23)
          {
            WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move((uint64_t)v23, (uint64_t)v23 + 80 * v51, v53);
            v52 = (WTF *)v74;
          }
        }
        if (v23)
        {
          if (v52 == v23)
          {
            v74 = 0;
            LODWORD(v75) = 0;
          }
          WTF::fastFree(v23, v5);
LABEL_31:
          v23 = (WTF *)v74;
        }
        else
        {
          v23 = v52;
        }
      }
      v24 = v75;
    }
    else
    {
      if (v13)
      {
        LODWORD(v75) = 80 * (int)v13 / 0x50u;
        v74 = WTF::fastMalloc((WTF *)(80 * v13));
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)&v67, a2, v14);
          v15 = v73;
          if (v73)
          {
            v16 = HIDWORD(v75);
            if (HIDWORD(v75) == (_DWORD)v75)
            {
              WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>((uint64_t)&v74, (unint64_t)&v67);
            }
            else
            {
              v17 = v74;
              v18 = (_BYTE *)(v74 + 80 * HIDWORD(v75));
              *v18 = v67;
              std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v18 + 8, (uint64_t)&v68);
              v19 = v17 + 80 * v16;
              v20 = v72;
              v14 = v71;
              *(__n128 *)(v19 + 56) = v71;
              *(_BYTE *)(v19 + 72) = v20;
              ++HIDWORD(v75);
            }
          }
          if (v73)
            v21 = v70 == 0;
          else
            v21 = 1;
          if (!v21)
          {
            v22 = v68;
            v68 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
              {
                WTF::StringImpl::destroy(v22, v5);
                if (!v15)
                  goto LABEL_29;
                goto LABEL_26;
              }
              *(_DWORD *)v22 -= 2;
            }
          }
          if (!v15)
            goto LABEL_29;
LABEL_26:
          if (!--v13)
          {
            v69 = 0;
            goto LABEL_31;
          }
        }
      }
      v23 = 0;
      v24 = 0;
    }
    v60 = v24;
    v74 = 0;
    v75 = 0;
    v26 = 1;
    v69 = 1;
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v5);
    v67 = 0;
    v68 = 0;
    v64[0] = v23;
    v64[1] = v60;
    v65 = 0;
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v27);
    goto LABEL_37;
  }
  *a2 = 0;
  a2[1] = 0;
  v39 = a2[3];
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    v57 = *a2;
    v58 = a2[1];
    v59 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v59)
    {
      if (v58)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57);
    }
  }
LABEL_55:
  v40 = *a2;
  v41 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v42 = a2[3];
  if (v42 && v41)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
  v26 = 0;
  LOBYTE(v64[0]) = 0;
LABEL_37:
  v28 = 0;
  v66 = v26;
  if (!v26)
  {
LABEL_50:
    v33 = *a2;
    v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35 && v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
    v61[0] = 0;
    v63 = 0;
LABEL_52:
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (!v38 || !v37 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36), !v63))
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
      return;
    }
    goto LABEL_44;
  }
LABEL_41:
  v61[0] = 0;
  v62 = -1;
  ((void (*)(uint64_t *, _BYTE *, _QWORD *))off_1E34F6628[v28])(&v67, v61, v64);
  v62 = v28;
  v63 = 1;
  if (v66)
  {
    if (v65 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *))off_1E34F6618[v65])(&v67, v64);
      if (!v63)
        goto LABEL_52;
    }
  }
LABEL_44:
  WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v61);
  if (v63)
  {
    if (v62 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34F6618[v62])(&v67, v61);
  }
}

void sub_1976F1F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a16)
  {
    if (a14 != -1)
      ((void (*)(__int16 *, char *))off_1E34F6618[a14])(&a26, &a12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F6618[v2])(&v3, v1);
}

void sub_1976F2090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F6618[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::decode(a2, a1, a3);
  if (!*(_BYTE *)(a1 + 80))
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1976F211C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 80))
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2 + 8, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = *(_BYTE *)v3;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v4 + 8), v3 + 8);
  v5 = *(_OWORD *)(v3 + 56);
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(v3 + 72);
  *(_OWORD *)(v4 + 56) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1976F2304);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12);
    v5 = 80 * a2;
    v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  if (result != a2)
  {
    v4 = a3 + 8;
    v5 = result + 8;
    do
    {
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v5 - 8);
      std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)v4, v5);
      v6 = *(_OWORD *)(v5 + 48);
      *(_BYTE *)(v4 + 64) = *(_BYTE *)(v5 + 64);
      *(_OWORD *)(v4 + 48) = v6;
      result = std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v5, v7);
      v4 += 80;
      v8 = v5 + 72;
      v5 += 80;
    }
    while (v8 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    v5 = *(_QWORD *)a1 + 8;
    do
    {
      v5 = std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v5, a2) + 80;
      v4 -= 80;
    }
    while (v4);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v4;
  __CFString *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  __int128 v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  void *v26;
  NSMutableArray *v27;
  objc_object *v28;
  objc_object *v29;
  CFTypeRef v30;
  id v31;
  WTF::StringImpl *v32;
  __CFString *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  CFTypeRef cf;
  unsigned __int8 v38[8];
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  char v44;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)a2)
        v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v5 = &stru_1E351F1B8;
      v33 = v5;
      WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);

      return;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_34:
    __break(0xC471u);
    return;
  }
  v6 = *(unsigned int *)(a2 + 12);
  v34 = 0;
  v35 = 0;
  v36 = v6;
  if ((_DWORD)v6)
  {
    if (v6 >= 0x3333334)
      goto LABEL_34;
    v7 = 80 * v6;
    v8 = WTF::fastMalloc((WTF *)(80 * v6));
    v35 = (v7 & 0xFFFFFFF0) / 0x50;
    v34 = v8;
    v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      v10 = *(_QWORD *)a2 + 80 * v9;
      v11 = v8 + 48;
      v12 = *(_QWORD *)a2 + 16;
      do
      {
        v13 = v12 - 16;
        *(_BYTE *)(v11 - 48) = *(_BYTE *)(v12 - 16);
        *(_BYTE *)(v11 - 40) = 0;
        *(_BYTE *)v11 = 0;
        if (*(_BYTE *)(v12 + 32))
        {
          v14 = *(_DWORD **)(v12 - 8);
          if (v14)
            *v14 += 2;
          *(_QWORD *)(v11 - 40) = v14;
          v15 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(v11 - 32) = *(_OWORD *)v12;
          *(_OWORD *)(v11 - 16) = v15;
          *(_BYTE *)v11 = 1;
        }
        v16 = *(_OWORD *)(v12 + 40);
        *(_BYTE *)(v11 + 24) = *(_BYTE *)(v12 + 56);
        *(_OWORD *)(v11 + 8) = v16;
        v11 += 80;
        v12 += 80;
      }
      while (v13 + 80 != v10);
    }
  }
  v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v36);
  v18 = v17;
  cf = v17;
  if (v17)
    CFRetain(v17);

  if (v36)
  {
    v19 = v34 + 80 * v36;
    v20 = v34 + 16;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v21 = (WTF *)objc_claimAutoreleasedReturnValue();
      v22 = v20 - 16;
      v38[0] = *(_BYTE *)(v20 - 16);
      LOBYTE(v39) = 0;
      v42 = 0;
      if (*(_BYTE *)(v20 + 32))
      {
        v23 = *(WTF::StringImpl **)(v20 - 8);
        if (v23)
          *(_DWORD *)v23 += 2;
        v39 = v23;
        v24 = *(_OWORD *)(v20 + 16);
        v40 = *(_OWORD *)v20;
        v41 = v24;
        v42 = 1;
      }
      v43 = *(_OWORD *)(v20 + 40);
      v44 = *(_BYTE *)(v20 + 56);
      WebKit::toWebAPI(v38);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v42 && v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v25);
        else
          *(_DWORD *)v39 -= 2;
      }
      v27 = v26;
      WTF::addUnlessNil(v21, v27, v28);

      v20 += 80;
    }
    while (v22 + 80 != v19);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v29 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  v31 = WebKit::WebExtensionCallbackHandler::call(a1, v29);

  WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v32);
}

void sub_1976F2734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, CFTypeRef cf, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  WTF::StringImpl *v21;

  WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(unsigned __int8 *a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  double v5;
  void *v6;
  __CFString *v7;
  int v8;
  unint64_t v9;
  double v10;
  void *v11;
  void *v12;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("errorOccurred"));

  v4 = *((_QWORD *)a1 + 7);
  if (v4 == -3)
  {
    v5 = -1.0;
  }
  else
  {
    v5 = 0.0;
    if (v4 != -2)
      v5 = (double)v4;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("parentFrameId"));

  if (a1[48] && *((_QWORD *)a1 + 1))
  {
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v7 = &stru_1E351F1B8;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("url"));
  if (v8)

  if (a1[72])
  {
    v9 = *((_QWORD *)a1 + 8);
    if (v9 == -3)
    {
      v10 = -1.0;
    }
    else
    {
      v10 = 0.0;
      if (v9 != -2)
        v10 = (double)v9;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("frameId"));

  }
  v12 = (void *)objc_msgSend(v2, "copy");

  return v12;
}

void sub_1976F2944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6648;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6648;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  _BYTE v46[8];
  WTF::StringImpl *v47;
  char v48;
  __int128 v49;
  char v50;
  char v51;
  _BYTE v52[8];
  _BYTE v53[88];
  int v54;
  char v55;
  _BYTE v56[8];
  _QWORD v57[11];
  int v58;
  unsigned __int8 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v5 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v12 = 0;
        v33 = *a2;
        v34 = a2[1];
        v35 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v13 = 0;
        if (v35 && v34)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
          v13 = *a2;
          v12 = a2[1];
        }
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_25;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  if (*v7 >= 2u)
  {
    v12 = v6;
    v13 = v5;
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
    v56[0] = 0;
    v59 = 0;
LABEL_27:
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (!v18 || !v17 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16), !v59))
    {
      v52[0] = 0;
      v55 = 0;
LABEL_29:
      v19 = *a2;
      v20 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19), !v55))
      {
        IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
        return;
      }
      goto LABEL_49;
    }
    goto LABEL_43;
  }
  if (!*v7)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v39);
    v10 = v40;
    if ((_BYTE)v40)
    {
      v57[0] = v39;
      v10 = 1;
      v58 = 1;
    }
    else
    {
      v56[0] = 0;
    }
    v59 = v10;
    if (v10)
      goto LABEL_43;
    goto LABEL_27;
  }
  if (v6 <= (unint64_t)&v7[-v5 + 1])
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      v22 = 0;
      v36 = *a2;
      v37 = a2[1];
      v38 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v23 = 0;
      if (v38)
      {
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
          v23 = *a2;
          v22 = a2[1];
        }
      }
    }
    goto LABEL_32;
  }
  a2[2] = (uint64_t)(v7 + 2);
  v8 = v7[1];
  if (v8 >= 2)
  {
    v22 = v6;
    v23 = v5;
LABEL_32:
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25 && v22)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
    goto LABEL_33;
  }
  if (!v8)
  {
    v46[0] = 0;
    v51 = 0;
    std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)&v39, (uint64_t)v46);
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)v46, a2, a3);
  if (!v51)
  {
LABEL_33:
    LOBYTE(v39) = 0;
    v45 = 0;
    goto LABEL_34;
  }
  LOBYTE(v39) = v46[0];
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v40, (uint64_t)&v47);
  v42 = v49;
  v43 = v50;
  v44 = 1;
LABEL_15:
  v45 = 1;
  if (v51)
  {
    if (v48)
    {
      v11 = v47;
      v47 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
LABEL_34:
  if (!v45)
  {
    v30 = *a2;
    v31 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (!v32 || !v31 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30), !v45))
    {
      v56[0] = 0;
      v59 = 0;
      goto LABEL_27;
    }
  }
  std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)v57, (uint64_t)&v39);
  v58 = 0;
  v27 = 1;
  v59 = 1;
  if (v45)
  {
    if (v44)
    {
      if (v41)
      {
        v28 = v40;
        v40 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 != 2)
          {
            *(_DWORD *)v28 -= 2;
            goto LABEL_43;
          }
          WTF::StringImpl::destroy(v28, v26);
          v27 = v59;
        }
      }
    }
  }
  if (!v27)
    goto LABEL_27;
LABEL_43:
  v53[0] = 0;
  v54 = -1;
  v29 = v58;
  if (v58 == -1)
  {
    v55 = 1;
    goto LABEL_49;
  }
  ((void (*)(uint64_t *, _BYTE *, _QWORD *))off_1E34F6670[v58])(&v39, v53, v57);
  v54 = v29;
  v55 = 1;
  if (v59)
  {
    if (v58 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *))off_1E34F6660[v58])(&v39, v57);
      if (!v55)
        goto LABEL_29;
    }
  }
LABEL_49:
  WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v52);
  if (v55)
  {
    if (v54 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34F6660[v54])(v56, v53);
  }
}

void sub_1976F2F20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54,char a55)
{
  if ((_BYTE)a21 && a19 && a15 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[88];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[80] = 0;
  v4 = 0;
  WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6660[v4])(&v1, v3);
}

void sub_1976F30F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6660[a26])(&a13, v26);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 8), a2 + 8);
    v4 = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v4;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_1976F318C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v2 + 80))
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;

  if (*((_BYTE *)a2 + 80))
    return std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  id v8;
  WTF::StringImpl *v9;
  _Unwind_Exception *v10;
  id v11;
  WTF::StringImpl *v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  char v19;

  v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 != 1)
    {
      v10 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v17 && v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      _Unwind_Resume(v10);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (*(_BYTE *)(a2 + 88))
    {
      v13[0] = *(_BYTE *)(a2 + 8);
      LOBYTE(v14) = 0;
      v17 = 0;
      if (*(_BYTE *)(a2 + 56))
      {
        v5 = *(WTF::StringImpl **)(a2 + 16);
        if (v5)
          *(_DWORD *)v5 += 2;
        v14 = v5;
        v6 = *(_OWORD *)(a2 + 40);
        v15 = *(_OWORD *)(a2 + 24);
        v16 = v6;
        v17 = 1;
      }
      v18 = *(_OWORD *)(a2 + 64);
      v19 = *(_BYTE *)(a2 + 80);
      WebKit::toWebAPI(v13);
      v7 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();
      if (v17 && v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          v12 = v7;
          WTF::StringImpl::destroy(v14, v7);
          v7 = v12;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v7 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();
    }
    v11 = v7;
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, (objc_object *)v7);
  }

}

WTF::StringImpl **WebKit::WebExtensionAPIWebNavigationEvent::WebExtensionAPIWebNavigationEvent(WTF::StringImpl **a1, const WebKit::WebExtensionAPIObject *a2, int a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(_QWORD *)v6 = off_1E34F6690;
  *(_QWORD *)(v6 + 40) = &unk_1E34F66C0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  WebKit::toAPIString(a3);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, (const WTF::String *)&v10, a2);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

void sub_1976F3428(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebKit::WebExtensionAPIObject *v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(WebKit::WebExtensionAPIWebNavigationEvent *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34F6690;
  *((_QWORD *)this + 5) = &unk_1E34F66C0;
  WebKit::WebExtensionAPIWebNavigationEvent::removeAllListeners((uint64_t)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(WebKit::WebExtensionAPIWebNavigationEvent *this)
{
  WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent((WebKit::WebExtensionAPIWebNavigationEvent *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent((WebKit::WebExtensionAPIWebNavigationEvent *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct(*(WebKit::WebExtensionCallbackHandler **)a1, (WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  const void *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (const void *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
        CFRelease(v4);
      result = *(WebKit::WebExtensionCallbackHandler **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      v3 = (WebKit::WebExtensionCallbackHandler *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

void sub_1976F358C(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebExtensionAPIObject *v2;
  WTF::StringImpl *v4;

  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent(WebKit::WebExtensionEventListenerType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebNavigation *v3;
  WebKit::WebExtensionAPIWebNavigationEvent *v4;
  objc_object *v5;
  WebKit::WebExtensionAPIWebNavigationEvent *v6;
  objc_object *v7;
  WebKit::WebExtensionAPIWebNavigationEvent *v8;
  objc_object *v9;
  WebKit::WebExtensionAPIWebNavigationEvent *v10;
  objc_object *v11;
  WebKit::WebExtensionAPIWebNavigationEvent *v12;
  objc_object *v13;
  NSURL *v14;

  v3 = (WebKit::WebExtensionAPIWebNavigation *)WebKit::WebExtensionAPINamespace::webNavigation(this);
  switch(**(_BYTE **)(a1 + 8))
  {
    case ')':
      v4 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(v3);
      v5 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v4, v5, v14);
      goto LABEL_7;
    case '*':
      v12 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onCommitted(v3);
      v13 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v12, v13, v14);
      goto LABEL_7;
    case '+':
      v6 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onCompleted(v3);
      v7 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v6, v7, v14);
      goto LABEL_7;
    case ',':
      v8 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(v3);
      v9 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v8, v9, v14);
      goto LABEL_7;
    case '-':
      v10 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(v3);
      v11 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v10, v11, v14);
LABEL_7:

      break;
    default:
      return;
  }
}

void sub_1976F3708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIWebNavigationEvent *this, objc_object *a2, NSURL *a3)
{
  NSURL *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  id v11;
  objc_object *v12;

  v12 = a2;
  v5 = a3;
  v6 = *((unsigned int *)this + 21);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = (id *)(*((_QWORD *)this + 9) + 8);
    do
    {
      WTF::RetainPtr<NSMutableArray>::get(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (!v9 || (objc_msgSend(v9, "matchesURL:", v5) & 1) != 0)
        v11 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)*(v8 - 1), v12);

      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }

}

void sub_1976F37D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, uint64_t a5)
{
  _WKWebExtensionWebNavigationURLFilter *v9;
  _WKWebExtensionWebNavigationURLFilter *v10;
  WebKit::WebExtensionCallbackHandler *v11;
  _WKWebExtensionWebNavigationURLFilter *v12;
  _WKWebExtensionWebNavigationURLFilter *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  CFTypeRef v18;
  WebKit::WebExtensionCallbackHandler *v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  char v27;
  WebKit::WebExtensionCallbackHandler *v28;
  CFTypeRef cf;
  char *v30;
  IPC::Encoder *v31;

  v9 = a4;
  v10 = v9;
  if (!v9
    || (v9 = -[_WKWebExtensionWebNavigationURLFilter initWithDictionary:outErrorMessage:]([_WKWebExtensionWebNavigationURLFilter alloc], "initWithDictionary:outErrorMessage:", v9, a5)) != 0)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
    v11 = *a3;
    if (*a3)
      ++*(_DWORD *)v11;
    v28 = v11;
    v12 = v9;
    v13 = v12;
    cf = v12;
    if (v12)
      CFRetain(v12);

    v14 = (unsigned int *)(a1 + 72);
    v15 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 80))
    {
      v16 = (uint64_t *)WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v28);
      v17 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84));
    }
    else
    {
      v17 = (_QWORD *)(*(_QWORD *)v14 + 16 * v15);
      v16 = (uint64_t *)&v28;
    }
    std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v17, v16);
    ++*(_DWORD *)(a1 + 84);
    v18 = cf;
    cf = 0;
    if (v18)
      CFRelease(v18);
    v19 = v28;
    v28 = 0;
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    {
      v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v20);
    }
    v27 = *(_BYTE *)(a1 + 8);
    v28 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
    cf = (CFTypeRef)(a1 + 64);
    v30 = &v27;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 1610;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v31 = (IPC::Encoder *)v22;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v22, (uint64_t)&v28);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v20 + 2) + 32))((_QWORD *)v20 + 2, &v31, 0);
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v23);
      WTF::fastFree(v25, v26);
    }

  }
}

void sub_1976F39EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebKit::WebExtensionCallbackHandler *a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;

  if (cf)
    CFRelease(cf);
  if (a11)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a11);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  unint64_t v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler *v6;
  unsigned int v8;
  uint64_t v9;
  WebKit::WebExtensionCallbackHandler *v10;
  WebKit::WebExtensionCallbackHandler *v11;
  void *v12;
  void *v13;
  WebKit::WebExtensionCallbackHandler *v14;
  const void *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  uint64_t *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  char v25;
  _QWORD v26[4];
  IPC::Encoder *v27;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 84);
  v6 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 72);
    v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
    v11 = v10;
    do
    {
      WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 == v13)
      {
        v14 = (WebKit::WebExtensionCallbackHandler *)v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84)))
        {
          if ((WebKit::WebExtensionCallbackHandler *)v4 == v10)
          {
            v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, (uint64_t *)v4, v11);
            v14 = (WebKit::WebExtensionCallbackHandler *)((char *)v11 + v9 - (_QWORD)v10);
          }
        }
        v15 = *(const void **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v15)
          CFRelease(v15);
        v16 = *(WebKit::WebExtensionCallbackHandler **)v4;
        *(_QWORD *)v4 = 0;
        if (v16)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
        v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16);
        ++v8;
        v11 = v14;
      }
      v4 += 16;
      v9 += 16;
    }
    while (v4 < (unint64_t)v6);
    v4 = *(_QWORD *)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    v6 = v11;
  }
  else
  {
    v8 = 0;
    v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  }
  v17 = (uint64_t *)(v4 + 16 * v5);
  if (v10 != (WebKit::WebExtensionCallbackHandler *)v17)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, v17, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v25 = *(_BYTE *)(a1 + 8);
    v26[0] = a1 + 56;
    v26[1] = a1 + 64;
    v26[2] = &v25;
    v26[3] = v8;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 1642;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v27 = (IPC::Encoder *)v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v26);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v18 + 2) + 32))((_QWORD *)v18 + 2, &v27, 0);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
}

void sub_1976F3C94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWebNavigationEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  _BOOL8 result;

  if (!*(_DWORD *)(a1 + 84))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)(a1 + 72)
                                                                                                  + v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    result = v6 == v7;
    if (v6 == v7)
      break;
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1976F3D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigationEvent::removeAllListeners(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  IPC::Encoder *v13;

  v1 = *(_DWORD *)(this + 84);
  if (v1)
  {
    v2 = this;
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
      v1 = *(_DWORD *)(v2 + 84);
    }
    v11 = *(_BYTE *)(v2 + 8);
    v12[0] = v2 + 56;
    v12[1] = v2 + 64;
    v12[2] = &v11;
    v12[3] = v1;
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 24);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 1642;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v13 = (IPC::Encoder *)v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v12);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v3 + 2) + 32))((_QWORD *)v3 + 2, &v13, 0);
    v7 = v2 + 72;
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1976F3E84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  v4 = (void *)a2[1];
  a2[1] = 0;
  v5 = v4;

  a1[1] = v5;
  return a1;
}

unint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WebKit::WebExtensionCallbackHandler *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WebKit::WebExtensionCallbackHandler *result, unint64_t a2)
{
  int v2;
  WebKit::WebExtensionCallbackHandler *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1976F4018);
    }
    v3 = result;
    v4 = *(WebKit::WebExtensionCallbackHandler **)result;
    v5 = (uint64_t *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(WebKit::WebExtensionCallbackHandler *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  const void *v6;

  if (result != (WebKit::WebExtensionCallbackHandler *)a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](a3, v5);
      v6 = (const void *)v5[1];
      v5[1] = 0;
      if (v6)
        CFRelease(v6);
      result = (WebKit::WebExtensionCallbackHandler *)*v5;
      *v5 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(WebKit::WebExtensionCallbackHandler *result, uint64_t *a2, WebKit::WebExtensionCallbackHandler *a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  const void *v6;
  BOOL v7;

  v3 = (uint64_t *)result;
  if (result > a3)
    return WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(result, a2, a3);
  if (a2 != (uint64_t *)result)
  {
    v4 = (_QWORD *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF0) - 16);
    v5 = a2 - 2;
    do
    {
      std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v4, v5);
      v6 = (const void *)v5[1];
      v5[1] = 0;
      if (v6)
        CFRelease(v6);
      result = (WebKit::WebExtensionCallbackHandler *)*v5;
      *v5 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      v4 -= 2;
      v7 = v5 == v3;
      v5 -= 2;
    }
    while (!v7);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WebKit::WebExtensionCallbackHandler *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct((WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)result + 16 * a2), (WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WebKit::WebExtensionCallbackHandler **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WebKit::WebExtensionCallbackHandler *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(v5, (uint64_t *)v5 + 2 * v4, (_QWORD *)result);
    }
    if (v5)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

BOOL WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed(WebKit::WebExtensionAPIWebPageNamespace *this, const char **a2, WebKit::WebPage *a3)
{
  BOOL v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (*a2)
    v4 = strcmp(*a2, "test") == 0;
  else
    v4 = "test" == 0;
  v5 = v4;
  v6 = 0;
  if (a3 && v5)
  {
    v7 = *((_QWORD *)a3 + 79);
    if (v7)
    {
      v9 = *(_DWORD *)(v7 + 16);
      v8 = v7 + 16;
      *(_DWORD *)v8 = v9 + 1;
      v6 = *(_BYTE *)(v8 + 16) != 0;
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)v8);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t WebKit::WebExtensionAPIWebPageNamespace::runtime(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v3 = *((_BYTE *)this + 8);
    v4 = WTF::fastMalloc((WTF *)0x40);
    *(_BYTE *)(v4 + 8) = v3;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 48) = 1;
    *(_BYTE *)(v4 + 52) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)v4 = off_1E34F6770;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = &unk_1E34F67A8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v11;
    WTF::String::operator=((WTF::StringImpl **)(v4 + 32), (WTF::StringImpl *)&v10);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v4;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
        v4 = *((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)(v7 + 48);
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebExtensionAPIObject::setPropertyPath((WTF::StringImpl **)v4, (const WTF::String *)&v11, this);
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

void sub_1976F43A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t `covariant return thunk to'WebKit::WebExtensionAPIWebPageNamespace::runtime(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  return WebKit::WebExtensionAPIWebPageNamespace::runtime(this) + 40;
}

uint64_t WebKit::WebExtensionAPIWebPageNamespace::test(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPIWebPageNamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPIWebPageNamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPITest::WebExtensionAPITest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976F451C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageNamespace::~WebExtensionAPIWebPageNamespace(WebKit::WebExtensionAPIWebPageNamespace *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34F6710;
  *((_QWORD *)this + 5) = &unk_1E34F6748;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34F6710;
  *((_QWORD *)this + 5) = &unk_1E34F6748;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebPageNamespace::~WebExtensionAPIWebPageNamespace(WebKit::WebExtensionAPIWebPageNamespace *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 5) = off_1E34F6710;
  v3 = (WebKit::WebExtensionAPIWebPageNamespace *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F6748;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 5) = off_1E34F6710;
  v3 = (WebKit::WebExtensionAPIWebPageNamespace *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F6748;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v6, v7);
}

void WebKit::WebExtensionAPIWebPageRuntime::~WebExtensionAPIWebPageRuntime(WebKit::WebExtensionAPIWebPageRuntime *this, WTF::StringImpl *a2)
{
  const void *v3;

  *((_QWORD *)this + 5) = off_1E34F5600;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *((_QWORD *)this + 5) = off_1E34F5600;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t `covariant return thunk to'WebKit::WebExtensionAPIWebPageRuntime::runtime(WebKit::WebExtensionAPIWebPageRuntime *this)
{
  return (uint64_t)this + 40;
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebPageRuntime::~WebExtensionAPIWebPageRuntime(WebKit::WebExtensionAPIWebPageRuntime *this, WTF::StringImpl *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34F5600;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIWebPageRuntime *)((char *)this - 40), a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34F5600;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIWebPageRuntime *)((char *)this - 40), a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeRequest(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 48;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIWebRequestEvent::WebExtensionAPIWebRequestEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976F496C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 49;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onSendHeaders(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 54;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onHeadersReceived(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v6 = 52;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onAuthRequired(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    v6 = 46;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 11);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    v6 = 47;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 12);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onResponseStarted(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v6 = 53;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 13);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 13);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onCompleted(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v6 = 50;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 14);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 14);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onErrorOccurred(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v6 = 51;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 15);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 15);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceRequestBase *a4, WebKit *this)
{
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  WebCore *v26;
  uint64_t v27;
  WebKit *v28;
  const WebCore::HTTPHeaderMap *v29;
  void *v30;
  WebCore *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v40;
  uint64_t v41;
  const WebKit::ResourceLoadInfo *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[18];

  v47[16] = *MEMORY[0x1E0C80C00];
  v41 = a3;
  v42 = a2;
  WebKit::webRequestDetailsForResourceLoad(this, a2);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v36;
  v6 = (double)(unint64_t)a2;
  if (a2 == (const WebKit::ResourceLoadInfo *)-2)
    v6 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setObject:forKeyedSubscript:", v7, CFSTR("tabId"));

  WebCore::ResourceRequest::nsURLRequest();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "HTTPBody");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v33 = v9;
    v35 = v9;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x1E0CB3998];
    v12 = (void *)MEMORY[0x1E0CB3940];
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v35, 4);
    objc_msgSend(v12, "stringWithFormat:", CFSTR("https://example.org/?%@"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "componentsWithString:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v34 = v15;
    objc_msgSend(v15, "queryItems");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v44 != v18)
            objc_enumerationMutation(v16);
          v20 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          objc_msgSend(v20, "name");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "objectForKeyedSubscript:", v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v22)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v23 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "name");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "setObject:forKeyedSubscript:", v23, v24);

            v22 = (void *)v23;
          }
          objc_msgSend(v20, "value");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "addObject:", v25);

        }
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      }
      while (v17);
    }

    objc_msgSend(v36, "setObject:forKeyedSubscript:", v10, CFSTR("requestBody"));
    v9 = v33;
  }

  v26 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = off_1E34F6828;
  *((_QWORD *)v26 + 1) = &v40;
  *((_QWORD *)v26 + 2) = &v42;
  *((_QWORD *)v26 + 3) = &v41;
  *((_QWORD *)v26 + 4) = this;
  v47[0] = v26;
  WebCore::mainThreadNormalWorld(v26);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v47);
  v27 = v47[0];
  v47[0] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  objc_msgSend(v40, "removeObjectForKey:", CFSTR("requestBody"));
  v28 = (WebKit *)WebCore::ResourceRequestBase::httpHeaderFields(a4);
  WebKit::convertHeaderFieldsToWebExtensionFormat(v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "setObject:forKeyedSubscript:", v30, CFSTR("requestHeaders"));

  v31 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v31 = off_1E34F6850;
  *((_QWORD *)v31 + 1) = &v40;
  *((_QWORD *)v31 + 2) = &v42;
  *((_QWORD *)v31 + 3) = &v41;
  *((_QWORD *)v31 + 4) = this;
  v47[0] = v31;
  WebCore::mainThreadNormalWorld(v31);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v47);
  v32 = v47[0];
  v47[0] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);

}

void sub_1976F5248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

id WebKit::webRequestDetailsForResourceLoad(WebKit *this, const WebKit::ResourceLoadInfo *a2)
{
  void *v2;
  double v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  _Unwind_Exception *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x1E0C80C00];
  v19 = CFSTR("frameId");
  v4 = 0.0;
  if (*((_BYTE *)this + 48))
  {
    if (!*((_BYTE *)this + 24))
    {
      v18 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    v5 = *((_QWORD *)this + 1);
    if (v5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v5 = -3;
    if (v5 == -3)
    {
      v4 = -1.0;
    }
    else if (v5 != -2)
    {
      v4 = (double)v5;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v6;
  v20 = CFSTR("parentFrameId");
  if (*((_BYTE *)this + 48))
  {
    v7 = *((_QWORD *)this + 4);
    if (v7 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v7 = -3;
    if (v7 == -3)
    {
      v8 = -1.0;
    }
    else
    {
      v8 = 0.0;
      if (v7 != -2)
        v8 = (double)v7;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
    v9 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", -1.0);
    v9 = objc_claimAutoreleasedReturnValue();
  }
  v10 = (void *)v9;
  v24[1] = v9;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), *(_QWORD *)this, v19, v20, CFSTR("requestId"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v24[2] = v11;
  v21 = CFSTR("timeStamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", floor(*((double *)this + 13) * 1000.0));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v24[3] = v12;
  v22 = CFSTR("url");
  if (*((_QWORD *)this + 7))
    v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  v24[4] = v13;
  v23 = CFSTR("method");
  if (*((_QWORD *)this + 12))
    v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v14 = &stru_1E351F1B8;
  v24[5] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v19, 6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v15, "mutableCopy");

  return v16;
}

id WebKit::convertHeaderFieldsToWebExtensionFormat(WebKit *this, const WebCore::HTTPHeaderMap *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _QWORD v27[2];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *((_DWORD *)this + 7) + *((_DWORD *)this + 3));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v22, this, *(const CommonHeader **)this, *((const UncommonHeader **)this + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v17, this, (const CommonHeader *)(*(_QWORD *)this + 16 * *((unsigned int *)this + 3)), (const UncommonHeader *)(*((_QWORD *)this + 2) + 16 * *((unsigned int *)this + 7)));
  while (v23 != v18 || v24 != v19)
  {
    v5 = v25;
    if (v25)
      *(_DWORD *)v25 += 2;
    v6 = v26;
    if (v26)
      *(_DWORD *)v26 += 2;
    v27[0] = CFSTR("name");
    if (v5)
      v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    v28[0] = v7;
    v27[1] = CFSTR("value");
    if (v6)
      v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E351F1B8;
    v28[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v9);

    if (!v6)
      goto LABEL_15;
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
LABEL_15:
      if (!v5)
        goto LABEL_21;
      goto LABEL_18;
    }
    WTF::StringImpl::destroy(v6, v10);
    if (!v5)
      goto LABEL_21;
LABEL_18:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v10);
    else
      *(_DWORD *)v5 -= 2;
LABEL_21:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v22);
  }
  v11 = v21;
  v21 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v4);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v4);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v26;
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v4);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (void *)objc_msgSend(v3, "copy");

  return v15;
}

void sub_1976F58D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, unsigned __int8 *a5, WebCore::ResourceRequestBase *a6)
{
  WebCore *v9;
  WebCore *v10;
  __CFString *v11;
  WebCore *v12;
  WebCore *v13;
  WebCore *v14;
  id v15;
  uint64_t v16;
  const WebKit::ResourceLoadInfo *v17;

  v16 = a3;
  v17 = a2;
  WebKit::headersReceivedDetails(a5, a2, a4);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  v9 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v9 = off_1E34F6878;
  *((_QWORD *)v9 + 1) = &v15;
  *((_QWORD *)v9 + 2) = &v17;
  *((_QWORD *)v9 + 3) = &v16;
  *((_QWORD *)v9 + 4) = a5;
  v14 = v9;
  WebCore::mainThreadNormalWorld(v9);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(WebCore *))(*(_QWORD *)v10 + 8))(v10);
  if (*(_QWORD *)WebCore::ResourceRequestBase::url(a6))
    v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v11, CFSTR("redirectUrl"), v14);

  v12 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = off_1E34F68A0;
  *((_QWORD *)v12 + 1) = &v15;
  *((_QWORD *)v12 + 2) = &v17;
  *((_QWORD *)v12 + 3) = &v16;
  *((_QWORD *)v12 + 4) = a5;
  v14 = v12;
  WebCore::mainThreadNormalWorld(v12);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  v13 = v14;
  v14 = 0;
  if (v13)
    (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);

}

void sub_1976F5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id WebKit::headersReceivedDetails(unsigned __int8 *a1, const WebKit::ResourceLoadInfo *a2, WebCore::ResourceResponse *a3)
{
  void *v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  __CFHTTPMessage *HTTPResponse;
  __CFString *v12;
  WebKit *v13;
  const WebCore::HTTPHeaderMap *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v20[4];
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  WebKit::webRequestDetailsForResourceLoad((WebKit *)a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (double)(unint64_t)a2;
  if (a2 == (const WebKit::ResourceLoadInfo *)-2)
    v7 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("tabId"));

  WebCore::ResourceResponse::nsURLResponse(a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = v9;
      v20[0] = CFSTR("statusLine");
      objc_msgSend(v10, "_CFURLResponse");
      HTTPResponse = (__CFHTTPMessage *)CFURLResponseGetHTTPResponse();
      v12 = (__CFString *)CFHTTPMessageCopyResponseStatusLine(HTTPResponse);
      v21[0] = v12;
      v20[1] = CFSTR("responseHeaders");
      v13 = (WebKit *)WebCore::ResourceResponseBase::httpHeaderFields(a3);
      WebKit::convertHeaderFieldsToWebExtensionFormat(v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21[1] = v15;
      v20[2] = CFSTR("statusCode");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v10, "statusCode"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v21[2] = v16;
      v20[3] = CFSTR("fromCache");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1[112]);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v21[3] = v17;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addEntriesFromDictionary:", v18);

    }
  }

  return v6;
}

void sub_1976F5D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v5;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, id *a4, WebKit *a5)
{
  void *v9;
  void *v10;
  const WebKit::ResourceLoadInfo *v11;
  WebCore::ResourceResponse *v12;
  void *v13;
  int v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  WebCore *v26;
  WebCore *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  WebCore *v34;
  id v35;
  uint64_t v36;
  const WebKit::ResourceLoadInfo *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[3];
  _QWORD v41[5];

  v41[3] = *MEMORY[0x1E0C80C00];
  v36 = a3;
  v37 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a4 + 53);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "failureResponse");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v32 = v10;
      if (objc_msgSend(v32, "statusCode") == 401 || objc_msgSend(v32, "statusCode") == 407)
      {
        WebKit::webRequestDetailsForResourceLoad(a5, v11);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v33;
        v12 = (WebCore::ResourceResponse *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)a4);
        WebKit::headersReceivedDetails((unsigned __int8 *)a5, a2, v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "addEntriesFromDictionary:", v13);

        v40[0] = CFSTR("scheme");
        objc_msgSend(v9, "protectionSpace");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "authenticationMethod");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v31, "isEqualToString:", *MEMORY[0x1E0C92B50]);
        v15 = CFSTR("basic");
        if (v14)
          v15 = CFSTR("digest");
        v41[0] = v15;
        v40[1] = CFSTR("challenger");
        v38[0] = CFSTR("host");
        objc_msgSend(v9, "protectionSpace");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "host");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v38[1] = CFSTR("port");
        v39[0] = v29;
        v16 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v9, "protectionSpace");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "numberWithInteger:", objc_msgSend(v17, "port"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v39[1] = v18;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v41[1] = v19;
        v40[2] = CFSTR("isProxy");
        v20 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v9, "protectionSpace");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "numberWithBool:", objc_msgSend(v21, "isProxy"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v41[2] = v22;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 3);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "addEntriesFromDictionary:", v23);

        objc_msgSend(v9, "protectionSpace");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "realm");
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        if (v25)
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v25, CFSTR("realm"));

        v26 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v26 = off_1E34F68C8;
        *((_QWORD *)v26 + 1) = &v35;
        *((_QWORD *)v26 + 2) = &v37;
        *((_QWORD *)v26 + 3) = &v36;
        *((_QWORD *)v26 + 4) = a5;
        v34 = v26;
        WebCore::mainThreadNormalWorld(v26);
        WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v34);
        v27 = v34;
        v34 = 0;
        if (v27)
          (*(void (**)(WebCore *))(*(_QWORD *)v27 + 8))(v27);

      }
    }
  }

}

void sub_1976F6164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, unsigned __int8 *a5)
{
  WebCore *v7;
  WebCore *v8;
  WebCore *v9;
  id v10;
  uint64_t v11;
  const WebKit::ResourceLoadInfo *v12;

  v11 = a3;
  v12 = a2;
  WebKit::headersReceivedDetails(a5, a2, a4);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v7 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = off_1E34F68F0;
  *((_QWORD *)v7 + 1) = &v10;
  *((_QWORD *)v7 + 2) = &v12;
  *((_QWORD *)v7 + 3) = &v11;
  *((_QWORD *)v7 + 4) = a5;
  v9 = v7;
  WebCore::mainThreadNormalWorld(v7);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v9);
  v8 = v9;
  v9 = 0;
  if (v8)
    (*(void (**)(WebCore *))(*(_QWORD *)v8 + 8))(v8);

}

void sub_1976F632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, uint64_t a5, WebKit *this)
{
  void *v11;
  double v12;
  void *v13;
  void *v14;
  WebCore *v15;
  void *v16;
  WebCore *v17;
  WebCore *v18;
  WebCore *v19;
  id v20;
  uint64_t v21;
  const WebKit::ResourceLoadInfo *v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v22 = a2;
  WebKit::webRequestDetailsForResourceLoad(this, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v11;
  if (*(_BYTE *)(a5 + 60))
  {
    v23[0] = CFSTR("tabId");
    v12 = (double)(unint64_t)a2;
    if (a2 == (const WebKit::ResourceLoadInfo *)-2)
      v12 = -1.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v23[1] = CFSTR("error");
    v24[0] = v13;
    v24[1] = CFSTR("net::ERR_ABORTED");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addEntriesFromDictionary:", v14);

    v15 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v15 = off_1E34F6918;
    *((_QWORD *)v15 + 1) = &v20;
    *((_QWORD *)v15 + 2) = &v22;
    *((_QWORD *)v15 + 3) = &v21;
    *((_QWORD *)v15 + 4) = this;
    v19 = v15;
    WebCore::mainThreadNormalWorld(v15);
    WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v19);
  }
  else
  {
    WebKit::headersReceivedDetails((unsigned __int8 *)this, a2, a4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addEntriesFromDictionary:", v16);

    v17 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v17 = off_1E34F6940;
    *((_QWORD *)v17 + 1) = &v20;
    *((_QWORD *)v17 + 2) = &v22;
    *((_QWORD *)v17 + 3) = &v21;
    *((_QWORD *)v17 + 4) = this;
    v19 = v17;
    WebCore::mainThreadNormalWorld(v17);
    WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v19);
  }
  v18 = v19;
  v19 = 0;
  if (v18)
    (*(void (**)(WebCore *))(*(_QWORD *)v18 + 8))(v18);

}

void sub_1976F6538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionAPIWebRequestEvent::WebExtensionAPIWebRequestEvent(WTF::StringImpl **a1, const WebKit::WebExtensionAPIObject *a2, int a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(_QWORD *)v6 = off_1E34F67D0;
  *(_QWORD *)(v6 + 40) = &unk_1E34F6800;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  WebKit::toAPIString(a3);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, (const WTF::String *)&v10, a2);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

void sub_1976F6650(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebKit::WebExtensionAPIObject *v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(WebKit::WebExtensionAPIWebRequestEvent *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34F67D0;
  *((_QWORD *)this + 5) = &unk_1E34F6800;
  WebKit::WebExtensionAPIWebRequestEvent::removeAllListeners((uint64_t)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(WebKit::WebExtensionAPIWebRequestEvent *this)
{
  WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent((WebKit::WebExtensionAPIWebRequestEvent *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent((WebKit::WebExtensionAPIWebRequestEvent *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

void sub_1976F6718(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebExtensionAPIObject *v2;
  WTF::StringImpl *v4;

  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onBeforeRequest(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebKit::ResourceLoadInfo const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = WebKit::WebExtensionAPIWebRequest::onSendHeaders(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v5, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AuthenticationChallenge const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onAuthRequired(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = WebKit::WebExtensionAPIWebRequest::onResponseStarted(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v5, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,WebCore::ResourceError const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onErrorOccurred(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,WebCore::ResourceError const&,WebKit::ResourceLoadInfo const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWebRequest *v3;
  uint64_t v4;

  v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  v4 = WebKit::WebExtensionAPIWebRequest::onCompleted(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  objc_object *v9;
  uint64_t v10;
  uint64_t Info;
  WTF::StringImpl *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  id *v17;
  id v18;
  void *v19;
  char v20;
  id v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v9 = a2;
  v10 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v10)
  {
    Info = _WKWebExtensionWebRequestResourceTypeFromResourceLoadInfo(a5);
    v12 = *(WTF::StringImpl **)(a5 + 56);
    if (v12)
      *(_DWORD *)v12 += 2;
    v23 = v12;
    v13 = *(_QWORD *)(a1 + 72);
    if (a3 == -2)
      v14 = -1.0;
    else
      v14 = (double)a3;
    if (a4 + 3 >= 2)
      v15 = (double)a4;
    else
      v15 = -1.0;
    v16 = 16 * v10;
    v17 = (id *)(v13 + 8);
    do
    {
      v18 = *v17;
      if (!v18
        || (WTF::URL::operator NSURL *(),
            v19 = (void *)objc_claimAutoreleasedReturnValue(),
            v20 = objc_msgSend(v18, "matchesRequestForResourceOfType:URL:tabID:windowID:", Info, v19, v14, v15),
            v19,
            (v20 & 1) != 0))
      {
        v21 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)*(v17 - 1), v9);
      }

      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }

}

void sub_1976F6AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v14;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  _WKWebExtensionWebRequestFilter *v13;
  WebKit::WebExtensionCallbackHandler *v14;
  _WKWebExtensionWebRequestFilter *v15;
  _WKWebExtensionWebRequestFilter *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  CFTypeRef v21;
  WebKit::WebExtensionCallbackHandler *v22;
  WebKit::WebProcess *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  char v30;
  WebKit::WebExtensionCallbackHandler *v31;
  CFTypeRef cf;
  char *v33;
  IPC::Encoder *v34;

  v11 = a4;
  v12 = a5;
  if (v11)
  {
    v13 = -[_WKWebExtensionWebRequestFilter initWithDictionary:outErrorMessage:]([_WKWebExtensionWebRequestFilter alloc], "initWithDictionary:outErrorMessage:", v11, a6);
    if (!v13)
      goto LABEL_21;
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
  v14 = *a3;
  if (*a3)
    ++*(_DWORD *)v14;
  v31 = v14;
  v15 = v13;
  v16 = v15;
  cf = v15;
  if (v15)
    CFRetain(v15);

  v17 = (unsigned int *)(a1 + 72);
  v18 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 80))
  {
    v19 = (uint64_t *)WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v31);
    v20 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84));
  }
  else
  {
    v20 = (_QWORD *)(*(_QWORD *)v17 + 16 * v18);
    v19 = (uint64_t *)&v31;
  }
  std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v20, v19);
  ++*(_DWORD *)(a1 + 84);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  v22 = v31;
  v31 = 0;
  if (v22)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
  {
    v23 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v23);
  }
  v30 = *(_BYTE *)(a1 + 8);
  v31 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
  cf = (CFTypeRef)(a1 + 64);
  v33 = &v30;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v25 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v25 = 1610;
  *(_QWORD *)(v25 + 8) = v24;
  *(_QWORD *)(v25 + 528) = v25 + 16;
  *(_QWORD *)(v25 + 536) = v25 + 16;
  *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v25 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
  v34 = (IPC::Encoder *)v25;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v25, (uint64_t)&v31);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v23 + 2) + 32))((_QWORD *)v23 + 2, &v34, 0);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }

LABEL_21:
}

void sub_1976F6D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebKit::WebExtensionCallbackHandler *a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (cf)
    CFRelease(cf);
  if (a11)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a11);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  unint64_t v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler *v6;
  unsigned int v8;
  uint64_t v9;
  WebKit::WebExtensionCallbackHandler *v10;
  WebKit::WebExtensionCallbackHandler *v11;
  void *v12;
  void *v13;
  WebKit::WebExtensionCallbackHandler *v14;
  const void *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  uint64_t *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  char v25;
  _QWORD v26[4];
  IPC::Encoder *v27;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 84);
  v6 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 72);
    v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
    v11 = v10;
    do
    {
      WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 == v13)
      {
        v14 = (WebKit::WebExtensionCallbackHandler *)v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84)))
        {
          if ((WebKit::WebExtensionCallbackHandler *)v4 == v10)
          {
            v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, (uint64_t *)v4, v11);
            v14 = (WebKit::WebExtensionCallbackHandler *)((char *)v11 + v9 - (_QWORD)v10);
          }
        }
        v15 = *(const void **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v15)
          CFRelease(v15);
        v16 = *(WebKit::WebExtensionCallbackHandler **)v4;
        *(_QWORD *)v4 = 0;
        if (v16)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
        v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16);
        ++v8;
        v11 = v14;
      }
      v4 += 16;
      v9 += 16;
    }
    while (v4 < (unint64_t)v6);
    v4 = *(_QWORD *)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    v6 = v11;
  }
  else
  {
    v8 = 0;
    v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  }
  v17 = (uint64_t *)(v4 + 16 * v5);
  if (v10 != (WebKit::WebExtensionCallbackHandler *)v17)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, v17, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v25 = *(_BYTE *)(a1 + 8);
    v26[0] = a1 + 56;
    v26[1] = a1 + 64;
    v26[2] = &v25;
    v26[3] = v8;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 1642;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v27 = (IPC::Encoder *)v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v26);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v18 + 2) + 32))((_QWORD *)v18 + 2, &v27, 0);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
}

void sub_1976F6FEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWebRequestEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  _BOOL8 result;

  if (!*(_DWORD *)(a1 + 84))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)(a1 + 72)
                                                                                                  + v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    result = v6 == v7;
    if (v6 == v7)
      break;
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1976F70AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebRequestEvent::removeAllListeners(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  IPC::Encoder *v13;

  v1 = *(_DWORD *)(this + 84);
  if (v1)
  {
    v2 = this;
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
      v1 = *(_DWORD *)(v2 + 84);
    }
    v11 = *(_BYTE *)(v2 + 8);
    v12[0] = v2 + 56;
    v12[1] = v2 + 64;
    v12[2] = &v11;
    v12[3] = v1;
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 24);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 1642;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v13 = (IPC::Encoder *)v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v12);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v3 + 2) + 32))((_QWORD *)v3 + 2, &v13, 0);
    v7 = v2 + 72;
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1976F71DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(void *a1, _BYTE *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;
  NSString *v14;
  int v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  const __CFString *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  *a2 = 3;
  v9 = &_MergedGlobals_106;
  if ((byte_1ECE731D9 & 1) == 0)
  {
    v20 = CFSTR("windowTypes");
    v19 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
    qword_1ECE731E8 = objc_claimAutoreleasedReturnValue();

    byte_1ECE731D9 = 1;
    v9 = &_MergedGlobals_106;
  }
  if (WebKit::validateDictionary(v7, v8, 0, *((void **)v9 + 61), a4))
  {
    v10 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, (uint64_t)CFSTR("windowTypes"), 0, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!v11)
      goto LABEL_10;
    if ((objc_msgSend(v11, "containsObject:", CFSTR("normal")) & 1) == 0)
      *a2 &= ~1u;
    v13 = objc_msgSend(v12, "containsObject:", CFSTR("popup"));
    v15 = *a2;
    if ((v13 & 1) == 0)
    {
      v15 &= ~2u;
      *a2 = v15;
    }
    if (!v15)
    {
      WebKit::toErrorString(0, CFSTR("windowTypes"), CFSTR("it must specify either 'normal', 'popup', or both."), v14);
      v16 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
LABEL_10:
      v16 = 1;
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1976F73DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowTypeFilter(void *a1, _BYTE *a2, void *a3, _QWORD *a4)
{
  id v7;
  NSString *v8;
  char v9;
  NSString *v10;
  uint64_t v11;

  v7 = a1;
  v8 = a3;
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("normal")))
  {
    v9 = *a2 | 1;
LABEL_5:
    *a2 = v9;
    goto LABEL_6;
  }
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("popup")))
  {
    v9 = *a2 | 2;
    goto LABEL_5;
  }
  if (!*a2)
  {
    WebKit::toErrorString(0, v8, CFSTR("it must specify either 'normal' or 'popup'"), v10);
    v11 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
LABEL_6:
  v11 = 1;
LABEL_7:

  return v11;
}

void sub_1976F74CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowGetOptions(void *a1, _BYTE *a2, _BYTE *a3, _QWORD *a4)
{
  id v7;
  __CFString *v8;
  id v9;
  __CFString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = CFSTR("info");
  v9 = v7;
  v10 = CFSTR("info");
  if (_MergedGlobals_118 == 1)
  {
    v11 = (void *)qword_1ECE731E0;
  }
  else
  {
    v15 = CFSTR("populate");
    v16[0] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE731E0 = (uint64_t)v11;
    _MergedGlobals_118 = 1;
  }
  if (WebKit::validateDictionary(v9, CFSTR("info"), 0, v11, a4))
  {
    WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("populate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *a2 = objc_msgSend(v12, "BOOLValue");

    v13 = WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(v9, a3, CFSTR("info"), a4);
  }
  else
  {

    v13 = 0;
  }

  return v13;
}

void sub_1976F7674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSString *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v31;
  NSString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t buf[4];
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  if (byte_1ECE731DB == 1)
  {
    v9 = (void *)qword_1ECE731F8;
  }
  else
  {
    v33 = CFSTR("state");
    v39 = objc_opt_class();
    v34 = CFSTR("focused");
    v40 = objc_opt_class();
    v35 = CFSTR("top");
    v41 = objc_opt_class();
    v36 = CFSTR("left");
    v42 = objc_opt_class();
    v37 = CFSTR("width");
    v43 = objc_opt_class();
    v38 = CFSTR("height");
    v44 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v33, 6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE731F8 = (uint64_t)v9;
    byte_1ECE731DB = 1;
  }
  if (WebKit::validateDictionary(v7, v8, 0, v9, a4))
  {
    WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("state"), 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      v12 = v10;
      if ((objc_msgSend(v12, "isEqualToString:", CFSTR("normal")) & 1) != 0)
      {
        v13 = 0;
      }
      else if ((objc_msgSend(v12, "isEqualToString:", CFSTR("minimized")) & 1) != 0)
      {
        v13 = 1;
      }
      else if ((objc_msgSend(v12, "isEqualToString:", CFSTR("maximized")) & 1) != 0)
      {
        v13 = 2;
      }
      else
      {
        if ((objc_msgSend(v12, "isEqualToString:", CFSTR("fullscreen")) & 1) == 0)
        {
          v31 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138477827;
            v46 = v12;
            _os_log_debug_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEBUG, "Unknown window state: %{private}@", buf, 0xCu);
          }

          *(_WORD *)(a2 + 16) = 0;
          WebKit::toErrorString(0, CFSTR("state"), CFSTR("it must specify 'normal', 'minimized', 'maximized', or 'fullscreen'"), v32);
          v14 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_37;
        }
        v13 = 3;
      }

      *(_WORD *)(a2 + 16) = v13 | 0x100;
    }

    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("focused"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
      *(_WORD *)(a2 + 88) = objc_msgSend(v15, "BOOLValue") | 0x100;

    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("left"));
    v12 = (id)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("top"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("width"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("height"));
    v19 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v19;
    if (!v12 && !v17 && !v18 && !v19)
    {
      v14 = 1;
LABEL_36:

LABEL_37:
      goto LABEL_38;
    }
    if (*(_BYTE *)(a2 + 17) && *(_BYTE *)(a2 + 16))
    {
      WebKit::toErrorString(0, v8, CFSTR("when 'top', 'left', 'width', or 'height' are specified, 'state' must specify 'normal'."), v20);
      v14 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    if (v12)
    {
      objc_msgSend(v12, "doubleValue");
      v23 = v22;
      if (v17)
        goto LABEL_27;
    }
    else
    {
      v23 = 0x7FF8000000000000;
      if (v17)
      {
LABEL_27:
        objc_msgSend(v17, "doubleValue", v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
        v25 = v24;
        if (v18)
          goto LABEL_28;
        goto LABEL_32;
      }
    }
    v25 = 0x7FF8000000000000;
    if (v18)
    {
LABEL_28:
      objc_msgSend(v18, "doubleValue", v33);
      v27 = v26;
      if (v21)
      {
LABEL_29:
        objc_msgSend(v21, "doubleValue", v33);
        goto LABEL_34;
      }
LABEL_33:
      v28 = 0x7FF8000000000000;
LABEL_34:
      v29 = *(unsigned __int8 *)(a2 + 80);
      *(_QWORD *)(a2 + 48) = v23;
      *(_QWORD *)(a2 + 56) = v25;
      v14 = 1;
      *(_QWORD *)(a2 + 64) = v27;
      *(_QWORD *)(a2 + 72) = v28;
      if (!v29)
        *(_BYTE *)(a2 + 80) = 1;
      goto LABEL_36;
    }
LABEL_32:
    v27 = 0x7FF8000000000000;
    if (v21)
      goto LABEL_29;
    goto LABEL_33;
  }
  v14 = 0;
LABEL_38:

  return v14;
}

void sub_1976F7B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  int j;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t i;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  if ((byte_1ECE731DC & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WTF::AtomStringImpl::add();
    v17[1] = v16;
    WTF::AtomStringImpl::add();
    v17[2] = v16;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v15, (WTF::StringImpl *)v17, 3);
    v12 = v15;
    v15 = 0;
    qword_1ECE73200 = v12;
    for (i = 2; i != -1; --i)
    {
      v14 = (WTF::StringImpl *)v17[i];
      v17[i] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v4);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    byte_1ECE731DC = 1;
  }
  if (*((_QWORD *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    v5 = (WTF::StringImpl *)v17[0];
  }
  else
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  if (!qword_1ECE73200)
  {
LABEL_11:
    v10 = 1;
    if (!v5)
      return v10;
    goto LABEL_14;
  }
  v6 = 0;
  for (j = *((_DWORD *)v5 + 4) >> 8; ; j = v6 + v8)
  {
    v8 = j & *(_DWORD *)(qword_1ECE73200 - 8);
    v9 = *(WTF::StringImpl **)(qword_1ECE73200 + 8 * v8);
    if (v9 != (WTF::StringImpl *)-1)
    {
      if (!v9)
        goto LABEL_11;
      if (v9 == v5)
        break;
    }
    ++v6;
  }
  v10 = 0;
  if (v5)
  {
LABEL_14:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v10;
}

void sub_1976F7E40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v13;
  WTF::StringImpl *v14;

  v13 = 16;
  while (1)
  {
    v14 = *(WTF::StringImpl **)(v11 + v13);
    *(_QWORD *)(v11 + v13) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v13 -= 8;
    if (v13 == -8)
      _Unwind_Resume(exception_object);
  }
}

void WebKit::WebExtensionAPIWindows::createWindow(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  __int16 v10;
  __int16 v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  NSString *v19;
  WTF::StringImpl *v20;
  void *v21;
  unint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  NSString *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  char *v38;
  char *v39;
  char *v40;
  WTF::StringImpl *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  void *v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  void *v55;
  WTF::StringImpl *v56;
  void *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  void *v61;
  void *v62;
  long double v63;
  double v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  void *v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WebKit::WebProcess *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  IPC::Encoder *v94;
  WTF *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  void *v102;
  id obj;
  void *v106;
  _BYTE v107[16];
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned __int8 v112;
  char v113;
  char v114;
  int v115;
  WTF::StringImpl *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  _BYTE v123[128];
  __int128 v124;
  WTF::StringImpl *v125;
  char v126;
  WTF::StringImpl *v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _OWORD v133[2];
  __int128 __y;
  WTF::StringImpl *v135;
  int v136;
  char v137;
  WTF::StringImpl *v138;
  char v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  uint64_t v145;
  _QWORD v146[4];
  _QWORD v147[7];

  v147[4] = *MEMORY[0x1E0C80C00];
  v107[0] = 0;
  v107[8] = 0;
  LOBYTE(v109) = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v108 = 0;
  v115 = 0;
  v5 = a2;
  v6 = CFSTR("info");
  v106 = v5;
  if ((WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(v5, (uint64_t)v107, CFSTR("info"), a4) & 1) == 0)
    goto LABEL_95;
  if ((byte_1ECE731DA & 1) == 0)
  {
    v146[0] = CFSTR("type");
    v147[0] = objc_opt_class();
    v146[1] = CFSTR("incognito");
    v147[1] = objc_opt_class();
    v146[2] = CFSTR("url");
    v97 = (void *)MEMORY[0x1E0C99E40];
    v98 = objc_opt_class();
    v145 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v145, 1);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "orderedSetWithObjects:", v98, v99, 0);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v147[2] = v100;
    v146[3] = CFSTR("tabId");
    v147[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v147, v146, 4);
    qword_1ECE731F0 = objc_claimAutoreleasedReturnValue();

    byte_1ECE731DA = 1;
  }
  if (!WebKit::validateDictionary(v5, CFSTR("info"), 0, (void *)qword_1ECE731F0, a4))
    goto LABEL_95;
  WebKit::objectForKey<NSString>(v5, (uint64_t)CFSTR("type"), 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
    if ((objc_msgSend(v9, "isEqualToString:", CFSTR("normal")) & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      if ((objc_msgSend(v9, "isEqualToString:", CFSTR("popup")) & 1) == 0)
      {
        v12 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__y) = 138477827;
          *(_QWORD *)((char *)&__y + 4) = v9;
          _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "Unknown window type: %{private}@", (uint8_t *)&__y, 0xCu);
        }
        v10 = 0;
        v11 = 0;
        goto LABEL_14;
      }
      v10 = 1;
    }
    v11 = 1;
LABEL_14:

    HIWORD(v108) = v10 | (v11 << 8);
  }

  WebKit::objectForKey<NSNumber>(v106, (uint64_t)CFSTR("incognito"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
    HIWORD(v115) = objc_msgSend(v13, "BOOLValue") | 0x100;

  WebKit::objectForKey<NSString>(v106, (uint64_t)CFSTR("url"), 1);
  v15 = objc_claimAutoreleasedReturnValue();
  v102 = (void *)v15;
  if (!v15)
  {
    WebKit::objectForKey<NSArray>(v106, (uint64_t)CFSTR("url"), 1, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v121 = 0;
      v122 = 0;
      v101 = v21;
      v22 = objc_msgSend(v21, "count");
      if (v22)
      {
        if (v22 >= 0x1745D18)
        {
LABEL_150:
          __break(0xC471u);
          return;
        }
        v23 = 176 * v22;
        v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(176 * v22));
        LODWORD(v122) = v23 / 0xB0;
        v121 = v24;
      }
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      obj = v101;
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v123, 16);
      if (v25)
      {
        v26 = *(_QWORD *)v118;
LABEL_27:
        v27 = 0;
        while (1)
        {
          if (*(_QWORD *)v118 != v26)
            objc_enumerationMutation(obj);
          v28 = *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * v27);
          LOBYTE(__y) = 0;
          BYTE8(__y) = 0;
          LOBYTE(v135) = 0;
          v137 = 0;
          LOBYTE(v138) = 0;
          v139 = 0;
          LOBYTE(v140) = 0;
          BYTE8(v140) = 0;
          LOBYTE(v141) = 0;
          BYTE8(v141) = 0;
          LOBYTE(v142) = 0;
          LOBYTE(v143) = 0;
          BYTE8(v143) = 0;
          LOBYTE(v144[0]) = 0;
          memset((char *)v144 + 8, 0, 18);
          v29 = *(_QWORD *)(a1 + 24);
          MEMORY[0x19AEABCC8](&v116, v28);
          MEMORY[0x19AEABB24](&v124, v29 + 40, &v116, 0);
          std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>((uint64_t)&v135, (WTF::StringImpl *)&v124);
          v32 = (WTF::StringImpl *)v124;
          *(_QWORD *)&v124 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v30);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = v116;
          v116 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v30);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (!v137)
            goto LABEL_149;
          v34 = v136;
          if ((v136 & 1) != 0)
          {
            v36 = HIDWORD(v122);
            if (HIDWORD(v122) == (_DWORD)v122)
            {
              WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionTabParameters>((uint64_t)&v121, (unint64_t)&__y);
            }
            else
            {
              v37 = v121;
              v38 = (char *)v121 + 176 * HIDWORD(v122);
              *(_OWORD *)v38 = __y;
              std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v38 + 16, (uint64_t)&v135);
              v39 = (char *)v37 + 176 * v36;
              v39[64] = 0;
              v40 = v39 + 64;
              v40[8] = 0;
              if (v139)
              {
                v41 = v138;
                v138 = 0;
                *(_QWORD *)v40 = v41;
                v40[8] = 1;
              }
              v42 = (_OWORD *)((char *)v37 + 176 * v36);
              v43 = v141;
              v42[5] = v140;
              v42[6] = v43;
              v44 = v142;
              v45 = v143;
              v46 = v144[0];
              *(_OWORD *)((char *)v42 + 154) = *(_OWORD *)((char *)v144 + 10);
              v42[8] = v45;
              v42[9] = v46;
              v42[7] = v44;
              ++HIDWORD(v122);
            }
          }
          else
          {
            WebKit::toErrorString(0, CFSTR("url"), CFSTR("'%@' is not a valid URL"), v31, v28);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          if (v139)
          {
            v47 = v138;
            v138 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v35);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          if (v137)
          {
            v48 = v135;
            v135 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
              {
                WTF::StringImpl::destroy(v48, v35);
                if ((v34 & 1) == 0)
                {
LABEL_77:

                  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v57);
                  v17 = 0;
                  goto LABEL_94;
                }
                goto LABEL_56;
              }
              *(_DWORD *)v48 -= 2;
            }
          }
          if ((v34 & 1) == 0)
            goto LABEL_77;
LABEL_56:
          if (v25 == ++v27)
          {
            v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v123, 16);
            v25 = v49;
            if (v49)
              goto LABEL_27;
            break;
          }
        }
      }

      std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v109, &v121);
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v50);
      v21 = v101;
    }

    v17 = 0;
    goto LABEL_100;
  }
  LOBYTE(__y) = 0;
  BYTE8(__y) = 0;
  LOBYTE(v135) = 0;
  v137 = 0;
  LOBYTE(v138) = 0;
  v139 = 0;
  LOBYTE(v140) = 0;
  BYTE8(v140) = 0;
  LOBYTE(v141) = 0;
  BYTE8(v141) = 0;
  LOBYTE(v142) = 0;
  LOBYTE(v143) = 0;
  BYTE8(v143) = 0;
  LOBYTE(v144[0]) = 0;
  memset((char *)v144 + 8, 0, 18);
  v16 = *(_QWORD *)(a1 + 24);
  MEMORY[0x19AEABCC8](&v121, v15);
  MEMORY[0x19AEABB24](&v124, v16 + 40, &v121, 0);
  v17 = v102;
  std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>((uint64_t)&v135, (WTF::StringImpl *)&v124);
  v20 = (WTF::StringImpl *)v124;
  *(_QWORD *)&v124 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v51 = v121;
  v121 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v18);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (!v137)
  {
LABEL_149:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    goto LABEL_150;
  }
  v52 = v136;
  if ((v136 & 1) != 0)
  {
    v124 = __y;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v125, (uint64_t)&v135);
    LOBYTE(v127) = 0;
    v128 = 0;
    if (v139)
    {
      v54 = v138;
      v138 = 0;
      v127 = v54;
      v128 = 1;
    }
    v131 = v142;
    v132 = v143;
    v133[0] = v144[0];
    *(_OWORD *)((char *)v133 + 10) = *(_OWORD *)((char *)v144 + 10);
    v129 = v140;
    v130 = v141;
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v121, (uint64_t)&v124, 1uLL);
    std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v109, &v121);
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v55);
    if (v128)
    {
      v56 = v127;
      v127 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v53);
        else
          *(_DWORD *)v56 -= 2;
      }
    }
    if (v126)
    {
      v58 = v125;
      v125 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v53);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
  }
  else
  {
    WebKit::toErrorString(0, CFSTR("url"), CFSTR("'%@' is not a valid URL"), v19, v102);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    v17 = v102;
  }
  if (v139)
  {
    v59 = v138;
    v138 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v53);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  if (v137)
  {
    v60 = v135;
    v135 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::destroy(v60, v53);
        if ((v52 & 1) == 0)
          goto LABEL_94;
        goto LABEL_100;
      }
      *(_DWORD *)v60 -= 2;
    }
  }
  if ((v52 & 1) != 0)
  {
LABEL_100:

    WebKit::objectForKey<NSNumber>(v106, (uint64_t)CFSTR("tabId"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "doubleValue");
    v64 = v63;
    if (v63 == -1.0)
    {
      v65 = -256;
      v66 = 1;
      LOBYTE(v67) = -2;
    }
    else
    {
      LOBYTE(v67) = 0;
      v66 = 0;
      if ((v63 < 0.0 || ((*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(_QWORD *)&v63 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v65 = 0;
      }
      else
      {
        v65 = 0;
        if (v63 < 1.84467441e19)
        {
          if (modf(v63, (long double *)&__y) == 0.0)
          {
            if ((unint64_t)v64 - 1 >= 0xFFFFFFFFFFFFFFFELL)
              LOBYTE(v67) = -2;
            else
              v67 = (unint64_t)v64;
            if ((unint64_t)v64 - 1 >= 0xFFFFFFFFFFFFFFFELL)
              v65 = -256;
            else
              v65 = (unint64_t)v64 & 0xFFFFFFFFFFFFFF00;
            v66 = 1;
          }
          else
          {
            v66 = 0;
            LOBYTE(v67) = 0;
            v65 = 0;
          }
        }
      }
    }

    if (!v66)
      goto LABEL_132;
    v68 = v65 & 0xFFFFFFFFFFFFFF00 | v67;
    if (v68 == -2)
      goto LABEL_132;
    v69 = 1;
    if (!v112)
    {
      __y = 0uLL;
      std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v109, &__y);
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&__y, v70);
      v69 = v112;
    }
    LOBYTE(v135) = 0;
    v137 = 0;
    LOBYTE(v138) = 0;
    v139 = 0;
    LOBYTE(v140) = 0;
    BYTE8(v140) = 0;
    LOBYTE(v141) = 0;
    BYTE8(v141) = 0;
    LOBYTE(v142) = 0;
    LOBYTE(v143) = 0;
    BYTE8(v143) = 0;
    LOBYTE(v144[0]) = 0;
    memset((char *)v144 + 8, 0, 18);
    *(_QWORD *)&__y = v68;
    BYTE8(__y) = 1;
    if (v69)
    {
      v71 = v111;
      if (v111 == v110)
      {
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionTabParameters>((uint64_t)&v109, (unint64_t)&__y);
      }
      else
      {
        v75 = v109;
        v76 = v109 + 176 * v111;
        *(_OWORD *)v76 = __y;
        std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v76 + 16), (uint64_t)&v135);
        v77 = v75 + 176 * v71;
        *(_BYTE *)(v77 + 64) = 0;
        v78 = v77 + 64;
        *(_BYTE *)(v78 + 8) = 0;
        if (v139)
        {
          v79 = v138;
          v138 = 0;
          *(_QWORD *)v78 = v79;
          *(_BYTE *)(v78 + 8) = 1;
        }
        v80 = (_OWORD *)(v75 + 176 * v71);
        v81 = v141;
        v80[5] = v140;
        v80[6] = v81;
        v82 = v142;
        v83 = v143;
        v84 = v144[0];
        *(_OWORD *)((char *)v80 + 154) = *(_OWORD *)((char *)v144 + 10);
        v80[8] = v83;
        v80[9] = v84;
        v80[7] = v82;
        ++v111;
      }
      if (v139)
      {
        v85 = v138;
        v138 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v72);
          else
            *(_DWORD *)v85 -= 2;
        }
      }
      if (v137)
      {
        v86 = v135;
        v135 = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
            WTF::StringImpl::destroy(v86, v72);
          else
            *(_DWORD *)v86 -= 2;
        }
      }
LABEL_132:

      {
        v87 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v87 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v87);
      }
      ++*(_DWORD *)(a1 + 48);
      v88 = *a3;
      *a3 = 0;
      v89 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v90 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v90 = 1687;
      *(_QWORD *)(v90 + 8) = v89;
      *(_QWORD *)(v90 + 528) = v90 + 16;
      *(_QWORD *)(v90 + 536) = v90 + 16;
      *(_OWORD *)(v90 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v90 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v90);
      *(_QWORD *)&v124 = v90;
      IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode((IPC::Encoder *)v90, (uint64_t)v107);
      v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v91 = &off_1E34F6968;
      v91[1] = a1;
      v91[2] = v88;
      v92 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      *(_QWORD *)&__y = v91;
      *((_QWORD *)&__y + 1) = v92;
      (*(void (**)(_QWORD *, __int128 *, __int128 *, _QWORD))(*((_QWORD *)v87 + 2) + 40))((_QWORD *)v87 + 2, &v124, &__y, 0);
      v93 = __y;
      *(_QWORD *)&__y = 0;
      if (v93)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
      v94 = (IPC::Encoder *)v124;
      *(_QWORD *)&v124 = 0;
      if (v94)
      {
        IPC::Encoder::~Encoder(v94, v61);
        WTF::fastFree(v95, v96);
      }
      goto LABEL_96;
    }
    goto LABEL_149;
  }
LABEL_94:

LABEL_95:
LABEL_96:
  if (v112)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v61);

}

void sub_1976F8B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v25;

  if (a23)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v25);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::get(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5, long double a6)
{
  NSString *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v29;
  long double __y[4];
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  IPC::Encoder *v35;

  v12 = a3;
  if (a6 == -1.0)
  {
    v13 = -256;
    LOBYTE(v14) = -2;
LABEL_5:
    v15 = 1;
    goto LABEL_6;
  }
  if (a6 == -2.0)
  {
    v13 = -256;
    LOBYTE(v14) = -3;
    goto LABEL_5;
  }
  v15 = 0;
  if ((a6 < 0.0 || ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a6 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v14) = 0;
    v13 = 0;
    goto LABEL_6;
  }
  LOBYTE(v14) = 0;
  v13 = 0;
  if (a6 < 1.84467441e19)
  {
    if (modf(a6, __y) != 0.0)
    {
      v15 = 0;
      LOBYTE(v14) = 0;
      v13 = 0;
      goto LABEL_6;
    }
    v14 = (unint64_t)a6;
    if ((unint64_t)a6 - 1 < 0xFFFFFFFFFFFFFFFELL)
    {
      v13 = (unint64_t)a6 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v14) = -2;
      v13 = -256;
    }
    goto LABEL_5;
  }
LABEL_6:
  v32 = v13 & 0xFFFFFFFFFFFFFF00 | v14;
  v33 = v15;
  if (!WebKit::isValid(v32, v15, a5, v11)
    || (v31 = 0, (WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v12, (_BYTE *)&v31 + 1, &v31, a5) & 1) == 0))
  {
LABEL_15:

    return;
  }
  {
    v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v16);
  }
  v29 = *(_QWORD *)(a2 + 2120);
  if ((_BYTE)v33)
  {
    *(_QWORD *)&__y[0] = &v29;
    *(_QWORD *)&__y[1] = &v32;
    *(_QWORD *)&__y[2] = &v31;
    *(_QWORD *)&__y[3] = (char *)&v31 + 1;
    ++*(_DWORD *)(a1 + 48);
    v17 = *a4;
    *a4 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1688;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v35 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(v19, (uint64_t)__y);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E34F69B0;
    v20[1] = a1;
    v20[2] = v17;
    v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v34[0] = v20;
    v34[1] = v21;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v16 + 2) + 40))((_QWORD *)v16 + 2, &v35, v34, 0);
    v23 = v34[0];
    v34[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v22);
      WTF::fastFree(v25, v26);
    }
    goto LABEL_15;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976F9218(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20)
{
  void *v20;
  WTF *v22;
  void *v23;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a20)
  {
    IPC::Encoder::~Encoder(a20, a2);
    WTF::fastFree(v22, v23);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getCurrent(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[2];
  IPC::Encoder *v25;

  v9 = a3;
  v23 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v9, (_BYTE *)&v23 + 1, &v23, a5) & 1) != 0)
  {
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
    }
    v21 = *(_QWORD *)(a2 + 2120);
    v22[0] = &v21;
    v22[1] = &WebKit::WebExtensionWindowConstants::CurrentIdentifier;
    v22[2] = &v23;
    v22[3] = (char *)&v23 + 1;
    ++*(_DWORD *)(a1 + 48);
    v11 = *a4;
    *a4 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1688;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v25 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(v13, (uint64_t)v22);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34F69F8;
    v14[1] = a1;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v24[0] = v14;
    v24[1] = v15;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v25, v24, 0);
    v17 = v24[0];
    v24[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v25;
    v25 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
  }

}

void sub_1976F94B8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  void *v18;
  WTF *v20;
  void *v21;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a18)
  {
    IPC::Encoder::~Encoder(a18, a2);
    WTF::fastFree(v20, v21);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getLastFocused(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  void *v41;
  size_t v42;
  size_t v43;
  __int16 v44;
  _QWORD v45[2];
  IPC::Encoder *v46;

  v7 = a2;
  v44 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v7, (_BYTE *)&v44 + 1, &v44, a4) & 1) == 0)
    goto LABEL_12;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
  }
  ++*(_DWORD *)(a1 + 48);
  v9 = *a3;
  *a3 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1690;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v46 = (IPC::Encoder *)v11;
  v13 = v44;
  v14 = *(_QWORD *)(v11 + 544);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(v11 + 552);
  if (v16 < v14 + 1)
  {
    v34 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v35 = v34;
      v34 *= 2;
    }
    while (v35 < v15);
    v42 = v35;
    v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
    if (v36 == (char *)-1)
      goto LABEL_26;
    v17 = v36;
    memcpy(v36, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v37 = *(void **)(v11 + 528);
    if (v37 != v12)
      munmap(v37, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v17;
    *(_QWORD *)(v11 + 552) = v42;
    v18 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v17 = *(char **)(v11 + 528);
    v18 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v17[v18], v14 - v18);
  *(_QWORD *)(v11 + 544) = v15;
  v19 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v14);
  *(_QWORD *)(v11 + 536) = v19 + 1;
  *v19 = v13;
  v20 = HIBYTE(v44);
  v21 = *(_QWORD *)(v11 + 544);
  v22 = v21 + 1;
  v23 = *(_QWORD *)(v11 + 552);
  if (v23 < v21 + 1)
  {
    v38 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v39 = v38;
      v38 *= 2;
    }
    while (v39 < v22);
    v43 = v39;
    v40 = (char *)mmap(0, v39, 3, 4098, -1, 0);
    if (v40 != (char *)-1)
    {
      v24 = v40;
      memcpy(v40, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
      v41 = *(void **)(v11 + 528);
      if (v41 != v12)
        munmap(v41, *(_QWORD *)(v11 + 552));
      *(_QWORD *)(v11 + 528) = v24;
      *(_QWORD *)(v11 + 552) = v43;
      v25 = *(_QWORD *)(v11 + 544);
      goto LABEL_8;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1976F98A0);
  }
  v24 = *(char **)(v11 + 528);
  v25 = *(_QWORD *)(v11 + 544);
LABEL_8:
  bzero(&v24[v25], v21 - v25);
  *(_QWORD *)(v11 + 544) = v22;
  v26 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v21);
  *(_QWORD *)(v11 + 536) = v26 + 1;
  *v26 = v20;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E34F6A20;
  v27[1] = a1;
  v27[2] = v9;
  v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v45[0] = v27;
  v45[1] = v28;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v46, v45, 0);
  v30 = v45[0];
  v45[0] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v46;
  v46 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
LABEL_12:

}

void sub_1976F98AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  WTF *v16;
  void *v17;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getAll(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  void *v41;
  size_t v42;
  size_t v43;
  __int16 v44;
  _QWORD v45[2];
  IPC::Encoder *v46;

  v7 = a2;
  v44 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v7, (_BYTE *)&v44 + 1, &v44, a4) & 1) == 0)
    goto LABEL_12;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
  }
  ++*(_DWORD *)(a1 + 48);
  v9 = *a3;
  *a3 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1689;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v46 = (IPC::Encoder *)v11;
  v13 = v44;
  v14 = *(_QWORD *)(v11 + 544);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(v11 + 552);
  if (v16 < v14 + 1)
  {
    v34 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v35 = v34;
      v34 *= 2;
    }
    while (v35 < v15);
    v42 = v35;
    v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
    if (v36 == (char *)-1)
      goto LABEL_26;
    v17 = v36;
    memcpy(v36, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v37 = *(void **)(v11 + 528);
    if (v37 != v12)
      munmap(v37, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v17;
    *(_QWORD *)(v11 + 552) = v42;
    v18 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v17 = *(char **)(v11 + 528);
    v18 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v17[v18], v14 - v18);
  *(_QWORD *)(v11 + 544) = v15;
  v19 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v14);
  *(_QWORD *)(v11 + 536) = v19 + 1;
  *v19 = v13;
  v20 = HIBYTE(v44);
  v21 = *(_QWORD *)(v11 + 544);
  v22 = v21 + 1;
  v23 = *(_QWORD *)(v11 + 552);
  if (v23 < v21 + 1)
  {
    v38 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v39 = v38;
      v38 *= 2;
    }
    while (v39 < v22);
    v43 = v39;
    v40 = (char *)mmap(0, v39, 3, 4098, -1, 0);
    if (v40 != (char *)-1)
    {
      v24 = v40;
      memcpy(v40, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
      v41 = *(void **)(v11 + 528);
      if (v41 != v12)
        munmap(v41, *(_QWORD *)(v11 + 552));
      *(_QWORD *)(v11 + 528) = v24;
      *(_QWORD *)(v11 + 552) = v43;
      v25 = *(_QWORD *)(v11 + 544);
      goto LABEL_8;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1976F9C6CLL);
  }
  v24 = *(char **)(v11 + 528);
  v25 = *(_QWORD *)(v11 + 544);
LABEL_8:
  bzero(&v24[v25], v21 - v25);
  *(_QWORD *)(v11 + 544) = v22;
  v26 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v21);
  *(_QWORD *)(v11 + 536) = v26 + 1;
  *v26 = v20;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E34F6A48;
  v27[1] = a1;
  v27[2] = v9;
  v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v45[0] = v27;
  v45[1] = v28;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v46, v45, 0);
  v30 = v45[0];
  v45[0] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v46;
  v46 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
LABEL_12:

}

void sub_1976F9C78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  WTF *v16;
  void *v17;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::update(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4, long double a5)
{
  NSString *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  long double __y;
  char v28;
  int v29;
  _BYTE v30[16];
  char v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35[2];
  _QWORD v36[2];
  IPC::Encoder *v37;

  v10 = a2;
  if (a5 == -1.0)
  {
    v11 = -256;
    LOBYTE(v12) = -2;
LABEL_5:
    v13 = 1;
    goto LABEL_6;
  }
  if (a5 == -2.0)
  {
    v11 = -256;
    LOBYTE(v12) = -3;
    goto LABEL_5;
  }
  v13 = 0;
  if ((a5 < 0.0 || ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v12) = 0;
    v11 = 0;
  }
  else
  {
    LOBYTE(v12) = 0;
    v11 = 0;
    if (a5 < 1.84467441e19)
    {
      if (modf(a5, &__y) == 0.0)
      {
        v12 = (unint64_t)a5;
        if ((unint64_t)a5 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v11 = (unint64_t)a5 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v12) = -2;
          v11 = -256;
        }
        goto LABEL_5;
      }
      v13 = 0;
      LOBYTE(v12) = 0;
      v11 = 0;
    }
  }
LABEL_6:
  v35[0] = v11 & 0xFFFFFFFFFFFFFF00 | v12;
  v35[1] = v13;
  if (!WebKit::isValid(v35[0], v13, a4, v9))
  {
LABEL_16:

    return;
  }
  LOBYTE(__y) = 0;
  v28 = 0;
  v30[0] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v29 = 0;
  v34 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(v10, (uint64_t)&__y, CFSTR("properties"), a4) & 1) == 0)
  {
LABEL_14:
    if (v31)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v14);
    goto LABEL_16;
  }
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    if (v13)
    {
LABEL_10:
      ++*(_DWORD *)(a1 + 48);
      v16 = *a3;
      *a3 = 0;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v18 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v18 = 1692;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(v18 + 528) = v18 + 16;
      *(_QWORD *)(v18 + 536) = v18 + 16;
      *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v18 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
      v37 = (IPC::Encoder *)v18;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, v35);
      IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode((IPC::Encoder *)v18, (uint64_t)&__y);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v19 = &off_1E34F6A90;
      v19[1] = a1;
      v19[2] = v16;
      v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v36[0] = v19;
      v36[1] = v20;
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v37, v36, 0);
      v21 = v36[0];
      v36[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = v37;
      v37 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v14);
        WTF::fastFree(v23, v24);
      }
      goto LABEL_14;
    }
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
    if (v13)
      goto LABEL_10;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976F9FFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;

  v19 = *(_QWORD *)(v17 - 104);
  *(_QWORD *)(v17 - 104) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(IPC::Encoder **)(v17 - 88);
  *(_QWORD *)(v17 - 88) = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, a2);
    WTF::fastFree(v21, v22);
  }
  if (a15)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIWindows::remove(uint64_t a1, uint64_t *a2, _QWORD *a3, NSString *a4, long double a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  IPC::Encoder *result;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  long double v20;
  WTF *v21;
  void *v22;
  void *v25;
  _Unwind_Exception *v26;
  long double v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  uint64_t v31[2];
  long double __y[2];
  IPC::Encoder *v33;

  if (a5 == -1.0)
  {
    v9 = -256;
    LOBYTE(v10) = -2;
LABEL_5:
    v11 = 1;
    goto LABEL_6;
  }
  if (a5 == -2.0)
  {
    v9 = -256;
    LOBYTE(v10) = -3;
    goto LABEL_5;
  }
  v11 = 0;
  if ((a5 < 0.0 || ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v10) = 0;
    v9 = 0;
  }
  else
  {
    LOBYTE(v10) = 0;
    v9 = 0;
    if (a5 < 1.84467441e19)
    {
      if (modf(a5, __y) == 0.0)
      {
        v10 = (unint64_t)a5;
        if ((unint64_t)a5 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v9 = (unint64_t)a5 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v10) = -2;
          v9 = -256;
        }
        goto LABEL_5;
      }
      v11 = 0;
      LOBYTE(v10) = 0;
      v9 = 0;
    }
  }
LABEL_6:
  v31[0] = v9 & 0xFFFFFFFFFFFFFF00 | v10;
  v31[1] = v11;
  result = (IPC::Encoder *)WebKit::isValid(v31[0], v11, a3, a4);
  if (!(_DWORD)result)
    return result;
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v13);
    if (v11)
      goto LABEL_9;
LABEL_29:
    v26 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    v27 = __y[0];
    __y[0] = 0.0;
    if (v27 != 0.0)
      (*(void (**)(long double))(**(_QWORD **)&v27 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v27));
    v28 = v33;
    v33 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v25);
      WTF::fastFree(v29, v30);
    }
    _Unwind_Resume(v26);
  }
  v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  if (!v11)
    goto LABEL_29;
LABEL_9:
  ++*(_DWORD *)(a1 + 48);
  v14 = *a2;
  *a2 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1691;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v33 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, v31);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = &off_1E34F6AB8;
  v17[1] = a1;
  v17[2] = v14;
  v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v17;
  *(_QWORD *)&__y[1] = v18;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v13 + 2) + 40))((_QWORD *)v13 + 2, &v33, __y, 0);
  v20 = __y[0];
  __y[0] = 0.0;
  if (v20 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v20 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v20));
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

void sub_1976FA420()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976FA3E8);
  JUMPOUT(0x1976FA3D4);
}

uint64_t WebKit::WebExtensionAPIWindows::onCreated(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 55;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIWindowsEvent::WebExtensionAPIWindowsEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976FA514(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::onRemoved(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 57;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWindows::onFocusChanged(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 56;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::dispatchWindowsEvent(uint64_t a1, char a2, _BYTE *a3)
{
  char v5;
  WebCore *v6;
  uint64_t result;
  _Unwind_Exception *v8;
  WebCore *v9;
  WebCore *v10;
  char v11;
  char v12;

  v12 = a2;
  if (a3[96])
  {
    if (!a3[19])
    {
      v8 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      v9 = v10;
      v10 = 0;
      if (v9)
        (*(void (**)(WebCore *))(*(_QWORD *)v9 + 8))(v9);
      _Unwind_Resume(v8);
    }
    if (a3[18] == 1)
      v5 = 2;
    else
      v5 = 1;
  }
  else
  {
    v5 = 3;
  }
  v11 = v5;
  v6 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E34F6B38;
  *((_QWORD *)v6 + 1) = &v12;
  *((_QWORD *)v6 + 2) = a3;
  *((_QWORD *)v6 + 3) = &v11;
  v10 = v6;
  WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6968;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6968;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  _BYTE v26[80];
  unsigned __int8 v27;
  _BYTE v28[8];
  _BYTE v29[104];
  int v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[13];
  int v34;
  unsigned __int8 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
        v11 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v12 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v12 = *a2;
          v11 = a2[1];
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
  }
  else
  {
    v6 = (unsigned __int8 *)a2[2];
    a2[2] = (uint64_t)(v6 + 1);
    v7 = *v6;
    if (v7 < 2)
    {
      if (v7)
      {
        IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>(a2, (uint64_t)&v24);
        v8 = v27;
        if (v27)
        {
          std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](v33, (uint64_t)&v24);
          v34 = 0;
          v8 = 1;
          v35 = 1;
          if (v27 && v26[72] && v26[16])
          {
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v9);
            v8 = v35;
          }
        }
        else
        {
          v32[0] = 0;
          v35 = 0;
        }
      }
      else
      {
        IPC::Decoder::decode<WTF::String>(a2, &v24);
        v8 = v25;
        if (v25)
        {
          v33[0] = v24;
          v8 = 1;
          v34 = 1;
        }
        else
        {
          v32[0] = 0;
        }
        v35 = v8;
      }
      if (v8)
        goto LABEL_18;
      goto LABEL_31;
    }
    v11 = v5;
    v12 = v4;
  }
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14 && v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  v32[0] = 0;
  v35 = 0;
LABEL_31:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (!v17 || !v16 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15), !v35))
  {
    v28[0] = 0;
    v31 = 0;
LABEL_33:
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20 || !v19 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18), !v31))
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
      return;
    }
    goto LABEL_24;
  }
LABEL_18:
  v29[0] = 0;
  v30 = -1;
  v10 = v34;
  if (v34 == -1)
  {
    v31 = 1;
    goto LABEL_24;
  }
  ((void (*)(uint64_t *, _BYTE *, _QWORD *))off_1E34F6990[v34])(&v24, v29, v33);
  v30 = v10;
  v31 = 1;
  if (v35)
  {
    if (v34 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *))off_1E34F6980[v34])(&v24, v33);
      if (!v31)
        goto LABEL_33;
    }
  }
LABEL_24:
  WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v28);
  if (v31)
  {
    if (v30 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34F6980[v30])(v32, v29);
  }
}

void sub_1976FAB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46,char a47)
{
  uint64_t v47;

  if (a47)
  {
    if (a45 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F6980[a45])(v47 - 184, &a32);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[104];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[96] = 0;
  v4 = 0;
  WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6980[v4])(&v1, v3);
}

void sub_1976FACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  uint64_t v28;

  if (a28 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6980[a28])(&a13, v28);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionWindowParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 104))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976FAD64(_Unwind_Exception *exception_object, void *a2)
{
  _BYTE *v2;

  if (v2[104] && v2[96])
  {
    if (v2[40])
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v2 + 24), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebExtensionWindowParameters>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  _OWORD v25[2];
  char v26;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v18 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        a1 = v18;
        v14 = *v18;
        v13 = v18[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v13 = v3;
    v14 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v17 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        a1 = v17;
        v4 = *v17;
        v3 = v17[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    goto LABEL_15;
  }
  if (!v7)
  {
    LOBYTE(v19) = 0;
    v26 = 0;
    result = (uint64_t)std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)a2, (uint64_t)&v19);
    *(_BYTE *)(a2 + 104) = 1;
    if (v26 && v23)
      return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v9);
    return result;
  }
  result = IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>(a1, (uint64_t)&v19);
  if (!v26)
  {
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 104) = 0;
    return result;
  }
  *(_OWORD *)a2 = v19;
  *(_DWORD *)(a2 + 16) = v20;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v23)
  {
    *(_QWORD *)(a2 + 24) = v21;
    v10 = v22;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(a2 + 32) = v10;
    *(_BYTE *)(a2 + 40) = 1;
    v11 = v25[0];
    *(_OWORD *)(a2 + 48) = v24;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)((char *)v25 + 12);
    *(_BYTE *)(a2 + 96) = 1;
    *(_BYTE *)(a2 + 104) = 1;
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v9);
  }
  v12 = v25[0];
  *(_OWORD *)(a2 + 48) = v24;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)((char *)v25 + 12);
  *(_BYTE *)(a2 + 96) = 1;
  *(_BYTE *)(a2 + 104) = 1;
  return result;
}

void sub_1976FAF88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
  {
    if (a15)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976FB004(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 96))
  {
    if (*(_BYTE *)(v2 + 40))
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters*>((uint64_t)a1, (__int128 *)a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_1976FB068(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 96))
  {
    if (*(_BYTE *)(v2 + 40))
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  if (result)
  {
    v2 = *a2;
    *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)result = v2;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 40) = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      v3 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      *(_QWORD *)(result + 24) = v3;
      LODWORD(v3) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = 0;
      *(_DWORD *)(result + 32) = v3;
      LODWORD(v3) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = 0;
      *(_DWORD *)(result + 36) = v3;
      *(_BYTE *)(result + 40) = 1;
    }
    v4 = a2[3];
    v5 = a2[4];
    *(_OWORD *)(result + 76) = *(__int128 *)((char *)a2 + 76);
    *(_OWORD *)(result + 48) = v4;
    *(_OWORD *)(result + 64) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t result;

  if (a2[96])
    v2 = a2[40] == 0;
  else
    v2 = 1;
  if (!v2)
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 24), a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 112);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

id WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
    WebKit::toWebAPI(a1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1976FB5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)(a2 + 8));
  v4 = **(_BYTE **)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = **(_BYTE **)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a1 + 552);
  if (v14 >= v12 + 1)
  {
    v15 = *(char **)(a1 + 528);
    v16 = *(_QWORD *)(a1 + 544);
    goto LABEL_5;
  }
  v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v13);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1976FB878);
  }
  v15 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v15;
  *(_QWORD *)(a1 + 552) = v23;
  v16 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(a1 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F69B0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F69B0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F69C8[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976FBA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F69C8[a27])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _OWORD v3[6];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _OWORD *))off_1E34F69C8[v4])(&v1, v3);
}

void sub_1976FBB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E34F69C8[a26])(&a12, v26);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  _OWORD v33[2];
  char v34;
  char v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _OWORD v42[2];
  int v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_21;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v17 = v6;
    v18 = 0;
LABEL_21:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v5);
    goto LABEL_23;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v27);
    if (BYTE8(v27))
    {
      *(_QWORD *)&v36 = v27;
      v13 = 1;
      v43 = 1;
    }
    else
    {
      v13 = 0;
      v35 = 0;
    }
    v44 = v13;
    v14 = 1;
    if (!v13)
      goto LABEL_23;
LABEL_16:
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 104) = -1;
    result = ((uint64_t (*)(__int128 *, uint64_t, __int128 *))off_1E34F69D8[v14])(&v27, a1 + 8, &v36);
    *(_DWORD *)(a1 + 104) = v14;
    v16 = v44;
    *(_BYTE *)(a1 + 112) = 1;
    if (!v16)
      return result;
    if (v43 == -1)
      return result;
    result = ((uint64_t (*)(__int128 *, __int128 *))off_1E34F69C8[v43])(&v27, &v36);
    if (*(_BYTE *)(a1 + 112))
      return result;
    goto LABEL_25;
  }
  IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>(a2, (uint64_t)&v27);
  if (v34)
  {
    v36 = v27;
    v37 = v28;
    LOBYTE(v38) = 0;
    v40 = 0;
    if (v31)
    {
      v39 = v30;
      v41 = v32;
      v11 = v29;
      v29 = 0;
      v30 = 0;
      v38 = v11;
      v12 = 1;
      v40 = 1;
      v42[0] = v33[0];
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v33 + 12);
      v43 = 0;
      v44 = 1;
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v10);
    }
    else
    {
      v41 = v32;
      v42[0] = v33[0];
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v33 + 12);
      v43 = 0;
      v12 = 1;
      v44 = 1;
    }
  }
  else
  {
    v12 = 0;
    v35 = 0;
    v44 = 0;
  }
  v14 = 0;
  if (v12)
    goto LABEL_16;
LABEL_23:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24 && v23)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
LABEL_25:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

void sub_1976FBE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,char a41)
{
  uint64_t v41;
  uint64_t v43;

  if (*(_BYTE *)(v41 + 112))
  {
    v43 = *(unsigned int *)(v41 + 104);
    if ((_DWORD)v43 != -1)
      ((void (*)(char *, uint64_t))off_1E34F69C8[v43])(&a26, v41 + 8);
    *(_DWORD *)(v41 + 104) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  if (a2[40])
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 24), a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v4 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)(a2 + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 8);
    *((_DWORD *)a3 + 8) = 0;
    *(_DWORD *)(a2 + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 9);
    *((_DWORD *)a3 + 9) = 0;
    *(_DWORD *)(a2 + 36) = v4;
    *(_BYTE *)(a2 + 40) = 1;
  }
  result = (__n128)a3[3];
  v6 = a3[4];
  *(_OWORD *)(a2 + 76) = *(__int128 *)((char *)a3 + 76);
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F69F8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F69F8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F69C8[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976FC1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F69C8[a27])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _OWORD v3[6];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _OWORD *))off_1E34F69C8[v4])(&v1, v3);
}

void sub_1976FC2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E34F69C8[a26])(&a12, v26);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6A20;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6A20;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F69C8[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976FC550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F69C8[a27])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _OWORD v3[6];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _OWORD *))off_1E34F69C8[v4])(&v1, v3);
}

void sub_1976FC628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E34F69C8[a26])(&a12, v26);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6A48;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6A48;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  BOOL v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  BOOL v62;
  unsigned int v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[16];
  int v74;
  char v75;
  _QWORD v76[2];
  int v77;
  char v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  char v84;
  __int128 v85;
  _OWORD v86[2];
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;

  if (!a2 || (v4 = (char *)*a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - (uint64_t)v4)
  {
    v34 = 0;
    v35 = 0;
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v34 = 0;
        v66 = *a2;
        v67 = a2[1];
        v68 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v35 = 0;
        if (v68 && v67)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v66);
          v35 = (char *)*a2;
          v34 = a2[1];
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
    goto LABEL_47;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v34 = v5;
    v35 = v4;
LABEL_47:
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37 && v34)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
    goto LABEL_48;
  }
  if (!v8)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v79);
    if (BYTE8(v79))
    {
      v76[0] = v79;
      v30 = 1;
      v77 = 1;
    }
    else
    {
      v30 = 0;
      LOBYTE(v76[0]) = 0;
    }
    v78 = v30;
    v33 = 1;
    if (!v30)
      goto LABEL_48;
    goto LABEL_39;
  }
  v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v9 || v5 - v9 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v44 = a2[3];
    if (v44)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      v69 = *a2;
      v70 = a2[1];
      v71 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v71)
      {
        if (v70)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v69);
      }
    }
LABEL_53:
    v45 = *a2;
    v46 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v47 = a2[3];
    if (v47 && v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
    v31 = 0;
    LOBYTE(v76[0]) = 0;
    goto LABEL_35;
  }
  v11 = (unint64_t *)&v4[v9];
  v12 = *v11;
  a2[2] = (uint64_t)(v11 + 1);
  v88 = 0;
  v89 = 0;
  if (v12 >= 0x2AAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>(a2, (uint64_t)&v79);
      v48 = v87;
      if (v87)
      {
        v49 = HIDWORD(v89);
        if (HIDWORD(v89) == (_DWORD)v89)
        {
          WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>((uint64_t)&v88, (unint64_t)&v79);
        }
        else
        {
          v50 = v88;
          v51 = v88 + 96 * HIDWORD(v89);
          v52 = v79;
          *(_DWORD *)(v51 + 16) = v80;
          *(_OWORD *)v51 = v52;
          *(_BYTE *)(v51 + 24) = 0;
          v53 = (_QWORD *)(v51 + 24);
          *(_BYTE *)(v51 + 40) = 0;
          v54 = (_BYTE *)(v51 + 40);
          if (v84)
          {
            *v53 = 0;
            v53[1] = 0;
            v55 = v81;
            v81 = 0;
            *v53 = v55;
            v56 = v82;
            v82 = 0;
            v57 = v50 + 96 * v49;
            *(_DWORD *)(v57 + 32) = v56;
            v58 = v83;
            v83 = 0;
            *(_DWORD *)(v57 + 36) = v58;
            *v54 = 1;
          }
          v59 = (_OWORD *)(v50 + 96 * v49);
          v61 = v85;
          v60 = v86[0];
          *(_OWORD *)((char *)v59 + 76) = *(_OWORD *)((char *)v86 + 12);
          v59[3] = v61;
          v59[4] = v60;
          ++HIDWORD(v89);
        }
      }
      if (v87)
        v62 = v84 == 0;
      else
        v62 = 1;
      if (!v62)
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v4);
      if (!v48)
        goto LABEL_94;
      --v12;
    }
    while (v12);
    LOBYTE(v80) = 0;
    v63 = HIDWORD(v89);
    v28 = (WTF *)v88;
    if (v89 > HIDWORD(v89))
    {
      v64 = (WTF *)v88;
      if (HIDWORD(v89))
      {
        if (HIDWORD(v89) >= 0x2AAAAAB)
        {
          __break(0xC471u);
          return;
        }
        v65 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v89)));
        LODWORD(v89) = 96 * v63 / 0x60;
        v88 = v65;
        v64 = v28;
        if ((WTF *)v65 != v28)
        {
          WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move((uint64_t)v28, (char *)v28 + 96 * v63, v65);
          v64 = (WTF *)v88;
        }
      }
      if (v28)
      {
        if (v64 == v28)
        {
          v88 = 0;
          LODWORD(v89) = 0;
        }
        WTF::fastFree(v28, v4);
LABEL_28:
        v28 = (WTF *)v88;
      }
      else
      {
        v28 = v64;
      }
    }
    v29 = v89;
    goto LABEL_34;
  }
  if (v12)
  {
    LODWORD(v89) = 96 * (int)v12 / 0x60u;
    v88 = WTF::fastMalloc((WTF *)(96 * v12));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>(a2, (uint64_t)&v79);
      v13 = v87;
      if (v87)
      {
        v14 = HIDWORD(v89);
        if (HIDWORD(v89) == (_DWORD)v89)
        {
          WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>((uint64_t)&v88, (unint64_t)&v79);
        }
        else
        {
          v15 = v88;
          v16 = v88 + 96 * HIDWORD(v89);
          v17 = v79;
          *(_DWORD *)(v16 + 16) = v80;
          *(_OWORD *)v16 = v17;
          *(_BYTE *)(v16 + 24) = 0;
          v18 = (_QWORD *)(v16 + 24);
          *(_BYTE *)(v16 + 40) = 0;
          v19 = (_BYTE *)(v16 + 40);
          if (v84)
          {
            *v18 = 0;
            v18[1] = 0;
            v20 = v81;
            v81 = 0;
            *v18 = v20;
            v21 = v82;
            v82 = 0;
            v22 = v15 + 96 * v14;
            *(_DWORD *)(v22 + 32) = v21;
            v23 = v83;
            v83 = 0;
            *(_DWORD *)(v22 + 36) = v23;
            *v19 = 1;
          }
          v24 = (_OWORD *)(v15 + 96 * v14);
          v26 = v85;
          v25 = v86[0];
          *(_OWORD *)((char *)v24 + 76) = *(_OWORD *)((char *)v86 + 12);
          v24[3] = v26;
          v24[4] = v25;
          ++HIDWORD(v89);
        }
      }
      if (v87)
        v27 = v84 == 0;
      else
        v27 = 1;
      if (!v27)
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v4);
      if (!v13)
        break;
      if (!--v12)
      {
        LOBYTE(v80) = 0;
        goto LABEL_28;
      }
    }
LABEL_94:
    LOBYTE(v80) = 0;
    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v4);
    goto LABEL_53;
  }
  v28 = 0;
  v29 = 0;
LABEL_34:
  v72 = v29;
  v88 = 0;
  v89 = 0;
  v31 = 1;
  LOBYTE(v80) = 1;
  WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v4);
  v79 = 0uLL;
  v76[0] = v28;
  v76[1] = v72;
  v77 = 0;
  WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v32);
LABEL_35:
  v33 = 0;
  v78 = v31;
  if (!v31)
  {
LABEL_48:
    v38 = *a2;
    v39 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40 && v39)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
    v73[0] = 0;
    v75 = 0;
LABEL_50:
    v41 = *a2;
    v42 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v43 = a2[3];
    if (!v43 || !v42 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41), !v75))
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
      return;
    }
    goto LABEL_42;
  }
LABEL_39:
  v73[0] = 0;
  v74 = -1;
  ((void (*)(__int128 *, _BYTE *, _QWORD *))off_1E34F6A70[v33])(&v79, v73, v76);
  v74 = v33;
  v75 = 1;
  if (v78)
  {
    if (v77 != -1)
    {
      ((void (*)(__int128 *, _QWORD *))off_1E34F6A60[v77])(&v79, v76);
      if (!v75)
        goto LABEL_50;
    }
  }
LABEL_42:
  WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v73);
  if (v75)
  {
    if (v74 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E34F6A60[v74])(&v79, v73);
  }
}

void sub_1976FCE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a16)
  {
    if (a14 != -1)
      ((void (*)(__int16 *, char *))off_1E34F6A60[a14])(&a26, &a12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F6A60[v2])(&v3, v1);
}

void sub_1976FCF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F6A60[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;

  v3 = WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 96 * v4;
  v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(v6 + 24) = 0;
  v8 = (_QWORD *)(v6 + 24);
  *(_BYTE *)(v6 + 40) = 0;
  v9 = (_BYTE *)(v6 + 40);
  if (*(_BYTE *)(v3 + 40))
  {
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    *v8 = v10;
    v11 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 32) = 0;
    v12 = v5 + 96 * v4;
    *(_DWORD *)(v12 + 32) = v11;
    v13 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 36) = 0;
    *(_DWORD *)(v12 + 36) = v13;
    *v9 = 1;
  }
  v14 = v5 + 96 * v4;
  result = *(__n128 *)(v3 + 48);
  v16 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v14 + 76) = *(_OWORD *)(v3 + 76);
  *(__n128 *)(v14 + 48) = result;
  *(_OWORD *)(v14 + 64) = v16;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1976FD170);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (void *)(*(_QWORD *)result + 96 * *(unsigned int *)(result + 12));
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;

  if ((void *)result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = v5 + v6;
      v8 = a3 + v6;
      v9 = *(_OWORD *)(v5 + v6);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v5 + v6 + 16);
      *(_OWORD *)v8 = v9;
      *(_BYTE *)(a3 + v6 + 24) = 0;
      v10 = (_QWORD *)(a3 + v6 + 24);
      *(_BYTE *)(v8 + 40) = 0;
      if (*(_BYTE *)(v5 + v6 + 40))
      {
        *v10 = 0;
        *(_QWORD *)(a3 + v6 + 32) = 0;
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        *v10 = v11;
        v12 = *(_DWORD *)(v7 + 32);
        *(_DWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v8 + 32) = v12;
        v13 = *(_DWORD *)(v7 + 36);
        *(_DWORD *)(v7 + 36) = 0;
        *(_DWORD *)(v8 + 36) = v13;
        *(_BYTE *)(v8 + 40) = 1;
      }
      v14 = *(_OWORD *)(v7 + 48);
      v15 = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v8 + 76) = *(_OWORD *)(v7 + 76);
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v15;
      if (*(_BYTE *)(v7 + 40))
        result = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 24, a2);
      v6 += 96;
    }
    while ((void *)(v7 + 96) != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 96 * v3;
    v6 = (uint64_t)v4 + 24;
    do
    {
      if (*(_BYTE *)(v6 + 16))
        v6 = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      v6 += 96;
      v5 -= 96;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  void *v2;
  int v5;
  __CFString *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  NSMutableArray *v13;
  objc_object *v14;
  objc_object *v15;
  CFTypeRef v16;
  id v17;
  _Unwind_Exception *v18;
  objc_object *v19;
  CFTypeRef cf;

  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(_QWORD *)a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v8 = v7;
    cf = v7;
    if (v7)
      CFRetain(v7);

    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 96 * v9;
      do
      {
        WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
        v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v16 = cf;
    v19 = v15;
    cf = 0;
    if (v16)
    {
      CFRelease(v16);
      v15 = v19;
    }
    v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6A90;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6A90;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F69C8[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976FD674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F69C8[a27])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _OWORD v3[6];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _OWORD *))off_1E34F69C8[v4])(&v1, v3);
}

void sub_1976FD74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E34F69C8[a26])(&a12, v26);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F6AB8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6AB8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976FD9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionAPIWindowsEvent::WebExtensionAPIWindowsEvent(WTF::StringImpl **a1, const WebKit::WebExtensionAPIObject *a2, int a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(_QWORD *)v6 = off_1E34F6AE0;
  *(_QWORD *)(v6 + 40) = &unk_1E34F6B10;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  WebKit::toAPIString(a3);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, (const WTF::String *)&v10, a2);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

void sub_1976FDACC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebKit::WebExtensionAPIObject *v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(WebKit::WebExtensionAPIWindowsEvent *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34F6AE0;
  *((_QWORD *)this + 5) = &unk_1E34F6B10;
  WebKit::WebExtensionAPIWindowsEvent::removeAllListeners((unsigned int *)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(WebKit::WebExtensionAPIWindowsEvent *this)
{
  WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent((WebKit::WebExtensionAPIWindowsEvent *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent((WebKit::WebExtensionAPIWindowsEvent *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::WebExtensionCallbackHandler **v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::WebExtensionCallbackHandler ***)a1;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1976FDBFC(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebExtensionAPIObject *v2;
  WTF::StringImpl *v4;

  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchWindowsEvent(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters> const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIWindows *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  double v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;

  v3 = (WebKit::WebExtensionAPIWindows *)WebKit::WebExtensionAPINamespace::windows(this);
  v4 = **(unsigned __int8 **)(a1 + 8);
  switch(v4)
  {
    case '9':
      v6 = WebKit::WebExtensionAPIWindows::onRemoved(v3);
      v7 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v7 + 96) || !*(_BYTE *)(v7 + 8))
        goto LABEL_12;
      v8 = v6;
      v9 = (void *)MEMORY[0x1E0CB37E8];
      v10 = *(_QWORD *)v7;
      v11 = (double)v10;
      if (v10 + 3 < 2)
        v11 = -1.0;
      goto LABEL_17;
    case '8':
      v8 = WebKit::WebExtensionAPIWindows::onFocusChanged(v3);
      v9 = (void *)MEMORY[0x1E0CB37E8];
      v12 = *(uint64_t **)(a1 + 16);
      if (*((_BYTE *)v12 + 96))
      {
        if (!*((_BYTE *)v12 + 8))
        {
LABEL_12:
          std::__throw_bad_optional_access[abi:sn180100]();
          return;
        }
      }
      else
      {
        v12 = &WebKit::WebExtensionWindowConstants::NoneIdentifier;
      }
      v13 = *v12;
      v11 = (double)v13;
      if (v13 + 3 < 2)
        v11 = -1.0;
LABEL_17:
      objc_msgSend(v9, "numberWithDouble:", v11);
      v14 = (id)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(v8, v14, **(_BYTE **)(a1 + 24));
      goto LABEL_18;
    case '7':
      v5 = WebKit::WebExtensionAPIWindows::onCreated(v3);
      WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(*(_QWORD *)(a1 + 16));
      v14 = (id)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(v5, v14, **(_BYTE **)(a1 + 24));
LABEL_18:

      break;
  }
}

void sub_1976FDD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;
  objc_object *v10;

  v10 = a2;
  v5 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 16 * v5;
    v8 = (_BYTE *)(v6 + 8);
    do
    {
      if ((*v8 & a3) != 0)
        v9 = objc_unsafeClaimAutoreleasedReturnValue(WebKit::WebExtensionCallbackHandler::call(*((WebKit::WebExtensionCallbackHandler **)v8
                                                                                               - 1), v10));
      v8 += 16;
      v7 -= 16;
    }
    while (v7);
  }

}

void sub_1976FDE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, _QWORD *a5)
{
  id v9;
  WebKit::WebExtensionCallbackHandler *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::WebExtensionCallbackHandler *v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  char v25;
  WebKit::WebExtensionCallbackHandler *v26;
  uint64_t v27;
  char *v28;
  char v29;
  IPC::Encoder *v30;

  v9 = a4;
  v29 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(v9, &v29, CFSTR("filters"), a5) & 1) != 0)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
    v10 = *a3;
    if (*a3)
      ++*(_DWORD *)v10;
    v26 = v10;
    v11 = v29;
    LOBYTE(v27) = v29;
    v12 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 80))
    {
      v13 = WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 72), v12 + 1, (unint64_t)&v26);
      v14 = *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84);
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)v14 = v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v13 + 8);
      ++*(_DWORD *)(a1 + 84);
      v16 = v26;
      v26 = 0;
      if (v16)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 72) + 16 * v12;
      *(_QWORD *)v17 = v10;
      *(_BYTE *)(v17 + 8) = v11;
      ++*(_DWORD *)(a1 + 84);
    }
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    v25 = *(_BYTE *)(a1 + 8);
    v26 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
    v27 = a1 + 64;
    v28 = &v25;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 1610;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v30 = (IPC::Encoder *)v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v20, (uint64_t)&v26);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v18 + 2) + 32))((_QWORD *)v18 + 2, &v30, 0);
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }

}

void sub_1976FE004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::WebExtensionCallbackHandler *a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a10);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  WebKit::WebExtensionCallbackHandler **v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v9;
  WebKit::WebExtensionCallbackHandler *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  WebKit::WebExtensionCallbackHandler *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  char v24;
  _QWORD v25[4];
  IPC::Encoder *v26;

  v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 84);
  v6 = (unint64_t)&v4[2 * v5];
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 72);
    v10 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
    v11 = (unint64_t)v10;
    do
    {
      WebKit::WebExtensionCallbackHandler::callbackFunction(*v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 == v13)
      {
        v14 = (unint64_t)v4;
        if (v11 != *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84))
        {
          if (v4 == (WebKit::WebExtensionCallbackHandler **)v10)
          {
            v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(v10, (WebKit::WebExtensionCallbackHandler *)v4, v11);
            v14 = v11 + v9 - (_QWORD)v10;
          }
        }
        v15 = *v4;
        *v4 = 0;
        v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 2);
        if (v15)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        ++v8;
        v11 = v14;
      }
      v4 += 2;
      v9 += 16;
    }
    while ((unint64_t)v4 < v6);
    v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    v6 = v11;
  }
  else
  {
    v8 = 0;
    v10 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
  }
  v16 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
  if (v10 != v16)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(v10, v16, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
    }
    v24 = *(_BYTE *)(a1 + 8);
    v25[0] = a1 + 56;
    v25[1] = a1 + 64;
    v25[2] = &v24;
    v25[3] = v8;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1642;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v26 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v19, (uint64_t)v25);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v17 + 2) + 32))((_QWORD *)v17 + 2, &v26, 0);
    v21 = v26;
    v26 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
  }
}

void sub_1976FE268(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWindowsEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  _BOOL8 result;

  if (!*(_DWORD *)(a1 + 84))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)(a1 + 72)
                                                                                                  + v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    result = v6 == v7;
    if (v6 == v7)
      break;
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1976FE328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIWindowsEvent::removeAllListeners(unsigned int *this)
{
  unsigned int v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  IPC::Encoder *v13;

  v1 = this[21];
  if (v1)
  {
    v2 = (uint64_t)this;
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
      v1 = *(_DWORD *)(v2 + 84);
    }
    v11 = *(_BYTE *)(v2 + 8);
    v12[0] = v2 + 56;
    v12[1] = v2 + 64;
    v12[2] = &v11;
    v12[3] = v1;
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 24);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 1642;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v13 = (IPC::Encoder *)v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v12);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v3 + 2) + 32))((_QWORD *)v3 + 2, &v13, 0);
    v7 = (unsigned int *)(v2 + 72);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1976FE458(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WebKit::WebExtensionCallbackHandler *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WebKit::WebExtensionCallbackHandler *result, unint64_t a2)
{
  int v2;
  WebKit::WebExtensionCallbackHandler *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1976FE5A8);
    }
    v3 = result;
    v4 = *(WebKit::WebExtensionCallbackHandler **)result;
    v5 = (WebKit::WebExtensionCallbackHandler *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2, uint64_t a3)
{
  WebKit::WebExtensionCallbackHandler *v5;
  WebKit::WebExtensionCallbackHandler *v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WebKit::WebExtensionCallbackHandler **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8);
      result = *(WebKit::WebExtensionCallbackHandler **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      v5 = (WebKit::WebExtensionCallbackHandler *)((char *)v5 + 16);
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2, unint64_t a3)
{
  WebKit::WebExtensionCallbackHandler *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  _BYTE *v5;
  uint64_t v6;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (_BYTE *)(((a2 - result) & 0xFFFFFFFFFFFFFFF0) + a3 - 8);
    do
    {
      v6 = *((_QWORD *)v3 - 2);
      v3 = (WebKit::WebExtensionCallbackHandler *)((char *)v3 - 16);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v5 - 1) = v6;
      *v5 = *((_BYTE *)v3 + 8);
      result = *(WebKit::WebExtensionCallbackHandler **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      v5 -= 16;
    }
    while (v3 != v4);
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WebKit::WebExtensionCallbackHandler **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(v4, (WebKit::WebExtensionCallbackHandler *)((char *)v4 + 16 * v5), (uint64_t)result);
    }
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 16 * a2);
    v6 = 16 * v4 - 16 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref((WebKit::WebExtensionCallbackHandler *)result);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WebKit::WebExtension::WebExtension(uint64_t a1, void *a2, _QWORD *a3)
{
  WebKit *v5;
  WebKit *v6;
  WebKit *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;

  v5 = a2;
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34F6B78;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  v6 = v5;
  v7 = v6;
  *(_QWORD *)(a1 + 128) = v6;
  if (v6)
    CFRetain(v6);

  *(_QWORD *)(a1 + 136) = 0;
  -[WebKit resourceURL](v7, "resourceURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "URLByStandardizingPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "absoluteURL");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  *(_QWORD *)(a1 + 144) = v10;
  if (v10)
    CFRetain(v10);

  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) &= 0x8000u;
  if (a3)
    *a3 = 0;
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)a1))
  {
    WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 184));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "lastObject");
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

{
  WebKit *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v5 = a2;
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34F6B78;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  -[WebKit URLByStandardizingPath](v5, "URLByStandardizingPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "absoluteURL");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  *(_QWORD *)(a1 + 144) = v7;
  if (v7)
    CFRetain(v7);

  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) &= 0x8000u;
  if (a3)
    *a3 = 0;
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)a1))
  {
    WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 184));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "lastObject");
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

void sub_1976FE950(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  void *v3;
  uint64_t v4;
  const void **v5;
  void *v6;
  const void **v7;
  const void **v8;
  void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t *v37;
  WTF::StringImpl **v38;
  WTF::StringImpl **v39;
  uint64_t *v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF::StringImpl *v44;
  void *v45;

  v11 = *(const void **)(v1 + 336);
  *(_QWORD *)(v1 + 336) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(v1 + 328);
  *(_QWORD *)(v1 + 328) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *v8;
  *v8 = 0;
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(v1 + 304);
  *(_QWORD *)(v1 + 304) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(v1 + 296);
  *(_QWORD *)(v1 + 296) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(v1 + 280);
  *(_QWORD *)(v1 + 280) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(v1 + 264);
  *(_QWORD *)(v1 + 264) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v1 + 256);
  *(_QWORD *)(v1 + 256) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v1 + 248);
  *(_QWORD *)(v1 + 248) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v1 + 240);
  *(_QWORD *)(v1 + 240) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(v1 + 232);
  *(_QWORD *)(v1 + 232) = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v1 + 224);
  *(_QWORD *)(v1 + 224) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v1 + 216);
  *(_QWORD *)(v1 + 216) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;
  if (v28)
    CFRelease(v28);
  v29 = *v5;
  *v5 = 0;
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(v1 + 176);
  *(_QWORD *)(v1 + 176) = 0;
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(v1 + 160);
  *(_QWORD *)(v1 + 160) = 0;
  if (v32)
    CFRelease(v32);
  v33 = *v7;
  *v7 = 0;
  if (v33)
    CFRelease(v33);
  v34 = *(const void **)(v1 + 144);
  *(_QWORD *)(v1 + 144) = 0;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v36)
    CFRelease(v36);
  v37 = *(uint64_t **)(v1 + 120);
  if (v37)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v37, v10);
  v38 = *(WTF::StringImpl ***)(v1 + 112);
  if (v38)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, (WTF::StringImpl *)v10);
  v39 = *(WTF::StringImpl ***)(v1 + 104);
  if (v39)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v39, (WTF::StringImpl *)v10);
  v40 = *(uint64_t **)(v1 + 96);
  if (v40)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v40, v10);
  v41 = *(uint64_t **)(v1 + 88);
  if (v41)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v41, v10);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1 + 72, v10);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v1 + 56), v42);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1 + 40, v43);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v44);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v45);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::manifestParsedSuccessfully(WebKit::WebExtension *this)
{
  void *v1;

  if ((*((_WORD *)this + 172) & 4) != 0)
  {
    v1 = (void *)*((_QWORD *)this + 19);
  }
  else
  {
    WebKit::WebExtension::manifest(this);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v1 != 0;
}

void sub_1976FED64(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unsigned int **v3;
  uint64_t v4;
  const void **v5;
  void *v6;
  const void **v7;
  const void **v8;
  void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t *v37;
  WTF::StringImpl **v38;
  WTF::StringImpl **v39;
  uint64_t *v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF::StringImpl *v44;
  void *v45;

  v11 = *(const void **)(v2 + 336);
  *(_QWORD *)(v2 + 336) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(v2 + 328);
  *(_QWORD *)(v2 + 328) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *v8;
  *v8 = 0;
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(v2 + 304);
  *(_QWORD *)(v2 + 304) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(v2 + 296);
  *(_QWORD *)(v2 + 296) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(v2 + 288);
  *(_QWORD *)(v2 + 288) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(v2 + 272);
  *(_QWORD *)(v2 + 272) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(v2 + 264);
  *(_QWORD *)(v2 + 264) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v2 + 256);
  *(_QWORD *)(v2 + 256) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v2 + 248);
  *(_QWORD *)(v2 + 248) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v2 + 240);
  *(_QWORD *)(v2 + 240) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(v2 + 232);
  *(_QWORD *)(v2 + 232) = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v2 + 216);
  *(_QWORD *)(v2 + 216) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(v2 + 208);
  *(_QWORD *)(v2 + 208) = 0;
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;
  if (v28)
    CFRelease(v28);
  v29 = *v5;
  *v5 = 0;
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(v2 + 176);
  *(_QWORD *)(v2 + 176) = 0;
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v32)
    CFRelease(v32);
  v33 = *v7;
  *v7 = 0;
  if (v33)
    CFRelease(v33);
  v34 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (v36)
    CFRelease(v36);
  v37 = *(uint64_t **)(v2 + 120);
  if (v37)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v37, v10);
  v38 = *(WTF::StringImpl ***)(v2 + 112);
  if (v38)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, (WTF::StringImpl *)v10);
  v39 = *(WTF::StringImpl ***)(v2 + 104);
  if (v39)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v39, (WTF::StringImpl *)v10);
  v40 = *(uint64_t **)(v2 + 96);
  if (v40)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v40, v10);
  v41 = *(uint64_t **)(v2 + 88);
  if (v41)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v41, v10);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72, v10);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 56), v42);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, v43);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v44);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v45);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::WebExtension(WebKit::WebExtension *this, NSDictionary *a2, NSDictionary *a3)
{
  NSDictionary *v5;
  NSDictionary *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t result;

  v5 = a2;
  v6 = a3;
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v6);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34F6B78;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  v7 = (void *)-[NSDictionary mutableCopy](v6, "mutableCopy");
  v8 = v7;
  v9 = (_QWORD *)((char *)this + 160);
  if (v7)
  {
    v10 = v7;
    *v9 = v10;
    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  *v9 = v10;
  if (v10)
  {
LABEL_4:
    CFRetain(v10);

    if (v8)
      goto LABEL_6;
  }

LABEL_6:
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 312) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_WORD *)this + 172) &= 0x8000u;
  WebKit::encodeJSONData(v5, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKey:", v11, CFSTR("manifest.json"));

    return (uint64_t)this;
  }
  else
  {
    result = 197;
    __break(0xC471u);
  }
  return result;
}

void sub_1976FF170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  void *v6;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t *v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  void *v21;

  v9 = *(const void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *(uint64_t **)(v3 + 120);
  if (v13)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v13, v8);
  v14 = *(WTF::StringImpl ***)(v3 + 112);
  if (v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, (WTF::StringImpl *)v8);
  v15 = *(WTF::StringImpl ***)(v3 + 104);
  if (v15)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, (WTF::StringImpl *)v8);
  v16 = *(uint64_t **)(v3 + 96);
  if (v16)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v16, v8);
  v17 = *(uint64_t **)(v3 + 88);
  if (v17)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v17, v8);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 72, v8);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v3 + 56), v18);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 40, v19);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v20);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, v21);

  _Unwind_Resume(a1);
}

WebKit::WebExtension *WebKit::WebExtension::WebExtension(WebKit::WebExtension *this, NSDictionary *a2)
{
  NSDictionary *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v3);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34F6B78;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  v4 = (void *)-[NSDictionary mutableCopy](v3, "mutableCopy");
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    *((_QWORD *)this + 20) = v6;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)this + 20) = v6;
    if (!v6)
    {
LABEL_5:

      goto LABEL_6;
    }
  }
  CFRetain(v6);

  if (!v5)
    goto LABEL_5;
LABEL_6:

  *((_BYTE *)this + 312) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_WORD *)this + 172) &= 0x8000u;

  return this;
}

void sub_1976FF524(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  uint64_t *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  void *v20;

  v8 = *(const void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(uint64_t **)(v2 + 120);
  if (v12)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v12, v7);
  v13 = *(WTF::StringImpl ***)(v2 + 112);
  if (v13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, (WTF::StringImpl *)v7);
  v14 = *(WTF::StringImpl ***)(v2 + 104);
  if (v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, (WTF::StringImpl *)v7);
  v15 = *(uint64_t **)(v2 + 96);
  if (v15)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v15, v7);
  v16 = *(uint64_t **)(v2 + 88);
  if (v16)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v16, v7);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72, v7);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 56), v17);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, v18);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v19);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v20);

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::manifest(WebKit::WebExtension *this)
{
  __int16 v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id *v8;
  const void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  const void *v14;
  _WKWebExtensionLocalization *v15;
  const void **v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v23;
  id v24;
  void *v25;

  v2 = *((_WORD *)this + 172);
  if ((v2 & 4) != 0)
  {
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  *((_WORD *)this + 172) = v2 | 4;
  WebKit::WebExtension::resourceDataForPath((uint64_t)this, CFSTR("manifest.json"), 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v24 = 0;
    WebKit::parseJSON(v5, 0, (uint64_t)&v24);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v24;
    WTF::RetainPtr<NSDictionary>::RetainPtr(&v25, v6);
    v8 = (id *)((char *)this + 152);
    v9 = (const void *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v25;
    v25 = 0;
    if (v9)
      CFRelease(v9);

    if (*v8)
    {

      WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectForKey:", CFSTR("default_locale"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v11);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12)
        CFRetain(v12);

      v14 = (const void *)*((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v13;
      if (v14)
        CFRelease(v14);

      v15 = -[_WKWebExtensionLocalization initWithWebExtension:]([_WKWebExtensionLocalization alloc], "initWithWebExtension:", this);
      v16 = (const void **)((char *)this + 176);
      WTF::RetainPtr<_WKWebExtensionLocalization>::operator=(v16, v15);

      WTF::RetainPtr<NSMutableArray>::get((id *)v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSMutableArray>::get(v8);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "localizedDictionaryForDictionary:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSDictionary>::RetainPtr(&v25, v19);
      v20 = *v8;
      *v8 = v25;
      v25 = 0;
      if (v20)
        CFRelease(v20);

      WTF::RetainPtr<NSMutableArray>::get(v8);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_16;
    }
    WebKit::WebExtension::createError(this, 4, 0, v7);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)this, v23);

  }
  v21 = 0;
LABEL_16:

  return v21;
}

void sub_1976FF860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::recordError(uint64_t a1, void *a2)
{
  WebKit *v3;
  const void **v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSError *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v5 = *(_QWORD *)(a1 + 184);
  v4 = (const void **)(a1 + 184);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSMutableArray>::operator=(v4, v6);

  }
  v7 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    WebKit::privacyPreservingDescription(v3, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v10;
    _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error recorded: %{public}@", (uint8_t *)&v11, 0xCu);

  }
  WTF::RetainPtr<NSMutableArray>::get((id *)v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObject:", v3);

}

void sub_1976FFA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::createError(WebKit::WebExtension *a1, int a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const __CFString *v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  __CFString *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const __CFString *v19;
  const __CFString *v20;
  WTF::StringImpl *v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  __CFString *v26;
  WTF::StringImpl *v27;
  void *v28;
  void *v29;
  const __CFString *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  WTF::StringImpl *v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t *v37;
  __CFString **v38;
  uint64_t v39;
  void *v40;
  void *v41;
  WTF::StringImpl *v43;
  uint64_t v44;
  __CFString *v45;
  _QWORD v46[2];
  _QWORD v47[3];

  LODWORD(v11) = a2;
  v47[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v9 = v7;
  v10 = 0;
  v11 = v11;
  switch((int)v11)
  {
    case 2:
      goto LABEL_71;
    case 3:
      v10 = 0;
      v11 = 3;
      goto LABEL_71;
    case 4:
      objc_msgSend(v7, "userInfo");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2938]);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        v15 = (void *)MEMORY[0x1E0CB3940];
        WebCore::localizedString((WebCore *)CFSTR("Unable to parse manifest: %@"), v14);
        if (v43)
          v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v16 = &stru_1E351F1B8;
        objc_msgSend(v15, "stringWithFormat:", v16, v13);
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        WebCore::localizedString((WebCore *)CFSTR("Unable to parse manifest because of an unexpected format."), v14);
        if (!v43)
        {
          v10 = &stru_1E351F1B8;
          goto LABEL_82;
        }
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v17);
        else
          *(_DWORD *)v43 -= 2;
      }
LABEL_82:

      v11 = 4;
      goto LABEL_71;
    case 5:
      if (v43)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v18);
        else
          *(_DWORD *)v43 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v11 = 5;
      goto LABEL_71;
    case 6:
      if (WebKit::WebExtension::manifestVersion(a1) >= 3.0)
      {
        if (!v43)
          goto LABEL_85;
      }
      else
      {
        if (!v43)
          goto LABEL_85;
      }
      goto LABEL_67;
    case 7:
      if (WebKit::WebExtension::manifestVersion(a1) >= 3.0)
      {
        if (!v43)
          goto LABEL_85;
      }
      else
      {
        if (!v43)
          goto LABEL_85;
      }
      goto LABEL_67;
    case 8:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 9:
      if (v43)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v21);
        else
          *(_DWORD *)v43 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v11 = 8;
      goto LABEL_71;
    case 10:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 11:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 12:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 13:
      objc_msgSend(v7, "userInfo");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2938]);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v23)
      {
        v25 = (void *)MEMORY[0x1E0CB3940];
        if (v43)
          v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v26 = &stru_1E351F1B8;
        objc_msgSend(v25, "stringWithFormat:", v26, v23);
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if (!v43)
        {
          v10 = &stru_1E351F1B8;
          goto LABEL_84;
        }
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v27);
        else
          *(_DWORD *)v43 -= 2;
      }
LABEL_84:

      v11 = 7;
      goto LABEL_71;
    case 14:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 15:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 16:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 17:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 18:
      WebKit::WebExtension::manifest(a1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectForKey:", CFSTR("options_ui"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (v29)
      {
        if (!v43)
          goto LABEL_85;
      }
      else
      {
        if (!v43)
          goto LABEL_85;
      }
      goto LABEL_67;
    case 19:
      WebKit::WebExtension::manifest(a1);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "objectForKey:", CFSTR("browser_url_overrides"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v32)
      {
        if (v43)
          goto LABEL_67;
LABEL_85:
        v10 = &stru_1E351F1B8;
        goto LABEL_70;
      }
      if (!v43)
        goto LABEL_85;
LABEL_67:
      v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v34);
      else
        *(_DWORD *)v43 -= 2;
LABEL_70:
      v11 = 6;
LABEL_71:
      if (objc_msgSend(v6, "length"))
      {
        v35 = (__CFString *)v6;

        v10 = v35;
      }
      if (v9)
      {
        v36 = *MEMORY[0x1E0CB3388];
        v46[0] = *MEMORY[0x1E0CB2D50];
        v46[1] = v36;
        v47[0] = v10;
        v47[1] = v9;
        v37 = v46;
        v38 = (__CFString **)v47;
        v39 = 2;
      }
      else
      {
        v44 = *MEMORY[0x1E0CB2D50];
        v45 = v10;
        v37 = &v44;
        v38 = &v45;
        v39 = 1;
      }
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("_WKWebExtensionErrorDomain"), v11, v40);

      return v41;
    case 20:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    case 21:
      if (v43)
        goto LABEL_67;
      goto LABEL_85;
    default:
      v10 = 0;
      v11 = 1;
      goto LABEL_71;
  }
}

void sub_197700150(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::resourceDataForPath(uint64_t a1, void *a2, int a3, char a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  id v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  id v33;
  WTF::StringImpl *v34;

  v7 = a2;
  if (!objc_msgSend(v7, "hasPrefix:", CFSTR("data:")))
  {
    if (objc_msgSend(v7, "hasPrefix:", CFSTR("/")))
    {
      objc_msgSend(v7, "substringFromIndex:", 1);
      v13 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v13;
    }
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 160));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_opt_class();
      WTF::dynamic_objc_cast<NSData>(v15);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
      {
        objc_opt_class();
        WTF::dynamic_objc_cast<NSString>(v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v16;
        if (!v16)
        {
          WebKit::encodeJSONData(v15, 1, 0);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v12)
          {
            __break(0xC471u);
            JUMPOUT(0x197700768);
          }
          WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 160));
          v17 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "setObject:forKey:", v12, v7);
          goto LABEL_18;
        }
        objc_msgSend(v16, "dataUsingEncoding:", 4);
        v18 = objc_claimAutoreleasedReturnValue();
LABEL_17:
        v12 = (void *)v18;
LABEL_18:

      }
LABEL_19:

      goto LABEL_20;
    }
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)a1);
    if (*(_BYTE *)(a1 + 312))
    {
      if (objc_msgSend(v7, "isEqualToString:", CFSTR("_generated_service_worker.js")))
      {
LABEL_15:
        WebKit::WebExtension::generatedBackgroundContent((WebKit::WebExtension *)a1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dataUsingEncoding:", 4);
        v19 = objc_claimAutoreleasedReturnValue();
        goto LABEL_12;
      }
    }
    else if (objc_msgSend(v7, "isEqualToString:", CFSTR("_generated_background_page.html")))
    {
      goto LABEL_15;
    }
    WebKit::WebExtension::resourceFileURLForPath((WebKit::WebExtension *)a1, (NSString *)v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v15)
    {
      if ((a4 & 1) == 0)
      {
        WebCore::formatLocalizedString((WebCore *)CFSTR("Unable to find \"%@\" in the extension’s resources. It is an invalid path."), v21, v7);
        v25 = v34 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
        WebKit::WebExtension::createError((WebKit::WebExtension *)a1, 2, v25, 0);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError(a1, v26);

        v28 = v34;
        v34 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v27);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      v12 = 0;
      goto LABEL_19;
    }
    v33 = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v15, 1, &v33);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v33;
    if (v12)
    {
      if (a3)
      {
        if (!*(_QWORD *)(a1 + 160))
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 160), v23);

        }
        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 160));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setObject:forKey:", v12, v7);

      }
    }
    else if ((a4 & 1) == 0)
    {
      WebCore::formatLocalizedString((WebCore *)CFSTR("Unable to find \"%@\" in the extension’s resources."), v22, v7);
      v29 = v34 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
      WebKit::WebExtension::createError((WebKit::WebExtension *)a1, 2, v29, v17);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError(a1, v30);

      v32 = v34;
      v34 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    goto LABEL_18;
  }
  v8 = objc_msgSend(v7, "rangeOfString:", CFSTR(";base64,"));
  if (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v7, "substringFromIndex:", v8 + v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v15, 0);
LABEL_12:
    v12 = (void *)v19;
    goto LABEL_19;
  }
  v10 = objc_msgSend(v7, "rangeOfString:", CFSTR(","));
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v7, "substringFromIndex:", v10 + v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringByRemovingPercentEncoding");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "dataUsingEncoding:", 4);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  objc_msgSend(MEMORY[0x1E0C99D50], "data");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:

  return v12;
}

void sub_197700784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionLocalization>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197700918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::serializeManifest(WebKit::WebExtension *this@<X0>, WebKit **a2@<X8>)
{
  void *v3;
  void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WebKit::WebExtension::manifest(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::encodeJSONData(v3, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSData>::RetainPtr(&cf, v4);
  API::Data::createWithoutCopying((id *)&cf, a2);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);

}

void sub_1977009AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

double WebKit::WebExtension::manifestVersion(WebKit::WebExtension *this)
{
  void *v1;
  void *v2;
  double v3;
  double v4;

  WebKit::WebExtension::manifest(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSNumber>(v1, (uint64_t)CFSTR("manifest_version"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  return v4;
}

void sub_197700A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::serializeLocalization(id *this@<X0>, WebKit **a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  WTF::RetainPtr<NSMutableArray>::get(this + 22);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizationDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::encodeJSONData(v4, 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSData>::RetainPtr(&cf, v5);
  API::Data::createWithoutCopying((id *)&cf, a2);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);

}

void sub_197700AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;
  void *v12;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

SecStaticCodeRef WebKit::WebExtension::bundleStaticCode(WebKit::WebExtension *this)
{
  id *v1;
  SecStaticCodeRef result;
  void *v4;
  const __CFURL *v5;
  OSStatus v6;
  const void *v7;
  SecStaticCodeRef staticCode;

  v1 = (id *)((char *)this + 128);
  if (!*((_QWORD *)this + 16))
    return 0;
  result = (SecStaticCodeRef)*((_QWORD *)this + 17);
  if (result)
    return result;
  staticCode = 0;
  WTF::RetainPtr<NSMutableArray>::get(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleURL");
  v5 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v6 = SecStaticCodeCreateWithPath(v5, 0, &staticCode);

  result = staticCode;
  if (v6 || !staticCode)
  {
    if (!staticCode)
      return result;
    CFRelease(staticCode);
    return 0;
  }
  v7 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = staticCode;
  if (v7)
  {
    CFRelease(v7);
    return (SecStaticCodeRef)*((_QWORD *)this + 17);
  }
  return result;
}

void sub_197700BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bundleHash(WebKit::WebExtension *this)
{
  const __SecCode *v1;
  const void *Value;
  id v3;
  CFDictionaryRef information;

  v1 = WebKit::WebExtension::bundleStaticCode(this);
  if (v1)
  {
    information = 0;
    if (!SecCodeCopySigningInformation(v1, 0, &information) && information)
    {
      Value = CFDictionaryGetValue(information, (const void *)*MEMORY[0x1E0CD6D40]);
      v3 = (id)WTF::checked_cf_cast<__CFData const*>(Value);
      CFRelease(information);
      return v3;
    }
    if (information)
      CFRelease(information);
  }
  return 0;
}

void sub_197700C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::isWebAccessibleResource(WebKit::WebExtension *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25[2];

  WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded(this);
  WTF::URL::path(a2);
  if ((v6 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  if (v25[0])
  {
    WTF::StringImpl::substring(v25[0]);
    v8 = v25[0];
    v25[0] = v25[1];
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  else
  {
    v25[0] = 0;
  }
  v9 = *((_DWORD *)this + 13);
  if (!v9)
  {
LABEL_28:
    v22 = 0;
    goto LABEL_30;
  }
  v10 = *((_QWORD *)this + 5);
  v11 = v10 + 24 * v9;
  while (1)
  {
    v12 = !*(_QWORD *)v10 || *(_DWORD *)(*(_QWORD *)v10 - 12) == 0;
    v13 = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)v10);
    v15 = v13;
    v16 = v7;
    v17 = *(_QWORD *)v10 ? *(_QWORD *)v10 + 8 * *(unsigned int *)(*(_QWORD *)v10 - 4) : 0;
    if ((WTF::StringImpl *)v17 != v13)
      break;
LABEL_22:
    if ((v12 & 1) != 0)
      goto LABEL_23;
LABEL_27:
    v10 += 24;
    if (v10 == v11)
      goto LABEL_28;
  }
  while (1)
  {
    v18 = WebKit::WebExtensionMatchPattern::matchesURL(*(_BYTE **)v15, a3, 0);
    if ((v18 & 1) != 0)
      break;
    while (1)
    {
      v15 = (WTF::StringImpl *)((char *)v15 + 8);
      if (v15 == v16)
        break;
      if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
        goto LABEL_21;
    }
    v15 = v16;
LABEL_21:
    v12 |= v18;
    if (v15 == (WTF::StringImpl *)v17)
      goto LABEL_22;
  }
LABEL_23:
  v19 = *(unsigned int *)(v10 + 20);
  if (!(_DWORD)v19)
    goto LABEL_27;
  v20 = *(WebCore **)(v10 + 8);
  v21 = 8 * v19;
  while ((WebCore::matchesWildcardPattern(v20, (const WTF::String *)v25, v14) & 1) == 0)
  {
    v20 = (WebCore *)((char *)v20 + 8);
    v21 -= 8;
    if (!v21)
      goto LABEL_27;
  }
  v22 = 1;
LABEL_30:
  v23 = v25[0];
  v25[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v7);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v22;
}

void sub_197700E58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded(WebKit::WebExtension *this)
{
  double v2;
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebKit::WebExtensionMatchPattern *v32;
  void *v33;
  WTF::StringImpl *v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  WebKit::WebExtension *v51;
  id obj;
  WTF::StringImpl *v53;
  uint64_t v54;
  int v55;
  int v56;
  WebKit::WebExtensionMatchPattern *v57;
  WebKit::WebExtensionMatchPattern *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this) || (*((_WORD *)this + 172) & 0x800) != 0)
    return;
  *((_WORD *)this + 172) |= 0x800u;
  v2 = WebKit::WebExtension::manifestVersion(this);
  v51 = this;
  v3 = (id *)((char *)this + 152);
  if (v2 < 3.0)
  {
    v4 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, CFSTR("web_accessible_resources"), 0, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      WebKit::filterObjects<NSArray>(v5, &__block_literal_global_142);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "count"))
      {
        v53 = 0;
        WTF::makeVector<WTF::String>(v7, (uint64_t)&v54);
        v9 = *((_DWORD *)v51 + 13);
        if (v9 == *((_DWORD *)v51 + 12))
        {
          WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>((uint64_t)v51 + 40, (unint64_t)&v53);
        }
        else
        {
          v46 = *((_QWORD *)v51 + 5) + 24 * v9;
          *(_QWORD *)v46 = 0;
          v47 = v53;
          v53 = 0;
          *(_QWORD *)(v46 + 8) = 0;
          *(_QWORD *)(v46 + 16) = 0;
          *(_QWORD *)v46 = v47;
          v48 = v54;
          v54 = 0;
          *(_QWORD *)(v46 + 8) = v48;
          LODWORD(v48) = v55;
          v55 = 0;
          *(_DWORD *)(v46 + 16) = v48;
          LODWORD(v48) = v56;
          v56 = 0;
          *(_DWORD *)(v46 + 20) = v48;
          ++*((_DWORD *)v51 + 13);
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v8);
        if (v53)
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v53, v49);
      }
      goto LABEL_62;
    }
    WTF::RetainPtr<NSMutableArray>::get(v3);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "objectForKey:", CFSTR("web_accessible_resources"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    if (v42)
      goto LABEL_55;
    goto LABEL_56;
  }
  v10 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v3, CFSTR("web_accessible_resources"), 0, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = v11;
  if (!v11)
  {
    WTF::RetainPtr<NSMutableArray>::get(v3);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "objectForKey:", CFSTR("web_accessible_resources"), 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    if (v44)
    {
LABEL_55:
      WebKit::WebExtension::createError(v51, 21, 0, 0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)v51, v45);

    }
LABEL_56:
    v7 = 0;
    goto LABEL_62;
  }
  v66 = 0u;
  v67 = 0u;
  v65 = 0u;
  v64 = 0u;
  obj = v11;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16, v50);
  if (!v12)
  {

    goto LABEL_58;
  }
  v13 = 0;
  v14 = *(_QWORD *)v65;
  do
  {
    v15 = 0;
    v16 = v13;
    do
    {
      if (*(_QWORD *)v65 != v14)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v15);
      v18 = objc_opt_class();
      WebKit::objectForKey<NSArray>(v17, (uint64_t)CFSTR("resources"), 0, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_opt_class();
      WebKit::objectForKey<NSArray>(v17, (uint64_t)CFSTR("matches"), 0, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::filterObjects<NSArray>(v19, &__block_literal_global_35);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      WebKit::filterObjects<NSArray>(v21, &__block_literal_global_141);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = 1;
      if (v22 && v23)
      {
        if (objc_msgSend(v22, "count") && objc_msgSend(v23, "count"))
        {
          v63 = 0;
          v59 = 0u;
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v24 = v23;
          v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
          if (v25)
          {
            v26 = *(_QWORD *)v60;
            do
            {
              for (i = 0; i != v25; ++i)
              {
                if (*(_QWORD *)v60 != v26)
                  objc_enumerationMutation(v24);
                MEMORY[0x19AEABCC8](&v53, *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * i));
                WebKit::WebExtensionMatchPattern::getOrCreate(&v53, v28, &v58);
                v30 = v53;
                v53 = 0;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2)
                    WTF::StringImpl::destroy(v30, v29);
                  else
                    *(_DWORD *)v30 -= 2;
                }
                if (v58)
                {
                  if (WebKit::WebExtensionMatchPattern::isSupported(v58))
                  {
                    v57 = v58;
                    v58 = 0;
                    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v63, (uint64_t *)&v57, (uint64_t)&v53);
                    v31 = (uint64_t)v57;
                    v57 = 0;
                    if (v31)
                      CFRelease(*(CFTypeRef *)(v31 + 8));
                  }
                  else
                  {
                    v16 = 1;
                  }
                  v32 = v58;
                  v58 = 0;
                  if (v32)
                    CFRelease(*((CFTypeRef *)v32 + 1));
                }
              }
              v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
            }
            while (v25);
          }

          v34 = v63;
          if (v63)
          {
            if (!*((_DWORD *)v63 - 3))
            {
              v16 = 1;
              goto LABEL_46;
            }
            v63 = 0;
            v53 = v34;
            WTF::makeVector<WTF::String>(v22, (uint64_t)&v54);
            v36 = *((_DWORD *)v51 + 13);
            if (v36 == *((_DWORD *)v51 + 12))
            {
              WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>((uint64_t)v51 + 40, (unint64_t)&v53);
            }
            else
            {
              v37 = *((_QWORD *)v51 + 5) + 24 * v36;
              *(_QWORD *)v37 = 0;
              v38 = v53;
              v53 = 0;
              *(_QWORD *)(v37 + 8) = 0;
              *(_QWORD *)(v37 + 16) = 0;
              *(_QWORD *)v37 = v38;
              v39 = v54;
              v54 = 0;
              *(_QWORD *)(v37 + 8) = v39;
              LODWORD(v39) = v55;
              v55 = 0;
              *(_DWORD *)(v37 + 16) = v39;
              LODWORD(v39) = v56;
              v56 = 0;
              *(_DWORD *)(v37 + 20) = v39;
              ++*((_DWORD *)v51 + 13);
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v35);
            if (v53)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v53, v33);
            v34 = v63;
            if (v63)
LABEL_46:
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v34, v33);
          }
          else
          {
            v16 = 1;
          }
        }
        v13 = v16;
      }

      ++v15;
      v16 = v13;
    }
    while (v15 != v12);
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
  }
  while (v12);

  if ((v13 & 1) != 0)
  {
    WebKit::WebExtension::createError(v51, 21, 0, 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)v51, v40);

  }
LABEL_58:
  v7 = obj;
LABEL_62:

}

void sub_1977014D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSArray>(id *a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;

  v7 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSArray>(v8, (uint64_t)v7, a3, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1977016A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

id WebKit::WebExtension::resourceFileURLForPath(WebKit::WebExtension *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (-[NSString hasPrefix:](v3, "hasPrefix:", CFSTR("/")))
  {
    -[NSString substringFromIndex:](v3, "substringFromIndex:", 1);
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (NSString *)v4;
  }
  if (!-[NSString length](v3, "length") || !*((_QWORD *)this + 18))
    goto LABEL_9;
  v5 = (void *)MEMORY[0x1E0C99E98];
  -[NSString stringByRemovingPercentEncoding](v3, "stringByRemovingPercentEncoding");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 18);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v7);
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fileURLWithPath:isDirectory:relativeToURL:", v6, 0, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v8, "URLByStandardizingPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "absoluteString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 18);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v11);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "absoluteString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v8) = objc_msgSend(v10, "hasPrefix:", v12);

  if ((v8 & 1) == 0)
  {
    v13 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v15 = 138477827;
      v16 = v9;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Resource URL path escape attempt: %{private}@", (uint8_t *)&v15, 0xCu);
    }

LABEL_9:
    v9 = 0;
  }

  return v9;
}

void sub_1977018D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::resourceStringForPath(uint64_t a1, void *a2, char a3, char a4)
{
  id v7;
  uint64_t v8;
  const void **v9;
  void *v10;
  id v11;
  CFTypeRef v12;
  void *v13;
  void *v14;
  void *v15;
  id v17;
  CFTypeRef cf;

  v7 = a2;
  if (objc_msgSend(v7, "hasPrefix:", CFSTR("/")))
  {
    objc_msgSend(v7, "substringFromIndex:", 1);
    v8 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v8;
  }
  v9 = (const void **)(a1 + 160);
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 160));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v10);

  WebKit::objectForKey<NSString>((id *)&cf, v7, 1);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  if (!v11)
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)a1);
    if (*(_BYTE *)(a1 + 312))
    {
      if (objc_msgSend(v7, "isEqualToString:", CFSTR("_generated_service_worker.js")))
      {
LABEL_8:
        WebKit::WebExtension::generatedBackgroundContent((WebKit::WebExtension *)a1);
        v11 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_16;
      }
    }
    else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("_generated_background_page.html")) & 1) != 0)
    {
      goto LABEL_8;
    }
    WebKit::WebExtension::resourceDataForPath(a1, v7, 0, a4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:", v13, 0, &v17, 0);
    v11 = v17;
    if (v11 && (a3 & 1) != 0)
    {
      if (!*v9)
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSMutableDictionary>::operator=(v9, v14);

      }
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setObject:forKey:", v11, v7);

    }
  }
LABEL_16:

  return v11;
}

void sub_197701AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSString>(id *a1, void *a2, int a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSString>(v6, (uint64_t)v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_197701BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::generatedBackgroundContent(WebKit::WebExtension *this)
{
  const void **v1;
  void *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  char v16;
  BOOL v17;

  v1 = (const void **)((char *)this + 304);
  if (*((_QWORD *)this + 38))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 38);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
    if (*((_OWORD *)this + 18) == 0
      && (WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)this + 280, *((_QWORD *)this + 35)),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v5 = objc_msgSend(v4, "count"),
          v4,
          v5))
    {
      WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
      v6 = *((unsigned __int8 *)this + 312);
      v7 = WebKit::WebExtension::backgroundContentUsesModules((id *)this);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = ___ZN6WebKit12WebExtension26generatedBackgroundContentEv_block_invoke;
      v15[3] = &__block_descriptor_34_e41___NSString_24__0__NSNumber_8__NSString_16l;
      v16 = v6;
      v17 = v7;
      v8 = v15;
      WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)this + 280, *((_QWORD *)this + 35));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::mapObjects<NSArray>(v9, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(v10, "componentsJoinedByString:", CFSTR("\n"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSString>::operator=(v1, v11);
      }
      else
      {
        v12 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v10, "componentsJoinedByString:", CFSTR("\n"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "stringWithFormat:", CFSTR("<!DOCTYPE html>\n<body>\n%@\n</body>"), v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSString>::operator=(v1, v13);

      }
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)v1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      return v14;
    }
    else
    {
      return 0;
    }
  }
}

void sub_197701D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSMutableDictionary>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197701E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSData>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_197701E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::hasRequestedPermission(WebKit::WebExtension *this, NSString *a2)
{
  NSString *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  WTF *v14;
  WTF::StringImpl *v15;

  v3 = a2;
  MEMORY[0x19AEABCC8](&v15, v3);
  v6 = *((_QWORD *)this + 13);
  v7 = v15;
  if (v6)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = *((_DWORD *)v15 + 4);
    if (v10 >= 0x100)
      v11 = v10 >> 8;
    else
      v11 = WTF::StringImpl::hashSlowCase(v15);
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v9;
      v14 = *(WTF **)(v6 + 8 * (v11 & v9));
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v6 = 0;
          goto LABEL_17;
        }
        if ((WTF::equal(v14, v15, v5) & 1) != 0)
          break;
      }
      ++i;
    }
    v6 = 1;
LABEL_17:
    v7 = v15;
  }
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }

  return v6;
}

void sub_197701F78(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSMutableArray>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197702010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::errors(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateActionPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(this);
  WebKit::WebExtension::populatePagePropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateCommandsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateExternallyConnectableIfNeeded((WebKit::WebExtension *)this);
  WTF::RetainPtr<NSMutableArray>::get(this + 23);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");
  v4 = v3;
  if (!v3)
    v3 = (void *)MEMORY[0x1E0C9AA60];
  v5 = v3;

  return v5;
}

void sub_1977020DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateDisplayStringsIfNeeded(WebKit::WebExtension *this)
{
  __int16 v2;
  void *v3;
  void *v4;
  const void **v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  const void **v10;
  const void *v11;
  void *v12;
  void *v13;
  void *v14;
  CFTypeRef v15;

  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    v2 = *((_WORD *)this + 172);
    if ((v2 & 8) == 0)
    {
      *((_WORD *)this + 172) = v2 | 8;
      WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("name"), 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSString>::operator=((const void **)this + 24, v3);

      WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("short_name"), 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (const void **)((char *)this + 200);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 25, v4);

      if (!*((_QWORD *)this + 25))
      {
        WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v15, (uint64_t *)this + 24);
        v6 = *v5;
        *v5 = v15;
        v15 = 0;
        if (v6)
          CFRelease(v6);
      }
      if (!*((_QWORD *)this + 24))
      {
        WebKit::WebExtension::createError(this, 17, 0, 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v7);

      }
      WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("version"), 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSString>::operator=((const void **)this + 28, v8);

      WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("version_name"), 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (const void **)((char *)this + 208);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 26, v9);

      if (!*((_QWORD *)this + 26))
      {
        WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v15, (uint64_t *)this + 28);
        v11 = *v10;
        *v10 = v15;
        v15 = 0;
        if (v11)
          CFRelease(v11);
      }
      if (!*((_QWORD *)this + 28))
      {
        WebKit::WebExtension::createError(this, 20, 0, 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v12);

      }
      WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("description"), 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSString>::operator=((const void **)this + 27, v13);

      if (!*((_QWORD *)this + 27))
      {
        WebKit::WebExtension::createError(this, 14, 0, 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v14);

      }
    }
  }
}

void sub_197702334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateActionPropertiesIfNeeded(WebKit::WebExtension *this)
{
  __int16 v2;
  void *v3;
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  WTF::StringImpl *v10;
  __CFString *v11;
  WTF::StringImpl *v12;
  void *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;

  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    v2 = *((_WORD *)this + 172);
    if ((v2 & 0x20) == 0)
    {
      *((_WORD *)this + 172) = v2 | 0x20;
      if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
      {
        WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("action"), 0, 0);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v16, v5);
      }
      else
      {
        WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("browser_action"), 0, 0);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v16, v3);
        v4 = (const void *)*((_QWORD *)this + 30);
        *((_QWORD *)this + 30) = v16;
        v16 = 0;
        if (v4)
          CFRelease(v4);

        if (*((_QWORD *)this + 30))
        {
LABEL_12:
          WebKit::objectForKey<NSString>((id *)this + 30, CFSTR("default_icon"), 1);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v7, "length"))
            goto LABEL_23;
          WebKit::WebExtension::imageForPath(this, (NSString *)v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<UIImage>::operator=((const void **)this + 31, v8);

          if (*((_QWORD *)this + 31))
            goto LABEL_23;
          if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
          {
            if (v16)
              goto LABEL_18;
          }
          else
          {
            if (v16)
            {
LABEL_18:
              v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
              v12 = v16;
              v16 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v10);
                else
                  *(_DWORD *)v12 -= 2;
              }
              goto LABEL_22;
            }
          }
          v11 = &stru_1E351F1B8;
LABEL_22:
          WebKit::WebExtension::createError(this, 7, v11, 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((uint64_t)this, v13);

LABEL_23:
          WebKit::objectForKey<NSString>((id *)this + 30, CFSTR("default_title"), 1);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSString>::operator=((const void **)this + 32, v14);

          WebKit::objectForKey<NSString>((id *)this + 30, CFSTR("default_popup"), 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSString>::operator=((const void **)this + 33, v15);

          return;
        }
        WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("page_action"), 0, 0);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v16, v5);
      }
      v6 = (const void *)*((_QWORD *)this + 30);
      *((_QWORD *)this + 30) = v16;
      v16 = 0;
      if (v6)
        CFRelease(v6);

      if (*((_QWORD *)this + 30))
        goto LABEL_12;
    }
  }
}

void sub_197702628(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(id *this)
{
  __int16 v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  __int16 v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  __CFString *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  id v33;
  const void *v34;
  void *v35;
  BOOL v36;
  const __CFString *v37;
  id v38;
  const void *v39;
  void *v40;
  BOOL v41;
  const void *v42;
  const void *v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  __CFString *v48;
  __int16 v49;
  id v50;
  __CFString *v51;
  void *v52;
  WTF::StringImpl *v53;
  void *v54;
  BOOL v55;
  const __CFString *v56;
  __CFString *v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  __CFString *v61;
  void *v62;
  WTF::StringImpl *v63;
  id v64;
  void *v65;
  WTF::StringImpl *v66;
  __CFString *v67;
  void *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _BOOL4 v71;
  const __CFString *v72;
  id v73;
  void *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  const void **v77;
  const void **v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  WTF::StringImpl *v83;
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this))
    return;
  v2 = *((_WORD *)this + 172);
  if ((v2 & 0x40) != 0)
    return;
  *((_WORD *)this + 172) = v2 | 0x40;
  WebKit::objectForKey<NSDictionary>(this + 19, CFSTR("background"), 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "count"))
  {
    WTF::RetainPtr<NSMutableArray>::get(this + 19);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectForKey:", CFSTR("background"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      WebKit::WebExtension::createError((WebKit::WebExtension *)this, 8, 0, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)this, v18);

    }
    goto LABEL_104;
  }
  v4 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("scripts"), 1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (uint64_t *)(this + 35);
  WTF::RetainPtr<NSArray>::operator=((const void **)this + 35, v5);

  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("page"), 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = (const void **)(this + 36);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 36, v7);

  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("service_worker"), 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = (const void **)(this + 37);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 37, v8);

  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("type"), 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToString:", CFSTR("module")))
    v10 = 2;
  else
    v10 = 0;
  *((_WORD *)this + 172) = (_WORD)this[43] & 0xFFFD | v10;

  v11 = &__block_literal_global_250;
  WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)(this + 35), (uint64_t)this[35]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::filterObjects<NSArray>(v12, &__block_literal_global_250);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  WTF::RetainPtr<NSArray>::operator=((const void **)this + 35, v13);
  if ((_MergedGlobals_23 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithObjects:", CFSTR("document"), CFSTR("service_worker"), 0);
    qword_1ECE73210 = objc_claimAutoreleasedReturnValue();
    _MergedGlobals_23 = 1;
  }
  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("preferred_environment"), 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    if (objc_msgSend((id)qword_1ECE73210, "containsObject:", v14))
    {
      objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithObject:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v19 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("preferred_environment"), 1, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20;
    if (v20)
    {
      WebKit::filterObjects<NSArray>(v20, &__block_literal_global_252);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithArray:", v22);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("preferred_environment"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        if (v83)
          v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v24 = &stru_1E351F1B8;
        WebKit::WebExtension::createError((WebKit::WebExtension *)this, 8, v24, 0);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v25);

        v27 = v83;
        v83 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
        v15 = 0;
      }
    }

  }
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v28 = v15;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
  if (!v29)
    goto LABEL_47;
  v30 = *(_QWORD *)v80;
  while (2)
  {
    for (i = 0; i != v29; ++i)
    {
      if (*(_QWORD *)v80 != v30)
        objc_enumerationMutation(v28);
      v32 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * i);
      if (objc_msgSend(v32, "isEqualToString:", CFSTR("document")))
      {
        *((_BYTE *)this + 312) = 0;
        v33 = this[37];
        this[37] = 0;
        if (v33)
          CFRelease(v33);
        v34 = (const void *)*v6;
        if (*v77)
          goto LABEL_45;
        WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)(this + 35), (uint64_t)v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "count") == 0;

        if (!v36)
          goto LABEL_47;
        if (v83)
        {
LABEL_73:
          v57 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          goto LABEL_74;
        }
        v57 = &stru_1E351F1B8;
LABEL_74:
        WebKit::WebExtension::createError((WebKit::WebExtension *)this, 8, v57, 0);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v58);

        v60 = v83;
        v83 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v59);
          else
            *(_DWORD *)v60 -= 2;
        }
        goto LABEL_47;
      }
      if (objc_msgSend(v32, "isEqualToString:", CFSTR("service_worker")))
      {
        *((_BYTE *)this + 312) = 1;
        v38 = this[36];
        this[36] = 0;
        if (v38)
          CFRelease(v38);
        v34 = (const void *)*v6;
        if (*v78)
        {
LABEL_45:
          *v6 = 0;
          if (v34)
            CFRelease(v34);
          goto LABEL_47;
        }
        WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)(this + 35), (uint64_t)v34);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend(v54, "count") == 0;

        if (!v55)
          goto LABEL_47;
        if (v83)
          goto LABEL_73;
        v57 = &stru_1E351F1B8;
        goto LABEL_74;
      }
    }
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
    if (v29)
      continue;
    break;
  }
LABEL_47:

  if (!objc_msgSend(v28, "count"))
  {
    if (*v77)
    {
      v39 = *v78;
      *v78 = 0;
      if (v39)
        CFRelease(v39);
    }
    WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)(this + 35), *v6);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = objc_msgSend(v40, "count") == 0;

    if (!v41)
    {
      v42 = *v78;
      *v78 = 0;
      if (v42)
        CFRelease(v42);
      v43 = *v77;
      *v77 = 0;
      if (v43)
        CFRelease(v43);
    }
    *((_BYTE *)this + 312) = this[37] != 0;
    WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)(this + 35), (uint64_t)this[35]);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v44, "count") || *v77)
    {

    }
    else
    {
      v71 = *v78 == 0;

      if (v71)
      {
        v73 = v83 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
        WebKit::WebExtension::createError((WebKit::WebExtension *)this, 8, v73, 0);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v74);

        v76 = v83;
        v83 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v75);
          else
            *(_DWORD *)v76 -= 2;
        }
      }
    }
  }
  WebKit::objectForKey<NSNumber>(v3, (uint64_t)CFSTR("persistent"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v45;
  if (!v45)
  {
    if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0)
    {
      v50 = this[37];
      v49 = (_WORD)this[43] & 0xFFFE | (v50 == 0);
      *((_WORD *)this + 172) = v49;
      if (v50)
        goto LABEL_79;
LABEL_61:
      if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0)
      {
        v49 = *((_WORD *)this + 172);
        goto LABEL_79;
      }
      if (v83)
        v51 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v51 = &stru_1E351F1B8;
      WebKit::WebExtension::createError((WebKit::WebExtension *)this, 9, v51, 0);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)this, v52);

      v53 = v83;
      v83 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v48);
        else
          *(_DWORD *)v53 -= 2;
      }
    }
    v49 = (_WORD)this[43] & 0xFFFE;
    *((_WORD *)this + 172) = v49;
    goto LABEL_79;
  }
  v47 = objc_msgSend(v45, "BOOLValue");
  v49 = (_WORD)this[43] & 0xFFFE | v47;
  *((_WORD *)this + 172) = v49;
  if (v47)
    goto LABEL_61;
LABEL_79:
  if ((v49 & 1) != 0 && *v78)
  {
    if (v83)
      v61 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v61 = &stru_1E351F1B8;
    WebKit::WebExtension::createError((WebKit::WebExtension *)this, 9, v61, 0);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)this, v62);

    v63 = v83;
    v83 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v48);
      else
        *(_DWORD *)v63 -= 2;
    }
    v49 = (_WORD)this[43] & 0xFFFE;
    *((_WORD *)this + 172) = v49;
  }
  if ((v49 & 1) == 0
    && WebKit::WebExtension::hasRequestedPermission((WebKit::WebExtension *)this, CFSTR("webRequest")))
  {
    v64 = v83 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    WebKit::WebExtension::createError((WebKit::WebExtension *)this, 9, v64, 0);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)this, v65);

    v66 = v83;
    v83 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v48);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  if (((_WORD)this[43] & 1) != 0)
  {
    if (v83)
      v67 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v67 = &stru_1E351F1B8;
    WebKit::WebExtension::createError((WebKit::WebExtension *)this, 9, v67, 0);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)this, v68);

    v70 = v83;
    v83 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v69);
      else
        *(_DWORD *)v70 -= 2;
    }
  }

LABEL_104:
}

void sub_197703158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  WTF::StringImpl *v27;

  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, v27);
    else
      *(_DWORD *)a22 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateContentScriptPropertiesIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v2;
  void *v3;
  void (**v4)(void *, _QWORD);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD aBlock[5];
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)this + 172) & 0x100) == 0)
  {
    *((_WORD *)this + 172) |= 0x100u;
    v2 = objc_opt_class();
    WebKit::objectForKey<NSArray>((id *)this + 19, CFSTR("content_scripts"), 1, v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "count"))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e22_v16__0__NSDictionary_8l;
      aBlock[4] = this;
      v4 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v5 = v3;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v13;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v13 != v7)
              objc_enumerationMutation(v5);
            v4[2](v4, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i));
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
        }
        while (v6);
      }

    }
    else
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKey:", CFSTR("content_scripts"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        WebKit::WebExtension::createError(this, 11, 0, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v11);

      }
    }

  }
}

void sub_1977035F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(id *this)
{
  double v2;
  uint64_t v3;
  id v4;
  WebKit::WebExtension *isSupported;
  WebKit::WebExtension *v6;
  uint64_t v7;
  uint64_t *v8;
  WebKit::WebExtension *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int i;
  int v25;
  WTF *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  const WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int k;
  int v65;
  int m;
  int v67;
  WTF *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t n;
  const WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  id *v81;
  id v82;
  uint64_t *obj;
  id obja;
  uint64_t *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  WTF::StringImpl *v98[3];
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[128];
  _BYTE v106[128];
  _BYTE v107[128];
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this) || ((_WORD)this[43] & 0x200) != 0)
    return;
  *((_WORD *)this + 172) |= 0x200u;
  v2 = WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this);
  v85 = (uint64_t *)this;
  v3 = objc_opt_class();
  v81 = this + 19;
  WebKit::objectForKey<NSArray>(this + 19, CFSTR("permissions"), 1, v3);
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  isSupported = (WebKit::WebExtension *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v101, v108, 16);
  v6 = isSupported;
  v82 = v4;
  if (!isSupported)
    goto LABEL_44;
  v7 = *(_QWORD *)v102;
  obj = (uint64_t *)(this + 11);
  v8 = (uint64_t *)(this + 13);
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v102 != v7)
        objc_enumerationMutation(v4);
      v10 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v9);
      if (v2 < 3.0)
      {
        MEMORY[0x19AEABCC8](v98, *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v9));
        WebKit::WebExtensionMatchPattern::getOrCreate(v98, v11, &v100);
        v13 = v98[0];
        v98[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        isSupported = v100;
        if (v100)
        {
          isSupported = (WebKit::WebExtension *)WebKit::WebExtensionMatchPattern::isSupported(v100);
          if ((_DWORD)isSupported)
          {
            v99 = v100;
            v100 = 0;
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(obj, (uint64_t *)&v99, (uint64_t)v98);
            v14 = (uint64_t)v99;
            v99 = 0;
            if (v14)
              CFRelease(*(CFTypeRef *)(v14 + 8));
          }
          v15 = v100;
          v100 = 0;
          if (v15)
            CFRelease(*((CFTypeRef *)v15 + 1));
          goto LABEL_30;
        }
      }
      WebKit::WebExtension::supportedPermissions(isSupported);
      MEMORY[0x19AEABCC8](v98, v10);
      v18 = qword_1ECE73218;
      isSupported = v98[0];
      if (qword_1ECE73218)
      {
        v21 = *(_DWORD *)(qword_1ECE73218 - 8);
        v22 = *((_DWORD *)v98[0] + 4);
        if (v22 >= 0x100)
          v23 = v22 >> 8;
        else
          v23 = WTF::StringImpl::hashSlowCase(v98[0]);
        for (i = 0; ; v23 = i + v25)
        {
          v25 = v23 & v21;
          v26 = *(WTF **)(v18 + 8 * (v23 & v21));
          if (v26 != (WTF *)-1)
          {
            if (!v26)
            {
              LODWORD(v18) = 0;
              goto LABEL_42;
            }
            if ((WTF::equal(v26, v98[0], v17) & 1) != 0)
              break;
          }
          ++i;
        }
        LODWORD(v18) = 1;
LABEL_42:
        isSupported = v98[0];
        v4 = v82;
      }
      v98[0] = 0;
      if (!isSupported)
        goto LABEL_23;
      if (*(_DWORD *)isSupported != 2)
      {
        *(_DWORD *)isSupported -= 2;
LABEL_23:
        if (!(_DWORD)v18)
          goto LABEL_30;
        goto LABEL_26;
      }
      isSupported = (WebKit::WebExtension *)WTF::StringImpl::destroy(isSupported, v16);
      if (!(_DWORD)v18)
        goto LABEL_30;
LABEL_26:
      MEMORY[0x19AEABCC8](&v100, v10);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v8, &v100, v19, (uint64_t)v98);
      isSupported = v100;
      v100 = 0;
      if (isSupported)
      {
        if (*(_DWORD *)isSupported == 2)
          isSupported = (WebKit::WebExtension *)WTF::StringImpl::destroy(isSupported, v20);
        else
          *(_DWORD *)isSupported -= 2;
      }
LABEL_30:
      v9 = (WebKit::WebExtension *)((char *)v9 + 1);
    }
    while (v9 != v6);
    isSupported = (WebKit::WebExtension *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v101, v108, 16, v81);
    v6 = isSupported;
  }
  while (isSupported);
LABEL_44:

  if (v2 >= 3.0)
  {
    v27 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v81, CFSTR("host_permissions"), 1, v27);
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v28 = (id)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v94, v107, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v95;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v95 != v30)
            objc_enumerationMutation(v28);
          MEMORY[0x19AEABCC8](v98, *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * j));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v32, &v100);
          v34 = v98[0];
          v98[0] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v33);
            else
              *(_DWORD *)v34 -= 2;
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              v99 = v100;
              v100 = 0;
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v85 + 11, (uint64_t *)&v99, (uint64_t)v98);
              v35 = (uint64_t)v99;
              v99 = 0;
              if (v35)
                CFRelease(*(CFTypeRef *)(v35 + 8));
            }
            v36 = v100;
            v100 = 0;
            if (v36)
              CFRelease(*((CFTypeRef *)v36 + 1));
          }
        }
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v94, v107, 16);
      }
      while (v29);
    }

  }
  v37 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v81, CFSTR("optional_permissions"), 1, v37);
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  obja = (id)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v90, v106, 16);
  if (v38)
  {
    v39 = *(_QWORD *)v91;
    do
    {
      v40 = 0;
      do
      {
        if (*(_QWORD *)v91 != v39)
          objc_enumerationMutation(obja);
        v41 = *(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * v40);
        if (v2 < 3.0)
        {
          MEMORY[0x19AEABCC8](v98, *(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * v40));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v42, &v100);
          v44 = v98[0];
          v98[0] = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v43);
            else
              *(_DWORD *)v44 -= 2;
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              v98[0] = v100;
              if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>(v85 + 11, v98) & 1) == 0)
              {
                v99 = v100;
                v100 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v85 + 12, (uint64_t *)&v99, (uint64_t)v98);
                v45 = (uint64_t)v99;
                v99 = 0;
                if (v45)
                  CFRelease(*(CFTypeRef *)(v45 + 8));
              }
            }
            v46 = v100;
            v100 = 0;
            if (v46)
              CFRelease(*((CFTypeRef *)v46 + 1));
            goto LABEL_96;
          }
        }
        v47 = (WTF *)MEMORY[0x19AEABCC8](v98, v41);
        v49 = v85[13];
        if (v49)
        {
          v58 = *(_DWORD *)(v49 - 8);
          v59 = *((_DWORD *)v98[0] + 4);
          if (v59 >= 0x100)
            v60 = v59 >> 8;
          else
            v60 = WTF::StringImpl::hashSlowCase(v98[0]);
          for (k = 0; ; v60 = k + v65)
          {
            v65 = v60 & v58;
            v47 = *(WTF **)(v49 + 8 * (v60 & v58));
            if (v47 != (WTF *)-1)
            {
              if (!v47)
                goto LABEL_81;
              if ((WTF::equal(v47, v98[0], v48) & 1) != 0)
                break;
            }
            ++k;
          }
          LODWORD(v52) = 0;
        }
        else
        {
LABEL_81:
          WebKit::WebExtension::supportedPermissions(v47);
          MEMORY[0x19AEABCC8](&v100, v41);
          v52 = qword_1ECE73218;
          v53 = v100;
          if (qword_1ECE73218)
          {
            v61 = *(_DWORD *)(qword_1ECE73218 - 8);
            v62 = *((_DWORD *)v100 + 4);
            if (v62 >= 0x100)
              v63 = v62 >> 8;
            else
              v63 = WTF::StringImpl::hashSlowCase(v100);
            for (m = 0; ; v63 = m + v67)
            {
              v67 = v63 & v61;
              v68 = *(WTF **)(v52 + 8 * (v63 & v61));
              if (v68 != (WTF *)-1)
              {
                if (!v68)
                {
                  LODWORD(v52) = 0;
                  goto LABEL_117;
                }
                if ((WTF::equal(v68, v100, v51) & 1) != 0)
                  break;
              }
              ++m;
            }
            LODWORD(v52) = 1;
LABEL_117:
            v53 = v100;
          }
          v100 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v50);
            else
              *(_DWORD *)v53 -= 2;
          }
        }
        v54 = v98[0];
        v98[0] = 0;
        if (!v54)
          goto LABEL_89;
        if (*(_DWORD *)v54 != 2)
        {
          *(_DWORD *)v54 -= 2;
LABEL_89:
          if (!(_DWORD)v52)
            goto LABEL_96;
          goto LABEL_92;
        }
        WTF::StringImpl::destroy(v54, v50);
        if (!(_DWORD)v52)
          goto LABEL_96;
LABEL_92:
        MEMORY[0x19AEABCC8](&v100, v41);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v85 + 14, &v100, v55, (uint64_t)v98);
        v57 = v100;
        v100 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v56);
          else
            *(_DWORD *)v57 -= 2;
        }
LABEL_96:
        ++v40;
      }
      while (v40 != v38);
      v69 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v90, v106, 16);
      v38 = v69;
    }
    while (v69);
  }

  v70 = v82;
  if (v2 >= 3.0)
  {
    v71 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v81, CFSTR("optional_host_permissions"), 1, v71);
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v72 = (id)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v86, v105, 16);
    if (v73)
    {
      v74 = *(_QWORD *)v87;
      do
      {
        for (n = 0; n != v73; ++n)
        {
          if (*(_QWORD *)v87 != v74)
            objc_enumerationMutation(v72);
          MEMORY[0x19AEABCC8](v98, *(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * n));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v76, &v100);
          v78 = v98[0];
          v98[0] = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v77);
            else
              *(_DWORD *)v78 -= 2;
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              v98[0] = v100;
              if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>(v85 + 11, v98) & 1) == 0)
              {
                v99 = v100;
                v100 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v85 + 12, (uint64_t *)&v99, (uint64_t)v98);
                v79 = (uint64_t)v99;
                v99 = 0;
                if (v79)
                  CFRelease(*(CFTypeRef *)(v79 + 8));
              }
            }
            v80 = v100;
            v100 = 0;
            if (v80)
              CFRelease(*((CFTypeRef *)v80 + 1));
          }
        }
        v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v86, v105, 16);
      }
      while (v73);
    }

    v70 = v82;
  }

}

void sub_197703EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44)
{
  void *v44;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populatePagePropertiesIfNeeded(WebKit::WebExtension *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  __CFString *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (!WebKit::WebExtension::manifestParsedSuccessfully(this) || (*((_WORD *)this + 172) & 0x400) != 0)
    return;
  *((_WORD *)this + 172) |= 0x400u;
  WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("options_ui"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    WebKit::objectForKey<NSString>(v2, (uint64_t)CFSTR("page"), 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSString>::operator=((const void **)this + 41, v4);

    if (!*((_QWORD *)this + 41))
    {
LABEL_8:
      WebKit::WebExtension::createError(this, 18, 0, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)this, v8);

    }
  }
  else
  {
    WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("options_page"), 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSString>::operator=((const void **)this + 41, v5);

    if (!*((_QWORD *)this + 41))
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKey:", CFSTR("options_page"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
        goto LABEL_8;
    }
  }

  WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("browser_url_overrides"), 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    || (WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("chrome_url_overrides"), 0, 0),
        (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    if (!objc_msgSend(v9, "count"))
    {
      WebKit::WebExtension::createError(this, 19, 0, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)this, v10);

    }
  }
  WebKit::objectForKey<NSString>(v9, (uint64_t)CFSTR("newtab"), 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSString>::operator=((const void **)this + 42, v11);

  if (!*((_QWORD *)this + 42))
  {
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("newtab"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      if (v17)
        v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v14 = &stru_1E351F1B8;
      WebKit::WebExtension::createError(this, 19, v14, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)this, v15);

      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }

}

void sub_1977044E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded(WebKit::WebExtension *this)
{
  __int16 v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    v2 = *((_WORD *)this + 172);
    if ((v2 & 0x10) == 0)
    {
      *((_WORD *)this + 172) = v2 | 0x10;
      if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
      {
        WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("content_security_policy"), 0, 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v7;
        if (v7)
        {
          WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("extension_pages"), 1);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSString>::operator=((const void **)this + 34, v8);

          if (!*((_QWORD *)this + 34))
          {
            if (!objc_msgSend(v6, "count")
              || (objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("extension_pages")),
                  v9 = (void *)objc_claimAutoreleasedReturnValue(),
                  v9,
                  v9))
            {
              WebKit::WebExtension::createError(this, 12, 0, 0);
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              WebKit::WebExtension::recordError((uint64_t)this, v10);

            }
          }
        }
      }
      else
      {
        WebKit::objectForKey<NSString>((id *)this + 19, CFSTR("content_security_policy"), 1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSString>::operator=((const void **)this + 34, v3);

        if (*((_QWORD *)this + 34))
          goto LABEL_13;
        WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKey:", CFSTR("content_security_policy"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v5)
          goto LABEL_13;
        WebKit::WebExtension::createError(this, 12, 0, 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v6);
      }

LABEL_13:
      if (!*((_QWORD *)this + 34))
        WTF::RetainPtr<NSString>::operator=((const void **)this + 34, CFSTR("script-src 'self'"));
    }
  }
}

void sub_197704734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateCommandsIfNeeded(WebKit::WebExtension *this)
{
  WebKit::WebExtension *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t i;
  void *v13;
  const __CFString *v14;
  void *v15;
  const __CFString *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  const __CFString *v29;
  char v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  __CFString *v50;
  uint64_t v51;
  void *v52;
  __CFString *v53;
  __CFString *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  const WTF::StringImpl *v64;
  BOOL v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned __int8 *v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  const WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int m;
  uint64_t v89;
  WTF *v90;
  int v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  const WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  char *v111;
  int j;
  unsigned int v113;
  WTF::StringImpl **v114;
  WTF *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t k;
  WTF::StringImpl *v128;
  void *v129;
  void *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  void *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  __CFString *v144;
  void *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  WTF::StringImpl **v148;
  uint64_t *v149;
  void *v150;
  uint64_t *v151;
  int v152;
  int v153;
  WebKit::WebExtension *v154;
  unsigned int *v155;
  id v156;
  void *v157;
  void *v158;
  unint64_t v159;
  int v160;
  __CFString *v161;
  __CFString *v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  int v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  const __CFString *v174;
  const __CFString *v175;
  const __CFString *v176;
  const __CFString *v177;
  const __CFString *v178;
  const __CFString *v179;
  const __CFString *v180;
  const __CFString *v181;
  const __CFString *v182;
  const __CFString *v183;
  const __CFString *v184;
  const __CFString *v185;
  const __CFString *v186;
  const __CFString *v187;
  const __CFString *v188;
  const __CFString *v189;
  const __CFString *v190;
  const __CFString *v191;
  const __CFString *v192;
  const __CFString *v193;
  const __CFString *v194;
  const __CFString *v195;
  _QWORD v196[2];
  _QWORD v197[2];
  _QWORD v198[2];
  _QWORD v199[2];
  _QWORD v200[2];
  WTF::StringImpl *v201[2];
  uint64_t v202;
  _BYTE v203[128];
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  _QWORD v208[2];
  _QWORD v209[2];
  _QWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD v230[4];

  v1 = this;
  v230[2] = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)v1 + 172) & 0x1000) == 0)
  {
    *((_WORD *)v1 + 172) |= 0x1000u;
    v2 = objc_opt_class();
    WebKit::objectForKey<NSDictionary>((id *)v1 + 19, CFSTR("commands"), 0, v2);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    if (v150)
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)v1 + 19);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectForKey:", CFSTR("commands"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      v5 = objc_msgSend(v150, "count");
      objc_opt_class();
      WTF::dynamic_objc_cast<NSDictionary>(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "count");

      if (v5 == v7)
      {

        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v8 = v150;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v170, v203, 16);
        if (v9)
        {
          v10 = 0;
          v11 = 0;
          v160 = 0;
          v159 = 0;
          v163 = *(_QWORD *)v171;
          v151 = (uint64_t *)((char *)v1 + 256);
          v149 = (uint64_t *)((char *)v1 + 200);
          v155 = (unsigned int *)((char *)v1 + 56);
          v156 = v8;
          v154 = v1;
          while (1)
          {
            v164 = v9;
            for (i = 0; i != v164; ++i)
            {
              if (*(_QWORD *)v171 != v163)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * i);
              if (!objc_msgSend(v13, "length"))
              {
                v25 = v204;
                if (v11)
                {
                  v204 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                    {
                      WTF::StringImpl::destroy(v10, v24);
                      v35 = v204;
                      v204 = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, v34);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v10 -= 2;
                    }
                  }
                }
                v11 = 1;
                v10 = v25;
                continue;
              }
              WebKit::objectForKey<NSDictionary>(v8, (uint64_t)v13, 1, 0);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (!objc_msgSend(v15, "count"))
              {
                v27 = v204;
                if (v11)
                {
                  v204 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                    {
                      WTF::StringImpl::destroy(v10, v26);
                      v37 = v204;
                      v204 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, v36);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v10 -= 2;
                    }
                  }
                }
                v11 = 1;
                v10 = v27;
                goto LABEL_173;
              }
              v166 = 0;
              v167 = 0;
              v169 = 0;
              v168 = 0;
              MEMORY[0x19AEABCC8](&v204, v13);
              v18 = v204;
              v204 = 0;
              v19 = v166;
              v166 = v18;
              if (v19)
              {
                v20 = *(_DWORD *)v19 - 2;
                if (*(_DWORD *)v19 != 2)
                  goto LABEL_16;
                WTF::StringImpl::destroy(v19, v17);
                v19 = v204;
                v204 = 0;
                if (!v19)
                  goto LABEL_17;
                v20 = *(_DWORD *)v19 - 2;
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, v21);
                else
LABEL_16:
                  *(_DWORD *)v19 = v20;
              }
LABEL_17:
              WTF::String::operator=(&v168, MEMORY[0x1E0CBF738]);
              v169 = 0;
              if (WebKit::WebExtension::manifestVersion(v1) >= 3.0
                && (MEMORY[0x19AEABBCC](v166, "_execute_action", 15) & 1) != 0
                || WebKit::WebExtension::manifestVersion(v1) < 3.0
                && ((MEMORY[0x19AEABBCC](v166, "_execute_browser_action", 23) & 1) != 0
                 || MEMORY[0x19AEABBCC](v166, "_execute_page_action", 20)))
              {
                v22 = v160;
                if ((v160 & 1) == 0)
                  v22 = 1;
                v160 = v22;
                v23 = 1;
              }
              else
              {
                v23 = 0;
              }
              WebKit::objectForKey<NSString>(v15, (uint64_t)CFSTR("description"), 1);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v28, "length"))
                v30 = 1;
              else
                v30 = v23;
              if ((v30 & 1) == 0)
              {
                v33 = v204;
                if (v11)
                {
                  v204 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                    {
                      WTF::StringImpl::destroy(v10, v32);
                      v39 = v204;
                      v204 = 0;
                      if (v39)
                      {
                        if (*(_DWORD *)v39 == 2)
                          WTF::StringImpl::destroy(v39, v38);
                        else
                          *(_DWORD *)v39 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v10 -= 2;
                    }
                  }
                }
LABEL_154:
                v11 = 1;
                v10 = v33;
                goto LABEL_161;
              }
              if (v23 && !objc_msgSend(v28, "length"))
              {
                WebKit::WebExtension::populateActionPropertiesIfNeeded(v1);
                WTF::RetainPtr<__IOHIDDevice *>::get(v151);
                v31 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v31, "length"))
                {
                  v28 = v31;
                }
                else
                {
                  WebKit::WebExtension::populateDisplayStringsIfNeeded(v1);
                  WTF::RetainPtr<__IOHIDDevice *>::get(v149);
                  v40 = objc_claimAutoreleasedReturnValue();

                  v28 = (void *)v40;
                }
              }
              MEMORY[0x19AEABCC8](&v204, v28);
              v42 = v204;
              v204 = 0;
              v43 = v167;
              v167 = v42;
              if (!v43)
                goto LABEL_67;
              v44 = *(_DWORD *)v43 - 2;
              if (*(_DWORD *)v43 != 2)
                goto LABEL_66;
              WTF::StringImpl::destroy(v43, v41);
              v43 = v204;
              v204 = 0;
              if (v43)
              {
                v44 = *(_DWORD *)v43 - 2;
                if (*(_DWORD *)v43 == 2)
                {
                  WTF::StringImpl::destroy(v43, v45);
                  goto LABEL_67;
                }
LABEL_66:
                *(_DWORD *)v43 = v44;
              }
LABEL_67:
              WebKit::objectForKey<NSDictionary>(v15, (uint64_t)CFSTR("suggested_key"), 1, 0);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = v46;
              if (!v46)
                goto LABEL_158;
              WebKit::objectForKey<NSString>(v46, (uint64_t)CFSTR("ios"), 1);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = v48;
              if (v48)
              {
                v161 = v48;
              }
              else
              {
                WebKit::objectForKey<NSString>(v47, (uint64_t)CFSTR("mac"), 1);
                v161 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

              }
              if (-[__CFString length](v161, "length"))
              {
                v50 = v161;
              }
              else
              {
                WebKit::objectForKey<NSString>(v47, (uint64_t)CFSTR("default"), 1);
                v51 = objc_claimAutoreleasedReturnValue();
                v52 = (void *)v51;
                v53 = &stru_1E351F1B8;
                if (v51)
                  v53 = (__CFString *)v51;
                v54 = v53;

                v50 = v54;
              }
              v162 = v50;
              MEMORY[0x19AEABCC8](&v165);
              v169 = 0;
              WTF::String::operator=(&v168, MEMORY[0x1E0CBF738]);
              v56 = v165;
              if (!v165)
                goto LABEL_95;
              if (!*((_DWORD *)v165 + 1))
              {
                v165 = 0;
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v55);
                else
                  *(_DWORD *)v56 -= 2;
                goto LABEL_95;
              }
              if ((byte_1ECE7320B & 1) != 0)
                goto LABEL_79;
              v158 = v47;
              v153 = v11;
              LODWORD(v200[0]) = 0x100000;
              WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)&v204, (uint64_t)"Ctrl", 5, v200);
              LODWORD(v199[0]) = 0x100000;
              WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)&v206, (uint64_t)"Command", 8, v199);
              LODWORD(v198[0]) = 0x80000;
              WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v208, (uint64_t)"Alt", 4, v198);
              LODWORD(v197[0]) = 0x40000;
              WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v209, (uint64_t)"MacCtrl", 8, v197);
              LODWORD(v196[0]) = 0x20000;
              WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v210, (uint64_t)"Shift", 6, v196);
              v147 = 0;
              v201[0] = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(0x10u);
              *((_OWORD *)v201[0] - 1) = xmmword_1978D06A0;
              do
              {
                v106 = v201[0];
                if (v201[0]
                  || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)v201),
                      (v106 = v201[0]) != 0))
                {
                  v107 = v106;
                  v108 = *((_DWORD *)v106 - 2);
                }
                else
                {
                  v107 = 0;
                  v108 = 0;
                }
                v148 = &v204 + 2 * v147;
                v109 = *((_DWORD *)*v148 + 4);
                if (v109 >= 0x100)
                  v110 = v109 >> 8;
                else
                  v110 = WTF::StringImpl::hashSlowCase(*v148);
                v111 = 0;
                for (j = 1; ; ++j)
                {
                  v113 = v110 & v108;
                  v114 = (WTF::StringImpl **)((char *)v107 + 16 * (v110 & v108));
                  v115 = *v114;
                  if (*v114 == (WTF::StringImpl *)-1)
                  {
                    v111 = (char *)v107 + 16 * v113;
                    goto LABEL_190;
                  }
                  if (!v115)
                    break;
                  if ((WTF::equal(v115, *v148, v105) & 1) != 0)
                    goto LABEL_199;
LABEL_190:
                  v110 = j + v113;
                }
                if (v111)
                {
                  *(_QWORD *)v111 = 0;
                  *((_DWORD *)v111 + 2) = 0;
                  --*((_DWORD *)v201[0] - 4);
                  v114 = (WTF::StringImpl **)v111;
                }
                WTF::String::operator=(v114, (WTF::StringImpl *)v148);
                *((_DWORD *)v114 + 2) = *((_DWORD *)v148 + 2);
                v117 = v201[0];
                if (v201[0])
                  v118 = *((_DWORD *)v201[0] - 3) + 1;
                else
                  v118 = 1;
                *((_DWORD *)v201[0] - 3) = v118;
                v119 = (*((_DWORD *)v117 - 4) + v118);
                v120 = *((unsigned int *)v117 - 1);
                if (v120 > 0x400)
                {
                  if (v120 <= 2 * v119)
LABEL_198:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)v201);
                }
                else if (3 * v120 <= 4 * v119)
                {
                  goto LABEL_198;
                }
LABEL_199:
                ++v147;
              }
              while (v147 != 5);
              qword_1ECE73228 = (uint64_t)v201[0];
              for (k = 64; k != -16; k -= 16)
              {
                v128 = *(WTF::StringImpl **)((char *)&v204 + k);
                *(WTF::StringImpl **)((char *)&v204 + k) = 0;
                if (v128)
                {
                  if (*(_DWORD *)v128 == 2)
                    WTF::StringImpl::destroy(v128, v116);
                  else
                    *(_DWORD *)v128 -= 2;
                }
              }
              byte_1ECE7320B = 1;
              v11 = v153;
              v8 = v156;
              v47 = v158;
              v1 = v154;
LABEL_79:
              if ((byte_1ECE7320C & 1) == 0)
              {
                v201[0] = (WTF::StringImpl *)"Comma";
                v201[1] = (WTF::StringImpl *)6;
                v200[0] = ",";
                v200[1] = 2;
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v204, (uint64_t)v201, (uint64_t)v200);
                v199[0] = "Period";
                v199[1] = 7;
                v198[0] = ".";
                v198[1] = 2;
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v206, (uint64_t)v199, (uint64_t)v198);
                v197[0] = "Space";
                v197[1] = 6;
                v196[0] = " ";
                v196[1] = 2;
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(v208, (uint64_t)v197, (uint64_t)v196);
                v195 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v209, (uint64_t)"F1", 3, &v195);
                v194 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v210, (uint64_t)"F2", 3, &v194);
                v193 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v211, (uint64_t)"F3", 3, &v193);
                v192 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v212, (uint64_t)"F4", 3, &v192);
                v191 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v213, (uint64_t)"F5", 3, &v191);
                v190 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v214, (uint64_t)"F6", 3, &v190);
                v189 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v215, (uint64_t)"F7", 3, &v189);
                v188 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v216, (uint64_t)"F8", 3, &v188);
                v187 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v217, (uint64_t)"F9", 3, &v187);
                v186 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v218, (uint64_t)"F10", 4, &v186);
                v185 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v219, (uint64_t)"F11", 4, &v185);
                v184 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v220, (uint64_t)"F12", 4, &v184);
                v183 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v221, (uint64_t)"Insert", 7, &v183);
                v182 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v222, (uint64_t)"Delete", 7, &v182);
                v181 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v223, (uint64_t)"Home", 5, &v181);
                v180 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v224, (uint64_t)"End", 4, &v180);
                v179 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v225, (uint64_t)"PageUp", 7, &v179);
                v178 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v226, (uint64_t)"PageDown", 9, &v178);
                v177 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v227, (uint64_t)"Up", 3, &v177);
                v176 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v228, (uint64_t)"Down", 5, &v176);
                v175 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v229, (uint64_t)"Left", 5, &v175);
                v174 = CFSTR("");
                WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v230, (uint64_t)"Right", 6, &v174);
                WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(&v202, &v204, 25);
                v122 = v202;
                v202 = 0;
                qword_1ECE73230 = v122;
                v123 = 400;
                do
                {
                  v124 = (char *)&v204 + v123;
                  v125 = *(WTF::StringImpl **)&v203[v123 + 120];
                  *(_QWORD *)&v203[v123 + 120] = 0;
                  if (v125)
                  {
                    if (*(_DWORD *)v125 == 2)
                      WTF::StringImpl::destroy(v125, v121);
                    else
                      *(_DWORD *)v125 -= 2;
                  }
                  v126 = (WTF::StringImpl *)*((_QWORD *)v124 - 2);
                  *((_QWORD *)v124 - 2) = 0;
                  if (v126)
                  {
                    if (*(_DWORD *)v126 == 2)
                      WTF::StringImpl::destroy(v126, v121);
                    else
                      *(_DWORD *)v126 -= 2;
                  }
                  v123 -= 16;
                }
                while (v123);

                v8 = v156;
                v1 = v154;

                byte_1ECE7320C = 1;
              }
              WTF::String::split();
              v58 = HIDWORD(v205);
              if ((HIDWORD(v205) & 0xFFFFFFFE) != 2)
                goto LABEL_90;
              v59 = HIDWORD(v205) - 1;
              v60 = (WTF::StringImpl *)*((_QWORD *)v204 + HIDWORD(v205) - 1);
              *((_QWORD *)v204 + HIDWORD(v205) - 1) = 0;
              WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)((char *)v204 + 8 * v58 - 8), (WTF::StringImpl *)((char *)v204 + 8 * v58));
              HIDWORD(v205) = v59;
              v63 = v168;
              v168 = v60;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, v61);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v1 = v154;
              if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v168, (uint64_t)v61, v62) & 1) != 0)
              {
LABEL_90:
                v65 = 0;
                goto LABEL_91;
              }
              if (v168 && *((_DWORD *)v168 + 1) == 1)
              {
                v70 = (unsigned __int8 *)*((_QWORD *)v168 + 1);
                if ((*((_BYTE *)v168 + 16) & 4) != 0)
                  v71 = *v70;
                else
                  v71 = *(unsigned __int16 *)v70;
                v72 = v71 - 48;
                v73 = (v71 | 0x20) - 97;
                if (v72 >= 0xA && v73 > 0x19)
                  goto LABEL_90;
                WTF::String::convertToASCIILowercase((WTF::String *)&v168);
                v76 = v201[0];
                v201[0] = 0;
                v77 = v168;
                v168 = v76;
                if (v77)
                {
                  v78 = *(_DWORD *)v77 - 2;
                  if (*(_DWORD *)v77 != 2)
                    goto LABEL_120;
                  WTF::StringImpl::destroy(v77, v57);
                  v77 = v201[0];
                  v201[0] = 0;
                  if (v77)
                  {
                    v78 = *(_DWORD *)v77 - 2;
                    if (*(_DWORD *)v77 == 2)
                      WTF::StringImpl::destroy(v77, v57);
                    else
LABEL_120:
                      *(_DWORD *)v77 = v78;
                  }
                }
              }
              else
              {
                v79 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&qword_1ECE73230, &v168, v64);
                v80 = qword_1ECE73230;
                if (qword_1ECE73230)
                  v80 = qword_1ECE73230 + 16 * *(unsigned int *)(qword_1ECE73230 - 4);
                if (v80 == v79)
                  goto LABEL_90;
                WTF::String::operator=(&v168, (WTF::StringImpl *)(v79 + 8));
              }
              if (HIDWORD(v205))
              {
                v81 = (WTF::StringImpl **)v204;
                v82 = (WTF::StringImpl **)((char *)v204 + 8 * HIDWORD(v205));
                v152 = v11;
                v157 = v47;
                while ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v81, (uint64_t)v57, v75) & 1) != 0)
                {
                  v83 = qword_1ECE73228;
                  if (qword_1ECE73228)
                  {
                    v84 = *(_DWORD *)(qword_1ECE73228 - 8);
                    v85 = *((_DWORD *)*v81 + 4);
                    if (v85 >= 0x100)
                      v86 = v85 >> 8;
                    else
                      v86 = WTF::StringImpl::hashSlowCase(*v81);
                    for (m = 0; ; v86 = m + v89)
                    {
                      v89 = v86 & v84;
                      v90 = *(WTF **)(v83 + 16 * v89);
                      if (v90 != (WTF *)-1)
                      {
                        if (!v90)
                        {
                          v87 = 0;
                          goto LABEL_140;
                        }
                        if ((WTF::equal(v90, *v81, v75) & 1) != 0)
                          break;
                      }
                      ++m;
                    }
                    v87 = *(_DWORD *)(v83 + 16 * v89 + 8);
LABEL_140:
                    v11 = v152;
                    v1 = v154;
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v91 = v169 | v87;
                  v169 = v91;
                  ++v81;
                  v8 = v156;
                  v47 = v157;
                  if (v81 == v82)
                    goto LABEL_150;
                }
                v65 = 0;
                v8 = v156;
                v47 = v157;
              }
              else
              {
                v91 = v169;
LABEL_150:
                v65 = v91 != 0;
              }
LABEL_91:
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v204, v57);
              v66 = v165;
              v165 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 != 2)
                {
                  *(_DWORD *)v66 -= 2;
                  goto LABEL_94;
                }
                WTF::StringImpl::destroy(v66, v55);
                if (!v65)
                {
LABEL_104:
                  v33 = v204;
                  if (v11)
                  {
                    v204 = 0;
                    if (v10)
                    {
                      if (*(_DWORD *)v10 == 2)
                      {
                        WTF::StringImpl::destroy(v10, v69);
                        v93 = v204;
                        v204 = 0;
                        if (v93)
                        {
                          if (*(_DWORD *)v93 == 2)
                            WTF::StringImpl::destroy(v93, v92);
                          else
                            *(_DWORD *)v93 -= 2;
                        }
                      }
                      else
                      {
                        *(_DWORD *)v10 -= 2;
                      }
                    }
                  }

                  goto LABEL_154;
                }
              }
              else
              {
LABEL_94:
                if (!v65)
                  goto LABEL_104;
              }
LABEL_95:
              if (v168 && *((_DWORD *)v168 + 1) && (++v159, v159 >= 5))
              {
                v68 = v204;
                if (v11)
                {
                  v204 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                    {
                      WTF::StringImpl::destroy(v10, v67);
                      v95 = v204;
                      v204 = 0;
                      if (v95)
                      {
                        if (*(_DWORD *)v95 == 2)
                          WTF::StringImpl::destroy(v95, v94);
                        else
                          *(_DWORD *)v95 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v10 -= 2;
                    }
                  }
                }
                v11 = 1;
                WTF::String::operator=(&v168, MEMORY[0x1E0CBF738]);
                v169 = 0;
              }
              else
              {
                v68 = v10;
              }

              v10 = v68;
LABEL_158:

              v96 = *((unsigned int *)v1 + 17);
              if ((_DWORD)v96 == *((_DWORD *)v1 + 16))
              {
                WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>(v155, (unint64_t)&v166);
              }
              else
              {
                v97 = *((_QWORD *)v1 + 7) + 32 * v96;
                v98 = v166;
                v166 = 0;
                *(_QWORD *)v97 = v98;
                v99 = v167;
                v167 = 0;
                *(_QWORD *)(v97 + 8) = v99;
                v100 = v168;
                v168 = 0;
                *(_QWORD *)(v97 + 16) = v100;
                *(_DWORD *)(v97 + 24) = v169;
                ++*((_DWORD *)v1 + 17);
              }
LABEL_161:

              v102 = v168;
              v168 = 0;
              if (v102)
              {
                if (*(_DWORD *)v102 == 2)
                  WTF::StringImpl::destroy(v102, v101);
                else
                  *(_DWORD *)v102 -= 2;
              }
              v103 = v167;
              v167 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, v101);
                else
                  *(_DWORD *)v103 -= 2;
              }
              v104 = v166;
              v166 = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, v101);
                else
                  *(_DWORD *)v104 -= 2;
              }
LABEL_173:

            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v170, v203, 16);
            if (!v9)
            {

              if ((v160 & 1) != 0)
                goto LABEL_259;
              goto LABEL_232;
            }
          }
        }

        v10 = 0;
        v11 = 0;
LABEL_232:
        if (WebKit::WebExtension::hasAction((id *)v1)
          || WebKit::WebExtension::hasBrowserAction((id *)v1)
          || WebKit::WebExtension::hasPageAction((id *)v1))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v132 = v204;
          if (v204)
          {
            if (*((_DWORD *)v204 + 1))
            {
              *(_DWORD *)v204 += 2;
              v204 = v132;
              WebKit::WebExtension::populateActionPropertiesIfNeeded(v1);
              WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)v1 + 32);
              v133 = (void *)objc_claimAutoreleasedReturnValue();
              MEMORY[0x19AEABCC8](&v205, v133);
              v135 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v135 += 2;
              v206 = v135;
              v207 = 0;
              v136 = *((unsigned int *)v1 + 17);
              if ((_DWORD)v136 == *((_DWORD *)v1 + 16))
              {
                WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>((unsigned int *)v1 + 14, (unint64_t)&v204);
              }
              else
              {
                v137 = *((_QWORD *)v1 + 7) + 32 * v136;
                v138 = v204;
                v204 = 0;
                *(_QWORD *)v137 = v138;
                v139 = v205;
                v205 = 0;
                *(_QWORD *)(v137 + 8) = v139;
                v140 = v206;
                v206 = 0;
                *(_QWORD *)(v137 + 16) = v140;
                *(_DWORD *)(v137 + 24) = 0;
                ++*((_DWORD *)v1 + 17);
              }
              v141 = v206;
              v206 = 0;
              if (v141)
              {
                if (*(_DWORD *)v141 == 2)
                  WTF::StringImpl::destroy(v141, v134);
                else
                  *(_DWORD *)v141 -= 2;
              }
              v142 = v205;
              v205 = 0;
              if (v142)
              {
                if (*(_DWORD *)v142 == 2)
                  WTF::StringImpl::destroy(v142, v134);
                else
                  *(_DWORD *)v142 -= 2;
              }
              v143 = v204;
              v204 = 0;
              if (v143)
              {
                if (*(_DWORD *)v143 == 2)
                  WTF::StringImpl::destroy(v143, v134);
                else
                  *(_DWORD *)v143 -= 2;
              }

            }
            if (*(_DWORD *)v132 == 2)
              WTF::StringImpl::destroy(v132, v131);
            else
              *(_DWORD *)v132 -= 2;
          }
        }
LABEL_259:
        if (v11)
        {
          if (v10)
            v144 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v144 = &stru_1E351F1B8;
          WebKit::WebExtension::createError(v1, 10, v144, 0);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((uint64_t)v1, v145);

          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v146);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        goto LABEL_229;
      }
    }
    else
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)v1 + 19);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v129, "objectForKey:", CFSTR("commands"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v4)
        goto LABEL_228;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_228;
    }
    WebKit::WebExtension::createError(v1, 10, 0, 0);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((uint64_t)v1, v130);

LABEL_228:
LABEL_229:

  }
}

void sub_197705DD4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,int a44,uint64_t a45,uint64_t a46,void *a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,WTF::StringImpl *a55,WTF::StringImpl *a56,WTF::StringImpl *a57,WTF::StringImpl *a58)
{
  WTF::StringImpl *v58;
  void *v59;
  void *v60;
  uint64_t v62;
  char *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  v62 = 400;
  while (1)
  {
    v63 = (char *)&STACK[0x370] + v62;
    v64 = *(WTF::StringImpl **)((char *)&STACK[0x370] + v62 - 8);
    *(unint64_t *)((char *)&STACK[0x370] + v62 - 8) = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, a2);
      else
        *(_DWORD *)v64 -= 2;
    }
    v65 = (WTF::StringImpl *)*((_QWORD *)v63 - 2);
    *((_QWORD *)v63 - 2) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, a2);
      else
        *(_DWORD *)v65 -= 2;
    }
    v62 -= 16;
    if (!v62)
    {

      if (a55)
      {
        if (*(_DWORD *)a55 == 2)
          WTF::StringImpl::destroy(a55, v66);
        else
          *(_DWORD *)a55 -= 2;
      }

      if (a58)
      {
        if (*(_DWORD *)a58 == 2)
          WTF::StringImpl::destroy(a58, v67);
        else
          *(_DWORD *)a58 -= 2;
      }
      if (a57)
      {
        if (*(_DWORD *)a57 == 2)
          WTF::StringImpl::destroy(a57, v67);
        else
          *(_DWORD *)a57 -= 2;
      }
      if (a56)
      {
        if (*(_DWORD *)a56 == 2)
          WTF::StringImpl::destroy(a56, v67);
        else
          *(_DWORD *)a56 -= 2;
      }

      if (a44 && v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v68);
        else
          *(_DWORD *)v58 -= 2;
      }

      _Unwind_Resume(a1);
    }
  }
}

void WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded(WebKit::WebExtension *this)
{
  _BOOL8 v2;
  WTF *v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  __CFString *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  id *v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  id v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int data;
  int v33;
  void *v34;
  void *v35;
  BOOL v36;
  void *v37;
  int i;
  int v39;
  int j;
  int v41;
  WTF *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t k;
  id v47;
  void *v48;
  void *v49;
  BOOL v50;
  id v51;
  void *v52;
  const __CFString *v53;
  void *v54;
  const __CFString *v55;
  void *v56;
  id v57;
  __CFString *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  __CFString *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  const __CFString *v64;
  const WTF::StringImpl *v65;
  id v66;
  WTF::StringImpl *v67;
  int v68;
  const __CFString *v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  __CFString *v75;
  const __CFString *v76;
  __CFString *v77;
  void *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int m;
  int v86;
  WTF *v87;
  __CFString *v88;
  __CFString *v89;
  void *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  void *v94;
  void *v95;
  uint64_t *v96;
  char v97;
  uint64_t v98;
  id obj;
  uint64_t v100;
  WebKit::WebExtension *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unsigned __int8 v104;
  const __CFString *v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  WTF::StringImpl **v111;
  WTF::StringImpl *v112;
  unsigned __int8 v113;
  const __CFString *v114;
  id v115;
  _BYTE v116[128];
  _QWORD v117[3];
  _QWORD v118[3];
  __CFString *v119;
  const __CFString *v120;
  const __CFString *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebExtension::manifestParsedSuccessfully(this);
  if (!v2 || (*((_WORD *)this + 172) & 0x2000) != 0)
    return;
  v101 = this;
  *((_WORD *)this + 172) |= 0x2000u;
  WebKit::WebExtension::supportedPermissions((WebKit::WebExtension *)v2);
  v3 = (WTF *)MEMORY[0x19AEABCC8](&v103, CFSTR("declarativeNetRequest"));
  v5 = qword_1ECE73218;
  if (qword_1ECE73218)
  {
    v28 = *(_DWORD *)(qword_1ECE73218 - 8);
    v29 = *((_DWORD *)v103 + 4);
    if (v29 >= 0x100)
      v30 = v29 >> 8;
    else
      v30 = WTF::StringImpl::hashSlowCase(v103);
    for (i = 0; ; v30 = i + v39)
    {
      v39 = v30 & v28;
      v3 = *(WTF **)(v5 + 8 * (v30 & v28));
      if (v3 != (WTF *)-1)
      {
        if (!v3)
          goto LABEL_4;
        if ((WTF::equal(v3, v103, v4) & 1) != 0)
          break;
      }
      ++i;
    }
    v10 = 0;
  }
  else
  {
LABEL_4:
    WebKit::WebExtension::supportedPermissions(v3);
    MEMORY[0x19AEABCC8](&v119, CFSTR("declarativeNetRequestWithHostAccess"));
    v8 = qword_1ECE73218;
    v9 = (WTF::StringImpl *)v119;
    if (qword_1ECE73218)
    {
      v31 = *(_DWORD *)(qword_1ECE73218 - 8);
      data = v119->data;
      if (data >= 0x100)
        v33 = data >> 8;
      else
        v33 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v119);
      for (j = 0; ; v33 = j + v41)
      {
        v41 = v33 & v31;
        v42 = *(WTF **)(v8 + 8 * (v33 & v31));
        if (v42 != (WTF *)-1)
        {
          if (!v42)
          {
            v10 = 1;
            goto LABEL_53;
          }
          if ((WTF::equal(v42, (const WTF::StringImpl *)v119, v7) & 1) != 0)
            break;
        }
        ++j;
      }
      v10 = 0;
LABEL_53:
      v9 = (WTF::StringImpl *)v119;
    }
    else
    {
      v10 = 1;
    }
    v119 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = v103;
  v103 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v6);
      if (v10)
        goto LABEL_14;
LABEL_20:
      v16 = (id *)((char *)v101 + 152);
      WebKit::objectForKey<NSDictionary>((id *)v101 + 19, CFSTR("declarative_net_request"), 1, 0);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      if (v95)
      {
        v17 = objc_opt_class();
        WebKit::objectForKey<NSArray>(v95, (uint64_t)CFSTR("rule_resources"), 0, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v94 = v18;
        if (v18)
        {
          if ((unint64_t)objc_msgSend(v18, "count") >= 0x65)
          {
            v20 = v103 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
            WebKit::WebExtension::createError(v101, 13, v20, 0);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            WebKit::WebExtension::recordError((uint64_t)v101, v21);

            v23 = v103;
            v103 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
          v111 = 0;
          v107 = 0u;
          v108 = 0u;
          v109 = 0u;
          v110 = 0u;
          v43 = v94;
          obj = v43;
          v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v107, v116, 16);
          if (v44)
          {
            v45 = 0;
            v98 = 0;
            v97 = 0;
            v100 = *(_QWORD *)v108;
            v96 = (uint64_t *)((char *)v101 + 72);
            do
            {
              v102 = v44;
              for (k = 0; k != v102; ++k)
              {
                if (*(_QWORD *)v108 != v100)
                  objc_enumerationMutation(obj);
                if (v45 <= 0x63)
                {
                  v47 = *(id *)(*((_QWORD *)&v107 + 1) + 8 * k);
                  v119 = CFSTR("id");
                  v120 = CFSTR("enabled");
                  v121 = CFSTR("path");
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v119, 3);
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  v117[0] = CFSTR("id");
                  v118[0] = objc_opt_class();
                  v117[1] = CFSTR("enabled");
                  v118[1] = objc_opt_class();
                  v117[2] = CFSTR("path");
                  v118[2] = objc_opt_class();
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v118, v117, 3);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  v115 = 0;
                  v50 = WebKit::validateDictionary(v47, 0, v48, v49, &v115);
                  v51 = v115;
                  if (v50)
                  {
                    WebKit::objectForKey<NSString>(v47, (uint64_t)CFSTR("id"), 1);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v52, "length"))
                    {
                      WebKit::objectForKey<NSString>(v47, (uint64_t)CFSTR("path"), 1);
                      v54 = (void *)objc_claimAutoreleasedReturnValue();
                      if (objc_msgSend(v54, "length"))
                      {
                        MEMORY[0x19AEABCC8](&v112, v52);
                        WebKit::objectForKey<NSNumber>(v47, (uint64_t)CFSTR("enabled"));
                        v56 = (void *)objc_claimAutoreleasedReturnValue();
                        v113 = objc_msgSend(v56, "BOOLValue");
                        MEMORY[0x19AEABCC8](&v114, v54);

                        v57 = 0;
                        v103 = v112;
                        v104 = v113;
                        v105 = v114;
                        v106 = 1;
                      }
                      else
                      {
                        if (v112)
                          v61 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                        else
                          v61 = &stru_1E351F1B8;
                        WebKit::WebExtension::createError(v101, 13, v61, 0);
                        v57 = (id)objc_claimAutoreleasedReturnValue();

                        v63 = v112;
                        v112 = 0;
                        if (v63)
                        {
                          if (*(_DWORD *)v63 == 2)
                            WTF::StringImpl::destroy(v63, v62);
                          else
                            *(_DWORD *)v63 -= 2;
                        }
                        LOBYTE(v103) = 0;
                        v106 = 0;
                      }

                    }
                    else
                    {
                      if (v112)
                        v58 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      else
                        v58 = &stru_1E351F1B8;
                      WebKit::WebExtension::createError(v101, 13, v58, 0);
                      v57 = (id)objc_claimAutoreleasedReturnValue();

                      v60 = v112;
                      v112 = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, v59);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      LOBYTE(v103) = 0;
                      v106 = 0;
                    }

                  }
                  else
                  {
                    WebKit::WebExtension::createError(v101, 13, v51, 0);
                    v57 = (id)objc_claimAutoreleasedReturnValue();
                    LOBYTE(v103) = 0;
                    v106 = 0;
                  }

                  v66 = v57;
                  if (v106)
                  {
                    v67 = v103;
                    if (v103)
                      *(_DWORD *)v103 += 2;
                    v119 = (__CFString *)v67;
                    v68 = v104;
                    LOBYTE(v120) = v104;
                    v69 = v105;
                    if (v105)
                      LODWORD(v105->isa) += 2;
                    v121 = v69;
                    v70 = v111;
                    if (v111)
                    {
                      v80 = *((_DWORD *)v111 - 2);
                      v81 = *((_DWORD *)v67 + 4);
                      if (v81 >= 0x100)
                        v82 = v81 >> 8;
                      else
                        v82 = WTF::StringImpl::hashSlowCase(v67);
                      for (m = 0; ; v82 = m + v86)
                      {
                        v86 = v82 & v80;
                        v87 = v70[v82 & v80];
                        if (v87 != (WTF *)-1)
                        {
                          if (!v87)
                          {
                            if ((_BYTE)v120)
                              goto LABEL_89;
                            goto LABEL_90;
                          }
                          if ((WTF::equal(v87, (const WTF::StringImpl *)v119, v65) & 1) != 0)
                          {
                            if (v119)
                              v88 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                            else
                              v88 = &stru_1E351F1B8;
                            if (v118[0])
                              v89 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                            else
                              v89 = &stru_1E351F1B8;
                            WebKit::WebExtension::createError(v101, 13, v89, 0);
                            v90 = (void *)objc_claimAutoreleasedReturnValue();
                            WebKit::WebExtension::recordError((uint64_t)v101, v90);

                            v92 = (WTF::StringImpl *)v118[0];
                            v118[0] = 0;
                            if (v92)
                            {
                              if (*(_DWORD *)v92 == 2)
                                WTF::StringImpl::destroy(v92, v91);
                              else
                                *(_DWORD *)v92 -= 2;
                            }

                            goto LABEL_108;
                          }
                        }
                        ++m;
                      }
                    }
                    if (!v68)
                      goto LABEL_90;
LABEL_89:
                    if (((unint64_t)++v98 < 0x33) | v97 & 1)
                    {
LABEL_90:
                      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v111, (WTF::StringImpl **)&v119, v65, (uint64_t)v118);
                      v72 = *((_DWORD *)v101 + 21);
                      if (v72 == *((_DWORD *)v101 + 20))
                      {
                        WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>((uint64_t)v96, (unint64_t)&v119);
                      }
                      else
                      {
                        v74 = *v96;
                        v75 = v119;
                        if (v119)
                          LODWORD(v119->isa) += 2;
                        *(_QWORD *)(v74 + 24 * v72) = v75;
                        *(_BYTE *)(v74 + 24 * v72 + 8) = (_BYTE)v120;
                        v76 = v121;
                        if (v121)
                          LODWORD(v121->isa) += 2;
                        *(_QWORD *)(v74 + 24 * v72 + 16) = v76;
                        *((_DWORD *)v101 + 21) = v72 + 1;
                      }
                      ++v45;
                    }
                    else
                    {
                      if (v118[0])
                        v77 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      else
                        v77 = &stru_1E351F1B8;
                      WebKit::WebExtension::createError(v101, 13, v77, 0);
                      v78 = (void *)objc_claimAutoreleasedReturnValue();
                      WebKit::WebExtension::recordError((uint64_t)v101, v78);

                      v79 = (WTF::StringImpl *)v118[0];
                      v118[0] = 0;
                      if (v79)
                      {
                        if (*(_DWORD *)v79 == 2)
                          WTF::StringImpl::destroy(v79, v71);
                        else
                          *(_DWORD *)v79 -= 2;
                      }
                      v97 = 1;
                    }
LABEL_108:
                    v83 = (WTF::StringImpl *)v121;
                    v121 = 0;
                    if (v83)
                    {
                      if (*(_DWORD *)v83 == 2)
                        WTF::StringImpl::destroy(v83, v71);
                      else
                        *(_DWORD *)v83 -= 2;
                    }
                    v84 = (WTF::StringImpl *)v119;
                    v119 = 0;
                    if (v84)
                    {
                      if (*(_DWORD *)v84 == 2)
                        WTF::StringImpl::destroy(v84, v71);
                      else
                        *(_DWORD *)v84 -= 2;
                    }
                  }
                  else
                  {
                    WebKit::WebExtension::createError(v101, 13, 0, v66);
                    v73 = (void *)objc_claimAutoreleasedReturnValue();
                    WebKit::WebExtension::recordError((uint64_t)v101, v73);

                  }
                  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v103, v71);

                }
              }
              v43 = obj;
              v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v116, 16);
            }
            while (v44);
          }

          if (v111)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v111, v93);
          v27 = obj;
        }
        else
        {
          WTF::RetainPtr<NSMutableArray>::get(v16);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "objectForKey:", CFSTR("declarative_net_request"));
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = v35 == 0;

          if (!v36)
          {
            WebKit::WebExtension::createError(v101, 13, 0, 0);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            WebKit::WebExtension::recordError((uint64_t)v101, v37);

          }
          v27 = 0;
        }
      }
      else
      {
        WTF::RetainPtr<NSMutableArray>::get(v16);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "objectForKey:", CFSTR("declarative_net_request"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v25 == 0;

        if (v26)
        {
LABEL_146:

          return;
        }
        WebKit::WebExtension::createError(v101, 13, 0, 0);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)v101, v27);
      }

      goto LABEL_146;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_20;
LABEL_14:
  if (v103)
    v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  WebKit::WebExtension::createError(v101, 13, v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::recordError((uint64_t)v101, v13);

  v15 = v103;
  v103 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
}

void sub_1977070C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34)
{
  uint64_t v34;
  WTF::StringImpl *v36;

  v36 = *(WTF::StringImpl **)(v34 - 120);
  *(_QWORD *)(v34 - 120) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::populateExternallyConnectableIfNeeded(WebKit::WebExtension *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionMatchPattern *v14;
  char isSupported;
  char IsPublicSuffix;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  WTF::StringImpl *v25[3];
  WebKit::WebExtensionMatchPattern *v26;
  WebKit::WebExtensionMatchPattern *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)this + 172) & 0x4000) == 0)
  {
    *((_WORD *)this + 172) |= 0x4000u;
    WebKit::objectForKey<NSDictionary>((id *)this + 19, CFSTR("externally_connectable"), 0, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
    {
      if (objc_msgSend(v2, "count"))
      {
        v32 = 0;
        v4 = objc_opt_class();
        WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("matches"), 1, v4);
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v5 = (id)objc_claimAutoreleasedReturnValue();
        v6 = 0;
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
        if (v7)
        {
          v8 = *(_QWORD *)v29;
          do
          {
            for (i = 0; i != v7; ++i)
            {
              if (*(_QWORD *)v29 != v8)
                objc_enumerationMutation(v5);
              v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
              if (objc_msgSend(v10, "length"))
              {
                MEMORY[0x19AEABCC8](v25, v10);
                WebKit::WebExtensionMatchPattern::getOrCreate(v25, v11, &v27);
                v13 = v25[0];
                v25[0] = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                    WTF::StringImpl::destroy(v13, v12);
                  else
                    *(_DWORD *)v13 -= 2;
                }
                v14 = v27;
                if (v27)
                {
                  if (*((_BYTE *)v27 + 48))
                  {
                    v27 = 0;
                    v6 = 1;
LABEL_25:
                    CFRelease(*((CFTypeRef *)v14 + 1));
                    continue;
                  }
                  isSupported = WebKit::WebExtensionMatchPattern::isSupported(v27);
                  v14 = v27;
                  if ((isSupported & 1) != 0
                    && (IsPublicSuffix = WebKit::WebExtensionMatchPattern::hostIsPublicSuffix(v27),
                        v14 = v27,
                        (IsPublicSuffix & 1) == 0))
                  {
                    v26 = v27;
                    v27 = 0;
                    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v32, (uint64_t *)&v26, (uint64_t)v25);
                    v17 = (uint64_t)v26;
                    v26 = 0;
                    if (v17)
                      CFRelease(*(CFTypeRef *)(v17 + 8));
                    v14 = v27;
                  }
                  else
                  {
                    v6 = 1;
                  }
                  v27 = 0;
                  if (v14)
                    goto LABEL_25;
                }
              }
            }
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
          }
          while (v7);
        }

        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)this + 15, &v32);
        v18 = objc_opt_class();
        WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("ids"), 1, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::filterObjects<NSArray>(v19, &__block_literal_global_213);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        v21 = v20;
        if ((v6 & 1) != 0 || (!v32 || !*((_DWORD *)v32 - 3)) && !objc_msgSend(v20, "count"))
        {
          WebKit::WebExtension::createError(this, 15, 0, 0);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((uint64_t)this, v22);

        }
        if (v32)
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v32, v24);
      }
      else
      {
        WebKit::WebExtension::createError(this, 15, 0, 0);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)this, v23);

      }
    }

  }
}

void sub_197707718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::localization(id *this)
{
  void *v2;

  if (WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this))
  {
    WTF::RetainPtr<NSMutableArray>::get(this + 22);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id WebKit::WebExtension::defaultLocale(id *this)
{
  void *v2;

  if (WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this))
  {
    WTF::RetainPtr<NSMutableArray>::get(this + 21);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id WebKit::objectForKey<NSDictionary>(id *a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;

  v7 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSDictionary>(v8, (uint64_t)v7, a3, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1977078CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension37populateExternallyConnectableIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

id WebKit::WebExtension::icon(WebKit::WebExtension *this, CGSize a2)
{
  double height;
  double width;
  const __CFString *v5;
  __CFString *v6;
  WTF::StringImpl *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  WTF::StringImpl *v12;

  height = a2.height;
  width = a2.width;
  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    if (v12)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v8 = v6;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 19);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::bestImageForIconsDictionaryManifestKey(this, v10, CFSTR("icons"), (const void **)this + 29, 16, v8, width, height);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

void sub_1977079FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageForIconsDictionaryManifestKey(WebKit::WebExtension *a1, void *a2, void *a3, const void **a4, int a5, void *a6, double a7, double a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  NSDictionary *v19;
  double v20;
  void *v21;
  void *v22;

  v15 = a2;
  v16 = a3;
  v17 = a6;
  if (!*a4)
  {
    WebKit::objectForKey<NSDictionary>(v15, (uint64_t)v16, 1, 0);
    v19 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    if (a7 <= a8)
      v20 = a8;
    else
      v20 = a7;
    WebKit::WebExtension::bestImageInIconsDictionary(a1, v19, (unint64_t)v20);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      if (-[NSDictionary count](v19, "count") == 1)
        WTF::RetainPtr<UIImage>::operator=(a4, v18);
    }
    else
    {
      if (-[NSDictionary count](v19, "count"))
      {
        WebKit::WebExtension::createError(a1, a5, v17, 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)a1, v21);
      }
      else
      {
        if (!v19 || -[NSDictionary count](v19, "count"))
        {
          objc_msgSend(v15, "objectForKeyedSubscript:", v16);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v22)
            goto LABEL_16;
        }
        WebKit::WebExtension::createError(a1, a5, 0, 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((uint64_t)a1, v21);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  v18 = (id)*a4;
LABEL_17:

  return v18;
}

void sub_197707BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::actionIcon(WebKit::WebExtension *this, CGSize a2)
{
  double height;
  double width;
  const __CFString *v5;
  void *v6;
  WTF::StringImpl *v7;
  __CFString *v8;
  void *v9;
  WTF::StringImpl *v11;
  CGSize v12;

  height = a2.height;
  width = a2.width;
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    v6 = 0;
    return v6;
  }
  WebKit::WebExtension::populateActionPropertiesIfNeeded(this);
  if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
  {
    if (v11)
      goto LABEL_7;
  }
  else
  {
    if (v11)
    {
LABEL_7:
      v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
      goto LABEL_10;
    }
  }
  v8 = &stru_1E351F1B8;
LABEL_10:
  WTF::RetainPtr<NSMutableArray>::get((id *)this + 30);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::bestImageForIconsDictionaryManifestKey(this, v9, CFSTR("default_icon"), (const void **)this + 31, 7, v8, width, height);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    v12.width = width;
    v12.height = height;
    WebKit::WebExtension::icon(this, v12);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void sub_197707D50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtension::hasAction(id *this)
{
  _BOOL8 v2;
  void *v3;

  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0)
    return 0;
  WebKit::objectForKey<NSDictionary>(this + 19, CFSTR("action"), 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v3 != 0;

  return v2;
}

BOOL WebKit::WebExtension::hasBrowserAction(id *this)
{
  void *v2;
  _BOOL8 v3;

  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) >= 3.0)
    return 0;
  WebKit::objectForKey<NSDictionary>(this + 19, CFSTR("browser_action"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

BOOL WebKit::WebExtension::hasPageAction(id *this)
{
  void *v2;
  _BOOL8 v3;

  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) >= 3.0)
    return 0;
  WebKit::objectForKey<NSDictionary>(this + 19, CFSTR("page_action"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

id WebKit::WebExtension::imageForPath(WebKit::WebExtension *this, NSString *a2)
{
  NSString *v3;
  const __CFData *v4;
  NSString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  id v16;

  v3 = a2;
  WebKit::WebExtension::resourceDataForPath((uint64_t)this, v3, 1, 0);
  v4 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v3;
  if (!-[NSString hasPrefix:](v5, "hasPrefix:", CFSTR("data:")))
  {
    WebKit::WebExtension::resourceFileURLForPath(this, v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    objc_msgSend(v9, "getResourceValue:forKey:error:", &v16, *MEMORY[0x1E0C998E0], 0);
    v10 = v16;
LABEL_8:
    v7 = v10;

    goto LABEL_9;
  }
  v6 = -[NSString rangeOfString:](v5, "rangeOfString:", CFSTR(";"));
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    -[NSString substringWithRange:](v5, "substringWithRange:", 5, v6 - 5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithMIMEType:", v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  v7 = 0;
LABEL_9:

  objc_msgSend(v7, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*MEMORY[0x1E0CEC5E0], "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "isEqualToString:", v12);

  if (v13)
  {
    v14 = _MergedGlobals_34(v4, 0);
    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CEA638], "_imageWithCGSVGDocument:", v14);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      off_1ECE6C740(v14);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA638]), "initWithData:", v4);
  }

LABEL_15:
  return v8;
}

void sub_19770809C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<UIImage>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197708168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12WebExtension33pathForBestImageInIconsDictionaryEP12NSDictionarym_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  char isKindOfClass;

  v3 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1977081C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageInIconsDictionary(WebKit::WebExtension *this, NSDictionary *a2, unint64_t a3)
{
  NSDictionary *v5;
  void *v6;
  double v7;
  double v8;
  NSDictionary *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _QWORD v37[3];

  v37[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (-[NSDictionary count](v5, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "scale");
    v8 = v7;

    v9 = v5;
    if (-[NSDictionary count](v9, "count"))
    {
      v10 = (unint64_t)(v8 * (double)a3);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringValue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v12);
      v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", 2 * v10);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "stringValue");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v15);
        v13 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          v12 = v15;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v10 * 1.5);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "stringValue");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v12);
          v13 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (!v13)
          {
            -[NSDictionary allKeys](v9, "allKeys");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            WebKit::filterObjects<NSArray>(v18, &__block_literal_global_229);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v19, "count"))
            {
              v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3928]), "initWithKey:ascending:selector:", CFSTR("self"), 1, sel_localizedStandardCompare_);
              v37[0] = v29;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v37, 1);
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "sortedArrayUsingDescriptors:", v20);
              v21 = (void *)objc_claimAutoreleasedReturnValue();

              v34 = 0u;
              v35 = 0u;
              v32 = 0u;
              v33 = 0u;
              v30 = v19;
              obj = v21;
              v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
              if (v22)
              {
                v23 = *(_QWORD *)v33;
LABEL_12:
                v24 = 0;
                while (1)
                {
                  if (*(_QWORD *)v33 != v23)
                    objc_enumerationMutation(obj);
                  v25 = objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * v24), "integerValue");
                  if (v25 >= v10)
                    break;
                  if (v22 == ++v24)
                  {
                    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
                    if (v22)
                      goto LABEL_12;
                    break;
                  }
                }
              }
              else
              {
                v25 = 0;
              }

              v19 = v30;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v25);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v26, "stringValue");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v27);
              v13 = (NSString *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v13 = 0;
            }

          }
        }
      }

    }
    else
    {
      v13 = 0;
    }

    if (-[NSString length](v13, "length"))
    {
      WebKit::WebExtension::imageForPath(this, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_19770854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::hasBackgroundContent(WebKit::WebExtension *this)
{
  void *v2;
  _BOOL8 v3;

  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
  WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)this + 280, *((_QWORD *)this + 35));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") || *((_QWORD *)this + 36) || *((_QWORD *)this + 37) != 0;

  return v3;
}

void sub_1977086B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::backgroundContentIsPersistent(id *this)
{
  _BOOL8 result;

  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  result = WebKit::WebExtension::hasBackgroundContent((WebKit::WebExtension *)this);
  if (result)
    return (_WORD)this[43] & 1;
  return result;
}

BOOL WebKit::WebExtension::backgroundContentUsesModules(id *this)
{
  _BOOL8 result;

  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  result = WebKit::WebExtension::hasBackgroundContent((WebKit::WebExtension *)this);
  if (result)
    return (*((unsigned __int16 *)this + 172) >> 1) & 1;
  return result;
}

__CFString *WebKit::WebExtension::backgroundContentPath(WebKit::WebExtension *this)
{
  uint64_t *v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  __CFString *v6;

  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
  if (*((_QWORD *)this + 37))
  {
    v2 = (uint64_t *)((char *)this + 296);
LABEL_3:
    WTF::RetainPtr<__IOHIDDevice *>::get(v2);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
    return v3;
  }
  WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)this + 280, *((_QWORD *)this + 35));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (!v5)
  {
    if (!*((_QWORD *)this + 36))
    {
      v3 = 0;
      return v3;
    }
    v2 = (uint64_t *)((char *)this + 288);
    goto LABEL_3;
  }
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
  if (*((_BYTE *)this + 312))
    v6 = CFSTR("_generated_service_worker.js");
  else
    v6 = CFSTR("_generated_background_page.html");
  v3 = v6;
  return v3;
}

void sub_1977087CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZN6WebKit12WebExtension26generatedBackgroundContentEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  v7 = CFSTR("<script src=\"%@\"></script>");
  v8 = CFSTR("import \"./%@\";");
  if (*(_BYTE *)(a1 + 33))
    v7 = CFSTR("<script type=\"module\" src=\"%@\"></script>");
  else
    v8 = CFSTR("importScripts(\"%@\");");
  if (*(_BYTE *)(a1 + 32))
    v9 = v8;
  else
    v9 = v7;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v9, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_19770887C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSArray>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_1977088EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension36populateBackgroundPropertiesIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

uint64_t ___ZN6WebKit12WebExtension36populateBackgroundPropertiesIfNeededEv_block_invoke_2()
{
  return objc_msgSend((id)qword_1ECE73210, "containsObject:");
}

uint64_t *WebKit::WebExtension::supportedPermissions(WebKit::WebExtension *this)
{
  WTF::StringImpl *v2;
  uint64_t i;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE73209 & 1) == 0)
  {
    MEMORY[0x19AEABCC8](&v5, CFSTR("activeTab"));
    MEMORY[0x19AEABCC8](&v6, CFSTR("alarms"));
    MEMORY[0x19AEABCC8](&v7, CFSTR("clipboardWrite"));
    MEMORY[0x19AEABCC8](&v8, CFSTR("contextMenus"));
    MEMORY[0x19AEABCC8](&v9, CFSTR("cookies"));
    MEMORY[0x19AEABCC8](&v10, CFSTR("declarativeNetRequest"));
    MEMORY[0x19AEABCC8](&v11, CFSTR("declarativeNetRequestFeedback"));
    MEMORY[0x19AEABCC8](&v12, CFSTR("declarativeNetRequestWithHostAccess"));
    MEMORY[0x19AEABCC8](&v13, CFSTR("menus"));
    MEMORY[0x19AEABCC8](&v14, CFSTR("nativeMessaging"));
    MEMORY[0x19AEABCC8](&v15, CFSTR("notifications"));
    MEMORY[0x19AEABCC8](&v16, CFSTR("scripting"));
    MEMORY[0x19AEABCC8](&v17, CFSTR("storage"));
    MEMORY[0x19AEABCC8](&v18, CFSTR("tabs"));
    MEMORY[0x19AEABCC8](&v19, CFSTR("unlimitedStorage"));
    MEMORY[0x19AEABCC8](&v20, CFSTR("webNavigation"));
    MEMORY[0x19AEABCC8](v21, CFSTR("webRequest"));
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&qword_1ECE73218, &v5, (const WTF::StringImpl *)0x11);
    for (i = 128; i != -8; i -= 8)
    {
      v4 = *(WTF::StringImpl **)((char *)&v5 + i);
      *(WTF::StringImpl **)((char *)&v5 + i) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
    byte_1ECE73209 = 1;
  }
  return &qword_1ECE73218;
}

void sub_197708BA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;

  v4 = 128;
  while (1)
  {
    v5 = *(WTF::StringImpl **)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v4 -= 8;
    if (v4 == -8)
      _Unwind_Resume(exception_object);
  }
}

void WebKit::WebExtension::declarativeNetRequestRuleset(WebKit::WebExtension *this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  WTF *v11;
  _DWORD *v12;

  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded(this);
  v7 = *((unsigned int *)this + 21);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)this + 9);
    v9 = 24 * v7;
    while (!WTF::equal(*(WTF **)v8, *a2, v6))
    {
      v8 += 24;
      v9 -= 24;
      if (!v9)
        goto LABEL_5;
    }
    v11 = *(WTF **)v8;
    if (*(_QWORD *)v8)
      *(_DWORD *)v11 += 2;
    *(_QWORD *)a3 = v11;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(v8 + 8);
    v12 = *(_DWORD **)(v8 + 16);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a3 + 16) = v12;
    v10 = 1;
  }
  else
  {
LABEL_5:
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v10;
}

id WebKit::WebExtension::InjectedContentData::expandedExcludeMatchPatternStrings(WebKit::WebExtension::InjectedContentData *this)
{
  void *v2;
  _QWORD *v3;
  WebKit::WebExtensionMatchPattern **v4;
  WebKit::WebExtensionMatchPattern **v5;
  WebKit::WebExtensionMatchPattern **v6;
  WebKit::WebExtensionMatchPattern **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)((char *)this + 8);
  v4 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 1);
  v5 = v4;
  v7 = v6;
  if (*v3)
    v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  else
    v8 = 0;
  if ((WebKit::WebExtensionMatchPattern **)v8 != v4)
  {
    do
    {
      WebKit::WebExtensionMatchPattern::expandedStrings(*v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObjectsFromArray:", v9);

      while (++v5 != v7)
      {
        if ((unint64_t)*v5 + 1 > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != (WebKit::WebExtensionMatchPattern **)v8);
  }
  v10 = (void *)objc_msgSend(v2, "copy");

  return v10;
}

void sub_197708DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _DWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionMatchPattern *v14;
  WebKit::WebExtensionMatchPattern *v15;
  const __CFString *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebKit::WebExtensionMatchPattern *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  char v41;
  void *v42;
  void *v43;
  const __CFString *v44;
  char v45;
  __CFString *v46;
  void *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __CFString *v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  const __CFString *v54;
  __CFString *v55;
  void *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __CFString *v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  void *v63;
  void *v64;
  const __CFString *v65;
  char v66;
  __CFString *v67;
  void *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t *v73;
  _QWORD *v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  CFTypeRef v80;
  WTF::StringImpl *v81;
  void *v82;
  void *v83;
  char v84;
  char v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  WTF::StringImpl *v91;
  uint64_t *v92;
  char v93;
  WTF::StringImpl *v94;
  char v95;
  char v96;
  char v97;
  char v98;
  CFTypeRef v99[2];
  CFTypeRef cf[2];
  WebKit::WebExtensionMatchPattern *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  WebKit::WebExtensionMatchPattern *v106;
  WebKit::WebExtensionMatchPattern *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  WTF::StringImpl *v112;
  _BYTE v113[128];
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_DWORD **)(a1 + 32);
  v112 = 0;
  v5 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("matches"), 1, v5);
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v108, v114, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v109;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v109 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * i);
        if (objc_msgSend(v10, "length"))
        {
          MEMORY[0x19AEABCC8](&v91, v10);
          WebKit::WebExtensionMatchPattern::getOrCreate(&v91, v11, &v107);
          v13 = v91;
          v91 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (v107)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v107))
            {
              v106 = v107;
              v107 = 0;
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v112, (uint64_t *)&v106, (uint64_t)&v91);
              v14 = v106;
              v106 = 0;
              if (v14)
                CFRelease(*((CFTypeRef *)v14 + 1));
            }
            v15 = v107;
            v107 = 0;
            if (v15)
              CFRelease(*((CFTypeRef *)v15 + 1));
          }
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v108, v114, 16);
    }
    while (v7);
  }

  if (v112 && *((_DWORD *)v112 - 3))
  {
    v17 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("js"), 1, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::filterObjects<NSArray>(v18, &__block_literal_global_306);
    v89 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("css"), 1, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::filterObjects<NSArray>(v20, &__block_literal_global_307);
    v90 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v89, "count") && !objc_msgSend(v90, "count"))
    {
      if (v91)
        v50 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v50 = &stru_1E351F1B8;
      WebKit::WebExtension::createError((WebKit::WebExtension *)v4, 11, v50, 0);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)v4, v51);

      v53 = v91;
      v91 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v52);
        else
          *(_DWORD *)v53 -= 2;
      }
      goto LABEL_108;
    }
    WebKit::objectForKey<NSNumber>(v3, (uint64_t)CFSTR("match_about_blank"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(v22, "BOOLValue");

    v107 = 0;
    v23 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("exclude_matches"), 1, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v25 = v24;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v102, v113, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v103;
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v103 != v27)
            objc_enumerationMutation(v25);
          v29 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * j);
          if (objc_msgSend(v29, "length"))
          {
            MEMORY[0x19AEABCC8](&v91, v29);
            WebKit::WebExtensionMatchPattern::getOrCreate(&v91, v30, &v106);
            v32 = v91;
            v91 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v31);
              else
                *(_DWORD *)v32 -= 2;
            }
            if (v106)
            {
              if (WebKit::WebExtensionMatchPattern::isSupported(v106))
              {
                v101 = v106;
                v106 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v107, (uint64_t *)&v101, (uint64_t)&v91);
                v33 = (uint64_t)v101;
                v101 = 0;
                if (v33)
                  CFRelease(*(CFTypeRef *)(v33 + 8));
              }
              v34 = v106;
              v106 = 0;
              if (v34)
                CFRelease(*((CFTypeRef *)v34 + 1));
            }
          }
        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v102, v113, 16);
      }
      while (v26);
    }

    v35 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("include_globs"), 1, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::filterObjects<NSArray>(v36, &__block_literal_global_310);
    v88 = (void *)objc_claimAutoreleasedReturnValue();

    v37 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v3, (uint64_t)CFSTR("exclude_globs"), 1, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::filterObjects<NSArray>(v38, &__block_literal_global_311);
    v87 = (void *)objc_claimAutoreleasedReturnValue();

    WebKit::objectForKey<NSNumber>(v3, (uint64_t)CFSTR("all_frames"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_msgSend(v39, "BOOLValue");

    WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("run_at"), 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = v40;
    if (v40 && (objc_msgSend(v40, "isEqualToString:", CFSTR("document_idle")) & 1) == 0)
    {
      if ((objc_msgSend(v86, "isEqualToString:", CFSTR("document_start")) & 1) != 0)
      {
        v41 = 1;
        goto LABEL_44;
      }
      if ((objc_msgSend(v86, "isEqualToString:", CFSTR("document_end")) & 1) != 0)
      {
        v41 = 2;
        goto LABEL_44;
      }
      if (v91)
        v59 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v59 = &stru_1E351F1B8;
      WebKit::WebExtension::createError((WebKit::WebExtension *)v4, 11, v59, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)v4, v60);

      v62 = v91;
      v91 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v61);
        else
          *(_DWORD *)v62 -= 2;
      }
    }
    v41 = 0;
LABEL_44:
    WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("world"), 1);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v42;
    if (v42 && (objc_msgSend(v42, "isEqualToString:", CFSTR("ISOLATED")) & 1) == 0)
    {
      if ((objc_msgSend(v43, "isEqualToString:", CFSTR("MAIN")) & 1) != 0)
      {
        v45 = 0;
LABEL_76:
        WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("css_origin"), 1);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "lowercaseString");
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v64 && (objc_msgSend(v64, "isEqualToString:", CFSTR("author")) & 1) == 0)
        {
          if ((objc_msgSend(v64, "isEqualToString:", CFSTR("user")) & 1) != 0)
          {
            v66 = 0;
LABEL_87:
            v71 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            v94 = v71;
            *(_OWORD *)v99 = 0u;
            *(_OWORD *)cf = 0u;
            v72 = v112;
            v112 = 0;
            v73 = (uint64_t *)v107;
            v107 = 0;
            v91 = v72;
            v92 = v73;
            v93 = v41;
            v95 = v85;
            v96 = v84;
            v97 = v45;
            v98 = v66;
            WTF::RetainPtr<NSArray>::operator=(v99, v89);
            WTF::RetainPtr<NSArray>::operator=(&v99[1], v90);
            WTF::RetainPtr<NSArray>::operator=(cf, v88);
            WTF::RetainPtr<NSArray>::operator=(&cf[1], v87);
            v74 = v4 + 6;
            v75 = v4[9];
            if (v75 == v4[8])
            {
              WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)v74, (unint64_t)&v91);
            }
            else
            {
              WebKit::WebExtension::InjectedContentData::InjectedContentData(*v74 + 72 * v75, (uint64_t *)&v91);
              ++v4[9];
            }
            v77 = cf[1];
            cf[1] = 0;
            if (v77)
              CFRelease(v77);
            v78 = cf[0];
            cf[0] = 0;
            if (v78)
              CFRelease(v78);
            v79 = v99[1];
            v99[1] = 0;
            if (v79)
              CFRelease(v79);
            v80 = v99[0];
            v99[0] = 0;
            if (v80)
              CFRelease(v80);
            v81 = v94;
            v94 = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
                WTF::StringImpl::destroy(v81, v76);
              else
                *(_DWORD *)v81 -= 2;
            }
            if (v92)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v92, v76);
            if (v91)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v91, v76);

            if (v107)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v107, v82);
LABEL_108:

            goto LABEL_109;
          }
          if (v91)
            v67 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v67 = &stru_1E351F1B8;
          WebKit::WebExtension::createError((WebKit::WebExtension *)v4, 11, v67, 0);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((uint64_t)v4, v68);

          v70 = v91;
          v91 = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, v69);
            else
              *(_DWORD *)v70 -= 2;
          }
        }
        v66 = 1;
        goto LABEL_87;
      }
      if (v91)
        v55 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v55 = &stru_1E351F1B8;
      WebKit::WebExtension::createError((WebKit::WebExtension *)v4, 11, v55, 0);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((uint64_t)v4, v56);

      v58 = v91;
      v91 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v57);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
    v45 = 1;
    goto LABEL_76;
  }
  if (v91)
    v46 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v46 = &stru_1E351F1B8;
  WebKit::WebExtension::createError((WebKit::WebExtension *)v4, 11, v46, 0);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::recordError((uint64_t)v4, v47);

  v49 = v91;
  v91 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
LABEL_109:

  if (v112)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v112, v83);

}

void sub_1977097D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef cf,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t *a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  WTF::StringImpl *v50;
  void *v51;
  void *v52;

  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v50);
    else
      *(_DWORD *)a15 -= 2;
  }

  if (a34)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a34, v51);

  if (a44)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a44, v52);

  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

void WebKit::WebExtension::allRequestedMatchPatterns(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  unsigned int v16;
  _QWORD **v17;
  _QWORD **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[24];

  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(this);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateExternallyConnectableIfNeeded((WebKit::WebExtension *)this);
  *a2 = 0;
  v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 11);
  v5 = v4;
  v7 = v6;
  v8 = (char *)this[11];
  if (v8)
    v9 = (uint64_t *)&v8[8 * *((unsigned int *)v8 - 1)];
  else
    v9 = 0;
  if (v9 != v4)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v5, (uint64_t)v24);
      while (++v5 != v7)
      {
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != v9);
  }
  v10 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 15);
  v11 = v10;
  v13 = v12;
  v14 = (char *)this[15];
  if (v14)
    v15 = (uint64_t *)&v14[8 * *((unsigned int *)v14 - 1)];
  else
    v15 = 0;
  if (v15 != v10)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v11, (uint64_t)v24);
      while (++v11 != v13)
      {
        if ((unint64_t)(*v11 + 1) > 1)
          goto LABEL_20;
      }
      v11 = v13;
LABEL_20:
      ;
    }
    while (v11 != v15);
  }
  v16 = *((_DWORD *)this + 9);
  if (v16)
  {
    v17 = (_QWORD **)this[3];
    v18 = &v17[9 * v16];
    do
    {
      v19 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v17);
      v20 = v19;
      v22 = v21;
      if (*v17)
        v23 = (uint64_t)&(*v17)[*((unsigned int *)*v17 - 1)];
      else
        v23 = 0;
      if ((uint64_t *)v23 != v19)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v20, (uint64_t)v24);
          while (++v20 != v22)
          {
            if ((unint64_t)(*v20 + 1) > 1)
              goto LABEL_32;
          }
          v20 = v22;
LABEL_32:
          ;
        }
        while (v20 != (uint64_t *)v23);
      }
      v17 += 9;
    }
    while (v17 != v18);
  }
}

void sub_197709E18(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t **v2;

  if (*v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::~WebExtension(WebKit::WebExtension *this, void *a2)
{
  WebKit::WebExtension::~WebExtension(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  uint64_t *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  uint64_t *v32;
  uint64_t *v33;
  WTF::StringImpl *v34;
  void *v35;
  WTF::StringImpl *v36;
  void *v37;

  *(_QWORD *)this = &off_1E34F6B78;
  v3 = (const void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v19)
    CFRelease(v19);
  v20 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v20)
    CFRelease(v20);
  v21 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v21)
    CFRelease(v21);
  v22 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v27)
    CFRelease(v27);
  v28 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v28)
    CFRelease(v28);
  v29 = (uint64_t *)*((_QWORD *)this + 15);
  if (v29)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v29, a2);
  v30 = (WTF::StringImpl **)*((_QWORD *)this + 14);
  if (v30)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, (WTF::StringImpl *)a2);
  v31 = (WTF::StringImpl **)*((_QWORD *)this + 13);
  if (v31)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)a2);
  v32 = (uint64_t *)*((_QWORD *)this + 12);
  if (v32)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v32, a2);
  v33 = (uint64_t *)*((_QWORD *)this + 11);
  if (v33)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v33, a2);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 14, v34);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v35);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v36);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v37);
}

uint64_t API::ObjectImpl<(API::Object::Type)110>::type()
{
  return 110;
}

uint64_t **WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(uint64_t **a1, _QWORD **a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t *v6;

  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((uint64_t *)v12 != v8)
      {
        do
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = ~(*v9 << 32) + *v9;
          v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~((_DWORD)v17 << 27)));
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 8 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          WTF::GenericHashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>::assignToEmpty<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&>((uint64_t *)(v13 + 8 * v20), v9);
          while (++v9 != v11)
          {
            if ((unint64_t)(*v9 + 1) > 1)
              goto LABEL_17;
          }
          v9 = v11;
LABEL_17:
          ;
        }
        while (v9 != (uint64_t *)v12);
      }
    }
  }
  return a1;
}

uint64_t initCGSVGDocumentCreateFromData(const __CFData *a1, const __CFDictionary *a2)
{
  void *v4;
  uint64_t (*v5)(const __CFData *, const __CFDictionary *);

  if (byte_1ECE7320A == 1)
  {
    v4 = (void *)qword_1ECE73220;
  }
  else
  {
    v4 = (void *)___ZL14CoreSVGLibraryv_block_invoke();
    qword_1ECE73220 = (uint64_t)v4;
    byte_1ECE7320A = 1;
  }
  v5 = (uint64_t (*)(const __CFData *, const __CFDictionary *))dlsym(v4, "CGSVGDocumentCreateFromData");
  _MergedGlobals_34 = v5;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x19770A094);
  }
  return v5(a1, a2);
}

uint64_t ___ZL14CoreSVGLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSVG.framework/CoreSVG", 2);
  if (!result)
  {
    result = 64;
    __break(0xC471u);
  }
  return result;
}

uint64_t initCGSVGDocumentRelease(uint64_t a1)
{
  void *v2;
  uint64_t (*v3)();

  if (byte_1ECE7320A == 1)
  {
    v2 = (void *)qword_1ECE73220;
  }
  else
  {
    v2 = (void *)___ZL14CoreSVGLibraryv_block_invoke();
    qword_1ECE73220 = (uint64_t)v2;
    byte_1ECE7320A = 1;
  }
  v3 = (uint64_t (*)())dlsym(v2, "CGSVGDocumentRelease");
  off_1ECE6C740 = v3;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19770A168);
  }
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_DWORD *)(v2 + 24);
    do
    {
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t i;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * i);
      v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100)
            v14 = v13 >> 8;
          else
            v14 = WTF::StringImpl::hashSlowCase(v10);
          v15 = 0;
          do
          {
            v16 = v14 & v12;
            v14 = ++v15 + v16;
          }
          while (*(_QWORD *)(v11 + 16 * v16));
          v17 = v11 + 16 * v16;
          *(_QWORD *)v17 = 0;
          v18 = *v9;
          *v9 = 0;
          *(_QWORD *)v17 = v18;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v2 + 16 * i + 8);
          v19 = *v9;
          *v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v7);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

_QWORD *WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v10;
    }
    *a1 = v6;
  }
  else
  {
    *a1 = 0;
  }
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v10;
    }
    a1[1] = v8;
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_19770A49C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *a1 = v6;
  }
  else
  {
    *a1 = 0;
  }
  MEMORY[0x19AEABCC8](a1 + 1, *a4);
  return a1;
}

void sub_19770A548(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  _BYTE v9[24];

  *a1 = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    v6 = &a2[2 * a3];
    do
    {
      v7 = a2 + 1;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a1, a2, (WTF::StringImpl *)(a2 + 1), (uint64_t)v9);
      a2 += 2;
    }
    while (v7 + 1 != v6);
  }
  return a1;
}

void sub_19770A5E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  if (*v2)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(const WTF::StringImpl **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  const WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  WTF *result;
  int i;
  int v11;

  v3 = qword_1ECE73228;
  if (!qword_1ECE73228)
    return 0;
  v5 = *(_DWORD *)(qword_1ECE73228 - 8);
  v6 = *a1;
  v7 = *((_DWORD *)v6 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(v6);
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v5;
    result = *(WTF **)(v3 + 16 * (v8 & v5));
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a1, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)1;
}

void WebKit::WebExtension::InjectedContentData::~InjectedContentData(WebKit::WebExtension::InjectedContentData *this, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;

  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  if (v8)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v8, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*(uint64_t **)this, a2);
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtension::InjectedContentData *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::WebExtension::InjectedContentData **)a1;
    v5 = 72 * v3;
    do
    {
      WebKit::WebExtension::InjectedContentData::~InjectedContentData(v4, a2);
      v4 = (WebKit::WebExtension::InjectedContentData *)(v6 + 72);
      v5 -= 72;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *(_QWORD *)a1 + 8;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v6 = *(uint64_t **)(v5 - 8);
      if (v6)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v6, a2);
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (char *)v3 + 24 * v4;
        v9 = (uint64_t)v3 + 8;
        do
        {
          *(_QWORD *)v7 = 0;
          v11 = v9 - 8;
          v10 = *(_QWORD *)(v9 - 8);
          *(_QWORD *)(v9 - 8) = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = v10;
          v12 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v7 + 8) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 16) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 20) = v12;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v6);
          result = *(_QWORD *)(v9 - 8);
          if (result)
            result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)result, v6);
          v9 += 24;
          v7 += 24;
        }
        while ((char *)(v11 + 24) != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * a1[3];
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(result + 24);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          *((_QWORD *)v7 + 2) = v12;
          v7[6] = *((_DWORD *)v9 + 6);
          v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v6);
            else
              *(_DWORD *)v14 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
  v7 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v7 += 2;
  *v6 = v7;
  *(_BYTE *)(v5 + 24 * v4 + 8) = *(_BYTE *)(v3 + 8);
  v8 = *(_DWORD **)(v3 + 16);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v5 + 24 * v4 + 16) = v8;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 24 * *(unsigned int *)(result + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    WTF::VectorMover<false,WebCore::WebLockManagerSnapshot::Info>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtension::InjectedContentData::InjectedContentData(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebKit::WebExtension::InjectedContentData::InjectedContentData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)(a1 + 40), a2 + 5);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)(a1 + 48), a2 + 6);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)(a1 + 56), a2 + 7);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)(a1 + 64), a2 + 8);
  return a1;
}

void sub_19770B058(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void **v3;
  const void **v4;
  const void **v5;
  const void *v7;
  const void *v8;
  const void *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;

  v7 = *v5;
  *v5 = 0;
  if (v7)
    CFRelease(v7);
  v8 = *v4;
  *v4 = 0;
  if (v8)
    CFRelease(v8);
  v9 = *v3;
  *v3 = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(uint64_t **)(v2 + 8);
  if (v11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v11, a2);
  if (*(_QWORD *)v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*(uint64_t **)v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x19770B238);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
    v5 = 72 * a2;
    v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtension::InjectedContentData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebExtension::InjectedContentData>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebKit::WebExtension::InjectedContentData::InjectedContentData(a3, v5);
      WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)v5, v6);
      a3 += 72;
      v5 += 9;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 8 * v7);
    if (v9 != -1)
    {
      if (!v9)
        return 0;
      if (v9 == *a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return 1;
}

uint64_t WebKit::WebExtensionCommand::WebExtensionCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34F6D80;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v8 += 2;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_DWORD **)(a3 + 8);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_DWORD **)(a3 + 16);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t WebKit::WebExtensionCommand::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v3 = v4 - 16;
    else
      v3 = 0;
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 16;
    else
      v5 = 0;
  }
  if (v3 == v5)
    return WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), a3);
  else
    return 0;
}

uint64_t WebKit::WebExtensionCommand::isActionCommand(WebKit::WebExtensionCommand *this)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = WebKit::WebExtension::manifestVersion(*(WebKit::WebExtension **)(v2 + 40));
      v5 = *((_QWORD *)this + 4);
      if (v4 >= 3.0)
      {
        v7 = "_execute_action";
        v8 = 15;
      }
      else
      {
        if ((MEMORY[0x19AEABBCC](v5, "_execute_browser_action", 23) & 1) != 0)
        {
          v6 = 1;
LABEL_10:
          CFRelease(*(CFTypeRef *)(v2 - 8));
          return v6;
        }
        v5 = *((_QWORD *)this + 4);
        v7 = "_execute_page_action";
        v8 = 20;
      }
      v6 = MEMORY[0x19AEABBCC](v5, v7, v8);
      goto LABEL_10;
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebExtensionCommand::parameters@<X0>(WebKit::WebExtensionCommand *this@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  if (v4)
    *v4 += 2;
  *(_QWORD *)a4 = v4;
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a4 + 8) = v5;
  return WebKit::WebExtensionCommand::shortcutString(this, a2, a3, (WTF::StringImpl **)(a4 + 16));
}

void WebKit::WebExtensionCommand::~WebExtensionCommand(WebKit::WebExtensionCommand *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionCommand::~WebExtensionCommand(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = &off_1E34F6D80;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)112>::type()
{
  return 112;
}

void sub_19770BA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(CFTypeRef *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  void *v7;
  void *aBlock;
  WTF::StringImpl *v9;

  if (!this[8])
  {
    WebKit::WebExtensionCommand::shortcutString((WebKit::WebExtensionCommand *)this, a2, a3, &v9);
    v5 = (WTF::StringImpl *)this[8];
    this[8] = v9;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    CFRetain(this[1]);
    v6 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v6 = MEMORY[0x1E0C809A0];
    v6[1] = 50331650;
    v6[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void *)#1}::__invoke;
    v6[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::descriptor;
    v6[4] = this;
    v6[5] = this;
    aBlock = _Block_copy(v6);

    v7 = _Block_copy(aBlock);
    dispatch_async(MEMORY[0x1E0C80D38], v7);

  }
}

void sub_19770BB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionCommand::shortcutString@<X0>(WebKit::WebExtensionCommand *this@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  int i;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  WTF::StringImpl *v73[2];
  WTF::StringImpl *v74[2];
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];

  v102[2] = *MEMORY[0x1E0C80C00];
  v5 = (WTF::StringImpl **)((char *)this + 48);
  v6 = *((_QWORD *)this + 6);
  if (v6 && *(_DWORD *)(v6 + 4))
    v7 = *((_DWORD *)this + 14);
  else
    v7 = 0;
  if (!*((_DWORD *)this + 14))
    v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  result = *v5;
  if (*v5)
  {
    *(_DWORD *)result += 2;
    v76 = result;
    if (v7)
    {
      if (*((_DWORD *)result + 1))
      {
        if ((_MergedGlobals_119 & 1) == 0)
        {
          v46 = v7;
          v74[0] = (WTF::StringImpl *)",";
          v74[1] = (WTF::StringImpl *)2;
          v73[0] = (WTF::StringImpl *)"Comma";
          v73[1] = (WTF::StringImpl *)6;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v77, (uint64_t)v74, (uint64_t)v73);
          v72[0] = ".";
          v72[1] = 2;
          v71[0] = "Period";
          v71[1] = 7;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v79, (uint64_t)v72, (uint64_t)v71);
          v70[0] = " ";
          v70[1] = 2;
          v69[0] = "Space";
          v69[1] = 6;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v80, (uint64_t)v70, (uint64_t)v69);
          v68[0] = "F1";
          v68[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v81, (uint64_t)CFSTR(""), (uint64_t)v68);
          v67[0] = "F2";
          v67[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v82, (uint64_t)CFSTR(""), (uint64_t)v67);
          v66[0] = "F3";
          v66[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v83, (uint64_t)CFSTR(""), (uint64_t)v66);
          v65[0] = "F4";
          v65[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v84, (uint64_t)CFSTR(""), (uint64_t)v65);
          v64[0] = "F5";
          v64[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v85, (uint64_t)CFSTR(""), (uint64_t)v64);
          v63[0] = "F6";
          v63[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v86, (uint64_t)CFSTR(""), (uint64_t)v63);
          v62[0] = "F7";
          v62[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v87, (uint64_t)CFSTR(""), (uint64_t)v62);
          v61[0] = "F8";
          v61[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v88, (uint64_t)CFSTR(""), (uint64_t)v61);
          v60[0] = "F9";
          v60[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v89, (uint64_t)CFSTR(""), (uint64_t)v60);
          v59[0] = "F10";
          v59[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v90, (uint64_t)CFSTR(""), (uint64_t)v59);
          v58[0] = "F11";
          v58[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v91, (uint64_t)CFSTR(""), (uint64_t)v58);
          v57[0] = "F12";
          v57[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v92, (uint64_t)CFSTR(""), (uint64_t)v57);
          v56[0] = "Insert";
          v56[1] = 7;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v93, (uint64_t)CFSTR(""), (uint64_t)v56);
          v55[0] = "Delete";
          v55[1] = 7;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v94, (uint64_t)CFSTR(""), (uint64_t)v55);
          v54[0] = "Home";
          v54[1] = 5;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v95, (uint64_t)CFSTR(""), (uint64_t)v54);
          v53[0] = "End";
          v53[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v96, (uint64_t)CFSTR(""), (uint64_t)v53);
          v52[0] = "PageUp";
          v52[1] = 7;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v97, (uint64_t)CFSTR(""), (uint64_t)v52);
          v51[0] = "PageDown";
          v51[1] = 9;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v98, (uint64_t)CFSTR(""), (uint64_t)v51);
          v50[0] = "Up";
          v50[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v99, (uint64_t)CFSTR(""), (uint64_t)v50);
          v49[0] = "Down";
          v49[1] = 5;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v100, (uint64_t)CFSTR(""), (uint64_t)v49);
          v48[0] = "Left";
          v48[1] = 5;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v101, (uint64_t)CFSTR(""), (uint64_t)v48);
          v47[0] = "Right";
          v47[1] = 6;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)v102, (uint64_t)CFSTR(""), (uint64_t)v47);
          WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(&v75, &v77, 25);
          v41 = v75;
          v75 = 0;
          qword_1ECE73250 = v41;
          v42 = 400;
          do
          {
            v43 = (char *)&v77 + v42;
            v44 = *(WTF::StringImpl **)((char *)&v76 + v42);
            *(WTF::StringImpl **)((char *)&v76 + v42) = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v40);
              else
                *(_DWORD *)v44 -= 2;
            }
            v45 = (WTF::StringImpl *)*((_QWORD *)v43 - 2);
            *((_QWORD *)v43 - 2) = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v40);
              else
                *(_DWORD *)v45 -= 2;
            }
            v42 -= 16;
          }
          while (v42);

          _MergedGlobals_119 = 1;
          v7 = v46;
        }
        v77 = 0;
        v78 = 0;
        LODWORD(v79) = 0;
        BYTE4(v79) = 1;
        if ((v7 & 0x40000) != 0)
          WTF::StringBuilder::append();
        if ((v7 & 0x80000) != 0)
        {
          v9 = v79;
          if ((_DWORD)v79)
          {
            LOBYTE(v74[0]) = 43;
            if (!v78 || v79 >= *((_DWORD *)v78 + 1) || v77)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v10 = *((_DWORD *)v78 + 4);
              v11 = *((_QWORD *)v78 + 1);
              LODWORD(v79) = v79 + 1;
              if ((v10 & 4) != 0)
                *(_BYTE *)(v11 + v9) = 43;
              else
                *(_WORD *)(v11 + 2 * v9) = 43;
            }
          }
          WTF::StringBuilder::append();
        }
        if ((v7 & 0x20000) != 0)
        {
          v12 = v79;
          if ((_DWORD)v79)
          {
            LOBYTE(v74[0]) = 43;
            if (!v78 || v79 >= *((_DWORD *)v78 + 1) || v77)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v13 = *((_DWORD *)v78 + 4);
              v14 = *((_QWORD *)v78 + 1);
              LODWORD(v79) = v79 + 1;
              if ((v13 & 4) != 0)
                *(_BYTE *)(v14 + v12) = 43;
              else
                *(_WORD *)(v14 + 2 * v12) = 43;
            }
          }
          WTF::StringBuilder::append();
        }
        if ((v7 & 0x100000) != 0)
        {
          v15 = v79;
          if ((_DWORD)v79)
          {
            LOBYTE(v74[0]) = 43;
            if (!v78 || v79 >= *((_DWORD *)v78 + 1) || v77)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v16 = *((_DWORD *)v78 + 4);
              v17 = *((_QWORD *)v78 + 1);
              LODWORD(v79) = v79 + 1;
              if ((v16 & 4) != 0)
                *(_BYTE *)(v17 + v15) = 43;
              else
                *(_WORD *)(v17 + 2 * v15) = 43;
            }
          }
          WTF::StringBuilder::append();
        }
        v18 = v79;
        if ((_DWORD)v79)
        {
          LOBYTE(v74[0]) = 43;
          if (!v78 || v79 >= *((_DWORD *)v78 + 1) || v77)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v19 = *((_DWORD *)v78 + 4);
            v20 = *((_QWORD *)v78 + 1);
            LODWORD(v79) = v79 + 1;
            if ((v19 & 4) != 0)
              *(_BYTE *)(v20 + v18) = 43;
            else
              *(_WORD *)(v20 + 2 * v18) = 43;
          }
        }
        v21 = qword_1ECE73250;
        if (!qword_1ECE73250)
          goto LABEL_62;
        v22 = *(_DWORD *)(qword_1ECE73250 - 8);
        v23 = *((_DWORD *)v76 + 4);
        v24 = v23 >= 0x100 ? v23 >> 8 : WTF::StringImpl::hashSlowCase(v76);
        for (i = 0; ; v24 = ++i + v27)
        {
          v27 = v24 & v22;
          v28 = *(WTF **)(v21 + 16 * v27);
          if (v28 != (WTF *)-1)
          {
            if (!v28)
              goto LABEL_62;
            if ((WTF::equal(v28, v76, a3) & 1) != 0)
              break;
          }
        }
        v29 = *(_QWORD *)(v21 + 16 * v27 + 8);
        if (v29)
        {
          *(_DWORD *)v29 += 2;
          v74[0] = (WTF::StringImpl *)v29;
          v30 = *(unsigned int *)(v29 + 4);
          if ((_DWORD)v30)
          {
            if ((_DWORD)v79 || v78)
            {
              WTF::StringBuilder::append((uint64_t)&v77, *(_QWORD *)(v29 + 8), v30 | ((unint64_t)((*(_DWORD *)(v29 + 16) >> 2) & 1) << 32));
            }
            else
            {
              WTF::String::operator=(&v77, (WTF::StringImpl *)v74);
              v31 = (int)v74[0];
              if (v74[0])
                v31 = *((_DWORD *)v74[0] + 1);
              LODWORD(v79) = v31;
            }
LABEL_72:
            v34 = v74[0];
            v74[0] = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, a2);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = v77;
            if (v77
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v77),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77),
                  (v35 = v77) != 0))
            {
              *(_DWORD *)v35 += 2;
            }
            *a4 = v35;
            v36 = v78;
            v78 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, a2);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = v77;
            v77 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, a2);
              else
                *(_DWORD *)v37 -= 2;
            }
            result = v76;
            goto LABEL_88;
          }
        }
        else
        {
LABEL_62:
          v74[0] = 0;
        }
        WTF::String::convertToASCIIUppercase((WTF::String *)&v76);
        if ((_DWORD)v79 || v78)
        {
          if (v73[0])
          {
            v38 = *((_QWORD *)v73[0] + 1);
            v39 = *((unsigned int *)v73[0] + 1) | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32);
          }
          else
          {
            v38 = 0;
            v39 = 0x100000000;
          }
          WTF::StringBuilder::append((uint64_t)&v77, v38, v39);
          v32 = v73[0];
        }
        else
        {
          WTF::String::operator=(&v77, (WTF::StringImpl *)v73);
          v32 = v73[0];
          if (v73[0])
            v33 = *((_DWORD *)v73[0] + 1);
          else
            v33 = 0;
          LODWORD(v79) = v33;
        }
        v73[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, a2);
          else
            *(_DWORD *)v32 -= 2;
        }
        goto LABEL_72;
      }
    }
  }
  v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v25 += 2;
  *a4 = v25;
LABEL_88:
  v76 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19770C680(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,WTF::StringImpl *a62,uint64_t a63)
{
  WTF::StringImpl *a67;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;

  v69 = 400;
  while (1)
  {
    v70 = v67 + v69;
    v71 = *(WTF::StringImpl **)(v67 + v69 - 8);
    *(_QWORD *)(v67 + v69 - 8) = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, a2);
      else
        *(_DWORD *)v71 -= 2;
    }
    v72 = *(WTF::StringImpl **)(v70 - 16);
    *(_QWORD *)(v70 - 16) = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, a2);
      else
        *(_DWORD *)v72 -= 2;
    }
    v69 -= 16;
    if (!v69)
    {

      if (a67)
      {
        if (*(_DWORD *)a67 == 2)
          WTF::StringImpl::destroy(a67, v73);
        else
          *(_DWORD *)a67 -= 2;
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t WebKit::WebExtensionCommand::setActivationKey(uint64_t a1, WTF::String *a2)
{
  int v3;
  __CFString *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (!*(_QWORD *)a2)
    goto LABEL_4;
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (v3 == 1)
  {
    if (qword_1ECE73248 != -1)
      dispatch_once(&qword_1ECE73248, &__block_literal_global_36);
    if (*(_QWORD *)a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v7 = -[__CFString rangeOfCharacterFromSet:](v6, "rangeOfCharacterFromSet:", qword_1ECE73240);

    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded((CFTypeRef *)a1, v8, v9);
      WTF::String::convertToASCIILowercase(a2);
      v11 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v12;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      return 1;
    }
  }
  else if (!v3)
  {
LABEL_4:
    WTF::String::operator=((WTF::StringImpl **)(a1 + 48), MEMORY[0x1E0CBF6F0]);
    return 1;
  }
  return 0;
}

void sub_19770CB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionCommand16setActivationKeyEN3WTF6StringE_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3780], "alphanumericCharacterSet");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addCharactersInRange:", 63236, 12);
  objc_msgSend(v2, "addCharactersInRange:", 63271, 3);
  objc_msgSend(v2, "addCharactersInRange:", 63275, 3);
  objc_msgSend(v2, "addCharactersInRange:", 63232, 4);
  objc_msgSend(v2, "addCharactersInString:", CFSTR(",. "));
  objc_msgSend(v2, "invertedSet");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECE73240;
  qword_1ECE73240 = v0;

}

void sub_19770CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionCommand::platformMenuItem(WebKit::WebExtensionCommand *this)
{
  void *v2;
  __CFString *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)MEMORY[0x1E0CEA2A8];
  if (*((_QWORD *)this + 5))
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E351F1B8;
  CFRetain(*((CFTypeRef *)this + 1));
  v4 = malloc_type_malloc(0x30uLL, 0x10E0040178B4145uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void *,UIAction *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::descriptor;
  v4[4] = this;
  v4[5] = this;
  v5 = _Block_copy(v4);

  v6 = _Block_copy(v5);
  objc_msgSend(v2, "actionWithTitle:image:identifier:handler:", v3, 0, 0, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_19770CD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionCommand::keyCommand(WebKit::WebExtensionCommand *this)
{
  int v1;
  char *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  __CFString *v7;
  _QWORD *v8;
  __CFString *v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;

  v1 = *((_DWORD *)this + 14);
  v2 = (char *)this + 48;
  v3 = (_QWORD *)MEMORY[0x1E0CBF6F0];
  if (v1)
    v4 = (uint64_t *)((char *)this + 48);
  else
    v4 = (uint64_t *)MEMORY[0x1E0CBF6F0];
  v5 = *v4;
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    if (*((_QWORD *)this + 5))
    {
      v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v1 = *((_DWORD *)this + 14);
    }
    else
    {
      v7 = &stru_1E351F1B8;
    }
    if (v1)
      v8 = v2;
    else
      v8 = v3;
    if (*v8)
      v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    if (*(_QWORD *)v2 && *(_DWORD *)(*(_QWORD *)v2 + 4))
      v10 = *((unsigned int *)this + 14);
    else
      v10 = 0;
    if (*((_QWORD *)this + 4))
      v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    +[_WKWebExtensionKeyCommand commandWithTitle:image:input:modifierFlags:identifier:](_WKWebExtensionKeyCommand, "commandWithTitle:image:input:modifierFlags:identifier:", v7, 0, v9, v10, v12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

void sub_19770CE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionCommand::matchesKeyCommand(WebKit::WebExtensionCommand *this, UIKeyCommand *a2)
{
  UIKeyCommand *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;

  v3 = a2;
  v4 = -[UIKeyCommand modifierFlags](v3, "modifierFlags");
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 4))
      v5 = *((unsigned int *)this + 14);
    else
      v5 = 0;
  }
  if (v4 == v5)
  {
    -[UIKeyCommand input](v3, "input");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((_DWORD *)this + 14))
      v7 = (_QWORD *)((char *)this + 48);
    else
      v7 = (_QWORD *)MEMORY[0x1E0CBF6F0];
    if (*v7)
      v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E351F1B8;
    if (objc_msgSend(v6, "isEqual:", v8))
    {
      -[UIKeyCommand propertyList](v3, "propertyList");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("identifier"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((_QWORD *)this + 4))
        v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      v12 = objc_msgSend(v10, "isEqual:", v11);

    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_19770CFF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded((CFTypeRef *)(v3 - 16), (CFTypeRef *)v1, (WTF::StringImpl **)(v1 + 64));
      WTF::String::operator=((WTF::StringImpl **)(v1 + 64), MEMORY[0x1E0CBF6F0]);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_19770D0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void *,UIAction *)#1}::__invoke(uint64_t a1)
{
  WebKit::WebExtensionCommand *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(WebKit::WebExtensionCommand **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::performCommand(v3 - 16, v1, 1);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_19770D168(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x19AEABCC8]();
  v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_19770D1F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isActionMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  if (WebKit::WebExtension::hasAction(*((id **)this + 7)) || WebKit::WebExtension::hasBrowserAction(*((id **)this + 7)))
    return 1;
  return WebKit::WebExtension::hasPageAction(*((id **)this + 7));
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetTitle(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebExtensionAction *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionAction *v14;
  int v15;
  WebKit::WebExtensionAction *v16;
  int v17;
  char v18;

  WebKit::getActionWithIdentifiers((uint64_t)&v16, a2, a3, a4, a5, a1, CFSTR("action.getTitle()"));
  if (v17)
  {
    if (v17 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v7 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v14 = v7;
    v15 = 1;
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v8 + 16))(v8, &v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v13, &v14);
  }
  else
  {
    WebKit::WebExtensionAction::label(v16, 0, &v13);
    v10 = v13;
    v13 = 0;
    v14 = v10;
    v15 = 0;
    v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15 != -1)
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v18, &v14);
    v15 = -1;
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v17 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1E34F6E08[v17])(&v14, &v16);
  return result;
}

void sub_19770D400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6DF8[a12])(v17 - 17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v19);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34F6E08[a16])(&a10, &a14);
  _Unwind_Resume(a1);
}

void WebKit::getActionWithIdentifiers(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, WebKit::WebExtensionContext *a6, void *a7)
{
  WebKit *v13;
  NSString *v14;
  NSString *v15;
  WebKit::WebExtensionWindow *v16;
  uint64_t v17;
  WebKit::WebExtensionWindow *v18;
  uint64_t v19;
  WebKit::WebExtensionWindow *v20;

  v13 = a7;
  if (a3)
  {
    WebKit::WebExtensionContext::getWindow((uint64_t)a6, a2, 0, 0, 0, (uint64_t *)&v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getAction(a6, v20, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, CFSTR("window not found"), v14, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    v16 = v20;
    v20 = 0;
    if (v16)
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v16);
  }
  else if (a5)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a6, a4, 0, &v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getAction(a6, v20, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, CFSTR("tab not found"), v15, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    v18 = v20;
    v20 = 0;
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
  }
  else
  {
    v17 = WebKit::WebExtensionContext::defaultAction(a6);
    CFRetain(*(CFTypeRef *)(v17 + 8));
    *(_QWORD *)a1 = v17;
    *(_DWORD *)(a1 + 8) = 0;
  }

}

void sub_19770D648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetTitle(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  int v22;

  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v21, a2, a3, a4, a5, a1, CFSTR("action.setTitle()"));
  if (v22)
  {
    if (v22 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v10 = v21;
    if (v21)
      *(_DWORD *)v21 += 2;
    v19 = v10;
    v20 = 1;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  else
  {
    v12 = (uint64_t)v21;
    v13 = *a6;
    if (*a6)
      *(_DWORD *)v13 += 2;
    v18 = v13;
    WebKit::WebExtensionAction::setLabel(v12, (WTF::StringImpl *)&v18, v9);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    LOBYTE(v19) = 0;
    v20 = 0;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v22 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F6E08[v22])(&v19, &v21);
  return result;
}

void sub_19770D7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12)
  {
    v21 = a11;
    a11 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (a18 != -1)
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E34F6E08[a18])(&a11, &a14);
  _Unwind_Resume(a1);
}

void WebKit::getOrCreateActionWithIdentifiers(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, WebKit::WebExtensionContext *a6, void *a7)
{
  WebKit *v13;
  NSString *v14;
  NSString *v15;
  WebKit::WebExtensionWindow *v16;
  uint64_t v17;
  WebKit::WebExtensionWindow *v18;
  uint64_t v19;
  WebKit::WebExtensionWindow *v20;

  v13 = a7;
  if (a3)
  {
    WebKit::WebExtensionContext::getWindow((uint64_t)a6, a2, 0, 0, 0, (uint64_t *)&v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getOrCreateAction(a6, v20, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, CFSTR("window not found"), v14, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    v16 = v20;
    v20 = 0;
    if (v16)
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v16);
  }
  else if (a5)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a6, a4, 0, &v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getOrCreateAction(a6, v20, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, CFSTR("tab not found"), v15, &v19);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    v18 = v20;
    v20 = 0;
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
  }
  else
  {
    v17 = WebKit::WebExtensionContext::defaultAction(a6);
    CFRetain(*(CFTypeRef *)(v17 + 8));
    *(_QWORD *)a1 = v17;
    *(_DWORD *)(a1 + 8) = 0;
  }

}

void sub_19770D9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetIcon(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, _QWORD *a6, uint64_t *a7)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  id *v11;
  __CFString *v12;
  NSDictionary *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;

  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v18, a2, a3, a4, a5, a1, CFSTR("action.setIcon()"));
  if (v19)
  {
    if (v19 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v9 = v18;
    if (v18)
      *(_DWORD *)v18 += 2;
    v16 = v9;
    v17 = 1;
    v10 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v16);
  }
  else
  {
    v11 = (id *)v18;
    if (*a6)
      v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    WebKit::parseJSON(v12, 0, 0);
    v13 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAction::setIconsDictionary(v11, v13);

    LOBYTE(v16) = 0;
    v17 = 0;
    v10 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v16);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v17)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v19 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F6E08[v19])(&v16, &v18);
  return result;
}

void sub_19770DBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, int a16)
{
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E34F6E08[a16])(&a9, &a12);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetPopup(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebExtensionAction *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionAction *v14;
  int v15;
  WebKit::WebExtensionAction *v16;
  int v17;
  char v18;

  WebKit::getActionWithIdentifiers((uint64_t)&v16, a2, a3, a4, a5, a1, CFSTR("action.getPopup()"));
  if (v17)
  {
    if (v17 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v7 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v14 = v7;
    v15 = 1;
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v8 + 16))(v8, &v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v13, &v14);
  }
  else
  {
    WebKit::WebExtensionAction::popupPath(v16, &v13);
    v10 = v13;
    v13 = 0;
    v14 = v10;
    v15 = 0;
    v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15 != -1)
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v18, &v14);
    v15 = -1;
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v17 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1E34F6E08[v17])(&v14, &v16);
  return result;
}

void sub_19770DDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6DF8[a12])(v17 - 17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v19);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34F6E08[a16])(&a10, &a14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetPopup(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  int v22;

  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v21, a2, a3, a4, a5, a1, CFSTR("action.setPopup()"));
  if (v22)
  {
    if (v22 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v10 = v21;
    if (v21)
      *(_DWORD *)v21 += 2;
    v19 = v10;
    v20 = 1;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  else
  {
    v12 = (uint64_t)v21;
    v13 = *a6;
    if (*a6)
      *(_DWORD *)v13 += 2;
    v18 = v13;
    WebKit::WebExtensionAction::setPopupPath(v12, (WTF::StringImpl *)&v18, v9);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    LOBYTE(v19) = 0;
    v20 = 0;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v22 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F6E08[v22])(&v19, &v21);
  return result;
}

void sub_19770DFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12)
  {
    v21 = a11;
    a11 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (a18 != -1)
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E34F6E08[a18])(&a11, &a14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionOpenPopup(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t *a7)
{
  WebKit::WebExtensionAction *v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSString *v22;
  WTF::StringImpl *v23;
  NSString *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  NSString *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _BOOL4 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;

  v13 = (WebKit::WebExtensionAction *)WebKit::WebExtensionContext::defaultAction((WebKit::WebExtensionContext *)a1);
  if ((WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(v13) & 1) != 0)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
    if (*(_BYTE *)(v16 + 177))
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("another popup is already open"), v14, &v46);
      v17 = v46;
      v46 = 0;
      v47 = v17;
      v48 = 1;
      v18 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v47);
      goto LABEL_8;
    }
    if (a4)
    {
      WebKit::WebExtensionContext::getWindow(a1, a3, 0, 0, 0, (uint64_t *)&v47);
      v23 = v47;
      if (v47)
      {
        WebKit::WebExtensionWindow::activeTab((uint64_t)v47, 0, (uint64_t *)&v47);
        v25 = v47;
        if (v47)
        {
          if (!a6)
            goto LABEL_29;
          goto LABEL_24;
        }
LABEL_38:
        WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("active tab not found in window"), v24, &v46);
        v36 = v46;
        v46 = 0;
        v47 = v36;
        v48 = 1;
        v37 = *a7;
        *a7 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v37 + 16))(v37, &v47);
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (v48)
        {
          v39 = v47;
          v47 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v38);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
        v45 = v46;
        v46 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v38);
          else
            *(_DWORD *)v45 -= 2;
        }
        return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v23);
      }
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("window not found"), v22, &v46);
      v35 = v46;
      v46 = 0;
      v47 = v35;
      v48 = 1;
      v18 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v47);
    }
    else
    {
      if (a6)
      {
        v23 = 0;
        v25 = 0;
LABEL_24:
        WebKit::WebExtensionContext::getTab((uint64_t *)a1, a5, 0, &v47);
        v28 = v47;
        v47 = 0;
        if (v25)
        {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v25);
          v29 = v47;
          v47 = 0;
          if (v29)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v29);
        }
        if (!v28)
        {
          WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("tab not found"), v27, &v46);
          v40 = v46;
          v46 = 0;
          v47 = v40;
          v48 = 1;
          v41 = *a7;
          *a7 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v41 + 16))(v41, &v47);
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          if (v48)
          {
            v43 = v47;
            v47 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v42);
              else
                *(_DWORD *)v43 -= 2;
            }
          }
          result = v46;
          v46 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
            else
              *(_DWORD *)result -= 2;
          }
LABEL_63:
          if (!v23)
            return result;
          return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v23);
        }
        v25 = v28;
LABEL_29:
        WebKit::WebExtensionContext::getOrCreateAction((WebKit::WebExtensionContext *)a1, v25, (uint64_t *)&v47);
        v30 = WebKit::WebExtensionAction::presentsPopup(v47);
        v31 = v47;
        v47 = 0;
        if (v31)
          CFRelease(*((CFTypeRef *)v31 + 1));
        if (v30)
          WebKit::WebExtensionContext::performAction((WebKit::WebExtensionContext *)a1, v25, 0);
        LOBYTE(v47) = 0;
        v48 = 0;
        v32 = *a7;
        *a7 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v32 + 16))(v32, &v47);
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (v48)
        {
          v34 = v47;
          v47 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v33);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v25);
        goto LABEL_63;
      }
      if (*(_DWORD *)(a1 + 508))
      {
        WebKit::WebExtensionContext::getWindow(a1, **(_QWORD **)(a1 + 496), 0, 0, 0, (uint64_t *)&v47);
        v23 = v47;
        if (v47)
        {
          WebKit::WebExtensionWindow::activeTab((uint64_t)v47, 0, (uint64_t *)&v47);
          v25 = v47;
          if (v47)
            goto LABEL_29;
          goto LABEL_38;
        }
      }
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("no windows open"), v14, &v46);
      v44 = v46;
      v46 = 0;
      v47 = v44;
      v48 = 1;
      v18 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v47);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("action.openPopup()"), 0, CFSTR("it is not implemented"), v14, &v46);
    v19 = v46;
    v46 = 0;
    v47 = v19;
    v48 = 1;
    v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v47);
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v48)
  {
    v21 = v47;
    v47 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19770E5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
  _Unwind_Resume(a1);
}

void WebKit::toWebExtensionError<>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v6;
  uint64_t v7;

  WebKit::toErrorString(a1, a2, a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v7, v6);
  *a5 = v7;
  v7 = 0;

}

void sub_19770E818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetBadgeText(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebExtensionAction *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionAction *v14;
  int v15;
  WebKit::WebExtensionAction *v16;
  int v17;
  char v18;

  WebKit::getActionWithIdentifiers((uint64_t)&v16, a2, a3, a4, a5, a1, CFSTR("action.getBadgeText()"));
  if (v17)
  {
    if (v17 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v7 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v14 = v7;
    v15 = 1;
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v8 + 16))(v8, &v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v13, &v14);
  }
  else
  {
    WebKit::WebExtensionAction::badgeText(v16, &v13);
    v10 = v13;
    v13 = 0;
    v14 = v10;
    v15 = 0;
    v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15 != -1)
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1E34F6DF8[v15])(&v18, &v14);
    v15 = -1;
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v17 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1E34F6E08[v17])(&v14, &v16);
  return result;
}

void sub_19770E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6DF8[a12])(v17 - 17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v19);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34F6E08[a16])(&a10, &a14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetBadgeText(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  int v22;

  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v21, a2, a3, a4, a5, a1, CFSTR("action.setBadgeText()"));
  if (v22)
  {
    if (v22 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v10 = v21;
    if (v21)
      *(_DWORD *)v21 += 2;
    v19 = v10;
    v20 = 1;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  else
  {
    v12 = (uint64_t)v21;
    v13 = *a6;
    if (*a6)
      *(_DWORD *)v13 += 2;
    v18 = v13;
    WebKit::WebExtensionAction::setBadgeText(v12, (WTF::StringImpl *)&v18, v9);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    LOBYTE(v19) = 0;
    v20 = 0;
    v11 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v19);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v22 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F6E08[v22])(&v19, &v21);
  return result;
}

void sub_19770EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12)
  {
    v21 = a11;
    a11 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (a18 != -1)
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E34F6E08[a18])(&a11, &a14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::actionGetEnabled(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebExtensionAction *v7;
  uint64_t v8;
  uint64_t result;
  WebKit::WebExtensionAction *v10;
  int v11;
  WebKit::WebExtensionAction *v12;
  int v13;
  char v14;

  WebKit::getActionWithIdentifiers((uint64_t)&v12, a2, a3, a4, a5, a1, CFSTR("action.isEnabled()"));
  if (v13)
  {
    if (v13 != 1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v7 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    v10 = v7;
    v11 = 1;
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v8 + 16))(v8, &v10);
  }
  else
  {
    LOBYTE(v10) = WebKit::WebExtensionAction::isEnabled(v12);
    v11 = 0;
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionAction **))(*(_QWORD *)v8 + 16))(v8, &v10);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, WebKit::WebExtensionAction **))off_1E34F6E18[v11])(&v14, &v10);
  if (v13 != -1)
    return ((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1E34F6E08[v13])(&v10, &v12);
  return result;
}

void sub_19770ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F6E18[a12])(v17 - 17, &a10);
  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34F6E08[a16])(&a10, &a14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetEnabled(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, int a4, uint64_t *a5)
{
  __int16 v6;
  __CFString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  CFTypeRef *v14;
  int v15;

  v6 = a4;
  if (a4)
    v7 = CFSTR("action.enable()");
  else
    v7 = CFSTR("action.disable()");
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v14, 0, 0, a2, a3, a1, v7);
  if (v15)
  {
    if (v15 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v8 = (WTF::StringImpl *)v14;
    if (v14)
      *(_DWORD *)v14 += 2;
    v12 = v8;
    v13 = 1;
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v12);
  }
  else
  {
    WebKit::WebExtensionAction::setEnabled(v14, v6 | 0x100);
    LOBYTE(v12) = 0;
    v13 = 0;
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v12);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v13)
  {
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, CFTypeRef **))off_1E34F6E08[v15])(&v12, &v14);
  return result;
}

void sub_19770EF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, int a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a10)
  {
    v19 = a9;
    a9 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E34F6E08[a16])(&a9, &a12);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(CFTypeRef *this, WebKit::WebExtensionTab *a2)
{
  _QWORD *v4;
  void *v5;
  _QWORD *result;
  _QWORD *v7;
  char v8;
  unsigned __int8 *v9;

  v8 = 1;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, &v8, 1);
  CFRetain(this[1]);
  if (a2)
    ++*(_DWORD *)a2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F6E38;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  v7 = v4;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v9, (uint64_t *)&v7);
  result = v7;
  v7 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (v9)
    return (_QWORD *)WTF::fastFree((WTF *)(v9 - 16), v5);
  return result;
}

void sub_19770F068(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN6WebKit18WebExtensionActionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN6WebKit18WebExtensionActionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v4 = a3;
    do
    {
      WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add(a1, a2++, (uint64_t)v7);
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_19770F158(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;

  if (*v2)
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (unsigned __int8 *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v27 = 0;
        v26 = v6 + v25;
        goto LABEL_29;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = ((_DWORD)v14 + v18) & v13;
      v15 = (unsigned __int8 *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *v17 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v15 = v17;
    }
  }
  *v15 = v9;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      result = (uint64_t *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(v4, v15);
      v15 = (unsigned __int8 *)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  v26 = v21 + v24;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_BYTE *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(a1, v5, a2);
}

_BYTE *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (unsigned __int8 *)v6;
    do
    {
      if (*v15 <= 0xFDu)
      {
        v16 = (_BYTE *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(a1, v15);
        *v16 = *v15;
        if (v15 == a3)
          v13 = v16;
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + (v6 & v3);
  }
  while (*(unsigned __int8 *)(v2 + v7) != 255);
  return v2 + v7;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F6E38;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6E38;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  _BYTE v18[16];
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  _BYTE v23[184];
  uint64_t *v24;
  uint64_t v25;
  char v26;
  IPC::Encoder *v27;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 24), (uint64_t)v18);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v23, (uint64_t)v18);
  }
  else
  {
    v23[0] = 0;
    v23[176] = 0;
  }
  WebKit::WebExtensionContext::processes((char *)v1, 1, 0, (uint64_t *)&v24);
  v4 = *(_QWORD *)(v1 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v24);
    v6 = v5;
    v7 = v3;
    v8 = v24 ? &v24[*((unsigned int *)v24 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v1 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1567;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v27 = (IPC::Encoder *)v11;
        IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>((IPC::Encoder *)v11, (uint64_t)v23);
        LOBYTE(v25) = 0;
        v26 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v27, 0, (uint64_t)&v25, 1);
        if (v26)
        {
          v12 = v25;
          v25 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v13 = v27;
        v27 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_19;
        }
        v6 = v7;
LABEL_19:
        ;
      }
      while (v6 != v8);
    }
  }
  if (v24)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v24, v3);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, (WTF::StringImpl *)v3);
  if (v2)
  {
    if (v22)
    {
      result = v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v20)
    {
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19770F764(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  WTF::StringImpl *v37;

  v36 = *(uint64_t **)(v34 - 120);
  if (v36)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v36, a2);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33, (WTF::StringImpl *)a2);
  if (v33)
  {
    if (a20 && a19)
    {
      if (*(_DWORD *)a19 == 2)
        WTF::StringImpl::destroy(a19, v37);
      else
        *(_DWORD *)a19 -= 2;
    }
    if (a18 && a13)
    {
      if (*(_DWORD *)a13 == 2)
        WTF::StringImpl::destroy(a13, v37);
      else
        *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *WebKit::WebExtensionContext::processes@<X0>(char *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char *result;
  void *v8;
  char v9;
  unsigned __int8 *v10;

  v9 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v10, &v9, 1);
  result = WebKit::WebExtensionContext::processes(a1, &v10, a3, a4);
  if (v10)
    return (char *)WTF::fastFree((WTF *)(v10 - 16), v8);
  return result;
}

void sub_19770F8A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

char *WebKit::WebExtensionContext::processes@<X0>(char *a1@<X0>, unsigned __int8 **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char *result;
  void *v8;
  char v9;
  unsigned __int8 *v10;

  v9 = a3;
  WTF::HashSet<WebKit::WebExtensionContentWorldType,WTF::DefaultHash<WebKit::WebExtensionContentWorldType>,WTF::HashTraits<WebKit::WebExtensionContentWorldType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v10, &v9, 1);
  result = WebKit::WebExtensionContext::processes(a1, a2, &v10, a4);
  if (v10)
    return (char *)WTF::fastFree((WTF *)(v10 - 16), v8);
  return result;
}

void sub_19770F92C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashSet<WebKit::WebExtensionContentWorldType,WTF::DefaultHash<WebKit::WebExtensionContentWorldType>,WTF::HashTraits<WebKit::WebExtensionContentWorldType>,WTF::HashTableTraits>::HashSet(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v4 = a3;
    do
    {
      WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add(a1, a2++, (uint64_t)v7);
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_19770F9A4(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;

  if (*v2)
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

BOOL WebKit::WebExtensionContext::isAlarmsMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v7, CFSTR("alarms"));
  v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_19770FAB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebExtensionContext::alarmsCreate(uint64_t a1, WTF::StringImpl **a2, double a3, double a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  WTF **v18;
  int i;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = WTF::fastMalloc((WTF *)0x38);
  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34F6E60;
  v10[1] = a1;
  v10[2] = a1;
  *(_DWORD *)v8 = 1;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v8 + 8) = v9;
  *(double *)(v8 + 16) = a3;
  *(double *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = 0x7FF8000000000000;
  *(_QWORD *)(v8 + 40) = v10;
  *(_QWORD *)(v8 + 48) = 0;
  WebKit::WebExtensionAlarm::schedule((WebKit::WebExtensionAlarm *)v8);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  v13 = (uint64_t *)(a1 + 408);
  v14 = *(_QWORD *)(a1 + 408);
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 408)),
        (v14 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_DWORD *)*a2 + 4);
  if (v16 >= 0x100)
    v17 = v16 >> 8;
  else
    v17 = WTF::StringImpl::hashSlowCase(*a2);
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v15;
    v21 = (WTF **)(v14 + 16 * v20);
    v22 = *v21;
    if (*v21 == (WTF *)-1)
    {
      v18 = (WTF **)(v14 + 16 * v20);
      goto LABEL_21;
    }
    if (!v22)
      break;
    if (WTF::equal(v22, *a2, v12))
    {
      v28 = v14 + 16 * v20;
      result = *(WTF **)(v28 + 8);
      *(_QWORD *)(v28 + 8) = v8;
      if (result)
        return WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(result, v23);
      return result;
    }
LABEL_21:
    v17 = i + v20;
  }
  if (v18)
  {
    *v18 = 0;
    v18[1] = 0;
    --*(_DWORD *)(*v13 - 16);
    v21 = v18;
  }
  WTF::String::operator=(v21, (WTF::StringImpl *)a2);
  result = v21[1];
  v21[1] = (WTF *)v8;
  if (result)
    result = WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(result, v24);
  v26 = *v13;
  if (*v13)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *v13;
  if (*v13)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      return result;
  }
  else if (3 * v32 > 4 * v31)
  {
    return result;
  }
  return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13);
}

void sub_19770FD38(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v5 = *((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v2 + 5);
  *((_QWORD *)v2 + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionContext::alarmsGet(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 408);
  if (!v4)
    goto LABEL_17;
  v6 = *(_DWORD *)(v4 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v4 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_17;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
  }
  v12 = *(_QWORD *)(v4 + 16 * v10 + 8);
  if (v12)
  {
    ++*(_DWORD *)v12;
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if (v13)
      *(_DWORD *)v13 += 2;
    v21 = v13;
    v14 = *(_OWORD *)(v12 + 16);
    v23 = *(_QWORD *)(v12 + 32);
    v22 = v14;
    v24 = 1;
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v24)
    {
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    return WTF::RefCounted<WebKit::WebExtensionAlarm>::deref((WTF *)v12, v16);
  }
  else
  {
LABEL_17:
    LOBYTE(v21) = 0;
    v24 = 0;
    v18 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v21);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v24)
    {
      result = v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF *)WTF::StringImpl::destroy(result, v20);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19770FF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a14 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v14, v17);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::alarmsClear(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 408);
  if (v4)
  {
    v7 = *(_DWORD *)(v4 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    v10 = 0;
    v11 = (uint64_t *)(a1 + 408);
    while (1)
    {
      v12 = v9 & v7;
      v13 = *(WTF **)(v4 + 16 * v12);
      if (v13 != (WTF *)-1)
      {
        if (!v13)
        {
          v14 = *v11;
          if (!*v11)
            goto LABEL_27;
          v15 = (WTF::StringImpl **)(v14 + 16 * *(unsigned int *)(v14 - 4));
          goto LABEL_13;
        }
        if ((WTF::equal(v13, *a2, a3) & 1) != 0)
          break;
      }
      v9 = ++v10 + v12;
    }
    v15 = (WTF::StringImpl **)(v4 + 16 * v12);
    v14 = *v11;
    if (!*v11)
      goto LABEL_14;
LABEL_13:
    v14 += 16 * *(unsigned int *)(v14 - 4);
    if ((WTF::StringImpl **)v14 == v15)
      goto LABEL_27;
LABEL_14:
    if ((WTF::StringImpl **)v14 != v15)
    {
      WTF::HashTraits<WTF::String>::customDeleteBucket(v15, (WTF::StringImpl *)a2);
      v17 = v15[1];
      v15[1] = 0;
      if (v17)
        WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v17, v16);
      ++*(_DWORD *)(*v11 - 16);
      v18 = *v11;
      if (*v11)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v11;
      if (*v11)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11, v22 >> 1);
      }
    }
  }
LABEL_27:
  v24 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
}

void sub_19771019C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::alarmsGetAll(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(result + 408);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(result + 408);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(result + 408);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!v3)
  {
    v8 = 0;
    v10 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_16;
  }
LABEL_8:
  v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  v20 = 0;
  v21 = 0;
  v9 = *(unsigned int *)(v3 - 12);
  if ((_DWORD)v9)
  {
    if (v9 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v10 = WTF::fastMalloc((WTF *)(32 * v9));
    LODWORD(v21) = v9;
    v20 = v10;
  }
  else
  {
    v10 = 0;
  }
LABEL_16:
  if (v8 != v6)
  {
    v11 = 0;
    do
    {
      v12 = v6[1];
      v13 = *(_DWORD **)(v12 + 8);
      if (v13)
        *v13 += 2;
      v14 = *(_QWORD *)(v12 + 32);
      v15 = *(_OWORD *)(v12 + 16);
      v16 = v10 + 32 * v11;
      *(_QWORD *)v16 = v13;
      *(_OWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v16 + 24) = v14;
      v17 = v6 + 2;
      v6 = v5;
      if (v17 != v5)
      {
        v6 = v17;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      ++v11;
    }
    while (v6 != v8);
    HIDWORD(v21) = v11;
  }
  v18 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, &v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
}

void sub_197710354(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::alarmsClearAll(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v4;
  uint64_t v5;

  v4 = *(WTF::StringImpl ***)(a1 + 408);
  if (v4)
  {
    *(_QWORD *)(a1 + 408) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1977103D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 6);
    *((_QWORD *)v2 + 6) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F6E60;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F6E60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::call(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t result;
  _QWORD *v7;
  char v8;
  unsigned __int8 *v9;

  v3 = *(_QWORD *)(a1 + 8);
  v8 = 2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, &v8, 1);
  CFRetain(*(CFTypeRef *)(v3 + 8));
  ++*a2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F6E88;
  v4[1] = v3;
  v4[2] = v3;
  v4[3] = a2;
  v7 = v4;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(v3, &v9, (uint64_t *)&v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v9)
    return WTF::fastFree((WTF *)(v9 - 16), v5);
  return result;
}

void sub_1977105B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = (WTF::StringImpl **)(v14 + 16 * v19);
          v21 = v20[1];
          v20[1] = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v21, v8);
            v22 = *v20;
            *v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(WTF::StringImpl **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v20[1] = v25;
          v26 = *(WTF **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v26, v8);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_33;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WTF **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v13, v8);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;

  *a1 = &off_1E34F6E88;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v3, a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F6E88;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  WebKit::WebExtensionContext::processes((char *)v1, 2, 0, (uint64_t *)&v18);
  v4 = *(_QWORD *)(v1 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v18);
    v6 = v5;
    v7 = v3;
    v8 = v18 ? &v18[*((unsigned int *)v18 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = (uint64_t *)(v2 + 8);
      do
      {
        v10 = *v6;
        v11 = *(_QWORD *)(v1 + 32);
        v12 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v12 = 1568;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)(v12 + 528) = v12 + 16;
        *(_QWORD *)(v12 + 536) = v12 + 16;
        *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v12 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
        v21 = (IPC::Encoder *)v12;
        IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode((IPC::Encoder *)v12, v9);
        LOBYTE(v19) = 0;
        v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          v13 = v19;
          v19 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v18;
  if (v18)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v18, v3);
  return result;
}

void sub_197710AF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::commandsGetAll(WebKit::WebExtensionContext *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  WebKit::WebExtensionContext::commands(a1);
  v21 = 0;
  v22 = 0;
  v4 = *((unsigned int *)v3 + 3);
  if (!(_DWORD)v4)
  {
    LODWORD(v11) = 0;
    v7 = 0;
LABEL_9:
    v20[1] = 0;
    v21 = 0;
    v22 = 0;
    v15 = *a2;
    *a2 = 0;
    v20[0] = 0;
    v26[0] = 0;
    v23 = v7;
    v26[1] = 0;
    v24 = __PAIR64__(v11, v4);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, &v23);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v16);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v18);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v19);
    return;
  }
  if (v4 < 0xAAAAAAB)
  {
    v5 = v3;
    v6 = 24 * v4;
    v7 = WTF::fastMalloc((WTF *)(24 * v4));
    LODWORD(v4) = v6 / 0x18;
    LODWORD(v22) = v6 / 0x18;
    v21 = v7;
    v10 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *v5;
      v13 = (_QWORD *)(v7 + 16);
      v14 = 8 * v10;
      do
      {
        WebKit::WebExtensionCommand::parameters(*(WebKit::WebExtensionCommand **)(v12 + 8 * v11++), v8, v9, (uint64_t)&v23);
        *(v13 - 2) = v23;
        *(v13 - 1) = v24;
        *v13 = v25;
        v13 += 3;
        v14 -= 8;
      }
      while (v14);
      v7 = v21;
      LODWORD(v4) = v22;
    }
    else
    {
      LODWORD(v11) = HIDWORD(v22);
    }
    goto LABEL_9;
  }
  __break(0xC471u);
}

void sub_197710CB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::fireCommandEventIfNeeded(CFTypeRef *this, CFTypeRef *a2, WebKit::WebExtensionTab *a3)
{
  _QWORD *v6;
  void *v7;
  _QWORD *result;
  _QWORD *v9;
  char v10;
  unsigned __int8 *v11;

  v10 = 4;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, &v10, 1);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  if (a3)
    ++*(_DWORD *)a3;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34F6EB0;
  v6[1] = this;
  v6[2] = this;
  v6[3] = a2;
  v6[4] = a3;
  v9 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v11, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (v11)
    return (_QWORD *)WTF::fastFree((WTF *)(v11 - 16), v7);
  return result;
}

void sub_197710DB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(CFTypeRef *this, CFTypeRef *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  _QWORD *v10;
  char v11;
  unsigned __int8 *v12;

  v11 = 3;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v12, &v11, 1);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  v6 = *a3;
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34F6ED8;
  v7[1] = this;
  v7[2] = this;
  v7[3] = a2;
  if (v6)
    *(_DWORD *)v6 += 2;
  v7[4] = v6;
  v10 = v7;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v12, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      result = (_QWORD *)WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v12)
    return (_QWORD *)WTF::fastFree((WTF *)(v12 - 16), v8);
  return result;
}

void sub_197710F1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::StringImpl *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34F6EB0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F6EB0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  _BYTE v20[16];
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;
  _BYTE v25[184];
  uint64_t *v26;
  uint64_t v27;
  char v28;
  IPC::Encoder *v29;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 32), (uint64_t)v20);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v25, (uint64_t)v20);
  }
  else
  {
    v25[0] = 0;
    v25[176] = 0;
  }
  WebKit::WebExtensionContext::processes((char *)v1, 4, 0, (uint64_t *)&v26);
  v5 = *(_QWORD *)(v1 + 64);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v26);
    v7 = v6;
    v8 = v4;
    v9 = v26 ? &v26[*((unsigned int *)v26 - 1)] : 0;
    if (v9 != v6)
    {
      v10 = (uint64_t *)(v3 + 32);
      do
      {
        v11 = *v7;
        v12 = *(_QWORD *)(v1 + 32);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1570;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v29 = (IPC::Encoder *)v13;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, v10);
        IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>((IPC::Encoder *)v13, (uint64_t)v25);
        LOBYTE(v27) = 0;
        v28 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v29, 0, (uint64_t)&v27, 1);
        if (v28)
        {
          v14 = v27;
          v27 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v15 = v29;
        v29 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v4);
          WTF::fastFree(v16, v17);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_20;
        }
        v7 = v8;
LABEL_20:
        ;
      }
      while (v7 != v9);
    }
  }
  if (v26)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v26, v4);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, (WTF::StringImpl *)v4);
  if (v2)
  {
    if (v24)
    {
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v22)
    {
      result = v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19771128C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  WTF::StringImpl *v38;

  v37 = *(uint64_t **)(v35 - 128);
  if (v37)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v37, a2);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a34, (WTF::StringImpl *)a2);
  if (v34)
  {
    if (a21 && a20)
    {
      if (*(_DWORD *)a20 == 2)
        WTF::StringImpl::destroy(a20, v38);
      else
        *(_DWORD *)a20 -= 2;
    }
    if (a19 && a14)
    {
      if (*(_DWORD *)a14 == 2)
        WTF::StringImpl::destroy(a14, v38);
      else
        *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F6ED8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F6ED8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WebKit::WebExtensionCommand *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t *v24[3];
  uint64_t v25;
  char v26;
  IPC::Encoder *v27;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(WebKit::WebExtensionCommand **)(a1 + 24);
  WebKit::WebExtensionCommand::shortcutString(v5, a2, a3, &v22);
  WebKit::WebExtensionContext::processes((char *)v4, 3, 0, (uint64_t *)&v23);
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    v8 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v23);
    v9 = v8;
    v10 = v6;
    v11 = v23 ? &v23[*((unsigned int *)v23 - 1)] : 0;
    if (v11 != v8)
    {
      v12 = (uint64_t *)((char *)v5 + 32);
      v13 = (uint64_t *)(a1 + 32);
      do
      {
        v14 = *v9;
        v24[0] = v12;
        v24[1] = v13;
        v24[2] = (uint64_t *)&v22;
        v15 = *(_QWORD *)(v4 + 32);
        v16 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v16 = 1569;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)(v16 + 528) = v16 + 16;
        *(_QWORD *)(v16 + 536) = v16 + 16;
        *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v16 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
        v27 = (IPC::Encoder *)v16;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(v16, v24);
        LOBYTE(v25) = 0;
        v26 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v27, 0, (uint64_t)&v25, 1);
        if (v26)
        {
          v17 = v25;
          v25 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        v18 = v27;
        v27 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v6);
          WTF::fastFree(v19, v20);
        }
        while (++v9 != v10)
        {
          if ((unint64_t)(*v9 + 1) > 1)
            goto LABEL_17;
        }
        v9 = v10;
LABEL_17:
        ;
      }
      while (v9 != v11);
    }
  }
  if (v23)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v23, v6);
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197711618(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, IPC::Encoder *a20)
{
  if (a13)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a13, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isCookiesMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v7, CFSTR("cookies"));
  v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_19771173C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fetchCookies(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  API::HTTPCookieStore *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  int v32;
  CFTypeRef *v33;

  if ((*(_BYTE *)(a3 + 8) & 1) != 0
    && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a3, 0, 3) & 0xFFFFFFFE) != 2)
  {
    v23 = 0;
    v24 = 0;
    LODWORD(v25) = 0;
    v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 16))(v20, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if ((_DWORD)v25 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34F6EF0[v25])(v22, &v23);
  }
  else
  {
    v23 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v10 = *a5;
    *a5 = 0;
    v24 = a1;
    v25 = v10;
    LOBYTE(v26) = 0;
    v27 = 0;
    if (*(_BYTE *)(a4 + 8))
    {
      v11 = *(WTF::StringImpl **)a4;
      if (*(_QWORD *)a4)
        *(_DWORD *)v11 += 2;
      v26 = v11;
      v27 = 1;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    if (*(_BYTE *)(a4 + 24))
    {
      v12 = *(WTF::StringImpl **)(a4 + 16);
      if (v12)
        *(_DWORD *)v12 += 2;
      v28 = v12;
      v29 = 1;
    }
    LOBYTE(v30) = 0;
    v31 = 0;
    if (*(_BYTE *)(a4 + 40))
    {
      v13 = *(WTF::StringImpl **)(a4 + 32);
      if (v13)
        *(_DWORD *)v13 += 2;
      v30 = v13;
      v31 = 1;
    }
    v32 = *(_DWORD *)(a4 + 48);
    CFRetain(a2[1]);
    v33 = a2;
    v14 = *(_DWORD *)(a3 + 8);
    v15 = WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)a2);
    if ((v14 & 1) != 0)
    {
      WTF::URL::isolatedCopy();
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>(&v21, &v23);
      API::HTTPCookieStore::cookiesForURL((uint64_t)v15, (uint64_t *)v22, &v21);
      v18 = v21;
      v21 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v22[0];
      v22[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>((uint64_t *)v22, &v23);
      API::HTTPCookieStore::cookies((uint64_t)v15, (uint64_t *)v22);
      v17 = v22[0];
      v22[0] = 0;
      if (v17)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
    }
    if (v33)
      CFRelease(v33[1]);
    if (v31 && v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v16);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (v29 && v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v16);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v27 && v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v16);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    if (v24)
      CFRelease(*(CFTypeRef *)(v24 + 8));
  }
}

void sub_197711A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if ((_DWORD)a18 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F6EF0[a18])(&a11, &a16);
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)0x60);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E34F6F30;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v8 = (_DWORD *)a2[3];
    if (v8)
      *v8 += 2;
    *(_QWORD *)(v4 + 32) = v8;
    *(_BYTE *)(v4 + 40) = 1;
  }
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v9 = (_DWORD *)a2[5];
    if (v9)
      *v9 += 2;
    *(_QWORD *)(v4 + 48) = v9;
    *(_BYTE *)(v4 + 56) = 1;
  }
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v10 = (_DWORD *)a2[7];
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v4 + 64) = v10;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_DWORD *)(v4 + 80) = *((_DWORD *)a2 + 18);
  v11 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(v4 + 88) = v11;
  *a1 = v4;
  return a1;
}

void WebKit::WebExtensionContext::cookiesGet(uint64_t a1, const void *a2, char a3, WTF::StringImpl *a4, uint64_t a5, uint64_t *a6)
{
  CFTypeRef *v10;
  NSString *v11;
  CFTypeRef *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  URL *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  URL *v44;
  uint64_t v45[2];
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;
  int v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  CFTypeRef *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    v12 = v10;
    CFRetain(v10[1]);
    LOBYTE(v46) = 0;
    v47 = 0;
    LOBYTE(v48) = 0;
    v49 = 0;
    LOBYTE(v50) = 0;
    v51 = 0;
    v52 = 0;
    std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v46, a4);
    v13 = *(WTF::StringImpl **)a5;
    if (*(_QWORD *)a5)
      *(_DWORD *)v13 += 2;
    v53 = v13;
    v54 = *(_OWORD *)(a5 + 8);
    v55 = *(_OWORD *)(a5 + 24);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v45, (uint64_t)&v53, 1uLL);
    v44 = 0;
    v56 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v57 = a1;
    CFRetain(v12[1]);
    v58 = v12;
    v14 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v14 += 2;
    v59 = v14;
    v15 = *(WTF::StringImpl **)a5;
    if (*(_QWORD *)a5)
      *(_DWORD *)v15 += 2;
    v60 = v15;
    v16 = *(_OWORD *)(a5 + 24);
    v61 = *(_OWORD *)(a5 + 8);
    v62 = v16;
    LOBYTE(v63) = 0;
    v64 = 0;
    if (v47)
    {
      v17 = v46;
      v46 = 0;
      v63 = v17;
      v64 = 1;
    }
    LOBYTE(v65) = 0;
    v66 = 0;
    if (v49)
    {
      v18 = v48;
      v48 = 0;
      v65 = v18;
      v66 = 1;
    }
    LOBYTE(v67) = 0;
    v68 = 0;
    if (v51)
    {
      v19 = v50;
      v50 = 0;
      v67 = v19;
      v68 = 1;
    }
    v69 = v52;
    v20 = *a6;
    *a6 = 0;
    v70 = v20;
    v21 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v21 = off_1E34F6F58;
    *(_QWORD *)(v21 + 8) = v56;
    *(_QWORD *)(v21 + 16) = v57;
    v22 = v58;
    v57 = 0;
    v58 = 0;
    *(_QWORD *)(v21 + 24) = v22;
    v23 = v59;
    if (v59)
      *v59 += 2;
    *(_QWORD *)(v21 + 32) = v23;
    v24 = v60;
    if (v60)
      *(_DWORD *)v60 += 2;
    *(_QWORD *)(v21 + 40) = v24;
    v25 = v62;
    *(_OWORD *)(v21 + 48) = v61;
    *(_OWORD *)(v21 + 64) = v25;
    *(_BYTE *)(v21 + 80) = 0;
    *(_BYTE *)(v21 + 88) = 0;
    if (v64)
    {
      v26 = v63;
      v63 = 0;
      *(_QWORD *)(v21 + 80) = v26;
      *(_BYTE *)(v21 + 88) = 1;
    }
    *(_BYTE *)(v21 + 96) = 0;
    *(_BYTE *)(v21 + 104) = 0;
    if (v66)
    {
      v27 = v65;
      v65 = 0;
      *(_QWORD *)(v21 + 96) = v27;
      *(_BYTE *)(v21 + 104) = 1;
    }
    *(_BYTE *)(v21 + 112) = 0;
    *(_BYTE *)(v21 + 120) = 0;
    if (v68)
    {
      v28 = v67;
      v67 = 0;
      *(_QWORD *)(v21 + 112) = v28;
      *(_BYTE *)(v21 + 120) = 1;
    }
    *(_DWORD *)(v21 + 128) = v69;
    v29 = v70;
    v70 = 0;
    *(_QWORD *)(v21 + 136) = v29;
    v43 = v21;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v45, &v44, &v43, 1, 1);
    v31 = v43;
    v43 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(&v56, v30);
    v33 = v44;
    v44 = 0;
    if (v33)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v33);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    if (v51)
    {
      v36 = v50;
      v50 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v34);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    if (v49)
    {
      v37 = v48;
      v48 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v34);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (v47)
    {
      v38 = v46;
      v46 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    CFRelease(v12[1]);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.get()"), 0, CFSTR("cookie store not found"), v11, &v46);
    v39 = v46;
    v46 = 0;
    v57 = (uint64_t)v39;
    v71 = 1;
    v40 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 16))(v40, &v56);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (v71 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34F6F00[v71])(&v53, &v57);
    v71 = -1;
    v42 = v46;
    v46 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
}

void sub_19771216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v50;

  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (a47 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34F6F00[a47])(&a21, v47);
  a47 = -1;
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v50);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 13), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11), v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), v5);
  v7 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = a1[1];
  a1[1] = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  return a1;
}

void WebKit::WebExtensionContext::cookiesGetAll(uint64_t a1, const void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  CFTypeRef *v10;
  NSString *v11;
  CFTypeRef *v12;
  WTF::StringImpl *v13;
  _OWORD *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  URL *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  CFTypeRef *v36;
  WTF::StringImpl *v37[2];
  __int128 v38;
  uint64_t v39;
  URL *v40;
  uint64_t v41[2];
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    v12 = v10;
    CFRetain(v10[1]);
    v13 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v13 += 2;
    v42 = v13;
    v43 = *(_OWORD *)(a4 + 8);
    v44 = *(_OWORD *)(a4 + 24);
    v36 = v12;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v41, (uint64_t)&v42, 1uLL);
    v40 = 0;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    CFRetain(v12[1]);
    v14 = (_OWORD *)(a4 + 8);
    v15 = *(WTF::StringImpl **)a4;
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = v14[1];
    *(_OWORD *)v37 = *v14;
    v38 = v16;
    v35 = *(unsigned __int8 *)(a5 + 8);
    if (*(_BYTE *)(a5 + 8))
    {
      v17 = *(WTF::StringImpl **)a5;
      if (*(_QWORD *)a5)
        *(_DWORD *)v17 += 2;
    }
    else
    {
      v17 = 0;
    }
    v18 = *(unsigned __int8 *)(a5 + 24);
    if (*(_BYTE *)(a5 + 24))
    {
      v19 = *(WTF::StringImpl **)(a5 + 16);
      if (v19)
        *(_DWORD *)v19 += 2;
    }
    else
    {
      v19 = 0;
    }
    v20 = *(unsigned __int8 *)(a5 + 40);
    if (*(_BYTE *)(a5 + 40))
    {
      v21 = *(WTF::StringImpl **)(a5 + 32);
      if (v21)
        *(_DWORD *)v21 += 2;
    }
    else
    {
      v21 = 0;
    }
    v22 = *(_DWORD *)(a5 + 48);
    v23 = *a6;
    *a6 = 0;
    v24 = WTF::fastMalloc((WTF *)0x88);
    *(_QWORD *)v24 = off_1E34F6FA8;
    *(_QWORD *)(v24 + 8) = a1;
    *(_QWORD *)(v24 + 16) = a1;
    *(_QWORD *)(v24 + 24) = v36;
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)(v24 + 32) = v15;
    v25 = v38;
    *(_OWORD *)(v24 + 40) = *(_OWORD *)v37;
    *(_OWORD *)(v24 + 56) = v25;
    *(_BYTE *)(v24 + 72) = 0;
    *(_BYTE *)(v24 + 80) = 0;
    if (v35)
    {
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v24 + 72) = v17;
      *(_BYTE *)(v24 + 80) = 1;
    }
    *(_BYTE *)(v24 + 88) = 0;
    *(_BYTE *)(v24 + 96) = 0;
    if (v18)
    {
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v24 + 88) = v19;
      *(_BYTE *)(v24 + 96) = 1;
    }
    *(_BYTE *)(v24 + 104) = 0;
    *(_BYTE *)(v24 + 112) = 0;
    if (v20)
    {
      if (v21)
        *(_DWORD *)v21 += 2;
      *(_QWORD *)(v24 + 104) = v21;
      *(_BYTE *)(v24 + 112) = 1;
    }
    *(_DWORD *)(v24 + 120) = v22;
    *(_QWORD *)(v24 + 128) = v23;
    v39 = v24;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v41, &v40, &v39, 1, 1);
    v27 = v39;
    v39 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (v20 && v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v26);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v18 && v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v26);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v35 && v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v26);
        if (v15)
        {
LABEL_49:
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v26);
          else
            *(_DWORD *)v15 -= 2;
        }
LABEL_52:
        v28 = v40;
        v40 = 0;
        if (v28)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v28);
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v26);
        v30 = v42;
        v42 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        CFRelease(v36[1]);
        return;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v15)
      goto LABEL_49;
    goto LABEL_52;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.getAll()"), 0, CFSTR("cookie store not found"), v11, v37);
  v31 = v37[0];
  v37[0] = 0;
  v42 = v31;
  DWORD2(v43) = 1;
  v32 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v32 + 16))(v32, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (DWORD2(v43) != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34F6EF0[DWORD2(v43)])(v41, &v42);
  DWORD2(v43) = -1;
  v34 = v37[0];
  v37[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
}

void sub_1977127D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, int a11, int a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,int a24)
{
  uint64_t v24;
  WTF::StringImpl *v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a24 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F6EF0[a24])(&a20, &a22);
  a24 = -1;
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v25);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19771298C()
{
  JUMPOUT(0x197712954);
}

void WebKit::WebExtensionContext::cookiesSet(uint64_t a1, const void *a2, char a3, __int128 *a4, uint64_t *a5)
{
  CFTypeRef *v8;
  NSString *v9;
  CFTypeRef *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef *v22;
  uint64_t v23;
  URL *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  URL *v33;
  uint64_t v34[2];
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[88];
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v8)
  {
    v10 = v8;
    CFRetain(v8[1]);
    WebKit::toURL((WebKit *)&v35, (const WebCore::Cookie *)(a4 + 1));
    v11 = v35;
    if (v35)
      *(_DWORD *)v35 += 2;
    v48 = v11;
    v49 = v36;
    v50 = v37;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v34, (uint64_t)&v48, 1uLL);
    v33 = 0;
    v38 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v39 = a1;
    CFRetain(v10[1]);
    v40 = v10;
    v12 = v35;
    if (v35)
      *(_DWORD *)v35 += 2;
    v41 = v12;
    v42 = v36;
    v43 = v37;
    v44 = *a4;
    WebCore::Cookie::Cookie((WebCore::Cookie *)v45, (const WebCore::Cookie *)(a4 + 1));
    v13 = *a5;
    *a5 = 0;
    v47 = v13;
    v14 = WTF::fastMalloc((WTF *)0xE8);
    *(_QWORD *)v14 = off_1E34F6FD0;
    *(_QWORD *)(v14 + 8) = v38;
    *(_QWORD *)(v14 + 16) = v39;
    v15 = v40;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)(v14 + 24) = v15;
    WTF::URL::URL(v14 + 32, (uint64_t *)&v41);
    *(_OWORD *)(v14 + 72) = v44;
    WebCore::Cookie::Cookie((WebCore::Cookie *)(v14 + 88), (const WebCore::Cookie *)v45);
    v16 = v47;
    v47 = 0;
    *(_QWORD *)(v14 + 224) = v16;
    v32 = v14;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v34, &v33, &v32, 1, 1);
    v18 = v32;
    v32 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v47;
    v47 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v45, v17);
    v21 = v41;
    v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v40;
    v40 = 0;
    if (v22)
      CFRelease(v22[1]);
    v23 = v39;
    v39 = 0;
    if (v23)
      CFRelease(*(CFTypeRef *)(v23 + 8));
    v24 = v33;
    v33 = 0;
    if (v24)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v20);
    v26 = v48;
    v48 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v35;
    v35 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
    CFRelease(v10[1]);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.set()"), 0, CFSTR("cookie store not found"), v9, &v35);
    v28 = v35;
    v35 = 0;
    v39 = (uint64_t)v28;
    v46 = 1;
    v29 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 16))(v29, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (v46 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34F6F00[v46])(&v48, &v39);
    v46 = -1;
    v31 = v35;
    v35 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
}

void sub_197712D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v50;

  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (a40 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34F6F00[a40])(v48 - 112, v46);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v50);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::toURL(WebKit *this, const WebCore::Cookie *a2)
{
  int v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *result;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;

  if (!*((_QWORD *)a2 + 2))
  {
LABEL_5:
    v8 = 0;
    if (*((_BYTE *)a2 + 57))
      v9 = "https";
    else
      v9 = "http";
    v10 = 5;
    if (*((_BYTE *)a2 + 57))
      v10 = 6;
    v11 = 1;
    goto LABEL_41;
  }
  v4 = WTF::StringImpl::startsWith();
  v8 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    if (!v8)
      goto LABEL_5;
    WTF::StringImpl::substring(*((WTF::StringImpl **)a2 + 2));
    v8 = v55;
    if (!v55)
      goto LABEL_5;
  }
  else
  {
    if (!v8)
      goto LABEL_5;
    *(_DWORD *)v8 += 2;
  }
  if (WTF::StringImpl::find(v8, 0x3Au, 0, v5, v6, v7) != -1)
  {
    v12 = *(_DWORD *)(v8 + 4);
    *(_DWORD *)v8 += 2;
    if ((v12 & 0x80000000) == 0)
    {
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (!v13)
      {
        v15 = (v14 + 1);
        if (!__OFADD__(v14, 1))
        {
          if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
            v16 = v55;
            if (v55)
            {
              *(_BYTE *)(v55 + 20) = 91;
              *(_DWORD *)v16 = 2;
              *(_DWORD *)(v16 + 4) = v15;
              *(_QWORD *)(v16 + 8) = v16 + 20;
              *(_DWORD *)(v16 + 16) = 4;
              v55 = v8;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v55, (char *)(v16 + 21));
              v19 = v55;
              if (v55)
                v19 = *(unsigned int *)(v55 + 4);
              *(_BYTE *)(v16 + 21 + v19) = 93;
              goto LABEL_28;
            }
          }
          else if (v15 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * (v14 + 1) + 20));
            v16 = v55;
            if (v55)
            {
              *(_DWORD *)v55 = 2;
              *(_DWORD *)(v16 + 4) = v15;
              *(_WORD *)(v16 + 20) = 91;
              *(_QWORD *)(v16 + 8) = v16 + 20;
              *(_DWORD *)(v16 + 16) = 0;
              v55 = v8;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v55, (char *)(v16 + 22));
              v18 = v55;
              if (v55)
                v18 = *(unsigned int *)(v55 + 4);
              *(_WORD *)(v16 + 22 + 2 * v18) = 93;
LABEL_28:
              v20 = *(_DWORD *)v8 - 2;
              if (*(_DWORD *)v8 == 2)
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v8, v17);
                v20 = *(_DWORD *)v8;
              }
              else
              {
                *(_DWORD *)v8 = v20;
              }
              v21 = v20 - 2;
              if (v21)
                *(_DWORD *)v8 = v21;
              else
                WTF::StringImpl::destroy((WTF::StringImpl *)v8, v17);
              v8 = v16;
              goto LABEL_35;
            }
          }
        }
      }
    }
    __break(0xC471u);
LABEL_110:
    JUMPOUT(0x197713428);
  }
  v16 = v8;
LABEL_35:
  v11 = 0;
  if (*((_BYTE *)a2 + 57))
    v9 = "https";
  else
    v9 = "http";
  v10 = 5;
  if (*((_BYTE *)a2 + 57))
    v10 = 6;
  *(_DWORD *)v16 += 2;
LABEL_41:
  v22 = *((_QWORD *)a2 + 3);
  if (v22)
    *(_DWORD *)v22 += 2;
  v23 = v10 != 0;
  v24 = v10 - 1;
  if (v23)
    v25 = v24;
  else
    v25 = 0;
  if (v25 >> 31)
  {
    __break(0xC471u);
    goto LABEL_110;
  }
  if (!v8)
  {
    v26 = 0;
    if (v22)
      goto LABEL_49;
LABEL_107:
    v27 = 0;
    goto LABEL_50;
  }
  v26 = *(_DWORD *)(v8 + 4);
  if (!v22)
    goto LABEL_107;
LABEL_49:
  v27 = *(_DWORD *)(v22 + 4);
LABEL_50:
  if ((v27 | v26) < 0)
    goto LABEL_105;
  v13 = __OFADD__(v26, v27);
  v28 = v26 + v27;
  if (v13)
    goto LABEL_105;
  v13 = __OFADD__(v28, 3);
  v29 = v28 + 3;
  if (v13)
    goto LABEL_105;
  v30 = v25 + v29;
  if (__OFADD__((_DWORD)v25, v29))
    goto LABEL_105;
  if (v8)
  {
    v31 = *(_DWORD *)(v8 + 16);
    if (!v22 || (v31 & 4) == 0)
    {
      v32 = v30;
      v33 = v30 == 0;
      if ((v31 & 4) == 0)
      {
LABEL_58:
        if (v33)
        {
LABEL_59:
          v34 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_81;
        }
        if (v30 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v32 + 20));
          v34 = v55;
          if (v55)
          {
            v38 = (char *)(v55 + 20);
            *(_DWORD *)v55 = 2;
            *(_DWORD *)(v34 + 4) = v30;
            *(_QWORD *)(v34 + 8) = v34 + 20;
            *(_DWORD *)(v34 + 16) = 0;
            v39 = v34 + 20 + 2 * v25;
            if ((v25 & 0xFFFFFFC0) != 0)
            {
              v40 = &v38[2 * (v25 & 0xFFFFFFC0)];
              v41 = 0uLL;
              do
              {
                v56.val[0] = *(int8x16_t *)v9;
                v42 = *((int8x16_t *)v9 + 1);
                v57.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
                v43 = *((_OWORD *)v9 + 3);
                v9 += 64;
                v44 = v43;
                v57.val[1] = 0uLL;
                v58.val[0] = v42;
                v56.val[1] = 0uLL;
                v45 = v38;
                vst2q_s8(v45, v56);
                v45 += 32;
                v58.val[1] = 0uLL;
                vst2q_s8(v45, v58);
                v46 = v38 + 64;
                vst2q_s8(v46, v57);
                v47 = v38 + 96;
                vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
                v38 += 128;
              }
              while (v38 != v40);
              v38 = v40;
            }
            while (v38 != (char *)v39)
            {
              v48 = *(unsigned __int8 *)v9++;
              *(_WORD *)v38 = v48;
              v38 += 2;
            }
            *(_DWORD *)v39 = 3080250;
            *(_WORD *)(v39 + 4) = 47;
            v49 = v39 + 6;
            v54 = v8;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v54, (char *)(v39 + 6));
            v50 = v54;
            if (v54)
              v50 = *(unsigned int *)(v54 + 4);
            v55 = v22;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v55, (char *)(v49 + 2 * v50));
            goto LABEL_81;
          }
        }
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x197713440);
      }
      goto LABEL_61;
    }
  }
  else if (!v22)
  {
    if (!v30)
      goto LABEL_59;
    v32 = v30;
    if ((v30 & 0x80000000) != 0)
      goto LABEL_105;
    goto LABEL_63;
  }
  v32 = v30;
  v33 = v30 == 0;
  if ((*(_BYTE *)(v22 + 16) & 4) == 0)
    goto LABEL_58;
LABEL_61:
  if (v33)
    goto LABEL_59;
  if ((v30 & 0x80000000) != 0)
    goto LABEL_105;
LABEL_63:
  WTF::tryFastCompactMalloc((WTF *)(v32 + 20));
  v34 = v55;
  if (!v55)
    goto LABEL_105;
  v35 = (char *)(v55 + 20);
  *(_DWORD *)v55 = 2;
  *(_DWORD *)(v34 + 4) = v30;
  *(_QWORD *)(v34 + 8) = v34 + 20;
  *(_DWORD *)(v34 + 16) = 4;
  if ((_DWORD)v25)
  {
    if ((_DWORD)v25 == 1)
      *v35 = *v9;
    else
      memcpy((void *)(v34 + 20), v9, v25);
  }
  v36 = &v35[v25];
  v36[2] = 47;
  *(_WORD *)v36 = 12090;
  v54 = v8;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v54, &v35[v25 + 3]);
  v37 = v54;
  if (v54)
    v37 = *(unsigned int *)(v54 + 4);
  v55 = v22;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v55, &v35[v25 + 3 + v37]);
LABEL_81:
  v53 = (WTF::StringImpl *)v34;
  MEMORY[0x19AEABB0C](this, &v53, 0);
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
      if (!v22)
        goto LABEL_89;
      goto LABEL_87;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v22)
  {
LABEL_89:
    if (!v8)
      goto LABEL_94;
    goto LABEL_92;
  }
LABEL_87:
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_89;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v22, v51);
  if (!v8)
    goto LABEL_94;
LABEL_92:
  if (*(_DWORD *)v8 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v51);
    if ((v11 & 1) != 0)
      return result;
    goto LABEL_97;
  }
  *(_DWORD *)v8 -= 2;
LABEL_94:
  if ((v11 & 1) != 0)
    return result;
LABEL_97:
  if (*(_DWORD *)v8 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v51);
  *(_DWORD *)v8 -= 2;
  return result;
}

void sub_197713468(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, a2);
  else
    *(_DWORD *)v11 -= 2;
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::cookiesRemove(uint64_t a1, const void *a2, char a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  CFTypeRef *v10;
  NSString *v11;
  CFTypeRef *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  _OWORD *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  URL *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[2];
  __int128 v32;
  uint64_t v33;
  URL *v34;
  uint64_t v35[2];
  WTF::StringImpl *v36;
  _OWORD v37[10];
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    v12 = v10;
    CFRetain(v10[1]);
    v13 = *(WTF::StringImpl **)a5;
    if (*(_QWORD *)a5)
      *(_DWORD *)v13 += 2;
    v36 = v13;
    v14 = *(_OWORD *)(a5 + 24);
    v37[0] = *(_OWORD *)(a5 + 8);
    v37[1] = v14;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v35, (uint64_t)&v36, 1uLL);
    v34 = 0;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    CFRetain(v12[1]);
    v15 = *a4;
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = (_OWORD *)(a5 + 8);
    v17 = *(WTF::StringImpl **)a5;
    if (v17)
      *(_DWORD *)v17 += 2;
    v18 = v16[1];
    *(_OWORD *)v31 = *v16;
    v32 = v18;
    v19 = *a6;
    *a6 = 0;
    v20 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v20 = &off_1E34F7020;
    *(_QWORD *)(v20 + 8) = a1;
    *(_QWORD *)(v20 + 16) = a1;
    *(_QWORD *)(v20 + 24) = v12;
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)(v20 + 32) = v15;
    if (v17)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)(v20 + 40) = v17;
    v21 = v32;
    *(_OWORD *)(v20 + 48) = *(_OWORD *)v31;
    *(_OWORD *)(v20 + 64) = v21;
    *(_QWORD *)(v20 + 80) = v19;
    v33 = v20;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v35, &v34, &v33, 1, 1);
    v23 = v33;
    v33 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v22);
        if (!v15)
        {
LABEL_23:
          v24 = v34;
          v34 = 0;
          if (v24)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v22);
          v26 = v36;
          v36 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          CFRelease(v12[1]);
          return;
        }
LABEL_20:
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v22);
        else
          *(_DWORD *)v15 -= 2;
        goto LABEL_23;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v15)
      goto LABEL_23;
    goto LABEL_20;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.remove()"), 0, CFSTR("cookie store not found"), v11, v31);
  v27 = v31[0];
  v31[0] = 0;
  *(_QWORD *)&v37[0] = v27;
  v38 = 1;
  v28 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v38 != -1)
    ((void (*)(uint64_t *, _OWORD *))off_1E34F6F00[v38])(v35, v37);
  v38 = -1;
  v30 = v31[0];
  v31[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
}

void sub_197713830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v42;

  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (a39 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6F00[a39])(&a16, v39);
  a39 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v42);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197713998()
{
  JUMPOUT(0x197713964);
}

uint64_t WebKit::WebExtensionContext::cookiesGetAllCookieStores(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  void *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  CFTypeRef v15;
  _QWORD *v16;
  int v17;
  WTF *v18;
  int v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  WebKit::WebExtensionTab **v25;
  WebKit::WebExtensionTab **v26;
  WebKit::WebExtensionTab *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  WTF *v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t result;
  uint64_t v56;
  WebKit::WebExtensionTab **v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(*(WebKit::WebExtensionControllerConfiguration **)(v5 + 40))[3];
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, 0);
  v8 = v60;
  if (v60)
    v9 = *(_DWORD *)(v60 - 8);
  else
    v9 = 0;
  v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = v60 + 24 * v13;
  v15 = *(CFTypeRef *)v14;
  if (!*(_QWORD *)v14)
  {
LABEL_15:
    *(_QWORD *)v14 = v6;
    v18 = *(WTF **)(v14 + 8);
    if (v18)
    {
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      WTF::fastFree(v18, v7);
    }
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    if (v60)
      v19 = *(_DWORD *)(v60 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v60 - 12) = v19;
    if (v60)
      v21 = *(_DWORD *)(v60 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v60 - 16) + v21);
    v23 = *(unsigned int *)(v60 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_29;
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_29;
    }
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, v14);
    goto LABEL_29;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v6)
  {
    if (v15 == (CFTypeRef)-1)
      v16 = (_QWORD *)v14;
    v13 = (v13 + v17) & v9;
    v14 = v60 + 24 * v13;
    v15 = *(CFTypeRef *)v14;
    ++v17;
    if (!*(_QWORD *)v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        --*(_DWORD *)(v8 - 16);
        v14 = (uint64_t)v16;
      }
      goto LABEL_15;
    }
  }
  v20 = *(WTF **)(v14 + 8);
  if (v20)
  {
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    WTF::fastFree(v20, v7);
  }
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_29:
  WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v57);
  if (v59)
  {
    v25 = v57;
    v26 = &v57[v59];
    while (1)
    {
      v27 = *v25;
      *(_DWORD *)v27 = *(_DWORD *)*v25 + 1;
      WebKit::WebExtensionTab::mainWebView(v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v28;
      if (v28)
        break;
LABEL_58:

      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
      if (++v25 == v26)
        goto LABEL_63;
    }
    objc_msgSend(v28, "configuration");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "websiteDataStore");
    v31 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v32 = v31[4];

    v34 = v60;
    if (v60
      || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, 0), (v34 = v60) != 0))
    {
      v35 = *(_DWORD *)(v34 - 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = (v32 + ~(v32 << 32)) ^ ((unint64_t)(v32 + ~(v32 << 32)) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    v40 = (_QWORD *)(v34 + 24 * v39);
    v41 = *v40;
    if (*v40)
    {
      v42 = 0;
      v43 = 1;
      while (v41 != v32)
      {
        if (v41 == -1)
          v42 = v40;
        v39 = (v39 + v43) & v35;
        v40 = (_QWORD *)(v34 + 24 * v39);
        v41 = *v40;
        ++v43;
        if (!*v40)
        {
          if (v42)
          {
            *v42 = 0;
            v42[1] = 0;
            v42[2] = 0;
            --*(_DWORD *)(v34 - 16);
            v40 = v42;
          }
          goto LABEL_43;
        }
      }
      goto LABEL_54;
    }
LABEL_43:
    *v40 = v32;
    v44 = (WTF *)v40[1];
    if (v44)
    {
      v40[1] = 0;
      *((_DWORD *)v40 + 4) = 0;
      WTF::fastFree(v44, v33);
    }
    v40[1] = 0;
    v40[2] = 0;
    if (v60)
      v45 = *(_DWORD *)(v60 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v60 - 12) = v45;
    if (v60)
      v46 = *(_DWORD *)(v60 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v60 - 16) + v46);
    v48 = *(unsigned int *)(v60 - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47)
        goto LABEL_54;
    }
    else if (3 * v48 > 4 * v47)
    {
LABEL_54:
      v49 = v40 + 1;
      v50 = *((_QWORD *)v27 + 2);
      v56 = v50;
      v51 = *((unsigned int *)v40 + 5);
      if ((_DWORD)v51 == *((_DWORD *)v40 + 4))
        *(_QWORD *)(v40[1] + 8 * *((unsigned int *)v40 + 5)) = *(_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v51 + 1, (unint64_t)&v56);
      else
        *(_QWORD *)(*v49 + 8 * v51) = v50;
      ++*((_DWORD *)v40 + 5);
      goto LABEL_58;
    }
    v40 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, (uint64_t)v40);
    goto LABEL_54;
  }
LABEL_63:
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v24);
  v52 = v60;
  v60 = 0;
  v57 = (WebKit::WebExtensionTab **)v52;
  v58 = 0;
  v53 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WebKit::WebExtensionTab ***))(*(_QWORD *)v53 + 16))(v53, &v57);
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (v58 != -1)
    ((void (*)(uint64_t *, WebKit::WebExtensionTab ***))off_1E34F6F10[v58])(&v56, &v57);
  result = v60;
  if (v60)
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(v60, v54);
  return result;
}

void sub_197713DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 != -1)
    ((void (*)(uint64_t *, char *))off_1E34F6F10[a12])(&a9, &a10);
  if (a13)
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(CFTypeRef *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *result;
  _QWORD *v5;
  char v6;
  unsigned __int8 *v7;

  v6 = 5;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, &v6, 1);
  CFRetain(this[1]);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = &off_1E34F7098;
  v2[1] = this;
  v2[2] = this;
  v5 = v2;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v7, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (v7)
    return (_QWORD *)WTF::fastFree((WTF *)(v7 - 16), v3);
  return result;
}

void sub_197713F1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E34F6F30;
  v3 = a1[11];
  a1[11] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 6), v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v5);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E34F6F30;
  v3 = *((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 48, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v5);
  v7 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return WTF::fastFree(a1, v6);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  BOOL v19;
  uint64_t v20;
  StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  StringImpl *m_ptr;
  void *v28;
  void *v29;
  _OWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39[17];
  char v40;
  URL v41;
  StringImpl *v42;
  uint64_t v43;
  unsigned __int8 *v44[3];

  v3 = *(_QWORD *)(a1 + 8);
  v36 = 0;
  v37 = 0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    if (v4 >= 0x1AF286C)
    {
      __break(0xC471u);
LABEL_51:
      JUMPOUT(0x1977144A0);
    }
    LODWORD(v37) = 152 * v4 / 0x98;
    v36 = WTF::fastMalloc((WTF *)(152 * v4));
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      for (i = 136 * v7; i; i -= 136)
      {
        if (!*(_BYTE *)(a1 + 40) || WTF::equal(*(WTF **)v8, *(const WTF::StringImpl **)(a1 + 32), v6))
        {
          if (!*(_BYTE *)(a1 + 56))
            goto LABEL_25;
          v10 = *(_QWORD *)(v8 + 16);
          if (v10)
          {
            v11 = *(unsigned int *)(v10 + 16);
            v12 = *(StringImpl **)(v10 + 8);
            v10 = *(unsigned int *)(v10 + 4);
            v13 = (v11 >> 2) & 1;
          }
          else
          {
            v12 = 0;
            v13 = 1;
          }
          v14 = *(_QWORD *)(a1 + 48);
          if (v14)
          {
            v15 = *(unsigned __int8 **)(v14 + 8);
            v16 = *(_DWORD *)(v14 + 4);
            v17 = ((unint64_t)*(unsigned int *)(v14 + 16) >> 2) & 1;
          }
          else
          {
            v15 = 0;
            v16 = 0;
            v17 = 1;
          }
          v42 = v12;
          v43 = v10 | (v13 << 32);
          v41.m_string.m_impl.m_ptr = v12;
          *((_QWORD *)&v41 + 1) = v43;
          v18 = (unsigned __int8 *)(v16 | (v17 << 32));
          v44[0] = v15;
          v44[1] = v18;
          if (WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int16 **)&v41, v44))
          {
LABEL_25:
            if ((!*(_BYTE *)(a1 + 72)
               || WTF::equal(*(WTF **)(v8 + 24), *(const WTF::StringImpl **)(a1 + 64), v6))
              && (!*(_BYTE *)(a1 + 81) || *(unsigned __int8 *)(v8 + 57) == *(unsigned __int8 *)(a1 + 80))
              && (!*(_BYTE *)(a1 + 83) || *(unsigned __int8 *)(v8 + 58) == *(unsigned __int8 *)(a1 + 82)))
            {
              WebKit::toURL((WebKit *)&v41, (const WebCore::Cookie *)v8);
              v26 = WebKit::WebExtensionContext::permissionState(v3, &v41, 0, 3);
              m_ptr = v41.m_string.m_impl.m_ptr;
              v41.m_string.m_impl.m_ptr = 0;
              if (m_ptr)
              {
                if (*(_DWORD *)m_ptr == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v25);
                else
                  *(_DWORD *)m_ptr -= 2;
              }
              if ((v26 & 0xFFFFFFFE) == 2)
              {
                v41.m_string.m_impl.m_ptr = *(StringImpl **)(*(_QWORD *)(a1 + 88) + 24);
                *((_BYTE *)&v41 + 8) = 1;
                WebCore::Cookie::Cookie((WebCore::Cookie *)&v41.m_userEnd, (const WebCore::Cookie *)v8);
                v38 = *(_OWORD *)&v41.m_string.m_impl.m_ptr;
                WebCore::Cookie::Cookie((uint64_t)v39, (uint64_t *)&v41.m_userEnd);
                v40 = 1;
                WebCore::Cookie::~Cookie((WebCore::Cookie *)&v41.m_userEnd, v28);
                if (v40)
                {
                  *(_OWORD *)&v41.m_string.m_impl.m_ptr = v38;
                  WebCore::Cookie::Cookie((uint64_t)&v41.m_userEnd, v39);
                  if (HIDWORD(v37) == (_DWORD)v37)
                  {
                    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v36, (unint64_t)&v41);
                  }
                  else
                  {
                    v30 = (_OWORD *)(v36 + 152 * HIDWORD(v37));
                    *v30 = *(_OWORD *)&v41.m_string.m_impl.m_ptr;
                    WebCore::Cookie::Cookie((uint64_t)(v30 + 1), (uint64_t *)&v41.m_userEnd);
                    ++HIDWORD(v37);
                  }
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)&v41.m_userEnd, v29);
                  if (v40)
                    WebCore::Cookie::~Cookie((WebCore::Cookie *)v39, v31);
                }
              }
            }
            goto LABEL_42;
          }
          if ((v16 & 0x80000000) != 0 || (v19 = __OFADD__(v16, 1), v20 = v16 + 1, v19))
          {
LABEL_49:
            __break(0xC471u);
            goto LABEL_51;
          }
          if (v17)
          {
            WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
            v21 = v41.m_string.m_impl.m_ptr;
            if (!v41.m_string.m_impl.m_ptr)
              goto LABEL_49;
            *((_BYTE *)v41.m_string.m_impl.m_ptr + 20) = 46;
            *(_DWORD *)v21 = 2;
            *((_DWORD *)v21 + 1) = v20;
            *((_QWORD *)v21 + 1) = (char *)v21 + 20;
            *((_DWORD *)v21 + 4) = 4;
            v41.m_string.m_impl.m_ptr = (StringImpl *)v15;
            *((_QWORD *)&v41 + 1) = v18;
            WTF::StringView::getCharacters<unsigned char>(&v41, (char *)v21 + 21);
          }
          else
          {
            if (v20 > 0x7FFFFFEF)
              goto LABEL_49;
            WTF::tryFastCompactMalloc((WTF *)(2 * v20 + 20));
            v21 = v41.m_string.m_impl.m_ptr;
            if (!v41.m_string.m_impl.m_ptr)
              goto LABEL_49;
            *((_WORD *)v41.m_string.m_impl.m_ptr + 10) = 46;
            *(_DWORD *)v21 = 2;
            *((_DWORD *)v21 + 1) = v20;
            *((_QWORD *)v21 + 1) = (char *)v21 + 20;
            *((_DWORD *)v21 + 4) = 0;
            v41.m_string.m_impl.m_ptr = (StringImpl *)v15;
            *((_QWORD *)&v41 + 1) = v18;
            WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v41, (char *)v21 + 22);
          }
          v22 = WTF::StringView::endsWith();
          v24 = v22;
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v21, v23);
            if (v24)
              goto LABEL_25;
          }
          else
          {
            *(_DWORD *)v21 -= 2;
            if (v22)
              goto LABEL_25;
          }
        }
LABEL_42:
        v8 += 136;
      }
    }
  }
  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, HIDWORD(v37));
  *(_QWORD *)&v38 = v36;
  v32 = v37;
  v36 = 0;
  v37 = 0;
  *((_QWORD *)&v38 + 1) = v32;
  LODWORD(v39[0]) = 0;
  v33 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 16))(v33, &v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (LODWORD(v39[0]) != -1)
    ((void (*)(URL *, __int128 *))off_1E34F6EF0[LODWORD(v39[0])])(&v41, &v38);
  return WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v36, v34);
}

void sub_1977144AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31)
{
  WebCore::Cookie *v31;
  WebCore::Cookie *v32;
  void *v34;

  WebCore::Cookie::~Cookie(v32, a2);
  if (a30)
    WebCore::Cookie::~Cookie(v31, v34);
  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a9, v34);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F6F58;
  WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F6F58;
  WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(_QWORD *a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  _QWORD *v9;

  v2 = a1[1];
  v3 = (CFTypeRef *)a1[3];
  v4 = a1[17];
  a1[17] = 0;
  if (v3)
    CFRetain(v3[1]);
  v5 = (WTF::StringImpl *)a1[4];
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34F6F80;
  v6[1] = v4;
  v6[2] = v3;
  if (v5)
    *(_DWORD *)v5 += 2;
  v6[3] = v5;
  v9 = v6;
  WebKit::WebExtensionContext::fetchCookies(v2, v3, (uint64_t)(a1 + 5), (uint64_t)(a1 + 10), (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

void sub_1977146D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F6F80;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F6F80;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EE4callES1B_(uint64_t a1, __int128 **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  _Unwind_Exception *v11;
  __int128 v12;
  _BYTE v13[136];
  char v14;
  char v15;
  char v16[8];
  _QWORD v17[19];
  char v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    if (v5 != 1)
    {
      v11 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v19 != -1)
        ((void (*)(__int128 *, uint64_t))off_1E34F6F00[v19])(&v12, v2);
      _Unwind_Resume(v11);
    }
    v6 = (uint64_t *)*a2;
    if (*a2)
      *(_DWORD *)v6 += 2;
    v17[0] = v6;
    v19 = 1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v16);
    goto LABEL_6;
  }
  if (!*((_DWORD *)a2 + 3))
  {
    LOBYTE(v17[0]) = 0;
    v18 = 0;
    v19 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v16);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v19 != -1)
      ((void (*)(__int128 *, _QWORD *))off_1E34F6F00[v19])(&v12, v17);
    return;
  }
  v8 = (uint64_t *)*a2;
  v12 = **a2;
  WebCore::Cookie::Cookie((uint64_t)v13, v8 + 2);
  v14 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v17, (uint64_t)&v12);
  v19 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 16))(v9, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v19 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F6F00[v19])(&v15, v17);
  v19 = -1;
  if (v14)
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v13, v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34F6FA8;
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 13), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11), v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), v5);
  v7 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34F6FA8;
  v3 = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 104, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 88, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 72, v5);
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree(a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  WebKit::WebExtensionContext::fetchCookies(*(_QWORD *)(a1 + 8), *(CFTypeRef **)(a1 + 24), a1 + 32, a1 + 72, (uint64_t *)(a1 + 128));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E34F6FD0;
  v3 = a1[28];
  a1[28] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 11), a2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E34F6FD0;
  v3 = a1[28];
  a1[28] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 11), a2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  NSString *v2;
  API::HTTPCookieStore *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17[2];
  WTF::StringImpl *v18[17];
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21[19];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebExtensionContext::permissionState(*(_QWORD *)(a1 + 8), (URL *)(a1 + 32), 0, 3) & 0xFFFFFFFE) == 2)
  {
    v3 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(a1 + 24));
    WebCore::Cookie::Cookie((WebCore::Cookie *)v18, (const WebCore::Cookie *)(a1 + 88));
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17, (const WebCore::Cookie *)v18, 1uLL);
    v4 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    v5 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 24);
    v19 = v4;
    v20 = v5;
    WebCore::Cookie::Cookie((WebCore::Cookie *)v21, (const WebCore::Cookie *)(a1 + 88));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0xA0);
    *v6 = off_1E34F6FF8;
    v7 = v19;
    v19 = 0;
    v6[1] = v7;
    v6[2] = v20;
    WebCore::Cookie::Cookie((uint64_t)(v6 + 3), v21);
    v16 = v6;
    API::HTTPCookieStore::setCookies((uint64_t)v3, v17, (uint64_t *)&v16);
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v21, v8);
    v10 = v19;
    v19 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v9);
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v18, v11);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.set()"), 0, CFSTR("host permissions are missing or not granted"), v2, v18);
    v12 = v18[0];
    v18[0] = 0;
    v20 = v12;
    v22 = 1;
    v13 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v22 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34F6F00[v22])(v17, &v20);
    v22 = -1;
    v15 = v18[0];
    v18[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void sub_197714F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51)
{
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  if (a51 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6F00[a51])(&a11, v51);
  a51 = -1;
  v55 = a13;
  a13 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34F6FF8;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 3), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEED0Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E34F6FF8;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 3), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEE4callEv(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5[17];
  __int128 v6;
  _BYTE v7[136];
  char v8;
  char v9;
  _BYTE v10[8];
  _BYTE v11[160];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = a1[2];
  BYTE8(v4) = 1;
  WebCore::Cookie::Cookie((uint64_t)v5, a1 + 3);
  v6 = v4;
  WebCore::Cookie::Cookie((uint64_t)v7, v5);
  v8 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v11, (uint64_t)&v6);
  v12 = 0;
  v2 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6F00[v12])(&v9, v11);
  v12 = -1;
  if (v8)
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v7, v3);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)v5, v3);
}

void sub_197715230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  WebCore::Cookie *v48;
  WebCore::Cookie *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  uint64_t v55;

  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v55 = *(unsigned int *)(v52 - 64);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34F6F00[v55])(v52 - 233, v50);
  *(_DWORD *)(v52 - 64) = -1;
  if (a48)
    WebCore::Cookie::~Cookie(v49, v54);
  WebCore::Cookie::~Cookie(v48, v54);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E34F7020;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34F7020;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  CFTypeRef *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 40;
  if ((WebKit::WebExtensionContext::permissionState(v2, (URL *)(a1 + 40), 0, 3) & 0xFFFFFFFE) == 2)
  {
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    LOBYTE(v18) = 0;
    v19 = 0;
    v20 = 0;
    std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v14, (WTF::StringImpl *)(a1 + 32));
    v5 = *(CFTypeRef **)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v5)
      CFRetain(v5[1]);
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = &off_1E34F7048;
    *((_QWORD *)v7 + 1) = v6;
    *((_QWORD *)v7 + 2) = v5;
    v12 = v7;
    WebKit::WebExtensionContext::fetchCookies(v2, v5, v3, (uint64_t)&v14, (uint64_t *)&v12);
    result = v12;
    if (v12)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
    if (v19)
    {
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v17)
    {
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if ((_BYTE)v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
LABEL_22:
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("cookies.remove()"), 0, CFSTR("host permissions are missing or not granted"), v4, &v12);
    v10 = (uint64_t)v12;
    v12 = 0;
    v15 = v10;
    v21 = 1;
    v11 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v21 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F6F00[v21])(&v13, &v15);
    v21 = -1;
    result = v12;
    v12 = 0;
    if (result)
      goto LABEL_22;
  }
  return result;
}

void sub_197715644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11, __int16 a12, char a13, char a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (a36 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6F00[a36])(&a14, v36);
  a36 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v39);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7048;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7048;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EE4callES1B_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  API::HTTPCookieStore *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _Unwind_Exception *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20[17];
  char v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      v16 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v22 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E34F6F00[v22])(&v17, v2);
      _Unwind_Resume(v16);
    }
    v6 = *(uint64_t **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    *(_QWORD *)&v19 = v6;
    v22 = 1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v18);
    goto LABEL_6;
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    LOBYTE(v19) = 0;
    v21 = 0;
    v22 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v18);
LABEL_6:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v22 != -1)
      return ((uint64_t (*)(uint64_t *, __int128 *))off_1E34F6F00[v22])(&v17, &v19);
    return result;
  }
  v9 = *(uint64_t **)a2;
  v10 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(a1 + 16));
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v18 = v11;
  v19 = *(_OWORD *)v9;
  WebCore::Cookie::Cookie((WebCore::Cookie *)v20, (const WebCore::Cookie *)(v9 + 2));
  v12 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)v12 = off_1E34F7070;
  v13 = v18;
  v18 = 0;
  *(_QWORD *)(v12 + 8) = v13;
  *(_OWORD *)(v12 + 16) = v19;
  WebCore::Cookie::Cookie(v12 + 32, v20);
  v17 = v12;
  API::HTTPCookieStore::deleteCookie((uint64_t)v10, v9 + 2, &v17);
  v15 = v17;
  v17 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)v20, v14);
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34F7070;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 4), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEED0Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E34F7070;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 4), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  _BYTE v5[136];
  char v6;
  char v7;
  _BYTE v8[8];
  _BYTE v9[160];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 16);
  WebCore::Cookie::Cookie((uint64_t)v5, (uint64_t *)(a1 + 32));
  v6 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v9, (uint64_t)&v4);
  v10 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v10 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F6F00[v10])(&v7, v9);
  v10 = -1;
  if (v6)
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v5, v3);
}

void sub_197715C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  WebCore::Cookie *v55;
  uint64_t v56;
  uint64_t v57;
  void *v59;

  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  if (a55 != -1)
    ((void (*)(char *, uint64_t))off_1E34F6F00[a55])(&a33, v56);
  a55 = -1;
  if (a28)
    WebCore::Cookie::~Cookie(v55, v59);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7098;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7098;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t *result;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v1 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v1, 5, 0, (uint64_t *)&v16);
  v3 = *(_QWORD *)(v1 + 64);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v16);
    v5 = v4;
    v6 = v2;
    v7 = v16 ? &v16[*((unsigned int *)v16 - 1)] : 0;
    if (v7 != v4)
    {
      do
      {
        v8 = *v5;
        v9 = *(_QWORD *)(v1 + 32);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 1571;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v19 = (IPC::Encoder *)v10;
        LOBYTE(v17) = 0;
        v18 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v19, 0, (uint64_t)&v17, 1);
        if (v18)
        {
          v11 = v17;
          v17 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        v12 = v19;
        v19 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v2);
          WTF::fastFree(v13, v14);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_16;
        }
        v5 = v6;
LABEL_16:
        ;
      }
      while (v5 != v7);
    }
  }
  result = v16;
  if (v16)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v16, v2);
  return result;
}

void sub_197715E88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v9, CFSTR("declarativeNetRequest"));
  if ((WebKit::WebExtensionContext::permissionState((uint64_t)this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    v4 = 1;
  }
  else
  {
    MEMORY[0x19AEABCC8](&v8, CFSTR("declarativeNetRequestWithHostAccess"));
    v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

void sub_197715FD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestGetEnabledRulesets(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v3 = (_QWORD *)(a1 + 640);
  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 640));
  v5 = v4;
  v7 = v6;
  if (*v3)
    v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  else
    v8 = 0;
  if ((_QWORD *)v8 != v4)
  {
    do
    {
      v9 = HIDWORD(v16);
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v15, (unint64_t)v5);
      }
      else
      {
        v10 = v15;
        v11 = (_DWORD *)*v5;
        if (*v5)
          *v11 += 2;
        *(_QWORD *)(v10 + 8 * v9) = v11;
        HIDWORD(v16) = v9 + 1;
      }
      while (++v5 != v7)
      {
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_13;
      }
      v5 = v7;
LABEL_13:
      ;
    }
    while (v5 != (_QWORD *)v8);
  }
  v12 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v13);
}

void sub_19771613C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRulesetStateFromStorage(WebKit::WebExtensionContext *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  void *v6;
  CFTypeRef v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebExtension *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  int v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29[3];
  WTF::StringImpl *v30;
  CFTypeRef cf[3];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)((char *)this + 640);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 80);
  if (v4)
  {
    *v3 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v5);

  WebKit::objectForKey<NSDictionary>((id *)cf, CFSTR("DeclarativeNetRequestRulesetState"), 1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = cf[0];
  cf[0] = 0;
  if (v7)
    CFRelease(v7);
  if (objc_msgSend(v6, "count"))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (!v9)
      goto LABEL_32;
    v10 = *(_QWORD *)v34;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v34 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v11);
        v13 = (WebKit::WebExtension *)*((_QWORD *)this + 7);
        MEMORY[0x19AEABCC8](v29, v12);
        WebKit::WebExtension::declarativeNetRequestRuleset(v13, v29, (uint64_t)cf);
        v15 = v29[0];
        v29[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (v32)
        {
          WebKit::objectForKey<NSNumber>(v8, v12);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "BOOLValue");

          if (v17)
          {
            MEMORY[0x19AEABCC8](&v30, v12);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v3, &v30, v18, (uint64_t)v29);
            v19 = v30;
            v30 = 0;
            if (!v19)
              goto LABEL_27;
            goto LABEL_24;
          }
          MEMORY[0x19AEABCC8](v29, v12);
          v21 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v3, v29, v20);
          v14 = (WTF::StringImpl *)v21;
          if (*v3)
          {
            v22 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
            if ((WTF::StringImpl **)v22 != v21)
            {
LABEL_21:
              if ((WTF::StringImpl **)v22 != v21)
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v3, v21);
            }
          }
          else if (v21)
          {
            v22 = 0;
            goto LABEL_21;
          }
          v19 = v29[0];
          v29[0] = 0;
          if (!v19)
            goto LABEL_27;
LABEL_24:
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
LABEL_27:
        std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v14);
        ++v11;
      }
      while (v9 != v11);
      v23 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      v9 = v23;
      if (!v23)
      {
LABEL_32:

        goto LABEL_38;
      }
    }
  }
  v24 = *((_QWORD *)this + 7);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)v24);
  v26 = *(unsigned int *)(v24 + 84);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(v24 + 72);
    v28 = 24 * v26;
    do
    {
      if (*(_BYTE *)(v27 + 8))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v3, (WTF::StringImpl **)v27, v25, (uint64_t)cf);
      v27 += 24;
      v28 -= 24;
    }
    while (v28);
  }
LABEL_38:

}

void sub_197716444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  void *v13;

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::clearDeclarativeNetRequestRulesetState(WebKit::WebExtensionContext *this)
{
  void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **result;

  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", CFSTR("DeclarativeNetRequestRulesetState"));

  result = (WTF::StringImpl **)*((_QWORD *)this + 80);
  if (result)
  {
    *((_QWORD *)this + 80) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  return result;
}

void sub_197716584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers(uint64_t a1, WebKit::WebExtension **a2, const WTF::StringImpl **a3, unsigned int a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  WTF::StringImpl *v16;
  __CFString *v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  _DWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  if (a4)
  {
    v7 = 8 * a4;
    while (1)
    {
      WebKit::WebExtension::declarativeNetRequestRuleset(a2[7], a3, (uint64_t)&v20);
      if (!v23)
        break;
      v9 = HIDWORD(v25);
      if (HIDWORD(v25) == (_DWORD)v25)
      {
        WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>((uint64_t)&v24, (unint64_t)&v20);
      }
      else
      {
        v10 = v24;
        v11 = v20;
        if (v20)
          *v20 += 2;
        *(_QWORD *)(v10 + 24 * v9) = v11;
        *(_BYTE *)(v10 + 24 * v9 + 8) = v21;
        v12 = v22;
        if (v22)
          *v22 += 2;
        *(_QWORD *)(v10 + 24 * v9 + 16) = v12;
        HIDWORD(v25) = v9 + 1;
      }
      std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v8);
      ++a3;
      v7 -= 8;
      if (!v7)
      {
        v13 = v24;
        v14 = v25;
        goto LABEL_14;
      }
    }
    if (*a3)
      v15 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E351F1B8;
    v18 = (__CFString *)v15;
    WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), 0, CFSTR("Failed to apply rules. Invalid ruleset id: %@."), (NSString *)&v18, &v19);
    *(_QWORD *)a1 = v19;
    *(_DWORD *)(a1 + 16) = 1;
    v19 = 0;

    std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v16);
  }
  else
  {
    v13 = 0;
    v14 = 0;
LABEL_14:
    v24 = 0;
    v25 = 0;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
}

void sub_197716710(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);

  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v4);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

void WebKit::toWebExtensionError<NSString * {__strong}>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v6;
  uint64_t v7;

  WebKit::toErrorString(a1, a2, a3, a4, *a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v7, v6);
  *a5 = v7;
  v7 = 0;

}

void sub_19771679C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  const WTF::StringImpl **v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  void *v16;
  __CFString *v17;
  _BYTE v18[24];
  _BYTE v19[32];

  v7 = a4;
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(const WTF::StringImpl ***)a2;
    v10 = (_QWORD *)(a1 + 640);
    v11 = 8 * v8;
    while (1)
    {
      WebKit::WebExtension::declarativeNetRequestRuleset(*(WebKit::WebExtension **)(a1 + 56), v9, (uint64_t)v19);
      if (v19[24])
        break;
LABEL_13:
      std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v12);
      ++v9;
      v11 -= 8;
      if (!v11)
        goto LABEL_18;
    }
    if ((_DWORD)a3)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 640), v9, v13, (uint64_t)v18);
LABEL_10:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (*v9)
        v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v17 = &stru_1E351F1B8;
      objc_msgSend(v7, "setObject:forKey:", v16, v17);

      goto LABEL_13;
    }
    v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 640), v9, v13);
    if (*v10)
    {
      v15 = *v10 + 8 * *(unsigned int *)(*v10 - 4);
      if ((WTF::StringImpl **)v15 == v14)
        goto LABEL_10;
    }
    else
    {
      if (!v14)
        goto LABEL_10;
      v15 = 0;
    }
    if ((WTF::StringImpl **)v15 != v14)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 640), v14);
    goto LABEL_10;
  }
LABEL_18:

}

void sub_1977168F8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSString *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  CFTypeRef v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  _BYTE v42[16];
  CFTypeRef cf;
  _QWORD v44[2];
  int v45;
  _QWORD v46[2];
  int v47;
  WTF::StringImpl *v48;

  v5 = *(_DWORD *)(a2 + 12);
  if (!(v5 | *(_DWORD *)(a3 + 12)))
  {
    LOBYTE(v38) = 0;
    LOBYTE(v39) = 0;
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v39)
    {
      v8 = v38;
      v38 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    return;
  }
  WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers((uint64_t)v46, (WebKit::WebExtension **)a1, *(const WTF::StringImpl ***)a2, v5);
  if (!v47)
  {
    WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers((uint64_t)v44, (WebKit::WebExtension **)a1, *(const WTF::StringImpl ***)a3, *(_DWORD *)(a3 + 12));
    if (v45)
    {
      if (v45 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_48;
      }
      v17 = (WTF::StringImpl *)v44[0];
      if (v44[0])
        *(_DWORD *)v44[0] += 2;
      v38 = v17;
      LOBYTE(v39) = 1;
      v18 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v38);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 640);
      if (v19)
        v19 = *(unsigned int *)(v19 - 12);
      if (v19 - *(unsigned int *)(a3 + 12) + (unint64_t)*(unsigned int *)(a2 + 12) < 0x33)
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(a1, a3, 0, v24);
        WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(a1, a2, 1, v24);
        v38 = (WTF::StringImpl *)a1;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        v25 = *a4;
        *a4 = 0;
        v39 = a1;
        v40 = v25;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v41, a2);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v42, a3);
        v26 = v24;
        v27 = v26;
        cf = v26;
        if (v26)
          CFRetain(v26);

        v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x48);
        *(_QWORD *)v28 = off_1E34F7220;
        *((_QWORD *)v28 + 1) = v38;
        *((_QWORD *)v28 + 2) = v39;
        v29 = v40;
        v39 = 0;
        v40 = 0;
        *((_QWORD *)v28 + 3) = v29;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28 + 32, (uint64_t)v41);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28 + 48, (uint64_t)v42);
        v30 = (void *)cf;
        cf = 0;
        v31 = v30;

        *((_QWORD *)v28 + 8) = v31;
        v48 = v28;
        WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)a1, (uint64_t *)&v48);
        v33 = (uint64_t)v48;
        v48 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        v34 = cf;
        cf = 0;
        if (v34)
          CFRelease(v34);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v32);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v35);
        v36 = v40;
        v40 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        v37 = v39;
        v39 = 0;
        if (v37)
          CFRelease(*(CFTypeRef *)(v37 + 8));

        goto LABEL_41;
      }
      WebKit::toErrorString((WebKit *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), 0, CFSTR("The number of enabled static rulesets exceeds the limit. Only %lu rulesets can be enabled at once."), v16, 50);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](&v48, v20);
      v21 = v48;
      v48 = 0;

      v38 = v21;
      LOBYTE(v39) = 1;
      v18 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v38);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if ((_BYTE)v39)
    {
      v23 = v38;
      v38 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
LABEL_41:
    if (v45 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F70B0[v45])(&v38, v44);
    goto LABEL_43;
  }
  if (v47 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_48:
    __break(1u);
    return;
  }
  v12 = (WTF::StringImpl *)v46[0];
  if (v46[0])
    *(_DWORD *)v46[0] += 2;
  v38 = v12;
  LOBYTE(v39) = 1;
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if ((_BYTE)v39)
  {
    v15 = v38;
    v38 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
LABEL_43:
  if (v47 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F70B0[v47])(&v38, v46);
}

void sub_197716D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, int a20,int a21,char a22,uint64_t a23,int a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v30);
  v31 = a12;
  a12 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = a11;
  a11 = 0;
  if (v32)
    CFRelease(*(CFTypeRef *)(v32 + 8));

  if (a20 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F70B0[a20])(&a10, &a18);
  if (a24 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F70B0[a24])(&a10, &a22);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText(WebKit::WebExtensionContext *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v1);

  WebKit::objectForKey<NSNumber>((id *)&cf, CFSTR("DisplayBlockedResourceCountAsBadgeText"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_19771703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSNumber>(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSNumber>(v4, (uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1977170DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::incrementActionCountForTab(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, uint64_t a3)
{
  WebKit::WebExtensionAction *v6;
  WebKit::WebExtensionAction *v7;

  if (WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText(this))
  {
    WebKit::WebExtensionContext::getOrCreateAction(this, a2, (uint64_t *)&v7);
    v6 = v7;
    WebKit::WebExtensionAction::incrementBlockedResourceCount(v7, a3);
    if (v6)
      CFRelease(*((CFTypeRef *)v6 + 1));
  }
}

void sub_197717160(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::declarativeNetRequestDisplayActionCountAsBadgeText(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  if (WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText((WebKit::WebExtensionContext *)a1) == (_DWORD)a2)
  {
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v27);
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 6);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v7, CFSTR("DisplayBlockedResourceCountAsBadgeText"));

    WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)a1);
    if ((a2 & 1) == 0)
    {
      v11 = a1 + 54;
      v27 = (WTF::StringImpl *)(a1 + 54);
      v28 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 54);
      v29 = v12;
      v13 = a1[54];
      if (v13)
      {
        v14 = *(unsigned int *)(v13 - 4);
        v15 = v13 + 16 * v14;
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      v30 = v15;
      v31 = v13 + 16 * v14;
      v32 = 0;
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v27);
      v16 = *v11;
      if (*v11)
      {
        v17 = *(unsigned int *)(v16 - 4);
        v18 = (_QWORD *)(v16 + 16 * v17);
      }
      else
      {
        v18 = 0;
        v17 = 0;
      }
      v21 = a1 + 54;
      v22 = v18;
      v23 = v18;
      v24 = v18;
      v25 = v16 + 16 * v17;
      v26 = 0;
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v21);
      while (v28 != v22)
      {
        v19 = v28[1];
        *(_QWORD *)(v19 + 112) = 0;
        WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)v19);
        v20 = v28;
        do
        {
          v20 += 2;
          v28 = v20;
        }
        while (v20 != v29 && (unint64_t)(*v20 + 1) <= 1);
        ++v32;
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v27);
        ++*((_DWORD *)v27 + 2);
      }
    }
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v27);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if ((_BYTE)v28)
  {
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19771737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v18);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::declarativeNetRequestIncrementActionCount(uint64_t *a1, uint64_t a2, uint64_t *a3, double a4)
{
  NSString *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionTab *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WebKit::WebExtensionTab *v18;

  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v18);
  if (v18)
  {
    WebKit::WebExtensionContext::incrementActionCountForTab((WebKit::WebExtensionContext *)a1, v18, (uint64_t)a4);
    LOBYTE(v16) = 0;
    v17 = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v17)
      goto LABEL_14;
    v10 = v16;
    v16 = 0;
    if (!v10)
      goto LABEL_14;
    goto LABEL_11;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.setExtensionActionOptions()"), 0, CFSTR("tab not found"), v7, &v15);
  v11 = v15;
  v15 = 0;
  v16 = v11;
  v17 = 1;
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v17)
  {
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
LABEL_11:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_14:
  result = v18;
  v18 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197717534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v11;
  NSString *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t result;
  NSString *v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  char *v34;
  __int128 v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _QWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  URL *v55;
  void *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  URL *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WebKit::WebExtensionTab *v71;

  v11 = a3;
  if (a3)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v71);
    if (!v71)
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.getMatchedRules()"), 0, CFSTR("tab not found"), v12, &v69);
      v13 = v69;
      v69 = 0;
      v60 = v13;
      LODWORD(v62) = 1;
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v60);
LABEL_50:
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if ((_DWORD)v62 != -1)
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34F70C0[v62])(&v67, &v60);
      LODWORD(v62) = -1;
      v59 = v69;
      v69 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v58);
        else
          *(_DWORD *)v59 -= 2;
      }
      goto LABEL_56;
    }
  }
  else
  {
    v71 = 0;
  }
  MEMORY[0x19AEABCC8](&v60, CFSTR("declarativeNetRequestFeedback"));
  v16 = WebKit::WebExtensionContext::permissionState(a1, &v60, 0, 2) & 0xFFFFFFFE;
  result = (uint64_t)v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (v16 != 2)
  {
    result = WebKit::WebExtensionTab::extensionHasTemporaryPermission(v71);
    if ((result & 1) == 0)
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.getMatchedRules()"), 0, CFSTR("the 'activeTab' permission has not been granted by the user for the tab"), v18, &v69);
      v57 = v69;
      v69 = 0;
      v60 = v57;
      LODWORD(v62) = 1;
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v60);
      goto LABEL_50;
    }
  }
  if (a5)
    v19 = *(double *)&a4;
  else
    v19 = NAN;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v20 = *(unsigned int *)(a1 + 620);
  v60 = 0;
  LODWORD(v61) = 0;
  HIDWORD(v61) = v20;
  if ((_DWORD)v20)
  {
    if (v20 >= 0x4924925)
    {
      __break(0xC471u);
      return result;
    }
    v21 = 56 * v20;
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v20));
    v23 = (unint64_t)v22;
    LODWORD(v61) = v21 / 0x38;
    v60 = v22;
    v24 = *(_DWORD *)(a1 + 620);
    if (v24)
    {
      v25 = *(_QWORD *)(a1 + 608);
      v26 = v25 + 56 * v24;
      v27 = v22;
      do
      {
        v28 = *(_DWORD **)v25;
        if (*(_QWORD *)v25)
          *v28 += 2;
        *(_QWORD *)v27 = v28;
        v29 = *(_OWORD *)(v25 + 8);
        *(_OWORD *)((char *)v27 + 24) = *(_OWORD *)(v25 + 24);
        *(_OWORD *)((char *)v27 + 8) = v29;
        *(_OWORD *)((char *)v27 + 40) = *(_OWORD *)(v25 + 40);
        v25 += 56;
        v27 = (WTF::StringImpl *)((char *)v27 + 56);
      }
      while (v25 != v26);
    }
    if (HIDWORD(v61))
    {
      v30 = 56 * HIDWORD(v61);
      do
      {
        if ((!v11 || *(_QWORD *)(v23 + 48) == a2) && *(double *)(v23 + 40) > v19)
        {
          v31 = HIDWORD(v70);
          if (HIDWORD(v70) == (_DWORD)v70)
          {
            WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>((uint64_t)&v69, v23);
          }
          else
          {
            v32 = v69;
            v33 = *(_DWORD **)v23;
            if (*(_QWORD *)v23)
              *v33 += 2;
            v34 = (char *)v32 + 56 * v31;
            *(_QWORD *)v34 = v33;
            v35 = *(_OWORD *)(v23 + 8);
            *(_OWORD *)(v34 + 24) = *(_OWORD *)(v23 + 24);
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 40) = *(_OWORD *)(v23 + 40);
            ++HIDWORD(v70);
          }
          v36 = HIDWORD(v68);
          if (HIDWORD(v68) == (_DWORD)v68)
          {
            v37 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, v23);
            v36 = HIDWORD(v68);
            v38 = v67;
            v39 = *(_DWORD **)v37;
            if (*(_QWORD *)v37)
              *v39 += 2;
            v40 = (_QWORD *)(v38 + 40 * v36);
            *v40 = v39;
            v41 = v40 + 1;
          }
          else
          {
            v42 = v67;
            v43 = *(_DWORD **)v23;
            if (*(_QWORD *)v23)
              *v43 += 2;
            *(_QWORD *)(v42 + 40 * v36) = v43;
            v41 = (_OWORD *)(v42 + 40 * v36 + 8);
            v37 = v23;
          }
          v44 = *(_OWORD *)(v37 + 24);
          *v41 = *(_OWORD *)(v37 + 8);
          v41[1] = v44;
          HIDWORD(v68) = v36 + 1;
        }
        v23 += 56;
        v30 -= 56;
      }
      while (v30);
    }
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v15);
  v66 = 0;
  v60 = (WTF::StringImpl *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v61 = a1;
  v62 = v69;
  v45 = v70;
  v69 = 0;
  v70 = 0;
  v63 = v45;
  v46 = *a6;
  *a6 = 0;
  v64 = v46;
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v47 = off_1E34F7248;
  v47[1] = v60;
  v47[2] = v61;
  v48 = v62;
  v61 = 0;
  v62 = 0;
  v47[3] = v48;
  v47[4] = v63;
  v49 = v64;
  v63 = 0;
  v64 = 0;
  v47[5] = v49;
  v65 = v47;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, &v67, &v66, (uint64_t *)&v65, 1, 1);
  v51 = (uint64_t)v65;
  v65 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = v64;
  v64 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v50);
  v54 = v61;
  v61 = 0;
  if (v54)
    CFRelease(*(CFTypeRef *)(v54 + 8));
  v55 = v66;
  v66 = 0;
  if (v55)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v55);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v53);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v56);
LABEL_56:
  result = (uint64_t)v71;
  v71 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void sub_197717ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a11 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F70C0[a11])(&a16, &a9);
  a11 = -1;
  v23 = a18;
  a18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = a20;
  a20 = 0;
  if (v24)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v24);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionDeclarativeNetRequestSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  _BOOL8 v7;
  _WKWebExtensionDeclarativeNetRequestSQLiteStore *v8;
  const void **v9;

  v2 = (void *)*((_QWORD *)this + 78);
  if (!v2)
  {
    v3 = [_WKWebExtensionDeclarativeNetRequestSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
    {
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v6 = *((_QWORD *)this + 5);
      if (v6)
        v7 = *(_DWORD *)(v6 + 4) == 0;
      else
        v7 = 1;
    }
    else
    {
      v7 = 1;
      v5 = &stru_1E351F1B8;
    }
    v8 = -[_WKWebExtensionDeclarativeNetRequestSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v4, 0, v5, v7);
    v9 = (const void **)((char *)this + 624);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(v9, v8);

    v2 = (void *)*v9;
  }
  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_197717CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197717D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionDeclarativeNetRequestSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  _WKWebExtensionDeclarativeNetRequestSQLiteStore *v6;
  const void **v7;

  v2 = (void *)*((_QWORD *)this + 79);
  if (!v2)
  {
    v3 = [_WKWebExtensionDeclarativeNetRequestSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v6 = -[_WKWebExtensionDeclarativeNetRequestSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v4, 1, v5, 1);
    v7 = (const void **)((char *)this + 632);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(v7, v6);

    v2 = (void *)*v7;
  }
  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_197717E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v18 = *a7;
  *a7 = 0;
  v26 = v13;
  v19 = v14;
  v20 = v15;
  v21 = v16;
  v22 = v17;
  v23 = malloc_type_malloc(0x60uLL, 0x10E00402B785905uLL);
  *v23 = MEMORY[0x1E0C809A0];
  v23[1] = 50331650;
  v23[2] = WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSUUID *,NSString *)#1}::__invoke;
  v23[3] = &WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v23[4] = a1;
  v23[5] = a1;
  v23[6] = v18;
  v23[7] = v26;
  v23[8] = v19;
  v23[9] = v20;
  v23[10] = v21;
  v23[11] = v22;
  v24 = _Block_copy(v23);

  v25 = _Block_copy(v24);
  objc_msgSend(v26, "createSavepointWithCompletionHandler:", v25);

}

void sub_197717FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(CFTypeRef *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  id v8;

  WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore((WebKit::WebExtensionContext *)a1);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  CFRetain(a1[1]);
  v4 = *a2;
  *a2 = 0;
  v5 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v5[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v5[4] = a1;
  v5[5] = v4;
  v6 = _Block_copy(v5);

  v7 = _Block_copy(v6);
  objc_msgSend(v8, "getRulesWithCompletionHandler:", v7);

}

void sub_197718110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateDynamicRules(WebKit::WebExtensionContext *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  NSMutableArray *v16;
  objc_object *v17;
  void *v18;
  CFTypeRef v19;
  __CFString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  CFTypeRef cf;
  char v41;

  v8 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a3 + 12));
  v9 = v8;
  cf = v8;
  if (v8)
    CFRetain(v8);

  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)a3;
    v12 = 8 * v10;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v13 = (WTF *)objc_claimAutoreleasedReturnValue();
      v14 = *v11;
      if (WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(*((_QWORD *)a1 + 82), *v11))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = 0;
      }
      v16 = v15;
      WTF::addUnlessNil(v13, v16, v17);

      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  if (*a2)
    v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v20 = &stru_1E351F1B8;
  WebKit::parseJSON(v20, 1, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v21);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = (void *)v22;
  v24 = (void *)MEMORY[0x1E0C9AA60];
  if (v22)
    v24 = (void *)v22;
  v25 = v24;

  if (objc_msgSend(v18, "count") || objc_msgSend(v25, "count"))
  {
    v26 = *((_QWORD *)a1 + 82);
    if (v26)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = objc_msgSend(v25, "count");
    v29 = objc_msgSend(v18, "count");
    v31 = *((_QWORD *)a1 + 81);
    if (v31)
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
    if (v28 + v27 - v29 + (unint64_t)v31 < 0x7531)
    {
      WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(a1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage((uint64_t)a1, v36, CFSTR("dynamic"), CFSTR("declarativeNetRequest.updateDynamicRules()"), v25, v18, a4);

      goto LABEL_36;
    }
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.updateDynamicRules()"), 0, CFSTR("Failed to add dynamic rules. Maximum number of dynamic and session rules exceeded."), v30, &v39);
    v32 = v39;
    v39 = 0;
    cf = v32;
    v41 = 1;
    v33 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v33 + 16))(v33, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (v41)
    {
      v35 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    v38 = v39;
    v39 = 0;
    if (v38)
      goto LABEL_33;
  }
  else
  {
    LOBYTE(cf) = 0;
    v41 = 0;
    v37 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v37 + 16))(v37, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (v41)
    {
      v38 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v38)
      {
LABEL_33:
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
  }
LABEL_36:

}

void sub_1977184A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *cf, char a12)
{
  void *v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 && cf)
  {
    if (*(_DWORD *)cf == 2)
      WTF::StringImpl::destroy(cf, v16);
    else
      *(_DWORD *)cf -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(CFTypeRef *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  id v8;

  WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  CFRetain(a1[1]);
  v4 = *a2;
  *a2 = 0;
  v5 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v5[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v5[4] = a1;
  v5[5] = v4;
  v6 = _Block_copy(v5);

  v7 = _Block_copy(v6);
  objc_msgSend(v8, "getRulesWithCompletionHandler:", v7);

}

void sub_197718690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateSessionRules(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  NSMutableArray *v16;
  objc_object *v17;
  void *v18;
  CFTypeRef v19;
  __CFString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  CFTypeRef cf;
  char v41;

  v8 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a3 + 12));
  v9 = v8;
  cf = v8;
  if (v8)
    CFRetain(v8);

  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)a3;
    v12 = 8 * v10;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v13 = (WTF *)objc_claimAutoreleasedReturnValue();
      v14 = *v11;
      if (WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(a1[81], *v11))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = 0;
      }
      v16 = v15;
      WTF::addUnlessNil(v13, v16, v17);

      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  if (*a2)
    v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v20 = &stru_1E351F1B8;
  WebKit::parseJSON(v20, 1, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v21);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = (void *)v22;
  v24 = (void *)MEMORY[0x1E0C9AA60];
  if (v22)
    v24 = (void *)v22;
  v25 = v24;

  if (objc_msgSend(v18, "count") || objc_msgSend(v25, "count"))
  {
    v26 = a1[81];
    if (v26)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = objc_msgSend(v25, "count");
    v29 = objc_msgSend(v18, "count");
    v31 = a1[82];
    if (v31)
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
    if (v28 + v27 - v29 + (unint64_t)v31 < 0x7531)
    {
      WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage((uint64_t)a1, v36, CFSTR("session"), CFSTR("declarativeNetRequest.updateSessionRules()"), v25, v18, a4);

      goto LABEL_36;
    }
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.updateSessionRules()"), 0, CFSTR("Failed to add session rules. Maximum number of dynamic and session rules exceeded."), v30, &v39);
    v32 = v39;
    v39 = 0;
    cf = v32;
    v41 = 1;
    v33 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v33 + 16))(v33, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (v41)
    {
      v35 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    v38 = v39;
    v39 = 0;
    if (v38)
      goto LABEL_33;
  }
  else
  {
    LOBYTE(cf) = 0;
    v41 = 0;
    v37 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v37 + 16))(v37, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (v41)
    {
      v38 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v38)
      {
LABEL_33:
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
  }
LABEL_36:

}

void sub_197718A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *cf, char a12)
{
  void *v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 && cf)
  {
    if (*(_DWORD *)cf == 2)
      WTF::StringImpl::destroy(cf, v16);
    else
      *(_DWORD *)cf -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit12WebExtension32DeclarativeNetRequestRulesetDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit12WebExtension32DeclarativeNetRequestRulesetDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSUUID *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  NSString *v5;
  uint64_t v6;
  NSObject *v7;
  NSString *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  id v28;
  WTF::StringImpl *v29;
  _BYTE buf[12];
  __int16 v31;
  __CFString *v32;
  __int16 v33;
  NSString *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(v6 + 112))
        v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v26 = &stru_1E351F1B8;
      *(_DWORD *)buf = 138543875;
      *(_QWORD *)&buf[4] = v25;
      v31 = 2113;
      v32 = v26;
      v33 = 2114;
      v34 = v5;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Unable to create %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", buf, 0x20u);

    }
  }
  if (-[NSString length](v5, "length"))
  {
    WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 72), 0, v5, v8, &v29);
    v9 = v29;
    v29 = 0;
    *(_QWORD *)buf = v9;
    buf[8] = 1;
    v10 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (buf[8])
    {
      v12 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v11);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    v13 = *(void **)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 80);
    v27 = *(_QWORD *)(a1 + 88);
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v16 = *(_QWORD *)(a1 + 48);
    v15 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    v17 = v15;
    v18 = *(id *)(a1 + 64);
    v19 = *(id *)(a1 + 72);
    v20 = v28;
    v21 = malloc_type_malloc(0x58uLL, 0x10E00408974A7C2uLL);
    *v21 = MEMORY[0x1E0C809A0];
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v21[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v21[4] = v6;
    v21[5] = v6;
    v21[6] = v16;
    v21[7] = v17;
    v21[8] = v18;
    v21[9] = v19;
    v21[10] = v20;
    v22 = _Block_copy(v21);

    v23 = _Block_copy(v22);
    objc_msgSend(v13, "updateRulesByRemovingIDs:addRules:completionHandler:", v27, v14, v23);

  }
}

void sub_197718EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  _BYTE v24[12];
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(v4 + 112))
        v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v23 = &stru_1E351F1B8;
      *(_DWORD *)v24 = 138543875;
      *(_QWORD *)&v24[4] = v22;
      v25 = 2113;
      v26 = v23;
      v27 = 2114;
      v28 = v3;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Unable to update %{public}@ rules for extension %{private}@. Error: %{public}@", v24, 0x20u);

    }
  }
  if (objc_msgSend(v3, "length"))
  {
    v6 = *(void **)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 80);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    v9 = *(id *)(a1 + 64);
    v10 = *(id *)(a1 + 72);
    v11 = v3;
    v12 = malloc_type_malloc(0x50uLL, 0x10E0040064FDA6EuLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v12[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::descriptor;
    v12[4] = v4;
    v12[5] = v4;
    v12[6] = v8;
    v12[7] = v9;
    v12[8] = v10;
    v12[9] = v11;
    v13 = _Block_copy(v12);

    v14 = _Block_copy(v13);
    objc_msgSend(v6, "rollbackToSavepoint:completionHandler:", v7, v14);

  }
  else
  {
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v15 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    v16 = *(id *)(a1 + 64);
    v17 = *(id *)(a1 + 72);
    v18 = *(id *)(a1 + 56);
    v19 = *(id *)(a1 + 80);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v20 = off_1E34F7140;
    v20[1] = v4;
    v20[2] = v4;
    v20[3] = v15;
    v20[4] = v16;
    v20[5] = v17;
    v20[6] = v18;
    v20[7] = v19;
    *(_QWORD *)v24 = v20;
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v4, (uint64_t *)v24);
    v21 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }

}

void sub_197719260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  __CFString *v13;
  WTF::StringImpl *v14;
  _BYTE buf[12];
  __int16 v16;
  __CFString *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(v5 + 112))
        v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v13 = &stru_1E351F1B8;
      *(_DWORD *)buf = 138543875;
      *(_QWORD *)&buf[4] = v12;
      v16 = 2113;
      v17 = v13;
      v18 = 2114;
      v19 = v4;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Unable to rollback to %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", buf, 0x20u);

    }
  }
  WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 64), 0, *(NSString **)(a1 + 72), v3, &v14);
  v7 = v14;
  v14 = 0;
  *(_QWORD *)buf = v7;
  buf[8] = 1;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (buf[8])
  {
    v10 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }

}

void sub_197719544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34F7140;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34F7140;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *aBlock;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = v7;
  if ((a2 & 1) != 0)
  {
    v10 = malloc_type_malloc(0x40uLL, 0x10E0040ECA617C0uLL);
    *v10 = MEMORY[0x1E0C809A0];
    v10[1] = 50331650;
    v10[2] = _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPvS2_E_8__invokeEST_S2_;
    v10[3] = &_ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_E10descriptor;
    v10[4] = v4;
    v10[5] = v4;
    v10[6] = v8;
    v10[7] = v9;
    aBlock = _Block_copy(v10);

    v11 = _Block_copy(aBlock);
    objc_msgSend(v5, "commitSavepoint:completionHandler:", v6, v11);
  }
  else
  {
    v12 = *(id *)(a1 + 40);
    v13 = malloc_type_malloc(0x48uLL, 0x10E0040CF659DFAuLL);
    *v13 = MEMORY[0x1E0C809A0];
    v13[1] = 50331650;
    v13[2] = _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPvS2_E_8__invokeEST_S2_;
    v13[3] = &_ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_E10descriptor;
    v13[4] = v4;
    v13[5] = v4;
    v13[6] = v8;
    v13[7] = v9;
    v13[8] = v12;
    aBlock = _Block_copy(v13);

    v11 = _Block_copy(aBlock);
    objc_msgSend(v5, "rollbackToSavepoint:completionHandler:", v6, v11);
  }

}

void sub_197719830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPKvE_8__invokeESU_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPvS2_E_8__invokeEST_S2_(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  _BYTE v12[12];
  __int16 v13;
  __CFString *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(v4 + 112))
        v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      *(_DWORD *)v12 = 138543875;
      *(_QWORD *)&v12[4] = v10;
      v13 = 2113;
      v14 = v11;
      v15 = 2114;
      v16 = v3;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Unable to rollback to %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", v12, 0x20u);

    }
  }
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = *(id *)(a1 + 64);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34F7188;
  v8[1] = v6;
  v8[2] = v7;
  *(_QWORD *)v12 = v8;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v4, (uint64_t *)v12);
  v9 = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

}

void sub_197719A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEED1Ev(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34F7188;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEED0Ev(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34F7188;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEE4callEb(uint64_t a1, char a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;

  if ((a2 & 1) != 0)
  {
    LOBYTE(v12) = 0;
    v13 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v12);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (!v13)
      return result;
    result = v12;
    v12 = 0;
    if (!result)
      return result;
LABEL_11:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    *(_DWORD *)result -= 2;
    return result;
  }
  WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 16), 0, CFSTR("unable to load declarativeNetRequest rules"), a4, &v11);
  v8 = v11;
  v11 = 0;
  v12 = v8;
  v13 = 1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v13)
  {
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  result = v11;
  v11 = 0;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_197719C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPKvE_8__invokeESU_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPvS2_E_8__invokeEST_S2_(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __CFString *v10;
  _BYTE v11[12];
  __int16 v12;
  __CFString *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = a1[4];
    v5 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = a1[7];
      if (*(_QWORD *)(v4 + 112))
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E351F1B8;
      *(_DWORD *)v11 = 138543875;
      *(_QWORD *)&v11[4] = v9;
      v12 = 2113;
      v13 = v10;
      v14 = 2114;
      v15 = v3;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Unable to commit %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", v11, 0x20u);

    }
  }
  v11[0] = 0;
  v11[8] = 0;
  v6 = a1[6];
  a1[6] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[8])
  {
    v8 = *(WTF::StringImpl **)v11;
    *(_QWORD *)v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }

}

void sub_197719E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.getDynamicRules()"), 0, v7, v6, &v17);
    v8 = v17;
    v17 = 0;
    v18 = v8;
    v19 = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v19 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F71E0[v19])(&v20, &v18);
    v19 = -1;
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    WebKit::encodeJSONString(v5, 1, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v17, v12);
    v13 = v17;
    v17 = 0;
    v18 = v13;
    v19 = 0;
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v19 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F71E0[v19])(&v20, &v18);
    v19 = -1;
    v16 = v17;
    v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }

  }
}

void sub_19771A0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F71E0[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v22);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.getSessionRules()"), 0, v7, v6, &v17);
    v8 = v17;
    v17 = 0;
    v18 = v8;
    v19 = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v19 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F71E0[v19])(&v20, &v18);
    v19 = -1;
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    WebKit::encodeJSONString(v5, 1, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v17, v12);
    v13 = v17;
    v17 = 0;
    v18 = v13;
    v19 = 0;
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v19 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F71E0[v19])(&v20, &v18);
    v19 = -1;
    v16 = v17;
    v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }

  }
}

void sub_19771A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F71E0[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v22);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1E34F7220;
  v3 = (const void *)a1[8];
  a1[8] = 0;
  if (v3)
    CFRelease(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *a1, void *a2)
{
  const void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7220;
  v3 = (const void *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, v4);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(a1, v5);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t *v3;
  id v4;
  void *v5;
  void *v6;
  CFTypeRef v7;
  void *v8;
  void *v9;
  void *v10;
  NSString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  CFTypeRef cf;
  char v23;

  v3 = (uint64_t *)a1[1];
  if (a2)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 8);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<__IOHIDDevice *>::get(v3 + 6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v5);

    WebKit::objectForKey<NSDictionary>((id *)&cf, CFSTR("DeclarativeNetRequestRulesetState"), 1, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
    if (v6)
    {
      v8 = (void *)objc_msgSend(v6, "mutableCopy");
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v16 = v8;
    objc_msgSend(v8, "addEntriesFromDictionary:", v4);
    WTF::RetainPtr<__IOHIDDevice *>::get(v3 + 6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "copy");
    objc_msgSend(v17, "setObject:forKey:", v18, CFSTR("DeclarativeNetRequestRulesetState"));

    WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v3);
    LOBYTE(cf) = 0;
    v23 = 0;
    v19 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v19 + 16))(v19, &cf);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v23)
      return result;
    result = (WTF::StringImpl *)cf;
    cf = 0;
    if (!result)
      return result;
LABEL_16:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    *(_DWORD *)result -= 2;
    return result;
  }
  WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets((uint64_t)v3, (uint64_t)(a1 + 6), 1, v9);

  WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets((uint64_t)v3, (uint64_t)(a1 + 4), 0, v10);

  WebKit::toWebExtensionError<>((WebKit *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), 0, CFSTR("Failed to apply rules."), v11, &v21);
  v12 = v21;
  v21 = 0;
  cf = v12;
  v23 = 1;
  v13 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v13 + 16))(v13, &cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v23)
  {
    v15 = (WTF::StringImpl *)cf;
    cf = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  result = v21;
  v21 = 0;
  if (result)
    goto LABEL_16;
  return result;
}

void sub_19771A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf, char a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;

  v3 = WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v6 += 2;
  v7 = v5 + 56 * v4;
  *(_QWORD *)v7 = v6;
  v8 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 8) = v8;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34F7248;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34F7248;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v18 = 0;
  v19 = 0;
  v3 = *(unsigned int *)(result + 36);
  if (!(_DWORD)v3)
    goto LABEL_17;
  if (v3 >= 0x4924925)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v19) = 56 * (int)v3 / 0x38u;
  v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v3));
  v4 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(v1 + 24);
    v6 = 56 * v4;
    do
    {
      if ((WebKit::WebExtensionContext::permissionState(v2, (URL *)v5, 0, 3) & 0xFFFFFFFE) == 2)
      {
        v7 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5)
          *(_DWORD *)v7 += 2;
        v24 = *(_OWORD *)(v5 + 40);
        v8 = *(_OWORD *)(v5 + 8);
        v9 = *(_OWORD *)(v5 + 24);
        v20 = v7;
        v21 = v8;
        v22 = v9;
        v23 = v24;
        v10 = HIDWORD(v19);
        if (HIDWORD(v19) == (_DWORD)v19)
        {
          WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v18, (unint64_t)&v20);
        }
        else
        {
          v12 = v18;
          WTF::URL::URL((uint64_t)v18 + 56 * HIDWORD(v19), (uint64_t *)&v20);
          *(_OWORD *)((char *)v12 + 56 * v10 + 40) = v23;
          ++HIDWORD(v19);
        }
        v13 = v20;
        v20 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      v5 += 56;
      v6 -= 56;
    }
    while (v6);
    v14 = HIDWORD(v19);
  }
  else
  {
LABEL_17:
    v14 = 0;
  }
  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v18, v14);
  v20 = v18;
  v15 = v19;
  v18 = 0;
  v19 = 0;
  *(_QWORD *)&v21 = v15;
  DWORD2(v21) = 0;
  v16 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, &v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (DWORD2(v21) != -1)
    ((void (*)(__int128 *, WTF::StringImpl **))off_1E34F70C0[DWORD2(v21)])(&v24, &v20);
  return WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v17);
}

void sub_19771AC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a14 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F70C0[a14])(&a19, &a12);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  double v7;
  _BOOL8 v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(double *)(a1 + 8 * v6);
  if (*(_QWORD *)&v7 == a2)
    return 1;
  v9 = 1;
  do
  {
    v8 = v7 != INFINITY;
    if (v7 == INFINITY)
      break;
    v6 = (v6 + v9) & v2;
    v7 = *(double *)(a1 + 8 * v6);
    ++v9;
  }
  while (*(_QWORD *)&v7 != a2);
  return v8;
}

void WebKit::WebExtensionContext::addListener(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  void *v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint8_t v33;
  uint8_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int i;
  unsigned int v63;
  unsigned int **v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t buf[8];
  unsigned int **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::webPage(a2, &v79);
  if (!v79)
    return;
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 56))
    && WebKit::WebExtensionContext::isBackgroundPage(a1, a2))
  {
    v9 = (uint64_t *)(a1 + 272);
    v10 = *(_QWORD *)(a1 + 272);
    if (v10
      || (WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(a1 + 272), 0), (v10 = *v9) != 0))
    {
      v11 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    v14 = v11 & (v13 ^ HIWORD(v13));
    v15 = (_QWORD *)(v10 + 8 * v14);
    v16 = *(unsigned __int8 *)v15;
    if (v16 != 255)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != a3)
      {
        if (v16 == 254)
          v17 = v15;
        v14 = (v14 + v18) & v11;
        v15 = (_QWORD *)(v10 + 8 * v14);
        v16 = *(unsigned __int8 *)v15;
        ++v18;
        if (v16 == 255)
        {
          if (v17)
          {
            *(_BYTE *)v17 = -1;
            *((_DWORD *)v17 + 1) = 0;
            --*(_DWORD *)(*v9 - 16);
            v15 = v17;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_25;
    }
LABEL_16:
    *(_BYTE *)v15 = a3;
    *((_DWORD *)v15 + 1) = 0;
    v19 = *v9;
    if (*v9)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v9;
    if (*v9)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_25;
    }
    else if (3 * v24 > 4 * v23)
    {
LABEL_25:
      ++*((_DWORD *)v15 + 1);
      goto LABEL_26;
    }
    v15 = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(a1 + 272), (unsigned __int8 *)v15);
    goto LABEL_25;
  }
LABEL_26:
  buf[0] = a3;
  buf[1] = a4;
  v25 = (uint64_t *)(a1 + 280);
  v26 = *(_QWORD *)(a1 + 280);
  if (v26
    || (WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand((uint64_t *)(a1 + 280), 0), (v26 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v29 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(buf) & v27;
  v30 = (unsigned __int8 *)(v26 + 24 * v29);
  v31 = *v30;
  v32 = v30[1];
  v33 = buf[0];
  v34 = buf[1];
  if (v31 != 255 || v32 != 255)
  {
    v35 = 0;
    v36 = 1;
    while (v31 != buf[0] || v32 != buf[1])
    {
      if (v31 == 254)
        v35 = v30;
      v29 = (v29 + v36) & v27;
      v30 = (unsigned __int8 *)(v26 + 24 * v29);
      v31 = *v30;
      v32 = v30[1];
      ++v36;
      if (v31 == 255 && v32 == 255)
      {
        if (v35)
        {
          *(_WORD *)v35 = -1;
          *((_QWORD *)v35 + 1) = 0;
          *((_QWORD *)v35 + 2) = 0;
          --*(_DWORD *)(*v25 - 16);
          v33 = buf[0];
          v34 = buf[1];
          v30 = v35;
        }
        goto LABEL_40;
      }
    }
    goto LABEL_51;
  }
LABEL_40:
  *v30 = v33;
  v30[1] = v34;
  v37 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = 0;
  if (v37)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v37, v28);
  *((_QWORD *)v30 + 2) = 0;
  v38 = *v25;
  if (*v25)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v25;
  if (*v25)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (3 * v43 <= 4 * v42)
LABEL_50:
    v30 = (unsigned __int8 *)WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand(v25, v30);
LABEL_51:
  v44 = v79;
  v45 = (uint64_t *)(v30 + 8);
  v46 = *((_DWORD *)v30 + 4);
  v47 = *((_DWORD *)v30 + 5);
  *((_DWORD *)v30 + 4) = v46 + 1;
  if (v46 > v47)
    WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(v30 + 8), v28);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v44 + 24), v44 + 16);
  v49 = *(unsigned int **)(v44 + 24);
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 + 1, v49));
  do
    v51 = __ldaxr(v49);
  while (__stlxr(v51 + 1, v49));
  if (v49)
  {
    do
    {
      v52 = __ldaxr(v49);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v49));
    if (!v53)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v48);
    }
  }
  v54 = *v45;
  if (*v45
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v45, 0), (v54 = *v45) != 0))
  {
    v55 = 0;
    v56 = *(_DWORD *)(v54 - 8);
  }
  else
  {
    v56 = 0;
    v55 = 1;
  }
  v57 = 0;
  v58 = ((unint64_t)v49 + ~((_QWORD)v49 << 32)) ^ (((unint64_t)v49 + ~((_QWORD)v49 << 32)) >> 22);
  v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
  v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
  v61 = (v60 >> 31) ^ v60;
  for (i = 1; ; ++i)
  {
    v63 = v61 & v56;
    v64 = (unsigned int **)(v54 + 16 * v63);
    v65 = *v64;
    if (*v64 != (unsigned int *)-1)
      break;
    v57 = v54 + 16 * v63;
LABEL_69:
    v61 = i + v63;
  }
  if (!v65)
  {
    if (v57)
    {
      *(_QWORD *)v57 = 0;
      *(_QWORD *)(v57 + 8) = 0;
      --*(_DWORD *)(*v45 - 16);
      *(_QWORD *)v57 = v49;
    }
    else
    {
      *v64 = v49;
      v57 = v54 + 16 * v63;
    }
    *(_DWORD *)(v57 + 8) = 0;
    v70 = *v45;
    if (*v45)
      v71 = *(_DWORD *)(v70 - 12) + 1;
    else
      v71 = 1;
    *(_DWORD *)(v70 - 12) = v71;
    v72 = *v45;
    if (*v45)
      v73 = *(_DWORD *)(v72 - 12);
    else
      v73 = 0;
    v74 = (*(_DWORD *)(v72 - 16) + v73);
    v75 = *(unsigned int *)(v72 - 4);
    if (v75 > 0x400)
    {
      if (v75 <= 2 * v74)
      {
LABEL_88:
        v57 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v45, (unsigned int **)v57);
        v72 = *v45;
        if (*v45)
          v75 = *(unsigned int *)(v72 - 4);
        else
          v75 = 0;
      }
    }
    else if (3 * v75 <= 4 * v74)
    {
      goto LABEL_88;
    }
    v67 = v72 + 16 * v75;
    v64 = (unsigned int **)v57;
    goto LABEL_94;
  }
  if (v65 != v49)
    goto LABEL_69;
  if ((v55 & 1) != 0)
    v66 = 0;
  else
    v66 = *(unsigned int *)(v54 - 4);
  v67 = v54 + 16 * v66;
  if (v49)
  {
    do
    {
      v68 = __ldaxr(v49);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v49));
    if (!v69)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, (void *)v57);
    }
  }
LABEL_94:
  *(_QWORD *)buf = v45;
  v81 = v64;
  v82 = v67;
  v76 = *v45;
  if (*v45)
  {
    v77 = *(unsigned int *)(v76 - 4);
    v78 = v76 + 16 * v77;
  }
  else
  {
    v78 = 0;
    v77 = 0;
  }
  v83 = v78;
  v84 = v76 + 16 * v77;
  v85 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(buf);
  ++*((_DWORD *)v81 + 2);
  if (v79)
    CFRelease(*(CFTypeRef *)(v79 + 8));
}

void sub_19771B490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::removeListener(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  void *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint8_t buf[8];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::webPage(a2, &v87);
  if (v87)
  {
    v10 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    if (!WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 56)))
    {
      v11 = !WebKit::WebExtensionContext::isBackgroundPage(a1, a2);
      if (!a5)
        LOBYTE(v11) = 1;
      if (!v11)
      {
        v12 = 0;
        v13 = (uint64_t *)(a1 + 272);
        v14 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
        v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
        v16 = v15 ^ HIWORD(v15);
        do
        {
          v17 = *v13;
          if (*v13)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = v18 & v16;
            v20 = *(unsigned __int8 *)(v17 + 8 * v19);
            if (v20 != a3)
            {
              v21 = 1;
              while (v20 != 255)
              {
                v19 = ((_DWORD)v19 + v21) & v18;
                v20 = *(unsigned __int8 *)(v17 + 8 * v19);
                ++v21;
                if (v20 == a3)
                  goto LABEL_15;
              }
              v19 = *(unsigned int *)(v17 - 4);
            }
LABEL_15:
            if (v19 != *(_DWORD *)(v17 - 4))
            {
              v22 = v17 + 8 * v19;
              if (*(_DWORD *)(v22 + 4) == 1)
              {
                *(_BYTE *)v22 = -2;
                ++*(_DWORD *)(*v13 - 16);
                v23 = *v13;
                if (*v13)
                  v24 = *(_DWORD *)(v23 - 12) - 1;
                else
                  v24 = -1;
                *(_DWORD *)(v23 - 12) = v24;
                v25 = *v13;
                if (*v13)
                {
                  v26 = 6 * *(_DWORD *)(v25 - 12);
                  v27 = *(_DWORD *)(v25 - 4);
                  if (v26 < v27 && v27 >= 9)
                    WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash((uint64_t *)(a1 + 272), v27 >> 1, 0);
                }
              }
              else
              {
                --*(_DWORD *)(v22 + 4);
              }
            }
          }
          ++v12;
        }
        while (v12 != a5);
      }
    }
    buf[0] = a3;
    buf[1] = a4;
    v29 = *(_QWORD *)(a1 + 280);
    if (!v29)
      goto LABEL_123;
    v30 = *(_DWORD *)(v29 - 8);
    v31 = (uint64_t *)(a1 + 280);
    v33 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(buf) & v30;
    v34 = (unsigned __int8 *)(v29 + 24 * v33);
    v35 = *v34;
    v36 = v34[1];
    if (v35 == buf[0] && v36 == buf[1])
    {
LABEL_43:
      v40 = *v31;
      if (!*v31)
      {
LABEL_48:
        if ((unsigned __int8 *)v40 != v34)
        {
          if (a5)
          {
            v41 = 0;
            v42 = (uint64_t *)(v34 + 8);
            while (1)
            {
              v43 = *(_QWORD *)(v87 + 24);
              ++*((_DWORD *)v34 + 4);
              if (!v43)
                break;
              v44 = *v42;
              if (!*(_QWORD *)(v43 + 8))
                goto LABEL_60;
              if (v44)
              {
                v45 = *(_DWORD *)(v44 - 8);
                v46 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
                v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
                v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
                v49 = v45 & ((v48 >> 31) ^ v48);
                for (i = 1; ; ++i)
                {
                  v51 = v49;
                  v52 = *(_QWORD *)(v44 + 16 * v49);
                  if (v52 != -1)
                  {
                    if (!v52)
                    {
                      v56 = *(unsigned int *)(v44 - 4);
                      v57 = v44 + 16 * v56;
                      v58 = v57;
                      goto LABEL_67;
                    }
                    if (v52 == v43)
                      break;
                  }
                  v49 = (v51 + i) & v45;
                }
                v57 = v44 + 16 * v51;
                v56 = *(unsigned int *)(v44 - 4);
                v58 = v44 + 16 * v56;
LABEL_67:
                v88 = v34 + 8;
                v89 = v57;
                v54 = v44 + 16 * v56;
                v90 = v58;
              }
              else
              {
                v54 = 0;
                v56 = 0;
                v88 = v34 + 8;
                v89 = 0;
                v90 = 0;
              }
              v55 = v44 + 16 * v56;
LABEL_69:
              v91 = v54;
              v92 = v55;
              v93 = 0;
              WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v88);
              if (v44)
              {
                v59 = *(unsigned int *)(v44 - 4);
                v60 = v44 + 16 * v59;
              }
              else
              {
                v60 = 0;
                v59 = 0;
              }
              *(_QWORD *)buf = v34 + 8;
              v95 = v60;
              v96 = v60;
              v97 = v60;
              v98 = v44 + 16 * v59;
              v99 = 0;
              WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(buf);
              v61 = (_QWORD *)v89;
              if (v89 != v95)
              {
                if (*(_DWORD *)(v89 + 8) == 1)
                {
                  if (v44)
                  {
                    v62 = v44 + 16 * *(unsigned int *)(v44 - 4);
                    if (v62 == v89)
                    {
LABEL_94:
                      v73 = *((_DWORD *)v34 + 4);
                      v74 = *((_DWORD *)v34 + 5);
                      *((_DWORD *)v34 + 4) = v73 + 1;
                      if (v73 > v74)
                        WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(v34 + 8), v32);
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    v62 = 0;
                  }
                  if (v62 != v89)
                  {
                    v63 = *(unsigned int **)v89;
                    *(_QWORD *)v89 = 0;
                    if (v63)
                    {
                      do
                      {
                        v66 = __ldaxr(v63);
                        v67 = v66 - 1;
                      }
                      while (__stlxr(v67, v63));
                      if (!v67)
                      {
                        atomic_store(1u, v63);
                        v68 = v61;
                        WTF::fastFree((WTF *)v63, v32);
                        v61 = v68;
                      }
                    }
                    *v61 = -1;
                    ++*(_DWORD *)(*v42 - 16);
                    v64 = *v42;
                    if (*v42)
                      v65 = *(_DWORD *)(v64 - 12) - 1;
                    else
                      v65 = -1;
                    *(_DWORD *)(v64 - 12) = v65;
                    v69 = *v42;
                    if (*v42)
                    {
                      v70 = 6 * *(_DWORD *)(v69 - 12);
                      v71 = *(_DWORD *)(v69 - 4);
                      if (v70 < v71 && v71 >= 9)
                        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v34 + 1, v71 >> 1, 0);
                    }
                  }
                  goto LABEL_94;
                }
                --*(_DWORD *)(v89 + 8);
              }
LABEL_96:
              if (++v41 == a5)
                goto LABEL_97;
            }
            v44 = *v42;
LABEL_60:
            if (v44)
            {
              v53 = *(unsigned int *)(v44 - 4);
              v54 = v44 + 16 * v53;
            }
            else
            {
              v54 = 0;
              v53 = 0;
            }
            v88 = v34 + 8;
            v89 = v54;
            v55 = v44 + 16 * v53;
            v90 = v54;
            goto LABEL_69;
          }
LABEL_97:
          v76 = (uint64_t *)(v34 + 8);
          v75 = *((_QWORD *)v34 + 1);
          if (!v75 || !*(_DWORD *)(v75 - 12))
            goto LABEL_111;
          WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin((_QWORD **)v34 + 1, (uint64_t)buf);
          v77 = *v76;
          if (*v76)
          {
            v78 = *(unsigned int *)(v77 - 4);
            v79 = v77 + 16 * v78;
          }
          else
          {
            v79 = 0;
            v78 = 0;
          }
          v88 = v34 + 8;
          v89 = v79;
          v90 = v79;
          v91 = v79;
          v92 = v77 + 16 * v78;
          v93 = 0;
          WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v88);
          if (v95 == v89)
          {
            v75 = *v76;
            if (*v76)
            {
              *v76 = 0;
              WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v75, v32);
              v75 = *((_QWORD *)v34 + 1);
              *((_DWORD *)v34 + 4) = 0;
              if (v75)
              {
                v80 = *(_DWORD *)(v75 - 12);
                if (v80 > 0x7FFFFFFE)
                  v80 = 0x7FFFFFFF;
              }
              else
              {
                v80 = 0;
              }
            }
            else
            {
              v80 = 0;
              *((_DWORD *)v34 + 4) = 0;
            }
            *((_DWORD *)v34 + 5) = 2 * v80;
LABEL_111:
            v81 = (unsigned __int8 *)*v31;
            if (!*v31 || (v81 += 24 * *((unsigned int *)v81 - 1), v81 != v34))
            {
              if (v81 != v34)
              {
                *v34 = -2;
                if (v75)
                  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v75, v32);
                ++*(_DWORD *)(*v31 - 16);
                v82 = *v31;
                if (*v31)
                  v83 = *(_DWORD *)(v82 - 12) - 1;
                else
                  v83 = -1;
                *(_DWORD *)(v82 - 12) = v83;
                v84 = *v31;
                if (*v31)
                {
                  v85 = 6 * *(_DWORD *)(v84 - 12);
                  v86 = *(_DWORD *)(v84 - 4);
                  if (v85 < v86 && v86 >= 9)
                    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(v31, v86 >> 1, 0);
                }
              }
            }
          }
        }
LABEL_123:
        if (v87)
          CFRelease(*(CFTypeRef *)(v87 + 8));
        return;
      }
    }
    else
    {
      v38 = 1;
      while (v35 != 255 || v36 != 255)
      {
        v33 = (v33 + v38) & v30;
        v34 = (unsigned __int8 *)(v29 + 24 * v33);
        v35 = *v34;
        v36 = v34[1];
        ++v38;
        if (v35 == buf[0] && v36 == buf[1])
          goto LABEL_43;
      }
      v40 = *v31;
      if (!*v31)
        goto LABEL_123;
      v34 = (unsigned __int8 *)(v40 + 24 * *(unsigned int *)(v40 - 4));
    }
    v40 += 24 * *(unsigned int *)(v40 - 4);
    goto LABEL_48;
  }
}

void sub_19771BCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (unsigned __int8 *)v6;
    do
    {
      if (*v12 <= 0xFDu)
      {
        v13 = (_QWORD *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(a1, v12);
        *v13 = *(_QWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 8;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(8 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_DWORD *)(v2 + 20);
    do
    {
      *((_BYTE *)v5 - 4) = -1;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(v2 + 8 * v7) != 255);
  return v2 + 8 * v7;
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_WORD *)v10 - 4) = -1;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned __int8 *)(v4 + 24 * v11);
      v14 = *v13;
      if (v14 != 254)
      {
        if (v14 == 255 && v13[1] == 255)
        {
          v15 = *(_QWORD *)(v4 + 24 * v11 + 8);
          if (v15)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, v8);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash((unsigned __int8 *)(v4 + 24 * v11));
          v19 = 0;
          do
          {
            do
            {
              v20 = v18 & v17;
              v21 = (unsigned __int8 *)(v16 + 24 * (v18 & v17));
              v18 = ++v19 + (v18 & v17);
            }
            while (*v21 != 255);
          }
          while (v21[1] != 255);
          v22 = v16 + 24 * v20;
          v25 = *(_QWORD *)(v22 + 8);
          v24 = (_QWORD *)(v22 + 8);
          v23 = v25;
          if (v25)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v23, v8);
          *(_WORD *)v21 = *(_WORD *)v13;
          v26 = v4 + 24 * v11;
          *v24 = 0;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *v24 = v27;
          *(_QWORD *)(v16 + 24 * v20 + 16) = *(_QWORD *)(v26 + 16);
          v28 = *(_QWORD *)(v26 + 8);
          if (v28)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v8);
          if (v13 == a3)
            v12 = v16 + 24 * v20;
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_23;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v9 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v10 = *(_DWORD *)(v9 - 12);
      else
        v10 = 0;
      *(_DWORD *)(v9 - 12) = v10 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v11 = *(_DWORD *)(v3 - 4);
      v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        v16 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12)
            goto LABEL_34;
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_32:
          v19 = (double)v12;
          v20 = (double)v18;
          v21 = 0.604166667;
          goto LABEL_35;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400)
          goto LABEL_32;
LABEL_34:
        v19 = (double)v12;
        v20 = (double)v18;
        v21 = 0.416666667;
LABEL_35:
        if (v20 * v21 <= v19)
          LODWORD(v18) = 2 * v18;
        if (v18 <= 8)
          v22 = 8;
        else
          v22 = v18;
        result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v14 = 0;
          goto LABEL_27;
        }
LABEL_24:
        v14 = *(_DWORD *)(v3 - 12);
        v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_23:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_24;
    }
  }
  v14 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_27:
  v15 = v14;
LABEL_28:
  *(_DWORD *)(v2 + 12) = 2 * v15;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WebKit::WebExtensionContext::extensionIsAllowedIncognitoAccess(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 249);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_19771C4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::isMenusMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v9, CFSTR("contextMenus"));
  if ((WebKit::WebExtensionContext::permissionState((uint64_t)this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    v4 = 1;
  }
  else
  {
    MEMORY[0x19AEABCC8](&v8, CFSTR("menus"));
    v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

void sub_19771C5DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusCreate(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF **v10;
  NSString *v11;
  NSString *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionMenuItem *v14;
  const WTF::StringImpl *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit::WebExtensionMenuItem *result;
  WTF **v24;
  int i;
  uint64_t v26;
  WTF **v27;
  WTF *v28;
  void *v29;
  void *v30;
  WTF::StringImpl *v31;
  WebKit::WebExtensionMenuItem *v32;
  uint64_t v33;
  int v34;
  char *v35;
  WebKit::WebExtensionMenuItem *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;

  if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 664), (WTF::StringImpl **)a2, a3))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.create()"), 0, CFSTR("identifier is already used"), v7, &v50);
    v8 = v50;
    v50 = 0;
    v51 = v8;
    v52 = 1;
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v51);
    goto LABEL_14;
  }
  v10 = (WTF **)(a1 + 664);
  if (*(_BYTE *)(a2 + 16))
  {
    if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*v10, (WTF::StringImpl **)(a2 + 8), v6) & 1) == 0)
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.create()"), 0, CFSTR("parent menu item not found"), v11, &v50);
      v20 = v50;
      v50 = 0;
      v51 = v20;
      v52 = 1;
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v51);
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v52)
      {
        v22 = v51;
        v51 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      result = v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v21);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    if (*(_BYTE *)(a2 + 16)
      && WebKit::isAncestorOrSelf((WebKit *)a1, (WTF **)(a2 + 8), (const WTF::StringImpl **)a2, (const WTF::String *)v11))
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.create()"), 0, CFSTR("parent menu item cannot be another ancestor"), v12, &v50);
      v13 = v50;
      v50 = 0;
      v51 = v13;
      v52 = 1;
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v51);
      goto LABEL_14;
    }
  }
  v14 = (WebKit::WebExtensionMenuItem *)WTF::fastMalloc((WTF *)0x78);
  WebKit::WebExtensionMenuItem::WebExtensionMenuItem(v14, (WebKit::WebExtensionContext *)a1, (const WebKit::WebExtensionMenuItemParameters *)a2);
  v50 = v14;
  v16 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 664)),
        (v16 = *v10) != 0))
  {
    v17 = *((_DWORD *)v16 - 2);
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v49 = (uint64_t *)(a1 + 664);
  if (v18 >= 0x100)
    v19 = v18 >> 8;
  else
    v19 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  v24 = 0;
  for (i = 1; ; ++i)
  {
    v26 = v19 & v17;
    v27 = (WTF **)((char *)v16 + 16 * v26);
    v28 = *v27;
    if (*v27 == (WTF *)-1)
    {
      v24 = (WTF **)((char *)v16 + 16 * v26);
      goto LABEL_30;
    }
    if (!v28)
    {
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v49 - 16);
        v27 = v24;
      }
      WTF::String::operator=(v27, (WTF::StringImpl *)a2);
      v31 = v50;
      ++*(_DWORD *)v50;
      v32 = v27[1];
      v27[1] = v31;
      if (v32)
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v32, v30);
      v33 = *v49;
      if (*v49)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v37 = *v49;
      if (*v49)
        v38 = *(_DWORD *)(v37 - 12);
      else
        v38 = 0;
      v39 = (*(_DWORD *)(v37 - 16) + v38);
      v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
          goto LABEL_46;
      }
      else if (3 * v40 > 4 * v39)
      {
        goto LABEL_46;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v49);
      goto LABEL_46;
    }
    if (WTF::equal(v28, *(const WTF::StringImpl **)a2, v15))
      break;
LABEL_30:
    v19 = i + v26;
  }
  v35 = (char *)v16 + 16 * v26;
  ++*(_DWORD *)v14;
  v36 = (WebKit::WebExtensionMenuItem *)*((_QWORD *)v35 + 1);
  *((_QWORD *)v35 + 1) = v14;
  if (v36)
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v36, v29);
LABEL_46:
  if (!*(_BYTE *)(a2 + 16))
  {
    v41 = (uint64_t *)(a1 + 672);
    v42 = *(unsigned int *)(a1 + 684);
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 680))
    {
      v43 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v50);
      v42 = *(unsigned int *)(a1 + 684);
      v44 = *(_QWORD *)(a1 + 672);
      v45 = *v43;
      ++*(_DWORD *)*v43;
    }
    else
    {
      v44 = *v41;
      v45 = v50;
      ++*(_DWORD *)v50;
    }
    *(_QWORD *)(v44 + 8 * v42) = v45;
    *(_DWORD *)(a1 + 684) = v42 + 1;
  }
  LOBYTE(v51) = 0;
  v52 = 0;
  v46 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v46 + 16))(v46, &v51);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (v52)
  {
    v48 = v51;
    v51 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  result = v50;
  v50 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v47);
  return result;
}

void sub_19771CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::isAncestorOrSelf(WebKit *this, WTF **a2, const WTF::StringImpl **a3, const WTF::String *a4)
{
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  const WTF::StringImpl *v11;
  WebKit::WebExtensionMenuItem *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if ((WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3) & 1) != 0)
    return 1;
  if (!*a3)
    return 0;
  if (!*((_DWORD *)*a3 + 1))
    return 0;
  v9 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 83, a3, v7);
  if (!v9)
    return 0;
  v12 = v9;
  ++*(_DWORD *)v9;
  v13 = *((_QWORD *)v9 + 12);
  if (v13)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14)
        break;
      ++*(_DWORD *)v14;
      if ((WTF::equal(*(WTF **)(v14 + 32), *a2, v11) & 1) != 0)
      {
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)v14, v15);
        v8 = 1;
        goto LABEL_14;
      }
      ++*(_DWORD *)v14;
      WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, v15);
      WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)v14, v16);
      v13 = *(_QWORD *)(v14 + 96);
      v12 = (WebKit::WebExtensionMenuItem *)v14;
      if (!v13)
      {
        v8 = 0;
        v12 = (WebKit::WebExtensionMenuItem *)v14;
        goto LABEL_14;
      }
    }
  }
  v8 = 0;
LABEL_14:
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, v10);
  return v8;
}

void sub_19771CC4C(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebExtensionMenuItem *v2;
  WebKit::WebExtensionMenuItem *v3;
  void *v5;

  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v3, a2);
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v2, v5);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusUpdate(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3, NSString *a4)
{
  WebKit *v7;
  uint64_t *v8;
  WTF *v9;
  const WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  WebKit::WebExtensionMenuItem *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  NSString v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit::WebExtensionMenuItem *result;
  unsigned int v24;
  unsigned int v25;
  int v26;
  WTF **v27;
  int i;
  uint64_t v29;
  WTF **v30;
  WTF *v31;
  void *v32;
  void *v33;
  WebKit::WebExtensionMenuItem *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WebKit::WebExtensionMenuItem *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  NSString *v43;
  const WTF::StringImpl **v44;
  NSString *v45;
  WTF::StringImpl *v46;
  NSString v47;
  NSString v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebKit *v53;
  WebKit::WebExtensionMenuItem *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  char v57;

  if (!*a2
    || !*((_DWORD *)*a2 + 1)
    || (v7 = (WebKit *)a1,
        v8 = a1 + 83,
        (v9 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 83, a2, (const WTF::StringImpl *)a3)) == 0))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.update()"), 0, CFSTR("menu item not found"), a4, &v55);
    v19 = v55;
    v55 = 0;
    v56 = v19;
    v57 = 1;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, &v56);
    (*(void (**)(NSString))(*(_QWORD *)v20 + 8))(v20);
    if (v57)
    {
      v22 = v56;
      v56 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v14 = v9;
  ++*(_DWORD *)v9;
  v15 = *(const WTF::StringImpl **)a3;
  if (!*(_QWORD *)a3 || !*((_DWORD *)v15 + 1) || (WTF::equal(*a2, v15, v10) & 1) != 0)
    goto LABEL_51;
  v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a2, v10);
  v17 = *v8;
  v54 = v14;
  if (*v8)
  {
    v18 = (WTF::StringImpl **)(v17 + 16 * *(unsigned int *)(v17 - 4));
    if (v18 == v16)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (v16)
  {
    v18 = 0;
LABEL_21:
    if (v18 != v16)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v8, v16);
      v17 = *v8;
    }
    if (v17)
      goto LABEL_25;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
  v17 = *v8;
  if (!*v8)
  {
    v24 = 0;
    goto LABEL_26;
  }
LABEL_25:
  v24 = *(_DWORD *)(v17 - 8);
LABEL_26:
  v25 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v53 = v7;
  if (v25 >= 0x100)
    v26 = v25 >> 8;
  else
    v26 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  v27 = 0;
  for (i = 1; ; ++i)
  {
    v29 = v26 & v24;
    v30 = (WTF **)(v17 + 16 * v29);
    v31 = *v30;
    if (*v30 == (WTF *)-1)
    {
      v27 = (WTF **)(v17 + 16 * v29);
      goto LABEL_35;
    }
    if (!v31)
    {
      if (v27)
      {
        *v27 = 0;
        v27[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v30 = v27;
      }
      v14 = v54;
      WTF::String::operator=(v30, (WTF::StringImpl *)a3);
      v7 = v53;
      ++*(_DWORD *)v54;
      v34 = v30[1];
      v30[1] = v54;
      if (v34)
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v34, v33);
      v35 = *v8;
      if (*v8)
        v36 = *(_DWORD *)(v35 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(v35 - 12) = v36;
      v39 = *v8;
      if (*v8)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(v39 - 16) + v40);
      v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
          goto LABEL_51;
      }
      else if (3 * v42 > 4 * v41)
      {
        goto LABEL_51;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
      goto LABEL_51;
    }
    if (WTF::equal(v31, *(const WTF::StringImpl **)a3, v10))
      break;
LABEL_35:
    v26 = i + v29;
  }
  v37 = v17 + 16 * v29;
  v7 = v53;
  v14 = v54;
  ++*(_DWORD *)v54;
  v38 = *(WebKit::WebExtensionMenuItem **)(v37 + 8);
  *(_QWORD *)(v37 + 8) = v54;
  if (v38)
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v38, v32);
  if (!*(_BYTE *)(a3 + 16))
    goto LABEL_59;
LABEL_51:
  if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)*v8, (WTF::StringImpl **)(a3 + 8), v10) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.update()"), 0, CFSTR("parent menu item not found"), v43, &v55);
    v51 = v55;
    v55 = 0;
    v56 = v51;
    v57 = 1;
    v47 = *a4;
    *a4 = 0;
    (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v47 + 16))(v47, &v56);
    goto LABEL_63;
  }
  if (!*(_BYTE *)(a3 + 16))
    goto LABEL_59;
  if (!*(_QWORD *)a3 || (v44 = (const WTF::StringImpl **)a3, !*(_DWORD *)(*(_QWORD *)a3 + 4)))
    v44 = a2;
  if (WebKit::isAncestorOrSelf(v7, (WTF **)(a3 + 8), v44, (const WTF::String *)v43))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.update()"), 0, CFSTR("parent menu item cannot be itself or another ancestor"), v45, &v55);
    v46 = v55;
    v55 = 0;
    v56 = v46;
    v57 = 1;
    v47 = *a4;
    *a4 = 0;
    (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v47 + 16))(v47, &v56);
LABEL_63:
    (*(void (**)(NSString))(*(_QWORD *)v47 + 8))(v47);
    if (v57)
    {
      v52 = v56;
      v56 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v49);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
    v50 = v55;
    v55 = 0;
    if (v50)
    {
LABEL_69:
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v49);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  else
  {
LABEL_59:
    WebKit::WebExtensionMenuItem::update(v14, (const WebKit::WebExtensionMenuItemParameters *)a3, v10, v11, v12, v13);
    LOBYTE(v56) = 0;
    v57 = 0;
    v48 = *a4;
    *a4 = 0;
    (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v48 + 16))(v48, &v56);
    (*(void (**)(NSString))(*(_QWORD *)v48 + 8))(v48);
    if (v57)
    {
      v50 = v56;
      v56 = 0;
      if (v50)
        goto LABEL_69;
    }
  }
  return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v14, v49);
}

void sub_19771D0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  WebKit::WebExtensionMenuItem *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v17);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v17);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v14, v17);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusRemove(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, NSString *a4)
{
  WTF *v6;
  WebKit::WebExtensionMenuItem *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebKit::WebExtensionMenuItem *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;

  if (*a2
    && *((_DWORD *)*a2 + 1)
    && (v6 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 664), a2, a3)) != 0)
  {
    v7 = v6;
    ++*(_DWORD *)v6;
    v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = off_1E34F7270;
    *((_QWORD *)v8 + 1) = &v19;
    *((_QWORD *)v8 + 2) = a1;
    v19 = v8;
    WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::menusRemove(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WebKit::WebExtensionMenuItem &>::call((uint64_t)v8, (uint64_t)v7, v9);
    LOBYTE(v20) = 0;
    v21 = 0;
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v21)
    {
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v18 = v19;
    v19 = 0;
    if (v18)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v7, v11);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("menus.remove()"), 0, CFSTR("menu item not found"), a4, &v19);
    v13 = v19;
    v19 = 0;
    v20 = v13;
    v21 = 1;
    v14 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v21)
    {
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19771D3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  WebKit::WebExtensionMenuItem *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, v15);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::menusRemoveAll(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  v4 = *(WTF::StringImpl ***)(a1 + 664);
  if (v4)
  {
    *(_QWORD *)(a1 + 664) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 672), 0);
  LOBYTE(v8) = 0;
  v9 = 0;
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19771D570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionContext *this, const WebKit::WebExtensionMenuItem *a2, char a3, const WebKit::WebExtensionMenuItemContextParameters *a4)
{
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  WebKit::WebExtensionTab *v15;
  uint64_t v16;
  __int128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebKit::WebExtensionTab *result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  unsigned __int8 *v29;
  WebKit::WebExtensionTab *v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a4 + 16))
    WebKit::WebExtensionContext::getTab((uint64_t *)this, *((_QWORD *)a4 + 1), 0, &v30);
  else
    v30 = 0;
  v28 = 18;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v29, &v28, 1);
  CFRetain(*((CFTypeRef *)this + 1));
  ++*(_DWORD *)a2;
  v8 = *((_OWORD *)a4 + 1);
  v31 = *(_OWORD *)a4;
  v32 = v8;
  v33 = *((_BYTE *)a4 + 32);
  v9 = (WTF::StringImpl *)*((_QWORD *)a4 + 5);
  if (v9)
    *(_DWORD *)v9 += 2;
  v25 = *((_OWORD *)a4 + 3);
  v26 = *((_OWORD *)a4 + 4);
  v10 = (WTF::StringImpl *)*((_QWORD *)a4 + 10);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 11);
  if (v11)
    *(_DWORD *)v11 += 2;
  v23 = *((_OWORD *)a4 + 6);
  v24 = *((_OWORD *)a4 + 7);
  v12 = (WTF::StringImpl *)*((_QWORD *)a4 + 16);
  if (v12)
    *(_DWORD *)v12 += 2;
  v21 = *(_OWORD *)((char *)a4 + 136);
  v22 = *(_OWORD *)((char *)a4 + 152);
  v13 = (WTF::StringImpl *)*((_QWORD *)a4 + 21);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *((_BYTE *)a4 + 176);
  v15 = v30;
  if (v30)
    ++*(_DWORD *)v30;
  v16 = WTF::fastMalloc((WTF *)0xE8);
  *(_QWORD *)v16 = off_1E34F7298;
  *(_QWORD *)(v16 + 8) = this;
  *(_QWORD *)(v16 + 16) = this;
  *(_QWORD *)(v16 + 24) = a2;
  *(_BYTE *)(v16 + 32) = a3;
  v17 = v32;
  *(_OWORD *)(v16 + 40) = v31;
  *(_OWORD *)(v16 + 56) = v17;
  *(_BYTE *)(v16 + 72) = v33;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v16 + 80) = v9;
  *(_OWORD *)(v16 + 88) = v25;
  *(_OWORD *)(v16 + 104) = v26;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v16 + 120) = v10;
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(v16 + 128) = v11;
  *(_OWORD *)(v16 + 136) = v23;
  *(_OWORD *)(v16 + 152) = v24;
  if (v12)
    *(_DWORD *)v12 += 2;
  *(_QWORD *)(v16 + 168) = v12;
  *(_OWORD *)(v16 + 176) = v21;
  *(_OWORD *)(v16 + 192) = v22;
  if (v13)
    *(_DWORD *)v13 += 2;
  *(_QWORD *)(v16 + 208) = v13;
  *(_BYTE *)(v16 + 216) = v14;
  *(_QWORD *)(v16 + 224) = v15;
  v27 = v16;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v29, &v27);
  v19 = v27;
  v27 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v18);
      if (!v12)
        goto LABEL_36;
      goto LABEL_34;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v12)
  {
LABEL_36:
    if (!v11)
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_34:
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_36;
  }
  WTF::StringImpl::destroy(v12, v18);
  if (!v11)
    goto LABEL_41;
LABEL_39:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v18);
    if (!v10)
      goto LABEL_46;
    goto LABEL_44;
  }
  *(_DWORD *)v11 -= 2;
LABEL_41:
  if (!v10)
  {
LABEL_46:
    if (!v9)
      goto LABEL_52;
    goto LABEL_49;
  }
LABEL_44:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v10, v18);
  if (!v9)
    goto LABEL_52;
LABEL_49:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v18);
  else
    *(_DWORD *)v9 -= 2;
LABEL_52:
  if (v29)
    WTF::fastFree((WTF *)(v29 - 16), v18);
  result = v30;
  v30 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_19771D8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters(WebKit::WebExtensionMenuItemContextParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

WebKit::WebExtensionMenuItem *WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(WebKit::WebExtensionMenuItem *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionMenuItem::~WebExtensionMenuItem(result, a2);
    return (WebKit::WebExtensionMenuItem *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebExtensionMenuItem::~WebExtensionMenuItem(WebKit::WebExtensionMenuItem *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = (uint64_t *)*((_QWORD *)this + 10);
  if (v7)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v7, v3);
  v8 = (uint64_t *)*((_QWORD *)this + 9);
  if (v8)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v8, v3);
  v9 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v3);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref();
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100)
      v7 = v6 >> 8;
    else
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + 2 * (v7 & v5));
      if (result != (WTF *)-1)
      {
        if (!result)
          return result;
        if ((WTF::equal(result, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    return (WTF *)1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebKit::WebExtensionMenuItem *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WebKit::WebExtensionMenuItem *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebKit::WebExtensionMenuItem *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = (WTF::StringImpl **)(v14 + 16 * v19);
          v21 = v20[1];
          v20[1] = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v21, v8);
            v22 = *v20;
            *v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(WTF::StringImpl **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v20[1] = v25;
          v26 = *(WebKit::WebExtensionMenuItem **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v26, v8);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_33;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WebKit::WebExtensionMenuItem **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v13, v8);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebKit::WebExtensionMenuItem *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  void *v4;
  WebKit::WebExtensionMenuItem *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  result = a2[1];
  a2[1] = 0;
  if (result)
    result = WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (WebKit::WebExtensionMenuItem *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1);
  }
  return result;
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::menusRemove(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WebKit::WebExtensionMenuItem &>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **result;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a2 + 116);
  if ((_DWORD)v5)
  {
    v7 = *(uint64_t **)(a2 + 104);
    v8 = 8 * v5;
    do
    {
      v9 = *v7++;
      (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), v9);
      v8 -= 8;
    }
    while (v8);
  }
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 664), (WTF::StringImpl **)(a2 + 32), a3);
  v12 = *(_QWORD *)(v4 + 664);
  if (v12)
  {
    v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
    if (v13 == result)
      goto LABEL_11;
  }
  else
  {
    if (!result)
      goto LABEL_11;
    v13 = 0;
  }
  if (v13 != result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v4 + 664), result);
LABEL_11:
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14 || !*(_QWORD *)(v14 + 8))
  {
    v15 = *(uint64_t **)(v4 + 672);
    v16 = *(unsigned int *)(v4 + 684);
    v17 = &v15[v16];
    if ((_DWORD)v16)
    {
      v18 = 0;
      v19 = *(_QWORD *)(v4 + 672);
      v20 = &v15[v16];
      v21 = v20;
      do
      {
        result = (WTF::StringImpl **)WebKit::WebExtensionMenuItem::operator==(a2, *v15, v11);
        if ((_DWORD)result)
        {
          v23 = v15;
          if (v21 != (uint64_t *)(*(_QWORD *)(v4 + 672) + 8 * *(unsigned int *)(v4 + 684)))
          {
            if (v15 == v20)
            {
              v23 = v21;
            }
            else
            {
              memmove(v21, v20, v19 - (_QWORD)v20);
              v23 = (uint64_t *)((char *)v21 + v19 - (_QWORD)v20);
            }
          }
          result = (WTF::StringImpl **)*v15;
          *v15 = 0;
          v20 = v15 + 1;
          if (result)
            result = (WTF::StringImpl **)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, v22);
          ++v18;
          v21 = v23;
        }
        ++v15;
        v19 += 8;
      }
      while (v15 < v17);
      v15 = *(uint64_t **)(v4 + 672);
      v24 = *(unsigned int *)(v4 + 684);
      LODWORD(v16) = *(_DWORD *)(v4 + 684);
      v17 = v21;
    }
    else
    {
      v24 = 0;
      v18 = 0;
      v20 = &v15[v16];
    }
    v25 = &v15[v24];
    if (v20 != v25)
    {
      result = (WTF::StringImpl **)memmove(v17, v20, (char *)v25 - (char *)v20);
      LODWORD(v16) = *(_DWORD *)(v4 + 684);
    }
    *(_DWORD *)(v4 + 684) = v16 - v18;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebKit::WebExtensionMenuItem *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

unsigned int *WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WebKit::WebExtensionMenuItem *v5;
  uint64_t v6;

  *a1 = off_1E34F7298;
  v3 = a1[28];
  a1[28] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 5), a2);
  v5 = (WebKit::WebExtensionMenuItem *)a1[3];
  a1[3] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v5, v4);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WebKit::WebExtensionMenuItem *v5;
  uint64_t v6;

  *a1 = off_1E34F7298;
  v3 = a1[28];
  a1[28] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 5), a2);
  v5 = (WebKit::WebExtensionMenuItem *)a1[3];
  a1[3] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v5, v4);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _BYTE v23[16];
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  _BYTE v28[184];
  _BYTE v29[120];
  uint64_t *v30;
  uint64_t v31;
  char v32;
  IPC::Encoder *v33;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionMenuItem::minimalParameters(*(_QWORD *)(a1 + 24), (uint64_t)v29);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 224), (uint64_t)v23);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v28, (uint64_t)v23);
  }
  else
  {
    v28[0] = 0;
    v28[176] = 0;
  }
  v22 = v4;
  WebKit::WebExtensionContext::processes((char *)v2, 18, 0, (uint64_t *)&v30);
  v6 = *(_QWORD *)(v2 + 64);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v7 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v30);
    v8 = v7;
    v9 = v5;
    v10 = v30 ? &v30[*((unsigned int *)v30 - 1)] : 0;
    if (v10 != v7)
    {
      v11 = (uint64_t *)(a1 + 40);
      do
      {
        v12 = *v8;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1572;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v33 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode((IPC::Encoder *)v14, (uint64_t)v29);
        *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = v3;
        IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::encode((IPC::Encoder *)v14, v11);
        IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>((IPC::Encoder *)v14, (uint64_t)v28);
        LOBYTE(v31) = 0;
        v32 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v33, 0, (uint64_t)&v31, 1);
        if (v32)
        {
          v15 = v31;
          v31 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v33;
        v33 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v5);
          WTF::fastFree(v17, v18);
        }
        while (++v8 != v9)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_20;
        }
        v8 = v9;
LABEL_20:
        ;
      }
      while (v8 != v10);
    }
  }
  if (v30)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v30, v5);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, (WTF::StringImpl *)v5);
  if (v22)
  {
    if (v27)
    {
      v20 = v26;
      v26 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v25)
    {
      v21 = v24;
      v24 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v29, v19);
}

void sub_19771E6C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t *v37;
  WTF::StringImpl *v38;

  v37 = *(uint64_t **)(v35 - 128);
  if (v37)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v37, a2);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a35, (WTF::StringImpl *)a2);
  if (a10)
  {
    if (a22 && a21)
    {
      if (*(_DWORD *)a21 == 2)
        WTF::StringImpl::destroy(a21, v38);
      else
        *(_DWORD *)a21 -= 2;
    }
    if (a20 && a15)
    {
      if (*(_DWORD *)a15 == 2)
        WTF::StringImpl::destroy(a15, v38);
      else
        *(_DWORD *)a15 -= 2;
    }
  }
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)(v35 - 248), v38);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionsGetAll(WebKit::WebExtensionContext *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  WTF::StringImpl *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  WebKit::WebExtensionContext::currentPermissions(a1, &v26);
  v4 = v27;
  v5 = v29;
  if (v27 != v29)
  {
    v6 = v28;
    do
    {
      v7 = HIDWORD(v33);
      if (HIDWORD(v33) == (_DWORD)v33)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v32, (unint64_t)v4);
      }
      else
      {
        v8 = v32;
        v9 = (_DWORD *)*v4;
        if (*v4)
          *v9 += 2;
        *(_QWORD *)(v8 + 8 * v7) = v9;
        HIDWORD(v33) = v7 + 1;
      }
      while (1)
      {
        v4 += 2;
        if (v4 == v6)
          break;
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_12;
      }
      v4 = v6;
LABEL_12:
      ;
    }
    while (v4 != v5);
  }
  WebKit::WebExtensionContext::currentPermissionMatchPatterns(a1, &v26);
  v10 = (WTF::StringImpl **)v27;
  v11 = (WTF::StringImpl **)v29;
  if (v27 != v29)
  {
    v12 = (WTF::StringImpl **)v28;
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
    do
    {
      WebKit::WebExtensionMatchPattern::stringWithScheme(*v10, v13, &v25);
      LODWORD(v15) = HIDWORD(v31);
      if (HIDWORD(v31) == (_DWORD)v31)
      {
        v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v25);
        v15 = HIDWORD(v31);
        v19 = v30;
        v20 = *v18;
        *v18 = 0;
        *(_QWORD *)(v19 + 8 * v15) = v20;
      }
      else
      {
        v16 = v25;
        v25 = 0;
        *(_QWORD *)(v30 + 8 * HIDWORD(v31)) = v16;
      }
      HIDWORD(v31) = v15 + 1;
      v17 = v25;
      v25 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      while (1)
      {
        v10 += 2;
        if (v10 == v12)
          break;
        if ((unint64_t)*v10 + 1 > 1)
          goto LABEL_25;
      }
      v10 = v12;
LABEL_25:
      ;
    }
    while (v10 != v11);
  }
  v21 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 16))(v21, &v32, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v22);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v23);
}

void sub_19771E988(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  void *v18;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, v18);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::permissionsContains(uint64_t *a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t hasPermissions;
  uint64_t v8;
  void *v9;
  WTF::StringImpl **result;
  uint64_t *v11;
  WTF::StringImpl **v12;

  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v12, a2);
  WebKit::toPatterns(a3, (uint64_t *)&v11);
  hasPermissions = WebKit::WebExtensionContext::hasPermissions(a1, &v12, &v11);
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, hasPermissions);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v11, v9);
  result = v12;
  if (v12)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, (WTF::StringImpl *)v9);
  return result;
}

void sub_19771EA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, WTF::StringImpl **a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a9, v12);
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, (WTF::StringImpl *)v12);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::permissionsRequest(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  void *v8;
  int hasPermissions;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WebKit::WebExtensionTab *v32;
  unsigned int v33;
  WTF *v34;
  _QWORD *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WebKit::WebExtensionTab *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *result;
  WebKit::WebExtensionTab *v47;
  _QWORD *v48;
  WebKit::WebExtensionTab *v49;
  unsigned int *v50;
  __int128 v51;
  __int128 v52;
  uint64_t *v53;
  WTF *v54;
  uint64_t *v55;
  WTF::StringImpl **v56;
  uint64_t *v57;
  unsigned int *v58;

  WebKit::toPatterns(a3, (uint64_t *)&v57);
  if ((!*a2 || !*((_DWORD *)*a2 - 3)) && (!*a3 || !*((_DWORD *)*a3 - 3)))
  {
    WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, a2, &v57);
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
    goto LABEL_11;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v56, a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v55, &v57);
  hasPermissions = WebKit::WebExtensionContext::hasPermissions((uint64_t *)a1, &v56, &v55);
  if (v55)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v55, v8);
  if (v56)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v56, (WTF::StringImpl *)v8);
    if (hasPermissions)
      goto LABEL_9;
  }
  else if (hasPermissions)
  {
LABEL_9:
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_48;
  }
  if (WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(&v57) && !*(_BYTE *)(a1 + 248))
    *(_BYTE *)(a1 + 248) = 1;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = 1;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  v54 = (WTF *)v12;
  v50 = (unsigned int *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)&v51 = a1;
  *((_QWORD *)&v51 + 1) = v13;
  v14 = v54;
  ++*(_DWORD *)v54;
  *(_QWORD *)&v52 = v14;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v52 + 1, a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v53, &v57);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v15 = off_1E34F72C0;
  v15[1] = v50;
  v15[2] = v51;
  v16 = *((_QWORD *)&v51 + 1);
  v51 = 0u;
  v15[3] = v16;
  v15[4] = v52;
  v17 = *((_QWORD *)&v52 + 1);
  v52 = 0u;
  v15[5] = v17;
  v18 = v53;
  v53 = 0;
  v15[6] = v18;
  v20 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v15;
  if (v53)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v53, v19);
  if (*((_QWORD *)&v52 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v52 + 1), (WTF::StringImpl *)v19);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v52, (WTF::StringImpl *)v19);
  v21 = *((_QWORD *)&v51 + 1);
  *((_QWORD *)&v51 + 1) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v51;
  *(_QWORD *)&v51 = 0;
  if (v22)
    CFRelease(*(CFTypeRef *)(v22 + 8));
  v49 = 0;
  do
    v23 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v23 + 1, (unsigned int *)v20));
  v50 = (unsigned int *)v20;
  v24 = v54;
  ++*(_DWORD *)v54;
  *(_QWORD *)&v51 = v24;
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v25 = off_1E34F72E8;
  v25[1] = v50;
  v26 = v51;
  v50 = 0;
  *(_QWORD *)&v51 = 0;
  v25[2] = v26;
  v48 = v25;
  WebKit::WebExtensionContext::requestPermissionMatchPatterns(a1, &v57, &v49, (uint64_t *)&v48, 0, 4);
  v28 = (uint64_t)v48;
  v48 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v51, v27);
  v29 = v50;
  v50 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      v58 = v29;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v58);
    }
  }
  v32 = v49;
  v49 = 0;
  if (v32)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v32);
  v47 = 0;
  do
    v33 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v33 + 1, (unsigned int *)v20));
  v50 = (unsigned int *)v20;
  v34 = v54;
  ++*(_DWORD *)v54;
  *(_QWORD *)&v51 = v34;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v35 = off_1E34F7310;
  v35[1] = v50;
  v36 = v51;
  v50 = 0;
  *(_QWORD *)&v51 = 0;
  v35[2] = v36;
  v48 = v35;
  WebKit::WebExtensionContext::requestPermissions(a1, a2, &v47, (uint64_t *)&v48, 0, 4);
  v38 = (uint64_t)v48;
  v48 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v51, v37);
  v40 = v50;
  v50 = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      v58 = v40;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v58);
    }
  }
  v43 = v47;
  v47 = 0;
  if (v43)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v43);
  do
  {
    v44 = __ldaxr((unsigned int *)v20);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, (unsigned int *)v20));
  if (!v45)
  {
    atomic_store(1u, (unsigned int *)v20);
    v50 = (unsigned int *)v20;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v50);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v54, v39);
LABEL_48:
  result = v57;
  if (v57)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v57, v11);
  return result;
}

void sub_19771EF48(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unsigned int *v6;
  WTF **v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t *v17;
  unsigned int *v18;
  va_list va;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v18 = va_arg(va1, unsigned int *);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);
  v25 = va_arg(va1, _QWORD);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(v7, a2);
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      *(_QWORD *)(v8 - 56) = v11;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)(v8 - 56));
    }
  }
  if (a4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a4);
  do
  {
    v14 = __ldaxr(v6);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v6));
  if (!v15)
  {
    atomic_store(1u, v6);
    v18 = v6;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)va);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)va1, v10);
  v17 = *(uint64_t **)(v8 - 64);
  if (v17)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v17, v16);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(uint64_t a1, char a2, _QWORD **a3, _QWORD **a4)
{
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **result;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  WTF::StringImpl **v17;

  WebKit::toStrings(a4, (uint64_t *)&v17);
  v15 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet(&v16, &v15, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v12, a3);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v13, &v17);
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = &off_1E34F7338;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = a2;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v7 + 32), &v12);
  v8 = v13;
  v13 = 0;
  v14 = v7;
  *(_QWORD *)(v7 + 40) = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v16, &v14);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v9);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  if (v16)
    WTF::fastFree((WTF *)(v16 - 16), v9);
  result = v17;
  if (v17)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v9);
  return result;
}

void sub_19771F29C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13, WTF::StringImpl **a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  WTF::StringImpl **v18;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  if (a11)
    CFRelease(*(CFTypeRef *)(a11 + 8));
  v17 = *(_QWORD *)(v15 - 48);
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), a2);
  v18 = *(WTF::StringImpl ***)(v15 - 40);
  if (v18)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, a2);
  _Unwind_Resume(exception_object);
}

WTF **WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl **v4;
  uint64_t *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)v3 + 2);
      if (v4)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      v5 = (uint64_t *)*((_QWORD *)v3 + 1);
      if (v5)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v5, a2);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WebKit::WebExtensionContext::permissionsRemove(uint64_t a1, uint64_t *a2, _QWORD **a3, uint64_t *a4)
{
  int hasPermissions;
  uint64_t v8;
  void *v9;
  uint64_t *result;
  uint64_t *v11;
  WTF::StringImpl **v12;
  uint64_t *v13;

  WebKit::toPatterns(a3, (uint64_t *)&v13);
  if (WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(&v13) && *(_BYTE *)(a1 + 248))
    *(_BYTE *)(a1 + 248) = 0;
  WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 144), a2, (double *)(a1 + 160), CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
  WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, (uint64_t *)&v13, 0);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v12, (_QWORD **)a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v11, &v13);
  hasPermissions = WebKit::WebExtensionContext::hasPermissions((uint64_t *)a1, &v12, &v11);
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, hasPermissions ^ 1u);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v11, v9);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, (WTF::StringImpl *)v9);
  result = v13;
  if (v13)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v13, v9);
  return result;
}

void sub_19771F4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, WTF::StringImpl **a11, uint64_t *a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, v14);
  if (a11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, (WTF::StringImpl *)v14);
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a12, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E34F72C0;
  v3 = *(uint64_t **)(a1 + 48);
  if (v3)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v3, a2);
  v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 32), (WTF::StringImpl *)a2);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

{
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F72C0;
  v3 = *(uint64_t **)(a1 + 48);
  if (v3)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v3, a2);
  v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 32), (WTF::StringImpl *)a2);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  if (*(_BYTE *)(v2 + 4) && *(_BYTE *)(v2 + 5))
  {
    v3 = a1[1];
    WebKit::WebExtensionContext::grantPermissionMatchPatterns(v3, (uint64_t *)(v2 + 8), 1, *(double *)(v2 + 24));
    WebKit::WebExtensionContext::grantPermissions(v3, (uint64_t *)(a1[4] + 16), *(double *)(a1[4] + 32));
    v4 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  }
  else
  {
    v4 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19771F6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits>,WTF::WallTime>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(_QWORD *)a1 = off_1E34F72E8;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

{
  void *v3;

  *(_QWORD *)a1 = off_1E34F72E8;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits>,WTF::WallTime>::call(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *result;

  v6 = *a2;
  if (*a2)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  v8 = *a3;
  if (*a3)
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
  v9 = v7 == (_DWORD)v8;
  v10 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v10 + 4) = v9;
  *a2 = 0;
  result = *(uint64_t **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v6;
  if (result)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(result, a2);
  *(double *)(*(_QWORD *)(a1 + 16) + 32) = a4;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,void,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,WTF::WallTime>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(_QWORD *)a1 = off_1E34F7310;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

{
  void *v3;

  *(_QWORD *)a1 = off_1E34F7310;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,void,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,WTF::WallTime>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl **result;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  v8 = *a3;
  if (*a3)
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
  v9 = v7 == (_DWORD)v8;
  v10 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v10 + 5) = v9;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl ***)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v6;
  if (result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  *(double *)(*(_QWORD *)(a1 + 16) + 24) = a4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *a1 = &off_1E34F7338;
  v3 = (WTF::StringImpl **)a1[5];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)a1[4];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F7338;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  _QWORD *result;
  void *v25;
  size_t v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  IPC::Encoder *v32;

  v1 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v1, *(_BYTE *)(a1 + 24), 0, (uint64_t *)&v29);
  v27 = v1;
  v3 = *(_QWORD *)(v1 + 64);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v29);
    v5 = v4;
    v6 = v2;
    v7 = v29 ? &v29[*((unsigned int *)v29 - 1)] : 0;
    if (v7 != v4)
    {
      do
      {
        v8 = *v5;
        v9 = *(_QWORD *)(v27 + 32);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 1573;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v32 = (IPC::Encoder *)v10;
        v11 = *(_BYTE *)(a1 + 24);
        v12 = *(_QWORD *)(v10 + 544);
        v13 = v12 + 1;
        v14 = *(_QWORD *)(v10 + 552);
        if (v14 < v12 + 1)
        {
          v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v23 = v22;
            v22 *= 2;
          }
          while (v23 < v13);
          v26 = v23;
          result = mmap(0, v23, 3, 4098, -1, 0);
          if (result == (_QWORD *)-1)
          {
            __break(0xC471u);
            return result;
          }
          v15 = result;
          memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
          v25 = *(void **)(v10 + 528);
          if (v25 != (void *)(v10 + 16))
            munmap(v25, *(_QWORD *)(v10 + 552));
          *(_QWORD *)(v10 + 528) = v15;
          *(_QWORD *)(v10 + 552) = v26;
          v16 = *(_QWORD *)(v10 + 544);
        }
        else
        {
          v15 = *(_QWORD **)(v10 + 528);
          v16 = *(_QWORD *)(v10 + 544);
        }
        bzero((char *)v15 + v16, v12 - v16);
        *(_QWORD *)(v10 + 544) = v13;
        v17 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v12);
        *(_QWORD *)(v10 + 536) = v17 + 1;
        *v17 = v11;
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v10, (_QWORD **)(a1 + 32));
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v10, (_QWORD **)(a1 + 40));
        LOBYTE(v30) = 0;
        v31 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v32, 0, (uint64_t)&v30, 1);
        if (v31)
        {
          v18 = v30;
          v30 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        v19 = v32;
        v32 = 0;
        if (v19)
        {
          IPC::Encoder::~Encoder(v19, v2);
          WTF::fastFree(v20, v21);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_18;
        }
        v5 = v6;
LABEL_18:
        ;
      }
      while (v5 != v7);
    }
  }
  result = v29;
  if (v29)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v29, v2);
  return result;
}

void sub_19771FBEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, char a19, IPC::Encoder *a20)
{
  if (a16)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a16, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::portPostMessage(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int buf, uint64_t a18, __int16 a19, uint64_t a20)
{
  _BOOL8 isBackgroundPage;
  uint64_t v26;
  BOOL isPortConnected;
  NSObject *v28;
  _BOOL4 v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v40;
  int v41;
  unsigned int v43;
  WTF *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  id *v62;
  __CFString *v63;
  void *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  _BYTE v67[8];
  WTF::StringImpl *v68;
  char v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  uint8_t v74[8];
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v72 = a4;
  *((_QWORD *)&v72 + 1) = a5;
  v71 = a6;
  if ((_BYTE)a5)
  {
    isBackgroundPage = WebKit::WebExtensionContext::isBackgroundPage(a1, a4);
    if (isBackgroundPage)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)isBackgroundPage);
      *(_QWORD *)(a1 + 344) = v26;
    }
  }
  isPortConnected = WebKit::WebExtensionContext::isPortConnected(a1, a2, a3, a6);
  v28 = (id)qword_1ECE710C8;
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
  if (isPortConnected)
  {
    if (v29)
      __asm { BR              X10 }

    switch(a3)
    {
      case 0:
        *(_QWORD *)v74 = &v72;
        *(_QWORD *)&v75 = &v71;
        *((_QWORD *)&v75 + 1) = a7;
        WebKit::WebExtensionContext::processes((char *)a1, 24, 0, (uint64_t *)&v73);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>((_QWORD *)a1, &v73, (__int128 *)v74);
        goto LABEL_59;
      case 1:
        *(_QWORD *)v74 = &v72;
        *(_QWORD *)&v75 = &v71;
        *((_QWORD *)&v75 + 1) = a7;
        WebKit::WebExtensionContext::processes((char *)a1, 24, 1, (uint64_t *)&v73);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>((_QWORD *)a1, &v73, (__int128 *)v74);
        goto LABEL_59;
      case 2:
        v61 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 480), v71);
        if (v61)
        {
          v62 = (id *)v61;
          if (*a7)
            v63 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v63 = &stru_1E351F1B8;
          WebKit::parseJSON(v63, 1, 0);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v67[0] = 0;
          v70 = 0;
          WebKit::WebExtensionMessagePort::receiveMessage(v62, v64, (uint64_t)v67);
          if (v70)
          {
            if (v69)
            {
              v66 = v68;
              v68 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, v65);
                else
                  *(_DWORD *)v66 -= 2;
              }
            }
          }

        }
        return;
      case 3:
        WebKit::WebExtensionContext::processes((char *)a1, 24, 3, (uint64_t *)&v73);
        *(_QWORD *)v74 = &v72;
        *(_QWORD *)&v75 = &v71;
        *((_QWORD *)&v75 + 1) = a7;
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>((_QWORD *)a1, &v73, (__int128 *)v74);
LABEL_59:
        if (v73)
          WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v73, v30);
        break;
      default:
        return;
    }
    return;
  }
  if (v29)
    __asm { BR              X10 }

  v31 = (uint64_t *)(a1 + 472);
  v32 = *(_QWORD *)(a1 + 472);
  if (v32
    || (WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 472), 0), (v32 = *v31) != 0))
  {
    v33 = *(_DWORD *)(v32 - 8);
  }
  else
  {
    v33 = 0;
  }
  v35 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a3, a6) & v33;
  v36 = (unsigned __int8 *)(v32 + 32 * v35);
  v37 = *v36;
  v38 = *((_QWORD *)v36 + 1);
  if (v37 != 255 || v38 != 0)
  {
    v40 = 0;
    v41 = 1;
    while (a3 != v37 || v38 != a6)
    {
      if (v37 == 254)
        v40 = v36;
      v35 = ((_DWORD)v35 + v41) & v33;
      v36 = (unsigned __int8 *)(v32 + 32 * v35);
      v37 = *v36;
      v38 = *((_QWORD *)v36 + 1);
      ++v41;
      if (v37 == 255 && v38 == 0)
      {
        if (v40)
        {
          *(_QWORD *)v40 = 255;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          *((_QWORD *)v40 + 3) = 0;
          --*(_DWORD *)(*v31 - 16);
          v36 = v40;
        }
        goto LABEL_28;
      }
    }
    goto LABEL_42;
  }
LABEL_28:
  *v36 = a3;
  *((_QWORD *)v36 + 1) = a6;
  *(_QWORD *)v74 = 0;
  *(_QWORD *)&v75 = 0;
  v43 = *((_DWORD *)v36 + 7);
  if (v43)
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(*((WTF::StringImpl **)v36 + 2), (WTF::StringImpl *)(*((_QWORD *)v36 + 2) + 24 * v43));
  v44 = (WTF *)*((_QWORD *)v36 + 2);
  if (v44)
  {
    *((_QWORD *)v36 + 2) = 0;
    *((_DWORD *)v36 + 6) = 0;
    WTF::fastFree(v44, v34);
    v45 = *(WTF::StringImpl **)v74;
    v46 = v75;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  *(_QWORD *)v74 = 0;
  *(_QWORD *)&v75 = 0;
  *((_QWORD *)v36 + 2) = v45;
  *((_QWORD *)v36 + 3) = v46;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v74, v34);
  v47 = *v31;
  if (*v31)
    v48 = *(_DWORD *)(v47 - 12) + 1;
  else
    v48 = 1;
  *(_DWORD *)(v47 - 12) = v48;
  v49 = *v31;
  if (*v31)
    v50 = *(_DWORD *)(v49 - 12);
  else
    v50 = 0;
  v51 = (*(_DWORD *)(v49 - 16) + v50);
  v52 = *(unsigned int *)(v49 - 4);
  if (v52 > 0x400)
  {
    if (v52 > 2 * v51)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (3 * v52 <= 4 * v51)
LABEL_41:
    v36 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v31, v36);
LABEL_42:
  v53 = (_DWORD *)*a7;
  if (*a7)
    *v53 += 2;
  *(_QWORD *)v74 = v53;
  v75 = v72;
  v54 = *((unsigned int *)v36 + 7);
  if ((_DWORD)v54 == *((_DWORD *)v36 + 6))
  {
    v55 = WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v36 + 4, v54 + 1, (unint64_t)v74);
    v57 = *((_QWORD *)v36 + 2) + 24 * *((unsigned int *)v36 + 7);
    v58 = *(_QWORD *)v55;
    *(_QWORD *)v55 = 0;
    *(_QWORD *)v57 = v58;
    *(_OWORD *)(v57 + 8) = *(_OWORD *)(v55 + 8);
    v59 = *(WTF::StringImpl **)v74;
    ++*((_DWORD *)v36 + 7);
    *(_QWORD *)v74 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v56);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  else
  {
    v60 = *((_QWORD *)v36 + 2) + 24 * v54;
    *(_QWORD *)v60 = v53;
    *(_OWORD *)(v60 + 8) = v75;
    ++*((_DWORD *)v36 + 7);
  }
}

void sub_197720300(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  void *v20;
  void *v21;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::isPortConnected(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v8;
  NSObject *v9;
  int v11;
  NSObject *v12;
  BOOL v13;

  v8 = WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(a1 + 456), a2, a4);
  v9 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a2 == a3)
    return v8 > 1;
  v11 = WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(a1 + 456), a3, a4);
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (v8)
    v13 = v11 == 0;
  else
    v13 = 1;
  return !v13;
}

void sub_19772075C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(_QWORD *result, _QWORD **a2, __int128 *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v3 = result[8];
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = result;
    result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
    v7 = result;
    v9 = v8;
    v10 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((_QWORD *)v10 != result)
    {
      do
      {
        v11 = *v7++;
        v12 = *a3;
        v13 = *((_QWORD *)a3 + 2);
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(v11, (uint64_t **)&v12, v6[4]);
        while (v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_12;
          ++v7;
        }
        v7 = v9;
LABEL_12:
        ;
      }
      while (v7 != (uint64_t *)v10);
    }
  }
  return result;
}

unint64_t WebKit::WebExtensionContext::removePort(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int i;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[8];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v11 = *(unsigned __int8 **)(a1 + 456);
  v12 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v11, a2, a4);
  if (v11)
    v13 = &v11[24 * *((unsigned int *)v11 - 1)];
  else
    v13 = 0;
  if (v13 == v12)
    goto LABEL_16;
  if (*((_DWORD *)v12 + 4) == 1)
  {
    if (v11)
    {
      v14 = &v11[24 * *((unsigned int *)v11 - 1)];
      if (v14 == v12)
        goto LABEL_15;
    }
    else
    {
      if (!v12)
      {
LABEL_15:
        WebKit::WebExtensionContext::clearQueuedPortMessages(a1, a3, a4);
        goto LABEL_16;
      }
      v14 = 0;
    }
    if (v14 != v12)
      WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 456), v12);
    goto LABEL_15;
  }
  --*((_DWORD *)v12 + 4);
LABEL_16:
  v15 = *(_QWORD *)(a1 + 464);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v15, a5);
  if (v15)
    v17 = v15 + 16 * *(unsigned int *)(v15 - 4);
  else
    v17 = 0;
  if (v17 != result)
  {
    v18 = (uint64_t *)(result + 8);
    v19 = *(_QWORD *)(result + 8);
    buf[0] = a2;
    buf[1] = a3;
    v37 = a4;
    if (v19)
    {
      v20 = (uint64_t *)(a1 + 464);
      v21 = *(_DWORD *)(v19 - 8);
      result = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash<0ul>(buf);
      for (i = 0; ; result = i + (result & v21))
      {
        v23 = (unsigned __int8 *)(v19 + 24 * (result & v21));
        v24 = *v23;
        v25 = v23[1];
        if (v24 == a2 && v25 == a3 && *((_QWORD *)v23 + 1) == a4)
        {
          v27 = *(_DWORD *)(v19 - 4);
          goto LABEL_33;
        }
        if (v24 == 255 && v25 == 255 && !*((_QWORD *)v23 + 1))
          break;
        ++i;
      }
      v27 = *(_DWORD *)(v19 - 4);
      v23 = (unsigned __int8 *)(v19 + 24 * v27);
LABEL_33:
      if ((unsigned __int8 *)(v19 + 24 * v27) != v23)
      {
        if (*((_DWORD *)v23 + 4) != 1)
        {
          --*((_DWORD *)v23 + 4);
          return result;
        }
        if ((unsigned __int8 *)(v19 + 24 * *(unsigned int *)(v19 - 4)) != v23)
        {
          *v23 = -2;
          ++*(_DWORD *)(*v18 - 16);
          v28 = *v18;
          v29 = *v18 ? *(_DWORD *)(v28 - 12) - 1 : -1;
          *(_DWORD *)(v28 - 12) = v29;
          v30 = *v18;
          if (*v18)
          {
            v31 = 6 * *(_DWORD *)(v30 - 12);
            v32 = *(_DWORD *)(v30 - 4);
            if (v31 < v32 && v32 >= 9)
              WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v18, v32 >> 1, 0);
          }
        }
        v34 = *v20;
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*v20, a5);
        if (v34)
        {
          v35 = v34 + 16 * *(unsigned int *)(v34 - 4);
          if (v35 == result)
            return result;
        }
        else
        {
          if (!result)
            return result;
          v35 = 0;
        }
        if (v35 != result)
          return (unint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v20, (_QWORD *)result);
      }
    }
  }
  return result;
}

void sub_197720C5C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v6;
  void *v7;
  id *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint8_t buf[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = a4;
  if (!WebKit::WebExtensionContext::isPortConnected(a1, a2, a3, a4))
  {
    v6 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      __asm { BR              X9 }

    switch(a3)
    {
      case 0:
        v16 = &v15;
        WebKit::WebExtensionContext::processes((char *)a1, 23, 0, (uint64_t *)buf);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>((uint64_t *)a1, (_QWORD **)buf, &v16);
        goto LABEL_13;
      case 1:
        v16 = &v15;
        WebKit::WebExtensionContext::processes((char *)a1, 23, 1, (uint64_t *)buf);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>((uint64_t *)a1, (_QWORD **)buf, &v16);
        goto LABEL_13;
      case 2:
        v8 = (id *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 480), v15);
        if (v8)
        {
          v11[0] = 0;
          v14 = 0;
          WebKit::WebExtensionMessagePort::reportDisconnection(v8, (uint64_t)v11);
          if (v14)
          {
            if (v13)
            {
              v10 = v12;
              v12 = 0;
              if (v10)
              {
                if (*(_DWORD *)v10 == 2)
                  WTF::StringImpl::destroy(v10, v9);
                else
                  *(_DWORD *)v10 -= 2;
              }
            }
          }
        }
        return;
      case 3:
        WebKit::WebExtensionContext::processes((char *)a1, 23, 3, (uint64_t *)buf);
        v16 = &v15;
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>((uint64_t *)a1, (_QWORD **)buf, &v16);
LABEL_13:
        if (*(_QWORD *)buf)
          WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(*(uint64_t **)buf, v7);
        break;
      default:
        return;
    }
  }
}

void sub_197720F48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::pageHasOpenPorts(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2)
{
  void *v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 58, &v5, &v6);
  if (!v6)
    return 0;
  v3 = *(_DWORD *)(v6 - 12) != 0;
  WTF::fastFree((WTF *)(v6 - 16), v2);
  return v3;
}

uint64_t *WebKit::WebExtensionContext::disconnectPortsForPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *i;
  int v15;
  BOOL v16;
  BOOL v17;
  _BOOL4 v18;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL4 v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 58);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
  v6 = result;
  if (v4)
    v7 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v7 = 0;
  if (v7 == result)
    return result;
  result = (uint64_t *)((char *)this + 464);
  v8 = (unsigned __int8 *)v6[1];
  v6[1] = 0;
  v9 = *((_QWORD *)this + 58);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 16 * *(unsigned int *)(v9 - 4));
    if (v10 == v6)
      goto LABEL_12;
  }
  else
  {
    if (!v6)
      goto LABEL_12;
    v10 = 0;
  }
  if (v10 != v6)
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, v6);
LABEL_12:
  if (v8)
  {
    if (*((_DWORD *)v8 - 3))
    {
      v11 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
        v31 = 134349056;
        v32 = v30;
        _os_log_debug_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEBUG, "Disconnecting ports for page %{public}llu", (uint8_t *)&v31, 0xCu);
      }

      if (*((_DWORD *)v8 - 3))
      {
        v12 = *((unsigned int *)v8 - 1);
        if ((_DWORD)v12)
        {
          v13 = 24 * v12;
          for (i = v8; ; i += 24)
          {
            v15 = *i;
            v16 = v15 == 255 && i[1] == 255;
            v17 = v16 && *((_QWORD *)i + 1) == 0;
            v18 = v17;
            if (v15 != 254 && !v18)
              break;
            v13 -= 24;
            if (!v13)
              return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
          }
        }
        else
        {
          i = v8;
        }
        v20 = &v8[24 * v12];
        if (v20 != i)
        {
LABEL_36:
          v21 = *i;
          v22 = i[1];
          v23 = *((_QWORD *)i + 1);
          if (*((_DWORD *)i + 4))
          {
            v24 = 0;
            do
            {
              WebKit::WebExtensionContext::removePort((uint64_t)this, v21, v22, v23, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
              ++v24;
            }
            while (v24 < *((unsigned int *)i + 4));
          }
          WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded((uint64_t)this, v21, v22, v23);
          while (1)
          {
            i += 24;
            if (i == v20)
              break;
            v25 = *i;
            v28 = v25 == 255 && i[1] == 255 && *((_QWORD *)i + 1) == 0;
            if (v25 != 254 && !v28)
            {
              if (i != v20)
                goto LABEL_36;
              return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
            }
          }
        }
      }
    }
    return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
  }
  return result;
}

void sub_19772129C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::fastFree((WTF *)(v2 - 16), a2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionContext::addPorts(uint64_t a1, int a2, uint8_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  _BOOL8 isBackgroundPage;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint8_t v41;
  int i;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v57[2];
  int v58;
  uint8_t buf[8];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  result = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a5);
  v8 = result;
  v10 = v9;
  if (*a5)
    v11 = (uint64_t)&(*a5)[2 * *((unsigned int *)*a5 - 1)];
  else
    v11 = 0;
  if (v11 != result)
  {
    v12 = (uint64_t *)(a1 + 464);
    do
    {
      v13 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        __asm { BR              X8 }

      isBackgroundPage = WebKit::WebExtensionContext::isBackgroundPage(a1, *(_QWORD *)v8);
      if (isBackgroundPage)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isBackgroundPage);
        *(_QWORD *)(a1 + 344) = v15;
      }
      LOBYTE(v57[0]) = a2;
      v57[1] = a4;
      v16 = *(_DWORD *)(v8 + 8);
      v58 = 0;
      WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)buf, (uint64_t *)(a1 + 456), (unsigned __int8 *)v57, &v58);
      *(_DWORD *)(*(_QWORD *)buf + 16) += v16;
      v18 = *v12;
      if (*v12
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v12, 0), (v18 = *v12) != 0))
      {
        v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = *(_QWORD *)v8;
      v21 = *(_QWORD *)v8 + ~(*(_QWORD *)v8 << 32);
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v19 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
      v25 = (uint64_t *)(v18 + 16 * v24);
      v26 = *v25;
      if (*v25)
      {
        v27 = 0;
        v28 = 1;
        while (v26 != v20)
        {
          if (v26 == -1)
            v27 = v25;
          v24 = (v24 + v28) & v19;
          v25 = (uint64_t *)(v18 + 16 * v24);
          v26 = *v25;
          ++v28;
          if (!*v25)
          {
            if (v27)
            {
              *v27 = 0;
              v27[1] = 0;
              --*(_DWORD *)(*v12 - 16);
              v20 = *(_QWORD *)v8;
              v25 = v27;
            }
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        v29 = v25[1];
        *v25 = v20;
        v25[1] = 0;
        if (v29)
          WTF::fastFree((WTF *)(v29 - 16), v17);
        v30 = *v12;
        if (*v12)
          v31 = *(_DWORD *)(v30 - 12) + 1;
        else
          v31 = 1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v12;
        if (*v12)
          v33 = *(_DWORD *)(v32 - 12);
        else
          v33 = 0;
        v34 = (*(_DWORD *)(v32 - 16) + v33);
        v35 = *(unsigned int *)(v32 - 4);
        if (v35 <= 0x400)
        {
          if (3 * v35 > 4 * v34)
            goto LABEL_31;
LABEL_30:
          v25 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v12, v25);
          goto LABEL_31;
        }
        if (v35 <= 2 * v34)
          goto LABEL_30;
      }
LABEL_31:
      v60 = a4;
      v38 = v25[1];
      v37 = v25 + 1;
      v36 = v38;
      buf[0] = a2;
      buf[1] = a3;
      if (v38
        || (WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v37, 0), (v36 = *v37) != 0))
      {
        v39 = *(_DWORD *)(v36 - 8);
      }
      else
      {
        v39 = 0;
      }
      result = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash<0ul>(buf);
      v40 = 0;
      v41 = buf[0];
      for (i = 1; ; ++i)
      {
        v43 = result & v39;
        v44 = (unsigned __int8 *)(v36 + 24 * (result & v39));
        v45 = *v44;
        v46 = v44[1];
        if (v45 == 255 && v46 == 255 && !*((_QWORD *)v44 + 1))
          break;
        if (v45 == buf[0] && v46 == buf[1] && *((_QWORD *)v44 + 1) == v60)
          goto LABEL_57;
        if (v45 == 254)
          v40 = (unsigned __int8 *)(v36 + 24 * v43);
        result = i + v43;
      }
      if (v40)
      {
        *(_OWORD *)v40 = xmmword_1978D2550;
        *((_DWORD *)v40 + 4) = 0;
        --*(_DWORD *)(*v37 - 16);
        v41 = buf[0];
        v44 = v40;
      }
      *v44 = v41;
      v44[1] = buf[1];
      *((_QWORD *)v44 + 1) = v60;
      *((_DWORD *)v44 + 4) = 0;
      v48 = *v37;
      if (*v37)
        v49 = *(_DWORD *)(v48 - 12) + 1;
      else
        v49 = 1;
      *(_DWORD *)(v48 - 12) = v49;
      v50 = *v37;
      if (*v37)
        v51 = *(_DWORD *)(v50 - 12);
      else
        v51 = 0;
      v52 = (*(_DWORD *)(v50 - 16) + v51);
      v53 = *(unsigned int *)(v50 - 4);
      if (v53 <= 0x400)
      {
        if (3 * v53 > 4 * v52)
          goto LABEL_57;
LABEL_56:
        result = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v37, v44);
        v44 = (unsigned __int8 *)result;
        goto LABEL_57;
      }
      if (v53 <= 2 * v52)
        goto LABEL_56;
LABEL_57:
      ++*((_DWORD *)v44 + 4);
      while (1)
      {
        v8 += 16;
        if (v8 == v10)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_62;
      }
      v8 = v10;
LABEL_62:
      ;
    }
    while (v8 != v11);
  }
  return result;
}

void sub_197721810(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  void *v3;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;

  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::WebExtensionContext::clearQueuedPortMessages(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned __int8 *result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8[8];
  uint64_t v9;

  v4 = (uint64_t *)(a1 + 472);
  v8[0] = a2;
  v9 = a3;
  result = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 472), v8);
  v6 = *(_QWORD *)(a1 + 472);
  if (v6)
  {
    v7 = (unsigned __int8 *)(v6 + 32 * *(unsigned int *)(v6 - 4));
    if (v7 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v7 = 0;
  }
  if (v7 != result)
    return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, result);
  return result;
}

void WebKit::WebExtensionContext::addNativePort(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  __CFString *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  int v27;
  _BYTE buf[12];
  __int16 v29;
  __CFString *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(WTF::StringImpl **)(a2 + 32);
  v5 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v26[0])
      v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v24 = &stru_1E351F1B8;
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v4;
    v29 = 2114;
    v30 = v24;
    _os_log_debug_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEBUG, "Added 1 port for channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v26[0])
    {
      if (*(_DWORD *)v26[0] == 2)
        WTF::StringImpl::destroy(v26[0], v25);
      else
        *(_DWORD *)v26[0] -= 2;
    }

  }
  LOBYTE(v26[0]) = 2;
  v26[1] = v4;
  v27 = 0;
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)buf, (uint64_t *)(a1 + 456), (unsigned __int8 *)v26, &v27);
  ++*(_DWORD *)(*(_QWORD *)buf + 16);
  v6 = (uint64_t *)(a1 + 480);
  v7 = *(_QWORD *)(a1 + 480);
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 480)),
        (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (WTF::StringImpl **)(v7 + 16 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_13:
    *v13 = v4;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v17 = v13[1];
    v13[1] = (WTF::StringImpl *)a2;
    if (v17)
      CFRelease(*((CFTypeRef *)v17 + 1));
    v18 = *v6;
    if (*v6)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v6;
    if (*v6)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        return;
    }
    else if (3 * v23 > 4 * v22)
    {
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6);
    return;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v4)
  {
    if (v14 == (WTF::StringImpl *)-1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (WTF::StringImpl **)(v7 + 16 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v13 = v15;
      }
      goto LABEL_13;
    }
  }
}

void sub_197721B64(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::removeNativePort(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __CFString *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  __CFString *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 32);
  v4 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v28)
      v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v26 = &stru_1E351F1B8;
    *(_DWORD *)buf = 134349314;
    v30 = v3;
    v31 = 2114;
    v32 = v26;
    _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Removed 1 port for channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }

  }
  WebKit::WebExtensionContext::clearQueuedPortMessages(a1, 0, v3);
  v5 = *(unsigned __int8 **)(a1 + 456);
  v6 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, 2u, v3);
  if (v5)
    v7 = &v5[24 * *((unsigned int *)v5 - 1)];
  else
    v7 = 0;
  if (v7 != v6)
  {
    if (*((_DWORD *)v6 + 4) != 1)
    {
      --*((_DWORD *)v6 + 4);
      goto LABEL_8;
    }
    if (v5)
    {
      v16 = &v5[24 * *((unsigned int *)v5 - 1)];
      if (v16 == v6)
        goto LABEL_8;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v16 = 0;
    }
    if (v16 != v6)
      WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 456), v6);
  }
LABEL_8:
  v8 = *(_QWORD *)(a1 + 480);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != v3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v15;
        if (v14 == v3)
          goto LABEL_18;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_18:
    if (v13 != *(_DWORD *)(v8 - 4))
    {
      v17 = (uint64_t *)(a1 + 480);
      v18 = (_QWORD *)(v8 + 16 * v13);
      v19 = v18[1];
      *v18 = -1;
      v18[1] = 0;
      if (v19)
        CFRelease(*(CFTypeRef *)(v19 + 8));
      ++*(_DWORD *)(*v17 - 16);
      v20 = *v17;
      if (*v17)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v17;
      if (*v17)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v17, v24 >> 1);
      }
    }
  }
}

void sub_197721E60(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint8_t buf[8];
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = a4;
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v12, *(char **)(a1 + 472), a3, a4);
  if (v13)
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    if (v13)
    {
      v9 = v12;
      v10 = 24 * v13;
      do
      {
        *(_QWORD *)buf = v9 + 8;
        v16 = &v14;
        v17 = v9;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(a2, (uint64_t **)buf, *(_QWORD *)(a1 + 32));
        v9 += 24;
        v10 -= 24;
      }
      while (v10);
    }
  }
  return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v7);
}

void sub_1977220A0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  WTF::StringImpl *v10;
  void *v12;

  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;

  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  __CFString *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  unsigned int v17;
  _BYTE buf[12];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v16, *(char **)(a1 + 472), 2u, a2);
  v5 = v17;
  if (v17)
  {
    v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 480), a2);
    if (v6)
    {
      v7 = v6;
      v8 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v5;
        v19 = 2050;
        v20 = a2;
        _os_log_debug_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEBUG, "Sending %{public}zu queued message(s) to port channel %{public}llu in native world", buf, 0x16u);
        if (!v17)
          return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
        v9 = v16;
        v10 = &v16[3 * v17];
      }
      else
      {
        v9 = v16;
        v10 = &v16[3 * v5];
      }
      do
      {
        if (*v9)
          v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v11 = &stru_1E351F1B8;
        WebKit::parseJSON(v11, 1, 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E34F7360;
        v13[1] = v7;
        *(_QWORD *)buf = v13;
        WebKit::WebExtensionMessagePort::sendMessage(v7, v12, (uint64_t *)buf);
        v14 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);

        v9 += 3;
      }
      while (v9 != v10);
    }
  }
  return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
}

void sub_1977222A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v13;
  void *v14;

  v13 = a11;
  a11 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);

  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>(uint64_t *result, _QWORD **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v3 = result[8];
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = result;
    result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
    v7 = result;
    v9 = v8;
    v10 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((uint64_t *)v10 != result)
    {
      do
      {
        v11 = *v7;
        v12 = *a3;
        v13 = v6[4];
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1574;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v21 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v12);
        LOBYTE(v19) = 0;
        v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          v16 = v19;
          v19 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        result = (uint64_t *)v21;
        v21 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
          result = (uint64_t *)WTF::fastFree(v17, v18);
        }
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_16;
        }
        v7 = v9;
LABEL_16:
        ;
      }
      while (v7 != (uint64_t *)v10);
    }
  }
  return result;
}

void sub_19772245C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  void *v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  void *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31;
  unsigned __int8 *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = (_QWORD *)(v10 + 24);
    do
    {
      *(v12 - 1) = 255;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned __int8 *)(v6 + 32 * v13);
      v16 = *v15;
      if (v16 != 254)
      {
        v17 = (void *)*((_QWORD *)v15 + 1);
        if (v16 == 255 && v17 == 0)
        {
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 32 * v13 + 16, v17);
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v16, (uint64_t)v17);
          v23 = 0;
          do
          {
            v24 = v21 & v20;
            v25 = (unsigned __int8 *)(v19 + 32 * v24);
            v21 = ++v23 + v24;
          }
          while (*v25 != 255 || *((_QWORD *)v25 + 1) != 0);
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v25 + 16), v22);
          *(_OWORD *)v25 = *(_OWORD *)v15;
          v27 = v6 + 32 * v13;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = 0;
          v28 = *(_QWORD *)(v27 + 16);
          v27 += 16;
          *(_QWORD *)v27 = 0;
          *((_QWORD *)v25 + 2) = v28;
          v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          *((_DWORD *)v25 + 6) = v29;
          v30 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *((_DWORD *)v25 + 7) = v30;
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
          if (v15 == a3)
            v14 = v25;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

unint64_t WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_OWORD *)(v7 + 2) = *(_OWORD *)((char *)v9 + 8);
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = *a2 + ~(*a2 << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == *a2)
      return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable(a3, (unsigned __int8 **)(v3 + 16 * v8 + 8));
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == *a2)
        return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable(a3, (unsigned __int8 **)(v3 + 16 * v8 + 8));
    }
  }
  *a3 = 0;
  return result;
}

uint64_t *WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t Table;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  _BOOL4 v21;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int i;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  BOOL v32;
  BOOL v33;
  _BOOL4 v34;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  Table = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::allocateTable(v11);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[24 * v14];
    if (*((_DWORD *)v13 - 3))
    {
      v16 = *a2;
      if ((_DWORD)v14)
      {
        v17 = 24 * v14;
        v16 = v13;
        while (1)
        {
          v18 = *v16;
          v19 = v18 == 255 && v16[1] == 255;
          v20 = v19 && *((_QWORD *)v16 + 1) == 0;
          v21 = v20;
          if (v18 != 254 && !v21)
            break;
          v16 += 24;
          v17 -= 24;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_36;
          }
        }
      }
      goto LABEL_36;
    }
    v16 = &v13[24 * v14];
  }
  else
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  v15 = &v13[24 * v14];
LABEL_36:
  if (v13)
    v23 = &v13[24 * *((unsigned int *)v13 - 1)];
  else
    v23 = 0;
  while (v16 != v23)
  {
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 8);
    else
      v25 = 0;
    v26 = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash<0ul>(v16);
    for (i = 0; ; v26 = i + v28)
    {
      v28 = v26 & v25;
      v29 = (unsigned __int8 *)(v24 + 24 * (v26 & v25));
      if (*v29 == 255 && v29[1] == 255 && !*((_QWORD *)v29 + 1))
        break;
      ++i;
    }
    *v29 = *v16;
    v29[1] = v16[1];
    *((_QWORD *)v29 + 1) = *((_QWORD *)v16 + 1);
    *(_DWORD *)(v24 + 24 * v28 + 16) = *((_DWORD *)v16 + 4);
    v30 = v16 + 24;
    v16 = v15;
    if (v30 != v15)
    {
      v16 = v30;
      while (1)
      {
        v31 = *v16;
        v32 = v31 == 255 && v16[1] == 255;
        v33 = v32 && *((_QWORD *)v16 + 1) == 0;
        v34 = v33;
        if (v31 != 254 && !v34)
          break;
        v16 += 24;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_DWORD *)(v2 + 32);
    do
    {
      *((_OWORD *)v5 - 1) = xmmword_1978D2550;
      *v5 = 0;
      v5 += 6;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash<0ul>(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = ~(*a1 << 15) + *a1;
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3 = ~(a1[1] << 15) + a1[1];
  v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  v5 = *((_QWORD *)a1 + 1) + ~(*((_QWORD *)a1 + 1) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                              + 95187966
                                                              * (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27))))) >> 4))) >> 4;
}

unint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t result;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v18;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  result = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a3, v11);
  v13 = result & v9;
  v14 = (unsigned __int8 *)(v8 + 24 * (result & v9));
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  if (v15 != 255 || v16 != 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v10 == v15 && v16 == v11)
      {
        v27 = 0;
        v28 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_34;
      }
      if (v15 == 254)
        v18 = v14;
      v13 = (v13 + v19) & v9;
      v14 = (unsigned __int8 *)(v8 + 24 * v13);
      v15 = *v14;
      v16 = *((_QWORD *)v14 + 1);
      ++v19;
    }
    while (v15 != 255 || v16 != 0);
    if (v18)
    {
      *(_OWORD *)v18 = xmmword_1978D2560;
      *((_DWORD *)v18 + 4) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v10) = *a3;
      v14 = v18;
    }
  }
  *v14 = v10;
  *((_QWORD *)v14 + 1) = *((_QWORD *)a3 + 1);
  *((_DWORD *)v14 + 4) = *a4;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_28:
      result = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, v14);
      v14 = (unsigned __int8 *)result;
      v23 = *a2;
      if (*a2)
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      else
        LODWORD(v26) = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_28;
  }
  v28 = v23 + 24 * v26;
  v27 = 1;
LABEL_34:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  __int128 v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 32);
    do
    {
      *((_OWORD *)v12 - 1) = xmmword_1978D2560;
      *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned __int8 *)(v6 + 24 * v13);
      v16 = *v15;
      if (v16 != 254)
      {
        v10 = (void *)*((_QWORD *)v15 + 1);
        if (v16 != 255 || v10 != 0)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v16, (uint64_t)v10);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = (unsigned __int8 *)(v18 + 24 * (v20 & v19));
            v20 = ++v21 + (v20 & v19);
          }
          while (*v23 != 255 || *((_QWORD *)v23 + 1) != 0);
          v25 = *(_OWORD *)v15;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v23 = v25;
          if (v15 == a3)
            v14 = v18 + 24 * v22;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int i;
  unsigned int v19;
  unsigned __int8 *v20;
  __int128 v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned __int8 *)(v6 + 24 * v11);
      v14 = *v13;
      if (v14 != 254 && (v14 != 255 || v13[1] != 255 || *((_QWORD *)v13 + 1)))
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash<0ul>((unsigned __int8 *)(v6 + 24 * v11));
        for (i = 0; ; v17 = i + v19)
        {
          v19 = v17 & v16;
          v20 = (unsigned __int8 *)(v15 + 24 * (v17 & v16));
          if (*v20 == 255 && v20[1] == 255 && !*((_QWORD *)v20 + 1))
            break;
          ++i;
        }
        v21 = *(_OWORD *)v13;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v20 = v21;
        if (v13 == a3)
          v12 = v15 + 24 * v19;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -2;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(unsigned __int8 *result, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v11;

  if (result)
  {
    v5 = result;
    v6 = *((_DWORD *)result - 2);
    v7 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a2, a3) & v6;
    result = &v5[24 * v7];
    v8 = *result;
    v9 = *((_QWORD *)result + 1);
    if (v8 != a2 || v9 != a3)
    {
      v11 = 1;
      while ((_BYTE)v8 != 0xFF || v9 != 0)
      {
        v7 = (v7 + v11) & v6;
        result = &v5[24 * v7];
        v8 = *result;
        v9 = *((_QWORD *)result + 1);
        ++v11;
        if (v8 == a2 && v9 == a3)
          return result;
      }
      return &v5[24 * *((unsigned int *)v5 - 1)];
    }
  }
  return result;
}

uint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t result, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int i;
  unsigned __int8 *v14;

  if (result)
  {
    v5 = result;
    v6 = *(_DWORD *)(result - 8);
    v7 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a2, a3) & v6;
    v8 = (unsigned __int8 *)(v5 + 24 * v7);
    v9 = *v8;
    v10 = *((_QWORD *)v8 + 1);
    if (v9 == a2 && v10 == a3)
    {
      return *(unsigned int *)(v5 + 24 * v7 + 16);
    }
    else
    {
      for (i = 1; (_BYTE)v9 != 0xFF || v10 != 0; ++i)
      {
        v7 = (v7 + i) & v6;
        v14 = (unsigned __int8 *)(v5 + 24 * v7);
        v9 = *v14;
        v10 = *((_QWORD *)v14 + 1);
        if (v9 == a2 && v10 == a3)
          return *(unsigned int *)(v5 + 24 * v7 + 16);
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, char *a2, unsigned __int8 a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v15;
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD v27[2];

  if (!a2)
  {
LABEL_24:
    v27[0] = 0;
    *(_QWORD *)a1 = 0;
    v27[1] = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, a2);
  }
  v8 = *((_DWORD *)a2 - 2);
  result = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a3, a4);
  v10 = result & v8;
  v11 = &a2[32 * v10];
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  if (v12 != a3 || v13 != a4)
  {
    v15 = 1;
    while ((_BYTE)v12 != 0xFF || v13 != 0)
    {
      v10 = ((_DWORD)v10 + v15) & v8;
      v17 = &a2[32 * v10];
      v12 = *v17;
      v13 = *((_QWORD *)v17 + 1);
      ++v15;
      if (v12 == a3 && v13 == a4)
        goto LABEL_16;
    }
    goto LABEL_24;
  }
LABEL_16:
  v19 = &a2[32 * v10];
  v20 = *((unsigned int *)v19 + 7);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v20;
  if ((_DWORD)v20)
  {
    if (v20 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v21 = v19 + 16;
      v22 = 24 * v20;
      result = WTF::fastMalloc((WTF *)(24 * v20));
      *(_DWORD *)(a1 + 8) = (v22 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = result;
      v23 = *((_DWORD *)v21 + 3);
      if (v23)
      {
        v24 = *(_QWORD *)v21;
        v25 = *(_QWORD *)v21 + 24 * v23;
        do
        {
          v26 = *(_DWORD **)v24;
          if (*(_QWORD *)v24)
            *v26 += 2;
          *(_QWORD *)result = v26;
          *(_OWORD *)(result + 8) = *(_OWORD *)(v24 + 8);
          v24 += 24;
          result += 24;
        }
        while (v24 != v25);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1575;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v6, *a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2[2]);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_19772357C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>>::call(uint64_t result, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      v3 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v4 = *(_QWORD *)(result + 8);
      if (v3)
        *(_DWORD *)v3 += 2;
    }
    else
    {
      v3 = 0;
      v4 = *(_QWORD *)(result + 8);
    }
    result = WebKit::WebExtensionMessagePort::remove(v4);
    if (v2 && v3)
    {
      if (*(_DWORD *)v3 == 2)
        result = WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void sub_197723664(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  int v3;
  int v4;

  v4 = v3;
  if (v4 && v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -2;
  result = (unsigned __int8 *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 16), a2 + 16);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  int v8;
  uint64_t v9;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a2, v5) & v3;
  result = (unsigned __int8 *)(v2 + 32 * v6);
  v8 = *result;
  v9 = *((_QWORD *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    v11 = 1;
    while ((_BYTE)v8 != 0xFF || v9 != 0)
    {
      v6 = ((_DWORD)v6 + v11) & v3;
      result = (unsigned __int8 *)(v2 + 32 * v6);
      v8 = *result;
      v9 = *((_QWORD *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5)
        return result;
    }
    return (unsigned __int8 *)(v2 + 32 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WebKit::WebExtensionContext::runtimeGetBackgroundPage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34F7418;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v7 = v5;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, (uint64_t *)&v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197723884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::runtimeOpenOptionsPage(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  NSString *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  int v16;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  id v33;
  WTF::StringImpl *v34;
  id WeakRetained;
  uint64_t v36;
  void *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  unsigned int v54;

  WebKit::WebExtensionContext::optionsPageURL((WebKit::WebExtensionContext *)a1, (WTF::URL *)&v52);
  v6 = v53;
  v7 = v52;
  v52 = 0;
  if (!v7)
  {
LABEL_4:
    if ((v6 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v7, v4);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.openOptionsPage()"), 0, CFSTR("no options page is specified in the manifest"), v5, &v51);
    v8 = v51;
    v51 = 0;
    v52 = v8;
    LOBYTE(v53) = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v52);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if ((_BYTE)v53)
    {
      v11 = v52;
      v52 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v25 = v51;
    v51 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v10);
      else
        *(_DWORD *)v25 -= 2;
    }
    return;
  }
LABEL_10:
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = (id *)(v13 - 16);
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  WebKit::WebExtensionController::delegate(v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_opt_respondsToSelector();
  if (((v16 | objc_opt_respondsToSelector()) & 1) != 0)
  {
    if ((v16 & 1) != 0)
    {
      v18 = *(_QWORD *)(a1 + 64);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
          v20 = (id *)(v19 - 16);
        else
          v20 = 0;
      }
      else
      {
        v20 = 0;
      }
      WebKit::WebExtension::wrapper(v20);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::wrapper((id *)a1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = *a2;
      *a2 = 0;
      v30 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v30 = MEMORY[0x1E0C809A0];
      v30[1] = 50331650;
      v30[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
      v30[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
      v30[4] = v29;
      v31 = _Block_copy(v30);

      v32 = _Block_copy(v31);
      objc_msgSend(v15, "webExtensionController:openOptionsPageForExtensionContext:completionHandler:", v27, v28, v32);

    }
    else
    {
      if (*(_DWORD *)(a1 + 508))
        WebKit::WebExtensionContext::getWindow(a1, **(_QWORD **)(a1 + 496), 0, 0, 0, (uint64_t *)&v51);
      else
        v51 = 0;
      v33 = -[_WKWebExtensionTabCreationOptions _init]([_WKWebExtensionTabCreationOptions alloc], "_init");
      objc_msgSend(v33, "_setShouldActivate:", 1);
      objc_msgSend(v33, "_setShouldSelect:", 1);
      v34 = v51;
      if (v51)
        WeakRetained = objc_loadWeakRetained((id *)v51 + 4);
      else
        WeakRetained = 0;
      objc_msgSend(v33, "_setDesiredWindow:", WeakRetained);
      if (v34)
      {

        WebKit::WebExtensionWindow::tabs((uint64_t)v34, 0, (uint64_t *)&v52);
        v36 = v54;
      }
      else
      {
        v36 = 0;
      }
      objc_msgSend(v33, "_setDesiredIndex:", v36);
      if (v34)
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v37);
      WebKit::WebExtensionContext::optionsPageURL((WebKit::WebExtensionContext *)a1, (WTF::URL *)&v50);
      WTF::URL::operator NSURL *();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "_setDesiredURL:", v38);

      v40 = v50;
      v50 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = *(_QWORD *)(a1 + 64);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
          v43 = (id *)(v42 - 16);
        else
          v43 = 0;
      }
      else
      {
        v43 = 0;
      }
      WebKit::WebExtension::wrapper(v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::wrapper((id *)a1);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = *a2;
      *a2 = 0;
      v47 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v47 = MEMORY[0x1E0C809A0];
      v47[1] = 50331650;
      v47[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke;
      v47[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::descriptor;
      v47[4] = v46;
      v48 = _Block_copy(v47);

      v49 = _Block_copy(v48);
      objc_msgSend(v15, "webExtensionController:openNewTabWithOptions:forExtensionContext:completionHandler:", v44, v33, v45, v49);

      if (v34)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v34);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.openOptionsPage()"), 0, CFSTR("it is not implemented"), v17, &v51);
    v21 = v51;
    v51 = 0;
    v52 = v21;
    LOBYTE(v53) = 1;
    v22 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v52);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if ((_BYTE)v53)
    {
      v24 = v52;
      v52 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v26 = v51;
    v51 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
  }

}

void sub_197723DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, char a17)
{
  void *v17;
  void *v18;

  if (a15)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)a15);

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::runtimeSendMessage(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, WTF::StringImpl **a5)
{
  const WTF::StringImpl *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WebKit::WebExtensionTab *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  NSString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *result;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  char v51;
  _BYTE v52[16];
  WTF::StringImpl *v53;
  char v54;
  _OWORD v55[2];
  WTF::StringImpl *v56;
  __int128 v57;
  __int128 v58;
  char v59;
  WTF::StringImpl *v60;
  WebKit::WebExtensionTab *v61;
  WTF::StringImpl *v62;
  char v63;
  _BYTE v64[184];
  _OWORD v65[2];
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;
  char v69;

  v9 = *a2;
  if (v9 && *((_DWORD *)v9 + 1) && (WTF::equal(*(WTF **)(a1 + 112), v9, a3) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.sendMessage()"), CFSTR("extensionID"), CFSTR("cross-extension messaging is not supported"), v10, &v62);
    v23 = v62;
    v62 = 0;
    v46 = (uint64_t)v23;
    LODWORD(v47) = 1;
    v24 = *a5;
    *a5 = 0;
    (*(void (**)(WTF::StringImpl *, uint64_t *))(*(_QWORD *)v24 + 16))(v24, &v46);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    if ((_DWORD)v47 != -1)
      ((void (*)(WebKit::WebExtensionTab **, uint64_t *))off_1E34F73B8[v47])(&v61, &v46);
    LODWORD(v47) = -1;
    goto LABEL_71;
  }
  LOBYTE(v62) = 0;
  v63 = 0;
  if (*(_BYTE *)(a4 + 8))
  {
    v11 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v11 += 2;
    v62 = v11;
    v63 = 1;
  }
  std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v64, a4 + 16);
  v65[0] = *(_OWORD *)(a4 + 200);
  *(_OWORD *)((char *)v65 + 9) = *(_OWORD *)(a4 + 209);
  v12 = *(WTF::StringImpl **)(a4 + 232);
  if (v12)
    *(_DWORD *)v12 += 2;
  v66 = v12;
  v13 = *(_OWORD *)(a4 + 256);
  v67 = *(_OWORD *)(a4 + 240);
  v68 = v13;
  WebKit::WebExtensionContext::getCurrentTab(a1, *(_QWORD *)(a4 + 216), 0, 0, &v61);
  v14 = v61;
  if (v61)
  {
    WebKit::WebExtensionTab::parameters(v61, (uint64_t)&v46);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v64, (uint64_t)&v46);
    if (v54)
    {
      v16 = v53;
      v53 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    if (v52[8])
    {
      v26 = v48;
      v48 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v15);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v14);
    goto LABEL_33;
  }
  if (*(_BYTE *)(a4 + 224) != 1)
  {
LABEL_33:
    v69 = 28;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v61, &v69, 1);
    v46 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v27 = *a5;
    *a5 = 0;
    v47 = a1;
    v48 = v27;
    v28 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v28 += 2;
    v49 = v28;
    LOBYTE(v50) = 0;
    v51 = 0;
    if (v63)
    {
      v29 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      v50 = v29;
      v51 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v52, (uint64_t)v64);
    v55[0] = v65[0];
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v65 + 9);
    v30 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    v56 = v30;
    v57 = v67;
    v58 = v68;
    v59 = 0;
    v31 = WTF::fastMalloc((WTF *)0x140);
    v32 = v31;
    *(_QWORD *)v31 = off_1E34F7450;
    *(_QWORD *)(v31 + 8) = v46;
    *(_QWORD *)(v31 + 16) = v47;
    v33 = v48;
    v47 = 0;
    v48 = 0;
    *(_QWORD *)(v31 + 24) = v33;
    v34 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    *(_BYTE *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 32) = v34;
    *(_BYTE *)(v31 + 48) = 0;
    if (v51)
    {
      v35 = v50;
      v50 = 0;
      *(_QWORD *)(v31 + 40) = v35;
      *(_BYTE *)(v31 + 48) = 1;
    }
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v31 + 56), (uint64_t)v52);
    v36 = v55[0];
    *(_OWORD *)(v32 + 249) = *(_OWORD *)((char *)v55 + 9);
    *(_OWORD *)(v32 + 240) = v36;
    WTF::URL::URL(v32 + 272, (uint64_t *)&v56);
    *(_BYTE *)(v32 + 312) = v59;
    v60 = (WTF::StringImpl *)v32;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, (unsigned __int8 **)&v61, (uint64_t *)&v60);
    v38 = v60;
    v60 = 0;
    if (v38)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 8))(v38);
    v39 = v56;
    v56 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v37);
      else
        *(_DWORD *)v39 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v37);
    if (v51)
    {
      v40 = v50;
      v50 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v21);
        else
          *(_DWORD *)v40 -= 2;
      }
    }
    v41 = v49;
    v49 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v21);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v48;
    v48 = 0;
    if (v42)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
    v43 = v47;
    v47 = 0;
    if (v43)
      CFRelease(*(CFTypeRef *)(v43 + 8));
    if (v61)
      WTF::fastFree((WebKit::WebExtensionTab *)((char *)v61 - 16), v21);
    goto LABEL_66;
  }
  v17 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v46) = 0;
    _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Tab not found for message for content script message", (uint8_t *)&v46, 2u);
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.sendMessage()"), 0, CFSTR("tab not found"), v18, &v60);
  v19 = v60;
  v60 = 0;
  v46 = (uint64_t)v19;
  LODWORD(v47) = 1;
  v20 = *a5;
  *a5 = 0;
  (*(void (**)(WTF::StringImpl *, uint64_t *))(*(_QWORD *)v20 + 16))(v20, &v46);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  if ((_DWORD)v47 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F73B8[v47])(&v69, &v46);
  LODWORD(v47) = -1;
  v22 = v60;
  v60 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_66:
  v44 = v66;
  v66 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v21);
    else
      *(_DWORD *)v44 -= 2;
  }
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v21);
  if (v63)
  {
LABEL_71:
    result = v62;
    v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197724548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,WTF::StringImpl *a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;

  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  if ((_DWORD)a10 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F73B8[a10])(v53 - 81, &a9);
  LODWORD(a10) = -1;
  v56 = a48;
  a48 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v55);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)STACK[0x230];
  STACK[0x230] = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v55);
    else
      *(_DWORD *)v57 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v51, v55);
  if (a51)
  {
    v59 = a50;
    a50 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_197724838()
{
  JUMPOUT(0x197724804);
}

uint64_t std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 176))
  {
    v4 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = v4;
    std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((WTF::StringImpl *)(a1 + 16), (unsigned __int8 *)(a2 + 16));
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1 + 64, a2 + 64);
    v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v5;
    v6 = *(_OWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 154) = *(_OWORD *)(a2 + 154);
    *(_OWORD *)(a1 + 128) = v7;
    *(_OWORD *)(a1 + 144) = v8;
    *(_OWORD *)(a1 + 112) = v6;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(a1, a2);
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionContext::runtimeConnect(uint64_t a1, const WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, WTF::StringImpl **a6)
{
  int v12;
  void *v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  NSString *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  WebKit::WebExtensionTab *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  NSString *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *result;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  char v60;
  char v61[8];
  WTF::StringImpl *v62;
  char v63;
  _OWORD v64[2];
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  char v69;
  WTF::StringImpl *v70;
  WebKit::WebExtensionTab *v71;
  WTF::StringImpl *v72;
  char v73;
  _BYTE v74[184];
  _OWORD v75[2];
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 *)(a5 + 224);
  v72 = *(WTF::StringImpl **)(a5 + 216);
  WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::HashCountedSet((uint64_t *)&v54, (uint64_t *)&v72, 1);
  WebKit::WebExtensionContext::addPorts(a1, v12, 0, a3, (_QWORD **)&v54);
  if (v54)
    WTF::fastFree((WTF::StringImpl *)((char *)v54 - 16), v13);
  v15 = *a2;
  if (*a2 && *((_DWORD *)v15 + 1) && (WTF::equal(*(WTF **)(a1 + 112), v15, v14) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connect()"), CFSTR("extensionID"), CFSTR("cross-extension messaging is not supported"), v16, &v72);
    v29 = v72;
    v72 = 0;
    v54 = v29;
    LOBYTE(v55) = 1;
    v30 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v30 + 16))(v30, &v54);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
    if ((_BYTE)v55)
    {
      v32 = v54;
      v54 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    goto LABEL_73;
  }
  LOBYTE(v72) = 0;
  v73 = 0;
  if (*(_BYTE *)(a5 + 8))
  {
    v17 = *(WTF::StringImpl **)a5;
    if (*(_QWORD *)a5)
      *(_DWORD *)v17 += 2;
    v72 = v17;
    v73 = 1;
  }
  std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v74, a5 + 16);
  v75[0] = *(_OWORD *)(a5 + 200);
  *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)(a5 + 209);
  v18 = *(WTF::StringImpl **)(a5 + 232);
  if (v18)
    *(_DWORD *)v18 += 2;
  v76 = v18;
  v19 = *(_OWORD *)(a5 + 256);
  v77 = *(_OWORD *)(a5 + 240);
  v78 = v19;
  WebKit::WebExtensionContext::getCurrentTab(a1, *(_QWORD *)(a5 + 216), 0, 0, &v71);
  v20 = v71;
  if (v71)
  {
    WebKit::WebExtensionTab::parameters(v71, (uint64_t)&v54);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v74, (uint64_t)&v54);
    if (v63)
    {
      v22 = v62;
      v62 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    if (v61[0])
    {
      v33 = v56;
      v56 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v21);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v20);
    goto LABEL_35;
  }
  if (*(_BYTE *)(a5 + 224) != 1)
  {
LABEL_35:
    v69 = 25;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v71, &v69, 1);
    v54 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v34 = *a6;
    *a6 = 0;
    v55 = a1;
    v56 = v34;
    v57 = a3;
    v35 = *a4;
    if (*a4)
      *(_DWORD *)v35 += 2;
    v58 = v35;
    LOBYTE(v59) = 0;
    v60 = 0;
    if (v73)
    {
      v36 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      v59 = v36;
      v60 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v61, (uint64_t)v74);
    v64[0] = v75[0];
    *(_OWORD *)((char *)v64 + 9) = *(_OWORD *)((char *)v75 + 9);
    v37 = v76;
    if (v76)
      *(_DWORD *)v76 += 2;
    v65 = v37;
    v66 = v77;
    v67 = v78;
    v68 = v12;
    v38 = WTF::fastMalloc((WTF *)0x148);
    v39 = v38;
    *(_QWORD *)v38 = off_1E34F74D8;
    *(_QWORD *)(v38 + 8) = v54;
    *(_QWORD *)(v38 + 16) = v55;
    v40 = v56;
    v55 = 0;
    v56 = 0;
    *(_QWORD *)(v38 + 24) = v40;
    *(_QWORD *)(v38 + 32) = v57;
    v41 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    *(_BYTE *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 40) = v41;
    *(_BYTE *)(v38 + 56) = 0;
    if (v60)
    {
      v42 = v59;
      v59 = 0;
      *(_QWORD *)(v38 + 48) = v42;
      *(_BYTE *)(v38 + 56) = 1;
    }
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v38 + 64), (uint64_t)v61);
    v43 = v64[0];
    *(_OWORD *)(v39 + 257) = *(_OWORD *)((char *)v64 + 9);
    *(_OWORD *)(v39 + 248) = v43;
    WTF::URL::URL(v39 + 280, (uint64_t *)&v65);
    *(_WORD *)(v39 + 320) = v68;
    v70 = (WTF::StringImpl *)v39;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, (unsigned __int8 **)&v71, (uint64_t *)&v70);
    v45 = v70;
    v70 = 0;
    if (v45)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
    v46 = v65;
    v65 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v44);
      else
        *(_DWORD *)v46 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v44);
    if (v60)
    {
      v47 = v59;
      v59 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v27);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    v48 = v58;
    v58 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v27);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = v56;
    v56 = 0;
    if (v49)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
    v50 = v55;
    v55 = 0;
    if (v50)
      CFRelease(*(CFTypeRef *)(v50 + 8));
    if (v71)
      WTF::fastFree((WebKit::WebExtensionTab *)((char *)v71 - 16), v27);
    goto LABEL_68;
  }
  v23 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v54) = 0;
    _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Tab not found for message for content script port", (uint8_t *)&v54, 2u);
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connect()"), 0, CFSTR("tab not found"), v24, &v70);
  v25 = v70;
  v70 = 0;
  v54 = v25;
  LOBYTE(v55) = 1;
  v26 = *a6;
  *a6 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v26 + 16))(v26, &v54);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
  if ((_BYTE)v55)
  {
    v28 = v54;
    v54 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  v53 = v70;
  v70 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v27);
    else
      *(_DWORD *)v53 -= 2;
  }
LABEL_68:
  v51 = v76;
  v76 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v27);
    else
      *(_DWORD *)v51 -= 2;
  }
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v74, v27);
  if (v73)
  {
LABEL_73:
    result = v72;
    v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197724F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF::StringImpl *a50,uint64_t a51,WTF::StringImpl *a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v56);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a50)
  {
    if (*(_DWORD *)a50 == 2)
      WTF::StringImpl::destroy(a50, v56);
    else
      *(_DWORD *)a50 -= 2;
  }
  v57 = (WTF::StringImpl *)STACK[0x240];
  STACK[0x240] = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v53, v56);
  if (a53 && a52)
  {
    if (*(_DWORD *)a52 == 2)
      WTF::StringImpl::destroy(a52, v58);
    else
      *(_DWORD *)a52 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::runtimeSendNativeMessage(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  __CFString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  void *v12;
  NSString *v13;
  id v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  char v31;

  if (*a3)
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  WebKit::parseJSON(v7, 1, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (id *)(v10 - 16);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WebKit::WebExtensionController::delegate(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*a2)
      v14 = (id)WTF::StringImpl::operator NSString *();
    else
      v14 = 0;
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        v21 = (id *)(v20 - 16);
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    WebKit::WebExtension::wrapper(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::wrapper((id *)a1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *a4;
    *a4 = 0;
    v25 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v25 = MEMORY[0x1E0C809A0];
    v25[1] = 50331650;
    v25[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
    v25[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
    v25[4] = v24;
    v26 = _Block_copy(v25);

    v27 = _Block_copy(v26);
    objc_msgSend(v12, "webExtensionController:sendMessage:toApplicationIdentifier:forExtensionContext:replyHandler:", v22, v8, v14, v23, v27);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.sendNativeMessage()"), 0, CFSTR("native messaging is not supported"), v13, &v28);
    v15 = v28;
    v28 = 0;
    v29 = v15;
    v30 = 1;
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, &v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v30 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F73B8[v30])(&v31, &v29);
    v30 = -1;
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }

}

void sub_1977254A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_197725570()
{
  void *v0;

  JUMPOUT(0x197725568);
}

void WebKit::WebExtensionContext::runtimeConnectNative(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl *a4, uint64_t *a5)
{
  void *v9;
  WebKit *v10;
  WebKit *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  void *v17;
  NSString *v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36[2];

  v36[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v36[0] = a4;
  WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::HashCountedSet((uint64_t *)&v34, (uint64_t *)v36, 1);
  WebKit::WebExtensionContext::addPorts(a1, 0, 2u, a3, (_QWORD **)&v34);
  if (v34)
    WTF::fastFree((WTF::StringImpl *)((char *)v34 - 16), v9);
  v10 = (WebKit *)API::Object::newObject(0x28uLL, 118);
  v11 = v10;
  v12 = *a2;
  if (v12)
    *(_DWORD *)v12 += 2;
  v34 = v12;
  WebKit::WebExtensionMessagePort::WebExtensionMessagePort(v10, a1, (_DWORD **)&v34, a3);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      v16 = (id *)(v15 - 16);
    else
      v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  WebKit::WebExtensionController::delegate(v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        v21 = (id *)(v20 - 16);
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    WebKit::WebExtension::wrapper(v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::wrapper((id *)v11);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::wrapper((id *)a1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v29 = *a5;
    *a5 = 0;
    CFRetain(*((CFTypeRef *)v11 + 1));
    v30 = malloc_type_malloc(0x48uLL, 0x10E0040808C7769uLL);
    *v30 = MEMORY[0x1E0C809A0];
    v30[1] = 50331650;
    v30[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v30[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v30[4] = a1;
    v30[5] = a1;
    v30[6] = v29;
    v30[7] = v11;
    v30[8] = a3;
    v31 = _Block_copy(v30);

    v32 = _Block_copy(v31);
    objc_msgSend(v17, "webExtensionController:connectUsingMessagePort:forExtensionContext:completionHandler:", v26, v27, v28, v32);

LABEL_31:
    CFRelease(*((CFTypeRef *)v11 + 1));
    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connectNative()"), 0, CFSTR("native messaging is not supported"), v18, v36);
  v22 = v36[0];
  v36[0] = 0;
  v34 = v22;
  v35 = 1;
  v23 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 16))(v23, &v34);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v35)
  {
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v33 = v36[0];
  v36[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v24);
    else
      *(_DWORD *)v33 -= 2;
  }

  if (v11)
    goto LABEL_31;
}

void sub_19772588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::runtimeWebPageSendMessage(uint64_t a1, const WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v9;
  uint64_t v10;
  WebKit::WebExtensionController *v11;
  WebKit::WebExtensionTab *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  StringImpl *v22;
  WebKit::WebExtension *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  StringImpl *m_ptr;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  char v53;
  _BYTE v54[16];
  WTF::StringImpl *v55;
  char v56;
  _OWORD v57[2];
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  URL v65;
  WTF::StringImpl *v66;
  char v67;
  _BYTE v68[184];
  _OWORD v69[2];
  WTF::StringImpl *v70;
  __int128 v71;
  __int128 v72;
  WebKit::WebExtensionTab *v73;
  uint64_t v74;

  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (WebKit::WebExtensionController *)(v10 - 16);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WebKit::WebExtensionController::extensionContext(v11, a2, &v74);
  WebKit::WebExtensionContext::getCurrentTab(a1, *(_QWORD *)(a4 + 216), 0, 0, &v73);
  v12 = v73;
  v13 = v74;
  if (v74 && v73)
  {
    LOBYTE(v66) = 0;
    v67 = 0;
    if (*(_BYTE *)(a4 + 8))
    {
      v14 = *(WTF::StringImpl **)a4;
      if (*(_QWORD *)a4)
        *(_DWORD *)v14 += 2;
      v66 = v14;
      v67 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v68, a4 + 16);
    v69[0] = *(_OWORD *)(a4 + 200);
    *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)(a4 + 209);
    v15 = *(WTF::StringImpl **)(a4 + 232);
    if (v15)
      *(_DWORD *)v15 += 2;
    v70 = v15;
    v16 = *(_OWORD *)(a4 + 256);
    v71 = *(_OWORD *)(a4 + 240);
    v72 = v16;
    WebKit::WebExtensionTab::parameters(v12, (uint64_t)&v48);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v68, (uint64_t)&v48);
    if (v56)
    {
      v18 = v55;
      v55 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    if (v54[8])
    {
      v21 = v50;
      v50 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v17);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = (StringImpl *)v70;
    if (v70)
      *(_DWORD *)v70 += 2;
    v65.m_string.m_impl.m_ptr = v22;
    *(_OWORD *)((char *)&v65 + 8) = v71;
    *(_OWORD *)&v65.m_hostEnd = v72;
    v23 = *(WebKit::WebExtension **)(v13 + 56);
    WebKit::WebExtension::populateExternallyConnectableIfNeeded(v23);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v64, (_QWORD **)v23 + 15);
    if ((WebKit::WebExtensionContext::permissionState(a1, &v65, (URL *)v12, 3) & 0xFFFFFFFE) == 2
      && (WebKit::WebExtensionMatchPattern::patternsMatchURL(&v64, (WTF::URL *)&v65) & 1) != 0)
    {
      v62 = 29;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v63, &v62, 1);
      v48 = (_QWORD *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v24 = *a5;
      *a5 = 0;
      v49 = a1;
      v50 = v24;
      v25 = *a3;
      if (*a3)
        *(_DWORD *)v25 += 2;
      v51 = v25;
      LOBYTE(v52) = 0;
      v53 = 0;
      if (v67)
      {
        v26 = v66;
        if (v66)
          *(_DWORD *)v66 += 2;
        v52 = v26;
        v53 = 1;
      }
      std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v54, (uint64_t)v68);
      v57[0] = v69[0];
      *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)v69 + 9);
      v27 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      v58 = v27;
      v59 = v71;
      v60 = v72;
      v28 = WTF::fastMalloc((WTF *)0x138);
      v29 = v28;
      *(_QWORD *)v28 = off_1E34F7578;
      *(_QWORD *)(v28 + 8) = v48;
      *(_QWORD *)(v28 + 16) = v49;
      v30 = v50;
      v49 = 0;
      v50 = 0;
      *(_QWORD *)(v28 + 24) = v30;
      v31 = v51;
      if (v51)
        *(_DWORD *)v51 += 2;
      *(_BYTE *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 32) = v31;
      *(_BYTE *)(v28 + 48) = 0;
      if (v53)
      {
        v32 = v52;
        v52 = 0;
        *(_QWORD *)(v28 + 40) = v32;
        *(_BYTE *)(v28 + 48) = 1;
      }
      std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v28 + 56), (uint64_t)v54);
      v33 = v57[0];
      *(_OWORD *)(v29 + 249) = *(_OWORD *)((char *)v57 + 9);
      *(_OWORD *)(v29 + 240) = v33;
      WTF::URL::URL(v29 + 272, (uint64_t *)&v58);
      v61 = v29;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v63, &v61);
      v35 = v61;
      v61 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = v58;
      v58 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v34);
        else
          *(_DWORD *)v36 -= 2;
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v34);
      if (v53)
      {
        v40 = v52;
        v52 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v39);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      v41 = v51;
      v51 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v39);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v50;
      v50 = 0;
      if (v42)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
      v43 = v49;
      v49 = 0;
      if (v43)
        CFRelease(*(CFTypeRef *)(v43 + 8));
      if (v63)
        WTF::fastFree((WTF *)(v63 - 16), v39);
    }
    else
    {
      v37 = *a5;
      *a5 = 0;
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v38 = &off_1E34F7550;
      v38[1] = v37;
      v48 = v38;
      WebKit::callAfterRandomDelay((uint64_t *)&v48);
      if (v48)
        (*(void (**)(_QWORD *))(*v48 + 8))(v48);
    }
    if (v64)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v64, v39);
    m_ptr = v65.m_string.m_impl.m_ptr;
    v65.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v39);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    v45 = v70;
    v70 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v39);
      else
        *(_DWORD *)v45 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v68, v39);
    if (v67)
    {
      v47 = v66;
      v66 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
LABEL_82:
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
    goto LABEL_83;
  }
  v19 = *a5;
  *a5 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34F7528;
  v20[1] = v19;
  v48 = v20;
  WebKit::callAfterRandomDelay((uint64_t *)&v48);
  if (v48)
    (*(void (**)(_QWORD *))(*v48 + 8))(v48);
  if (v12)
    goto LABEL_82;
LABEL_83:
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
}

void sub_197725F34(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t *a50,WTF::StringImpl *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,WTF::StringImpl *a56,char a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;

  if (a47)
    (*(void (**)(uint64_t))(*(_QWORD *)a47 + 8))(a47);
  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v59, a2);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v62);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v62);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (a49)
    WTF::fastFree((WTF *)(a49 - 16), v62);
  if (a50)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a50, v62);
  if (a51)
  {
    if (*(_DWORD *)a51 == 2)
      WTF::StringImpl::destroy(a51, v62);
    else
      *(_DWORD *)a51 -= 2;
  }
  v63 = (WTF::StringImpl *)STACK[0x260];
  STACK[0x260] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v58, v62);
  if (a57 && a56)
  {
    if (*(_DWORD *)a56 == 2)
      WTF::StringImpl::destroy(a56, v64);
    else
      *(_DWORD *)a56 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v57);
  if (v60)
    CFRelease(*(CFTypeRef *)(v60 + 8));
  _Unwind_Resume(a1);
}

void sub_197726204()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 96))
    JUMPOUT(0x1977261FCLL);
  JUMPOUT(0x1977261F4);
}

void WebKit::WebExtensionContext::runtimeWebPageConnect(uint64_t a1, const WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t v11;
  uint64_t v12;
  WebKit::WebExtensionController *v13;
  WebKit::WebExtensionTab *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  StringImpl *v24;
  WebKit::WebExtension *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  StringImpl *m_ptr;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  char v57;
  char v58[8];
  WTF::StringImpl *v59;
  char v60;
  _OWORD v61[2];
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  URL v69;
  WTF::StringImpl *v70;
  char v71;
  _BYTE v72[184];
  _OWORD v73[2];
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  WebKit::WebExtensionTab *v77;
  uint64_t v78;
  unsigned __int8 *v79[3];

  v79[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v13 = (WebKit::WebExtensionController *)(v12 - 16);
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  WebKit::WebExtensionController::extensionContext(v13, a2, &v78);
  WebKit::WebExtensionContext::getCurrentTab(a1, *(_QWORD *)(a5 + 216), 0, 0, &v77);
  v14 = v77;
  v15 = v78;
  if (v78 && v77)
  {
    LOBYTE(v70) = 0;
    v71 = 0;
    if (*(_BYTE *)(a5 + 8))
    {
      v16 = *(WTF::StringImpl **)a5;
      if (*(_QWORD *)a5)
        *(_DWORD *)v16 += 2;
      v70 = v16;
      v71 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v72, a5 + 16);
    v73[0] = *(_OWORD *)(a5 + 200);
    *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)(a5 + 209);
    v17 = *(WTF::StringImpl **)(a5 + 232);
    if (v17)
      *(_DWORD *)v17 += 2;
    v74 = v17;
    v18 = *(_OWORD *)(a5 + 256);
    v75 = *(_OWORD *)(a5 + 240);
    v76 = v18;
    WebKit::WebExtensionTab::parameters(v14, (uint64_t)&v51);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v72, (uint64_t)&v51);
    if (v60)
    {
      v20 = v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v58[0])
    {
      v23 = v53;
      v53 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v19);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    v24 = (StringImpl *)v74;
    if (v74)
      *(_DWORD *)v74 += 2;
    v69.m_string.m_impl.m_ptr = v24;
    *(_OWORD *)((char *)&v69 + 8) = v75;
    *(_OWORD *)&v69.m_hostEnd = v76;
    v25 = *(WebKit::WebExtension **)(v15 + 56);
    WebKit::WebExtension::populateExternallyConnectableIfNeeded(v25);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v68, (_QWORD **)v25 + 15);
    if ((WebKit::WebExtensionContext::permissionState(a1, &v69, (URL *)v14, 3) & 0xFFFFFFFE) == 2
      && (WebKit::WebExtensionMatchPattern::patternsMatchURL(&v68, (WTF::URL *)&v69) & 1) != 0)
    {
      v79[0] = *(unsigned __int8 **)(a5 + 216);
      WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::HashCountedSet((uint64_t *)&v51, (uint64_t *)v79, 1);
      WebKit::WebExtensionContext::addPorts(a1, 3, 0, a3, &v51);
      if (v51)
        WTF::fastFree((WTF *)(v51 - 2), v26);
      v67 = 26;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)v79, &v67, 1);
      v51 = (_QWORD *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v27 = *a6;
      *a6 = 0;
      v52 = a1;
      v53 = v27;
      v54 = a3;
      v28 = *a4;
      if (*a4)
        *(_DWORD *)v28 += 2;
      v55 = v28;
      LOBYTE(v56) = 0;
      v57 = 0;
      if (v71)
      {
        v29 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        v56 = v29;
        v57 = 1;
      }
      std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v58, (uint64_t)v72);
      v61[0] = v73[0];
      *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v73 + 9);
      v30 = v74;
      if (v74)
        *(_DWORD *)v74 += 2;
      v62 = v30;
      v63 = v75;
      v64 = v76;
      v65 = 0;
      v31 = WTF::fastMalloc((WTF *)0x148);
      v32 = v31;
      *(_QWORD *)v31 = off_1E34F7618;
      *(_QWORD *)(v31 + 8) = v51;
      *(_QWORD *)(v31 + 16) = v52;
      v33 = v53;
      v52 = 0;
      v53 = 0;
      *(_QWORD *)(v31 + 24) = v33;
      *(_QWORD *)(v31 + 32) = v54;
      v34 = v55;
      if (v55)
        *(_DWORD *)v55 += 2;
      *(_BYTE *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 40) = v34;
      *(_BYTE *)(v31 + 56) = 0;
      if (v57)
      {
        v35 = v56;
        v56 = 0;
        *(_QWORD *)(v31 + 48) = v35;
        *(_BYTE *)(v31 + 56) = 1;
      }
      std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v31 + 64), (uint64_t)v58);
      v36 = v61[0];
      *(_OWORD *)(v32 + 257) = *(_OWORD *)((char *)v61 + 9);
      *(_OWORD *)(v32 + 248) = v36;
      WTF::URL::URL(v32 + 280, (uint64_t *)&v62);
      *(_BYTE *)(v32 + 320) = v65;
      v66 = v32;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, v79, &v66);
      v38 = v66;
      v66 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = v62;
      v62 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v37);
        else
          *(_DWORD *)v39 -= 2;
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v37);
      if (v57)
      {
        v43 = v56;
        v56 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v42);
          else
            *(_DWORD *)v43 -= 2;
        }
      }
      v44 = v55;
      v55 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v42);
        else
          *(_DWORD *)v44 -= 2;
      }
      v45 = v53;
      v53 = 0;
      if (v45)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
      v46 = v52;
      v52 = 0;
      if (v46)
        CFRelease(*(CFTypeRef *)(v46 + 8));
      if (v79[0])
        WTF::fastFree((WTF *)(v79[0] - 16), v42);
    }
    else
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v40 = *a6;
      *a6 = 0;
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v41 = &off_1E34F75F0;
      v41[1] = a1;
      v41[2] = a1;
      v41[3] = v40;
      v41[4] = a3;
      v51 = v41;
      WebKit::callAfterRandomDelay((uint64_t *)&v51);
      if (v51)
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    }
    if (v68)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v68, v42);
    m_ptr = v69.m_string.m_impl.m_ptr;
    v69.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v42);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    v48 = v74;
    v74 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v42);
      else
        *(_DWORD *)v48 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v72, v42);
    if (v71)
    {
      v50 = v70;
      v70 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v49);
        else
          *(_DWORD *)v50 -= 2;
      }
    }
LABEL_84:
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v14);
    goto LABEL_85;
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v21 = *a6;
  *a6 = 0;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v22 = &off_1E34F75C8;
  v22[1] = a1;
  v22[2] = a1;
  v22[3] = v21;
  v22[4] = a3;
  v51 = v22;
  WebKit::callAfterRandomDelay((uint64_t *)&v51);
  if (v51)
    (*(void (**)(_QWORD *))(*v51 + 8))(v51);
  if (v14)
    goto LABEL_84;
LABEL_85:
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
}

void sub_19772683C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t *a52,WTF::StringImpl *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WTF::StringImpl *a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  if (a50)
    (*(void (**)(uint64_t))(*(_QWORD *)a50 + 8))(a50);
  if (a44)
  {
    if (*(_DWORD *)a44 == 2)
      WTF::StringImpl::destroy(a44, a2);
    else
      *(_DWORD *)a44 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v61, a2);
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v65);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v65);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a11)
    CFRelease(*(CFTypeRef *)(a11 + 8));
  v66 = *(_QWORD *)(v63 - 104);
  if (v66)
    WTF::fastFree((WTF *)(v66 - 16), v65);
  if (a52)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a52, v65);
  if (a53)
  {
    if (*(_DWORD *)a53 == 2)
      WTF::StringImpl::destroy(a53, v65);
    else
      *(_DWORD *)a53 -= 2;
  }
  v67 = (WTF::StringImpl *)STACK[0x270];
  STACK[0x270] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v65);
    else
      *(_DWORD *)v67 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v60, v65);
  if (a59 && a58)
  {
    if (*(_DWORD *)a58 == 2)
      WTF::StringImpl::destroy(a58, v68);
    else
      *(_DWORD *)a58 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v59);
  if (v62)
    CFRelease(*(CFTypeRef *)(v62 + 8));
  _Unwind_Resume(a1);
}

void sub_197726B58()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x197726B50);
  JUMPOUT(0x197726B48);
}

void sub_197726B68()
{
  JUMPOUT(0x197726B50);
}

uint64_t *WebKit::WebExtensionContext::fireRuntimeStartupEventIfNeeded(WebKit::WebExtensionContext *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t *result;
  uint64_t *v17;
  uint8_t buf[16];
  char v19;
  IPC::Encoder *v20;

  v2 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Firing startup event", buf, 2u);
  }
  WebKit::WebExtensionContext::processes((char *)this, 30, 0, (uint64_t *)&v17);
  v4 = *((_QWORD *)this + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v17);
    v6 = v5;
    v7 = v3;
    v8 = v17 ? &v17[*((unsigned int *)v17 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *((_QWORD *)this + 4);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1579;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v20 = (IPC::Encoder *)v11;
        buf[0] = 0;
        v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v20, 0, (uint64_t)buf, 1);
        if (v19)
        {
          v12 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v13 = v20;
        v20 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_18;
        }
        v6 = v7;
LABEL_18:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v17;
  if (v17)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v17, v3);
  return result;
}

void sub_197726D1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::fireRuntimeInstalledEventIfNeeded(WebKit::WebExtensionContext *this)
{
  NSObject *v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t *v18;
  uint8_t buf[16];
  char v20;
  IPC::Encoder *v21;

  v2 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Firing installed event", buf, 2u);
  }
  v3 = *((_BYTE *)this + 289);
  WebKit::WebExtensionContext::processes((char *)this, 27, 0, (uint64_t *)&v18);
  v5 = *((_QWORD *)this + 8);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v18);
    v7 = v6;
    v8 = v4;
    v9 = v18 ? &v18[*((unsigned int *)v18 - 1)] : 0;
    if (v9 != v6)
    {
      do
      {
        v10 = *v7;
        v11 = *((_QWORD *)this + 4);
        v12 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v12 = 1577;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)(v12 + 528) = v12 + 16;
        *(_QWORD *)(v12 + 536) = v12 + 16;
        *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v12 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
        v21 = (IPC::Encoder *)v12;
        *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v3;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)this + 37);
        buf[0] = 0;
        v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)buf, 1);
        if (v20)
        {
          v13 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v4);
          WTF::fastFree(v15, v16);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_18;
        }
        v7 = v8;
LABEL_18:
        ;
      }
      while (v7 != v9);
    }
  }
  result = v18;
  if (v18)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v18, v4);
  return result;
}

void sub_197726F50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error opening options page: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.openOptionsPage()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_1977271B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  WebKit *v7;
  NSObject *v8;
  NSError *v9;
  NSString *v10;
  NSString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF::StringImpl *v24;
  _BYTE buf[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  if (v7)
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v7, v9);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v23;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Error opening options page in new tab: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v7, "localizedDescription");
    v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.openOptionsPage()"), 0, v10, v11, &v24);
    v12 = v24;
    v24 = 0;
    *(_QWORD *)buf = v12;
    buf[8] = 1;
    v13 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (buf[8])
    {
      v15 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v14);
      else
        *(_DWORD *)v22 -= 2;
    }

    goto LABEL_27;
  }
  if (v5)
  {
    buf[0] = 0;
    buf[8] = 0;
    v16 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 16))(v16, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (!buf[8])
      goto LABEL_27;
    v18 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (!v18)
      goto LABEL_27;
LABEL_24:
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
    goto LABEL_27;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.openOptionsPage()"), 0, CFSTR("the options page cound not be opened"), v6, &v24);
  v19 = v24;
  v24 = 0;
  *(_QWORD *)buf = v19;
  buf[8] = 1;
  v20 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (buf[8])
  {
    v21 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v18 = v24;
  v24 = 0;
  if (v18)
    goto LABEL_24;
LABEL_27:

}

void sub_197727554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v16);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v16);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSString *v8;
  NSString *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  NSString *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "localizedDescription");
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.sendNativeMessage()"), 0, v8, v9, &v20);
    v10 = v20;
    v20 = 0;
    v21 = v10;
    v22 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v21);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v22 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F73B8[v22])(&v23, &v21);
    v22 = -1;
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }

    goto LABEL_13;
  }
  if (!v5 || (WebKit::isValidJSONObject(v5, 1) & 1) != 0)
  {
    WebKit::encodeJSONString(v5, 1, 0);
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v20, v8);
    v13 = v20;
    v20 = 0;
    v21 = v13;
    v22 = 0;
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v21);
    goto LABEL_6;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.sendNativeMessage()"), 0, CFSTR("reply message was not JSON-serializable"), v12, &v20);
  v16 = v20;
  v20 = 0;
  v21 = v16;
  v22 = 1;
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v22 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F73B8[v22])(&v23, &v21);
  v22 = -1;
  v19 = v20;
  v20 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_13:

}

void sub_1977278C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F73B8[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v21);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t *a1, void *a2)
{
  WebKit *v3;
  WebKit *v4;
  uint64_t v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;
  WTF::StringImpl *v24;

  v3 = a2;
  v4 = v3;
  v5 = a1[4];
  if (v3)
  {
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connectNative()"), 0, v6, v7, &v24);
    v8 = v24;
    v24 = 0;
    v20 = v8;
    LOBYTE(v21) = 1;
    v9 = a1[6];
    a1[6] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if ((_BYTE)v21)
    {
      v11 = v20;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

    v16 = a1[7];
    WebKit::toWebExtensionMessagePortError(v4, (uint64_t)&v20);
    WebKit::WebExtensionMessagePort::remove(v16);
    if (v23 && v22 && v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v18 = a1 + 8;
  }
  else
  {
    WebKit::WebExtensionContext::addNativePort(a1[4], a1[7]);
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    v12 = a1[6];
    a1[6] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if ((_BYTE)v21)
    {
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v19 = a1[8];
    v18 = a1 + 8;
    WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded(v5, v19);
    WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v5, 0, 2, *v18);
  }
  WebKit::WebExtensionContext::clearQueuedPortMessages(v5, 2u, *v18);

}

void sub_197727C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  void *v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if ((_BYTE)a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v20);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7418;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7418;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  _QWORD v7[2];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = WebKit::WebExtensionContext::backgroundPageIdentifier(*(WebKit::WebExtensionContext **)(a1 + 8));
  v7[1] = v2;
  v8 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34F7430[v8])(&v5, v7);
  return result;
}

void sub_197727E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a16 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7430[a16])(&a12, v16);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34F7450;
  v3 = (uint64_t)(a1 + 5);
  v4 = (WTF::StringImpl *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34F7450;
  v3 = (uint64_t)a1 + 40;
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 34);
  *((_QWORD *)a1 + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 56, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree(a1, v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD *result;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF *v30;
  _QWORD *v31;
  _QWORD v32[2];
  char v33;
  IPC::Encoder *v34;

  v22 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v22, 28, 0, (uint64_t *)&v31);
  if (v31 && *((_DWORD *)v31 - 3))
  {
    v28 = 0;
    v29 = 0;
    WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>((uint64_t *)&v30, (uint64_t *)(a1 + 24), (uint64_t)&v28);
    if (v29 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F73B8[v29])(&v24, &v28);
    v29 = -1;
    v2 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v31);
    v4 = v2;
    v5 = v3;
    if (v31)
      v6 = &v31[*((unsigned int *)v31 - 1)];
    else
      v6 = 0;
    v8 = v30;
    if (v6 != v2)
    {
      v9 = a1 + 312;
      v10 = a1 + 32;
      v11 = a1 + 40;
      do
      {
        v12 = *v4;
        v23[0] = 0;
        v23[8] = 0;
        v24 = v9;
        v25 = v10;
        v26 = v23;
        v27 = v11;
        ++*(_DWORD *)v8;
        v13 = *(_QWORD *)(v22 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1578;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v34 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v14, (uint64_t)&v24);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = &off_1E34F74A0;
        v15[1] = v8;
        v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v32[0] = v15;
        v32[1] = v16;
        v33 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v34, 0, (uint64_t)v32, 1);
        if (v33)
        {
          v17 = v32[0];
          v32[0] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        v18 = v34;
        v34 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v3);
          WTF::fastFree(v19, v20);
        }
        while (++v4 != v5)
        {
          if ((unint64_t)(*v4 + 1) > 1)
            goto LABEL_21;
        }
        v4 = v5;
LABEL_21:
        ;
      }
      while (v4 != v6);
    }
    if (v8)
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)v8, v3);
  }
  else
  {
    v24 = 0;
    LODWORD(v25) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if ((_DWORD)v25 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E34F73B8[v25])(v32, &v24);
  }
  result = v31;
  if (v31)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v31, v3);
  return result;
}

void sub_1977282A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, int a17, uint64_t a18, uint64_t a19, char a20,int a21,int a22,WTF *a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a23)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)a23, a2);
  if (a24)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a24, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[8];
  int v11;
  char v12;

  v6 = WTF::fastMalloc((WTF *)0x20);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v10, a3);
  *(_DWORD *)v6 = 1;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34F7478;
  v8 = *a2;
  *a2 = 0;
  v7[1] = v8;
  *(_QWORD *)(v6 + 8) = v7;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 + 16, (uint64_t)v10);
  *a1 = v6;
  if (v11 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34F73B8[v11])(&v12, v10);
  return result;
}

void sub_197728460(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  WTF *v17;
  uint64_t v19;

  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F73B8[a12])(&a17, &a10);
  a12 = -1;
  WTF::fastFree(v17, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7478;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7478;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197728584(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = **(_BYTE **)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, *(_QWORD *)(a2 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34F74A0;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F74A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::call(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  if (a2)
  {
    if (*a2)
    {
      v2 = result;
      result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
      if (v7)
      {
        v4 = v6;
        if (v6)
        {
          v5 = *((_QWORD *)v2 + 1);
          v6 = 0;
          v8 = v4;
          v9 = 0;
          result = (WTF::StringImpl *)WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v5, (uint64_t)&v8);
          if (v9 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E34F73B8[v9])(&v10, &v8);
        }
        if (v7)
        {
          result = v6;
          v6 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void sub_197728724(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  uint64_t v17;

  if (a17 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34F73B8[a17])(v17 - 17, &a13);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v3[8];
  int v4;
  char v5;

  v2 = (uint64_t *)(result + 8);
  if (*(_QWORD *)(result + 8))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v3, a2);
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v2, (uint64_t)v3);
    if (v4 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34F73B8[v4])(&v5, v3);
  }
  return result;
}

void sub_1977287E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F73B8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[8];
  int v5;
  _BYTE v6[8];
  int v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F73B8[v7])(&v8, v6);
  if (v5 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34F73B8[v5])(v6, v4);
  v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1977288C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E34F73B8[a16])(v17 - 17, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F73B8[a12])(v17 - 17, &a10);
  a12 = -1;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  int v7;
  char v8;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    if (*(_QWORD *)(this + 8))
    {
      v6[0] = 0;
      v7 = -1;
      v3 = *(unsigned int *)(this + 24);
      if ((_DWORD)v3 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E34F74B8[v3])(&v8, v6, this + 16);
        v7 = v3;
      }
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()((uint64_t *)(v2 + 8), (uint64_t)v6);
      if (v7 != -1)
        ((void (*)(char *, _BYTE *))off_1E34F73B8[v7])(&v8, v6);
    }
    v4 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(_BYTE *, uint64_t))off_1E34F73B8[v4])(v6, v2 + 16);
    *(_DWORD *)(v2 + 24) = -1;
    v5 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void sub_197728A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F73B8[a12])(&a16, &a10);
  a12 = -1;
  v20 = *(unsigned int *)(v17 + 24);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_1E34F73B8[v20])(&a16, v18);
  *(_DWORD *)(v17 + 24) = -1;
  v21 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t *WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::HashCountedSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v8 = 0;
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(a1, a2, &v8, (uint64_t)v7);
      ++*(_DWORD *)(v7[0] + 8);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_197728BA8(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;

  if (*v2)
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34F74D8;
  v3 = (uint64_t)(a1 + 6);
  v4 = (WTF::StringImpl *)a1[35];
  a1[35] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34F74D8;
  v3 = (uint64_t)a1 + 48;
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 35);
  *((_QWORD *)a1 + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree(a1, v6);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  NSString *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *result;
  uint64_t v32;
  uint64_t v34;
  _BYTE v35[7];
  _BYTE v36[16];
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD v44[2];
  char v45;
  IPC::Encoder *v46;

  v34 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v34, 25, 0, (uint64_t *)&v43);
  if (!v43 || (v32 = *((unsigned int *)v43 - 3), !(_DWORD)v32))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connect()"), 0, CFSTR("no runtime.onConnect listeners found"), v1, v44);
    v7 = (WTF::StringImpl *)v44[0];
    v44[0] = 0;
    v37 = v7;
    LOBYTE(v38) = 1;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if ((_BYTE)v38)
    {
      v10 = v37;
      v37 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    v30 = (WTF::StringImpl *)v44[0];
    v44[0] = 0;
    if (!v30)
      goto LABEL_39;
LABEL_36:
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v9);
    else
      *(_DWORD *)v30 -= 2;
    goto LABEL_39;
  }
  v42 = 0;
  v2 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v43);
  v3 = v2;
  v5 = v4;
  if (v43)
    v6 = &v43[*((unsigned int *)v43 - 1)];
  else
    v6 = 0;
  if (v6 != v2)
  {
    do
    {
      v11 = *v3;
      v36[0] = 0;
      v36[8] = 0;
      v37 = (WTF::StringImpl *)(a1 + 321);
      v38 = a1 + 32;
      v39 = a1 + 40;
      v40 = v36;
      v41 = a1 + 48;
      CFRetain(*(CFTypeRef *)(v34 + 8));
      v12 = *(_BYTE *)(a1 + 320);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *v3;
      v15 = (unsigned int *)(*v3 + 16);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v17 = *(_QWORD *)(v34 + 32);
      v18 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v18 = 1576;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(v18 + 528) = v18 + 16;
      *(_QWORD *)(v18 + 536) = v18 + 16;
      *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v18 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
      v46 = (IPC::Encoder *)v18;
      IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v18, (uint64_t)&v37);
      LODWORD(v44[0]) = *(_DWORD *)v35;
      *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)&v35[3];
      do
        v19 = __ldaxr(v15);
      while (__stlxr(v19 + 1, v15));
      v20 = WTF::fastMalloc((WTF *)0x40);
      v21 = v20;
      *(_QWORD *)v20 = &off_1E34F7500;
      *(_QWORD *)(v20 + 8) = v34;
      *(_QWORD *)(v20 + 16) = v34;
      *(_QWORD *)(v20 + 24) = &v42;
      *(_BYTE *)(v20 + 32) = v12;
      *(_DWORD *)(v20 + 33) = v44[0];
      *(_DWORD *)(v20 + 36) = *(_DWORD *)((char *)v44 + 3);
      *(_QWORD *)(v20 + 40) = v13;
      do
        v22 = __ldaxr(v15);
      while (__stlxr(v22 + 1, v15));
      *(_QWORD *)(v20 + 48) = v14;
      *(_QWORD *)(v20 + 56) = v32;
      if (v14)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
      v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v44[0] = v21;
      v44[1] = v23;
      v45 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v46, 0, (uint64_t)v44, 1);
      if (v45)
      {
        v25 = v44[0];
        v44[0] = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      v26 = v46;
      v46 = 0;
      if (v26)
      {
        IPC::Encoder::~Encoder(v26, v24);
        WTF::fastFree(v27, v28);
      }
      if (v14)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
      while (++v3 != v5)
      {
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_30;
      }
      v3 = v5;
LABEL_30:
      ;
    }
    while (v3 != v6);
  }
  LOBYTE(v37) = 0;
  LOBYTE(v38) = 0;
  v29 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v29 + 16))(v29, &v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if ((_BYTE)v38)
  {
    v30 = v37;
    v37 = 0;
    if (v30)
      goto LABEL_36;
  }
LABEL_39:
  result = v43;
  if (v43)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v43, v9);
  return result;
}

void sub_1977290BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  uint64_t *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v25);
    else
      *(_DWORD *)a21 -= 2;
  }
  v26 = *(uint64_t **)(v23 - 128);
  if (v26)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v26, v25);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  v4 = **(_BYTE **)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, *(_QWORD *)(a2 + 32));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7500;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7500;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  char v9;

  v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(a2, (uint64_t)&v8);
    if (v9)
    {
      v4 = *(_QWORD *)(a1 + 8);
      WebKit::WebExtensionContext::addPorts(v4, 0, *(_BYTE *)(a1 + 32), *(_QWORD *)(a1 + 40), &v8);
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v4, *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 40));
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v4, *(unsigned __int8 *)(a1 + 32), 0, *(_QWORD *)(a1 + 40));
      v6 = *(unint64_t **)(a1 + 24);
      v7 = *v6 + 1;
      *v6 = v7;
      if (v7 >= *(_QWORD *)(a1 + 56))
        WebKit::WebExtensionContext::clearQueuedPortMessages(v4, 0, *(_QWORD *)(a1 + 40));
      if (v9)
      {
        if (v8)
          WTF::fastFree((WTF *)(v8 - 2), v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(a1 + 8);
  }
}

void sub_197729428(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9)
      WTF::fastFree((WTF *)(a9 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v6 = 0;
  v2 = *(_QWORD *)a1;
  WebKit::WebExtensionContext::addPorts(*(_QWORD *)a1, 0, *(_BYTE *)(a1 + 24), *(_QWORD *)(a1 + 32), &v6);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v2, *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, *(unsigned __int8 *)(a1 + 24), 0, *(_QWORD *)(a1 + 32));
  v4 = *(unint64_t **)(a1 + 16);
  v5 = *v4 + 1;
  *v4 = v5;
  if (v5 >= *(_QWORD *)(a1 + 48))
    WebKit::WebExtensionContext::clearQueuedPortMessages(v2, 0, *(_QWORD *)(a1 + 32));
  if (v6)
    WTF::fastFree((WTF *)(v6 - 2), v3);
}

void sub_1977294F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_1977295DC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::fastFree((WTF *)(*(_QWORD *)v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22[2];
  uint64_t v23;
  int v24;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v5, v4);
        v18 = *v2;
        v17 = v2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_26;
  }
  v8 = (int *)(v5 + v6);
  result[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v17 = v4;
    v18 = 0;
LABEL_26:
    *v2 = 0;
    v2[1] = 0;
    result = (uint64_t *)v2[3];
    if (result)
    {
      if (v17)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v18);
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v9 = *v8;
  v23 = 0;
  if (v9)
  {
    while (1)
    {
      result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v2);
      v22[0] = (uint64_t)result;
      v22[1] = (uint64_t)v10;
      if (!(_BYTE)v10)
        break;
      v11 = v2[1];
      v10 = (char *)*v2;
      v12 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
      if (v11 < v12 || v11 - v12 <= 3)
      {
        *v2 = 0;
        v2[1] = 0;
        result = (uint64_t *)v2[3];
        if (!result || !v11)
          break;
        (*(void (**)(uint64_t *))(*result + 16))(result);
        v10 = (char *)*v2;
        v11 = v2[1];
LABEL_30:
        result = (uint64_t *)v2[3];
        *v2 = 0;
        v2[1] = 0;
        if (result && v11)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*result + 16))(result, v10);
        break;
      }
      v14 = &v10[v12];
      v2[2] = (uint64_t)(v14 + 4);
      if (!v10)
        goto LABEL_30;
      if ((unint64_t)result - 1 > 0xFFFFFFFFFFFFFFFDLL)
        break;
      v15 = *(_DWORD *)v14;
      v24 = 0;
      result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v23, v22, &v24, (uint64_t)&v20);
      *(_DWORD *)(v20 + 8) += v15;
      if (!v21)
        break;
      if (!--v9)
      {
        v16 = v23;
        goto LABEL_20;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    if (v23)
      return (uint64_t *)WTF::fastFree((WTF *)(v23 - 16), v10);
  }
  else
  {
    v16 = 0;
LABEL_20:
    *(_QWORD *)a2 = v16;
    a2[8] = 1;
  }
  return result;
}

void sub_1977297E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  char v5;

  v3 = 0;
  v4 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34F73B8[v4])(&v5, &v3);
  return result;
}

void sub_197729900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F73B8[a12])(v13 - 17, &a10);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7550;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7550;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  char v5;

  v3 = 0;
  v4 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34F73B8[v4])(&v5, &v3);
  return result;
}

void sub_197729A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F73B8[a12])(v13 - 17, &a10);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34F7578;
  v3 = (uint64_t)(a1 + 5);
  v4 = (WTF::StringImpl *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34F7578;
  v3 = (uint64_t)a1 + 40;
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 34);
  *((_QWORD *)a1 + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 56, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree(a1, v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD *result;
  _BYTE v22[23];
  char v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF *v30;
  _QWORD *v31;
  _QWORD v32[2];
  char v33;
  IPC::Encoder *v34;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v2, 29, 0, (uint64_t *)&v31);
  if (v31 && *((_DWORD *)v31 - 3))
  {
    v28 = 0;
    v29 = 0;
    WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>((uint64_t *)&v30, (uint64_t *)(a1 + 24), (uint64_t)&v28);
    if (v29 != -1)
      ((void (*)(char **, uint64_t *))off_1E34F73B8[v29])(&v24, &v28);
    v29 = -1;
    v3 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v31);
    v5 = v3;
    v6 = v4;
    if (v31)
      v7 = &v31[*((unsigned int *)v31 - 1)];
    else
      v7 = 0;
    v9 = v30;
    if (v7 != v3)
    {
      v10 = a1 + 32;
      v11 = a1 + 40;
      do
      {
        v12 = *v5;
        v23 = 0;
        v22[0] = 0;
        v22[8] = 0;
        v24 = &v23;
        v25 = v10;
        v26 = v22;
        v27 = v11;
        ++*(_DWORD *)v9;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1578;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v34 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v14, (uint64_t)&v24);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = &off_1E34F75A0;
        v15[1] = v9;
        v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v32[0] = v15;
        v32[1] = v16;
        v33 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v34, 0, (uint64_t)v32, 1);
        if (v33)
        {
          v17 = v32[0];
          v32[0] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        v18 = v34;
        v34 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v4);
          WTF::fastFree(v19, v20);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_21;
        }
        v5 = v6;
LABEL_21:
        ;
      }
      while (v5 != v7);
    }
    if (v9)
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)v9, v4);
  }
  else
  {
    v24 = 0;
    LODWORD(v25) = 0;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v8 + 16))(v8, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if ((_DWORD)v25 != -1)
      ((void (*)(_QWORD *, char **))off_1E34F73B8[v25])(v32, &v24);
  }
  result = v31;
  if (v31)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v31, v4);
  return result;
}

void sub_197729E68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, int a17, uint64_t a18, uint64_t a19, char a20,int a21,int a22,WTF *a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a23)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)a23, a2);
  if (a24)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a24, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34F75A0;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F75A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::call(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  if (a2)
  {
    if (*a2)
    {
      v2 = result;
      result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
      if (v7)
      {
        v4 = v6;
        if (v6)
        {
          v5 = *((_QWORD *)v2 + 1);
          v6 = 0;
          v8 = v4;
          v9 = 0;
          result = (WTF::StringImpl *)WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v5, (uint64_t)&v8);
          if (v9 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E34F73B8[v9])(&v10, &v8);
        }
        if (v7)
        {
          result = v6;
          v6 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void sub_19772A0A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  uint64_t v17;

  if (a17 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34F73B8[a17])(v17 - 17, &a13);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F75C8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F75C8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  v2 = a1[1];
  LOBYTE(v7) = 0;
  v8 = 0;
  v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[4]);
  return WebKit::WebExtensionContext::clearQueuedPortMessages(v2, 0, a1[4]);
}

void sub_19772A260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F75F0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F75F0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  v2 = a1[1];
  LOBYTE(v7) = 0;
  v8 = 0;
  v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[4]);
  return WebKit::WebExtensionContext::clearQueuedPortMessages(v2, 0, a1[4]);
}

void sub_19772A40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34F7618;
  v3 = (uint64_t)(a1 + 6);
  v4 = (WTF::StringImpl *)a1[35];
  a1[35] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34F7618;
  v3 = (uint64_t)a1 + 48;
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 35);
  *((_QWORD *)a1 + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3, v5);
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree(a1, v6);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::call(_QWORD *a1)
{
  uint64_t v2;
  NSString *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t *result;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _BYTE v40[16];
  WTF::StringImpl *v41;
  _QWORD *v42;
  _QWORD *v43;
  _BYTE *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD v48[2];
  char v49;
  IPC::Encoder *v50;

  v2 = a1[1];
  WebKit::WebExtensionContext::processes((char *)v2, 26, 0, (uint64_t *)&v47);
  if (!v47 || (v39 = *((unsigned int *)v47 - 3), !(_DWORD)v39))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("runtime.connect()"), 0, CFSTR("no runtime.onConnectExternal listeners found"), v3, v48);
    v9 = (WTF::StringImpl *)v48[0];
    v48[0] = 0;
    v41 = v9;
    LOBYTE(v42) = 1;
    v10 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if ((_BYTE)v42)
    {
      v12 = v41;
      v41 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v32 = (WTF::StringImpl *)v48[0];
    v48[0] = 0;
    if (!v32)
      goto LABEL_42;
LABEL_39:
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v11);
    else
      *(_DWORD *)v32 -= 2;
    goto LABEL_42;
  }
  v34 = a1;
  v46 = 0;
  v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v47);
  v5 = v4;
  v7 = v6;
  if (v47)
    v8 = &v47[*((unsigned int *)v47 - 1)];
  else
    v8 = 0;
  if (v8 != v4)
  {
    v13 = a1 + 4;
    v37 = a1 + 5;
    v38 = (WTF::StringImpl *)(a1 + 40);
    v36 = a1 + 6;
    v35 = a1 + 4;
    do
    {
      v14 = *v5;
      v40[0] = 0;
      v40[8] = 0;
      v41 = v38;
      v42 = v13;
      v43 = v37;
      v44 = v40;
      v45 = v36;
      CFRetain(*(CFTypeRef *)(v2 + 8));
      v15 = *v13;
      v16 = *v5;
      v17 = (unsigned int *)(*v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_QWORD *)(v2 + 32);
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 1576;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v50 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v20, (uint64_t)&v41);
      do
        v21 = __ldaxr(v17);
      while (__stlxr(v21 + 1, v17));
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      v23 = v22;
      *v22 = &off_1E34F7640;
      v22[1] = v2;
      v22[2] = v2;
      v22[3] = &v46;
      v22[4] = v15;
      do
        v24 = __ldaxr(v17);
      while (__stlxr(v24 + 1, v17));
      v22[5] = v16;
      v22[6] = v39;
      if (v16)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
      v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v48[0] = v23;
      v48[1] = v25;
      v49 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v50, 0, (uint64_t)v48, 1);
      if (v49)
      {
        v27 = v48[0];
        v48[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      v28 = v50;
      v50 = 0;
      if (v28)
      {
        IPC::Encoder::~Encoder(v28, v26);
        WTF::fastFree(v29, v30);
      }
      if (v16)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
      if (++v5 == v7)
      {
        v5 = v7;
        v13 = v35;
      }
      else
      {
        v13 = v35;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v7)
          {
            v5 = v7;
            break;
          }
        }
      }
    }
    while (v5 != v8);
  }
  LOBYTE(v41) = 0;
  LOBYTE(v42) = 0;
  v31 = v34[3];
  v34[3] = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v31 + 16))(v31, &v41);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if ((_BYTE)v42)
  {
    v32 = v41;
    v41 = 0;
    if (v32)
      goto LABEL_39;
  }
LABEL_42:
  result = v47;
  if (v47)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v47, v11);
  return result;
}

void sub_19772A92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25)
{
  uint64_t v25;
  WTF::StringImpl *v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v27);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a25)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a25, v27);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7640;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7640;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  char v9;

  v2 = a1 + 1;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(a2, (uint64_t)&v8);
    if (v9)
    {
      v4 = a1[1];
      WebKit::WebExtensionContext::addPorts(v4, 0, 3u, a1[4], &v8);
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v4, a1[5], 0, a1[4]);
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v4, 3, 0, a1[4]);
      v6 = (unint64_t *)a1[3];
      v7 = *v6 + 1;
      *v6 = v7;
      if (v7 >= a1[6])
        WebKit::WebExtensionContext::clearQueuedPortMessages(v4, 0, a1[4]);
      if (v9)
      {
        if (v8)
          WTF::fastFree((WTF *)(v8 - 2), v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(a1 + 1);
  }
}

void sub_19772AC1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9)
      WTF::fastFree((WTF *)(a9 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v6 = 0;
  v2 = *a1;
  WebKit::WebExtensionContext::addPorts(*a1, 0, 3u, a1[3], &v6);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v2, a1[4], 0, a1[3]);
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[3]);
  v4 = (unint64_t *)a1[2];
  v5 = *v4 + 1;
  *v4 = v5;
  if (v5 >= a1[5])
    WebKit::WebExtensionContext::clearQueuedPortMessages(v2, 0, a1[3]);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 2), v3);
}

void sub_19772ACE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isScriptingMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v7, CFSTR("scripting"));
  v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_19772AD98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::scriptingExecuteScript(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSString *v6;
  URL *v7;
  WebKit::WebExtensionTab *v8;
  uint64_t v9;
  _QWORD *v10;
  WebKit::WebExtensionTab *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  URL *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WebKit::WebExtensionTab *result;
  uint64_t v22;
  uint64_t v23;
  WebKit::WebExtensionTab *v24;
  _BYTE v25[136];
  uint64_t v26;
  _QWORD *v27;
  URL *v28;
  uint64_t v29[2];
  WebKit::WebExtensionTab *v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:sn180100]();
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(_QWORD *)a2, 0, &v30);
  if (v30)
  {
    WebKit::WebExtensionTab::url(v30, (uint64_t)v31);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v29, (uint64_t)v31, 1uLL);
    v7 = (URL *)v30;
    if (v30)
      ++*(_DWORD *)v30;
    v28 = v7;
    v22 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v23 = a1;
    v8 = v30;
    if (v30)
      ++*(_DWORD *)v30;
    v24 = v8;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v25, a2);
    v9 = *a3;
    *a3 = 0;
    v26 = v9;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
    *v10 = off_1E34F77A8;
    v10[1] = v22;
    v10[2] = v23;
    v11 = v24;
    v23 = 0;
    v24 = 0;
    v10[3] = v11;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v10 + 4), (uint64_t)v25);
    v12 = v26;
    v26 = 0;
    v10[21] = v12;
    v27 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v29, &v28, (uint64_t *)&v27, 1, 1);
    v14 = (uint64_t)v27;
    v27 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v22, v13);
    v16 = v28;
    v28 = 0;
    if (v16)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v16);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v15);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.executeScript()"), 0, CFSTR("tab not found"), v6, v31);
    v18 = v31[0];
    v31[0] = 0;
    v22 = v18;
    LODWORD(v24) = 1;
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 16))(v19, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if ((_DWORD)v24 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F76D8[v24])(v29, &v22);
    LODWORD(v24) = -1;
  }
  v20 = (WTF::StringImpl *)v31[0];
  v31[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_19772B030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if ((_DWORD)a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F76D8[a11])(v12 - 120, &a9);
  LODWORD(a11) = -1;
  v15 = *(WTF::StringImpl **)(v12 - 96);
  *(_QWORD *)(v12 - 96) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_QWORD *)(v12 - 104);
  *(_QWORD *)(v12 - 104) = 0;
  if (v16)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v16);
  _Unwind_Resume(a1);
}

void sub_19772B174()
{
  JUMPOUT(0x19772B16CLL);
}

uint64_t WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 136, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 104, v5);
  if (*(_BYTE *)(a1 + 96))
  {
    v7 = *(WTF **)(a1 + 80);
    if (v7)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v7, v6);
    }
  }
  if (*(_BYTE *)(a1 + 72))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v6);
  if (*(_BYTE *)(a1 + 48))
  {
    v8 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  return a1;
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::scriptingInsertCSS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSString *v6;
  URL *v7;
  WebKit::WebExtensionTab *v8;
  uint64_t v9;
  _QWORD *v10;
  WebKit::WebExtensionTab *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  URL *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebKit::WebExtensionTab *result;
  WTF::StringImpl *v23;
  uint64_t v24;
  WebKit::WebExtensionTab *v25;
  _BYTE v26[136];
  uint64_t v27;
  _QWORD *v28;
  URL *v29;
  uint64_t v30[2];
  WebKit::WebExtensionTab *v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:sn180100]();
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(_QWORD *)a2, 0, &v31);
  if (v31)
  {
    WebKit::WebExtensionTab::url(v31, (uint64_t)v32);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v30, (uint64_t)v32, 1uLL);
    v7 = (URL *)v31;
    if (v31)
      ++*(_DWORD *)v31;
    v29 = v7;
    v23 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v24 = a1;
    v8 = v31;
    if (v31)
      ++*(_DWORD *)v31;
    v25 = v8;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v26, a2);
    v9 = *a3;
    *a3 = 0;
    v27 = v9;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
    *v10 = off_1E34F77F8;
    v10[1] = v23;
    v10[2] = v24;
    v11 = v25;
    v24 = 0;
    v25 = 0;
    v10[3] = v11;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v10 + 4), (uint64_t)v26);
    v12 = v27;
    v27 = 0;
    v10[21] = v12;
    v28 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v30, &v29, (uint64_t *)&v28, 1, 1);
    v14 = (uint64_t)v28;
    v28 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v23, v13);
    v16 = v29;
    v29 = 0;
    if (v16)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v16);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v15);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.insertCSS()"), 0, CFSTR("tab not found"), v6, v32);
    v19 = (WTF::StringImpl *)v32[0];
    v32[0] = 0;
    v23 = v19;
    LOBYTE(v24) = 1;
    v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if ((_BYTE)v24)
    {
      v21 = v23;
      v23 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v17);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  v18 = (WTF::StringImpl *)v32[0];
  v32[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_19772B4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if ((_BYTE)a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  v15 = *(WTF::StringImpl **)(v12 - 96);
  *(_QWORD *)(v12 - 96) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_QWORD *)(v12 - 104);
  *(_QWORD *)(v12 - 104) = 0;
  if (v16)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v16);
  _Unwind_Resume(a1);
}

void sub_19772B5E8()
{
  JUMPOUT(0x19772B5E0);
}

WTF::StringImpl *WebKit::WebExtensionContext::scriptingRemoveCSS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  uint64_t v4;
  NSString *v8;
  NSString *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _Unwind_Exception *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebKit::WebExtensionTab *v34;
  WTF::StringImpl *v35;
  char v36;
  uint64_t v37;
  WebKit::WebExtensionTab *v38;
  WTF::StringImpl *v39;
  char v40;

  if (*(_DWORD *)(a1 + 404))
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      v30 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      if (v40)
      {
        v32 = v39;
        v39 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
      }
      v33 = v35;
      v35 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v31);
        else
          *(_DWORD *)v33 -= 2;
      }

      v34 = v38;
      v38 = 0;
      if (v34)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v34);
      _Unwind_Resume(v30);
    }
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(_QWORD *)a2, 0, &v38);
    if (v38)
    {
      WebKit::WebExtensionTab::mainWebView(v38);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        v11 = *(unsigned __int8 *)(a2 + 72);
        v12 = *(_QWORD *)(a1 + 56);
        if (v12)
          CFRetain(*(CFTypeRef *)(v12 + 8));
        v37 = v12;
        WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a2, &v37, (uint64_t)&v39);
        v13 = v37;
        v37 = 0;
        if (v13)
          CFRelease(*(CFTypeRef *)(v13 + 8));
        WebKit::WebExtensionDynamicScripts::removeStyleSheets((uint64_t)&v39, v10, v11 != 0, a1);
        LOBYTE(v35) = 0;
        v36 = 0;
        v14 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v35);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (v36)
        {
          v16 = v35;
          v35 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v15);
      }
      else
      {
        WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.removeCSS()"), 0, CFSTR("could not remove stylesheet from this tab"), v9, &v35);
        v24 = v35;
        v35 = 0;
        v39 = v24;
        v40 = 1;
        v25 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v39);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        if (v40)
        {
          v27 = v39;
          v39 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
        }
        v29 = v35;
        v35 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v26);
          else
            *(_DWORD *)v29 -= 2;
        }
      }

    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.removeCSS()"), 0, CFSTR("tab not found"), v8, &v35);
      v20 = v35;
      v35 = 0;
      v39 = v20;
      v40 = 1;
      v21 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (v40)
      {
        v23 = v39;
        v39 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      v28 = v35;
      v35 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v22);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    result = v38;
    v38 = 0;
    if (result)
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  else
  {
    LOBYTE(v39) = 0;
    v40 = 0;
    v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v39);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v40)
    {
      result = v39;
      v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebExtensionContext::scriptingRegisterContentScripts(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  BOOL v6;
  NSString *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[2];
  _BYTE v34[16];
  __int128 v35;
  id v36;
  uint64_t v37;
  WTF::StringImpl *v38[2];
  _BYTE v39[16];
  __int128 v40;

  v36 = 0;
  v37 = 0;
  v6 = WebKit::WebExtensionContext::createInjectedContentForScripts((uint64_t)a1, a2, 1, &v37, CFSTR("scripting.registerContentScripts()"), &v36);
  v8 = v36;
  if (v6)
  {
    WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = (WTF::StringImpl *)a1;
    CFRetain(a1[1]);
    v33[1] = (WTF::StringImpl *)a1;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v34, a2);
    v11 = v37;
    v37 = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)&v35 = v11;
    *((_QWORD *)&v35 + 1) = v12;
    v13 = *(_OWORD *)v33;
    v33[1] = 0;
    *(_OWORD *)v38 = v13;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v39, (uint64_t)v34);
    v14 = v35;
    v35 = 0uLL;
    v40 = v14;
    v15 = malloc_type_malloc(0x50uLL, 0x10F20402AD9362EuLL);
    *v15 = MEMORY[0x1E0C809A0];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v16 = *(_OWORD *)v38;
    v38[1] = 0;
    *((_OWORD *)v15 + 2) = v16;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v15 + 6), (uint64_t)v39);
    v17 = v40;
    v40 = 0uLL;
    *((_OWORD *)v15 + 4) = v17;
    v18 = _Block_copy(v15);

    v20 = *((_QWORD *)&v40 + 1);
    *((_QWORD *)&v40 + 1) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if ((_QWORD)v40)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v19);
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v19);
    v21 = v38[1];
    v38[1] = 0;
    if (v21)
      CFRelease(*((CFTypeRef *)v21 + 1));
    v22 = _Block_copy(v18);
    objc_msgSend(v9, "addScripts:completionHandler:", v10, v22);

    v24 = *((_QWORD *)&v35 + 1);
    *((_QWORD *)&v35 + 1) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if ((_QWORD)v35)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v23);
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v23);
    v25 = v33[1];
    v33[1] = 0;
    if (v25)
      CFRelease(*((CFTypeRef *)v25 + 1));

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.registerContentScripts()"), 0, (NSString *)v8, v7, v33);
    v26 = v33[0];
    v33[0] = 0;
    v38[0] = v26;
    LOBYTE(v38[1]) = 1;
    v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 16))(v27, v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (LOBYTE(v38[1]))
    {
      v29 = v38[0];
      v38[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    v30 = v33[0];
    v33[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v37;

    if (v31)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v32);
  }
}

void sub_19772BD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if ((_BYTE)a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v25);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v25);
    else
      *(_DWORD *)a9 -= 2;
  }

  if (a16)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a16, v26);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::createInjectedContentForScripts(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, void *a5, _QWORD *a6)
{
  void *v8;
  const WTF::StringImpl *v9;
  unsigned int v10;
  _BYTE *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  NSString *v14;
  __CFString *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  id v20;
  CFTypeRef v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  void *v28;
  _BOOL4 v29;
  NSString *v30;
  id v31;
  CFTypeRef v32;
  id v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  void *v40;
  _BOOL4 v41;
  NSString *v42;
  id v43;
  CFTypeRef v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t k;
  void *v49;
  NSString *v50;
  const WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSString *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  id v57;
  CFTypeRef v58;
  __CFString *v59;
  WTF::StringImpl *v60;
  __CFString *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t m;
  void *v66;
  NSString *v67;
  const WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  NSString *v70;
  WTF::StringImpl *v71;
  CFTypeRef *v72;
  WTF::StringImpl *v73;
  void *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  char v78;
  char v79;
  char v80;
  __CFString *v81;
  CFTypeRef *v82;
  __CFString *v83;
  char v84;
  const WTF::StringImpl *v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int n;
  unsigned int v92;
  uint64_t v93;
  WTF *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  void *v97;
  CFTypeRef v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  const void *v110;
  const void *v111;
  const void *v112;
  const void *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  _BOOL8 v116;
  id v119;
  id obj;
  uint64_t v121;
  WebKit *v124;
  CFTypeRef cf;
  uint64_t *v126;
  char v127;
  WTF::StringImpl *v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE v154[128];
  _BYTE v155[128];
  _BYTE v156[128];
  _BYTE v157[128];
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v124 = a5;
  v152 = 0;
  v153 = 0;
  v10 = *(_DWORD *)(a2 + 12);
  if (!v10)
  {
    v116 = 1;
    goto LABEL_189;
  }
  v11 = *(_BYTE **)a2;
  v121 = *(_QWORD *)a2 + 120 * v10;
  do
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
    if (v12)
      *(_DWORD *)v12 += 2;
    v151 = v12;
    if (a3 == 1)
    {
      if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 376), &v151, v9) & 1) != 0)goto LABEL_7;
      v17 = HIDWORD(v153);
      if (HIDWORD(v153))
      {
        v34 = 0;
        while ((WTF::equal(*(WTF **)(v152 + 8 * v34), v151, v13) & 1) == 0)
        {
          ++v34;
          v17 = HIDWORD(v153);
          if (v34 >= HIDWORD(v153))
            goto LABEL_11;
        }
LABEL_7:
        if (v151)
          v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v15 = &stru_1E351F1B8;
        WebKit::toErrorString(v124, 0, CFSTR("duplicate ID '%@'"), v14, v15);
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        v16 = 1;
        goto LABEL_173;
      }
    }
    else
    {
      v17 = HIDWORD(v153);
    }
LABEL_11:
    if (v17 == (_DWORD)v153)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v152, (unint64_t)&v151);
    }
    else
    {
      v19 = v151;
      v18 = v152;
      if (v151)
        *(_DWORD *)v151 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
      HIDWORD(v153) = v17 + 1;
    }
    v150 = 0;
    if (v11[40])
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)(v11 + 24), (uint64_t *)&cf);
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v20 = (id)objc_claimAutoreleasedReturnValue();

      v21 = cf;
      cf = 0;
      if (v21)
        CFRelease(v21);
    }
    else
    {
      v20 = (id)MEMORY[0x1E0C9AA60];
    }
    WebKit::filterObjects<NSArray>(v20, &__block_literal_global_47_0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v23 = v22;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v146, v157, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v147;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v147 != v25)
            objc_enumerationMutation(v23);
          v27 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * i);
          WebKit::WebExtension::resourceStringForPath(*(_QWORD *)(a1 + 56), v27, 0, 1);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v28 == 0;

          if (v29)
          {
            WebKit::toErrorString(v124, 0, CFSTR("invalid resource '%@'"), v30, v27);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            v16 = 1;
            v33 = v23;
            goto LABEL_171;
          }
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v146, v157, 16);
      }
      while (v24);
    }

    if (v11[16])
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v11, (uint64_t *)&cf);
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v31 = (id)objc_claimAutoreleasedReturnValue();

      v32 = cf;
      cf = 0;
      if (v32)
        CFRelease(v32);
    }
    else
    {
      v31 = (id)MEMORY[0x1E0C9AA60];
    }
    WebKit::filterObjects<NSArray>(v31, &__block_literal_global_50);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v33 = v35;
    v36 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v142, v156, 16);
    if (v36)
    {
      v37 = *(_QWORD *)v143;
      do
      {
        for (j = 0; j != v36; ++j)
        {
          if (*(_QWORD *)v143 != v37)
            objc_enumerationMutation(v33);
          v39 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * j);
          WebKit::WebExtension::resourceStringForPath(*(_QWORD *)(a1 + 56), v39, 0, 1);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = v40 == 0;

          if (v41)
          {
            WebKit::toErrorString(v124, 0, CFSTR("invalid resource '%@'"), v42, v39);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            v16 = 1;
            v45 = v33;
            goto LABEL_170;
          }
        }
        v36 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v142, v156, 16);
      }
      while (v36);
    }

    if (v11[104])
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)(v11 + 88), (uint64_t *)&cf);
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v43 = (id)objc_claimAutoreleasedReturnValue();

      v44 = cf;
      cf = 0;
      if (v44)
        CFRelease(v44);
    }
    else
    {
      v43 = (id)MEMORY[0x1E0C9AA60];
    }
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    obj = v43;
    v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v138, v155, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v139;
      do
      {
        for (k = 0; k != v46; ++k)
        {
          if (*(_QWORD *)v139 != v47)
            objc_enumerationMutation(obj);
          v49 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * k);
          if (!objc_msgSend(v49, "length"))
          {
            if (v151)
              v61 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v61 = &stru_1E351F1B8;
            WebKit::toErrorString(v124, 0, CFSTR("script with ID '%@' contains an empty match pattern"), v50, v61);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_79:
            v16 = 1;
            v62 = obj;
            goto LABEL_169;
          }
          MEMORY[0x19AEABCC8](&cf, v49);
          WebKit::WebExtensionMatchPattern::getOrCreate((WTF::StringImpl **)&cf, v51, &v137);
          v54 = (WTF::StringImpl *)cf;
          cf = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v52);
            else
              *(_DWORD *)v54 -= 2;
          }
          if (!v137 || (WebKit::WebExtensionMatchPattern::isSupported(v137) & 1) == 0)
          {
            if (v151)
              v59 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v59 = &stru_1E351F1B8;
            WebKit::toErrorString(v124, 0, CFSTR("script with ID '%@' has an invalid match pattern '%@'"), v53, v59, v49);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            v60 = v137;
            v137 = 0;
            if (v60)
              CFRelease(*((CFTypeRef *)v60 + 1));
            goto LABEL_79;
          }
          v136 = v137;
          v137 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v150, (uint64_t *)&v136, (uint64_t)&cf);
          v55 = (uint64_t)v136;
          v136 = 0;
          if (v55)
            CFRelease(*(CFTypeRef *)(v55 + 8));
          v56 = v137;
          v137 = 0;
          if (v56)
            CFRelease(*((CFTypeRef *)v56 + 1));
        }
        v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v138, v155, 16);
      }
      while (v46);
    }

    if (v11[80])
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)(v11 + 64), (uint64_t *)&cf);
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v57 = (id)objc_claimAutoreleasedReturnValue();

      v58 = cf;
      cf = 0;
      if (v58)
        CFRelease(v58);
    }
    else
    {
      v57 = (id)MEMORY[0x1E0C9AA60];
    }
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v119 = v57;
    v63 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v132, v154, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v133;
      do
      {
        for (m = 0; m != v63; ++m)
        {
          if (*(_QWORD *)v133 != v64)
            objc_enumerationMutation(v119);
          v66 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * m);
          if (!objc_msgSend(v66, "length"))
          {
            if (v151)
              v83 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v83 = &stru_1E351F1B8;
            WebKit::toErrorString(v124, 0, CFSTR("script with ID '%@' contains an empty exclude match pattern"), v67, v83);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_114:
            v16 = 1;
            goto LABEL_168;
          }
          MEMORY[0x19AEABCC8](&v137, v66);
          WebKit::WebExtensionMatchPattern::getOrCreate(&v137, v68, &cf);
          v71 = v137;
          v137 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
              WTF::StringImpl::destroy(v71, v69);
            else
              *(_DWORD *)v71 -= 2;
          }
          if (!cf || (WebKit::WebExtensionMatchPattern::isSupported((WebKit::WebExtensionMatchPattern *)cf) & 1) == 0)
          {
            if (v151)
              v81 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v81 = &stru_1E351F1B8;
            WebKit::toErrorString(v124, 0, CFSTR("script with ID '%@' has an invalid exclude match pattern '%@'"), v70, v81, v66);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            v82 = (CFTypeRef *)cf;
            cf = 0;
            if (v82)
              CFRelease(v82[1]);
            goto LABEL_114;
          }
          v72 = (CFTypeRef *)cf;
          cf = 0;
          if (v72)
            CFRelease(v72[1]);
        }
        v63 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v132, v154, 16);
      }
      while (v63);
    }

    cf = 0;
    v126 = 0;
    v127 = 0;
    v73 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v128 = v73;
    v129 = 16842752;
    v130 = 0u;
    v131 = 0u;
    WTF::String::operator=(&v128, (WTF::StringImpl *)(v11 + 48));
    v75 = v150;
    v150 = 0;
    v76 = (uint64_t *)cf;
    cf = v75;
    if (v76)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v76, v74);
    v77 = v126;
    v126 = 0;
    if (v77)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v77, v74);
    v78 = v11[57];
    if (v78)
      v78 = v11[56];
    v127 = v78;
    v79 = v11[113];
    if (v79)
      v79 = v11[112];
    BYTE1(v129) = v79;
    if (v11[117])
      v80 = v11[116];
    else
      v80 = 1;
    BYTE2(v129) = v80;
    if (v11[119])
      v84 = v11[118];
    else
      v84 = 1;
    HIBYTE(v129) = v84;
    WTF::RetainPtr<NSArray>::operator=((const void **)&v130, v23);
    WTF::RetainPtr<NSArray>::operator=((const void **)&v130 + 1, v33);
    v86 = *a4;
    if (*a4
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a4),
          (v86 = *a4) != 0))
    {
      v87 = *(_DWORD *)(v86 - 8);
    }
    else
    {
      v87 = 0;
    }
    v88 = *((_DWORD *)v151 + 4);
    if (v88 >= 0x100)
      v89 = v88 >> 8;
    else
      v89 = WTF::StringImpl::hashSlowCase(v151);
    v90 = 0;
    for (n = 1; ; ++n)
    {
      v92 = v89 & v87;
      v93 = v86 + 80 * (v89 & v87);
      v94 = *(WTF **)v93;
      if (*(_QWORD *)v93 == -1)
      {
        v90 = v86 + 80 * v92;
        goto LABEL_131;
      }
      if (!v94)
        break;
      if ((WTF::equal(v94, v151, v85) & 1) != 0)
        goto LABEL_151;
LABEL_131:
      v89 = n + v92;
    }
    if (v90)
    {
      *(_OWORD *)v90 = 0u;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      v96 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      *(_QWORD *)(v90 + 32) = v96;
      *(_WORD *)(v90 + 42) = 257;
      *(_OWORD *)(v90 + 48) = 0u;
      *(_OWORD *)(v90 + 64) = 0u;
      --*(_DWORD *)(*a4 - 16);
      v93 = v90;
    }
    WTF::String::operator=((WTF::StringImpl **)v93, (WTF::StringImpl *)&v151);
    v98 = cf;
    cf = 0;
    v99 = *(uint64_t **)(v93 + 8);
    *(_QWORD *)(v93 + 8) = v98;
    if (v99)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v99, v97);
    v100 = v126;
    v126 = 0;
    v101 = *(uint64_t **)(v93 + 16);
    *(_QWORD *)(v93 + 16) = v100;
    if (v101)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v101, v97);
    *(_BYTE *)(v93 + 24) = v127;
    v102 = v128;
    v128 = 0;
    v103 = *(WTF::StringImpl **)(v93 + 32);
    *(_QWORD *)(v93 + 32) = v102;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v97);
      else
        *(_DWORD *)v103 -= 2;
    }
    *(_DWORD *)(v93 + 40) = v129;
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v93 + 48), (uint64_t *)&v130);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v93 + 56), (uint64_t *)&v130 + 1);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v93 + 64), (uint64_t *)&v131);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v93 + 72), (uint64_t *)&v131 + 1);
    v104 = *a4;
    if (*a4)
      v105 = *(_DWORD *)(v104 - 12) + 1;
    else
      v105 = 1;
    *(_DWORD *)(v104 - 12) = v105;
    v106 = *a4;
    if (*a4)
      v107 = *(_DWORD *)(v106 - 12);
    else
      v107 = 0;
    v108 = (*(_DWORD *)(v106 - 16) + v107);
    v109 = *(unsigned int *)(v106 - 4);
    if (v109 > 0x400)
    {
      if (v109 <= 2 * v108)
LABEL_150:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a4);
    }
    else if (3 * v109 <= 4 * v108)
    {
      goto LABEL_150;
    }
LABEL_151:
    v110 = (const void *)*((_QWORD *)&v131 + 1);
    *((_QWORD *)&v131 + 1) = 0;
    if (v110)
      CFRelease(v110);
    v111 = (const void *)v131;
    *(_QWORD *)&v131 = 0;
    if (v111)
      CFRelease(v111);
    v112 = (const void *)*((_QWORD *)&v130 + 1);
    *((_QWORD *)&v130 + 1) = 0;
    if (v112)
      CFRelease(v112);
    v113 = (const void *)v130;
    *(_QWORD *)&v130 = 0;
    if (v113)
      CFRelease(v113);
    v114 = v128;
    v128 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v95);
      else
        *(_DWORD *)v114 -= 2;
    }
    if (v126)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v126, v95);
    if (cf)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)cf, v95);
    v16 = 0;
LABEL_168:
    v62 = v119;
LABEL_169:

    v45 = obj;
LABEL_170:

LABEL_171:
    if (v150)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v150, v8);
LABEL_173:
    v115 = v151;
    v151 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
        WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v115 -= 2;
    }
    v116 = v16 == 0;
    if (v16)
      break;
    v11 += 120;
  }
  while (v11 != (_BYTE *)v121);
LABEL_189:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v152, v8);

  return v116;
}

void sub_19772CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,CFTypeRef cf,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a70;
  WTF::StringImpl *a71;
  char a72;
  void *v72;
  void *v73;
  void *v74;
  void *v76;

  if (a70)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a70, v76);
  if (a71)
  {
    if (*(_DWORD *)a71 == 2)
      WTF::StringImpl::destroy(a71, (WTF::StringImpl *)v76);
    else
      *(_DWORD *)a71 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a72, v76);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const __CFString *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  BOOL v22;
  NSString *v23;
  NSString *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  void *v34;
  void *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v47;
  WTF::StringImpl *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  id v52;
  __CFString *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56[2];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  WTF::StringImpl *v60;
  _BYTE v61[24];
  _BYTE v62[32];
  uint64_t v63;
  uint64_t v64;

  v63 = 0;
  v64 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 120 * v5;
    while (1)
    {
      WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)v56, v6);
      v9 = v60;
      if (v60)
        *(_DWORD *)v60 += 2;
      v55 = v9;
      v10 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 376), &v55, v8);
      v11 = v10;
      if (v10)
      {
        ++*(_DWORD *)v10;
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::merge((uint64_t)v10, (uint64_t)v56);
        if (HIDWORD(v64) == (_DWORD)v64)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>((uint64_t)&v63, (unint64_t)v56);
        }
        else
        {
          WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(v63 + 120 * HIDWORD(v64), (uint64_t)v56);
          ++HIDWORD(v64);
        }
        WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v11, v12);
      }
      else
      {
        if (v55)
          v16 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v16 = &stru_1E351F1B8;
        v53 = (__CFString *)v16;
        WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)CFSTR("scripting.updateContentScripts()"), 0, CFSTR("no existing script with ID '%@'"), (NSString *)&v53, &v54);
        v17 = v54;
        v54 = 0;
        v48 = v17;
        LOBYTE(v49) = 1;
        v18 = *a3;
        *a3 = 0;
        v47 = v18;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v48);
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        if ((_BYTE)v49)
        {
          v20 = v48;
          v48 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v21 = v54;
        v54 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v19);
          else
            *(_DWORD *)v21 -= 2;
        }

      }
      v14 = v55;
      v55 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (v62[16])
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v13);
      if (v61[16])
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v13);
      v15 = v60;
      v60 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (BYTE8(v59))
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v13);
      if ((_BYTE)v57)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v13);
      if (!v11)
        break;
      v6 += 120;
      v7 -= 120;
      if (!v7)
        goto LABEL_42;
    }
  }
  else
  {
LABEL_42:
    v55 = 0;
    v52 = 0;
    v22 = WebKit::WebExtensionContext::createInjectedContentForScripts(a1, (uint64_t)&v63, 0, (uint64_t *)&v55, CFSTR("scripting.updateContentScripts()"), &v52);
    v24 = (NSString *)v52;
    if (v22)
    {
      WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v63);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = (WTF::StringImpl *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v27 = v63;
      v63 = 0;
      v28 = v55;
      v29 = *a3;
      *a3 = 0;
      v55 = 0;
      v56[0] = v48;
      v56[1] = (WTF::StringImpl *)a1;
      v57 = v27;
      v49 = 0u;
      v50 = 0;
      v30 = v64;
      v64 = 0;
      v58 = v30;
      v51 = 0u;
      *(_QWORD *)&v59 = v28;
      *((_QWORD *)&v59 + 1) = v29;
      v31 = malloc_type_malloc(0x50uLL, 0x10F20402AD9362EuLL);
      *v31 = MEMORY[0x1E0C809A0];
      v31[1] = 50331650;
      v31[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
      v31[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
      *((_OWORD *)v31 + 2) = *(_OWORD *)v56;
      v32 = v57;
      v56[1] = 0;
      v57 = 0;
      v31[6] = v32;
      v31[7] = v58;
      v33 = v59;
      v58 = 0;
      *(_QWORD *)&v59 = 0;
      *((_OWORD *)v31 + 4) = v33;
      v34 = _Block_copy(v31);

      *((_QWORD *)&v59 + 1) = 0;
      WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v35);
      v36 = v56[1];
      v56[1] = 0;
      if (v36)
        CFRelease(*((CFTypeRef *)v36 + 1));
      v37 = _Block_copy(v34);
      objc_msgSend(v26, "updateScripts:completionHandler:", v25, v37);

      v39 = *((_QWORD *)&v51 + 1);
      *((_QWORD *)&v51 + 1) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if ((_QWORD)v51)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v51, v38);
      WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49 + 8, v38);
      v40 = v49;
      *(_QWORD *)&v49 = 0;
      if (v40)
        CFRelease(*(CFTypeRef *)(v40 + 8));

    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.updateContentScripts()"), 0, v24, v23, &v48);
      v41 = v48;
      v48 = 0;
      v56[0] = v41;
      LOBYTE(v56[1]) = 1;
      v42 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v42 + 16))(v42, v56);
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      if (LOBYTE(v56[1]))
      {
        v44 = v56[0];
        v56[0] = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v43);
          else
            *(_DWORD *)v44 -= 2;
        }
      }
      v45 = v48;
      v48 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v43);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (v55)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v55, v43);
    }

  }
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v13);
}

void sub_19772D34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if ((_BYTE)a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v39);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v39);
    else
      *(_DWORD *)a19 -= 2;
  }

  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v40);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a34)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v40);
  if (a31)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35, v40);
  v41 = a27;
  a27 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  if ((_BYTE)a26)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v34, v40);
  if (a23)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v40);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v37 - 104, v40);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scriptingGetRegisteredScripts(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _BYTE *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  char v82;
  WTF::StringImpl *v83;
  __int16 v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  int v90;
  int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v94 = 0;
  v95 = 0;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = (uint64_t *)(a1 + 376);
    v7 = 8 * v4;
    do
    {
      v8 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, v5, a3);
      v9 = v8;
      if (v8)
      {
        ++*(_DWORD *)v8;
        WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)&v76, (uint64_t)v8 + 16);
        v11 = HIDWORD(v95);
        if (HIDWORD(v95) == (_DWORD)v95)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v94, (unint64_t)&v76);
        }
        else
        {
          v12 = v94;
          v13 = v94 + 120 * HIDWORD(v95);
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 16) = 0;
          if ((_BYTE)v78)
          {
            *(_QWORD *)v13 = 0;
            *(_QWORD *)(v13 + 8) = 0;
            v14 = v76;
            v76 = 0;
            *(_QWORD *)v13 = v14;
            LODWORD(v14) = v77;
            LODWORD(v77) = 0;
            *(_DWORD *)(v13 + 8) = v14;
            LODWORD(v14) = HIDWORD(v77);
            HIDWORD(v77) = 0;
            *(_DWORD *)(v13 + 12) = v14;
            *(_BYTE *)(v13 + 16) = 1;
          }
          v15 = v12 + 120 * v11;
          *(_BYTE *)(v15 + 24) = 0;
          v16 = v15 + 24;
          *(_BYTE *)(v16 + 16) = 0;
          v17 = (_BYTE *)(v16 + 16);
          if (v82)
          {
            *(_QWORD *)v16 = 0;
            *(_QWORD *)(v16 + 8) = 0;
            v18 = v79;
            v79 = 0;
            *(_QWORD *)v16 = v18;
            v19 = v80;
            v80 = 0;
            v20 = v12 + 120 * v11;
            *(_DWORD *)(v20 + 32) = v19;
            v21 = v81;
            v81 = 0;
            *(_DWORD *)(v20 + 36) = v21;
            *v17 = 1;
          }
          v22 = v12 + 120 * v11;
          v23 = v83;
          v83 = 0;
          *(_QWORD *)(v22 + 48) = v23;
          LOWORD(v23) = v84;
          *(_BYTE *)(v22 + 80) = 0;
          v24 = (_BYTE *)(v22 + 80);
          *((_WORD *)v24 - 12) = (_WORD)v23;
          *(v24 - 16) = 0;
          v25 = v24 - 16;
          if (v88)
          {
            *v25 = 0;
            *((_QWORD *)v24 - 1) = 0;
            v26 = v85;
            v85 = 0;
            *v25 = v26;
            v27 = v86;
            v86 = 0;
            v28 = v12 + 120 * v11;
            *(_DWORD *)(v28 + 72) = v27;
            v29 = v87;
            v87 = 0;
            *(_DWORD *)(v28 + 76) = v29;
            *v24 = 1;
          }
          v30 = v12 + 120 * v11;
          *(_BYTE *)(v30 + 88) = 0;
          v31 = v30 + 88;
          *(_BYTE *)(v31 + 16) = 0;
          v32 = (_BYTE *)(v31 + 16);
          if (v92)
          {
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
            v33 = v89;
            v89 = 0;
            *(_QWORD *)v31 = v33;
            v34 = v90;
            v90 = 0;
            v35 = v12 + 120 * v11;
            *(_DWORD *)(v35 + 96) = v34;
            v36 = v91;
            v91 = 0;
            *(_DWORD *)(v35 + 100) = v36;
            *v32 = 1;
          }
          *(_QWORD *)(v12 + 120 * v11 + 112) = v93;
          ++HIDWORD(v95);
        }
        if (v92)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v10);
        if (v88)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v10);
        v37 = v83;
        v83 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (v82)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v10);
        if ((_BYTE)v78)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v10);
        WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v9, v10);
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v38 = *(_QWORD **)(a1 + 376);
    v39 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v38);
    v40 = v39;
    v42 = v41;
    if (v38)
      v43 = &v38[2 * *((unsigned int *)v38 - 1)];
    else
      v43 = 0;
    if (v43 != v39)
    {
      do
      {
        WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)&v76, v40[1] + 16);
        v45 = HIDWORD(v95);
        if (HIDWORD(v95) == (_DWORD)v95)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v94, (unint64_t)&v76);
        }
        else
        {
          v46 = v94;
          v47 = v94 + 120 * HIDWORD(v95);
          *(_BYTE *)v47 = 0;
          *(_BYTE *)(v47 + 16) = 0;
          if ((_BYTE)v78)
          {
            *(_QWORD *)v47 = 0;
            *(_QWORD *)(v47 + 8) = 0;
            v48 = v76;
            v76 = 0;
            *(_QWORD *)v47 = v48;
            LODWORD(v48) = v77;
            LODWORD(v77) = 0;
            *(_DWORD *)(v47 + 8) = v48;
            LODWORD(v48) = HIDWORD(v77);
            HIDWORD(v77) = 0;
            *(_DWORD *)(v47 + 12) = v48;
            *(_BYTE *)(v47 + 16) = 1;
          }
          v49 = v46 + 120 * v45;
          *(_BYTE *)(v49 + 24) = 0;
          v50 = v49 + 24;
          *(_BYTE *)(v50 + 16) = 0;
          v51 = (_BYTE *)(v50 + 16);
          if (v82)
          {
            *(_QWORD *)v50 = 0;
            *(_QWORD *)(v50 + 8) = 0;
            v52 = v79;
            v79 = 0;
            *(_QWORD *)v50 = v52;
            v53 = v80;
            v80 = 0;
            v54 = v46 + 120 * v45;
            *(_DWORD *)(v54 + 32) = v53;
            v55 = v81;
            v81 = 0;
            *(_DWORD *)(v54 + 36) = v55;
            *v51 = 1;
          }
          v56 = v46 + 120 * v45;
          v57 = v83;
          v83 = 0;
          *(_QWORD *)(v56 + 48) = v57;
          LOWORD(v57) = v84;
          *(_BYTE *)(v56 + 80) = 0;
          v58 = (_BYTE *)(v56 + 80);
          *((_WORD *)v58 - 12) = (_WORD)v57;
          *(v58 - 16) = 0;
          v59 = v58 - 16;
          if (v88)
          {
            *v59 = 0;
            *((_QWORD *)v58 - 1) = 0;
            v60 = v85;
            v85 = 0;
            *v59 = v60;
            v61 = v86;
            v86 = 0;
            v62 = v46 + 120 * v45;
            *(_DWORD *)(v62 + 72) = v61;
            v63 = v87;
            v87 = 0;
            *(_DWORD *)(v62 + 76) = v63;
            *v58 = 1;
          }
          v64 = v46 + 120 * v45;
          *(_BYTE *)(v64 + 88) = 0;
          v65 = v64 + 88;
          *(_BYTE *)(v65 + 16) = 0;
          v66 = (_BYTE *)(v65 + 16);
          if (v92)
          {
            *(_QWORD *)v65 = 0;
            *(_QWORD *)(v65 + 8) = 0;
            v67 = v89;
            v89 = 0;
            *(_QWORD *)v65 = v67;
            v68 = v90;
            v90 = 0;
            v69 = v46 + 120 * v45;
            *(_DWORD *)(v69 + 96) = v68;
            v70 = v91;
            v91 = 0;
            *(_DWORD *)(v69 + 100) = v70;
            *v66 = 1;
          }
          *(_QWORD *)(v46 + 120 * v45 + 112) = v93;
          ++HIDWORD(v95);
        }
        if (v92)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v44);
        if (v88)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v44);
        v71 = v83;
        v83 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v44);
          else
            *(_DWORD *)v71 -= 2;
        }
        if (v82)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v44);
        if ((_BYTE)v78)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v44);
        while (1)
        {
          v40 += 2;
          if (v40 == v42)
            break;
          if ((unint64_t)(*v40 + 1) > 1)
            goto LABEL_61;
        }
        v40 = v42;
LABEL_61:
        ;
      }
      while (v40 != v43);
    }
  }
  v76 = v94;
  v72 = v95;
  v94 = 0;
  v95 = 0;
  v77 = v72;
  v78 = 0;
  v73 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v73 + 16))(v73, &v76);
  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  if (v78 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F7728[v78])(&v96, &v76);
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v74);
}

void sub_19772DAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, char a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F7728[a11])(v23 - 81, &a9);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 - 104, v25);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::scriptingUnregisterContentScripts(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **result;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  void *v32;
  const __CFString *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef cf;
  __CFString *v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (*(_DWORD *)(a2 + 12))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v45, a2);
    v6 = v45;
  }
  else
  {
    v6 = *(WTF::StringImpl ***)(a1 + 376);
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
    v8 = result;
    v10 = v9;
    if (v6)
    {
      v11 = &v6[2 * *((unsigned int *)v6 - 1)];
      v45 = 0;
      v46 = 0;
      v12 = *((unsigned int *)v6 - 3);
      if ((_DWORD)v12)
      {
        if (v12 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * v12));
        LODWORD(v46) = v12;
        v45 = v6;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v11 = 0;
      v45 = 0;
      v46 = 0;
    }
    if (v11 != v8)
    {
      v13 = 0;
      do
      {
        v14 = *v8;
        if (*v8)
          *(_DWORD *)v14 += 2;
        v6[v13] = v14;
        while (1)
        {
          v8 += 2;
          if (v8 == v10)
            break;
          if ((unint64_t)*v8 + 1 > 1)
            goto LABEL_17;
        }
        v8 = v10;
LABEL_17:
        ++v13;
      }
      while (v8 != v11);
      HIDWORD(v46) = v13;
    }
  }
  if (HIDWORD(v46))
  {
    v15 = 8 * HIDWORD(v46);
    while ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 376), v6, v5) & 1) != 0)
    {
      ++v6;
      v15 -= 8;
      if (!v15)
        goto LABEL_23;
    }
    if (*v6)
      v33 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v33 = &stru_1E351F1B8;
    v44 = (__CFString *)v33;
    WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)CFSTR("scripting.unregisterContentScripts()"), 0, CFSTR("no script with ID '%@'"), (NSString *)&v44, v39);
    v34 = v39[0];
    v39[0] = 0;
    v47[0] = v34;
    LOBYTE(v47[1]) = 1;
    v35 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 16))(v35, v47);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (LOBYTE(v47[1]))
    {
      v37 = v47[0];
      v47[0] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    v38 = v39[0];
    v39[0] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }

  }
  else
  {
LABEL_23:
    WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&v45, (uint64_t *)&cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v39[0] = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v39[1] = (WTF::StringImpl *)a1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v40, (uint64_t)&v45);
    v18 = *a3;
    *a3 = 0;
    *(_OWORD *)v47 = *(_OWORD *)v39;
    v19 = v40;
    v39[1] = 0;
    v40 = 0;
    v48 = v19;
    v20 = v41;
    v41 = 0;
    v42 = 0;
    v49 = v20;
    v50 = v18;
    v21 = malloc_type_malloc(0x48uLL, 0x10E0040B06CADC3uLL);
    *v21 = MEMORY[0x1E0C809A0];
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
    v21[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    *((_OWORD *)v21 + 2) = *(_OWORD *)v47;
    v22 = v48;
    v47[1] = 0;
    v48 = 0;
    v21[6] = v22;
    v23 = v49;
    v49 = 0;
    v21[7] = v23;
    v21[8] = v50;
    v24 = _Block_copy(v21);

    v50 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v25);
    v26 = v47[1];
    v47[1] = 0;
    if (v26)
      CFRelease(*((CFTypeRef *)v26 + 1));
    v27 = _Block_copy(v24);
    objc_msgSend(v16, "deleteScriptsWithIDs:completionHandler:", v17, v27);

    v29 = v42;
    v42 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v28);
    v30 = v39[1];
    v39[1] = 0;
    if (v30)
      CFRelease(*((CFTypeRef *)v30 + 1));

    v31 = cf;
    cf = 0;
    if (v31)
      CFRelease(v31);

  }
  return (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v32);
}

void sub_19772DFE4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadRegisteredContentScripts(CFTypeRef *this)
{
  WTF::StringImpl *v2;
  int v3;
  WTF::StringImpl *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  WTF::StringImpl *v9;

  MEMORY[0x19AEABCC8](&v9, CFSTR("scripting"));
  v3 = WebKit::WebExtensionContext::permissionState((uint64_t)this, &v9, 0, 2) & 0xFFFFFFFE;
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (v3 == 2)
  {
    WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    CFRetain(this[1]);
    v6 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v6 = MEMORY[0x1E0C809A0];
    v6[1] = 50331650;
    v6[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
    v6[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::descriptor;
    v6[4] = this;
    v6[5] = this;
    v7 = _Block_copy(v6);

    v8 = _Block_copy(v7);
    objc_msgSend(v5, "getScriptsWithCompletionHandler:", v8);

  }
}

void sub_19772E250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::clearRegisteredContentScripts(WebKit::WebExtensionContext *this, void *a2)
{
  WTF::StringImpl **v3;
  id v4;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 47);
  if (v3)
  {
    *((_QWORD *)this + 47) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WebKit::WebExtensionContext::registeredContentScriptsStore(this);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deleteDatabaseWithCompletionHandler:", &__block_literal_global_37);

}

void sub_19772E304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext29clearRegisteredContentScriptsEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    v3 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v4 = 138543362;
      v5 = v2;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Failed to delete registered content scripts database. Error: %{public}@", (uint8_t *)&v4, 0xCu);
    }
  }

}

BOOL ___ZN6WebKit19WebExtensionContext31createInjectedContentForScriptsERKN3WTF6VectorINS_38WebExtensionRegisteredScriptParametersELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEENS_26WebExtensionDynamicScripts28WebExtensionRegisteredScript21FirstTimeRegistrationERNS1_7HashMapINS1_6StringENS_12WebExtension19InjectedContentDataENS1_11DefaultHashISD_EENS1_10HashTraitsISD_EENSI_ISF_EENS1_15HashTableTraitsEEEP8NSStringPU15__autoreleasingSP__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

BOOL ___ZN6WebKit19WebExtensionContext31createInjectedContentForScriptsERKN3WTF6VectorINS_38WebExtensionRegisteredScriptParametersELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEENS_26WebExtensionDynamicScripts28WebExtensionRegisteredScript21FirstTimeRegistrationERNS1_7HashMapINS1_6StringENS_12WebExtension19InjectedContentDataENS1_11DefaultHashISD_EENS1_10HashTraitsISD_EENSI_ISF_EENS1_15HashTableTraitsEEEP8NSStringPU15__autoreleasingSP__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "length") != 0;
}

uint64_t WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::__optional_copy_base<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 16), (_BYTE *)(a2 + 16));
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 56), a2 + 56);
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v4 = *(_DWORD **)(a2 + 80);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a1 + 80) = v4;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v5 = *(_DWORD **)(a2 + 96);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 96) = v5;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = *(_DWORD **)(a2 + 112);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 112) = v6;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

void sub_19772E4F8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_BYTE *)(v2 + 48))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  if (*(_BYTE *)(v2 + 24))
  {
    v6 = *v3;
    *v3 = 0;
    if (v6)
      CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, _BYTE *a2)
{
  uint64_t v3;

  *a1 = 0;
  a1[8] = 0;
  if (a2[8])
  {
    v3 = *(_QWORD *)a2;
    CFRetain(*(CFTypeRef *)(*(_QWORD *)a2 + 8));
    *(_QWORD *)a1 = v3;
    a1[8] = 1;
  }
  return a1;
}

void sub_19772E584(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  if (*((_BYTE *)v1 + 8))
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_19772E5F0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[8];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[3];
  WTF *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;
  uint64_t v34;
  uint64_t v35;

  v4 = a2;
  if (v4)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.registerContentScripts()"), 0, v4, v3, v25);
    v5 = v25[0];
    v25[0] = 0;
    v27 = v5;
    LOBYTE(v28) = 1;
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v28)
    {
      v8 = v27;
      v27 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    v24 = v25[0];
    v25[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v7);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    v34 = 0;
    v35 = 0;
    v10 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 48);
      v12 = 120 * v10;
      do
      {
        WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)&v27, *(_QWORD *)(a1 + 64), (WTF::StringImpl **)(v11 + 48));
        v13 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript((uint64_t)v13, v9, v11, (const WebKit::WebExtension::InjectedContentData *)&v27);
        v26 = v13;
        WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>((uint64_t)v25, (uint64_t *)(v9 + 376), (WTF::StringImpl **)(v11 + 48), &v26);
        if (v26)
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v26, v14);
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v34, (unint64_t)&v27);
        }
        else
        {
          WebKit::WebExtension::InjectedContentData::InjectedContentData(v34 + 72 * HIDWORD(v35), (uint64_t *)&v27);
          ++HIDWORD(v35);
        }
        v16 = cf;
        cf = 0;
        if (v16)
          CFRelease(v16);
        v17 = v32;
        v32 = 0;
        if (v17)
          CFRelease(v17);
        v18 = v31;
        v31 = 0;
        if (v18)
          CFRelease(v18);
        v19 = v30;
        v30 = 0;
        if (v19)
          CFRelease(v19);
        v20 = v29;
        v29 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v15);
          else
            *(_DWORD *)v20 -= 2;
        }
        if (v28)
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v28, v15);
        if (v27)
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v27, v15);
        v11 += 120;
        v12 -= 120;
      }
      while (v12);
    }
    WebKit::WebExtensionContext::addInjectedContent(v9, (uint64_t)&v34);
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    v21 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if ((_BYTE)v28)
    {
      v23 = v27;
      v27 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v22);
  }

}

void sub_19772E93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef cf)
{
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if ((_BYTE)a15 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v26);
    else
      *(_DWORD *)a14 -= 2;
  }
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24 - 96, v26);

  _Unwind_Resume(a1);
}

WebKit::WebExtension::InjectedContentData *WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WebKit::WebExtension::InjectedContentData *a1, uint64_t a2, WTF::StringImpl **a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  unsigned int v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WebKit::WebExtension::InjectedContentData *result;
  __int128 v20;
  WTF::StringImpl *v21[2];
  uint64_t v22;
  CFTypeRef v23[2];
  CFTypeRef cf[3];

  if (a2)
  {
    v6 = *(_DWORD *)(a2 - 8);
    v7 = *((_DWORD *)*a3 + 4);
    if (v7 >= 0x100)
      v8 = v7 >> 8;
    else
      v8 = WTF::StringImpl::hashSlowCase(*a3);
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(a2 + 80 * (v8 & v6));
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_10;
        if ((WTF::equal(v11, *a3, (const WTF::StringImpl *)a3) & 1) != 0)
          break;
      }
      ++i;
    }
    return WebKit::WebExtension::InjectedContentData::InjectedContentData(a1, (const WebKit::WebExtension::InjectedContentData *)(a2 + 80 * v10 + 8));
  }
  else
  {
LABEL_10:
    v20 = 0u;
    *(_OWORD *)v21 = 0u;
    v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v21[1] = v12;
    v22 = 16842752;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)cf = 0u;
    WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)a1, (uint64_t *)&v20);
    v14 = cf[1];
    cf[1] = 0;
    if (v14)
      CFRelease(v14);
    v15 = cf[0];
    cf[0] = 0;
    if (v15)
      CFRelease(v15);
    v16 = v23[1];
    v23[1] = 0;
    if (v16)
      CFRelease(v16);
    v17 = v23[0];
    v23[0] = 0;
    if (v17)
      CFRelease(v17);
    v18 = v21[1];
    v21[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_QWORD *)&v20 + 1))
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*((uint64_t **)&v20 + 1), v13);
    result = (WebKit::WebExtension::InjectedContentData *)v20;
    if ((_QWORD)v20)
      return (WebKit::WebExtension::InjectedContentData *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v20, v13);
  }
  return result;
}

void sub_19772EC5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a16)
    CFRelease(a16);
  if (a15)
    CFRelease(a15);
  if (a14)
    CFRelease(a14);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);
  if (a9)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a9, a2);
  _Unwind_Resume(exception_object);
}

WebKit::WebExtension::InjectedContentData *WebKit::WebExtension::InjectedContentData::InjectedContentData(WebKit::WebExtension::InjectedContentData *this, const WebKit::WebExtension::InjectedContentData *a2)
{
  uint64_t *v4;
  _DWORD *v5;

  v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)this, (_QWORD **)a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(v4 + 1, (_QWORD **)a2 + 1);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  v5 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 3) = v5;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  WTF::RetainPtr<NSArray>::RetainPtr((_QWORD *)this + 5, (uint64_t *)a2 + 5);
  WTF::RetainPtr<NSArray>::RetainPtr((_QWORD *)this + 6, (uint64_t *)a2 + 6);
  WTF::RetainPtr<NSArray>::RetainPtr((_QWORD *)this + 7, (uint64_t *)a2 + 7);
  WTF::RetainPtr<NSArray>::RetainPtr((_QWORD *)this + 8, (uint64_t *)a2 + 8);
  return this;
}

void sub_19772EDA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t **v3;
  const void **v4;
  const void **v5;
  const void **v6;
  const void *v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;

  v8 = *v6;
  *v6 = 0;
  if (v8)
    CFRelease(v8);
  v9 = *v5;
  *v5 = 0;
  if (v9)
    CFRelease(v9);
  v10 = *v4;
  *v4 = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*v3)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v3, a2);
  if (*(_QWORD *)v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*(uint64_t **)v2, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::RetainPtr<NSArray>::RetainPtr(_QWORD *a1, uint64_t *a2)
{
  id v3;
  void *v4;

  WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)a2, *a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_19772EE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  void *v17;
  void *v18;
  WTF *v19;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF *v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a3);
    v19 = *a4;
    *a4 = 0;
    result = v15[1];
    v15[1] = v19;
    if (result)
      result = WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(result, v18);
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_28:
        result = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
        v15 = (WTF **)result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v23 = *a2;
  if (*a2)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v23 + 16 * v24;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = v8 + 16 * v14;
  v30 = *a4;
  *a4 = 0;
  result = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(result, v17);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100)
            v20 = v19 >> 8;
          else
            v20 = WTF::StringImpl::hashSlowCase(v14);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v24, v10);
            v25 = *v23;
            *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v23[1] = v28;
          v29 = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v29, v10);
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v16, v10);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript(uint64_t a1, uint64_t a2, uint64_t a3, const WebKit::WebExtension::InjectedContentData *a4)
{
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 8) = v8;
  WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(a1 + 16, a3);
  WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(a1 + 136), a4);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void sub_19772F35C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (*(_BYTE *)(v2 + 120))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 104, a2);
  if (*(_BYTE *)(v2 + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, a2);
  v5 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*(_BYTE *)(v2 + 56))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, a2);
  if (*(_BYTE *)(v2 + 32))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v6 = *(unsigned int **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::~WebExtensionRegisteredScript(result, a2);
    return (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::~WebExtensionRegisteredScript(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 27);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 26);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)((char *)this + 136), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 120))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v5);
  if (*((_BYTE *)this + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*((_BYTE *)this + 56))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v5);
  if (*((_BYTE *)this + 32))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v5);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtension::InjectedContentData *v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::WebExtension::InjectedContentData *)(a1 + 8);
    do
    {
      if (*((_QWORD *)v4 - 1) != -1)
      {
        WebKit::WebExtension::InjectedContentData::~InjectedContentData(v4, a2);
        v5 = (WTF::StringImpl *)*((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 = (WebKit::WebExtension::InjectedContentData *)((char *)v4 + 80);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[8];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  const WTF::StringImpl *v3;
  NSString *v4;
  NSString *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  const WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  char v37;
  WTF::StringImpl *v38;
  int v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef cf;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;

  v5 = a2;
  if (v5)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.updateContentScripts()"), 0, v5, v4, &v45);
    v6 = v45;
    v45 = 0;
    v35 = v6;
    LOBYTE(v36) = 1;
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if ((_BYTE)v36)
    {
      v9 = v35;
      v35 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v33 = v45;
    v45 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v8);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 32);
    v45 = 0;
    v46 = 0;
    v10 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 48);
      v12 = 120 * v10;
      do
      {
        v13 = *(WTF::StringImpl **)(v11 + 48);
        if (v13)
          *(_DWORD *)v13 += 2;
        v44 = v13;
        v14 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v34 + 376), &v44, v3);
        v16 = v14;
        if (v14)
        {
          ++*(_DWORD *)v14;
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::updateParameters((uint64_t)v14, v11);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(v16, &v44, v17);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(v16, &v44, v18);
          WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)&v35, *(_QWORD *)(a1 + 64), &v44);
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)v16 + 17, (_QWORD **)&v35);
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)v16 + 18, &v36);
          *((_BYTE *)v16 + 152) = v37;
          WTF::String::operator=((WTF::StringImpl **)v16 + 20, (WTF::StringImpl *)&v38);
          *((_DWORD *)v16 + 42) = v39;
          WTF::RetainPtr<NSArray>::RetainPtr(&v47, (uint64_t *)&v40);
          v19 = (const void *)*((_QWORD *)v16 + 22);
          *((_QWORD *)v16 + 22) = v47;
          v47 = 0;
          if (v19)
            CFRelease(v19);
          WTF::RetainPtr<NSArray>::RetainPtr(&v47, (uint64_t *)&v41);
          v20 = (const void *)*((_QWORD *)v16 + 23);
          *((_QWORD *)v16 + 23) = v47;
          v47 = 0;
          if (v20)
            CFRelease(v20);
          WTF::RetainPtr<NSArray>::RetainPtr(&v47, (uint64_t *)&v42);
          v21 = (const void *)*((_QWORD *)v16 + 24);
          *((_QWORD *)v16 + 24) = v47;
          v47 = 0;
          if (v21)
            CFRelease(v21);
          WTF::RetainPtr<NSArray>::RetainPtr(&v47, (uint64_t *)&cf);
          v22 = (const void *)*((_QWORD *)v16 + 25);
          *((_QWORD *)v16 + 25) = v47;
          v47 = 0;
          if (v22)
            CFRelease(v22);
          if (HIDWORD(v46) == (_DWORD)v46)
          {
            WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v45, (unint64_t)&v35);
          }
          else
          {
            WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)v45 + 72 * HIDWORD(v46), (uint64_t *)&v35);
            ++HIDWORD(v46);
          }
          v24 = cf;
          cf = 0;
          if (v24)
            CFRelease(v24);
          v25 = v42;
          v42 = 0;
          if (v25)
            CFRelease(v25);
          v26 = v41;
          v41 = 0;
          if (v26)
            CFRelease(v26);
          v27 = v40;
          v40 = 0;
          if (v27)
            CFRelease(v27);
          v28 = v38;
          v38 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v23);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v36)
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v36, v23);
          if (v35)
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v35, v23);
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v16, v23);
        }
        v29 = v44;
        v44 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v15);
          else
            *(_DWORD *)v29 -= 2;
        }
        v11 += 120;
        v12 -= 120;
      }
      while (v12);
    }
    WebKit::WebExtensionContext::addInjectedContent(v34, (uint64_t)&v45);
    LOBYTE(v35) = 0;
    LOBYTE(v36) = 0;
    v30 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v30 + 16))(v30, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v5 = 0;
    if ((_BYTE)v36)
    {
      v32 = v35;
      v35 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v31);
  }

}

void sub_19772FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef cf,WTF::StringImpl *a21,WTF::StringImpl *a22)
{
  uint64_t v22;
  WTF::StringImpl *v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if ((_BYTE)a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v24);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v24);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, a2);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void (**v10)(void *, WTF::StringImpl **);
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, WTF::StringImpl **, const WTF::StringImpl *);
  void *v27;
  uint64_t v28;

  v4 = a2;
  if (v4)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.unregisterContentScripts()"), 0, v4, v3, &v21);
    v5 = v21;
    v21 = 0;
    aBlock = v5;
    LOBYTE(v25) = 1;
    v6 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &aBlock);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v25)
    {
      v8 = aBlock;
      aBlock = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    v20 = v21;
    v21 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    aBlock = (WTF::StringImpl *)MEMORY[0x1E0C809B0];
    v25 = 3221225472;
    v26 = ___ZZN6WebKit19WebExtensionContext33scriptingUnregisterContentScriptsERKN3WTF6VectorINS1_6StringELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS1_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS3_EEEEEEN3__0clEP8NSString_block_invoke;
    v27 = &__block_descriptor_40_e136_v16__0_String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___8l;
    v28 = v9;
    v10 = (void (**)(void *, WTF::StringImpl **))_Block_copy(&aBlock);
    v11 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v11)
    {
      v12 = *(WTF::StringImpl ***)(a1 + 48);
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        if (*v12)
          *(_DWORD *)v14 += 2;
        v23 = v14;
        v10[2](v10, &v23);
        v16 = v23;
        v23 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    LOBYTE(v21) = 0;
    v22 = 0;
    v17 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v22)
    {
      v19 = v21;
      v21 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }

  }
}

void sub_19772FE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  void *v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v17);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZZN6WebKit19WebExtensionContext33scriptingUnregisterContentScriptsERKN3WTF6VectorINS1_6StringELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS1_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS3_EEEEEEN3__0clEP8NSString_block_invoke(uint64_t result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  const WTF::StringImpl *v22;
  void *v23;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(v3 + 376);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 >= 0x100)
      v8 = v7 >> 8;
    else
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    v9 = 0;
    v10 = (uint64_t *)(v3 + 376);
    while (1)
    {
      v11 = v8 & v6;
      result = *(_QWORD *)(v4 + 16 * v11);
      if (result != -1)
      {
        if (!result)
        {
          v12 = *v10;
          if (!*v10)
            return result;
          v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
          goto LABEL_13;
        }
        result = WTF::equal((WTF *)result, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      v8 = ++v9 + v11;
    }
    v13 = (WTF::StringImpl **)(v4 + 16 * v11);
    v12 = *v10;
    if (*v10)
    {
LABEL_13:
      v14 = v12 + 16 * *(unsigned int *)(v12 - 4);
      goto LABEL_15;
    }
    v14 = 0;
LABEL_15:
    if ((WTF::StringImpl **)v14 != v13)
    {
      v15 = v13[1];
      if (v15)
      {
        v13[1] = 0;
        v12 = *v10;
      }
      if (!v12 || (v12 += 16 * *(unsigned int *)(v12 - 4), (WTF::StringImpl **)v12 != v13))
      {
        if ((WTF::StringImpl **)v12 != v13)
        {
          WTF::HashTraits<WTF::String>::customDeleteBucket(v13, (WTF::StringImpl *)a2);
          result = (uint64_t)v13[1];
          v13[1] = 0;
          if (result)
            result = (uint64_t)WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref((WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)result, v16);
          ++*(_DWORD *)(*v10 - 16);
          v17 = *v10;
          if (*v10)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          v19 = *v10;
          if (*v10)
          {
            v20 = 6 * *(_DWORD *)(v19 - 12);
            v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
              result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v10, v21 >> 1, 0);
          }
        }
      }
      if (v15)
      {
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(v15, a2, a3);
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(v15, a2, v22);
        return (uint64_t)WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v15, v23);
      }
    }
  }
  return result;
}

void sub_1977300BC(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v2;

  if (v2)
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v2, a2);
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE buf[22];
  WTF::StringImpl *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef cf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v8 = v6;
    v9 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(_QWORD *)(v7 + 112))
        v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v23 = &stru_1E351F1B8;
      *(_DWORD *)buf = 138478083;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v8;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Unable to get registered scripts for extension %{private}@. Error: %{public}@", buf, 0x16u);

    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v5, 1, (uint64_t)&v31);
    v29 = 0;
    v30 = 0;
    WebKit::WebExtensionContext::createInjectedContentForScripts(v7, (uint64_t)&v31, 1, &v30, 0, &v29);
    v8 = v29;
    if (v8)
    {
      v10 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        if (*(_QWORD *)(v7 + 112))
          v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v24 = &stru_1E351F1B8;
        *(_DWORD *)buf = 138478083;
        *(_QWORD *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v8;
        _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "Failed to create injected content data for extension %{private}@. Error: %{public}@", buf, 0x16u);

      }
    }
    else
    {
      v27 = 0;
      v28 = 0;
      if (HIDWORD(v32))
      {
        v12 = v31;
        v13 = 120 * HIDWORD(v32);
        do
        {
          WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)buf, v30, (WTF::StringImpl **)(v12 + 48));
          v14 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript((uint64_t)v14, v7, v12, (const WebKit::WebExtension::InjectedContentData *)buf);
          v26 = v14;
          WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>((uint64_t)&v25, (uint64_t *)(v7 + 376), (WTF::StringImpl **)(v12 + 48), &v26);
          if (v26)
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v26, v15);
          if (HIDWORD(v28) == (_DWORD)v28)
          {
            WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v27, (unint64_t)buf);
          }
          else
          {
            WebKit::WebExtension::InjectedContentData::InjectedContentData(v27 + 72 * HIDWORD(v28), (uint64_t *)buf);
            ++HIDWORD(v28);
          }
          v17 = cf;
          cf = 0;
          if (v17)
            CFRelease(v17);
          v18 = v37;
          v37 = 0;
          if (v18)
            CFRelease(v18);
          v19 = v36;
          v36 = 0;
          if (v19)
            CFRelease(v19);
          v20 = v35;
          v35 = 0;
          if (v20)
            CFRelease(v20);
          v21 = v34;
          v34 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v16);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (*(_QWORD *)&buf[8])
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*(uint64_t **)&buf[8], v16);
          if (*(_QWORD *)buf)
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*(uint64_t **)buf, v16);
          v12 += 120;
          v13 -= 120;
        }
        while (v13);
      }
      WebKit::WebExtensionContext::addInjectedContent(v7, (uint64_t)&v27);
      WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v22);
    }
    if (v30)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v11);
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v11);
  }

}

void sub_197730454(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef cf)
{
  void *v27;
  WTF::StringImpl *v29;

  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  if (a16)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a16, v29);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, v29);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F77A8;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F77A8;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  NSString *v4;
  void *v5;
  CFTypeRef *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24[2];
  int v25;

  v2 = *(_QWORD *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 24)))
  {
    WebKit::WebExtensionTab::mainWebView(*(WebKit::WebExtensionTab **)(a1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = *(CFTypeRef **)(v2 + 56);
      if (v6)
        CFRetain(v6[1]);
      v23 = (WTF::StringImpl *)v6;
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, (uint64_t *)&v23, (uint64_t)v24);
      v7 = v23;
      v23 = 0;
      if (v7)
        CFRelease(*((CFTypeRef *)v7 + 1));
      v8 = WebKit::WebExtensionContext::toContentWorld(v2, *(unsigned __int8 *)(a1 + 160));
      CFRetain(*(CFTypeRef *)(v8 + 8));
      v9 = *(_DWORD **)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = &off_1E34F77D0;
      v11[1] = v10;
      v22 = v11;
      WebKit::WebExtensionDynamicScripts::executeScript(v24, v5, v8, v9, a1 + 32, v2, (uint64_t *)&v22);
      v12 = (uint64_t)v22;
      v22 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      CFRelease(*(CFTypeRef *)(v8 + 8));
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v13);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.executeScript()"), 0, CFSTR("could not execute script on this tab"), v4, &v23);
      v18 = v23;
      v23 = 0;
      v24[0] = (uint64_t)v18;
      v25 = 1;
      v19 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 16))(v19, v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (v25 != -1)
        ((void (*)(_QWORD **, uint64_t *))off_1E34F76D8[v25])(&v22, v24);
      v25 = -1;
      v21 = v23;
      v23 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.executeScript()"), 0, CFSTR("this extension does not have access to this tab"), v3, &v23);
    v14 = v23;
    v23 = 0;
    v24[0] = (uint64_t)v14;
    v25 = 1;
    v15 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v25 != -1)
      ((void (*)(_QWORD **, uint64_t *))off_1E34F76D8[v25])(&v22, v24);
    v25 = -1;
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void sub_197730858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, int a14)
{
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a14 != -1)
    ((void (*)(uint64_t *, char *))off_1E34F76D8[a14])(&a10, &a12);
  a14 = -1;
  v18 = a11;
  a11 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F77D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F77D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EE4callES13_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v5[0] = *a2;
  v2 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5[1] = v2;
  v6 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34F76D8[v6])(&v7, v5);
  return result;
}

void sub_197730AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F76D8[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F77F8;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F77F8;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  NSString *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char v26;

  v2 = *(_QWORD *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 24)))
  {
    WebKit::WebExtensionTab::mainWebView(*(WebKit::WebExtensionTab **)(a1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = *(unsigned __int8 *)(a1 + 104);
      v7 = *(_QWORD *)(v2 + 56);
      if (v7)
        CFRetain(*(CFTypeRef *)(v7 + 8));
      v24 = v7;
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, &v24, (uint64_t)&v25);
      v8 = v24;
      v24 = 0;
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 + 8));
      WebKit::WebExtensionDynamicScripts::injectStyleSheets((uint64_t *)&v25, v5, *(_QWORD *)(v2 + 136), *(unsigned __int8 *)(a1 + 161), v6 != 0, v2);
      LOBYTE(v22) = 0;
      v23 = 0;
      v9 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v23)
      {
        v11 = v22;
        v22 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v10);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.insertCSS()"), 0, CFSTR("could not inject stylesheet on this tab"), v4, &v22);
      v16 = v22;
      v22 = 0;
      v25 = v16;
      v26 = 1;
      v17 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (v26)
      {
        v19 = v25;
        v25 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
    }

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("scripting.insertCSS()"), 0, CFSTR("this extension does not have access to this tab"), v3, &v22);
    v12 = v22;
    v22 = 0;
    v25 = v12;
    v26 = 1;
    v13 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v26)
    {
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

void sub_197730DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v17);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_197730EB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v15);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  JUMPOUT(0x197730EB0);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::pair<WTF::String,WTF::URL>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::String,WTF::URL>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 6;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x2222223)
  {
    v5 = 120 * v3;
    v6 = WTF::fastMalloc((WTF *)(120 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a2;
      v9 = 120 * v7;
      do
      {
        v6 = WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(v6, v8) + 120;
        v8 += 120;
        v9 -= 120;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_197731094(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  _OWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  WebKit::WebExtension::InjectedContentData *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(80 * v5 + 16));
  if (v5)
  {
    v8 = (_OWORD *)(result + 64);
    v9 = (_DWORD *)MEMORY[0x1E0CBEF70];
    v10 = v5;
    do
    {
      *(v8 - 2) = 0uLL;
      *(v8 - 1) = 0uLL;
      *(v8 - 3) = 0uLL;
      *v9 += 2;
      *((_QWORD *)v8 - 2) = v9;
      *((_WORD *)v8 - 3) = 257;
      *v8 = 0uLL;
      v8[1] = 0uLL;
      v8 += 5;
      --v10;
    }
    while (v10);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v11 = 0;
    v12 = v3;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v2 + 80 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v14);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v22 = (WTF::StringImpl **)(v16 + 80 * (v19 & v17));
            v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          v23 = (WebKit::WebExtension::InjectedContentData *)(v16 + 80 * v21 + 8);
          WebKit::WebExtension::InjectedContentData::~InjectedContentData(v23, v7);
          v25 = *v22;
          *v22 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v24);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v13;
          *v13 = 0;
          *v22 = v26;
          WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)v23, (uint64_t *)(v2 + 80 * v11 + 8));
          WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)(v2 + 80 * v11 + 8), v27);
          v15 = *v13;
          *v13 = 0;
          if (!v15)
            goto LABEL_33;
          if (*(_DWORD *)v15 == 2)
          {
LABEL_32:
            WTF::StringImpl::destroy(v15, v7);
            goto LABEL_33;
          }
          *(_DWORD *)v15 -= 2;
        }
        else
        {
          WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)(v2 + 80 * v11 + 8), v7);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              goto LABEL_32;
            *(_DWORD *)v15 -= 2;
          }
        }
      }
LABEL_33:
      if (++v11 == v12)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

void sub_19773139C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isStorageMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v9, CFSTR("storage"));
  if ((WebKit::WebExtensionContext::permissionState((uint64_t)this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    v4 = 1;
  }
  else
  {
    MEMORY[0x19AEABCC8](&v8, CFSTR("unlimitedStorage"));
    v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

void sub_1977314C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageGet(WebKit::WebExtensionContext *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  CFTypeRef cf;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = (WTF::StringImpl *)cf;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v21, (uint64_t)".get()", 7, &v22);
  v10 = v21;
  v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebKit::WebExtensionContext::storageForType(a1, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  v14 = *a5;
  *a5 = 0;
  v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v15 = MEMORY[0x1E0C809A0];
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v15[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v15[4] = v13;
  v15[5] = v14;
  v16 = _Block_copy(v15);

  v17 = _Block_copy(v16);
  objc_msgSend(v11, "getValuesForKeys:completionHandler:", v12, v17);

  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);

  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197731704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v17;

  if (cf)
    CFRelease(cf);

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v17);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1977317A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1977317A0);
  JUMPOUT(0x197731788);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageGetBytesInUse(WebKit::WebExtensionContext *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  CFTypeRef cf;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = (WTF::StringImpl *)cf;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v21, (uint64_t)".getBytesInUse()", 17, &v22);
  v10 = v21;
  v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebKit::WebExtensionContext::storageForType(a1, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  v14 = *a5;
  *a5 = 0;
  v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v15 = MEMORY[0x1E0C809A0];
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke;
  v15[3] = &WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::descriptor;
  v15[4] = v13;
  v15[5] = v14;
  v16 = _Block_copy(v15);

  v17 = _Block_copy(v16);
  objc_msgSend(v11, "getStorageSizeForKeys:completionHandler:", v12, v17);

  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);

  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19773199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v17;

  if (cf)
    CFRelease(cf);

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v17);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197731A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x197731A38);
  JUMPOUT(0x197731A20);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageSet(CFTypeRef *a1, uint64_t a2, int a3, _QWORD *a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  void **v15;
  uint64_t v16;
  CFTypeRef *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  void *v25;
  uint64_t v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  CFTypeRef *v30;
  WTF::StringImpl *v31;
  CFTypeRef v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  CFTypeRef cf;
  uint64_t v41;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v36;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v34, (uint64_t)".set()", 7, &v35);
  v10 = v34;
  v34 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*a4)
    v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  WebKit::parseJSON(v11, 0, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = a1;
  CFRetain(a1[1]);
  v14 = v35;
  if (v35)
    *(_DWORD *)v35 += 2;
  v31 = v14;
  v15 = (void **)WTF::RetainPtr<NSDictionary>::RetainPtr(&v32, v12);
  v16 = *a5;
  *a5 = 0;
  v33 = v16;
  v17 = a1;
  v36 = (WTF::StringImpl *)a1;
  v39 = a3;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = v33;
  v33 = 0;
  cf = v18;
  v41 = v19;
  v20 = malloc_type_malloc(0x50uLL, 0x10E00405E7458E3uLL);
  *v20 = MEMORY[0x1E0C809A0];
  v20[1] = 50331650;
  v20[2] = WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v20[3] = &WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v20[4] = v30;
  v20[5] = v17;
  v37 = 0;
  v38 = 0;
  v20[6] = v31;
  *((_BYTE *)v20 + 56) = a3;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = v41;
  v20[8] = v21;
  v20[9] = v22;
  v23 = _Block_copy(v20);

  if (cf)
    CFRelease(cf);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v24);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (v37)
    CFRelease(*(CFTypeRef *)(v37 + 8));
  v25 = _Block_copy(v23);
  objc_msgSend(v13, "getStorageSizeForAllKeysIncludingKeyedData:withCompletionHandler:", v12, v25);

  v26 = v33;
  v33 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v32;
  v32 = 0;
  if (v27)
    CFRelease(v27);

  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197731D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (cf)
    CFRelease(cf);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v21);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v22);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197731E8C()
{
  void *v0;

  JUMPOUT(0x197731E60);
}

void sub_197731E98()
{
  JUMPOUT(0x197731E60);
}

void sub_197731EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15)
    JUMPOUT(0x197731E84);
  JUMPOUT(0x197731E6CLL);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageRemove(CFTypeRef *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  __int128 v31;
  WTF::StringImpl *v32;
  _BYTE v33[16];
  char v34;
  uint64_t v35;
  CFTypeRef cf;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  WTF::StringImpl *v40;
  _BYTE v41[16];
  char v42;
  uint64_t v43;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = (WTF::StringImpl *)v39;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v37, (uint64_t)".remove()", 10, &v38);
  v10 = v37;
  v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&v31 = a1;
  CFRetain(a1[1]);
  *((_QWORD *)&v31 + 1) = a1;
  v13 = v38;
  if (v38)
    *(_DWORD *)v38 += 2;
  v32 = v13;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, a4);
  v34 = a3;
  v14 = *a5;
  *a5 = 0;
  v35 = v14;
  v39 = v31;
  v40 = v32;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v41, (uint64_t)v33);
  v42 = v34;
  v15 = v35;
  v35 = 0;
  v43 = v15;
  v16 = malloc_type_malloc(0x58uLL, 0x10E0040A9ED48EEuLL);
  *v16 = MEMORY[0x1E0C809A0];
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v16[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  *((_OWORD *)v16 + 2) = v39;
  v17 = v40;
  *((_QWORD *)&v39 + 1) = 0;
  v40 = 0;
  v16[6] = v17;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v16 + 7), (uint64_t)v41);
  *((_BYTE *)v16 + 72) = v42;
  v18 = v43;
  v43 = 0;
  v16[10] = v18;
  v19 = _Block_copy(v16);

  v21 = v43;
  v43 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v20);
  v23 = v40;
  v40 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *((_QWORD *)&v39 + 1);
  *((_QWORD *)&v39 + 1) = 0;
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 + 8));
  v25 = _Block_copy(v19);
  objc_msgSend(v11, "getValuesForKeys:completionHandler:", v12, v25);

  v27 = v35;
  v35 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);

  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);

  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1977321E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v32);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  if (cf)
    CFRelease(cf);

  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v33);
    else
      *(_DWORD *)a18 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19773234C()
{
  JUMPOUT(0x19773230CLL);
}

void sub_197732354()
{
  JUMPOUT(0x19773231CLL);
}

void sub_19773235C()
{
  JUMPOUT(0x197732320);
}

void sub_197732364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17)
    JUMPOUT(0x197732344);
  JUMPOUT(0x19773232CLL);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageClear(CFTypeRef *a1, uint64_t a2, int a3, uint64_t *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = v18[1];
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v17, (uint64_t)".clear()", 9, v18);
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  CFRetain(a1[1]);
  v10 = v18[0];
  if (v18[0])
    *(_DWORD *)v18[0] += 2;
  v11 = *a4;
  *a4 = 0;
  v12 = malloc_type_malloc(0x48uLL, 0x10E00404B87720BuLL);
  *v12 = MEMORY[0x1E0C809A0];
  v12[1] = 50331650;
  v12[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v12[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v12[4] = a1;
  v12[5] = a1;
  v12[6] = v10;
  *((_BYTE *)v12 + 56) = a3;
  v12[8] = v11;
  v13 = _Block_copy(v12);

  v14 = _Block_copy(v13);
  objc_msgSend(v9, "getValuesForKeys:completionHandler:", MEMORY[0x1E0C9AA60], v14);

  result = v18[0];
  v18[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19773253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v15;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1977325CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1977325C4);
  JUMPOUT(0x1977325ACLL);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageSetAccessLevel(WebKit::WebExtensionContext *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  WebKit::WebExtensionContext::setSessionStorageAllowedInContentScripts(a1, a4 == 1);
  LOBYTE(v9) = 0;
  v10 = 0;
  v6 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &v9);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197732670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id *v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  char v20;
  unsigned __int8 *v21[3];
  WTF::StringImpl *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  char v28;
  uint64_t *v29;

  v7 = a2;
  v8 = a3;
  v28 = a4;
  if (objc_msgSend(v7, "count") || objc_msgSend(v8, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v8)
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke_2;
      v23[3] = &unk_1E34F7840;
      v24 = v7;
      v25 = v10;
      objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v23);
      v11 = &v24;

    }
    else
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke;
      v26[3] = &unk_1E34F7818;
      v27 = v9;
      objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v26);
      v11 = &v27;
    }

    if (objc_msgSend(v10, "count"))
    {
      WebKit::encodeJSONString(v10, 0, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](&v22, v12);

      v20 = 1;
      v21[0] = (unsigned __int8 *)&v22;
      v21[1] = (unsigned __int8 *)&v28;
      v21[2] = (unsigned __int8 *)&v20;
      WebKit::WebExtensionContext::processes((char *)a1, 31, 1, (uint64_t *)&v29);
      WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>((uint64_t *)a1, &v29, (uint64_t)v21);
      if (v29)
        WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v29, v13);
      v20 = 31;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)v21, &v20, 1);
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v14 = v22;
      if (v22)
        *(_DWORD *)v22 += 2;
      v15 = v28;
      v16 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v16 = &off_1E34F7990;
      *(_QWORD *)(v16 + 8) = a1;
      *(_QWORD *)(v16 + 16) = a1;
      *(_QWORD *)(v16 + 24) = v14;
      *(_BYTE *)(v16 + 32) = v15;
      v29 = (uint64_t *)v16;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, v21, (uint64_t *)&v29);
      v18 = v29;
      v29 = 0;
      if (v18)
        (*(void (**)(uint64_t *))(*v18 + 8))(v18);
      if (v21[0])
        WTF::fastFree((WTF *)(v21[0] - 16), v17);
      v19 = v22;
      v22 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }

  }
}

void sub_19773292C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v10 = CFSTR("oldValue");
  WebKit::parseJSON(v6, 1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v11[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v5);

  if (!v7)
}

void sub_197732B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    if ((objc_msgSend(v7, "isEqualToString:", v6) & 1) == 0)
    {
      v17[0] = CFSTR("oldValue");
      WebKit::parseJSON(v8, 1, 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (!v9)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v17[1] = CFSTR("newValue");
      v18[0] = v10;
      WebKit::parseJSON(v6, 1, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (!v11)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v18[1] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v13, v5);

      if (!v11)
      if (!v9)

LABEL_14:
    }
  }
  else
  {
    v15 = CFSTR("newValue");
    WebKit::parseJSON(v6, 1, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (!v8)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v16 = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v14, v5);

    if (!v8)
      goto LABEL_14;
  }

}

void sub_197732DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!v4)
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  WebKit *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    if (*(_QWORD *)(a1 + 32))
      v8 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v8, 0, v7, v6, &v14);
    v9 = v14;
    v14 = 0;
    v15 = v9;
    v16 = 1;
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v15);
  }
  else
  {
    WebKit::encodeJSONString(v5, 0, 0);
    v8 = (WebKit *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v14, v8);
    v11 = v14;
    v14 = 0;
    v15 = v11;
    v16 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v15);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v16 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F7880[v16])(&v17, &v15);
  v16 = -1;
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }

}

void sub_197733000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F7880[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v22);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2, void *a3)
{
  NSString *v5;
  NSString *v6;
  WebKit *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;

  v6 = a3;
  if (v6)
  {
    if (*(_QWORD *)(a1 + 32))
      v7 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v7 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v7, 0, v6, v5, &v13);
    v8 = v13;
    v13 = 0;
    v14 = v8;
    v15 = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v15 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F78B0[v15])(&v16, &v14);
    v15 = -1;
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }

  }
  else
  {
    v14 = a2;
    v15 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v15 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F78B0[v15])(&v13, &v14);
  }

}

void sub_197733250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F78B0[a12])(&a9, &a10);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)a1[8];
  a1[8] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, void *a5)
{
  id v9;
  NSString *v10;
  NSString *v11;
  WebKit *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  CFTypeRef *v15;
  NSString *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF::StringImpl *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  CFTypeRef *v30;
  WTF::StringImpl *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  CFTypeRef v44;
  CFTypeRef v45;
  WTF::StringImpl *v46;
  CFTypeRef *v47;
  WebKit *v48;
  WTF::StringImpl *v49;
  CFTypeRef *v50;
  WTF::StringImpl *v51;
  CFTypeRef v52;
  char v53;
  CFTypeRef v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  CFTypeRef v59;
  char v60;
  CFTypeRef cf;
  uint64_t v62;

  v9 = a4;
  v11 = a5;
  if (v11)
  {
    if (*(_QWORD *)(a1 + 48))
      v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v12, 0, v11, v10, &v49);
    v13 = v49;
    v49 = 0;
    v56 = v13;
    LOBYTE(v57) = 1;
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v56);
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if ((_BYTE)v57)
    {
      v21 = v56;
      v56 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = v49;
    v49 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    goto LABEL_50;
  }
  v15 = *(CFTypeRef **)(a1 + 32);
  if (WebKit::WebExtensionContext::quoataForStorageType((uint64_t)v15, *(unsigned __int8 *)(a1 + 56)) < a2)
  {
    if (*(_QWORD *)(a1 + 48))
      v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v12, 0, CFSTR("exceeded storage quota"), v16, &v49);
    v17 = v49;
    v49 = 0;
    v56 = v17;
    LOBYTE(v57) = 1;
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v56);
    goto LABEL_14;
  }
  v18 = *(unsigned __int8 *)(a1 + 56);
  if (a3 >= 0x201 && v18 == 4)
  {
    if (*(_QWORD *)(a1 + 48))
      v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v12, 0, CFSTR("exceeded maximum number of items"), v16, &v49);
    v19 = v49;
    v49 = 0;
    v56 = v19;
    LOBYTE(v57) = 1;
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v56);
    goto LABEL_14;
  }
  WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v15, v18);
  v48 = (WebKit *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 64));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = (WTF::StringImpl *)v15;
  CFRetain(v15[1]);
  v50 = v15;
  v24 = *(WTF::StringImpl **)(a1 + 48);
  if (v24)
    *(_DWORD *)v24 += 2;
  v51 = v24;
  WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 64));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&v52, v25);

  v53 = *(_BYTE *)(a1 + 56);
  v26 = v9;
  v27 = v26;
  v54 = v26;
  if (v26)
    CFRetain(v26);

  v28 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v29 = v49;
  v30 = v50;
  v55 = v28;
  v56 = v49;
  v31 = v51;
  v50 = 0;
  v51 = 0;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v52);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = v32;
  v60 = v53;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v54);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = v55;
  v55 = 0;
  cf = v33;
  v62 = v34;
  v35 = malloc_type_malloc(0x58uLL, 0x10E0040E3D89FCEuLL);
  *v35 = MEMORY[0x1E0C809A0];
  v35[1] = 50331650;
  v35[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v35[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::descriptor;
  v35[4] = v29;
  v35[5] = v30;
  v57 = 0;
  v58 = 0;
  v35[6] = v31;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v59);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v35[7] = v36;
  *((_BYTE *)v35 + 64) = v60;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v38 = v62;
  v35[9] = v37;
  v35[10] = v38;
  v39 = _Block_copy(v35);

  if (cf)
    CFRelease(cf);
  v12 = v48;
  if (v59)
    CFRelease(v59);
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v40);
    else
      *(_DWORD *)v58 -= 2;
  }
  if (v57)
    CFRelease(*(CFTypeRef *)(v57 + 8));
  v41 = _Block_copy(v39);
  -[WebKit setKeyedData:completionHandler:](v48, "setKeyedData:completionHandler:", v23, v41);

  v43 = v55;
  v55 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = v54;
  v54 = 0;
  if (v44)
    CFRelease(v44);
  v45 = v52;
  v52 = 0;
  if (v45)
    CFRelease(v45);
  v46 = v51;
  v51 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v42);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = v50;
  v50 = 0;
  if (v47)
    CFRelease(v47[1]);

LABEL_50:
}

void sub_197733860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, CFTypeRef cf, uint64_t a15, CFTypeRef a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  WTF::StringImpl *v24;

  if (cf)
    CFRelease(cf);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v24);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));

  _Unwind_Resume(a1);
}

id WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(void **a1)
{
  void *v1;

  v1 = *a1;
  *a1 = 0;
  return v1;
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)a1[9];
  a1[9] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  a1[7] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = a1[5];
  a1[5] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  NSDictionary *v5;
  NSString *v6;
  NSString *v7;
  uint64_t v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSArray *v22;
  uint64_t v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;

  v5 = a2;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 48))
      v9 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v9 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v9, 0, v7, v6, &v25);
    v10 = v25;
    v25 = 0;
    v26 = v10;
    v27 = 1;
    v11 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v27)
    {
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }

  }
  else
  {
    LOBYTE(v26) = 0;
    v27 = 0;
    v14 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v27)
    {
      v16 = v26;
      v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  if (-[NSDictionary count](v5, "count"))
  {
    WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[NSDictionary count](v5, "count");
    objc_msgSend(v18, "allKeys");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");

    if (v19 != v21)
    {
      WebKit::dictionaryWithKeys((WebKit *)v18, v5, v22);
      v23 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v23;
    }
    v24 = *(void **)(a1 + 72);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v24);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v8, v24, v18, *(_BYTE *)(a1 + 64));

  }
}

void sub_197733CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v16);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  WebKit *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  CFTypeRef *v13;
  void *v14;
  _DWORD *v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WebKit *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  CFTypeRef v35;
  uint64_t v36;
  CFTypeRef v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  CFTypeRef cf;
  uint64_t v43;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    if (*(_QWORD *)(a1 + 48))
      v8 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v8, 0, v7, v6, &v31);
    v9 = v31;
    v31 = 0;
    v38 = v9;
    LOBYTE(v39) = 1;
    v10 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if ((_BYTE)v39)
    {
      v12 = v38;
      v38 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v11);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v13 = *(CFTypeRef **)(a1 + 32);
    WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v13, *(unsigned __int8 *)(a1 + 72));
    v30 = (WebKit *)objc_claimAutoreleasedReturnValue();
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 56, (uint64_t *)&v37);
    WTF::RetainPtr<NSMutableArray>::get((id *)&v37);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = (WTF::StringImpl *)v13;
    CFRetain(v13[1]);
    v15 = *(_DWORD **)(a1 + 48);
    if (v15)
      *v15 += 2;
    v16 = *(_BYTE *)(a1 + 72);
    v34 = v16;
    v17 = v5;
    v18 = v17;
    v35 = v17;
    if (v17)
      CFRetain(v17);

    v19 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v36 = v19;
    v38 = (WTF::StringImpl *)v13;
    v32 = 0;
    v33 = 0;
    v41 = v16;
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v35);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    cf = v20;
    v43 = v36;
    v21 = malloc_type_malloc(0x50uLL, 0x10E00405E7458E3uLL);
    *v21 = MEMORY[0x1E0C809A0];
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v21[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v21[4] = v13;
    v21[5] = v13;
    v39 = 0;
    v40 = 0;
    v21[6] = v15;
    *((_BYTE *)v21 + 56) = v16;
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = v43;
    v21[8] = v22;
    v21[9] = v23;
    v24 = _Block_copy(v21);

    v8 = v30;
    if (cf)
      CFRelease(cf);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v25);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (v39)
      CFRelease(*(CFTypeRef *)(v39 + 8));
    v27 = _Block_copy(v24);
    -[WebKit deleteValuesForKeys:completionHandler:](v30, "deleteValuesForKeys:completionHandler:", v14, v27);

    if (v35)
      CFRelease(v35);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v28);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 + 8));

    v29 = v37;
    v37 = 0;
    if (v29)
      CFRelease(v29);
  }

}

void sub_197734190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, CFTypeRef a14, uint64_t a15, CFTypeRef cf, WTF::StringImpl *a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF::StringImpl *v25;

  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v25);
    else
      *(_DWORD *)v22 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v21 + 8));

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)a1[8];
  a1[8] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  WebKit *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;

  v4 = a2;
  if (v4)
  {
    if (*(_QWORD *)(a1 + 48))
      v5 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v5, 0, v4, v3, &v16);
    v6 = v16;
    v16 = 0;
    v17 = v6;
    v18 = 1;
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v18)
    {
      v9 = v17;
      v17 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v15 = v16;
    v16 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(a1 + 64);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v11);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v10, v11, 0, *(_BYTE *)(a1 + 56));

    LOBYTE(v17) = 0;
    v18 = 0;
    v12 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v18)
    {
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197734540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  WebKit *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  CFTypeRef *v13;
  _DWORD *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  CFTypeRef cf;
  char v36;
  uint64_t v37;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    if (*(_QWORD *)(a1 + 48))
      v8 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v8, 0, v7, v6, &v26);
    v9 = v26;
    v26 = 0;
    v32 = v9;
    LOBYTE(v33) = 1;
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if ((_BYTE)v33)
    {
      v12 = v32;
      v32 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v11);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    v13 = *(CFTypeRef **)(a1 + 32);
    WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v13, *(unsigned __int8 *)(a1 + 56));
    v8 = (WebKit *)objc_claimAutoreleasedReturnValue();
    v26 = (WTF::StringImpl *)v13;
    CFRetain(v13[1]);
    v14 = *(_DWORD **)(a1 + 48);
    if (v14)
      *v14 += 2;
    v15 = v5;
    v16 = v15;
    v29 = v15;
    if (v15)
      CFRetain(v15);

    v30 = *(_BYTE *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    v31 = v17;
    v32 = (WTF::StringImpl *)v13;
    v27 = 0;
    v28 = 0;
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v29);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    cf = v18;
    v36 = v30;
    v37 = v31;
    v19 = malloc_type_malloc(0x50uLL, 0x10E0040FDEEE08FuLL);
    *v19 = MEMORY[0x1E0C809A0];
    v19[1] = 50331650;
    v19[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v19[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v19[4] = v13;
    v19[5] = v13;
    v33 = 0;
    v34 = 0;
    v19[6] = v14;
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v19[7] = v20;
    *((_BYTE *)v19 + 64) = v36;
    v19[9] = v37;
    v21 = _Block_copy(v19);

    if (cf)
      CFRelease(cf);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v22);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v33)
      CFRelease(*(CFTypeRef *)(v33 + 8));
    v24 = _Block_copy(v21);
    -[WebKit deleteDatabaseWithCompletionHandler:](v8, "deleteDatabaseWithCompletionHandler:", v24, v26);

    if (v29)
      CFRelease(v29);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v25);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v27)
      CFRelease(*(CFTypeRef *)(v27 + 8));
  }

}

void sub_197734984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v23;

  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v23);
    else
      *(_DWORD *)v20 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v19 + 8));

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)a1[7];
  a1[7] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  WebKit *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;

  v4 = a2;
  if (v4)
  {
    if (*(_QWORD *)(a1 + 48))
      v5 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = (WebKit *)&stru_1E351F1B8;
    WebKit::toWebExtensionError<>(v5, 0, v4, v3, &v16);
    v6 = v16;
    v16 = 0;
    v17 = v6;
    v18 = 1;
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v18)
    {
      v9 = v17;
      v17 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v15 = v16;
    v16 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(a1 + 56);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v11);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v10, v11, 0, *(_BYTE *)(a1 + 64));

    LOBYTE(v17) = 0;
    v18 = 0;
    v12 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v18)
    {
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197734D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>(uint64_t *result, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  size_t v43;
  uint64_t v44;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  IPC::Encoder *v49;

  v46 = result;
  v3 = result[8];
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
    v5 = result;
    v7 = v6;
    v8 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((uint64_t *)v8 != result)
    {
      v44 = v8;
      do
      {
        v9 = *v5;
        v11 = *(uint64_t **)a3;
        v10 = *(char **)(a3 + 8);
        v12 = *(char **)(a3 + 16);
        v13 = v46[4];
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1580;
        *(_QWORD *)(v14 + 8) = v13;
        v15 = (void *)(v14 + 16);
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v49 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, v11);
        v16 = *v10;
        v17 = *(_QWORD *)(v14 + 544);
        v18 = v17 + 1;
        v19 = *(_QWORD *)(v14 + 552);
        if (v19 < v17 + 1)
        {
          v35 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v36 = v35;
            v35 *= 2;
          }
          while (v36 < v18);
          v43 = v36;
          v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
          if (v37 == (char *)-1)
          {
LABEL_38:
            __break(0xC471u);
            JUMPOUT(0x1977350E4);
          }
          v20 = v37;
          memcpy(v37, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
          v38 = *(void **)(v14 + 528);
          if (v38 != v15)
            munmap(v38, *(_QWORD *)(v14 + 552));
          *(_QWORD *)(v14 + 528) = v20;
          *(_QWORD *)(v14 + 552) = v43;
          v21 = *(_QWORD *)(v14 + 544);
        }
        else
        {
          v20 = *(char **)(v14 + 528);
          v21 = *(_QWORD *)(v14 + 544);
        }
        bzero(&v20[v21], v17 - v21);
        *(_QWORD *)(v14 + 544) = v18;
        v22 = (_BYTE *)(*(_QWORD *)(v14 + 528) + v17);
        *(_QWORD *)(v14 + 536) = v22 + 1;
        *v22 = v16;
        v23 = *v12;
        v24 = *(_QWORD *)(v14 + 544);
        v25 = v24 + 1;
        v26 = *(_QWORD *)(v14 + 552);
        if (v26 < v24 + 1)
        {
          v39 = (2 * v26 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v40 = v39;
            v39 *= 2;
          }
          while (v40 < v25);
          v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
          if (v41 == (char *)-1)
            goto LABEL_38;
          v27 = v41;
          memcpy(v41, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
          v42 = *(void **)(v14 + 528);
          if (v42 != v15)
            munmap(v42, *(_QWORD *)(v14 + 552));
          *(_QWORD *)(v14 + 528) = v27;
          *(_QWORD *)(v14 + 552) = v40;
          v28 = *(_QWORD *)(v14 + 544);
        }
        else
        {
          v27 = *(char **)(v14 + 528);
          v28 = *(_QWORD *)(v14 + 544);
        }
        bzero(&v27[v28], v24 - v28);
        *(_QWORD *)(v14 + 544) = v25;
        v29 = (_BYTE *)(*(_QWORD *)(v14 + 528) + v24);
        *(_QWORD *)(v14 + 536) = v29 + 1;
        *v29 = v23;
        LOBYTE(v47) = 0;
        v48 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v49, 0, (uint64_t)&v47, 1);
        if (v48)
        {
          v31 = v47;
          v47 = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        result = (uint64_t *)v49;
        v49 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v30);
          result = (uint64_t *)WTF::fastFree(v32, v33);
        }
        if (++v5 == v7)
        {
          v5 = v7;
          v34 = (uint64_t *)v44;
        }
        else
        {
          v34 = (uint64_t *)v44;
          while ((unint64_t)(*v5 + 1) <= 1)
          {
            if (++v5 == v7)
            {
              v5 = v7;
              break;
            }
          }
        }
      }
      while (v5 != v34);
    }
  }
  return result;
}

void sub_1977350F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  WTF *v19;
  void *v20;

  if (a17 && a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a18)
  {
    IPC::Encoder::~Encoder(a18, a2);
    WTF::fastFree(v19, v20);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34F7990;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7990;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::call(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t *result;
  char v4;
  _QWORD v5[3];
  uint64_t *v6;

  v1 = *(char **)(a1 + 8);
  v4 = 0;
  v5[0] = a1 + 24;
  v5[1] = a1 + 32;
  v5[2] = &v4;
  WebKit::WebExtensionContext::processes(v1, 31, 0, (uint64_t *)&v6);
  WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>((uint64_t *)v1, &v6, (uint64_t)v5);
  result = v6;
  if (v6)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v6, v2);
  return result;
}

void sub_197735264(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v4 = *(uint64_t **)(v2 - 24);
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v4, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::tabsCreate(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void *v13;
  NSString *v14;
  id v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  NSString *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  id WeakRetained;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  NSString *v43;
  id *v44;
  id v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WebKit::WebExtensionTab *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  id *v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  _BYTE v68[8];
  _QWORD v69[23];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (id *)(v11 - 16);
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  WebKit::WebExtensionController::delegate(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15 = -[_WKWebExtensionTabCreationOptions _init]([_WKWebExtensionTabCreationOptions alloc], "_init");
    v16 = v15;
    if (*(_BYTE *)(a4 + 153))
      v17 = *(_BYTE *)(a4 + 152) == 0;
    else
      v17 = 0;
    v18 = !v17;
    objc_msgSend(v15, "_setShouldActivate:", v18);
    if ((objc_msgSend(v16, "shouldActivate") & 1) != 0)
    {
      v19 = 1;
    }
    else
    {
      if (*(_BYTE *)(a4 + 155))
        v24 = *(_BYTE *)(a4 + 154) == 0;
      else
        v24 = 1;
      v19 = !v24;
    }
    objc_msgSend(v16, "_setShouldSelect:", v19);
    if (*(_BYTE *)(a4 + 157))
      v25 = *(_BYTE *)(a4 + 156) == 0;
    else
      v25 = 1;
    v26 = !v25;
    objc_msgSend(v16, "_setShouldPin:", v26);
    if (*(_BYTE *)(a4 + 161))
      v27 = *(_BYTE *)(a4 + 160) == 0;
    else
      v27 = 1;
    v28 = !v27;
    objc_msgSend(v16, "_setShouldMute:", v28);
    if (*(_BYTE *)(a4 + 169))
      v29 = *(_BYTE *)(a4 + 168) == 0;
    else
      v29 = 1;
    v30 = !v29;
    objc_msgSend(v16, "_setShouldShowReaderMode:", v30);
    if (*(_BYTE *)(a4 + 88))
      v31 = *(_QWORD *)(a4 + 80);
    else
      v31 = -3;
    WebKit::WebExtensionContext::getWindow(a1, v31, a2, a3, 0, &v66);
    if (*(_BYTE *)(a4 + 88))
    {
      if (!v66)
      {
        WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.create()"), 0, CFSTR("window not found"), v32, &v64);
        v33 = v64;
        v64 = 0;
        v69[0] = v33;
        v70 = 1;
        v34 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v34 + 16))(v34, v68);
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (v70 != -1)
          ((void (*)(id **, _QWORD *))off_1E34F79A8[v70])(&v63, v69);
        v70 = -1;
        v36 = v64;
        v64 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v35);
          else
            *(_DWORD *)v36 -= 2;
        }
LABEL_89:
        v61 = v66;
        v66 = 0;
        if (v61)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v61);

        goto LABEL_92;
      }
    }
    else if (!v66)
    {
      v38 = 0;
      WeakRetained = 0;
      goto LABEL_56;
    }
    WeakRetained = objc_loadWeakRetained((id *)(v66 + 32));
    v38 = 1;
LABEL_56:
    objc_msgSend(v16, "_setDesiredWindow:", WeakRetained);
    if (v38)

    v39 = v66;
    if (v66)
    {
      WebKit::WebExtensionWindow::tabs(v66, 0, (uint64_t *)&v64);
      v40 = v65;
    }
    else
    {
      v40 = 0;
    }
    if (*(_BYTE *)(a4 + 104))
      v41 = *(_QWORD *)(a4 + 96);
    else
      v41 = v40;
    objc_msgSend(v16, "_setDesiredIndex:", v41);
    if (v39)
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v42);
    if (!*(_BYTE *)(a4 + 144))
      goto LABEL_95;
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(_QWORD *)(a4 + 136), 0, (WebKit::WebExtensionTab **)&v63);
    v44 = v63;
    if (v63)
    {
      v45 = objc_loadWeakRetained(v63 + 4);
      objc_msgSend(v16, "_setDesiredParentTab:", v45);

    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.create()"), 0, CFSTR("parent tab not found"), v43, &v62);
      v46 = v62;
      v62 = 0;
      v69[0] = v46;
      v70 = 1;
      v47 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 16))(v47, v68);
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      if (v70 != -1)
        ((void (*)(char *, _QWORD *))off_1E34F79A8[v70])(&v67, v69);
      v70 = -1;
      v49 = v62;
      v62 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v48);
        else
          *(_DWORD *)v49 -= 2;
      }
    }
    v50 = (WebKit::WebExtensionTab *)v63;
    v63 = 0;
    if (v50)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v50);
    if (v44)
    {
LABEL_95:
      if (*(_BYTE *)(a4 + 56))
      {
        WTF::URL::operator NSURL *();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "_setDesiredURL:", v51);

      }
      v52 = *(_QWORD *)(a1 + 64);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 8);
        if (v53)
          v54 = (id *)(v53 - 16);
        else
          v54 = 0;
      }
      else
      {
        v54 = 0;
      }
      WebKit::WebExtension::wrapper(v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::wrapper((id *)a1);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v57 = *a5;
      *a5 = 0;
      v58 = malloc_type_malloc(0x38uLL, 0x10E0040CBD43D72uLL);
      *v58 = MEMORY[0x1E0C809A0];
      v58[1] = 50331650;
      v58[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke;
      v58[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0)::descriptor;
      v58[4] = a1;
      v58[5] = a1;
      v58[6] = v57;
      v59 = _Block_copy(v58);

      v60 = _Block_copy(v59);
      objc_msgSend(v13, "webExtensionController:openNewTabWithOptions:forExtensionContext:completionHandler:", v55, v16, v56, v60);

    }
    goto LABEL_89;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.create()"), 0, CFSTR("it is not implemented"), v14, &v64);
  v20 = v64;
  v64 = 0;
  v69[0] = v20;
  v70 = 1;
  v21 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v68);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v70 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E34F79A8[v70])(&v66, v69);
  v70 = -1;
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
LABEL_92:

}

void sub_197735838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v47;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (a42 != -1)
    ((void (*)(char *, uint64_t))off_1E34F79A8[a42])(&a17, v44);
  a42 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v47);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  if (a13)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a13);

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsUpdate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int128 *a5, uint64_t *a6)
{
  NSString *v9;
  WebKit::WebExtensionTab *v10;
  int v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  int v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  NSString *v29;
  int v30;
  _BOOL4 isSelected;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  WebKit::WebExtensionTab *v40;
  WTF::StringImpl *v41;
  char v42;
  _BYTE v43[7];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[7];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, &v40);
  v10 = v40;
  if (v40)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    ++*(_DWORD *)v10;
    v38 = *a5;
    v11 = *((unsigned __int8 *)a5 + 56);
    if (*((_BYTE *)a5 + 56))
    {
      v12 = (WTF::StringImpl *)*((_QWORD *)a5 + 2);
      if (v12)
        *(_DWORD *)v12 += 2;
      v13 = *(__int128 *)((char *)a5 + 40);
      *(_OWORD *)v36 = *(__int128 *)((char *)a5 + 24);
      v37 = v13;
    }
    else
    {
      v12 = 0;
    }
    v18 = *((unsigned __int8 *)a5 + 72);
    if (*((_BYTE *)a5 + 72))
    {
      v19 = (WTF::StringImpl *)*((_QWORD *)a5 + 8);
      if (v19)
        *(_DWORD *)v19 += 2;
    }
    else
    {
      v19 = 0;
    }
    v20 = a5[8];
    v46 = a5[7];
    v47 = v20;
    v48[0] = a5[9];
    *(_OWORD *)((char *)v48 + 10) = *(__int128 *)((char *)a5 + 154);
    v21 = a5[6];
    v44 = a5[5];
    v45 = v21;
    v22 = *a6;
    *a6 = 0;
    v23 = WTF::fastMalloc((WTF *)0xE0);
    *(_QWORD *)v23 = off_1E34F7A28;
    *(_QWORD *)(v23 + 8) = v10;
    *(_OWORD *)(v23 + 16) = v38;
    *(_BYTE *)(v23 + 32) = 0;
    *(_BYTE *)(v23 + 72) = 0;
    if (v11)
    {
      if (v12)
        *(_DWORD *)v12 += 2;
      *(_QWORD *)(v23 + 32) = v12;
      v24 = v37;
      *(_OWORD *)(v23 + 40) = *(_OWORD *)v36;
      *(_OWORD *)(v23 + 56) = v24;
      *(_BYTE *)(v23 + 72) = 1;
    }
    *(_BYTE *)(v23 + 80) = 0;
    *(_BYTE *)(v23 + 88) = 0;
    if (v18)
    {
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v23 + 80) = v19;
      *(_BYTE *)(v23 + 88) = 1;
    }
    v25 = v45;
    *(_OWORD *)(v23 + 96) = v44;
    *(_OWORD *)(v23 + 112) = v25;
    *(_OWORD *)(v23 + 170) = *(_OWORD *)((char *)v48 + 10);
    v26 = v48[0];
    v27 = v46;
    *(_OWORD *)(v23 + 144) = v47;
    *(_OWORD *)(v23 + 160) = v26;
    *(_OWORD *)(v23 + 128) = v27;
    *(_QWORD *)(v23 + 200) = a1;
    *(_QWORD *)(v23 + 208) = a1;
    *(_QWORD *)(v23 + 216) = v22;
    v39 = v23;
    if (*((_BYTE *)a5 + 153) && *((_BYTE *)a5 + 152) && !WebKit::WebExtensionTab::isActive(v10))
    {
LABEL_33:
      WebKit::WebExtensionTab::activate((uint64_t)v10, &v39, v28, v29);
      goto LABEL_43;
    }
    if (*((_BYTE *)a5 + 155))
    {
      v30 = *((unsigned __int8 *)a5 + 154);
      isSelected = WebKit::WebExtensionTab::isSelected(v10);
      if (v30)
      {
        if (!isSelected)
        {
          if (*((_BYTE *)a5 + 153) && !*((_BYTE *)a5 + 152))
          {
            WebKit::WebExtensionTab::select((uint64_t)v10, &v39, v28, v29);
            goto LABEL_43;
          }
          goto LABEL_33;
        }
      }
      else if (isSelected)
      {
        WebKit::WebExtensionTab::deselect((uint64_t)v10, &v39, v28, v29);
        goto LABEL_43;
      }
    }
    LOBYTE(v41) = 0;
    v42 = 0;
    v33 = v39;
    v39 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v33 + 16))(v33, &v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (v42)
    {
      v34 = v41;
      v41 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v32);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
LABEL_43:
    v35 = v39;
    v39 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (v18 && v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v32);
        if (v11)
        {
LABEL_50:
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v32);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v11)
      goto LABEL_50;
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, CFSTR("tab not found"), v9, v36);
  v14 = v36[0];
  v36[0] = 0;
  *(_QWORD *)((char *)&v44 + 1) = v14;
  v49 = 1;
  v15 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v43);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v49 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F79A8[v49])(&v41, (char *)&v44 + 1);
  v49 = -1;
  result = v36[0];
  v36[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197735E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  int v48;
  WTF::StringImpl *v50;

  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v50);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (v48 && v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v50);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (v47 && v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v50);
    else
      *(_DWORD *)v44 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v43);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsDuplicate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSString *v6;
  WebKit::WebExtensionTab *v7;
  uint64_t v8;
  _QWORD *v9;
  NSString *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit::WebExtensionTab *result;
  WTF::StringImpl *v17;
  WebKit::WebExtensionTab *v18;
  char v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v18);
  v7 = v18;
  if (v18)
  {
    v8 = *a4;
    *a4 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34F7AF0;
    v9[1] = v8;
    v20 = v9;
    WebKit::WebExtensionTab::duplicate((uint64_t)v7, a3, (uint64_t *)&v20, v10);
    v11 = (uint64_t)v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.duplicate()"), 0, CFSTR("tab not found"), v6, &v17);
    v12 = v17;
    v17 = 0;
    v21 = v12;
    v22 = 1;
    v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 16))(v13, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v22 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F79A8[v22])(&v19, &v21);
    v22 = -1;
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  result = v18;
  v18 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197736170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (a40 != -1)
    ((void (*)(char *, uint64_t))off_1E34F79A8[a40])(&a15, v40);
  a40 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v43);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsGet(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  NSString *v5;
  URL *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  URL *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebKit::WebExtensionTab *result;
  _QWORD *v17;
  URL *v18;
  WTF::StringImpl *v19[2];
  WebKit::WebExtensionTab *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v20);
  if (v20)
  {
    WebKit::WebExtensionTab::url(v20, (uint64_t)&v21);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v19, (uint64_t)&v21, 1uLL);
    v6 = (URL *)v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v18 = v6;
    v7 = *a3;
    *a3 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34F7B18;
    v8[1] = v6;
    v8[2] = v7;
    v17 = v8;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, (uint64_t *)v19, &v18, (uint64_t *)&v17, 1, 1);
    v10 = (uint64_t)v17;
    v17 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v18;
    v18 = 0;
    if (v11)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v9);
    v13 = v21;
    v21 = 0;
    if (!v13)
      goto LABEL_16;
LABEL_13:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
    goto LABEL_16;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.get()"), 0, CFSTR("tab not found"), v5, v19);
  v14 = v19[0];
  v19[0] = 0;
  v22 = v14;
  v23 = 1;
  v15 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v23 != -1)
    ((void (*)(_QWORD **, WTF::StringImpl **))off_1E34F79A8[v23])(&v17, &v22);
  v23 = -1;
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
    goto LABEL_13;
LABEL_16:
  result = v20;
  v20 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197736418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;

  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (a39 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E34F79A8[a39])(&a10, v39);
  a39 = -1;
  v43 = a12;
  a12 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = a14;
  a14 = 0;
  if (v44)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v44);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsGetCurrent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  URL *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  URL *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit::WebExtensionTab *result;
  _QWORD *v16;
  URL *v17;
  uint64_t v18[22];
  char v19;
  WebKit::WebExtensionTab *v20;
  WTF::StringImpl *v21;
  _BYTE v22[184];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getCurrentTab(a1, a2, 1, 0, &v20);
  if (v20)
  {
    WebKit::WebExtensionTab::url(v20, (uint64_t)&v21);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18, (uint64_t)&v21, 1uLL);
    v5 = (URL *)v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v17 = v5;
    v6 = *a3;
    *a3 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34F7B40;
    v7[1] = v5;
    v7[2] = v6;
    v16 = v7;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v18, &v17, (uint64_t *)&v16, 1, 1);
    v9 = (uint64_t)v16;
    v16 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v17;
    v17 = 0;
    if (v10)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v8);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    LOBYTE(v18[0]) = 0;
    v19 = 0;
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v22, (uint64_t)v18);
    v23 = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v23 != -1)
      ((void (*)(_QWORD **, _BYTE *))off_1E34F79A8[v23])(&v16, v22);
    v23 = -1;
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v14);
  }
  result = v20;
  v20 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_1977366F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v62;
  uint64_t v63;

  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (a59 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E34F79A8[a59])(&a9, v59);
  a59 = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, v62);
  v63 = a34;
  a34 = 0;
  if (v63)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v63);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::tabsQuery(unsigned int *a1, uint64_t a2, uint64_t a3, WebKit::WebExtensionWindow **a4)
{
  void *v8;
  WebKit::WebExtensionWindow **v9;
  WebKit::WebExtensionWindow **v10;
  WebKit::WebExtensionWindow *v11;
  WTF::StringImpl *v12;
  WebKit::WebExtensionTab **v13;
  uint64_t v14;
  WebKit::WebExtensionTab *v15;
  uint64_t v16;
  WebKit::WebExtensionTab **v17;
  WTF::StringImpl *v18;
  WebKit::WebExtensionTab *v19;
  WTF::StringImpl *v20;
  WebKit::WebExtensionTab *v21;
  WebKit::WebExtensionWindow *v22;
  WebKit::WebExtensionWindow *v23;
  WebKit::WebExtensionWindow **v24;
  WebKit::WebExtensionWindow *v25;
  WebKit::WebExtensionWindow *v26;
  void *v27;
  uint64_t v28;
  WebKit::WebExtensionWindow *v29;
  void *v30;
  URL *v31;
  void *v32;
  URL *v34;
  WTF::StringImpl *v35;
  WebKit::WebExtensionWindow *v36;
  WebKit::WebExtensionWindow *v37;
  WebKit::WebExtensionTab *v38;
  WebKit::WebExtensionTab **v39;
  unsigned int v40;
  WebKit::WebExtensionWindow **v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WebKit::WebExtensionWindow *v46;

  v45 = 0;
  v46 = 0;
  v43 = 0;
  v44 = 0;
  WebKit::WebExtensionContext::openWindows(a1, 0, (uint64_t)&v41);
  if (v42)
  {
    v9 = v41;
    v10 = &v41[v42];
    do
    {
      v11 = *v9;
      *(_DWORD *)v11 = *(_DWORD *)*v9 + 1;
      if ((WebKit::WebExtensionWindow::matches(v11, a3, a2, 1u) & 1) != 0)
      {
        WebKit::WebExtensionWindow::tabs((uint64_t)v11, 0, (uint64_t *)&v39);
        if (v40)
        {
          v13 = v39;
          v14 = 8 * v40;
          do
          {
            v15 = *v13;
            *(_DWORD *)v15 = *(_DWORD *)*v13 + 1;
            v38 = v15;
            if (WebKit::WebExtensionTab::matches(v15, a3, 1, a2, 1u))
            {
              v16 = HIDWORD(v46);
              if (HIDWORD(v46) == (_DWORD)v46)
              {
                v17 = (WebKit::WebExtensionTab **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&v38);
                v16 = HIDWORD(v46);
                v18 = v45;
                v19 = *v17;
                ++*(_DWORD *)*v17;
              }
              else
              {
                v18 = v45;
                v19 = v38;
                ++*(_DWORD *)v38;
              }
              *((_QWORD *)v18 + v16) = v19;
              HIDWORD(v46) = v16 + 1;
              WebKit::WebExtensionTab::url(v38, (uint64_t)&v35);
              if (HIDWORD(v44) == (_DWORD)v44)
              {
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v43, (unint64_t)&v35);
              }
              else
              {
                WTF::URL::URL(v43 + 40 * HIDWORD(v44), (uint64_t *)&v35);
                ++HIDWORD(v44);
              }
              v20 = v35;
              v35 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v12);
                else
                  *(_DWORD *)v20 -= 2;
              }
            }
            v21 = v38;
            v38 = 0;
            if (v21)
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v21);
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v12);
      }
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v11);
      ++v9;
    }
    while (v9 != v10);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v8);
  v34 = 0;
  v35 = v45;
  v22 = v46;
  v45 = 0;
  v46 = 0;
  v36 = v22;
  v23 = *a4;
  *a4 = 0;
  v37 = v23;
  v24 = (WebKit::WebExtensionWindow **)WTF::fastMalloc((WTF *)0x20);
  *v24 = (WebKit::WebExtensionWindow *)off_1E34F7B68;
  v24[1] = v35;
  v25 = v36;
  v35 = 0;
  v36 = 0;
  v24[2] = v25;
  v26 = v37;
  v37 = 0;
  v24[3] = v26;
  v41 = v24;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, &v43, &v34, (uint64_t *)&v41, 1, 1);
  v28 = (uint64_t)v41;
  v41 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v37;
  v37 = 0;
  if (v29)
    (*(void (**)(WebKit::WebExtensionWindow *))(*(_QWORD *)v29 + 8))(v29);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v27);
  v31 = v34;
  v34 = 0;
  if (v31)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v31);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v30);
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v32);
}

void sub_197736AB0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;

  v23 = a19;
  a19 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a13;
  a13 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v25);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 - 96, v26);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsReload(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t *a6)
{
  NSString *v8;
  WebKit::WebExtensionTab *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WebKit::WebExtensionTab *v18;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v18);
  v9 = v18;
  if (v18)
  {
    if (a5)
      WebKit::WebExtensionTab::reloadFromOrigin(v18, a6);
    else
      WebKit::WebExtensionTab::reload(v18, a6);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.reload()"), 0, CFSTR("tab not found"), v8, &v15);
    v10 = v15;
    v15 = 0;
    v16 = v10;
    v17 = 1;
    v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v17)
    {
      v13 = v16;
      v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197736CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGoBack(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  NSString *v6;
  WebKit::WebExtensionTab *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WebKit::WebExtensionTab *v16;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v16);
  v7 = v16;
  if (v16)
  {
    WebKit::WebExtensionTab::goBack(v16, a5);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.goBack()"), 0, CFSTR("tab not found"), v6, &v13);
    v9 = v13;
    v13 = 0;
    v14 = v9;
    v15 = 1;
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v15)
    {
      v12 = v14;
      v14 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197736E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGoForward(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  NSString *v6;
  WebKit::WebExtensionTab *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WebKit::WebExtensionTab *v16;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v16);
  v7 = v16;
  if (v16)
  {
    WebKit::WebExtensionTab::goForward(v16, a5);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.goForward()"), 0, CFSTR("tab not found"), v6, &v13);
    v9 = v13;
    v13 = 0;
    v14 = v9;
    v15 = 1;
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v15)
    {
      v12 = v14;
      v14 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197736FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsDetectLanguage(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  NSString *v7;
  URL *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  URL *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  _QWORD *v20;
  URL *v21;
  WTF::StringImpl *v22[2];
  WebKit::WebExtensionTab *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v23);
  v8 = (URL *)v23;
  if (v23)
  {
    WebKit::WebExtensionTab::url(v23, (uint64_t)&v24);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v22, (uint64_t)&v24, 1uLL);
    LODWORD(v8->m_string.m_impl.m_ptr) += 2;
    v21 = v8;
    v9 = *a5;
    *a5 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34F7BA0;
    v10[1] = v8;
    v10[2] = v9;
    v20 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, (uint64_t *)v22, &v21, (uint64_t *)&v20, 1, 1);
    v12 = (uint64_t)v20;
    v20 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v21;
    v21 = 0;
    if (v13)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v13);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v11);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v8);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.detectLanguage()"), 0, CFSTR("tab not found"), v7, v22);
    v16 = v22[0];
    v22[0] = 0;
    v24 = v16;
    v25 = 1;
    v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v25 != -1)
      ((void (*)(_QWORD **, WTF::StringImpl **))off_1E34F79D8[v25])(&v20, &v24);
    v25 = -1;
    result = v22[0];
    v22[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197737238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, int a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a16 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34F79D8[a16])(&a10, &a15);
  a16 = -1;
  v19 = a12;
  a12 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::tabsCaptureVisibleTab(uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int16 a5, __int16 a6, uint64_t *a7)
{
  uint64_t v12;
  NSString *v13;
  NSString *v14;
  URL *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  URL *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebKit::WebExtensionTab *v29;
  uint64_t result;
  uint64_t v31;
  URL *v32;
  WTF::StringImpl *v33[2];
  WebKit::WebExtensionTab *v34;
  uint64_t v35;
  _QWORD v36[5];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4)
    v12 = a3;
  else
    v12 = -3;
  WebKit::WebExtensionContext::getWindow(a1, v12, a2, 1u, 0, &v35);
  if (v35)
  {
    WebKit::WebExtensionWindow::activeTab(v35, 0, (uint64_t *)&v34);
    if (v34)
    {
      WebKit::WebExtensionTab::url(v34, (uint64_t)v36);
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)v36, 1uLL);
      v15 = (URL *)v34;
      if (v34)
        *(_DWORD *)v34 += 2;
      v32 = v15;
      v16 = *a7;
      *a7 = 0;
      v17 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v17 = &off_1E34F7BF0;
      *(_QWORD *)(v17 + 8) = v15;
      *(_WORD *)(v17 + 16) = a5 | (a6 << 8);
      *(_QWORD *)(v17 + 24) = v16;
      v31 = v17;
      WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)v33, &v32, &v31, 1, 1);
      v19 = v31;
      v31 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v20 = v32;
      v32 = 0;
      if (v20)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v20);
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v18);
      v22 = (WTF::StringImpl *)v36[0];
      v36[0] = 0;
      if (!v22)
        goto LABEL_25;
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("active tab not found"), v14, v33);
      v27 = v33[0];
      v33[0] = 0;
      v36[0] = v27;
      v37 = 1;
      v28 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 16))(v28, v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      if (v37 != -1)
        ((void (*)(uint64_t *, _QWORD *))off_1E34F79E8[v37])(&v31, v36);
      v37 = -1;
      v22 = v33[0];
      v33[0] = 0;
      if (!v22)
        goto LABEL_25;
    }
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
LABEL_25:
    v29 = v34;
    v34 = 0;
    if (v29)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v29);
    goto LABEL_27;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("window not found"), v13, v33);
  v23 = v33[0];
  v33[0] = 0;
  v36[0] = v23;
  v37 = 1;
  v24 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 16))(v24, v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v37 != -1)
    ((void (*)(WebKit::WebExtensionTab **, _QWORD *))off_1E34F79E8[v37])(&v34, v36);
  v37 = -1;
  v26 = v33[0];
  v33[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_27:
  result = v35;
  v35 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void sub_197737628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (a21 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34F79E8[a21])(&a10, &a16);
  a21 = -1;
  v24 = a12;
  a12 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a14;
  a14 = 0;
  if (v25)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v25);
  v26 = a15;
  a15 = 0;
  if (v26)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v26);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsToggleReaderMode(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  NSString *v7;
  WebKit::WebExtensionTab *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  WebKit::WebExtensionTab *v17;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v17);
  v8 = v17;
  if (v17)
  {
    WebKit::WebExtensionTab::toggleReaderMode((uint64_t)v17, a5, v6, v7);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v8);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.toggleReaderMode()"), 0, CFSTR("tab not found"), v7, &v14);
    v10 = v14;
    v14 = 0;
    v15 = v10;
    v16 = 1;
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v16)
    {
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1977378B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsSendMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  NSString *v11;
  const WTF::URL *v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  WebKit::WebExtensionTab *result;
  _QWORD *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned __int8 v42;
  WebKit::WebExtensionTab *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45[2];
  char v46;
  IPC::Encoder *v47;

  v44[0] = a4;
  v44[1] = a5;
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v43);
  if (v43)
  {
    v42 = 0;
    WebKit::WebExtensionTab::url(v43, (uint64_t)&v38);
    v14 = WebKit::WebExtensionContext::isURLForAnyExtension((WebKit::WebExtensionContext *)&v38, v12) ^ 1;
    v15 = v38;
    v38 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v42 = v14;
    WebKit::WebExtensionTab::processes((uint64_t)v43, 0x1Cu, v14, (uint64_t *)&v37);
    if (!v37 || !*((_DWORD *)v37 - 3))
    {
      v38 = 0;
      LODWORD(v39) = 0;
      v23 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 16))(v23, &v38);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      if ((_DWORD)v39 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F79D8[v39])(v45, &v38);
      goto LABEL_37;
    }
    v20 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v37);
    v21 = v37;
    if (v37)
      v22 = &v37[*((unsigned int *)v37 - 1)];
    else
      v22 = 0;
    if (v22 == v20)
    {
      v25 = 0;
      goto LABEL_30;
    }
    v25 = *v20;
    if (*v20)
    {
      *v20 = 0;
      v21 = v37;
    }
    if (v21)
    {
      v26 = &v21[*((unsigned int *)v21 - 1)];
      if (v26 == v20)
      {
LABEL_30:
        v38 = (WTF::StringImpl *)&v42;
        v39 = a3;
        v40 = v44;
        v41 = a6;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        v27 = *a7;
        *a7 = 0;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v29 = 1578;
        *(_QWORD *)(v29 + 8) = v28;
        *(_QWORD *)(v29 + 528) = v29 + 16;
        *(_QWORD *)(v29 + 536) = v29 + 16;
        *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v29 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
        v47 = (IPC::Encoder *)v29;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v29, (uint64_t)&v38);
        v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v30 = &off_1E34F7C40;
        *((_QWORD *)v30 + 1) = a1;
        *((_QWORD *)v30 + 2) = v27;
        v31 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v45[0] = v30;
        v45[1] = v31;
        v46 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v25, &v47, 0, (uint64_t)v45, 1);
        if (v46)
        {
          v32 = v45[0];
          v45[0] = 0;
          if (v32)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
        }
        v33 = v47;
        v47 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v24);
          WTF::fastFree(v34, v35);
        }
        if (v25)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
LABEL_37:
        if (v37)
          WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v37, v24);
        goto LABEL_39;
      }
    }
    else
    {
      if (!v20)
        goto LABEL_30;
      v26 = 0;
    }
    if (v26 != v20)
      WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove((unsigned int *)&v37, v20);
    goto LABEL_30;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.sendMessage()"), 0, CFSTR("tab not found"), v11, v45);
  v16 = v45[0];
  v45[0] = 0;
  v38 = v16;
  LODWORD(v39) = 1;
  v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if ((_DWORD)v39 != -1)
    ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34F79D8[v39])(&v47, &v38);
  LODWORD(v39) = -1;
  v19 = v45[0];
  v45[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_39:
  result = v43;
  v43 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197737C80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::StringImpl *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (v21)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v21 + 16));
  if (a9)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a9, a2);
  if (a16)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a16);
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsConnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  NSString *v12;
  const WTF::URL *v13;
  WTF::StringImpl *v14;
  uint8_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  void *v22;
  NSString *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WebKit::WebExtensionTab *result;
  _BYTE v51[7];
  _QWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint8_t v58;
  WebKit::WebExtensionTab *v59;
  _QWORD v60[2];
  uint64_t v61;
  IPC::Encoder *v62;
  uint64_t v63[2];
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v60[1] = a6;
  v61 = a3;
  v60[0] = a5;
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v59);
  if (v59)
  {
    v58 = 0;
    WebKit::WebExtensionTab::url(v59, (uint64_t)&v53);
    v15 = WebKit::WebExtensionContext::isURLForAnyExtension((WebKit::WebExtensionContext *)&v53, v13) ^ 1;
    v16 = v53;
    v53 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v58 = v15;
    v21 = v61;
    v63[0] = *(_QWORD *)(a7 + 216);
    WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::HashCountedSet((uint64_t *)&v53, v63, 1);
    WebKit::WebExtensionContext::addPorts(a1, 0, v15, v21, (_QWORD **)&v53);
    if (v53)
      WTF::fastFree((WTF::StringImpl *)((char *)v53 - 16), v22);
    WebKit::WebExtensionTab::processes((uint64_t)v59, 0x19u, v58, (uint64_t *)&v52);
    if (!v52 || !*((_DWORD *)v52 - 3))
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.connect()"), 0, CFSTR("no runtime.onConnect listeners found"), v23, v63);
      v27 = (WTF::StringImpl *)v63[0];
      v63[0] = 0;
      v53 = v27;
      LOBYTE(v54) = 1;
      v28 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, &v53);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      if ((_BYTE)v54)
      {
        v30 = v53;
        v53 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      v33 = (WTF::StringImpl *)v63[0];
      v63[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v29);
        else
          *(_DWORD *)v33 -= 2;
      }
      goto LABEL_56;
    }
    v24 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v52);
    v25 = v52;
    if (v52)
      v26 = &v52[*((unsigned int *)v52 - 1)];
    else
      v26 = 0;
    if (v26 == v24)
    {
      v31 = 0;
      goto LABEL_42;
    }
    v31 = *v24;
    if (*v24)
    {
      *v24 = 0;
      v25 = v52;
    }
    if (v25)
    {
      v32 = &v25[*((unsigned int *)v25 - 1)];
      if (v32 == v24)
        goto LABEL_42;
    }
    else
    {
      if (!v24)
        goto LABEL_42;
      v32 = 0;
    }
    if (v32 != v24)
      WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove((unsigned int *)&v52, v24);
LABEL_42:
    v53 = (WTF::StringImpl *)&v58;
    v54 = &v61;
    v55 = a4;
    v56 = v60;
    v57 = a7;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v35 = v58;
    v36 = v61;
    if (v31)
    {
      v37 = (unsigned int *)(v31 + 16);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v39 = *(_QWORD *)(a1 + 32);
    v40 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v40 = 1576;
    *(_QWORD *)(v40 + 8) = v39;
    *(_QWORD *)(v40 + 528) = v40 + 16;
    *(_QWORD *)(v40 + 536) = v40 + 16;
    *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v40 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
    v62 = (IPC::Encoder *)v40;
    IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v40, (uint64_t)&v53);
    v41 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v41 = &off_1E34F7C68;
    *(_QWORD *)(v41 + 8) = a1;
    *(_QWORD *)(v41 + 16) = a1;
    *(_BYTE *)(v41 + 24) = v35;
    *(_DWORD *)(v41 + 25) = *(_DWORD *)v51;
    *(_DWORD *)(v41 + 28) = *(_DWORD *)&v51[3];
    *(_QWORD *)(v41 + 32) = v36;
    *(_QWORD *)(v41 + 40) = v31;
    v42 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v63[0] = v41;
    v63[1] = v42;
    v64 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v31, &v62, 0, (uint64_t)v63, 1);
    if (v64)
    {
      v44 = v63[0];
      v63[0] = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    v45 = v62;
    v62 = 0;
    if (v45)
    {
      IPC::Encoder::~Encoder(v45, v43);
      WTF::fastFree(v46, v47);
    }
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v48 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 16))(v48, &v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    if ((_BYTE)v54)
    {
      v49 = v53;
      v53 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, v29);
          if (!v31)
          {
LABEL_56:
            if (v52)
              WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v52, v29);
            goto LABEL_58;
          }
LABEL_55:
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v31 + 16));
          goto LABEL_56;
        }
        *(_DWORD *)v49 -= 2;
      }
    }
    if (!v31)
      goto LABEL_56;
    goto LABEL_55;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.connect()"), 0, CFSTR("tab not found"), v12, v63);
  v17 = (WTF::StringImpl *)v63[0];
  v63[0] = 0;
  v53 = v17;
  LOBYTE(v54) = 1;
  v18 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v53);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if ((_BYTE)v54)
  {
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v34 = (WTF::StringImpl *)v63[0];
  v63[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v19);
    else
      *(_DWORD *)v34 -= 2;
  }
LABEL_58:
  result = v59;
  v59 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197738300(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, WTF::StringImpl *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,IPC::Encoder *a22)
{
  uint64_t v22;

  if (v22)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a11, a2);
  if (a18)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a18);
  _Unwind_Resume(exception_object);
}

void sub_19773853C()
{
  JUMPOUT(0x197738534);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGetZoom(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  NSString *v6;
  WebKit::WebExtensionTab *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  double v14;
  int v15;
  WebKit::WebExtensionTab *v16;
  char v17;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v16);
  v7 = v16;
  if (v16)
  {
    v14 = WebKit::WebExtensionTab::zoomFactor(v16);
    v15 = 0;
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v8 + 16))(v8, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      ((void (*)(WTF::StringImpl **, double *))off_1E34F79F8[v15])(&v13, &v14);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.getZoom()"), 0, CFSTR("tab not found"), v6, &v13);
    v10 = v13;
    v13 = 0;
    v14 = *(double *)&v10;
    v15 = 1;
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15 != -1)
      ((void (*)(char *, double *))off_1E34F79F8[v15])(&v17, &v14);
    v15 = -1;
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E34F79F8[a13])(v14 - 33, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v16);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsSetZoom(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, double a6)
{
  NSString *v8;
  WebKit::WebExtensionTab *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WebKit::WebExtensionTab *v18;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v18);
  v9 = v18;
  if (v18)
  {
    WebKit::WebExtensionTab::setZoomFactor(v18, a5, a6);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.setZoom()"), 0, CFSTR("tab not found"), v8, &v15);
    v11 = v15;
    v15 = 0;
    v16 = v11;
    v17 = 1;
    v12 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v17)
    {
      v14 = v16;
      v16 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197738874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::tabsRemove(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebKit::WebExtensionTab *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebKit::WebExtensionTab *v17;
  _QWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  NSString *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  uint64_t v32;
  NSString v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;
  WebKit::WebExtensionTab *v37;

  v31 = 0;
  v32 = 0;
  v4 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v4)
    goto LABEL_27;
  if (!(v4 >> 29))
  {
    v6 = (uint64_t *)result;
    v7 = WTF::fastMalloc((WTF *)(8 * v4));
    LODWORD(v32) = v4;
    v31 = (_QWORD *)v7;
    if (*((_DWORD *)a2 + 3))
    {
      v8 = 0;
      do
      {
        v9 = v8;
        v10 = *a2;
        WebKit::WebExtensionContext::getTab(v6, *(_QWORD *)(*a2 + 8 * v8), 0, &v37);
        v12 = v37;
        if (!v37)
        {
          v33 = *(NSString *)(v10 + 8 * v9);
          WebKit::toWebExtensionError<unsigned long long>((WebKit *)CFSTR("tabs.remove()"), 0, CFSTR("tab '%llu' was not found"), &v33, &v34);
          v13 = v34;
          v34 = 0;
          v35 = v13;
          v36 = 1;
          v14 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v35);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          if (v36)
          {
            v15 = v35;
            v35 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v11);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
          v16 = v34;
          v34 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v11);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v37;
          v37 = 0;
          if (v17)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
        }
        v8 = v9 + 1;
        *(_QWORD *)(v7 + 8 * v9) = v12;
      }
      while (v9 + 1 < (unint64_t)*((unsigned int *)a2 + 3));
      HIDWORD(v32) = v9 + 1;
      if ((_DWORD)v9 != -1)
      {
        v8 = v8;
        v18 = v31;
        while (*v18
              ? WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>::unspecifiedBoolTypeInstance
              : 0)
        {
          ++v18;
          if (!--v8)
            goto LABEL_27;
        }
        return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v11);
      }
    }
LABEL_27:
    v20 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v20 = 1;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = &off_1E34F7C90;
    v23 = *a3;
    *a3 = 0;
    v21[1] = v23;
    *(_QWORD *)(v20 + 8) = v21;
    *(_BYTE *)(v20 + 16) = 0;
    *(_BYTE *)(v20 + 24) = 0;
    if (HIDWORD(v32))
    {
      v24 = (_DWORD **)v31;
      v25 = 8 * HIDWORD(v32);
      do
      {
        v26 = *v24;
        if (*v24)
          ++*v26;
        ++*(_DWORD *)v20;
        v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v27 = &off_1E34F7CB8;
        *((_QWORD *)v27 + 1) = v20;
        v35 = v27;
        WebKit::WebExtensionTab::close((uint64_t)v26, (uint64_t *)&v35, v28, v29);
        v30 = v35;
        v35 = 0;
        if (v30)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
        if (v26)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v26);
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v20, v22);
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v11);
  }
  __break(0xC471u);
  return result;
}

void sub_197738BA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, char a17, uint64_t a18)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsExecuteScript(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  NSString *v9;
  URL *v10;
  uint64_t v11;
  _QWORD *v12;
  URL *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  URL *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  uint64_t v25;
  uint64_t v26;
  URL *v27;
  _BYTE v28[136];
  uint64_t v29;
  _QWORD *v30;
  URL *v31;
  uint64_t v32[2];
  URL *v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, (WebKit::WebExtensionTab **)&v33);
  v10 = v33;
  if (v33)
  {
    WebKit::WebExtensionTab::url((WebKit::WebExtensionTab *)v33, (uint64_t)v34);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v32, (uint64_t)v34, 1uLL);
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    v31 = v10;
    v25 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v26 = a1;
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    v27 = v10;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v28, a5);
    v11 = *a6;
    *a6 = 0;
    v29 = v11;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
    *v12 = off_1E34F7CE0;
    v12[1] = v25;
    v12[2] = v26;
    v13 = v27;
    v26 = 0;
    v27 = 0;
    v12[3] = v13;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v12 + 4), (uint64_t)v28);
    v14 = v29;
    v29 = 0;
    v12[21] = v14;
    v30 = v12;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v32, &v31, (uint64_t *)&v30, 1, 1);
    v16 = (uint64_t)v30;
    v30 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v25, v15);
    v18 = v31;
    v31 = 0;
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v17);
    v20 = (WTF::StringImpl *)v34[0];
    v34[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.executeScript()"), 0, CFSTR("tab not found"), v9, v34);
    v21 = v34[0];
    v34[0] = 0;
    v25 = v21;
    LODWORD(v27) = 1;
    v22 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 16))(v22, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if ((_DWORD)v27 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F7A08[v27])(v32, &v25);
    LODWORD(v27) = -1;
    result = (WTF::StringImpl *)v34[0];
    v34[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197738F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if ((_DWORD)a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F7A08[a11])(v12 - 120, &a9);
  LODWORD(a11) = -1;
  v15 = *(WTF::StringImpl **)(v12 - 96);
  *(_QWORD *)(v12 - 96) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsInsertCSS(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  NSString *v9;
  URL *v10;
  uint64_t v11;
  _QWORD *v12;
  URL *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  URL *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  uint64_t v27;
  URL *v28;
  _BYTE v29[136];
  uint64_t v30;
  _QWORD *v31;
  URL *v32;
  uint64_t v33[2];
  URL *v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, (WebKit::WebExtensionTab **)&v34);
  v10 = v34;
  if (v34)
  {
    WebKit::WebExtensionTab::url((WebKit::WebExtensionTab *)v34, (uint64_t)v35);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v33, (uint64_t)v35, 1uLL);
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    v32 = v10;
    v26 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v27 = a1;
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    v28 = v10;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v29, a5);
    v11 = *a6;
    *a6 = 0;
    v30 = v11;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
    *v12 = off_1E34F7D30;
    v12[1] = v26;
    v12[2] = v27;
    v13 = v28;
    v27 = 0;
    v28 = 0;
    v12[3] = v13;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v12 + 4), (uint64_t)v29);
    v14 = v30;
    v30 = 0;
    v12[21] = v14;
    v31 = v12;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v33, &v32, (uint64_t *)&v31, 1, 1);
    v16 = (uint64_t)v31;
    v31 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v26, v15);
    v18 = v32;
    v32 = 0;
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v17);
    v20 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.insertCSS()"), 0, CFSTR("tab not found"), v9, v35);
    v21 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    v26 = v21;
    LOBYTE(v27) = 1;
    v22 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if ((_BYTE)v27)
    {
      v24 = v26;
      v26 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    result = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1977392E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if ((_BYTE)a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  v15 = *(WTF::StringImpl **)(v12 - 96);
  *(_QWORD *)(v12 - 96) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsRemoveCSS(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  NSString *v9;
  WebKit::WebExtensionTab *v10;
  NSString *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;
  WebKit::WebExtensionTab *v34;

  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v34);
  v10 = v34;
  if (v34)
  {
    WebKit::WebExtensionTab::mainWebView(v34);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = *(unsigned __int8 *)(a5 + 72);
      v14 = a1[7];
      if (v14)
        CFRetain(*(CFTypeRef *)(v14 + 8));
      v31 = v14;
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a5, &v31, (uint64_t)&v32);
      v15 = v31;
      v31 = 0;
      if (v15)
        CFRelease(*(CFTypeRef *)(v15 + 8));
      WebKit::WebExtensionDynamicScripts::removeStyleSheets((uint64_t)&v32, v12, v13 != 0, (uint64_t)a1);
      LOBYTE(v29) = 0;
      v30 = 0;
      v16 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, &v29);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      if (v30)
      {
        v18 = v29;
        v29 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v17);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.removeCSS()"), 0, CFSTR("could not remove stylesheet on this tab"), v11, &v29);
      v23 = v29;
      v29 = 0;
      v32 = v23;
      v33 = 1;
      v24 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v24 + 16))(v24, &v32);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      if (v33)
      {
        v26 = v32;
        v32 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v25);
        else
          *(_DWORD *)v28 -= 2;
      }
    }

    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.removeCSS()"), 0, CFSTR("tab not found"), v9, &v29);
    v19 = v29;
    v29 = 0;
    v32 = v19;
    v33 = 1;
    v20 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v33)
    {
      v22 = v32;
      v32 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1977396E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v17);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v17);
    else
      *(_DWORD *)a9 -= 2;
  }

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(uint64_t a1, __int128 *a2)
{
  int v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  WTF::StringImpl *v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[26];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v19 = 34;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v20, &v19, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v17 = *a2;
  v4 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a2 + 56))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v5)
      *(_DWORD *)v5 += 2;
    v15 = *(__int128 *)((char *)a2 + 24);
    v16 = *(__int128 *)((char *)a2 + 40);
  }
  else
  {
    v5 = 0;
  }
  v6 = *((unsigned __int8 *)a2 + 72);
  if (*((_BYTE *)a2 + 72))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  v8 = a2[8];
  v23 = a2[7];
  v24 = v8;
  *(_OWORD *)v25 = a2[9];
  *(_OWORD *)&v25[10] = *(__int128 *)((char *)a2 + 154);
  v9 = a2[6];
  v21 = a2[5];
  v22 = v9;
  v10 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v10 = off_1E34F7D58;
  *(_QWORD *)(v10 + 8) = a1;
  *(_QWORD *)(v10 + 16) = a1;
  *(_OWORD *)(v10 + 24) = v17;
  *(_BYTE *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 80) = 0;
  if (v4)
  {
    if (v5)
      *(_DWORD *)v5 += 2;
    *(_QWORD *)(v10 + 40) = v5;
    *(_OWORD *)(v10 + 48) = v15;
    *(_OWORD *)(v10 + 64) = v16;
    *(_BYTE *)(v10 + 80) = 1;
  }
  *(_BYTE *)(v10 + 88) = 0;
  *(_BYTE *)(v10 + 96) = 0;
  if (v6)
  {
    if (v7)
      *(_DWORD *)v7 += 2;
    *(_QWORD *)(v10 + 88) = v7;
    *(_BYTE *)(v10 + 96) = 1;
  }
  v11 = v24;
  *(_OWORD *)(v10 + 136) = v23;
  *(_OWORD *)(v10 + 152) = v11;
  *(_OWORD *)(v10 + 168) = *(_OWORD *)v25;
  *(_OWORD *)(v10 + 178) = *(_OWORD *)&v25[10];
  v12 = v22;
  *(_OWORD *)(v10 + 104) = v21;
  *(_OWORD *)(v10 + 120) = v12;
  v18 = v10;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v20, &v18);
  result = v18;
  v18 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v6 && v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      result = WTF::StringImpl::destroy(v7, v13);
      if (!v4)
        goto LABEL_31;
      goto LABEL_25;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v4)
    goto LABEL_31;
LABEL_25:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      result = WTF::StringImpl::destroy(v5, v13);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_31:
  if (v20)
    return WTF::fastFree((WTF *)(v20 - 16), v13);
  return result;
}

void sub_197739A98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (v21 && v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v20 && v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (a18)
    WTF::fastFree((WTF *)(a18 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(uint64_t a1, __int128 *a2, __int128 *a3)
{
  int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  unsigned __int8 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[26];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[26];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v31 = 40;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v32, &v31, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v29 = *a2;
  v6 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a2 + 56))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v7)
      *(_DWORD *)v7 += 2;
    v27 = *(__int128 *)((char *)a2 + 24);
    v28 = *(__int128 *)((char *)a2 + 40);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((unsigned __int8 *)a2 + 72);
  if (*((_BYTE *)a2 + 72))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
    if (v9)
      *(_DWORD *)v9 += 2;
  }
  else
  {
    v9 = 0;
  }
  v10 = a2[8];
  v41 = a2[7];
  v42 = v10;
  *(_OWORD *)v43 = a2[9];
  *(_OWORD *)&v43[10] = *(__int128 *)((char *)a2 + 154);
  v11 = a2[6];
  v39 = a2[5];
  v40 = v11;
  v38 = *a3;
  v12 = *((unsigned __int8 *)a3 + 56);
  if (*((_BYTE *)a3 + 56))
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
    if (v13)
      *(_DWORD *)v13 += 2;
    v25 = *(__int128 *)((char *)a3 + 24);
    v26 = *(__int128 *)((char *)a3 + 40);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((unsigned __int8 *)a3 + 72);
  if (*((_BYTE *)a3 + 72))
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)a3 + 8);
    if (v15)
      *(_DWORD *)v15 += 2;
  }
  else
  {
    v15 = 0;
  }
  v16 = a3[8];
  v35 = a3[7];
  v36 = v16;
  *(_OWORD *)v37 = a3[9];
  *(_OWORD *)&v37[10] = *(__int128 *)((char *)a3 + 154);
  v17 = a3[6];
  v33 = a3[5];
  v34 = v17;
  v18 = WTF::fastMalloc((WTF *)0x178);
  *(_QWORD *)v18 = off_1E34F7D80;
  *(_QWORD *)(v18 + 8) = a1;
  *(_QWORD *)(v18 + 16) = a1;
  *(_OWORD *)(v18 + 24) = v29;
  *(_BYTE *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 80) = 0;
  if (v6)
  {
    if (v7)
      *(_DWORD *)v7 += 2;
    *(_QWORD *)(v18 + 40) = v7;
    *(_OWORD *)(v18 + 48) = v27;
    *(_OWORD *)(v18 + 64) = v28;
    *(_BYTE *)(v18 + 80) = 1;
  }
  *(_BYTE *)(v18 + 88) = 0;
  *(_BYTE *)(v18 + 96) = 0;
  if (v8)
  {
    if (v9)
      *(_DWORD *)v9 += 2;
    *(_QWORD *)(v18 + 88) = v9;
    *(_BYTE *)(v18 + 96) = 1;
  }
  v19 = v42;
  *(_OWORD *)(v18 + 136) = v41;
  *(_OWORD *)(v18 + 152) = v19;
  *(_OWORD *)(v18 + 168) = *(_OWORD *)v43;
  *(_OWORD *)(v18 + 178) = *(_OWORD *)&v43[10];
  v20 = v40;
  *(_OWORD *)(v18 + 104) = v39;
  *(_OWORD *)(v18 + 120) = v20;
  *(_OWORD *)(v18 + 200) = v38;
  *(_BYTE *)(v18 + 216) = 0;
  *(_BYTE *)(v18 + 256) = 0;
  if (v12)
  {
    if (v13)
      *(_DWORD *)v13 += 2;
    *(_QWORD *)(v18 + 216) = v13;
    *(_OWORD *)(v18 + 224) = v25;
    *(_OWORD *)(v18 + 240) = v26;
    *(_BYTE *)(v18 + 256) = 1;
  }
  *(_BYTE *)(v18 + 264) = 0;
  *(_BYTE *)(v18 + 272) = 0;
  if (v14)
  {
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)(v18 + 264) = v15;
    *(_BYTE *)(v18 + 272) = 1;
  }
  v21 = v36;
  *(_OWORD *)(v18 + 312) = v35;
  *(_OWORD *)(v18 + 328) = v21;
  *(_OWORD *)(v18 + 344) = *(_OWORD *)v37;
  *(_OWORD *)(v18 + 354) = *(_OWORD *)&v37[10];
  v22 = v34;
  *(_OWORD *)(v18 + 280) = v33;
  *(_OWORD *)(v18 + 296) = v22;
  v30 = v18;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v32, &v30);
  result = v30;
  v30 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (!v14 || !v15)
  {
LABEL_41:
    if (!v12)
      goto LABEL_48;
    goto LABEL_42;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_41;
  }
  result = WTF::StringImpl::destroy(v15, v23);
  if (!v12)
    goto LABEL_48;
LABEL_42:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      result = WTF::StringImpl::destroy(v13, v23);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_48:
  if (v8 && v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      result = WTF::StringImpl::destroy(v9, v23);
      if (!v6)
        goto LABEL_59;
      goto LABEL_53;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (!v6)
    goto LABEL_59;
LABEL_53:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      result = WTF::StringImpl::destroy(v7, v23);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_59:
  if (v32)
    return WTF::fastFree((WTF *)(v32 - 16), v23);
  return result;
}

void sub_197739EF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  int v27;
  int v28;

  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (v28 && v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (v27 && v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v26 && v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v25 && v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (a21)
    WTF::fastFree((WTF *)(a21 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  void *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  unsigned __int8 *v11;

  v10 = 39;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, &v10, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34F7DA8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v9 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v11, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v11)
    return WTF::fastFree((WTF *)(v11 - 16), v7);
  return result;
}

void sub_19773A08C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  char v12;
  unsigned __int8 *v13;

  v12 = 35;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v8 = &off_1E34F7DD0;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v13)
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  return result;
}

void sub_19773A188(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  void *v11;
  uint64_t result;
  _QWORD *v13;
  char v14;
  unsigned __int8 *v15;

  v14 = 37;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v15, &v14, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v10 = &off_1E34F7DF8;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  v13 = v10;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v15, (uint64_t *)&v13);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v15)
    return WTF::fastFree((WTF *)(v15 - 16), v11);
  return result;
}

void sub_19773A294(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  char v12;
  unsigned __int8 *v13;

  v12 = 33;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v8 = &off_1E34F7E20;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v13)
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  return result;
}

void sub_19773A390(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  char v12;
  unsigned __int8 *v13;

  v12 = 32;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v8 = &off_1E34F7E48;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v13)
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  return result;
}

void sub_19773A48C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unsigned __int8 *v17;

  v16 = 36;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v17, &v16, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, a2);
  v14 = a3;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v6 = &off_1E34F7E70;
  v6[1] = a1;
  v6[2] = a1;
  v7 = v12;
  v12 = 0;
  v6[3] = v7;
  v8 = v13;
  v13 = 0;
  v6[4] = v8;
  v6[5] = v14;
  v15 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v17, (uint64_t *)&v15);
  v10 = (uint64_t)v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v11, v9);
  }
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), v9);
}

void sub_19773A5F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a11)
    WTF::fastFree(a11, a2);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  v16 = *(_QWORD *)(v14 - 40);
  if (v16)
    WTF::fastFree((WTF *)(v16 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;

  v12 = 38;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E34F7E98;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_BYTE *)(v8 + 40) = a4;
  v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, &v11);
  result = v11;
  v11 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v13)
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  return result;
}

void sub_19773A718(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WebKit *v6;
  NSObject *v7;
  NSError *v8;
  NSString *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WebKit::WebExtensionTab *v21;
  void *v22;
  WebKit::WebExtensionTab *v23;
  _BYTE v24[16];
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29[23];
  char v30;
  uint8_t buf[4];
  _BYTE v32[180];
  char v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v6, v8);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v32 = v22;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error for open new tab: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v6, "localizedDescription");
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.create()"), 0, v9, v10, v29);
    v11 = v29[0];
    v29[0] = 0;
    *(_QWORD *)&v32[4] = v11;
    v34 = 1;
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v34 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34F79A8[v34])(v24, &v32[4]);
    v34 = -1;
    v14 = v29[0];
    v29[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }

  }
  else if (v5)
  {
    WebKit::WebExtensionContext::getOrCreateTab(*(uint64_t **)(a1 + 32), v5, (uint64_t)&v23);
    WebKit::WebExtensionTab::parameters(v23, (uint64_t)v24);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v29, (uint64_t)v24);
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](&v32[4], (uint64_t)v29);
    v34 = 0;
    v15 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 16))(v15, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v34 != -1)
      ((void (*)(char *, _BYTE *))off_1E34F79A8[v34])(&v30, &v32[4]);
    v34 = -1;
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v16);
    if (v28)
    {
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    if (v26)
    {
      v20 = v25;
      v25 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v17);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    v21 = v23;
    v23 = 0;
    if (v21)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v21);
  }
  else
  {
    v32[4] = 0;
    v33 = 0;
    v34 = 0;
    v19 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v34 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34F79A8[v34])(v29, &v32[4]);
  }

}

void sub_19773AAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v38 = LODWORD(STACK[0x240]);
  if ((_DWORD)v38 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34F79A8[v38])(&a33, v35);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = off_1E34F7A28;
  v3 = a1[27];
  a1[27] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[26];
  a1[26] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7A28;
  v3 = *((_QWORD *)a1 + 27);
  *((_QWORD *)a1 + 27) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 26) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v5);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  return WTF::fastFree(a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  WebKit::WebExtensionTab *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebExtensionTab *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  WebKit::WebExtensionTab *v34;
  __int128 v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int16 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)&v35 = v3;
    LODWORD(v48) = 1;
    v4 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionTab **))(*(_QWORD *)v4 + 16))(v4, &v34);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if ((_DWORD)v48 != -1)
      return ((uint64_t (*)(WTF::StringImpl **, __int128 *))off_1E34F79A8[v48])(&v31, &v35);
    return result;
  }
  v6 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v6;
  v34 = v6;
  v35 = *(_OWORD *)(a1 + 16);
  LOBYTE(v36) = 0;
  v39 = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(WTF::StringImpl **)(a1 + 32);
    if (v7)
      *(_DWORD *)v7 += 2;
    v36 = v7;
    v8 = *(_OWORD *)(a1 + 56);
    v37 = *(_OWORD *)(a1 + 40);
    v38 = v8;
    v39 = 1;
  }
  LOBYTE(v40) = 0;
  v41 = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v9 = *(WTF::StringImpl **)(a1 + 80);
    if (v9)
      *(_DWORD *)v9 += 2;
    v40 = v9;
    v41 = 1;
  }
  v10 = *(_OWORD *)(a1 + 144);
  v44 = *(_OWORD *)(a1 + 128);
  v45 = v10;
  v46[0] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)((char *)v46 + 10) = *(_OWORD *)(a1 + 170);
  v11 = *(_OWORD *)(a1 + 112);
  v42 = *(_OWORD *)(a1 + 96);
  v43 = v11;
  v48 = *(_OWORD *)(a1 + 200);
  v12 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v49 = v12;
  v13 = WTF::fastMalloc((WTF *)0xE0);
  *(_QWORD *)v13 = off_1E34F7A50;
  v14 = v34;
  v34 = 0;
  *(_QWORD *)(v13 + 8) = v14;
  *(_OWORD *)(v13 + 16) = v35;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v13 + 32), (uint64_t)&v36);
  *(_BYTE *)(v13 + 80) = 0;
  *(_BYTE *)(v13 + 88) = 0;
  if (v41)
  {
    v15 = v40;
    v40 = 0;
    *(_QWORD *)(v13 + 80) = v15;
    *(_BYTE *)(v13 + 88) = 1;
  }
  v16 = v43;
  *(_OWORD *)(v13 + 96) = v42;
  *(_OWORD *)(v13 + 112) = v16;
  v17 = v44;
  v18 = v45;
  v19 = v46[0];
  *(_OWORD *)(v13 + 170) = *(_OWORD *)((char *)v46 + 10);
  *(_OWORD *)(v13 + 144) = v18;
  *(_OWORD *)(v13 + 160) = v19;
  *(_OWORD *)(v13 + 128) = v17;
  *(_WORD *)(v13 + 192) = v47;
  *(_OWORD *)(v13 + 200) = v48;
  v20 = v49;
  *((_QWORD *)&v48 + 1) = 0;
  v49 = 0;
  *(_QWORD *)(v13 + 216) = v20;
  v30 = v13;
  if (*(_BYTE *)(a1 + 72))
  {
    v21 = *(WTF::StringImpl **)(a1 + 32);
    if (v21)
      *(_DWORD *)v21 += 2;
    v31 = v21;
    v22 = *(_OWORD *)(a1 + 56);
    v32 = *(_OWORD *)(a1 + 40);
    v33 = v22;
    WebKit::WebExtensionTab::loadURL(v6, (uint64_t)&v31, &v30);
    goto LABEL_21;
  }
  LOBYTE(v31) = 0;
  LOBYTE(v32) = 0;
  v30 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if ((_BYTE)v32)
  {
LABEL_21:
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v30;
  v30 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v49;
  v49 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)&v48 + 1);
  *((_QWORD *)&v48 + 1) = 0;
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
  if (v41)
  {
    v28 = v40;
    v40 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v23);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v39)
  {
    v29 = v36;
    v36 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v23);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  result = (uint64_t)v34;
  v34 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void sub_19773B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,WTF::StringImpl *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  WTF::StringImpl *v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v43);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a41)
    (*(void (**)(uint64_t))(*(_QWORD *)a41 + 8))(a41);
  if (a40)
    CFRelease(*(CFTypeRef *)(a40 + 8));
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, v43);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v43);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a15)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a15);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = off_1E34F7A50;
  v3 = a1[27];
  a1[27] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[26];
  a1[26] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7A50;
  v3 = *((_QWORD *)a1 + 27);
  *((_QWORD *)a1 + 27) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 26) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v5);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  return WTF::fastFree(a1, v6);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  id result;
  WebKit::WebExtensionTab *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebExtensionTab *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  NSString *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  WebKit::WebExtensionTab *v32;
  __int128 v33;
  WTF::StringImpl *v34[5];
  char v35;
  WTF::StringImpl *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)&v33 = v3;
    LODWORD(v43) = 1;
    v4 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionTab **))(*(_QWORD *)v4 + 16))(v4, &v32);
    result = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if ((_DWORD)v43 != -1)
      return (id)((uint64_t (*)(WTF::StringImpl **, __int128 *))off_1E34F79A8[v43])(&v30, &v33);
    return result;
  }
  v6 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v6;
  v32 = v6;
  v33 = *(_OWORD *)(a1 + 16);
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v34, a1 + 32);
  LOBYTE(v36) = 0;
  v37 = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v7 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v36 = v7;
    v37 = 1;
  }
  v8 = *(_OWORD *)(a1 + 144);
  v40 = *(_OWORD *)(a1 + 128);
  v41 = v8;
  v42[0] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)(a1 + 170);
  v9 = *(_OWORD *)(a1 + 112);
  v38 = *(_OWORD *)(a1 + 96);
  v39 = v9;
  v43 = *(_OWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v44 = v10;
  v11 = WTF::fastMalloc((WTF *)0xE0);
  *(_QWORD *)v11 = off_1E34F7A78;
  v12 = v32;
  v32 = 0;
  *(_QWORD *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = v33;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v11 + 32), (uint64_t)v34);
  *(_BYTE *)(v11 + 80) = 0;
  *(_BYTE *)(v11 + 88) = 0;
  if (v37)
  {
    v13 = v36;
    v36 = 0;
    *(_QWORD *)(v11 + 80) = v13;
    *(_BYTE *)(v11 + 88) = 1;
  }
  v14 = v39;
  *(_OWORD *)(v11 + 96) = v38;
  *(_OWORD *)(v11 + 112) = v14;
  v15 = v40;
  v16 = v41;
  v17 = v42[0];
  *(_OWORD *)(v11 + 170) = *(_OWORD *)((char *)v42 + 10);
  *(_OWORD *)(v11 + 144) = v16;
  *(_OWORD *)(v11 + 160) = v17;
  *(_OWORD *)(v11 + 128) = v15;
  *(_OWORD *)(v11 + 200) = v43;
  v18 = v44;
  *((_QWORD *)&v43 + 1) = 0;
  v44 = 0;
  *(_QWORD *)(v11 + 216) = v18;
  v29 = v11;
  if (*(_BYTE *)(a1 + 173))
  {
    v19 = *(unsigned __int8 *)(a1 + 172);
    if (v19 != WebKit::WebExtensionTab::isPinned(v6))
    {
      if (!*(_BYTE *)(a1 + 173))
      {
        result = std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      if (*(_BYTE *)(a1 + 172))
        WebKit::WebExtensionTab::pin((uint64_t)v6, &v29, v20, v21);
      else
        WebKit::WebExtensionTab::unpin((uint64_t)v6, &v29, v20, v21);
      goto LABEL_22;
    }
    v11 = v29;
  }
  LOBYTE(v30) = 0;
  v31 = 0;
  v29 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v31)
  {
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
LABEL_22:
  v24 = v29;
  v29 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v44;
  v44 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)&v43 + 1);
  *((_QWORD *)&v43 + 1) = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  if (v37)
  {
    v27 = v36;
    v36 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v22);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (v35)
  {
    v28 = v34[0];
    v34[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  result = v32;
  v32 = 0;
  if (result)
    return (id)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_19773B6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,WTF::StringImpl *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  WTF::StringImpl *v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v41);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a39)
    (*(void (**)(uint64_t))(*(_QWORD *)a39 + 8))(a39);
  if (a38)
    CFRelease(*(CFTypeRef *)(a38 + 8));
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, v41);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21 && a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v41);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a13)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = off_1E34F7A78;
  v3 = a1[27];
  a1[27] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[26];
  a1[26] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7A78;
  v3 = *((_QWORD *)a1 + 27);
  *((_QWORD *)a1 + 27) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 26) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v5);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  return WTF::fastFree(a1, v6);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  id result;
  WebKit::WebExtensionTab *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebExtensionTab *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  NSString *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  WebKit::WebExtensionTab *v32;
  __int128 v33;
  WTF::StringImpl *v34[5];
  char v35;
  WTF::StringImpl *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)&v33 = v3;
    DWORD2(v43) = 1;
    v4 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionTab **))(*(_QWORD *)v4 + 16))(v4, &v32);
    result = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (DWORD2(v43) != -1)
      return (id)((uint64_t (*)(WTF::StringImpl **, __int128 *))off_1E34F79A8[DWORD2(v43)])(&v30, &v33);
    return result;
  }
  v6 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v6;
  v32 = v6;
  v33 = *(_OWORD *)(a1 + 16);
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v34, a1 + 32);
  LOBYTE(v36) = 0;
  v37 = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v7 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v36 = v7;
    v37 = 1;
  }
  v8 = *(_OWORD *)(a1 + 144);
  v40 = *(_OWORD *)(a1 + 128);
  v41 = v8;
  v42[0] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)(a1 + 170);
  v9 = *(_OWORD *)(a1 + 112);
  v38 = *(_OWORD *)(a1 + 96);
  v39 = v9;
  v43 = *(_OWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v44 = v10;
  v11 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v11 = off_1E34F7AA0;
  v12 = v32;
  v32 = 0;
  *(_QWORD *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = v33;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v11 + 32), (uint64_t)v34);
  *(_BYTE *)(v11 + 80) = 0;
  *(_BYTE *)(v11 + 88) = 0;
  if (v37)
  {
    v13 = v36;
    v36 = 0;
    *(_QWORD *)(v11 + 80) = v13;
    *(_BYTE *)(v11 + 88) = 1;
  }
  v14 = v39;
  *(_OWORD *)(v11 + 96) = v38;
  *(_OWORD *)(v11 + 112) = v14;
  v15 = v40;
  v16 = v41;
  v17 = v42[0];
  *(_OWORD *)(v11 + 170) = *(_OWORD *)((char *)v42 + 10);
  *(_OWORD *)(v11 + 144) = v16;
  *(_OWORD *)(v11 + 160) = v17;
  *(_OWORD *)(v11 + 128) = v15;
  *(_OWORD *)(v11 + 192) = v43;
  v18 = v44;
  *((_QWORD *)&v43 + 1) = 0;
  v44 = 0;
  *(_QWORD *)(v11 + 208) = v18;
  v29 = v11;
  if (*(_BYTE *)(a1 + 177))
  {
    v19 = *(unsigned __int8 *)(a1 + 176);
    if (v19 != WebKit::WebExtensionTab::isMuted(v6))
    {
      if (!*(_BYTE *)(a1 + 177))
      {
        result = std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      if (*(_BYTE *)(a1 + 176))
        WebKit::WebExtensionTab::mute((uint64_t)v6, &v29, v20, v21);
      else
        WebKit::WebExtensionTab::unmute((uint64_t)v6, &v29, v20, v21);
      goto LABEL_22;
    }
    v11 = v29;
  }
  LOBYTE(v30) = 0;
  v31 = 0;
  v29 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v31)
  {
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
LABEL_22:
  v24 = v29;
  v29 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v44;
  v44 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)&v43 + 1);
  *((_QWORD *)&v43 + 1) = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  if (v37)
  {
    v27 = v36;
    v36 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v22);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (v35)
  {
    v28 = v34[0];
    v34[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  result = v32;
  v32 = 0;
  if (result)
    return (id)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_19773BCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  WTF::StringImpl *v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v39);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a37)
    (*(void (**)(uint64_t))(*(_QWORD *)a37 + 8))(a37);
  if (a36)
    CFRelease(*(CFTypeRef *)(a36 + 8));
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v39);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v39);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a12)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a12);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = off_1E34F7AA0;
  v3 = a1[26];
  a1[26] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[25];
  a1[25] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7AA0;
  v3 = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 26) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 25);
  *((_QWORD *)a1 + 25) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v5);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  return WTF::fastFree(a1, v6);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  WebKit::WebExtensionTab *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit::WebExtensionTab *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WebKit::WebExtensionTab *v18;
  WebKit::WebExtensionTab *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    v21 = v3;
    v22 = 1;
    v4 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v20);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v22 != -1)
      return ((uint64_t (*)(WebKit::WebExtensionTab **, _DWORD **))off_1E34F79A8[v22])(&v19, &v21);
    return result;
  }
  v6 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v6;
  v7 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34F7AC8;
  v8[1] = v6;
  v8[2] = v7;
  v17 = v8;
  v9 = *(uint64_t **)(a1 + 192);
  WebKit::WebExtensionTab::parentTab(v6, &v19);
  if (*(_BYTE *)(a1 + 160))
  {
    WebKit::WebExtensionContext::getTab(v9, *(_QWORD *)(a1 + 152), 0, &v18);
    v11 = v18;
    v12 = v19;
    if (v19 != v18)
    {
      if (v18)
        ++*(_DWORD *)v18;
      goto LABEL_11;
    }
LABEL_21:
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    v17 = 0;
    (*(void (**)(_QWORD *, WTF::StringImpl **))(*v8 + 16))(v8, &v20);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    if ((_BYTE)v21)
    {
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    goto LABEL_14;
  }
  v11 = 0;
  v18 = 0;
  v12 = v19;
  if (!v19)
    goto LABEL_21;
LABEL_11:
  v20 = v11;
  WebKit::WebExtensionTab::setParentTab((uint64_t)v6, (uint64_t *)&v20, (uint64_t *)&v17, v10);
  v13 = v20;
  v20 = 0;
  if (v13)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v13);
  v11 = v12;
LABEL_14:
  v14 = v18;
  v18 = 0;
  if (v14)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v14);
  v19 = 0;
  if (v11)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19773C154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v40;

  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v40);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a11)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  if (v37)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v37);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7AC8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7AC8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEN3__5clEONSK_IvSM_EEENUlSU_E_clESU_ENUlSU_E_clESU_ENUlSU_E_clESU_EUlSU_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v9[16];
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[191];
  char v15;
  _BYTE v16[8];
  _QWORD v17[23];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    v17[0] = v3;
    v18 = 1;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v16);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v18 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _QWORD *))off_1E34F79A8[v18])(v14, v17);
  }
  else
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v9);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v14, (uint64_t)v9);
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v17, (uint64_t)v14);
    v18 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v18 != -1)
      ((void (*)(char *, _QWORD *))off_1E34F79A8[v18])(&v15, v17);
    v18 = -1;
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v7);
    if (v13)
    {
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v11)
    {
      result = v10;
      v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19773C4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v36 = *(unsigned int *)(v33 - 48);
  if ((_DWORD)v36 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34F79A8[v36])(v33 - 241, v31);
  *(_DWORD *)(v33 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31, v35);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v37);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v37);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7AF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7AF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  WebKit::WebExtensionTab *v6;
  uint64_t v7;
  uint64_t result;
  WebKit::WebExtensionTab *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _Unwind_Exception *v15;
  _BYTE v16[16];
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  _BYTE v21[191];
  char v22;
  _BYTE v23[8];
  _QWORD v24[22];
  char v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 != 1)
    {
      v15 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v26 != -1)
        ((void (*)(_BYTE *, uint64_t))off_1E34F79A8[v26])(v21, v2);
      _Unwind_Resume(v15);
    }
    v6 = *(WebKit::WebExtensionTab **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v24[0] = v6;
    v26 = 1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v23);
    goto LABEL_6;
  }
  v9 = *(WebKit::WebExtensionTab **)a2;
  if (!*(_QWORD *)a2)
  {
    LOBYTE(v24[0]) = 0;
    v25 = 0;
    v26 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v23);
LABEL_6:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v26 != -1)
      return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E34F79A8[v26])(v21, v24);
    return result;
  }
  ++*(_DWORD *)v9;
  WebKit::WebExtensionTab::parameters(v9, (uint64_t)v16);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v21, (uint64_t)v16);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v24, (uint64_t)v21);
  v26 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v26 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F79A8[v26])(&v22, v24);
  v26 = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v11);
  if (v20)
  {
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (v18)
  {
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7B18;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7B18;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[16];
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  _BYTE v11[191];
  char v12;
  _BYTE v13[8];
  _BYTE v14[184];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v6);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v11, (uint64_t)v6);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v14, (uint64_t)v11);
  v15 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F79A8[v15])(&v12, v14);
  v15 = -1;
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v3);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773CB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v36 = *(unsigned int *)(v33 - 48);
  if ((_DWORD)v36 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34F79A8[v36])(v33 - 241, v31);
  *(_DWORD *)(v33 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31, v35);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v37);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v37);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7B40;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7B40;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[16];
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  _BYTE v11[191];
  char v12;
  _BYTE v13[8];
  _BYTE v14[184];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v6);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v11, (uint64_t)v6);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v14, (uint64_t)v11);
  v15 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F79A8[v15])(&v12, v14);
  v15 = -1;
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v3);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773CE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v36 = *(unsigned int *)(v33 - 48);
  if ((_DWORD)v36 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34F79A8[v36])(v33 - 241, v31);
  *(_DWORD *)(v33 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31, v35);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v37);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v37);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34F7B68;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34F7B68;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebExtensionTab **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;

  v1 = result;
  v14 = 0;
  v15 = 0;
  v2 = *(_DWORD *)(result + 20);
  if (v2)
  {
    if (v2 >= 0x1745D18)
    {
      __break(0xC471u);
      return result;
    }
    v3 = 176 * v2;
    v4 = WTF::fastMalloc((WTF *)(176 * v2));
    v2 = v3 / 0xB0;
    LODWORD(v15) = v3 / 0xB0;
    v14 = v4;
    v5 = *(unsigned int *)(v1 + 20);
    if ((_DWORD)v5)
    {
      v6 = *(WebKit::WebExtensionTab ***)(v1 + 8);
      v7 = 8 * v5;
      do
      {
        WebKit::WebExtensionTab::parameters(*v6, (uint64_t)&v16);
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(&v14, (uint64_t)&v16);
        if (v22)
        {
          v9 = v21;
          v21 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v8);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        if (v20)
        {
          v10 = v19;
          v19 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v8);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      v4 = v14;
      v2 = v15;
    }
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v11 = HIDWORD(v15);
  v14 = 0;
  v15 = 0;
  v17 = v2;
  v18 = v11;
  LODWORD(v19) = 0;
  v12 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F7B80[v19])(&v23, &v16);
  return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v13);
}

void sub_19773D0F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,char a21)
{
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

__n128 WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v4 = *((_DWORD *)a1 + 3);
  v5 = *a1;
  v6 = *a1 + 176 * v4;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v6 + 16), a2 + 16);
  *(_BYTE *)(v6 + 64) = 0;
  v7 = v6 + 64;
  *(_BYTE *)(v7 + 8) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = 1;
  }
  v9 = v5 + 176 * v4;
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 96) = v10;
  result = *(__n128 *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v9 + 154) = *(_OWORD *)(a2 + 154);
  *(_OWORD *)(v9 + 128) = v12;
  *(_OWORD *)(v9 + 144) = v13;
  *(__n128 *)(v9 + 112) = result;
  ++*((_DWORD *)a1 + 3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7BA0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7BA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  NSString *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  NSString *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 8)))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = &off_1E34F7BC8;
    *((_QWORD *)v5 + 1) = v4;
    v13 = v5;
    WebKit::WebExtensionTab::detectWebpageLocale(v3, (uint64_t *)&v13, v6, v7);
    result = v13;
    v13 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.detectLanguage()"), 0, CFSTR("this extension does not have access to this tab"), v2, &v12);
    v9 = v12;
    v12 = 0;
    v13 = v9;
    v14 = 1;
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v14 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F79D8[v14])(&v15, &v13);
    v14 = -1;
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773D424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F79D8[a11])(&a16, &a10);
  a11 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v18);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESI_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISR_EENS_10HashTraitsISR_EENS_15HashTableTraitsEEESX_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSH_IU8__strongP8NSLocaleSI_EEE_vJS19_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7BC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESI_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISR_EENS_10HashTraitsISR_EENS_15HashTableTraitsEEESX_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSH_IU8__strongP8NSLocaleSI_EEE_vJS19_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7BC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESI_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISR_EENS_10HashTraitsISR_EENS_15HashTableTraitsEEESX_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSH_IU8__strongP8NSLocaleSI_EEE_vJS19_EE4callES19_(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int v5;
  WebKit *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _Unwind_Exception *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebKit *v17;
  int v18;
  char v19;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 != 1)
    {
      v13 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v18 != -1)
        ((void (*)(char *, WebKit **))off_1E34F79D8[v18])(&v19, &v17);
      v18 = -1;
      v15 = v16;
      v16 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }

      _Unwind_Resume(v13);
    }
    v6 = *(WebKit **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v17 = v6;
    v18 = 1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v7 + 16))(v7, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v18 != -1)
      ((void (*)(WTF::StringImpl **, WebKit **))off_1E34F79D8[v18])(&v16, &v17);
  }
  else
  {
    WebKit::toWebAPI(*(WebKit **)a2, (NSLocale *)a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v16, v8);
    v9 = v16;
    v16 = 0;
    v17 = v9;
    v18 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v10 + 16))(v10, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v18 != -1)
      ((void (*)(char *, WebKit **))off_1E34F79D8[v18])(&v19, &v17);
    v18 = -1;
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }

  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7BF0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7BF0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  NSString *v2;
  WebKit::WebExtensionTab *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13[5];
  int v14;
  char v15;

  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 8)))
  {
    v3 = *(WebKit::WebExtensionTab **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v5 = *(unsigned __int8 *)(a1 + 16);
    v6 = *(unsigned __int8 *)(a1 + 17);
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = &off_1E34F7C18;
    *(_QWORD *)(v7 + 8) = v4;
    *(_WORD *)(v7 + 16) = v5 | (v6 << 8);
    v13[0] = v7;
    WebKit::WebExtensionTab::captureVisibleWebpage(v3, v13);
    result = (WTF::StringImpl *)v13[0];
    v13[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("either the 'activeTab' permission or granted host permissions for the current website are required"), v2, &v12);
    v9 = v12;
    v12 = 0;
    v13[0] = (uint64_t)v9;
    v14 = 1;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v14 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F79E8[v14])(&v15, v13);
    v14 = -1;
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773D938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F79E8[a15])(v16 - 33, &a10);
  a15 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v18);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISJ_NS_11DefaultHashISJ_EENS_10HashTraitsISJ_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP7UIImageSK_EEE_vJS1A_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7C18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISJ_NS_11DefaultHashISJ_EENS_10HashTraitsISJ_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP7UIImageSK_EEE_vJS1A_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7C18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISJ_NS_11DefaultHashISJ_EENS_10HashTraitsISJ_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP7UIImageSK_EEE_vJS1A_EE4callES1A_(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _Unwind_Exception *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  WTF::StringImpl *v26;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 != 1)
    {
      v16 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v25 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F79E8[v25])(&v19, &v22);

      _Unwind_Resume(v16);
    }
    v6 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v22 = v6;
    v25 = 1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v25 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F79E8[v25])(&v19, &v22);
  }
  else
  {
    v8 = *(id *)a2;
    v9 = v8;
    if (v8 && objc_msgSend(objc_retainAutorelease(v8), "CGImage"))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = v26;
      WebCore::dataURL();
      MEMORY[0x19AEABB0C](&v19, &v18, 0);
      v11 = v19;
      v19 = 0;
      v22 = v11;
      v23 = v20;
      v24 = v21;
      LODWORD(v20) = v20 & 0xFFFFFFFE;
      v25 = 0;
      v12 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v25 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F79E8[v25])(&v26, &v22);
      v25 = -1;
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v13);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      WTF::URL::URL((WTF::URL *)&v22);
      v25 = 0;
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v25 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F79E8[v25])(&v19, &v22);
    }

  }
}

void sub_19773DE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (a21 != -1)
    ((void (*)(char *, char *))off_1E34F79E8[a21])(&a11, &a16);
  JUMPOUT(0x19773DE2CLL);
}

unsigned int *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove(unsigned int *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (uint64_t *)result;
  v4 = *a2;
  *a2 = 0;
  if (v4)
    result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  *a2 = -1;
  ++*(_DWORD *)(*v3 - 16);
  v5 = *v3;
  if (*v3)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7C40;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7C40;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;

  v2 = a1 + 8;
  if (!a2 || !*a2)
    return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(a1 + 8);
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v8);
  if (!v9)
    return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(v2);
  v4 = v8;
  v8 = 0;
  v10 = v4;
  v11 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v11 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E34F79D8[v11])(&v12, &v10);
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19773E0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a17 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34F79D8[a17])(v18 - 17, &a13);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v20);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  char v5;

  v3 = 0;
  v4 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34F79D8[v4])(&v5, &v3);
  return result;
}

void sub_19773E19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F79D8[a12])(v13 - 17, &a10);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7C68;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7C68;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *result;
  void *v6;
  _QWORD *v7;
  char v8;

  v2 = a1 + 8;
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(a1 + 8);
  IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(a2, (uint64_t)&v7);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(v2);
  v4 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::addPorts(v4, *(unsigned __int8 *)(a1 + 24), 0, *(_QWORD *)(a1 + 32), &v7);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v4, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)(a1 + 32));
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v4, 0, *(unsigned __int8 *)(a1 + 24), *(_QWORD *)(a1 + 32));
  result = WebKit::WebExtensionContext::clearQueuedPortMessages(v4, *(_BYTE *)(a1 + 24), *(_QWORD *)(a1 + 32));
  if (v8)
  {
    if (v7)
      return (unsigned __int8 *)WTF::fastFree((WTF *)(v7 - 2), v6);
  }
  return result;
}

void sub_19773E358(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9)
      WTF::fastFree((WTF *)(a9 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  _QWORD *v5;

  v5 = 0;
  v2 = *(_QWORD *)a1;
  WebKit::WebExtensionContext::addPorts(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 16), 0, *(_QWORD *)(a1 + 24), &v5);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(v2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24));
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 0, *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24));
  result = WebKit::WebExtensionContext::clearQueuedPortMessages(v2, *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v5)
    return (unsigned __int8 *)WTF::fastFree((WTF *)(v5 - 2), v4);
  return result;
}

void sub_19773E404(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WebKit::toWebExtensionError<unsigned long long>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v6;
  uint64_t v7;

  WebKit::toErrorString(a1, a2, a3, a4, *a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v7, v6);
  *a5 = v7;
  v7 = 0;

}

void sub_19773E474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7C90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7C90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19773E544(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(uint64_t result, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;

  v2 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    if (*(_QWORD *)(result + 8))
    {
      v3 = (WTF::StringImpl **)(result + 16);
      LOBYTE(v7) = 0;
      v8 = 0;
      if (*(_BYTE *)(result + 24))
      {
        v4 = *v3;
        if (*v3)
          *(_DWORD *)v4 += 2;
        v7 = v4;
        v8 = 1;
      }
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()((uint64_t *)(result + 8), (uint64_t)&v7);
      if (v8 && v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v2 + 16, a2);
    v6 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::fastFree(v2, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_19773E648(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v11, a2);
  v13 = *v10;
  *v10 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v7 = v3;
    v8 = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    v8 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v7);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19773E73C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;

  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34F7CB8;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7CB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::call(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;

  if (*((_BYTE *)a2 + 8))
  {
    v2 = result[1];
    v3 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
    {
      *(_DWORD *)v3 += 2;
      v4 = *(_QWORD *)(v2 + 8);
      result = (uint64_t *)(v2 + 8);
      if (!v4)
      {
        if (*(_DWORD *)v3 == 2)
          return (uint64_t *)WTF::StringImpl::destroy(v3, a2);
        *(_DWORD *)v3 -= 2;
        return result;
      }
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8);
      result = (uint64_t *)(v2 + 8);
      if (!v6)
        return result;
    }
    v7 = v3;
    v8 = 1;
    result = (uint64_t *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()(result, (uint64_t)&v7);
    if (v8)
    {
      result = (uint64_t *)v7;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          return (uint64_t *)WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  return result;
}

void sub_19773E8AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F7CE0;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F7CE0;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  NSString *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  NSString *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  CFTypeRef *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  void *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  char v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  char v61;

  v2 = *(_QWORD *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 24)))
  {
    WebKit::WebExtensionTab::mainWebView(*(WebKit::WebExtensionTab **)(a1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.executeScript()"), 0, CFSTR("could not execute script in tab"), v4, &v50);
      v14 = v50;
      v50 = 0;
      v58 = v14;
      v60 = 1;
      v15 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v58);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v60 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F7A08[v60])(&v55, &v58);
      v60 = -1;
      v17 = v50;
      v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      goto LABEL_78;
    }
    LOBYTE(v58) = 0;
    v61 = 0;
    if (*(_BYTE *)(a1 + 120))
    {
      WTF::URL::URL((WTF::URL *)&v55);
      v7 = *(WTF::StringImpl **)(a1 + 112);
      if (v7)
        *(_DWORD *)v7 += 2;
      v8 = v55;
      v55 = 0;
      v50 = v7;
      v51 = v8;
      v52 = v56;
      v53 = v57;
      LODWORD(v56) = v56 & 0xFFFFFFFE;
      if (v61)
      {
        v50 = 0;
        v9 = v58;
        v58 = v7;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v6);
          else
            *(_DWORD *)v9 -= 2;
        }
        WTF::URL::operator=((uint64_t)&v59, (WTF::StringImpl *)&v51);
      }
      else
      {
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v58, (uint64_t *)&v50);
        v61 = 1;
      }
      v26 = v51;
      v51 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v50;
      v50 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v55;
      v55 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      goto LABEL_70;
    }
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(_DWORD *)(a1 + 76))
      {
        if (**(_QWORD **)(a1 + 64))
          v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v18 = &stru_1E351F1B8;
        v19 = v18;
        MEMORY[0x19AEABCC8](&v49, v19);
        v20 = *(_QWORD *)(v2 + 56);
        if (v20)
          CFRetain(*(CFTypeRef *)(v20 + 8));
        v48 = v20;
        WebKit::WebExtensionDynamicScripts::sourcePairForResource(&v49, &v48, (uint64_t)&v50);
        if (v61 == v54)
        {
          if (v61)
          {
            v22 = v50;
            v50 = 0;
            v23 = v58;
            v58 = v22;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v21);
              else
                *(_DWORD *)v23 -= 2;
            }
            WTF::URL::operator=((uint64_t)&v59, (WTF::StringImpl *)&v51);
          }
          goto LABEL_62;
        }
        if (v61)
        {
          v25 = v59;
          v59 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v21);
            else
              *(_DWORD *)v25 -= 2;
          }
          v30 = v58;
          v58 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 != 2)
            {
              v29 = 0;
              *(_DWORD *)v30 -= 2;
              goto LABEL_61;
            }
            WTF::StringImpl::destroy(v30, v21);
          }
          v29 = 0;
          goto LABEL_61;
        }
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v58, (uint64_t *)&v50);
        v29 = 1;
LABEL_61:
        v61 = v29;
LABEL_62:
        std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v21);
        v33 = v48;
        v48 = 0;
        if (v33)
          CFRelease(*(CFTypeRef *)(v33 + 8));
        v34 = v49;
        v49 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v31);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (!v61)
        {
          WebKit::toErrorString((WebKit *)CFSTR("tabs.executeScript()"), 0, CFSTR("Invalid resource: %@"), v32, v19);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x19AEABCC8](&v55, v44);
          v45 = v55;
          v55 = 0;

          v50 = v45;
          LODWORD(v52) = 1;
          v46 = *(_QWORD *)(a1 + 168);
          *(_QWORD *)(a1 + 168) = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v46 + 16))(v46, &v50);
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          if ((_DWORD)v52 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F7A08[v52])(&v55, &v50);

          goto LABEL_77;
        }

LABEL_70:
        v35 = *(CFTypeRef **)(v2 + 56);
        if (v35)
          CFRetain(v35[1]);
        v55 = (WTF::StringImpl *)v35;
        WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, (uint64_t *)&v55, (uint64_t)&v50);
        v36 = v55;
        v55 = 0;
        if (v36)
          CFRelease(*((CFTypeRef *)v36 + 1));
        v37 = *(_QWORD *)(v2 + 136);
        v38 = *(_DWORD **)(a1 + 24);
        v39 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = 0;
        v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v40 = &off_1E34F7D08;
        v40[1] = v39;
        v47 = v40;
        WebKit::WebExtensionDynamicScripts::executeScript((uint64_t *)&v50, v5, v37, v38, a1 + 32, v2, (uint64_t *)&v47);
        v42 = (uint64_t)v47;
        v47 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v41);
LABEL_77:
        std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v43);
LABEL_78:

        return;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    __break(0xC471u);
    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.executeScript()"), 0, CFSTR("this extension does not have access to this tab"), v3, &v50);
  v10 = v50;
  v50 = 0;
  v58 = v10;
  v60 = 1;
  v11 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v60 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F7A08[v60])(&v55, &v58);
  v60 = -1;
  v13 = v50;
  v50 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
}

void sub_19773EF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21)
{
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF::StringImpl *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34F7A08[a16])(&a21, &a14);

  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](v24 - 120, v26);
  _Unwind_Resume(a1);
}

void sub_19773F108(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v24 = *(unsigned int *)(v22 - 104);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7A08[v24])(&a21, v22 - 120);
  *(_DWORD *)(v22 - 104) = -1;
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v23);
    else
      *(_DWORD *)a14 -= 2;
  }
  JUMPOUT(0x19773F100);
}

_QWORD *std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  WTF::URL::URL((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

void sub_19773F1A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;

  v3 = v2;
  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISZ_EENS_10HashTraitsISZ_EENS_15HashTableTraitsEEES15_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSP_E_vJS1D_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F7D08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISZ_EENS_10HashTraitsISZ_EENS_15HashTableTraitsEEES15_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSP_E_vJS1D_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F7D08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISZ_EENS_10HashTraitsISZ_EENS_15HashTableTraitsEEES15_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSP_E_vJS1D_EE4callES1D_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v5[0] = *a2;
  v2 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5[1] = v2;
  v6 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34F7A08[v6])(&v7, v5);
  return result;
}

void sub_19773F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F7A08[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F7D30;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F7D30;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  NSString *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char v26;

  v2 = *(_QWORD *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(URL **)(a1 + 24)))
  {
    WebKit::WebExtensionTab::mainWebView(*(WebKit::WebExtensionTab **)(a1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = *(unsigned __int8 *)(a1 + 104);
      v7 = *(_QWORD *)(v2 + 56);
      if (v7)
        CFRetain(*(CFTypeRef *)(v7 + 8));
      v24 = v7;
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, &v24, (uint64_t)&v25);
      v8 = v24;
      v24 = 0;
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 + 8));
      WebKit::WebExtensionDynamicScripts::injectStyleSheets((uint64_t *)&v25, v5, *(_QWORD *)(v2 + 136), *(unsigned __int8 *)(a1 + 161), v6 != 0, v2);
      LOBYTE(v22) = 0;
      v23 = 0;
      v9 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v23)
      {
        v11 = v22;
        v22 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v10);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.insertCSS()"), 0, CFSTR("could not inject stylesheet on this tab"), v4, &v22);
      v16 = v22;
      v22 = 0;
      v25 = v16;
      v26 = 1;
      v17 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (v26)
      {
        v19 = v25;
        v25 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
    }

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.insertCSS()"), 0, CFSTR("this extension does not have access to this tab"), v3, &v22);
    v12 = v22;
    v22 = 0;
    v25 = v12;
    v26 = 1;
    v13 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v26)
    {
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

void sub_19773F600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v17);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_19773F6EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v15);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  JUMPOUT(0x19773F6E4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = off_1E34F7D58;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34F7D58;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 88, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 40, v3);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v4);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v2, 34, 0, (uint64_t *)&v18);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v18);
    v6 = v5;
    v7 = v3;
    v8 = v18 ? &v18[*((unsigned int *)v18 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = a1 + 24;
      do
      {
        v10 = *v6;
        v11 = *(_QWORD *)(v2 + 32);
        v12 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v12 = 1583;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)(v12 + 528) = v12 + 16;
        *(_QWORD *)(v12 + 536) = v12 + 16;
        *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v12 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
        v21 = (IPC::Encoder *)v12;
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v12, v9);
        LOBYTE(v19) = 0;
        v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          v13 = v19;
          v19 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v18;
  if (v18)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v18, v3);
  return result;
}

void sub_19773F970(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = off_1E34F7D80;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 33), a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 27), v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11), v4);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F7D80;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 264, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 216, v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 88, v4);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 40, v5);
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(a1, v6);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t *result;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  IPC::Encoder *v22;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v2, 40, 0, (uint64_t *)&v19);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v19);
    v6 = v5;
    v7 = v3;
    v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = a1 + 24;
      v10 = a1 + 200;
      do
      {
        v11 = *v6;
        v12 = *(_QWORD *)(v2 + 32);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1589;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v22 = (IPC::Encoder *)v13;
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v13, v9);
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v13, v10);
        LOBYTE(v20) = 0;
        v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          v14 = v20;
          v20 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v15 = v22;
        v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v19;
  if (v19)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  return result;
}

void sub_19773FC24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7DA8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7DA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t *result;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  IPC::Encoder *v22;

  v2 = a1[1];
  WebKit::WebExtensionContext::processes((char *)v2, 39, 0, (uint64_t *)&v19);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v19);
    v6 = v5;
    v7 = v3;
    v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = a1 + 3;
      v10 = a1 + 4;
      do
      {
        v11 = *v6;
        v12 = *(_QWORD *)(v2 + 32);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1588;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v22 = (IPC::Encoder *)v13;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, v9);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, v10);
        LOBYTE(v20) = 0;
        v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          v14 = v20;
          v20 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v15 = v22;
        v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v19;
  if (v19)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  return result;
}

void sub_19773FE98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7DD0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7DD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *result;
  uint64_t *v20;
  _QWORD v21[3];
  uint64_t v22;
  char v23;
  IPC::Encoder *v24;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  WebKit::WebExtensionContext::processes((char *)v2, 35, 0, (uint64_t *)&v20);
  v5 = *(_QWORD *)(v2 + 64);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v7 = v6;
    v8 = v4;
    v9 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v9 != v6)
    {
      v10 = a1 + 24;
      v11 = a1 + 32;
      do
      {
        v12 = *v7;
        v21[0] = v10;
        v21[1] = v11;
        v21[2] = v3;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1584;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v24 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,0ul,1ul,2ul>((IPC::Encoder *)v14, (uint64_t)v21);
        LOBYTE(v22) = 0;
        v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          v15 = v22;
          v22 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_17;
        }
        v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  result = v20;
  if (v20)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v4);
  return result;
}

void sub_19774010C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a11, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7DF8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7DF8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,unsigned long)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  IPC::Encoder *v24;

  v2 = a1[1];
  v3 = a1[6];
  v20 = a1[5];
  WebKit::WebExtensionContext::processes((char *)v2, 37, 0, (uint64_t *)&v21);
  v5 = *(_QWORD *)(v2 + 64);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v21);
    v7 = v6;
    v8 = v4;
    v9 = v21 ? &v21[*((unsigned int *)v21 - 1)] : 0;
    if (v9 != v6)
    {
      v10 = a1 + 3;
      v11 = a1 + 4;
      do
      {
        v12 = *v7;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1586;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v24 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v10);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v11);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v20;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v3;
        LOBYTE(v22) = 0;
        v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          v15 = v22;
          v22 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_17;
        }
        v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  result = v21;
  if (v21)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v21, v4);
  return result;
}

void sub_197740400(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7E20;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7E20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *result;
  uint64_t *v20;
  _QWORD v21[3];
  uint64_t v22;
  char v23;
  IPC::Encoder *v24;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  WebKit::WebExtensionContext::processes((char *)v2, 33, 0, (uint64_t *)&v20);
  v5 = *(_QWORD *)(v2 + 64);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v7 = v6;
    v8 = v4;
    v9 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v9 != v6)
    {
      v10 = a1 + 24;
      v11 = a1 + 32;
      do
      {
        v12 = *v7;
        v21[0] = v10;
        v21[1] = v11;
        v21[2] = v3;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1582;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v24 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned long>,0ul,1ul,2ul>((IPC::Encoder *)v14, (uint64_t)v21);
        LOBYTE(v22) = 0;
        v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          v15 = v22;
          v22 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_17;
        }
        v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  result = v20;
  if (v20)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v4);
  return result;
}

void sub_197740674(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a11, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7E48;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7E48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *result;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = a1[1];
  WebKit::WebExtensionContext::processes((char *)v2, 32, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = a1 + 3;
      v10 = a1 + 4;
      v11 = a1 + 5;
      do
      {
        v12 = *v6;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1581;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v23 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v9);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v10);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, v11);
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v15 = v21;
          v21 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v23;
        v23 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  return result;
}

void sub_1977408F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34F7E70;
  v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7E70;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t *result;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  IPC::Encoder *v22;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v2, 36, 0, (uint64_t *)&v19);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v19);
    v6 = v5;
    v7 = v3;
    v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      v9 = a1 + 24;
      v10 = (uint64_t *)(a1 + 40);
      do
      {
        v11 = *v6;
        v12 = *(_QWORD *)(v2 + 32);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1585;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v22 = (IPC::Encoder *)v13;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v13, v9);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, v10);
        LOBYTE(v20) = 0;
        v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          v14 = v20;
          v20 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v15 = v22;
        v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_17;
        }
        v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v19;
  if (v19)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  return result;
}

void sub_197740B94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F7E98;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F7E98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t *result;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v2 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v2, 38, 0, (uint64_t *)&v17);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v17);
    v6 = v5;
    v7 = v3;
    v8 = v17 ? &v17[*((unsigned int *)v17 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1587;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v20 = (IPC::Encoder *)v11;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, (uint64_t *)(a1 + 24));
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, (uint64_t *)(a1 + 32));
        LOBYTE(v10) = *(_BYTE *)(a1 + 40);
        *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = v10;
        LOBYTE(v18) = 0;
        v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v20, 0, (uint64_t)&v18, 1);
        if (v19)
        {
          v12 = v18;
          v18 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v13 = v20;
        v20 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v17;
  if (v17)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v17, v3);
  return result;
}

void sub_197740E20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isWebNavigationMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)this + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  MEMORY[0x19AEABCC8](&v7, CFSTR("webNavigation"));
  v4 = (WebKit::WebExtensionContext::permissionState((uint64_t)this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_197740F18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(WebKit::WebExtensionContext *a1, void *a2, _WKFrameTreeNode *a3, URL *a4, uint64_t a5)
{
  _WKFrameTreeNode *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[8];
  WTF::StringImpl *v26;
  char v27;
  __int128 v28;
  char v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  WebKit::frameParametersForFrame((WebKit *)v25, v9, a3, a4, a1, 1);
  v10 = *(_DWORD *)(a5 + 12);
  if (v10 == *(_DWORD *)(a5 + 8))
  {
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>(a5, (unint64_t)v25);
  }
  else
  {
    v12 = *(_QWORD *)a5;
    v13 = (_BYTE *)(*(_QWORD *)a5 + 80 * v10);
    *v13 = v25[0];
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v13 + 8, (uint64_t)&v26);
    v14 = v12 + 80 * v10;
    v15 = v28;
    *(_BYTE *)(v14 + 72) = v29;
    *(_OWORD *)(v14 + 56) = v15;
    ++*(_DWORD *)(a5 + 12);
  }
  if (v27)
  {
    v16 = v26;
    v26 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[_WKFrameTreeNode childFrames](v9, "childFrames", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(v17);
        WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(a1, *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i), v9, a4, a5);
      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v18);
  }

}

void sub_197741118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void WebKit::frameParametersForFrame(WebKit *this, _WKFrameTreeNode *a2, _WKFrameTreeNode *a3, URL *a4, WebKit::WebExtensionContext *a5, int a6)
{
  _WKFrameTreeNode *v11;
  _WKFrameTreeNode *v12;
  void *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;
  int v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  void *v24;
  StringImpl *m_ptr;
  void *v26;
  _WKFrameTreeNode *v27;
  URL v28;

  v11 = a2;
  v12 = a3;
  v27 = v11;
  -[_WKFrameTreeNode info](v11, "info");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "request");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "URL");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  *(_BYTE *)this = objc_msgSend(v13, "_errorOccurred");
  MEMORY[0x19AEABB18](&v28, v15);
  v17 = WebKit::WebExtensionContext::permissionState((uint64_t)a5, &v28, a4, 3) & 0xFFFFFFFE;
  if (v17 == 2)
  {
    v18 = v15;
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 48) = 0;
    MEMORY[0x19AEABB18]((char *)this + 8, v18);
    *((_BYTE *)this + 48) = 1;
  }
  else
  {
    v18 = 0;
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 48) = 0;
  }
  v26 = v18;
  if (v12)
  {
    -[_WKFrameTreeNode info](v12, "info");
    a4 = (URL *)(id)objc_claimAutoreleasedReturnValue();
    if ((-[URL isMainFrame](a4, "isMainFrame") & 1) != 0)
    {
      v19 = -2;
    }
    else
    {
      -[URL _handle](a4, "_handle");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v20, "frameID");

      if ((unint64_t)(v19 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        v19 = -3;
    }

  }
  else
  {
    v19 = -3;
  }
  *((_QWORD *)this + 7) = v19;
  if (a6)
  {
    v21 = v13;
    if ((objc_msgSend(v21, "isMainFrame") & 1) != 0)
    {
      v22 = -2;
    }
    else
    {
      objc_msgSend(v21, "_handle");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v24, "frameID");

      if ((unint64_t)(v22 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        v22 = -3;
    }

    *((_QWORD *)this + 8) = v22;
    v23 = 1;
  }
  else
  {
    v23 = 0;
    *((_BYTE *)this + 64) = 0;
  }
  *((_BYTE *)this + 72) = v23;
  if (v12)

  if (v17 == 2)
  m_ptr = v28.m_string.m_impl.m_ptr;
  v28.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v16);
    else
      *(_DWORD *)m_ptr -= 2;
  }

}

void sub_19774139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, WTF::StringImpl *a12)
{
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (v12)
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v16, v21);
  if (v15 == 2)

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v22);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_197741460()
{
  void *v0;

  JUMPOUT(0x197741448);
}

void sub_19774146C()
{
  JUMPOUT(0x197741448);
}

void sub_197741474()
{
  JUMPOUT(0x19774144CLL);
}

void WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree(uint64_t a1, WebKit::WebExtensionContext *a2, void *a3, void *a4, URL *a5, uint64_t a6)
{
  _WKFrameTreeNode *v11;
  _WKFrameTreeNode *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;
  __int128 v30;
  char v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  -[_WKFrameTreeNode info](v11, "info");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "isMainFrame") & 1) != 0)
  {
    v14 = -2;
  }
  else
  {
    objc_msgSend(v13, "_handle");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "frameID");

    if ((unint64_t)(v16 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v14 = -3;
    else
      v14 = v16;
  }

  if (v14 == a6)
  {
    WebKit::frameParametersForFrame((WebKit *)v27, v11, v12, a5, a2, 0);
    *(_BYTE *)a1 = v27[0];
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 8), (uint64_t)&v28);
    *(_OWORD *)(a1 + 56) = v30;
    *(_BYTE *)(a1 + 72) = v31;
    *(_BYTE *)(a1 + 80) = 1;
    if (v29)
    {
      v18 = v28;
      v28 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    -[_WKFrameTreeNode childFrames](v11, "childFrames", 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    if (v20)
    {
      v21 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v24 != v21)
            objc_enumerationMutation(v19);
          WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree(a1, a2, *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i), v11, a5, a6);
          if (*(_BYTE *)(a1 + 80))
          {

            goto LABEL_22;
          }
        }
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
        if (v20)
          continue;
        break;
      }
    }

    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
  }
LABEL_22:

}

void sub_1977416AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::webNavigationGetFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSString *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  WebKit::WebExtensionTab *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit::WebExtensionTab *result;
  WTF::StringImpl *v24;
  WebKit::WebExtensionTab *v25;
  char v26;
  _BYTE v27[8];
  _QWORD v28[11];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v25);
  if (v25)
  {
    WebKit::WebExtensionTab::mainWebView(v25);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v10 = *a4;
      *a4 = 0;
      v11 = v25;
      if (v25)
        ++*(_DWORD *)v25;
      v12 = malloc_type_malloc(0x48uLL, 0x10E0040808C7769uLL);
      *v12 = MEMORY[0x1E0C809A0];
      v12[1] = 50331650;
      v12[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
      v12[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::descriptor;
      v12[4] = a1;
      v12[5] = a1;
      v12[6] = v10;
      v12[7] = v11;
      v12[8] = a3;
      v13 = _Block_copy(v12);

      v14 = _Block_copy(v13);
      objc_msgSend(v9, "_frames:", v14);

    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getFrame()"), 0, CFSTR("tab not found"), v8, &v24);
      v19 = v24;
      v24 = 0;
      v28[0] = v19;
      v29 = 1;
      v20 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (v29 != -1)
        ((void (*)(char *, _QWORD *))off_1E34F7EB0[v29])(&v26, v28);
      v29 = -1;
      v22 = v24;
      v24 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getFrame()"), 0, CFSTR("tab not found"), v7, &v24);
    v15 = v24;
    v24 = 0;
    v28[0] = v15;
    v29 = 1;
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 16))(v16, v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v29 != -1)
      ((void (*)(char *, _QWORD *))off_1E34F7EB0[v29])(&v26, v28);
    v29 = -1;
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  result = v25;
  v25 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_1977419EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v32;

  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (a28 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7EB0[a28])(&a15, v29);
  a28 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v32);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (a11)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::webNavigationGetAllFrames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSString *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  WebKit::WebExtensionTab *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebKit::WebExtensionTab *result;
  WTF::StringImpl *v22;
  _QWORD v23[2];
  int v24;
  WebKit::WebExtensionTab *v25;
  char v26;

  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v25);
  if (v25)
  {
    WebKit::WebExtensionTab::mainWebView(v25);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v8 = *a3;
      *a3 = 0;
      v9 = v25;
      if (v25)
        ++*(_DWORD *)v25;
      v10 = malloc_type_malloc(0x40uLL, 0x10E0040F511A675uLL);
      *v10 = MEMORY[0x1E0C809A0];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
      v10[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::descriptor;
      v10[4] = a1;
      v10[5] = a1;
      v10[6] = v8;
      v10[7] = v9;
      v11 = _Block_copy(v10);

      v12 = _Block_copy(v11);
      objc_msgSend(v7, "_frames:", v12);

    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getAllFrames()"), 0, CFSTR("tab not found"), v6, &v22);
      v17 = v22;
      v22 = 0;
      v23[0] = v17;
      v24 = 1;
      v18 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 16))(v18, v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (v24 != -1)
        ((void (*)(char *, _QWORD *))off_1E34F7EE0[v24])(&v26, v23);
      v24 = -1;
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getAllFrames()"), 0, CFSTR("tab not found"), v5, &v22);
    v13 = v22;
    v22 = 0;
    v23[0] = v13;
    v24 = 1;
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v24 != -1)
      ((void (*)(char *, _QWORD *))off_1E34F7EE0[v24])(&v26, v23);
    v24 = -1;
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  result = v25;
  v25 = 0;
  if (result)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  return result;
}

void sub_197741D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  uint64_t v18;
  WTF::StringImpl *v20;
  uint64_t v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34F7EE0[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v20);
    else
      *(_DWORD *)a9 -= 2;
  }

  v21 = a13;
  a13 = 0;
  if (v21)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v21);
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  WebKit::WebExtensionContext *v4;
  void *v5;
  char v6;
  NSString *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  NSString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  char v23;
  uint8_t buf[8];
  _QWORD v25[11];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(WebKit::WebExtensionContext **)(a1 + 32);
  objc_msgSend(v3, "info");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isMainFrame");

  if ((v6 & 1) != 0)
  {
    WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree((uint64_t)&v19, v4, v3, 0, *(URL **)(a1 + 56), *(_QWORD *)(a1 + 64));
    if (v22)
    {
      std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)v25, (uint64_t)&v19);
      v26 = 0;
      v8 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v26 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F7EB0[v26])(&v18, v25);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getFrame()"), 0, CFSTR("frame not found"), v7, &v18);
      v15 = v18;
      v18 = 0;
      v25[0] = v15;
      v26 = 1;
      v16 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      if (v26 != -1)
        ((void (*)(char *, _QWORD *))off_1E34F7EB0[v26])(&v23, v25);
      v26 = -1;
      v17 = v18;
      v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    if (v22)
    {
      if (v21)
      {
        v14 = v20;
        v20 = 0;
        if (v14)
        {
LABEL_20:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v9);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  else
  {
    v10 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_INFO, "Skipping frame traversal because the mainFrame is nil", buf, 2u);
    }
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getFrame()"), 0, CFSTR("main frame not found"), v11, &v19);
    v12 = v19;
    v19 = 0;
    v25[0] = v12;
    v26 = 1;
    v13 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v26 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F7EB0[v26])(&v18, v25);
    v26 = -1;
    v14 = v19;
    v19 = 0;
    if (v14)
      goto LABEL_20;
  }

}

void sub_19774221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  void *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (a39 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7EB0[a39])(&a26, v40);
  a39 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v43);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a21 && a17 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v43);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  WebKit::WebExtensionContext *v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  NSString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint8_t buf[8];
  uint64_t v19;
  int v20;
  char v21;

  v3 = a2;
  v4 = *(WebKit::WebExtensionContext **)(a1 + 32);
  objc_msgSend(v3, "info");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isMainFrame");

  if ((v6 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(v4, v3, 0, *(URL **)(a1 + 56), (uint64_t)&v16);
    *(_QWORD *)buf = v16;
    v7 = v17;
    v16 = 0;
    v17 = 0;
    v19 = v7;
    v20 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v20 != -1)
      ((void (*)(char *, uint8_t *))off_1E34F7EE0[v20])(&v21, buf);
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v9);
  }
  else
  {
    v10 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_INFO, "Skipping frame traversal because the mainFrame is nil", buf, 2u);
    }
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("webNavigation.getAllFrames()"), 0, CFSTR("main frame not found"), v11, &v16);
    v12 = v16;
    v16 = 0;
    *(_QWORD *)buf = v12;
    v20 = 1;
    v13 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v20 != -1)
      ((void (*)(char *, uint8_t *))off_1E34F7EE0[v20])(&v21, buf);
    v20 = -1;
    v15 = v16;
    v16 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }

}

void sub_1977425B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a13 != -1)
    ((void (*)(char *, char *))off_1E34F7EE0[a13])(&a18, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v21);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::windowsCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSString *v6;
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  id WeakRetained;
  void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  _BYTE v53[8];
  _QWORD v54[13];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebExtensionContext::canOpenNewWindow((WebKit::WebExtensionContext *)a1) & 1) != 0)
  {
    v7 = -[_WKWebExtensionWindowCreationOptions _init]([_WKWebExtensionWindowCreationOptions alloc], "_init");
    v8 = v7;
    if (*(_BYTE *)(a2 + 19))
      v9 = *(_BYTE *)(a2 + 18) == 1;
    else
      v9 = 0;
    v10 = v9;
    objc_msgSend(v7, "_setDesiredWindowType:", v10);
    if (*(_BYTE *)(a2 + 17))
      v11 = *(_BYTE *)(a2 + 16) - 1;
    else
      v11 = -1;
    if (v11 < 3u)
      v12 = v11 + 1;
    else
      v12 = 0;
    objc_msgSend(v8, "_setDesiredWindowState:", v12);
    if (*(_BYTE *)(a2 + 89))
      v13 = *(_BYTE *)(a2 + 88) == 0;
    else
      v13 = 0;
    v14 = !v13;
    objc_msgSend(v8, "_setShouldFocus:", v14);
    if (*(_BYTE *)(a2 + 91))
      v15 = *(_BYTE *)(a2 + 90) == 0;
    else
      v15 = 1;
    v16 = !v15;
    objc_msgSend(v8, "_setSouldUsePrivateBrowsing:", v16);
    if (*(_BYTE *)(a2 + 80))
      objc_msgSend(v8, "_setDesiredFrame:", *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
    else
      objc_msgSend(v8, "_setDesiredFrame:", NAN, NAN, NAN, NAN);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a2 + 40))
    {
      v23 = *(_DWORD *)(a2 + 36);
      if (v23)
      {
        v24 = 176 * v23;
        v25 = *(_QWORD *)(a2 + 24);
        do
        {
          if (*(_BYTE *)(v25 + 8))
          {
            WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(_QWORD *)v25, 0, &v51);
            v26 = v51;
            if (v51)
            {
              WeakRetained = objc_loadWeakRetained((id *)v51 + 4);
              objc_msgSend(v22, "addObject:", WeakRetained);

            }
            else
            {
              if (!*(_BYTE *)(v25 + 8))
              {
                std::__throw_bad_optional_access[abi:sn180100]();
                __break(1u);
                return;
              }
              v49 = *(_QWORD *)v25;
              WebKit::toWebExtensionError<unsigned long long>((WebKit *)CFSTR("windows.create()"), 0, CFSTR("tab '%llu' was not found"), (NSString *)&v49, &v50);
              v29 = v50;
              v50 = 0;
              v54[0] = v29;
              v55 = 1;
              v30 = *a3;
              *a3 = 0;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v30 + 16))(v30, v53);
              (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              if (v55 != -1)
                ((void (*)(char *, _QWORD *))off_1E34F7F10[v55])(&v52, v54);
              v55 = -1;
              v32 = v50;
              v50 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v31);
                else
                  *(_DWORD *)v32 -= 2;
              }
            }
            v33 = v51;
            v51 = 0;
            if (v33)
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v33);
            if (!v26)
              goto LABEL_65;
          }
          else if (*(_BYTE *)(v25 + 56))
          {
            WTF::URL::operator NSURL *();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "addObject:", v28);

          }
          v25 += 176;
          v24 -= 176;
        }
        while (v24);
      }
    }
    v34 = (void *)objc_msgSend(v21, "copy");
    objc_msgSend(v8, "_setDesiredURLs:", v34);

    v35 = (void *)objc_msgSend(v22, "copy");
    objc_msgSend(v8, "_setDesiredTabs:", v35);

    v36 = *(_QWORD *)(a1 + 64);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 8);
      if (v37)
        v38 = (id *)(v37 - 16);
      else
        v38 = 0;
    }
    else
    {
      v38 = 0;
    }
    WebKit::WebExtensionController::delegate(v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = *(_QWORD *)(a1 + 64);
    if (v40)
    {
      v41 = *(_QWORD *)(v40 + 8);
      if (v41)
        v42 = (id *)(v41 - 16);
      else
        v42 = 0;
    }
    else
    {
      v42 = 0;
    }
    WebKit::WebExtension::wrapper(v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::wrapper((id *)a1);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v45 = *a3;
    *a3 = 0;
    v46 = malloc_type_malloc(0x38uLL, 0x10E0040CBD43D72uLL);
    *v46 = MEMORY[0x1E0C809A0];
    v46[1] = 50331650;
    v46[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21_WKWebExtensionWindow},NSError)#1}::__invoke;
    v46[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::descriptor;
    v46[4] = a1;
    v46[5] = a1;
    v46[6] = v45;
    v47 = _Block_copy(v46);

    v48 = _Block_copy(v47);
    objc_msgSend(v39, "webExtensionController:openNewWindowWithOptions:forExtensionContext:completionHandler:", v43, v8, v44, v48);

LABEL_65:
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.create()"), 0, CFSTR("it is not implemented"), v6, &v51);
    v17 = v51;
    v51 = 0;
    v54[0] = v17;
    v55 = 1;
    v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v55 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F7F10[v55])(&v50, v54);
    v55 = -1;
    v20 = v51;
    v51 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

void sub_197742B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

WebKit::WebExtensionWindow *WebKit::WebExtensionContext::windowsGet(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, int a5, uint64_t *a6)
{
  NSString *v10;
  NSString *v11;
  void *v12;
  WebKit::WebExtensionTab **v13;
  uint64_t v14;
  WebKit::WebExtensionTab *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit::WebExtensionWindow *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  URL *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebKit::WebExtensionWindow *result;
  URL *v30;
  WebKit::WebExtensionTab **v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WebKit::WebExtensionWindow *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getWindow(a1, a3, 0, 0, 0, (uint64_t *)&v35);
  if (v35)
  {
    if ((WebKit::WebExtensionWindow::matches(v35, a4) & 1) != 0)
    {
      v33 = 0;
      v34 = 0;
      if (a5)
      {
        WebKit::WebExtensionWindow::tabs((uint64_t)v35, 0, (uint64_t *)&v31);
        if (v32)
        {
          v13 = v31;
          v14 = 8 * v32;
          do
          {
            v15 = *v13;
            *(_DWORD *)v15 = *(_DWORD *)*v13 + 1;
            WebKit::WebExtensionTab::url(v15, (uint64_t)&v36);
            if (HIDWORD(v34) == (_DWORD)v34)
            {
              WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v33, (unint64_t)&v36);
            }
            else
            {
              WTF::URL::URL((uint64_t)v33 + 40 * HIDWORD(v34), (uint64_t *)&v36);
              ++HIDWORD(v34);
            }
            v17 = v36;
            v36 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v12);
      }
      v30 = 0;
      v18 = v35;
      if (v35)
        ++*(_DWORD *)v35;
      v19 = *a6;
      *a6 = 0;
      v20 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v20 = &off_1E34F7F60;
      *(_QWORD *)(v20 + 8) = v18;
      *(_BYTE *)(v20 + 16) = a5;
      *(_QWORD *)(v20 + 24) = v19;
      v36 = (WTF::StringImpl *)v20;
      WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)&v33, &v30, (uint64_t *)&v36, 1, 1);
      v22 = v36;
      v36 = 0;
      if (v22)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      v23 = v30;
      v30 = 0;
      if (v23)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v23);
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v21);
      goto LABEL_30;
    }
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.get()"), 0, CFSTR("window does not match requested 'windowTypes'"), v11, &v33);
    v26 = v33;
    v33 = 0;
    v37 = v26;
    v38 = 1;
    v25 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v36);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.get()"), 0, CFSTR("window not found"), v10, &v33);
    v24 = v33;
    v33 = 0;
    v37 = v24;
    v38 = 1;
    v25 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v36);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v38 != -1)
    ((void (*)(WebKit::WebExtensionTab ***, WTF::StringImpl **))off_1E34F7F40[v38])(&v31, &v37);
  v38 = -1;
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
LABEL_30:
  result = v35;
  v35 = 0;
  if (result)
    return (WebKit::WebExtensionWindow *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  return result;
}

void sub_197743044(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t v30;

  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  v30 = a15;
  a15 = 0;
  if (v30)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionWindow *WebKit::WebExtensionContext::windowsGetLastFocused(uint64_t a1, unsigned __int8 a2, int a3, NSString *a4)
{
  NSString *v8;
  void *v9;
  WebKit::WebExtensionTab **v10;
  uint64_t v11;
  WebKit::WebExtensionTab *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit::WebExtensionWindow *v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  URL *v20;
  WTF::StringImpl *v21;
  NSString v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit::WebExtensionWindow *result;
  URL *v27;
  WebKit::WebExtensionTab **v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebKit::WebExtensionWindow *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 508))
  {
    v32 = 0;
    goto LABEL_24;
  }
  WebKit::WebExtensionContext::getWindow(a1, **(_QWORD **)(a1 + 496), 0, 0, 0, (uint64_t *)&v32);
  if (!v32)
  {
LABEL_24:
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.getLastFocused()"), 0, CFSTR("window not found"), a4, &v30);
    v21 = v30;
    v30 = 0;
    v34 = v21;
    v35 = 1;
    v22 = *a4;
    *a4 = 0;
    (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v33);
    goto LABEL_26;
  }
  if ((WebKit::WebExtensionWindow::matches(v32, a2) & 1) != 0)
  {
    v30 = 0;
    v31 = 0;
    if (a3)
    {
      WebKit::WebExtensionWindow::tabs((uint64_t)v32, 0, (uint64_t *)&v28);
      if (v29)
      {
        v10 = v28;
        v11 = 8 * v29;
        do
        {
          v12 = *v10;
          *(_DWORD *)v12 = *(_DWORD *)*v10 + 1;
          WebKit::WebExtensionTab::url(v12, (uint64_t)&v33);
          if (HIDWORD(v31) == (_DWORD)v31)
          {
            WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v30, (unint64_t)&v33);
          }
          else
          {
            WTF::URL::URL((uint64_t)v30 + 40 * HIDWORD(v31), (uint64_t *)&v33);
            ++HIDWORD(v31);
          }
          v14 = v33;
          v33 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v9);
    }
    v27 = 0;
    v15 = v32;
    if (v32)
      ++*(_DWORD *)v32;
    v16 = *a4;
    *a4 = 0;
    v17 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v17 = &off_1E34F7F88;
    *(_QWORD *)(v17 + 8) = v15;
    *(_BYTE *)(v17 + 16) = a3;
    *(_QWORD *)(v17 + 24) = v16;
    v33 = (WTF::StringImpl *)v17;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)&v30, &v27, (uint64_t *)&v33, 1, 1);
    v19 = v33;
    v33 = 0;
    if (v19)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    v20 = v27;
    v27 = 0;
    if (v20)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v20);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v18);
    goto LABEL_32;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.getLastFocused()"), 0, CFSTR("window does not match requested 'windowTypes'"), v8, &v30);
  v23 = v30;
  v30 = 0;
  v34 = v23;
  v35 = 1;
  v22 = *a4;
  *a4 = 0;
  (*(void (**)(NSString, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v33);
LABEL_26:
  (*(void (**)(NSString))(*(_QWORD *)v22 + 8))(v22);
  if (v35 != -1)
    ((void (*)(WebKit::WebExtensionTab ***, WTF::StringImpl **))off_1E34F7F40[v35])(&v28, &v34);
  v35 = -1;
  v25 = v30;
  v30 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
LABEL_32:
  result = v32;
  v32 = 0;
  if (result)
    return (WebKit::WebExtensionWindow *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  return result;
}

void sub_1977434A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t v30;

  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  v30 = a15;
  a15 = 0;
  if (v30)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::windowsGetAll(unsigned int *a1, unsigned __int8 a2, int a3, uint64_t *a4)
{
  void *v8;
  WebKit::WebExtensionWindow **v9;
  WebKit::WebExtensionWindow **v10;
  WebKit::WebExtensionWindow *v11;
  uint64_t v12;
  WebKit::WebExtensionWindow **v13;
  _DWORD **v14;
  WebKit::WebExtensionWindow *v15;
  void *v16;
  WebKit::WebExtensionTab **v17;
  uint64_t v18;
  WebKit::WebExtensionTab *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebKit::WebExtensionWindow *v22;
  uint64_t result;
  int v24;
  WTF::StringImpl *v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  URL *v37;
  void *v38;
  URL *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  WebKit::WebExtensionTab **v44;
  unsigned int v45;
  WebKit::WebExtensionWindow *v46;
  WebKit::WebExtensionWindow **v47;
  int v48;
  _DWORD **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  WebKit::WebExtensionContext::openWindows(a1, 0, (uint64_t)&v47);
  if (v48)
  {
    v9 = v47;
    v10 = &v47[v48];
    do
    {
      v11 = *v9;
      *(_DWORD *)v11 = *(_DWORD *)*v9 + 1;
      v46 = v11;
      if ((WebKit::WebExtensionWindow::matches(v11, a2) & 1) != 0)
      {
        v12 = HIDWORD(v50);
        if (HIDWORD(v50) == (_DWORD)v50)
        {
          v13 = (WebKit::WebExtensionWindow **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, (unint64_t)&v46);
          v12 = HIDWORD(v50);
          v14 = v49;
          v15 = *v13;
          ++*(_DWORD *)*v13;
        }
        else
        {
          v14 = v49;
          v15 = v46;
          ++*(_DWORD *)v46;
        }
        v14[v12] = v15;
        HIDWORD(v50) = v12 + 1;
        if (a3)
        {
          WebKit::WebExtensionWindow::tabs((uint64_t)v46, 0, (uint64_t *)&v44);
          if (v45)
          {
            v17 = v44;
            v18 = 8 * v45;
            do
            {
              v19 = *v17;
              *(_DWORD *)v19 = *(_DWORD *)*v17 + 1;
              WebKit::WebExtensionTab::url(v19, (uint64_t)&v40);
              if (HIDWORD(v52) == (_DWORD)v52)
              {
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v51, (unint64_t)&v40);
              }
              else
              {
                WTF::URL::URL(v51 + 40 * HIDWORD(v52), (uint64_t *)&v40);
                ++HIDWORD(v52);
              }
              v21 = v40;
              v40 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v20);
                else
                  *(_DWORD *)v21 -= 2;
              }
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v19);
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
          WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v16);
        }
      }
      v22 = v46;
      v46 = 0;
      if (v22)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v22);
      ++v9;
    }
    while (v9 != v10);
  }
  result = WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  v39 = 0;
  v40 = 0;
  v24 = HIDWORD(v50);
  LODWORD(v41) = 0;
  HIDWORD(v41) = HIDWORD(v50);
  if (HIDWORD(v50))
  {
    if (HIDWORD(v50) >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v50)));
    LODWORD(v41) = v24;
    v40 = v25;
    if (HIDWORD(v50))
    {
      v26 = v49;
      v27 = 8 * HIDWORD(v50);
      do
      {
        v28 = *v26++;
        ++*v28;
        *(_QWORD *)v25 = v28;
        v25 = (WTF::StringImpl *)((char *)v25 + 8);
        v27 -= 8;
      }
      while (v27);
    }
  }
  v42 = a3;
  v29 = *a4;
  *a4 = 0;
  v43 = v29;
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = off_1E34F7FB0;
  *(_QWORD *)(v30 + 8) = v40;
  v31 = v41;
  v40 = 0;
  v41 = 0;
  *(_QWORD *)(v30 + 16) = v31;
  *(_BYTE *)(v30 + 24) = v42;
  v32 = v43;
  v43 = 0;
  *(_QWORD *)(v30 + 32) = v32;
  v47 = (WebKit::WebExtensionWindow **)v30;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, &v51, &v39, (uint64_t *)&v47, 1, 1);
  v34 = (uint64_t)v47;
  v47 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = v43;
  v43 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
  v37 = v39;
  v39 = 0;
  if (v37)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v37);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v36);
  return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v38);
}

void sub_1977438E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v23;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 - 96, v23);
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::windowsUpdate(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  NSString *v6;
  WebKit::WebExtensionWindow *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  WebKit::WebExtensionWindow *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  NSString *v19;
  int v20;
  uint64_t (**v21)();
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *result;
  uint64_t v32;
  WebKit::WebExtensionWindow *v33;
  WTF::StringImpl *v34;
  char v35;
  WebKit::WebExtensionWindow *v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionContext::getWindow(a1, a2, 0, 0, 0, (uint64_t *)&v33);
  if (!v33)
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, CFSTR("window not found"), v6, &v34);
    v22 = v34;
    v34 = 0;
    *(_QWORD *)&v37 = v22;
    v44 = 1;
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WebKit::WebExtensionWindow **))(*(_QWORD *)v23 + 16))(v23, &v36);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (v44 != -1)
      ((void (*)(uint64_t *, __int128 *))off_1E34F7F40[v44])(&v32, &v37);
    v44 = -1;
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    goto LABEL_35;
  }
  if (*((_BYTE *)a3 + 80) && WebKit::WebExtensionWindow::state(v33))
    *((_WORD *)a3 + 8) = 256;
  v7 = v33;
  ++*(_DWORD *)v33;
  v36 = v7;
  v37 = *a3;
  v38 = *((_DWORD *)a3 + 4);
  LOBYTE(v39) = 0;
  v41 = 0;
  if (*((_BYTE *)a3 + 40))
  {
    v39 = *((_QWORD *)a3 + 3);
    v8 = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    v40 = v8;
    v41 = 1;
  }
  v9 = a3[4];
  v42 = a3[3];
  v43[0] = v9;
  *(_OWORD *)((char *)v43 + 12) = *(__int128 *)((char *)a3 + 76);
  v10 = *a4;
  *a4 = 0;
  v45 = v10;
  v11 = WTF::fastMalloc((WTF *)0x80);
  v12 = (uint64_t (***)())v11;
  *(_QWORD *)v11 = &off_1E34F7FE8;
  v13 = v36;
  v36 = 0;
  *(_QWORD *)(v11 + 8) = v13;
  LODWORD(v13) = v38;
  *(_OWORD *)(v11 + 16) = v37;
  *(_DWORD *)(v11 + 32) = (_DWORD)v13;
  *(_BYTE *)(v11 + 40) = 0;
  *(_BYTE *)(v11 + 56) = 0;
  if (v41)
  {
    *(_QWORD *)(v11 + 40) = v39;
    v14 = v40;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)(v11 + 48) = v14;
    *(_BYTE *)(v11 + 56) = 1;
  }
  v15 = v42;
  v16 = v43[0];
  *(_OWORD *)(v11 + 92) = *(_OWORD *)((char *)v43 + 12);
  *(_OWORD *)(v11 + 64) = v15;
  *(_OWORD *)(v11 + 80) = v16;
  *(_WORD *)(v11 + 112) = v44;
  v17 = v45;
  v45 = 0;
  *(_QWORD *)(v11 + 120) = v17;
  v32 = v11;
  if (*((_BYTE *)a3 + 17))
  {
    v18 = WebKit::WebExtensionWindow::state(v7);
    v20 = *((unsigned __int8 *)a3 + 16);
    if (!*((_BYTE *)a3 + 17) || v20 != v18)
    {
      if (!*((_BYTE *)a3 + 17))
      {
        result = std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      WebKit::WebExtensionWindow::setState((uint64_t)v7, v20, &v32, v19);
      v28 = v32;
      v32 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      goto LABEL_29;
    }
    v21 = *v12;
  }
  else
  {
    v21 = &off_1E34F7FE8;
  }
  LOBYTE(v34) = 0;
  v35 = 0;
  ((void (*)(uint64_t (***)(), WTF::StringImpl **))v21[2])(v12, &v34);
  ((void (*)(uint64_t (***)()))(*v12)[1])(v12);
  if (v35)
  {
    v27 = v34;
    v34 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v32 = 0;
LABEL_29:
  v29 = v45;
  v45 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v41)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v26);
  v30 = (uint64_t)v36;
  v36 = 0;
  if (v30)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
LABEL_35:
  result = v33;
  v33 = 0;
  if (result)
    return (void *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  return result;
}

void sub_197743D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (a26 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E34F7F40[a26])(&a9, v27);
  a26 = -1;
  v31 = a11;
  a11 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = a10;
  a10 = 0;
  if (v32)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v32);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::windowsRemove(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  NSString *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;

  WebKit::WebExtensionContext::getWindow(a1, a2, 0, 0, 0, &v15);
  if (v15)
  {
    WebKit::WebExtensionWindow::close(v15, a3, v4, v5);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.remove()"), 0, CFSTR("window not found"), v5, &v12);
    v6 = v12;
    v12 = 0;
    v13 = v6;
    v14 = 1;
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v14)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  result = v15;
  v15 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void sub_197743F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a12);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::fireWindowsEventIfNeeded(uint64_t a1, char a2, __int128 *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  _DWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  __int128 v30;
  _OWORD v31[2];
  char v32;
  uint64_t v33;
  char v34;
  unsigned __int8 *v35;

  v34 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v35, &v34, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  LOBYTE(v24) = 0;
  v32 = 0;
  if (*((_BYTE *)a3 + 96))
  {
    v24 = *a3;
    v25 = *((_DWORD *)a3 + 4);
    LOBYTE(v26) = 0;
    v29 = 0;
    if (*((_BYTE *)a3 + 40))
    {
      v6 = *((_DWORD *)a3 + 9);
      v26 = 0;
      v27 = 0;
      v28 = v6;
      if (v6)
      {
        if (v6 >= 0x1745D18)
        {
          __break(0xC471u);
          return;
        }
        v7 = 176 * v6;
        v8 = WTF::fastMalloc((WTF *)(176 * v6));
        v27 = v7 / 0xB0;
        v26 = v8;
        v9 = *((_DWORD *)a3 + 9);
        if (v9)
        {
          v10 = *((_QWORD *)a3 + 3);
          v11 = v10 + 176 * v9;
          v12 = v8 + 56;
          do
          {
            *(_OWORD *)(v12 - 56) = *(_OWORD *)v10;
            *(_BYTE *)(v12 - 40) = 0;
            *(_BYTE *)v12 = 0;
            if (*(_BYTE *)(v10 + 56))
            {
              v13 = *(_DWORD **)(v10 + 16);
              if (v13)
                *v13 += 2;
              *(_QWORD *)(v12 - 40) = v13;
              v14 = *(_OWORD *)(v10 + 40);
              *(_OWORD *)(v12 - 32) = *(_OWORD *)(v10 + 24);
              *(_OWORD *)(v12 - 16) = v14;
              *(_BYTE *)v12 = 1;
            }
            *(_BYTE *)(v12 + 8) = 0;
            *(_BYTE *)(v12 + 16) = 0;
            if (*(_BYTE *)(v10 + 72))
            {
              v15 = *(_DWORD **)(v10 + 64);
              if (v15)
                *v15 += 2;
              *(_QWORD *)(v12 + 8) = v15;
              *(_BYTE *)(v12 + 16) = 1;
            }
            v16 = *(_OWORD *)(v10 + 80);
            *(_OWORD *)(v12 + 40) = *(_OWORD *)(v10 + 96);
            *(_OWORD *)(v12 + 24) = v16;
            v17 = *(_OWORD *)(v10 + 112);
            v18 = *(_OWORD *)(v10 + 128);
            v19 = *(_OWORD *)(v10 + 144);
            *(_OWORD *)(v12 + 98) = *(_OWORD *)(v10 + 154);
            *(_OWORD *)(v12 + 88) = v19;
            *(_OWORD *)(v12 + 72) = v18;
            *(_OWORD *)(v12 + 56) = v17;
            v12 += 176;
            v10 += 176;
          }
          while (v10 != v11);
        }
      }
      v29 = 1;
    }
    v20 = a3[4];
    v30 = a3[3];
    v31[0] = v20;
    *(_OWORD *)((char *)v31 + 12) = *(__int128 *)((char *)a3 + 76);
    v32 = 1;
  }
  v21 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v21 = &off_1E34F8060;
  *(_QWORD *)(v21 + 8) = a1;
  *(_QWORD *)(v21 + 16) = a1;
  *(_BYTE *)(v21 + 24) = a2;
  std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v21 + 32), (uint64_t)&v24);
  v33 = v21;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v35, &v33);
  v23 = v33;
  v33 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v32 && v29)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v22);
  if (v35)
    WTF::fastFree((WTF *)(v35 - 16), v22);
}

void sub_197744270(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  if (a18)
  {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, a2);
    if (a25)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, a2);
  }
  if (a11)
    CFRelease(*(CFTypeRef *)(a11 + 8));
  v28 = *(_QWORD *)(v26 - 56);
  if (v28)
    WTF::fastFree((WTF *)(v28 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto21_WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21_WKWebExtensionWindow},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WebKit *v6;
  NSObject *v7;
  NSError *v8;
  NSString *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  _OWORD v30[2];
  WTF::StringImpl *v31[2];
  int v32;
  _QWORD v33[2];
  char v34;
  __int128 v35;
  _OWORD v36[2];
  char v37;
  char v38;
  _OWORD buf[6];
  char v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v6, v8);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 138543362;
      *(_QWORD *)((char *)buf + 4) = v23;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error for open new window: %{public}@", (uint8_t *)buf, 0xCu);

    }
    -[WebKit localizedDescription](v6, "localizedDescription");
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.create()"), 0, v9, v10, v31);
    v11 = v31[0];
    v31[0] = 0;
    *((_QWORD *)&buf[0] + 1) = v11;
    v41 = 1;
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v41 != -1)
      ((void (*)(__int128 *, char *))off_1E34F7F10[v41])(&v24, (char *)buf + 8);
    v41 = -1;
    v14 = v31[0];
    v31[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }

  }
  else if (v5)
  {
    WebKit::WebExtensionContext::getOrCreateWindow(*(_QWORD *)(a1 + 32), v5, (uint64_t)buf);
    v15 = *(_QWORD *)&buf[0];
    if (WebKit::WebExtensionWindow::isPrivate(*(WebKit::WebExtensionWindow **)&buf[0])
      && ((v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8)) != 0 ? (v17 = v16 - 16) : (v17 = 0), !*(_BYTE *)(v17 + 249)))
    {
      v19 = 0;
      LOBYTE(v31[0]) = 0;
    }
    else
    {
      WebKit::WebExtensionWindow::parameters((id *)v15, 0, (uint64_t)&v24);
      *(_OWORD *)v31 = v24;
      v32 = v25;
      LOBYTE(v33[0]) = 0;
      v34 = 0;
      if (v28)
      {
        v33[0] = v26;
        v18 = v27;
        v26 = 0;
        v27 = 0;
        v33[1] = v18;
        v34 = 1;
      }
      v35 = v29;
      v36[0] = v30[0];
      *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v30 + 12);
      v19 = 1;
    }
    v37 = v19;
    std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)buf + 8, (uint64_t)v31);
    v41 = 0;
    v20 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v20 + 16))(v20, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v41 != -1)
      ((void (*)(char *, char *))off_1E34F7F10[v41])(&v38, (char *)buf + 8);
    v41 = -1;
    if (v37 && v34)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v21);
    if (v19 && v28)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v21);
    if (v15)
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v15);
  }
  else
  {
    BYTE8(buf[0]) = 0;
    v40 = 0;
    v41 = 0;
    v22 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v22 + 16))(v22, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v41 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E34F7F10[v41])(v31, (char *)buf + 8);
  }

}

void sub_19774470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v39 = *(unsigned int *)(v37 - 80);
  if ((_DWORD)v39 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34F7F10[v39])(&a21, v35);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7F60;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7F60;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _BYTE v12[28];
  char v13;
  _BYTE v14[8];
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _OWORD v21[2];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), (uint64_t)&v6);
  v15 = v6;
  v16 = v7;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (v10)
  {
    v17 = v8;
    v2 = v9;
    v8 = 0;
    v9 = 0;
    v18 = v2;
    v19 = 1;
  }
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)&v12[12];
  v21[0] = *(_OWORD *)v12;
  v20 = v11;
  v22 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v14);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v22 != -1)
    result = ((uint64_t (*)(char *, __int128 *))off_1E34F7F40[v22])(&v13, &v15);
  v22 = -1;
  if (v10)
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
  return result;
}

void sub_197744A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;
  uint64_t v39;
  void *v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7F40[a38])(&a24, v38);
  a38 = -1;
  if (a14)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v41);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F7F88;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7F88;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _BYTE v12[28];
  char v13;
  _BYTE v14[8];
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _OWORD v21[2];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), (uint64_t)&v6);
  v15 = v6;
  v16 = v7;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (v10)
  {
    v17 = v8;
    v2 = v9;
    v8 = 0;
    v9 = 0;
    v18 = v2;
    v19 = 1;
  }
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)&v12[12];
  v21[0] = *(_OWORD *)v12;
  v20 = v11;
  v22 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v14);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v22 != -1)
    result = ((uint64_t (*)(char *, __int128 *))off_1E34F7F40[v22])(&v13, &v15);
  v22 = -1;
  if (v10)
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
  return result;
}

void sub_197744C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;
  uint64_t v39;
  void *v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7F40[a38])(&a24, v38);
  a38 = -1;
  if (a14)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v41);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34F7FB0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34F7FB0;
  v3 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  id **v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;

  v1 = result;
  v25 = 0;
  v26 = 0;
  v2 = *(unsigned int *)(result + 20);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v3 = 96 * v2;
    v4 = WTF::fastMalloc((WTF *)(96 * v2));
    LODWORD(v2) = v3 / 0x60;
    LODWORD(v26) = v3 / 0x60;
    v25 = v4;
    v5 = *(unsigned int *)(v1 + 20);
    if ((_DWORD)v5)
    {
      v6 = *(id ***)(v1 + 8);
      v7 = 8 * v5;
      do
      {
        WebKit::WebExtensionWindow::parameters(*v6, *(unsigned __int8 *)(v1 + 24), (uint64_t)&v27);
        v9 = HIDWORD(v26);
        v10 = v25;
        v11 = v25 + 96 * HIDWORD(v26);
        v12 = v27;
        *(_DWORD *)(v11 + 16) = v28;
        *(_OWORD *)v11 = v12;
        *(_BYTE *)(v11 + 24) = 0;
        v13 = (_QWORD *)(v11 + 24);
        *(_BYTE *)(v11 + 40) = 0;
        v14 = (_BYTE *)(v11 + 40);
        if (v32)
        {
          *v13 = 0;
          v13[1] = 0;
          v15 = v29;
          v29 = 0;
          *v13 = v15;
          v16 = v30;
          v30 = 0;
          v17 = v10 + 96 * v9;
          *(_DWORD *)(v17 + 32) = v16;
          v18 = v31;
          v31 = 0;
          *(_DWORD *)(v17 + 36) = v18;
          *v14 = 1;
        }
        v19 = (_OWORD *)(v10 + 96 * v9);
        v21 = v33;
        v20 = v34[0];
        *(_OWORD *)((char *)v19 + 76) = *(_OWORD *)((char *)v34 + 12);
        v19[3] = v21;
        v19[4] = v20;
        ++HIDWORD(v26);
        if (v32)
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
        ++v6;
        v7 -= 8;
      }
      while (v7);
      v4 = v25;
      LODWORD(v2) = v26;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)&v27 = v4;
  v22 = HIDWORD(v26);
  v25 = 0;
  v26 = 0;
  *((_QWORD *)&v27 + 1) = __PAIR64__(v22, v2);
  v28 = 0;
  v23 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 16))(v23, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v28 != -1)
    ((void (*)(char *, __int128 *))off_1E34F7FC8[v28])(&v35, &v27);
  return WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v24);
}

void sub_197744F70(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34F7FE8;
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 56))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F7FE8;
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 56))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  _DWORD *v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  _OWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)&v25 = v3;
    v32 = 1;
    v4 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v4 + 16))(v4, &v24);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v32 != -1)
      return ((uint64_t (*)(_BYTE *, __int128 *))off_1E34F7F40[v32])(v23, &v25);
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 8);
    ++*v6;
    v24 = v6;
    v25 = *(_OWORD *)(a1 + 16);
    v26 = *(_DWORD *)(a1 + 32);
    LOBYTE(v27) = 0;
    v29 = 0;
    if (*(_BYTE *)(a1 + 56))
    {
      v27 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      v28 = v7;
      v29 = 1;
    }
    v8 = *(_OWORD *)(a1 + 80);
    v30 = *(_OWORD *)(a1 + 64);
    v31[0] = v8;
    *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 92);
    v9 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    v33 = v9;
    v10 = WTF::fastMalloc((WTF *)0x80);
    v13 = v10;
    *(_QWORD *)v10 = &off_1E34F8010;
    v14 = v24;
    v24 = 0;
    *(_QWORD *)(v10 + 8) = v14;
    LODWORD(v14) = v26;
    *(_OWORD *)(v10 + 16) = v25;
    *(_DWORD *)(v10 + 32) = (_DWORD)v14;
    *(_BYTE *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 56) = 0;
    if (v29)
    {
      *(_QWORD *)(v10 + 40) = v27;
      v15 = v28;
      v27 = 0;
      v28 = 0;
      *(_QWORD *)(v10 + 48) = v15;
      *(_BYTE *)(v10 + 56) = 1;
    }
    v16 = v30;
    v17 = v31[0];
    *(_OWORD *)(v10 + 92) = *(_OWORD *)((char *)v31 + 12);
    *(_OWORD *)(v10 + 64) = v16;
    *(_OWORD *)(v10 + 80) = v17;
    v18 = v33;
    v33 = 0;
    *(_QWORD *)(v10 + 120) = v18;
    v22 = v10;
    if (*(_BYTE *)(a1 + 105) && *(_BYTE *)(a1 + 104))
    {
      WebKit::WebExtensionWindow::focus((uint64_t)v6, &v22, v11, v12);
      v20 = v22;
      v22 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    else
    {
      v23[0] = 0;
      v23[8] = 0;
      WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::call(v10, (uint64_t)v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v22 = 0;
    }
    v21 = v33;
    v33 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v29)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v19);
    result = (uint64_t)v24;
    v24 = 0;
    if (result)
      return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void sub_197745308(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27)
{
  uint64_t v27;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  if (a19)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, a2);
  if (a13)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a13);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34F8010;
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 56))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F8010;
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 56))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  WebKit::WebExtensionWindow *v6;
  uint64_t (**v7)();
  uint64_t (***v8)();
  uint64_t (**v9)();
  WTF::StringImpl *v10;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSString *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  NSString *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    v27 = v3;
    v28 = 1;
    v4 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v26);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v28 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _DWORD **))off_1E34F7F40[v28])(&v25, &v27);
    return result;
  }
  v6 = *(WebKit::WebExtensionWindow **)(a1 + 8);
  ++*(_DWORD *)v6;
  v7 = *(uint64_t (***)())(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  v8 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v9 = &off_1E34F8038;
  *v8 = &off_1E34F8038;
  v8[1] = (uint64_t (**)())v6;
  v8[2] = v7;
  v24 = (WTF::StringImpl *)v8;
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_9;
  if (WebKit::WebExtensionWindow::state(v6))
  {
    v9 = *v8;
LABEL_9:
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))v9[2])(v8, &v26);
LABEL_10:
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t (***)()))(*v8)[1])(v8);
    if (!(_BYTE)v27)
      return result;
    result = v26;
    v26 = 0;
    if (!result)
      return result;
LABEL_12:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    *(_DWORD *)result -= 2;
    return result;
  }
  v30.origin.x = WebKit::WebExtensionWindow::frame(v6);
  x = v30.origin.x;
  y = v30.origin.y;
  width = v30.size.width;
  height = v30.size.height;
  if (CGRectIsNull(v30))
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, CFSTR("it is not implemented for 'top', 'left', 'width', and 'height'"), v15, &v25);
    v16 = v25;
    v25 = 0;
    v26 = v16;
    LOBYTE(v27) = 1;
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))(*v8)[2])(v8, &v26);
    ((void (*)(uint64_t (***)()))(*v8)[1])(v8);
    if ((_BYTE)v27)
    {
      v17 = v26;
      v26 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v10);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    result = v25;
    v25 = 0;
    if (result)
      goto LABEL_12;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      result = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v18 = *(double *)(a1 + 80);
    v19 = *(double *)(a1 + 88);
    v20 = *(double *)(a1 + 64);
    v21 = *(double *)(a1 + 72);
    v31.origin.x = x;
    v31.origin.y = y;
    v31.size.width = width;
    v31.size.height = height;
    v32.origin.x = v20;
    v32.origin.y = v21;
    v32.size.width = v18;
    v32.size.height = v19;
    if (CGRectEqualToRect(v31, v32))
    {
      LOBYTE(v26) = 0;
      LOBYTE(v27) = 0;
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))(*v8)[2])(v8, &v26);
      goto LABEL_10;
    }
    WebKit::WebExtensionWindow::setFrame((uint64_t)v6, (uint64_t *)&v24, v20, v21, v18, v19, v22, v23);
    result = v24;
    v24 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_197745798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;
  WTF::StringImpl *v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v27);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F8038;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F8038;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _BYTE v15[28];
  char v16;
  _BYTE v17[8];
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)&v18 = v3;
    v25 = 1;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v17);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v25 != -1)
      return ((uint64_t (*)(__int128 *, __int128 *))off_1E34F7F40[v25])(&v9, &v18);
  }
  else
  {
    WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), 0, (uint64_t)&v9);
    v18 = v9;
    v19 = v10;
    LOBYTE(v20) = 0;
    v22 = 0;
    if (v13)
    {
      v20 = v11;
      v6 = v12;
      v11 = 0;
      v12 = 0;
      v21 = v6;
      v22 = 1;
    }
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)&v15[12];
    v24[0] = *(_OWORD *)v15;
    v23 = v14;
    v25 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v17);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v25 != -1)
      result = ((uint64_t (*)(char *, __int128 *))off_1E34F7F40[v25])(&v16, &v18);
    v25 = -1;
    if (v13)
      return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v8);
  }
  return result;
}

void sub_197745B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  uint64_t v38;
  uint64_t v39;
  void *v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (a38 != -1)
    ((void (*)(char *, uint64_t))off_1E34F7F40[a38])(&a24, v38);
  a38 = -1;
  if (a14)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v41);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E34F8060;
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 72))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F8060;
  if (*((_BYTE *)this + 128) && *((_BYTE *)this + 72))
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  void *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  void *v37;
  uint64_t *result;
  size_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  IPC::Encoder *v46;

  v1 = *(_QWORD *)(a1 + 8);
  WebKit::WebExtensionContext::processes((char *)v1, *(_BYTE *)(a1 + 24), 0, (uint64_t *)&v43);
  v41 = v1;
  v3 = *(_QWORD *)(v1 + 64);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v43);
    v5 = v4;
    v6 = v2;
    v7 = v43 ? &v43[*((unsigned int *)v43 - 1)] : 0;
    if (v7 != v4)
    {
      do
      {
        v8 = *v5;
        v9 = *(_QWORD *)(v41 + 32);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 1591;
        *(_QWORD *)(v10 + 8) = v9;
        v11 = (void *)(v10 + 16);
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v46 = (IPC::Encoder *)v10;
        v12 = *(_BYTE *)(a1 + 24);
        v13 = *(_QWORD *)(v10 + 544);
        v14 = v13 + 1;
        v15 = *(_QWORD *)(v10 + 552);
        if (v15 < v13 + 1)
        {
          v30 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v31 = v30;
            v30 *= 2;
          }
          while (v31 < v14);
          v39 = v31;
          v32 = (char *)mmap(0, v31, 3, 4098, -1, 0);
          if (v32 == (char *)-1)
            goto LABEL_42;
          v16 = v32;
          memcpy(v32, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
          v33 = *(void **)(v10 + 528);
          if (v33 != v11)
            munmap(v33, *(_QWORD *)(v10 + 552));
          *(_QWORD *)(v10 + 528) = v16;
          *(_QWORD *)(v10 + 552) = v39;
          v17 = *(_QWORD *)(v10 + 544);
        }
        else
        {
          v16 = *(char **)(v10 + 528);
          v17 = *(_QWORD *)(v10 + 544);
        }
        bzero(&v16[v17], v13 - v17);
        *(_QWORD *)(v10 + 544) = v14;
        v18 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v13);
        *(_QWORD *)(v10 + 536) = v18 + 1;
        *v18 = v12;
        v19 = *(unsigned __int8 *)(a1 + 128);
        v20 = *(_QWORD *)(v10 + 544);
        v21 = v20 + 1;
        v22 = *(_QWORD *)(v10 + 552);
        if (v22 < v20 + 1)
        {
          v34 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v35 = v34;
            v34 *= 2;
          }
          while (v35 < v21);
          v40 = v35;
          v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
          if (v36 == (char *)-1)
            goto LABEL_42;
          v23 = v36;
          memcpy(v36, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
          v37 = *(void **)(v10 + 528);
          if (v37 != v11)
            munmap(v37, *(_QWORD *)(v10 + 552));
          *(_QWORD *)(v10 + 528) = v23;
          *(_QWORD *)(v10 + 552) = v40;
          v24 = *(_QWORD *)(v10 + 544);
        }
        else
        {
          v23 = *(char **)(v10 + 528);
          v24 = *(_QWORD *)(v10 + 544);
        }
        bzero(&v23[v24], v20 - v24);
        *(_QWORD *)(v10 + 544) = v21;
        v25 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v20);
        *(_QWORD *)(v10 + 536) = v25 + 1;
        if (v19)
        {
          *v25 = 1;
          if (!*(_BYTE *)(a1 + 128))
          {
            std::__throw_bad_optional_access[abi:sn180100]();
            __break(1u);
LABEL_42:
            __break(0xC471u);
            JUMPOUT(0x197745FB4);
          }
          IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode((IPC::Encoder *)v10, a1 + 32);
        }
        else
        {
          *v25 = 0;
        }
        LOBYTE(v44) = 0;
        v45 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v46, 0, (uint64_t)&v44, 1);
        if (v45)
        {
          v26 = v44;
          v44 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        }
        v27 = v46;
        v46 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v2);
          WTF::fastFree(v28, v29);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_24;
        }
        v5 = v6;
LABEL_24:
        ;
      }
      while (v5 != v7);
    }
  }
  result = v43;
  if (v43)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v43, v2);
  return result;
}

void sub_197745FC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, char a19, IPC::Encoder *a20)
{
  if (a16)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a16, a2);
  _Unwind_Resume(exception_object);
}

void sub_1977460D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197746208(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_197746314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1977463FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1977464A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::~WebExtensionContext(WebKit::WebExtensionContext *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  void *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  const void *v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  void *v30;
  const void *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl **v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  const void *v59;
  WTF::StringImpl *v60;

  *(_QWORD *)this = &off_1E34F9468;
  *((_QWORD *)this + 2) = &unk_1E34F9498;
  v3 = (const void *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v5)
    CFRelease(v5);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 672, a2);
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 83);
  if (v7)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v6);
  v8 = *((_QWORD *)this + 82);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v6);
  v9 = *((_QWORD *)this + 81);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v6);
  v10 = (WTF::StringImpl **)*((_QWORD *)this + 80);
  if (v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)v6);
  v11 = (const void *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v12)
    CFRelease(v12);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 608, v6);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 576, v13);
  v16 = (const void *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *((_QWORD *)this + 69);
  if (v17)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v17, v15);
  v18 = *((_QWORD *)this + 67);
  if (v18)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v15);
  v19 = *((_QWORD *)this + 66);
  if (v19)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v19, v15);
  v20 = (WTF *)*((_QWORD *)this + 62);
  if (v20)
  {
    *((_QWORD *)this + 62) = 0;
    *((_DWORD *)this + 126) = 0;
    WTF::fastFree(v20, v15);
  }
  v21 = *((_QWORD *)this + 61);
  if (v21)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v21, v15);
  v22 = *((_QWORD *)this + 60);
  if (v22)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v22, v15);
  v23 = *((_QWORD *)this + 59);
  if (v23)
    WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v23, v15);
  v24 = *((_QWORD *)this + 58);
  if (v24)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v24, v15);
  v25 = *((_QWORD *)this + 57);
  if (v25)
    WTF::fastFree((WTF *)(v25 - 16), v15);
  v26 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  v27 = *((_QWORD *)this + 54);
  if (v27)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v27, v15);
  v28 = *((_QWORD *)this + 52);
  if (v28)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v15);
  v29 = (WTF::StringImpl **)*((_QWORD *)this + 51);
  if (v29)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, (WTF::StringImpl *)v15);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 392, v15);
  v31 = (const void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v31)
    CFRelease(v31);
  v32 = (WTF::StringImpl **)*((_QWORD *)this + 47);
  if (v32)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v30);
  v33 = *((_QWORD *)this + 46);
  if (v33)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v33, v30);
  v34 = *((_QWORD *)this + 45);
  if (v34)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v34, v30);
  v35 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v37)
    CFRelease(v37);
  v38 = (const void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v38)
    CFRelease(v38);
  v39 = (const void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v39)
    CFRelease(v39);
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = *((_QWORD *)this + 35);
  if (v41)
    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(v41, v30);
  v42 = *((_QWORD *)this + 34);
  if (v42)
    WTF::fastFree((WTF *)(v42 - 16), v30);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 256, v30);
  v44 = (WTF::StringImpl **)*((_QWORD *)this + 29);
  if (v44)
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(v44, v43);
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes((uint64_t)this + 208, v43);
  v46 = *((_QWORD *)this + 26);
  if (v46)
    WTF::fastFree((WTF *)(v46 - 16), v45);
  v47 = (uint64_t *)*((_QWORD *)this + 23);
  if (v47)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v47, v45);
  v48 = (uint64_t *)*((_QWORD *)this + 22);
  if (v48)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v48, v45);
  v49 = (WTF::StringImpl **)*((_QWORD *)this + 19);
  if (v49)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v49, (WTF::StringImpl *)v45);
  v50 = (WTF::StringImpl **)*((_QWORD *)this + 18);
  if (v50)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v50, (WTF::StringImpl *)v45);
  v51 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v51)
    CFRelease(*(CFTypeRef *)(v51 + 8));
  v52 = (WTF::StringImpl **)*((_QWORD *)this + 16);
  if (v52)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v52, (WTF::StringImpl *)v45);
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v45);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v45);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v45);
    }
  }
  v58 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v58)
    CFRelease(*(CFTypeRef *)(v58 + 8));
  v59 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v59)
    CFRelease(v59);
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v45);
    else
      *(_DWORD *)v60 -= 2;
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v45);
}

{
  WebKit::WebExtensionContext::~WebExtensionContext(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebExtensionContext::WebExtensionContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _WKWebExtensionContextDelegate *v11;
  _WKWebExtensionContextDelegate *v12;
  const void *v13;
  void *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];

  WebKit::WebExtensionContext::WebExtensionContext((WebKit::WebExtensionContext *)a1);
  v4 = *a2;
  if (v4)
    CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(WTF::StringImpl **)(a1 + 112);
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"webkit-extension://", 20, (uint64_t *)&v16, 47, &v17);
  MEMORY[0x19AEABB0C](v18, &v17, 0);
  WTF::URL::operator=(a1 + 72, (WTF::StringImpl *)v18);
  v8 = v18[0];
  v18[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = -[_WKWebExtensionContextDelegate initWithWebExtensionContext:]([_WKWebExtensionContextDelegate alloc], "initWithWebExtensionContext:", a1);
  v12 = v11;
  if (v11)
    CFRetain(v11);

  v13 = *(const void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v12;
  if (v13)
    CFRelease(v13);

  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSURLSession>::operator=((const void **)(a1 + 568), v14);

  return a1;
}

void sub_197746A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WebKit::WebExtensionContext *v12;
  void *v13;
  void *v14;
  void *v16;

  v14 = v13;

  WebKit::WebExtensionContext::~WebExtensionContext(v12, v16);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::createError(uint64_t a1, int a2, void *a3, void *a4)
{
  id v6;
  const __CFString *v7;
  id v8;
  WTF::StringImpl *v9;
  __CFString *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  __CFString *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v30;
  _QWORD v31[2];
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v8 = a4;
  switch(a2)
  {
    case 1:
      WebCore::localizedString((WebCore *)CFSTR("An unknown error has occurred. (WKWebExtensionContext)"), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v11 = v30;
        v30 = 0;
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      goto LABEL_28;
    case 2:
      WebCore::localizedString((WebCore *)CFSTR("Extension context is already loaded."), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v13 = v30;
        v30 = 0;
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v22 = 2;
      break;
    case 3:
      WebCore::localizedString((WebCore *)CFSTR("Extension context is not loaded."), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v15 = v30;
        v30 = 0;
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v22 = 3;
      break;
    case 4:
      WebCore::localizedString((WebCore *)CFSTR("Another extension context is loaded with the same base URL."), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v17 = v30;
        v30 = 0;
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v22 = 4;
      break;
    case 5:
      WebCore::localizedString((WebCore *)CFSTR("No background content is available to load."), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v19 = v30;
        v30 = 0;
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v22 = 5;
      break;
    case 6:
      WebCore::localizedString((WebCore *)CFSTR("The background content failed to load due to an error."), v7);
      if (v30)
      {
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v21 = v30;
        v30 = 0;
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      else
      {
        v10 = &stru_1E351F1B8;
      }
      v22 = 6;
      break;
    default:
      v10 = 0;
LABEL_28:
      v22 = 1;
      break;
  }
  if (objc_msgSend(v6, "length", v30))
  {
    v23 = (__CFString *)v6;

    v10 = v23;
  }
  v24 = *MEMORY[0x1E0CB2D50];
  v33 = *MEMORY[0x1E0CB2D50];
  v34[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v26 = *MEMORY[0x1E0CB3388];
    v31[0] = v24;
    v31[1] = v26;
    v32[0] = v10;
    v32[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 2);
    v27 = objc_claimAutoreleasedReturnValue();

    v25 = (void *)v27;
  }
  v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("_WKWebExtensionContextErrorDomain"), v22, v25);

  return v28;
}

void sub_197746ED8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  void *v9;
  void *v10;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::load(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, _QWORD *a4)
{
  uint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  id v10;
  uint64_t result;
  uint64_t *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  uint64_t v23;
  CFTypeRef *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  void *v30;
  WTF::StringImpl *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  CFTypeRef v38;
  void *v39;
  __CFString *v40;
  uint64_t *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  uint64_t *v48;
  void *v49;
  void *v50;
  void *v51;
  WTF::StringImpl *v52;
  CFTypeRef v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  CFTypeRef v57;
  __CFString *v58;
  void *v59;
  const WTF::StringImpl *v60;
  WTF *v61;
  int v62;
  void *v63;
  void *v64;
  CFTypeRef v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *v71;
  void *v72;
  void *v73;
  NSObject *v74;
  char v75;
  NSObject *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  CFTypeRef v93;
  uint64_t v94;
  uint64_t v95;
  id *v96;
  void *v97;
  void *v98;
  void *v99;
  WebKit::WebExtensionWindow *v100;
  _QWORD *v101;
  const WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113[5];
  WTF::StringImpl *v114;
  CFTypeRef v115;
  CFTypeRef cf[2];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint8_t buf[8];
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  v7 = *(_QWORD *)(a1 + 64);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    v8 = qword_1ECE710C8;
    v9 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Extension context already loaded", buf, 2u);
      if (a4)
        goto LABEL_7;
    }
    else if (a4)
    {
LABEL_7:
      WebKit::WebExtensionContext::createError(v9, 2, 0, 0);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      result = 0;
      *a4 = v10;
      return result;
    }
    return 0;
  }
  else
  {
    v12 = (uint64_t *)(a1 + 40);
    WTF::String::operator=((WTF::StringImpl **)(a1 + 40), a3);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
    v14 = *(unsigned int **)(a2 + 24);
    if (v14)
    {
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    v16 = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v13);
      }
    }
    v19 = *(WTF::StringImpl **)(a1 + 112);
    if (v19)
      *(_DWORD *)v19 += 2;
    v114 = v19;
    *(_QWORD *)buf = "WebExtension-";
    v121 = 14;
    result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v114, v113);
    if (v113[0])
    {
      API::ContentWorld::sharedWorldWithName(v113, v20, (uint64_t *)cf);
      v22 = cf[0];
      cf[0] = 0;
      v23 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v22;
      if (v23)
      {
        CFRelease(*(CFTypeRef *)(v23 + 8));
        v24 = (CFTypeRef *)cf[0];
        cf[0] = 0;
        if (v24)
          CFRelease(v24[1]);
      }
      v25 = v113[0];
      v113[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v114;
      v114 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v21);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *v12;
      if (*v12 && *(_DWORD *)(v27 + 4))
      {
        WebKit::WebExtensionContext::stateFilePath(buf, v27);
        WebKit::WebExtensionContext::readStateFromPath((WebKit::WebExtensionContext *)buf, v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v29);
          else
            *(_DWORD *)v31 -= 2;
        }
        WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 48), v30);
        v33 = (void *)objc_msgSend(v30, "copy");

      }
      else
      {
        if (!*(_QWORD *)(a1 + 48))
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 48), v32);

        }
        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
      }

      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v34);

      WebKit::objectForKey<NSString>((id *)cf, CFSTR("LastSeenBaseURL"), 1);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](buf, v35);
      MEMORY[0x19AEABB0C](v113, buf, 0);
      v37 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }

      v38 = cf[0];
      cf[0] = 0;
      if (v38)
        CFRelease(v38);
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_QWORD *)(a1 + 72))
        v40 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v40 = &stru_1E351F1B8;
      objc_msgSend(v39, "setObject:forKey:", v40, CFSTR("LastSeenBaseURL"));

      v41 = *(uint64_t **)(a1 + 56);
      WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v41);
      WTF::RetainPtr<__IOHIDDevice *>::get(v41 + 24);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (v42)
      {
        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "setObject:forKey:", v42, CFSTR("LastSeenDisplayName"));

      }
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("SessionStorageAllowedInContentScripts"));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      WTF::dynamic_objc_cast<NSNumber>(v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      if (v46)
        v47 = objc_msgSend(v46, "BOOLValue");
      else
        v47 = 0;

      *(_BYTE *)(a1 + 688) = v47;
      v48 = *(uint64_t **)(a1 + 56);
      WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v48);
      WTF::RetainPtr<__IOHIDDevice *>::get(v48 + 28);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](buf, v49);

      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSDictionary>::RetainPtr(&v115, v50);

      WebKit::objectForKey<NSString>((id *)&v115, CFSTR("LastSeenVersion"), 1);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](cf, v51);
      v53 = cf[0];
      cf[0] = 0;
      v54 = *(WTF::StringImpl **)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v53;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::destroy(v54, v52);
          v56 = (WTF::StringImpl *)cf[0];
          cf[0] = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v55);
            else
              *(_DWORD *)v56 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v54 -= 2;
          cf[0] = 0;
        }
      }

      v57 = v115;
      v115 = 0;
      if (v57)
        CFRelease(v57);
      if (*(_QWORD *)buf)
        v58 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v58 = &stru_1E351F1B8;
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "setObject:forKeyedSubscript:", v58, CFSTR("LastSeenVersion"));

      v61 = *(WTF **)(a1 + 296);
      if (v61 && *((_DWORD *)v61 + 1))
        v62 = WTF::equal(v61, *(const WTF::StringImpl **)buf, v60) ^ 1;
      else
        v62 = 0;
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v63);

      WebKit::objectForKey<NSData>((id *)cf, CFSTR("LastSeenBundleHash"));
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = cf[0];
      cf[0] = 0;
      if (v65)
        CFRelease(v65);
      WebKit::WebExtension::bundleHash(*(WebKit::WebExtension **)(a1 + 56));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v67, "setObject:forKeyedSubscript:", v66, CFSTR("LastSeenBundleHash"));

      if (v64 && v66)
        v62 |= objc_msgSend(v64, "isEqualToData:", v66) ^ 1;
      v68 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (v68)
        v69 = v68 - 16;
      else
        v69 = 0;
      v70 = *(_BYTE *)(v69 + 176) & 1;
      *(_BYTE *)(a1 + 288) = v70;
      if (v62)
      {
        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "removeObjectForKey:", CFSTR("BackgroundContentEventListeners"));

        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "removeObjectForKey:", CFSTR("BackgroundContentEventListenersVersion"));

        WebKit::WebExtensionContext::clearDeclarativeNetRequestRulesetState((WebKit::WebExtensionContext *)a1);
        WebKit::WebExtensionContext::clearRegisteredContentScripts((WebKit::WebExtensionContext *)a1, v73);
        v74 = qword_1ECE710C8;
        v75 = 2;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(cf[0]) = 0;
          _os_log_debug_impl(&dword_196BCC000, v74, OS_LOG_TYPE_DEBUG, "Queued installed event with extension update reason", (uint8_t *)cf, 2u);
        }
      }
      else if (v70)
      {
        v75 = 0;
      }
      else
      {
        v76 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(cf[0]) = 0;
          _os_log_debug_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEBUG, "Queued installed event with extension install reason", (uint8_t *)cf, 2u);
        }
        v75 = 1;
      }
      *(_BYTE *)(a1 + 289) = v75;

      v78 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v77);
        else
          *(_DWORD *)v78 -= 2;
      }
      WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)a1);
      v79 = *(_QWORD *)(a1 + 64);
      if (v79)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80)
          v81 = (id *)(v80 - 16);
        else
          v81 = 0;
      }
      else
      {
        v81 = 0;
      }
      WebKit::WebExtensionController::delegate(v81);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v83 = *(_QWORD *)(a1 + 64);
        if (v83)
        {
          v84 = *(_QWORD *)(v83 + 8);
          if (v84)
            v85 = (id *)(v84 - 16);
          else
            v85 = 0;
        }
        else
        {
          v85 = 0;
        }
        WebKit::WebExtension::wrapper(v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::wrapper((id *)a1);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "webExtensionController:openWindowsForExtensionContext:", v86, v87);
        v88 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:openWindowsForExtensionContext: is not an array"));
        v118 = 0u;
        v119 = 0u;
        *(_OWORD *)cf = 0u;
        v117 = 0u;
        v89 = v88;
        v90 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", cf, buf, 16);
        if (v90)
        {
          v91 = *(_QWORD *)v117;
          do
          {
            for (i = 0; i != v90; ++i)
            {
              if (*(_QWORD *)v117 != v91)
                objc_enumerationMutation(v89);
              WebKit::WebExtensionContext::getOrCreateWindow(a1, *((void **)cf[1] + i), (uint64_t)&v115);
              v93 = v115;
              WebKit::WebExtensionContext::didOpenWindow(a1, (WebKit::WebExtensionWindow *)v115, 0, 1);
              WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v93);
            }
            v90 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", cf, buf, 16);
          }
          while (v90);
        }

      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v94 = *(_QWORD *)(a1 + 64);
        if (v94)
        {
          v95 = *(_QWORD *)(v94 + 8);
          if (v95)
            v96 = (id *)(v95 - 16);
          else
            v96 = 0;
        }
        else
        {
          v96 = 0;
        }
        WebKit::WebExtension::wrapper(v96);
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::wrapper((id *)a1);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "webExtensionController:focusedWindowForExtensionContext:", v97, v98);
        v99 = (void *)objc_claimAutoreleasedReturnValue();

        if (v99)
        {
          WebKit::WebExtensionContext::getOrCreateWindow(a1, v99, (uint64_t)&v115);
          v100 = (WebKit::WebExtensionWindow *)v115;
        }
        else
        {
          v100 = 0;
        }
        WebKit::WebExtensionContext::didFocusWindow(a1, v100, 1);
        if (v99 && v100)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v100);

      }
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v101 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v101 = &off_1E34F83B0;
      v101[1] = a1;
      v101[2] = a1;
      if (WTF::equal(v113[0], *(const WTF::StringImpl **)(a1 + 72), v102))
      {
        (*(void (**)(_QWORD *))(*v101 + 16))(v101);
        (*(void (**)(_QWORD *))(*v101 + 8))(v101);
      }
      else
      {
        if ((_MergedGlobals_120 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("WKWebsiteDataTypeIndexedDBDatabases"), CFSTR("WKWebsiteDataTypeLocalStorage"), 0);
          qword_1ECE73260 = objc_claimAutoreleasedReturnValue();
          _MergedGlobals_120 = 1;
        }
        WebKit::WebExtensionContext::webViewConfiguration(a1, 0);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "websiteDataStore");
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::URL::operator NSURL *();
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::URL::operator NSURL *();
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v108 = qword_1ECE73260;
        v109 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
        *v109 = MEMORY[0x1E0C809A0];
        v109[1] = 50331650;
        v109[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
        v109[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
        v109[4] = v101;
        v110 = _Block_copy(v109);

        v111 = _Block_copy(v110);
        objc_msgSend(v105, "_renameOrigin:to:forDataOfTypes:completionHandler:", v106, v107, v108, v111);

      }
      v112 = v113[0];
      v113[0] = 0;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, v103);
        else
          *(_DWORD *)v112 -= 2;
      }
      return 1;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_197747B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::writeStateToStorage(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  void *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  NSError *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (v1 && *(_DWORD *)(v1 + 4))
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3600]), "initWithFilePresenter:", 0);
    v4 = (void *)MEMORY[0x1E0C99E98];
    WebKit::WebExtensionContext::stateFilePath(buf, *((_QWORD *)this + 5));
    if (*(_QWORD *)buf)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    objc_msgSend(v4, "fileURLWithPath:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13[4] = this;
    v14 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZNK6WebKit19WebExtensionContext19writeStateToStorageEv_block_invoke;
    v13[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
    objc_msgSend(v3, "coordinateWritingItemAtURL:options:error:byAccessor:", v6, 8, &v14, v13);
    v7 = v14;

    v9 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v8);
        if (!v7)
        {
LABEL_14:

          return;
        }
LABEL_11:
        v10 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          WebKit::privacyPreservingDescription((WebKit *)v7, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v12;
          _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "Failed to coordinate writing extension state: %{public}@", buf, 0xCu);

        }
        goto LABEL_14;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (!v7)
      goto LABEL_14;
    goto LABEL_11;
  }
}

void sub_19774803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::unload(WebKit::WebExtensionContext *this, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  const void *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  WTF::StringImpl **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL8 v29;
  id v30;
  uint64_t result;
  void *v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF::StringImpl **v53;
  uint8_t v54[16];

  if (a2)
    *a2 = 0;
  v4 = *((_QWORD *)this + 8);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v28 = qword_1ECE710C8;
    v29 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR);
    if (v29)
    {
      *(_WORD *)v54 = 0;
      _os_log_error_impl(&dword_196BCC000, v28, OS_LOG_TYPE_ERROR, "Extension context not loaded", v54, 2u);
      if (a2)
        goto LABEL_41;
    }
    else if (a2)
    {
LABEL_41:
      WebKit::WebExtensionContext::createError(v29, 3, 0, 0);
      v30 = (id)objc_claimAutoreleasedReturnValue();
      result = 0;
      *a2 = v30;
      return result;
    }
    return 0;
  }
  WebKit::WebExtensionContext::writeStateToStorage(this);
  WebKit::WebExtensionContext::unloadBackgroundWebView(this);
  WebKit::WebExtensionContext::removeInjectedContent((uint64_t)this);
  WebKit::WebExtensionContext::invalidateStorage(this);
  WebKit::WebExtensionContext::removeDeclarativeNetRequestRules(this);
  v6 = *((_QWORD *)this + 81);
  if (v6)
  {
    *((_QWORD *)this + 81) = 0;
    WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  v7 = *((_QWORD *)this + 82);
  if (v7)
  {
    *((_QWORD *)this + 82) = 0;
    WTF::fastFree((WTF *)(v7 - 16), v5);
  }
  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 608, 0);
  v9 = (WTF::StringImpl **)*((_QWORD *)this + 80);
  if (v9)
  {
    *((_QWORD *)this + 80) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  }
  v10 = (const void *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v11)
    CFRelease(v11);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 64, 0);
  v13 = *((_QWORD *)this + 34);
  if (v13)
  {
    *((_QWORD *)this + 34) = 0;
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  v14 = *((_QWORD *)this + 35);
  if (v14)
  {
    *((_QWORD *)this + 35) = 0;
    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(v14, v12);
  }
  *((_BYTE *)this + 289) = 0;
  WTF::String::operator=((WTF::StringImpl **)this + 37, MEMORY[0x1E0CBF6F0]);
  *((_BYTE *)this + 353) = 0;
  v16 = (const void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (WTF::StringImpl **)*((_QWORD *)this + 47);
  if (v17)
  {
    *((_QWORD *)this + 47) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v15);
  }
  WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 392, 0);
  v19 = *((_QWORD *)this + 45);
  if (v19)
  {
    *((_QWORD *)this + 45) = 0;
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v19, v18);
  }
  v20 = *((_QWORD *)this + 46);
  if (v20)
  {
    *((_QWORD *)this + 46) = 0;
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v20, v18);
  }
  v21 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v18);
    }
  }
  v24 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 + 8));
  v25 = *((_QWORD *)this + 66);
  if (v25)
  {
    *((_QWORD *)this + 66) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v25, v18);
  }
  v26 = *((_QWORD *)this + 67);
  if (v26)
  {
    *((_QWORD *)this + 67) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v26, v18);
    v27 = *((_QWORD *)this + 67);
    *((_DWORD *)this + 136) = 0;
    if (v27)
    {
      LODWORD(v27) = *(_DWORD *)(v27 - 12);
      if (v27 > 0x7FFFFFFE)
        LODWORD(v27) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v27) = 0;
    *((_DWORD *)this + 136) = 0;
  }
  *((_DWORD *)this + 137) = 2 * v27;
  v32 = (void *)*((_QWORD *)this + 71);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v32);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "removeAllObjects");

  v34 = *((_QWORD *)this + 61);
  if (v34)
  {
    *((_QWORD *)this + 61) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v34, v33);
  }
  if (*((_DWORD *)this + 126))
  {
    if (*((_DWORD *)this + 127))
      *((_DWORD *)this + 127) = 0;
    v35 = (WTF *)*((_QWORD *)this + 62);
    if (v35)
    {
      *((_QWORD *)this + 62) = 0;
      *((_DWORD *)this + 126) = 0;
      WTF::fastFree(v35, v33);
    }
  }
  if (*((_BYTE *)this + 520))
    *((_BYTE *)this + 520) = 0;
  v36 = *((_QWORD *)this + 52);
  if (v36)
  {
    *((_QWORD *)this + 52) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v36, v33);
    v37 = *((_QWORD *)this + 52);
    *((_DWORD *)this + 106) = 0;
    if (v37)
    {
      LODWORD(v37) = *(_DWORD *)(v37 - 12);
      if (v37 > 0x7FFFFFFE)
        LODWORD(v37) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v37) = 0;
    *((_DWORD *)this + 106) = 0;
  }
  *((_DWORD *)this + 107) = 2 * v37;
  v38 = *((_QWORD *)this + 54);
  if (v38)
  {
    *((_QWORD *)this + 54) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v38, v33);
    v39 = *((_QWORD *)this + 54);
    *((_DWORD *)this + 110) = 0;
    if (v39)
    {
      LODWORD(v39) = *(_DWORD *)(v39 - 12);
      if (v39 > 0x7FFFFFFE)
        LODWORD(v39) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v39) = 0;
    *((_DWORD *)this + 110) = 0;
  }
  *((_DWORD *)this + 111) = 2 * v39;
  v40 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v40)
    CFRelease(*(CFTypeRef *)(v40 + 8));
  v41 = *((_QWORD *)this + 69);
  if (v41)
  {
    *((_QWORD *)this + 69) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v41, v33);
    v42 = *((_QWORD *)this + 69);
    *((_DWORD *)this + 140) = 0;
    if (v42)
    {
      LODWORD(v42) = *(_DWORD *)(v42 - 12);
      if (v42 > 0x7FFFFFFE)
        LODWORD(v42) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v42) = 0;
    *((_DWORD *)this + 140) = 0;
  }
  *((_DWORD *)this + 141) = 2 * v42;
  v43 = *((_QWORD *)this + 57);
  if (v43)
  {
    *((_QWORD *)this + 57) = 0;
    WTF::fastFree((WTF *)(v43 - 16), v33);
  }
  v44 = *((_QWORD *)this + 58);
  if (v44)
  {
    *((_QWORD *)this + 58) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v44, v33);
  }
  v45 = *((_QWORD *)this + 59);
  if (v45)
  {
    *((_QWORD *)this + 59) = 0;
    WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v45, v33);
  }
  v46 = *((_QWORD *)this + 60);
  if (v46)
  {
    *((_QWORD *)this + 60) = 0;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v46, v33);
  }
  v47 = (WTF::StringImpl **)*((_QWORD *)this + 51);
  if (v47)
  {
    *((_QWORD *)this + 51) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v47, (WTF::StringImpl *)v33);
  }
  if (*((_DWORD *)this + 146))
  {
    v48 = *((unsigned int *)this + 147);
    if ((_DWORD)v48)
    {
      v49 = (uint64_t *)*((_QWORD *)this + 72);
      v50 = 8 * v48;
      do
      {
        v51 = *v49;
        *v49 = 0;
        if (v51)
          CFRelease(*(CFTypeRef *)(v51 + 8));
        ++v49;
        v50 -= 8;
      }
      while (v50);
      *((_DWORD *)this + 147) = 0;
    }
    v52 = (WTF *)*((_QWORD *)this + 72);
    if (v52)
    {
      *((_QWORD *)this + 72) = 0;
      *((_DWORD *)this + 146) = 0;
      WTF::fastFree(v52, v33);
    }
  }
  *((_BYTE *)this + 592) = 0;
  v53 = (WTF::StringImpl **)*((_QWORD *)this + 83);
  if (v53)
  {
    *((_QWORD *)this + 83) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v53, v33);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 168, 0);
  *((_QWORD *)this + 30) = 0;
  return 1;
}

void sub_197748534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::unloadBackgroundWebView(WebKit::WebExtensionContext *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  const void *v5;

  if (*((_QWORD *)this + 38))
  {
    v2 = (uint64_t *)((char *)this + 304);
    *((_BYTE *)this + 352) = 0;
    v3 = *((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RetainPtr<__IOHIDDevice *>::get(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_close");

    v5 = (const void *)*v2;
    *v2 = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_1977485B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::removeInjectedContent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WebKit::WebUserContentControllerProxy *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  API::UserScript **v19;
  uint64_t v20;
  API::UserScript *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  API::UserStyleSheet **v28;
  uint64_t v29;
  API::UserStyleSheet *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(this + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v2 + 104), &v37);
      v4 = *(_QWORD *)(v2 + 104);
      if (v4)
      {
        v5 = *(unsigned int *)(v4 - 4);
        v6 = v4 + 8 * v5;
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
      v32 = v2 + 104;
      v33 = v6;
      v34 = v6;
      v35 = v6;
      v36 = v4 + 8 * v5;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
      v8 = v38;
      if (v38 != v33)
      {
        v9 = (_QWORD *)(v3 + 360);
        v10 = (_QWORD *)(v3 + 368);
        do
        {
          v11 = *(_QWORD *)(*(_QWORD *)v8 + 8);
          if (v11)
            v12 = (WebKit::WebUserContentControllerProxy *)(v11 - 16);
          else
            v12 = 0;
          v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 360));
          v14 = v13;
          v16 = v15;
          if (*v9)
            v17 = *v9 + 24 * *(unsigned int *)(*v9 - 4);
          else
            v17 = 0;
          if ((_QWORD *)v17 != v13)
          {
            do
            {
              v18 = *((unsigned int *)v14 + 5);
              if ((_DWORD)v18)
              {
                v19 = (API::UserScript **)v14[1];
                v20 = 8 * v18;
                do
                {
                  v21 = *v19++;
                  WebKit::WebUserContentControllerProxy::removeUserScript(v12, v21);
                  v20 -= 8;
                }
                while (v20);
              }
              while (1)
              {
                v14 += 3;
                if (v14 == v16)
                  break;
                if ((unint64_t)(*v14 + 1) > 1)
                  goto LABEL_22;
              }
              v14 = v16;
LABEL_22:
              ;
            }
            while (v14 != (_QWORD *)v17);
          }
          v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 368));
          v23 = v22;
          v25 = v24;
          if (*v10)
            v26 = *v10 + 24 * *(unsigned int *)(*v10 - 4);
          else
            v26 = 0;
          if ((_QWORD *)v26 != v22)
          {
            do
            {
              v27 = *((unsigned int *)v23 + 5);
              if ((_DWORD)v27)
              {
                v28 = (API::UserStyleSheet **)v23[1];
                v29 = 8 * v27;
                do
                {
                  v30 = *v28++;
                  WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v12, v30);
                  v29 -= 8;
                }
                while (v29);
              }
              while (1)
              {
                v23 += 3;
                if (v23 == v25)
                  break;
                if ((unint64_t)(*v23 + 1) > 1)
                  goto LABEL_34;
              }
              v23 = v25;
LABEL_34:
              ;
            }
            while (v23 != (_QWORD *)v26);
          }
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
          v8 = v38;
        }
        while (v38 != v33);
      }
      v31 = *(_QWORD *)(v3 + 360);
      if (v31)
      {
        *(_QWORD *)(v3 + 360) = 0;
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v31, v7);
      }
      this = *(_QWORD *)(v3 + 368);
      if (this)
      {
        *(_QWORD *)(v3 + 368) = 0;
        return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(this, v7);
      }
    }
  }
  return this;
}

void WebKit::WebExtensionContext::invalidateStorage(WebKit::WebExtensionContext *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v5)
    CFRelease(v5);
}

const void **WTF::RetainPtr<NSError>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197748888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::reload(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  uint8_t v10[16];

  if (a2)
    *a2 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v7 = qword_1ECE710C8;
    v8 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Extension context not loaded", v10, 2u);
      if (a2)
        goto LABEL_9;
    }
    else if (a2)
    {
LABEL_9:
      WebKit::WebExtensionContext::createError(v8, 3, 0, 0);
      v6 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      return v6;
    }
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v5 - 8));
  if ((WebKit::WebExtensionController::unload((_QWORD *)(v5 - 16), a1, a2) & 1) != 0)
    v6 = WebKit::WebExtensionController::load(v5 - 16, a1, a2);
  else
    v6 = 0;
  CFRelease(*(CFTypeRef *)(v5 - 8));
  return v6;
}

void sub_1977489A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::stateFilePath(_QWORD *this, uint64_t a2)
{
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;

  if (a2 && *(_DWORD *)(a2 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    this = (_QWORD *)WTF::FileSystemImpl::pathByAppendingComponent();
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return (_QWORD *)WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v3 += 2;
    *this = v3;
  }
  return this;
}

void sub_197748A94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionContext::readStateFromPath(WebKit::WebExtensionContext *this, const WTF::String *a2)
{
  void *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  WebKit *v7;
  NSObject *v8;
  NSError *v9;
  id v10;
  void *v12;
  _QWORD v13[5];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3600]), "initWithFilePresenter:", 0);
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__13;
  v19 = __Block_byref_object_dispose__13;
  v20 = 0;
  v4 = (void *)MEMORY[0x1E0C99E98];
  if (*(_QWORD *)this)
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  objc_msgSend(v4, "fileURLWithPath:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN6WebKit19WebExtensionContext17readStateFromPathERKN3WTF6StringE_block_invoke;
  v13[3] = &unk_1E34F8080;
  v13[4] = &v15;
  objc_msgSend(v3, "coordinateReadingItemAtURL:options:error:byAccessor:", v6, 1, &v14, v13);
  v7 = (WebKit *)v14;

  if (v7)
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v7, v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v12;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Failed to coordinate reading extension state: %{public}@", buf, 0xCu);

    }
  }
  v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_197748C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void ___ZN6WebKit19WebExtensionContext17readStateFromPathERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfURL:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4);
  if (!v3)

}

void sub_197748D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::readDisplayNameFromState(WebKit::WebExtensionContext *this, const WTF::String *a2, WTF::String *a3)
{
  void *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  WTF::StringImpl *v13;

  WebKit::WebExtensionContext::readStateFromPath(this, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSString>(v4, (uint64_t)CFSTR("LastSeenDisplayName"), 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_7;
  MEMORY[0x19AEABCC8](&v13, v5);
  v7 = v13;
  v13 = 0;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (!v8)
    goto LABEL_7;
  v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 != 2)
    goto LABEL_6;
  WTF::StringImpl::destroy(v8, v6);
  v8 = v13;
  v13 = 0;
  if (!v8)
    goto LABEL_7;
  v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
LABEL_6:
    *(_DWORD *)v8 = v9;
LABEL_7:

  if (*(_QWORD *)a2)
    v11 = *(_DWORD *)(*(_QWORD *)a2 + 4) != 0;
  else
    v11 = 0;

  return v11;
}

void sub_197748E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZNK6WebKit19WebExtensionContext19writeStateToStorageEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  WebKit *v7;
  NSObject *v8;
  NSError *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(*(_QWORD *)(a1 + 32) + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  v11 = 0;
  v6 = objc_msgSend(v5, "writeToURL:error:", v3, &v11);
  v7 = (WebKit *)v11;

  if ((v6 & 1) == 0)
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v7, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v10;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Unable to save extension state: %{public}@", buf, 0xCu);

    }
  }

}

void sub_197748FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::webViewConfiguration(uint64_t a1, int a2)
{
  uint64_t v2;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  WebKit::WebExtensionMatchPattern **v12;
  WebKit::WebExtensionMatchPattern **v13;
  WebKit::WebExtensionMatchPattern **v14;
  WebKit::WebExtensionMatchPattern **v15;
  WebKit::WebExtensionMatchPattern **v16;
  void *v17;
  uint64_t v18;
  WebKit::WebExtensionMatchPattern **v19;
  WebKit::WebExtensionMatchPattern **v20;
  WebKit::WebExtensionMatchPattern **v21;
  WebKit::WebExtensionMatchPattern **v22;
  WebKit::WebExtensionMatchPattern **v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const __CFString *v28;
  __CFString *v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  uint64_t *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  id *v44;
  void *v45;
  void *v46;
  void *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t *v51;
  WTF::StringImpl *v52;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v5 = WebKit::WebExtension::manifestVersion(*(WebKit::WebExtension **)(a1 + 56));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    WebKit::WebExtensionControllerConfiguration::webViewConfiguration(*(WebKit::WebExtensionControllerConfiguration **)(v7 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "copy");

    if (v5 < 3.0)
      v10 = 1;
    else
      v10 = 2;
    objc_msgSend(v9, "_setContentSecurityPolicyModeForExtension:", v10);
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::allRequestedMatchPatterns(*(id **)(a1 + 56), (uint64_t *)&v52);
    v12 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)&v52);
    v13 = v12;
    v15 = v14;
    if (v52)
      v16 = (WebKit::WebExtensionMatchPattern **)((char *)v52 + 8 * *((unsigned int *)v52 - 1));
    else
      v16 = 0;
    if (v16 != v12)
    {
      do
      {
        WebKit::WebExtensionMatchPattern::expandedStrings(*v13);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObjectsFromArray:", v17);

        while (++v13 != v15)
        {
          if ((unint64_t)*v13 + 1 > 1)
            goto LABEL_19;
        }
        v13 = v15;
LABEL_19:
        ;
      }
      while (v13 != v16);
    }
    v18 = *(_QWORD *)(a1 + 56);
    WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v18);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v51, (_QWORD **)(v18 + 96));
    v19 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v51);
    v20 = v19;
    v22 = v21;
    if (v51)
      v23 = (WebKit::WebExtensionMatchPattern **)&v51[*((unsigned int *)v51 - 1)];
    else
      v23 = 0;
    if (v23 != v19)
    {
      do
      {
        WebKit::WebExtensionMatchPattern::expandedStrings(*v20);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObjectsFromArray:", v24);

        while (++v20 != v22)
        {
          if ((unint64_t)*v20 + 1 > 1)
            goto LABEL_29;
        }
        v20 = v22;
LABEL_29:
        ;
      }
      while (v20 != v23);
    }
    objc_msgSend(v11, "allObjects");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v51)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v51, v25);
    if (v52)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v52, v25);

    objc_msgSend(v9, "_setCORSDisablingPatterns:", v26);
    objc_msgSend(v9, "_setCrossOriginAccessControlCheckEnabled:", 0);
    v27 = (void *)MEMORY[0x1E0CB3940];
    WebCore::localizedString((WebCore *)CFSTR("%@ Web Extension"), v28);
    if (v52)
      v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v29 = &stru_1E351F1B8;
    v30 = *(uint64_t **)(a1 + 56);
    WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v30);
    WTF::RetainPtr<__IOHIDDevice *>::get(v30 + 25);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "localizedStringWithFormat:", v29, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    objc_msgSend(v9, "_setProcessDisplayName:", v32);

    if (*(_QWORD *)(a1 + 304))
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 304));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v52 = 0;
      v36 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v36 = (uint64_t)off_1E34F8658;
      v36[1] = (uint64_t)&v52;
      v51 = v36;
      WebKit::WebExtensionContext::enumerateExtensionPages(a1, &v51);
      (*(void (**)(uint64_t *))(*v36 + 8))(v36);
      v35 = v52;
    }
    objc_msgSend(v9, "_setRelatedWebView:", v35);

    WTF::URL::operator NSURL *();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setRequiredWebExtensionBaseURL:", v37);

    objc_msgSend(v9, "_setShouldRelaxThirdPartyCookieBlocking:", 1);
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setMaskedURLSchemes:", v38);

    objc_msgSend(v9, "defaultWebpagePreferences");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "_setAutoplayPolicy:", 1);

    v40 = *(_QWORD *)(a1 + 64);
    if (a2 == 4)
    {
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 8);
        if (v41)
          v42 = (id *)(v41 - 16);
        else
          v42 = 0;
      }
      else
      {
        v42 = 0;
      }
      WebKit::WebExtension::wrapper(v42);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_setWebExtensionController:", v45);

      objc_msgSend(v9, "_setWeakWebExtensionController:", 0);
    }
    else
    {
      if (v40)
      {
        v43 = *(_QWORD *)(v40 + 8);
        if (v43)
          v44 = (id *)(v43 - 16);
        else
          v44 = 0;
      }
      else
      {
        v44 = 0;
      }
      WebKit::WebExtension::wrapper(v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_setWeakWebExtensionController:", v46);

      objc_msgSend(v9, "_setWebExtensionController:", 0);
    }
    objc_msgSend(v9, "preferences");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v52, CFSTR("clipboardWrite"));
    objc_msgSend(v47, "_setJavaScriptCanAccessClipboard:", (WebKit::WebExtensionContext::permissionState(a1, &v52, 0, 2) & 0xFFFFFFFE) == 2);
    v49 = v52;
    v52 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    if ((a2 - 1) <= 1)
    {
      objc_msgSend(v47, "_setHiddenPageDOMTimerThrottlingEnabled:", 0);
      objc_msgSend(v47, "_setPageVisibilityBasedProcessSuppressionEnabled:", 0);
      objc_msgSend(v47, "setInactiveSchedulingPolicy:", 2);
    }

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

void sub_1977494F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_197749688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::setBaseURL(WTF::StringImpl *result, WTF::URL *this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];

  v3 = result;
  v4 = *((_QWORD *)result + 8);
  if ((!v4 || !*(_QWORD *)(v4 + 8)) && (*((_BYTE *)this + 8) & 1) != 0)
  {
    v5 = (_BYTE *)WTF::URL::protocol(this);
    v7 = v6;
    v8 = (_DWORD *)WTF::URL::host(this);
    WTF::makeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,char>(v5, v7, "://", 4, v8, v9, 47, &v12);
    MEMORY[0x19AEABB0C](v13, &v12, 0);
    WTF::URL::operator=((uint64_t)v3 + 72, (WTF::StringImpl *)v13);
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19774978C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::makeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,char>@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, _QWORD *a8@<X8>)
{
  size_t v9;
  int v11;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v20;
  _DWORD *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  _BYTE *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  if (a4)
    v9 = a4 - 1;
  else
    v9 = 0;
  if (v9 >> 31)
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  if ((a6 & 0x80000000) != 0)
    goto LABEL_36;
  v11 = a6 + 1;
  if (__OFADD__((_DWORD)a6, 1))
    goto LABEL_36;
  v13 = __OFADD__((_DWORD)v9, v11);
  v14 = v9 + v11;
  v15 = v13;
  if ((a2 & 0x80000000) != 0)
    goto LABEL_36;
  if (v15)
    goto LABEL_36;
  v16 = (a2 + v14);
  if (__OFADD__((_DWORD)a2, v14))
    goto LABEL_36;
  v20 = result;
  if ((a2 & 0xFF00000000) != 0 && (a6 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v16)
    {
      if ((v16 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
        v21 = v36;
        if (v36)
        {
          *v36 = 2;
          v21[1] = v16;
          *((_QWORD *)v21 + 1) = v21 + 5;
          v21[4] = 4;
          v34 = v20;
          v35 = a2;
          WTF::StringView::getCharacters<unsigned char>(&v34, (char *)v21 + 20);
          v22 = (char *)v21 + v35 + 20;
          if ((_DWORD)v9)
          {
            if ((_DWORD)v9 == 1)
              *v22 = *(_BYTE *)a3;
            else
              memcpy((char *)v21 + v35 + 20, a3, v9);
          }
          v36 = a5;
          v37 = a6;
          result = WTF::StringView::getCharacters<unsigned char>(&v36, &v22[v9]);
          v22[v9 + v37] = a7;
          goto LABEL_33;
        }
      }
      goto LABEL_36;
    }
LABEL_32:
    v21 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)v16)
    goto LABEL_32;
  if (v16 > 0x7FFFFFEF || (WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20)), (v21 = v36) == 0))
  {
LABEL_36:
    *a8 = 0;
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x197749A38);
  }
  *v36 = 2;
  v21[1] = v16;
  *((_QWORD *)v21 + 1) = v21 + 5;
  v21[4] = 0;
  v34 = v20;
  v35 = a2;
  WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v34, (char *)v21 + 20);
  v23 = (char *)v21 + 2 * v35 + 20;
  v24 = &v23[2 * v9];
  if ((v9 & 0xFFFFFFC0) != 0)
  {
    v25 = &v23[2 * (v9 & 0xFFFFFFC0)];
    v26 = 0uLL;
    do
    {
      v38.val[0] = (int8x16_t)*a3;
      v27 = *((int8x16_t *)a3 + 1);
      v39.val[0] = (int8x16_t)a3[2];
      v28 = a3[3];
      a3 += 4;
      v29 = v28;
      v39.val[1] = 0uLL;
      v40.val[0] = v27;
      v38.val[1] = 0uLL;
      v30 = v23;
      vst2q_s8(v30, v38);
      v30 += 32;
      v40.val[1] = 0uLL;
      vst2q_s8(v30, v40);
      v31 = v23 + 64;
      vst2q_s8(v31, v39);
      v32 = v23 + 96;
      vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
      v23 += 128;
    }
    while (v23 != v25);
    v23 = v25;
  }
  while (v23 != v24)
  {
    v33 = *(unsigned __int8 *)a3;
    a3 = (_OWORD *)((char *)a3 + 1);
    *(_WORD *)v23 = v33;
    v23 += 2;
  }
  v36 = a5;
  v37 = a6;
  result = WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v36, v24);
  *(_WORD *)&v24[2 * v37] = a7;
LABEL_33:
  *a8 = v21;
  return result;
}

void sub_197749A54(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::isURLForAnyExtension(WebKit::WebExtensionContext *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;
  WTF *v15;
  WTF::StringImpl *v16;

  if ((*((_BYTE *)this + 8) & 1) == 0)
    return 0;
  v4 = WebKit::WebExtensionMatchPattern::extensionSchemes(this);
  WTF::URL::protocol(this);
  if ((v5 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v2 = *v4;
  v8 = v16;
  if (v2)
  {
    v10 = *(_DWORD *)(v2 - 8);
    v11 = *((_DWORD *)v16 + 4);
    if (v11 >= 0x100)
      v12 = v11 >> 8;
    else
      v12 = WTF::StringImpl::hashSlowCase(v16);
    for (i = 0; ; v12 = i + v14)
    {
      v14 = v12 & v10;
      v15 = *(WTF **)(v2 + 8 * (v12 & v10));
      if (v15 != (WTF *)-1)
      {
        if (!v15)
        {
          v2 = 0;
          goto LABEL_21;
        }
        if ((WTF::equal(v15, v16, v7) & 1) != 0)
          break;
      }
      ++i;
    }
    v2 = 1;
LABEL_21:
    v8 = v16;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v2;
}

void sub_197749B84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::WebExtensionContext::setUniqueIdentifier(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  _BYTE v11[24];
  WTF::StringImpl *v12;

  v3 = result;
  v4 = result[8];
  if (!v4 || !*((_QWORD *)v4 + 1))
  {
    if (*(_QWORD *)a2)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 4);
      *((_BYTE *)result + 120) = v5 != 0;
      if (v5)
        return WTF::String::operator=(v3 + 14, a2);
    }
    else
    {
      *((_BYTE *)result + 120) = 0;
    }
    WTF::UUID::UUID((WTF::UUID *)v11);
    WTF::UUID::toString((WTF::UUID *)v11);
    v7 = v12;
    v12 = 0;
    v8 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_11:
        *(_DWORD *)v8 = v9;
        return WTF::String::operator=(v3 + 14, a2);
      }
      WTF::StringImpl::destroy(v8, v6);
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v10);
          return WTF::String::operator=(v3 + 14, a2);
        }
        goto LABEL_11;
      }
    }
    return WTF::String::operator=(v3 + 14, a2);
  }
  return result;
}

_QWORD *WebKit::WebExtensionContext::setInspectable(WebKit::WebExtensionContext *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  WebKit::WebPageProxy *v17;
  void *v18;
  CFTypeRef v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *result;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  WebKit::WebPageProxy *v33;
  void *v34;
  CFTypeRef v35;
  _QWORD *v36;
  CFTypeRef cf;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  *((_BYTE *)this + 121) = a2;
  WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setInspectable:", a2);

  v5 = *((_QWORD *)this + 67);
  if (!v5)
  {
    v8 = 0;
    v6 = 0;
LABEL_10:
    v7 = (_QWORD *)(v5 + 16 * v6);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = (_QWORD *)(v5 + 16 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = (_QWORD *)(v5 + 16 * v6);
    goto LABEL_10;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 67);
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = (_QWORD *)*((_QWORD *)this + 67);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_11:
  v44 = (char *)this + 536;
  v45 = v8;
  v46 = v7;
  if (v5)
  {
    v10 = *(unsigned int *)(v5 - 4);
    v11 = v5 + 16 * v10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v47 = v11;
  v48 = v5 + 16 * v10;
  v49 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
  if (v5)
  {
    v12 = *(unsigned int *)(v5 - 4);
    v13 = (_QWORD *)(v5 + 16 * v12);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v38 = (char *)this + 536;
  v39 = v13;
  v40 = v13;
  v41 = v13;
  v42 = v5 + 16 * v12;
  v43 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v38);
  v14 = v45;
  v15 = v39;
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(*v14 + 8);
    if (v16)
      v17 = (WebKit::WebPageProxy *)(v16 - 16);
    else
      v17 = 0;
    WebKit::WebPageProxy::cocoaView(v17, &cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setInspectable:", a2);

    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
    v20 = v14 + 2;
    v45 = v14 + 2;
    if (v14 + 2 != v46)
    {
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        v20 += 2;
        if (v20 == v46)
        {
          v20 = v46;
          break;
        }
      }
      v45 = v20;
    }
    ++v49;
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
    v14 = v45;
    ++*((_DWORD *)v44 + 2);
  }
  v21 = (char *)this + 552;
  v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 69);
  v44 = (char *)this + 552;
  v45 = v22;
  v46 = v23;
  v24 = *((_QWORD *)this + 69);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    v26 = v24 + 16 * v25;
  }
  else
  {
    v26 = 0;
    v25 = 0;
  }
  v47 = v26;
  v48 = v24 + 16 * v25;
  v49 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
  if (v24)
  {
    v27 = *(unsigned int *)(v24 - 4);
    v28 = (_QWORD *)(v24 + 16 * v27);
  }
  else
  {
    v28 = 0;
    v27 = 0;
  }
  v38 = v21;
  v39 = v28;
  v40 = v28;
  v41 = v28;
  v42 = v24 + 16 * v27;
  v43 = 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v38);
  v30 = v45;
  v31 = v39;
  while (v30 != v31)
  {
    v32 = *(_QWORD *)(*v30 + 8);
    if (v32)
      v33 = (WebKit::WebPageProxy *)(v32 - 16);
    else
      v33 = 0;
    WebKit::WebPageProxy::cocoaView(v33, &cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "setInspectable:", a2);

    v35 = cf;
    cf = 0;
    if (v35)
      CFRelease(v35);
    v36 = v30 + 2;
    v45 = v30 + 2;
    if (v30 + 2 != v46)
    {
      while ((unint64_t)(*v36 + 1) <= 1)
      {
        v36 += 2;
        if (v36 == v46)
        {
          v36 = v46;
          break;
        }
      }
      v45 = v36;
    }
    ++v49;
    result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
    v30 = v45;
    ++*((_DWORD *)v44 + 2);
  }
  return result;
}

void sub_197749F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::injectedContents@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::WebExtension *v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const WebKit::WebExtension::InjectedContentData *v11;
  unsigned int v12;

  v4 = (WebKit::WebExtension *)*((_QWORD *)this + 7);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded(v4);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)v4 + 24);
  v5 = (_QWORD *)((char *)this + 376);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 47);
  v7 = result;
  v9 = v8;
  if (*v5)
    v10 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
  else
    v10 = 0;
  if ((_QWORD *)v10 != result)
  {
    do
    {
      v11 = (const WebKit::WebExtension::InjectedContentData *)(v7[1] + 136);
      v12 = *(_DWORD *)(a2 + 12);
      if (v12 == *(_DWORD *)(a2 + 8))
      {
        result = (_QWORD *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData const&>(a2, (unint64_t)v11);
      }
      else
      {
        result = WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(*(_QWORD *)a2 + 72 * v12), v11);
        ++*(_DWORD *)(a2 + 12);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_12;
      }
      v7 = v9;
LABEL_12:
      ;
    }
    while (v7 != (_QWORD *)v10);
  }
  return result;
}

void sub_19774A0B0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::hasInjectedContentForURL(WebKit::WebExtensionContext *this, const WTF::URL *a2)
{
  WTF::StringImpl *v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD *v6;
  _BYTE **v7;
  _BYTE **v8;
  _BYTE **v9;
  _QWORD *v10;
  _BYTE **v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  unsigned int v21;

  WebKit::WebExtensionContext::injectedContents(this, (uint64_t)&v20);
  if (!v21)
  {
LABEL_26:
    v18 = 0;
    goto LABEL_28;
  }
  v4 = v20;
  v5 = &v20[9 * v21];
  while (1)
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v4 + 1);
    v7 = (_BYTE **)v6;
    v9 = v8;
    v10 = v4[1];
    if (v10)
      v11 = (_BYTE **)&v10[*((unsigned int *)v10 - 1)];
    else
      v11 = 0;
    if (v11 != v6)
    {
      v12 = 0;
      while (1)
      {
        v13 = WebKit::WebExtensionMatchPattern::matchesURL(*v7, a2, 0);
        if ((v13 & 1) != 0)
          goto LABEL_25;
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_13;
        }
        v7 = v9;
LABEL_13:
        v12 |= v13;
        if (v7 == v11)
        {
          if ((v12 & 1) != 0)
            goto LABEL_25;
          break;
        }
      }
    }
    v14 = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v4);
    v15 = v14;
    v16 = v3;
    v17 = *v4 ? (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)] : 0;
    if ((WTF::StringImpl *)v17 != v14)
      break;
LABEL_25:
    v4 += 9;
    if (v4 == v5)
      goto LABEL_26;
  }
  while ((WebKit::WebExtensionMatchPattern::matchesURL(*(_BYTE **)v15, a2, 0) & 1) == 0)
  {
    while (1)
    {
      v15 = (WTF::StringImpl *)((char *)v15 + 8);
      if (v15 == v16)
        break;
      if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
        goto LABEL_24;
    }
    v15 = v16;
LABEL_24:
    if (v15 == (WTF::StringImpl *)v17)
      goto LABEL_25;
  }
  v18 = 1;
LABEL_28:
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v3);
  return v18;
}

void sub_19774A234(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::optionsPageURL(WebKit::WebExtensionContext *this@<X0>, WTF::URL *a2@<X8>)
{
  WebKit::WebExtension *v4;
  uint64_t *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WebKit::WebExtension *)*((_QWORD *)this + 7);
  WebKit::WebExtension::populatePagePropertiesIfNeeded(v4);
  if (*((_QWORD *)v4 + 41))
  {
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    WebKit::WebExtension::populatePagePropertiesIfNeeded((WebKit::WebExtension *)v5);
    WTF::RetainPtr<__IOHIDDevice *>::get(v5 + 41);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v9, v6);
    MEMORY[0x19AEABB24](a2, (char *)this + 72, &v9, 0);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }

  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_19774A314(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::overrideNewTabPageURL(WebKit::WebExtensionContext *this@<X0>, WTF::URL *a2@<X8>)
{
  WebKit::WebExtension *v4;
  uint64_t *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WebKit::WebExtension *)*((_QWORD *)this + 7);
  WebKit::WebExtension::populatePagePropertiesIfNeeded(v4);
  if (*((_QWORD *)v4 + 42))
  {
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    WebKit::WebExtension::populatePagePropertiesIfNeeded((WebKit::WebExtension *)v5);
    WTF::RetainPtr<__IOHIDDevice *>::get(v5 + 42);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v9, v6);
    MEMORY[0x19AEABB24](a2, (char *)this + 72, &v9, 0);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }

  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_19774A410(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::setHasAccessInPrivateBrowsing(_QWORD *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  API::ContentRuleListStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  WebKit::WebUserContentControllerProxy *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  WebKit::WebUserContentControllerProxy *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _QWORD *v32;

  if (*((unsigned __int8 *)this + 249) != a2)
  {
    v2 = (uint64_t)this;
    *((_BYTE *)this + 249) = a2;
    v3 = this[8];
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if (a2)
        {
          v5 = API::ContentRuleListStore::defaultStore((API::ContentRuleListStore *)this);
          WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v30, v2);
          WTF::String::isolatedCopy();
          CFRetain(*(CFTypeRef *)(v2 + 8));
          v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v6 = &off_1E34F86A8;
          v6[1] = v2;
          v6[2] = v2;
          v32 = v6;
          API::ContentRuleListStore::lookupContentRuleListFile((uint64_t)v5, (uint64_t)&v30, (uint64_t)&v25, (uint64_t *)&v32);
          if (v32)
            (*(void (**)(_QWORD *))(*v32 + 8))(v32);
          v8 = v25;
          v25 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
          }
          v12 = v30;
          v30 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *(_QWORD *)(v2 + 64);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
              v15 = v14 - 16;
            else
              v15 = 0;
          }
          else
          {
            v15 = 0;
          }
          WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v15 + 152), &v30);
          v16 = *(_QWORD *)(v15 + 152);
          if (v16)
          {
            v17 = *(unsigned int *)(v16 - 4);
            v18 = v16 + 8 * v17;
          }
          else
          {
            v18 = 0;
            v17 = 0;
          }
          v25 = (WTF::StringImpl *)(v15 + 152);
          v26 = v18;
          v27 = v18;
          v28 = v18;
          v29 = v16 + 8 * v17;
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
          while (v31 != v26)
          {
            v23 = *(_QWORD *)(*(_QWORD *)v31 + 8);
            if (v23)
              v24 = (WebKit::WebUserContentControllerProxy *)(v23 - 16);
            else
              v24 = 0;
            WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v2, v24);
            this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v30);
          }
        }
        else
        {
          WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v4 + 136), &v30);
          v9 = *(_QWORD *)(v4 + 136);
          if (v9)
          {
            v10 = *(unsigned int *)(v9 - 4);
            v11 = v9 + 8 * v10;
          }
          else
          {
            v11 = 0;
            v10 = 0;
          }
          v25 = (WTF::StringImpl *)(v4 + 136);
          v26 = v11;
          v27 = v11;
          v28 = v11;
          v29 = v9 + 8 * v10;
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
          for (i = v31; v31 != v26; i = v31)
          {
            v20 = *(_QWORD *)(*(_QWORD *)i + 8);
            if (v20)
              v21 = (WebKit::WebUserContentControllerProxy *)(v20 - 16);
            else
              v21 = 0;
            WebKit::WebExtensionContext::removeInjectedContent((WebKit::WebExtensionContext *)v2, v21);
            WebKit::WebUserContentControllerProxy::removeContentRuleList(v21, (WTF::StringImpl **)(v2 + 112), v22);
            this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v30);
          }
        }
      }
    }
  }
  return this;
}

void sub_19774A688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  WTF::StringImpl *v17;

  CFRelease(*(CFTypeRef *)(v15 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v17);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::addInjectedContent(WebKit::WebExtensionContext *this, WebKit::WebUserContentControllerProxy *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  API::UserStyleSheet **v21;
  uint64_t v22;
  API::UserStyleSheet *v23;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 45);
  v5 = v4;
  v7 = v6;
  v8 = *((_QWORD *)this + 45);
  if (v8)
    v9 = (_QWORD *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != v4)
  {
    do
    {
      v10 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)v5[1];
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          WebKit::WebUserContentControllerProxy::addUserScript((uint64_t)a2, v13, 1);
          v12 -= 8;
        }
        while (v12);
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_12;
      }
      v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != v9);
  }
  v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 46);
  v15 = v14;
  v17 = v16;
  v18 = *((_QWORD *)this + 46);
  if (v18)
    v19 = (_QWORD *)(v18 + 24 * *(unsigned int *)(v18 - 4));
  else
    v19 = 0;
  if (v19 != v14)
  {
    do
    {
      v20 = *((unsigned int *)v15 + 5);
      if ((_DWORD)v20)
      {
        v21 = (API::UserStyleSheet **)v15[1];
        v22 = 8 * v20;
        do
        {
          v23 = *v21++;
          WebKit::WebUserContentControllerProxy::addUserStyleSheet(a2, v23);
          v22 -= 8;
        }
        while (v22);
      }
      while (1)
      {
        v15 += 3;
        if (v15 == v17)
          break;
        if ((unint64_t)(*v15 + 1) > 1)
          goto LABEL_24;
      }
      v15 = v17;
LABEL_24:
      ;
    }
    while (v15 != v19);
  }
}

void WebKit::WebExtensionContext::removeInjectedContent(WebKit::WebExtensionContext *this, WebKit::WebUserContentControllerProxy *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  API::UserScript **v11;
  uint64_t v12;
  API::UserScript *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  API::UserStyleSheet **v21;
  uint64_t v22;
  API::UserStyleSheet *v23;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 45);
  v5 = v4;
  v7 = v6;
  v8 = *((_QWORD *)this + 45);
  if (v8)
    v9 = (_QWORD *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != v4)
  {
    do
    {
      v10 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v10)
      {
        v11 = (API::UserScript **)v5[1];
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          WebKit::WebUserContentControllerProxy::removeUserScript(a2, v13);
          v12 -= 8;
        }
        while (v12);
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_12;
      }
      v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != v9);
  }
  v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 46);
  v15 = v14;
  v17 = v16;
  v18 = *((_QWORD *)this + 46);
  if (v18)
    v19 = (_QWORD *)(v18 + 24 * *(unsigned int *)(v18 - 4));
  else
    v19 = 0;
  if (v19 != v14)
  {
    do
    {
      v20 = *((unsigned int *)v15 + 5);
      if ((_DWORD)v20)
      {
        v21 = (API::UserStyleSheet **)v15[1];
        v22 = 8 * v20;
        do
        {
          v23 = *v21++;
          WebKit::WebUserContentControllerProxy::removeUserStyleSheet(a2, v23);
          v22 -= 8;
        }
        while (v22);
      }
      while (1)
      {
        v15 += 3;
        if (v15 == v17)
          break;
        if ((unint64_t)(*v15 + 1) > 1)
          goto LABEL_24;
      }
      v15 = v17;
LABEL_24:
      ;
    }
    while (v15 != v19);
  }
}

uint64_t *WebKit::WebExtensionContext::removeExpired(uint64_t a1, uint64_t *a2, double *a3, void *a4)
{
  WTF::WallTime *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl **v25;
  WTF::StringImpl **v27;
  _BYTE v28[24];

  v7 = a4;
  WTF::WallTime::now(v7);
  v11 = v10;
  if (*a3 <= v10)
  {
    *a3 = INFINITY;
    v27 = 0;
    v12 = *a2;
    if (*a2)
    {
      v13 = *(_DWORD *)(v12 - 4);
      if (v13)
      {
        v14 = 0;
        v15 = v13 - 1;
        do
        {
          v16 = v15;
          if ((unint64_t)(*(_QWORD *)(v12 + 16 * v15) + 1) >= 2)
          {
            v17 = *(double *)(v12 + 16 * v15 + 8);
            if (v17 <= v11)
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v27, (WTF::StringImpl **)(v12 + 16 * v15), v9, (uint64_t)v28);
              WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v12 + 16 * v15), v18);
              ++v14;
            }
            else if (v17 < *a3)
            {
              *a3 = v17;
            }
          }
          --v15;
        }
        while (v16);
        v19 = *a2;
        if (v14)
        {
          *(_DWORD *)(v19 - 16) += v14;
          v20 = *a2;
          if (*a2)
            v21 = *(_DWORD *)(v20 - 12);
          else
            v21 = 0;
          *(_DWORD *)(v20 - 12) = v21 - v14;
          v19 = *a2;
        }
        if (v19)
        {
          v22 = *(_DWORD *)(v19 - 4);
          v23 = 6 * *(_DWORD *)(v19 - 12);
          if (v22 >= 9 && v23 < v22)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(a2);
        }
      }
      v25 = v27;
      if (v27)
      {
        if (!v7
          || !*((_DWORD *)v27 - 3)
          || (WebKit::WebExtensionContext::postAsyncNotification(a1, v7, &v27), (v25 = v27) != 0))
        {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v8);
        }
      }
    }
  }

  return a2;
}

void sub_19774AB04(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl **a9)
{
  void *v9;

  if (a9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a9, a2);

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::setGrantedPermissions(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  _QWORD *v17;
  const WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  int v23;
  WTF *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  _QWORD *result;
  WTF::StringImpl **v29;
  _BYTE v30[24];
  _QWORD *v31;

  v31 = 0;
  v4 = (WTF::StringImpl ***)(a1 + 144);
  v5 = *(WTF::StringImpl ***)(a1 + 144);
  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  v8 = v6;
  v10 = v9;
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v31, v8, v7, (uint64_t)v30);
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_9;
      }
      v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != v5);
  }
  *(_QWORD *)(a1 + 160) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 160), 0);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v4, (_QWORD **)a2);
  v29 = 0;
  v11 = *v4;
  v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  v15 = v12;
  v16 = (WTF::StringImpl **)v13;
  if (v11)
    v11 += 2 * *((unsigned int *)v11 - 1);
  if (v11 == v12)
  {
    v27 = 0;
  }
  else
  {
    do
    {
      v17 = v31;
      if (!v31)
      {
LABEL_14:
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v29, v15, v14, (uint64_t)v30);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v29, v15, v18, (uint64_t)v30);
        goto LABEL_15;
      }
      v19 = *((_DWORD *)v31 - 2);
      v20 = *((_DWORD *)*v15 + 4);
      if (v20 >= 0x100)
        v21 = v20 >> 8;
      else
        v21 = WTF::StringImpl::hashSlowCase(*v15);
      for (i = 0; ; v21 = i + v23)
      {
        v23 = v21 & v19;
        v24 = (WTF *)v17[v21 & v19];
        if (v24 != (WTF *)-1)
        {
          if (!v24)
            goto LABEL_14;
          if ((WTF::equal(v24, *v15, v14) & 1) != 0)
            break;
        }
        ++i;
      }
      v25 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v31, v15, v14);
      v13 = (WTF::StringImpl *)v25;
      if (v31)
      {
        v26 = (WTF::StringImpl **)&v31[*((unsigned int *)v31 - 1)];
        if (v26 == v25)
          goto LABEL_15;
      }
      else
      {
        if (!v25)
          goto LABEL_15;
        v26 = 0;
      }
      if (v26 != v25)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)&v31, v25);
LABEL_15:
      while (1)
      {
        v15 += 2;
        if (v15 == v16)
          break;
        if ((unint64_t)*v15 + 1 > 1)
          goto LABEL_19;
      }
      v15 = v16;
LABEL_19:
      ;
    }
    while (v15 != v11);
    v27 = v29;
    if (v29 && *((_DWORD *)v29 - 3))
      goto LABEL_41;
  }
  if (v31 && *((_DWORD *)v31 - 3))
  {
LABEL_41:
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 152), (uint64_t *)&v29, (double *)(a1 + 168), CFSTR("_WKWebExtensionContextDeniedPermissionsWereRemoved"));
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"), &v31);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionsWereGranted"), &v29);
    v27 = v29;
  }
  if (v27)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v13);
  result = v31;
  if (v31)
    return (_QWORD *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v31, v13);
  return result;
}

void sub_19774ADBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::postAsyncNotification(uint64_t a1, void *a2, _QWORD **a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  void *v31;
  _QWORD *v32;
  __int128 v33;
  void *v34;
  void *v35;
  WTF::StringImpl *v36;
  CFTypeRef v37;
  WTF::StringImpl *v38;
  void *v39;
  WTF::StringImpl *v40;
  CFTypeRef v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  int i;
  int v47;
  WTF *v48;
  __int128 v49;
  CFTypeRef v50;
  _QWORD *v51[3];
  WTF::StringImpl *v52[2];
  CFTypeRef cf;
  _QWORD *v54[3];
  _QWORD *v55[2];
  uint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v5 = a2;
  if (!*a3 || !*((_DWORD *)*a3 - 3))
    goto LABEL_53;
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    goto LABEL_41;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)(v7 - 16), v55);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v55, v52);
    if (v55[0])
    {
      v9 = *((unsigned int *)v55[0] - 1);
      v10 = &v55[0][v9];
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    *(_QWORD *)&v49 = v55;
    *((_QWORD *)&v49 + 1) = v10;
    v50 = v10;
    v51[0] = v10;
    v51[1] = &v55[0][v9];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v49);
    while (v52[1] != *((WTF::StringImpl **)&v49 + 1))
    {
      v12 = *(_QWORD *)(*(_QWORD *)v52[1] + 8);
      v13 = *(_QWORD *)(v12 + 136);
      if (v13 && *(_BYTE *)(v13 + 104) || *(_QWORD *)(v12 + 144))
      {
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1599;
        *(_QWORD *)(v14 + 8) = v8;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v58 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits> const&>((IPC::Encoder *)v14, (_QWORD **)(a1 + 144));
        LOBYTE(v56) = 0;
        v57 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v58, 0, (uint64_t)&v56, 1);
        if (v57)
        {
          v16 = v56;
          v56 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        v17 = v58;
        v58 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v15);
          WTF::fastFree(v18, v19);
        }
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v52);
    }
    if (v55[0])
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v55[0], v11);
    MEMORY[0x19AEABCC8](v52, CFSTR("clipboardWrite"));
    v22 = *a3;
    v23 = v52[0];
    if (*a3)
    {
      v43 = *(v22 - 2);
      v44 = *((_DWORD *)v52[0] + 4);
      if (v44 >= 0x100)
        v45 = v44 >> 8;
      else
        v45 = WTF::StringImpl::hashSlowCase(v52[0]);
      for (i = 0; ; v45 = i + v47)
      {
        v47 = v45 & v43;
        v48 = *(WTF **)&v22[2 * (v45 & v43)];
        if (v48 != (WTF *)-1)
        {
          if (!v48)
          {
            LODWORD(v22) = 0;
            goto LABEL_64;
          }
          if ((WTF::equal(v48, v52[0], v21) & 1) != 0)
            break;
        }
        ++i;
      }
      LODWORD(v22) = 1;
LABEL_64:
      v23 = v52[0];
    }
    v52[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v20);
        if (!(_DWORD)v22)
          goto LABEL_33;
        goto LABEL_28;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (!(_DWORD)v22)
      goto LABEL_33;
LABEL_28:
    MEMORY[0x19AEABCC8](v52, CFSTR("clipboardWrite"));
    v25 = WebKit::WebExtensionContext::permissionState(a1, v52, 0, 2) & 0xFFFFFFFE;
    v26 = v52[0];
    v52[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    LOBYTE(v49) = v25 == 2;
    v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v27 = off_1E34F8400;
    *((_QWORD *)v27 + 1) = &v49;
    v52[0] = v27;
    WebKit::WebExtensionContext::enumerateExtensionPages(a1, v52);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
  }
LABEL_33:
  v28 = *(_QWORD *)(a1 + 64);
  if (v28 && *(_QWORD *)(v28 + 8))
  {
    if (objc_msgSend(v5, "isEqualToString:", CFSTR("_WKWebExtensionContextPermissionsWereGranted")))
    {
      v52[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, a3, (_QWORD **)v52);
      goto LABEL_39;
    }
    if (objc_msgSend(v5, "isEqualToString:", CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved")))
    {
      v52[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 22, a3, (_QWORD **)v52);
LABEL_39:
      if (v52[0])
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)v52[0], v29);
    }
  }
LABEL_41:
  *(_QWORD *)&v49 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((_QWORD *)&v49 + 1) = a1;
  WTF::retainPtr<NSString * {__strong}>(&v50, v5);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v51, a3);
  v30 = v49;
  *((_QWORD *)&v49 + 1) = 0;
  *(_OWORD *)v52 = v30;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v50);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  cf = v31;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v54, v51);
  v32 = malloc_type_malloc(0x40uLL, 0x10F2040617B180BuLL);
  *v32 = MEMORY[0x1E0C809A0];
  v32[1] = 50331650;
  v32[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke;
  v32[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::descriptor;
  v33 = *(_OWORD *)v52;
  v52[1] = 0;
  *((_OWORD *)v32 + 2) = v33;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  v32[6] = v34;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v32 + 7, v54);
  v35 = _Block_copy(v32);

  if (v54[0])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v54[0], v36);
  v37 = cf;
  cf = 0;
  if (v37)
    CFRelease(v37);
  v38 = v52[1];
  v52[1] = 0;
  if (v38)
    CFRelease(*((CFTypeRef *)v38 + 1));
  v39 = _Block_copy(v35);
  dispatch_async(MEMORY[0x1E0C80D38], v39);

  if (v51[0])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v51[0], v40);
  v41 = v50;
  v50 = 0;
  if (v41)
    CFRelease(v41);
  v42 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v49 + 1) = 0;
  if (v42)
    CFRelease(*(CFTypeRef *)(v42 + 8));
LABEL_53:

}

{
  id v5;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  WebKit::WebExtensionTab **v10;
  WebKit::WebExtensionTab **v11;
  WebKit::WebExtensionTab *v12;
  _QWORD *v13;
  _BYTE **v14;
  _BYTE **v15;
  _BYTE **v16;
  uint64_t v17;
  _BYTE *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  __int128 v22;
  void *v23;
  _QWORD *v24;
  __int128 v25;
  void *v26;
  void *v27;
  void *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  void *v31;
  void *v32;
  CFTypeRef v33;
  uint64_t v34;
  __int128 v35;
  CFTypeRef v36;
  uint64_t *v37;
  WTF::StringImpl *v38[2];
  CFTypeRef cf;
  _QWORD *v40[3];

  v5 = a2;
  v6 = v5;
  if (!*a3 || !*((_DWORD *)*a3 - 3))
    goto LABEL_42;
  v7 = *(_QWORD *)(a1 + 64);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    if (objc_msgSend(v5, "isEqualToString:", CFSTR("_WKWebExtensionContextPermissionMatchPatternsWereGranted")))
    {
      v38[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, (_QWORD **)v38, a3);
      goto LABEL_9;
    }
    if (objc_msgSend(v6, "isEqualToString:", CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved")))
    {
      v38[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 22, (_QWORD **)v38, a3);
LABEL_9:
      if (v38[0])
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v38[0], v8);
    }
  }
  WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v35);
  if (HIDWORD(v35))
  {
    v10 = (WebKit::WebExtensionTab **)v35;
    v11 = (WebKit::WebExtensionTab **)(v35 + 8 * HIDWORD(v35));
    while (1)
    {
      v12 = *v10;
      ++*(_DWORD *)*v10;
      v13 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a3);
      v14 = (_BYTE **)v13;
      v16 = v15;
      v17 = *a3 ? (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)] : 0;
      if ((_QWORD *)v17 != v13)
        break;
LABEL_29:
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
      if (++v10 == v11)
        goto LABEL_30;
    }
    while (1)
    {
      v18 = *v14;
      WebKit::WebExtensionTab::url(v12, (uint64_t)v38);
      v20 = WebKit::WebExtensionMatchPattern::matchesURL(v18, (WTF::URL *)v38, 0);
      v21 = v38[0];
      v38[0] = 0;
      if (!v21)
        goto LABEL_20;
      if (*(_DWORD *)v21 != 2)
        break;
      WTF::StringImpl::destroy(v21, v19);
      if (!v20)
        goto LABEL_24;
LABEL_23:
      WebKit::WebExtensionContext::didChangeTabProperties(a1, v12);
LABEL_24:
      while (++v14 != v16)
      {
        if ((unint64_t)(*v14 + 1) > 1)
          goto LABEL_28;
      }
      v14 = v16;
LABEL_28:
      if (v14 == (_BYTE **)v17)
        goto LABEL_29;
    }
    *(_DWORD *)v21 -= 2;
LABEL_20:
    if (!v20)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_30:
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v9);
  *(_QWORD *)&v35 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((_QWORD *)&v35 + 1) = a1;
  WTF::retainPtr<NSString * {__strong}>(&v36, v6);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v37, a3);
  v22 = v35;
  *((_QWORD *)&v35 + 1) = 0;
  *(_OWORD *)v38 = v22;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v36);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  cf = v23;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)v40, &v37);
  v24 = malloc_type_malloc(0x40uLL, 0x10F2040617B180BuLL);
  *v24 = MEMORY[0x1E0C809A0];
  v24[1] = 50331650;
  v24[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke;
  v24[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::descriptor;
  v25 = *(_OWORD *)v38;
  v38[1] = 0;
  *((_OWORD *)v24 + 2) = v25;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v24[6] = v26;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(v24 + 7, v40);
  v27 = _Block_copy(v24);

  if (v40[0])
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v40[0], v28);
  v29 = cf;
  cf = 0;
  if (v29)
    CFRelease(v29);
  v30 = v38[1];
  v38[1] = 0;
  if (v30)
    CFRelease(*((CFTypeRef *)v30 + 1));
  v31 = _Block_copy(v27);
  dispatch_async(MEMORY[0x1E0C80D38], v31);

  if (v37)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v37, v32);
  v33 = v36;
  v36 = 0;
  if (v33)
    CFRelease(v33);
  v34 = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  if (v34)
    CFRelease(*(CFTypeRef *)(v34 + 8));
LABEL_42:

}

